-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {hashx5f3 : (Int -> Int)}
variable {hashx5f5 : (Int -> Int)}
variable {x1 : Int}
variable {x3 : Int}
variable {hashx5f1 : (Int -> Int)}
variable {hashx5f4 : (Int -> Int)}
variable {hashx5f2 : (Int -> Int)}
variable {x2 : Int}
variable {x3 : Int}
variable {x2 : Int}
variable {hashx5f1 : (Int -> Int)}
variable {hashx5f5 : (Int -> Int)}
variable {hashx5f4 : (Int -> Int)}
variable {hashx5f3 : (Int -> Int)}
variable {x1 : Int}
variable {hashx5f2 : (Int -> Int)}

theorem th0 : (Eq (Ne (hashx5f1 x1) (hashx5f1 x3)) (Not (Eq (hashx5f1 x1) (hashx5f1 x3)))) → (Eq (Ne (hashx5f1 x2) (hashx5f1 x3)) (Not (Eq (hashx5f1 x2) (hashx5f1 x3)))) → (Eq (Ne (hashx5f2 x1) (hashx5f2 x2)) (Not (Eq (hashx5f2 x1) (hashx5f2 x2)))) → (Eq (Ne (hashx5f2 x1) (hashx5f2 x3)) (Not (Eq (hashx5f2 x1) (hashx5f2 x3)))) → (Eq (Ne (hashx5f2 x2) (hashx5f2 x3)) (Not (Eq (hashx5f2 x2) (hashx5f2 x3)))) → (Eq (Ne (hashx5f4 x1) (hashx5f4 x3)) (Not (Eq (hashx5f4 x1) (hashx5f4 x3)))) → (Eq (Ne (hashx5f4 x2) (hashx5f4 x3)) (Not (Eq (hashx5f4 x2) (hashx5f4 x3)))) → (Eq (Ne (hashx5f5 x1) (hashx5f5 x2)) (Not (Eq (hashx5f5 x1) (hashx5f5 x2)))) → (Eq (Ne (hashx5f5 x1) (hashx5f5 x3)) (Not (Eq (hashx5f5 x1) (hashx5f5 x3)))) → (Eq (Ne (hashx5f5 x2) (hashx5f5 x3)) (Not (Eq (hashx5f5 x2) (hashx5f5 x3)))) → (Eq (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (Or (Eq (hashx5f1 x1) x1) (Or (Eq (hashx5f1 x1) x2) (Eq (hashx5f1 x1) x3)))) → (Eq (Eq (hashx5f1 x1) x1) (Eq x1 (hashx5f1 x1))) → (Eq (Eq (hashx5f1 x1) x2) (Eq x2 (hashx5f1 x1))) → (Eq (Eq (hashx5f1 x1) x3) (Eq x3 (hashx5f1 x1))) → (Eq (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (Or (Eq (hashx5f1 x2) x1) (Or (Eq (hashx5f1 x2) x2) (Eq (hashx5f1 x2) x3)))) → (Eq (Eq (hashx5f1 x2) x2) (Eq x2 (hashx5f1 x2))) → (Eq (Eq (hashx5f1 x2) x3) (Eq x3 (hashx5f1 x2))) → (Eq (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (Or (Eq (hashx5f1 x3) x1) (Or (Eq (hashx5f1 x3) x2) (Eq (hashx5f1 x3) x3)))) → (Eq (Eq (hashx5f1 x3) x1) (Eq x1 (hashx5f1 x3))) → (Eq (Eq (hashx5f1 x3) x2) (Eq x2 (hashx5f1 x3))) → (Eq (Eq (hashx5f1 x3) x3) (Eq x3 (hashx5f1 x3))) → (Eq (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (Or (Eq (hashx5f2 x1) x1) (Or (Eq (hashx5f2 x1) x2) (Eq (hashx5f2 x1) x3)))) → (Eq (Eq (hashx5f2 x1) x1) (Eq x1 (hashx5f2 x1))) → (Eq (Eq (hashx5f2 x1) x2) (Eq x2 (hashx5f2 x1))) → (Eq (Eq (hashx5f4 x3) x1) (Eq x1 (hashx5f4 x3))) → (Eq (Eq (hashx5f4 x3) x2) (Eq x2 (hashx5f4 x3))) → (Eq (Eq (hashx5f4 x3) x3) (Eq x3 (hashx5f4 x3))) → (Eq (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (Or (Eq (hashx5f4 x1) x1) (Or (Eq (hashx5f4 x1) x2) (Eq (hashx5f4 x1) x3)))) → (Eq (Or (Or (Eq (hashx5f5 x1) x1) (Eq (hashx5f5 x1) x2)) (Eq (hashx5f5 x1) x3)) (Or (Eq (hashx5f5 x1) x1) (Or (Eq (hashx5f5 x1) x2) (Eq (hashx5f5 x1) x3)))) → (Eq (Eq (hashx5f5 x3) x3) (Eq x3 (hashx5f5 x3))) → (Eq (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) True) → (Eq (Eq (hashx5f5 x1) x1) (Eq x1 (hashx5f5 x1))) → (Eq (Eq (hashx5f5 x1) x2) (Eq x2 (hashx5f5 x1))) → (Eq (Eq (hashx5f5 x1) x3) (Eq x3 (hashx5f5 x1))) → (Eq (Or (Or (Eq (hashx5f5 x3) x1) (Eq (hashx5f5 x3) x2)) (Eq (hashx5f5 x3) x3)) (Or (Eq (hashx5f5 x3) x1) (Or (Eq (hashx5f5 x3) x2) (Eq (hashx5f5 x3) x3)))) → (Eq (Eq (hashx5f1 x2) x1) (Eq x1 (hashx5f1 x2))) → (Eq (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1))) → (Eq (Eq (hashx5f5 x3) x2) (Eq x2 (hashx5f5 x3))) → (Eq (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (Or (Eq (hashx5f4 x2) x1) (Or (Eq (hashx5f4 x2) x2) (Eq (hashx5f4 x2) x3)))) → (Eq (Ne x1 x2) (Not (Eq x1 x2))) → (Eq (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (Or (Eq (hashx5f3 x3) x1) (Or (Eq (hashx5f3 x3) x2) (Eq (hashx5f3 x3) x3)))) → (Eq (Eq (hashx5f5 x3) x1) (Eq x1 (hashx5f5 x3))) → (Eq (And (Not (Eq (hashx5f1 x1) (hashx5f1 x2))) (And (Not (Eq (hashx5f1 x1) (hashx5f1 x3))) (And (Not (Eq (hashx5f1 x2) (hashx5f1 x3))) (And (Not (Eq (hashx5f2 x1) (hashx5f2 x2))) (And (Not (Eq (hashx5f2 x1) (hashx5f2 x3))) (And (Not (Eq (hashx5f2 x2) (hashx5f2 x3))) (And (Not (Eq (hashx5f3 x1) (hashx5f3 x2))) (And (Not (Eq (hashx5f3 x1) (hashx5f3 x3))) (And (Not (Eq (hashx5f3 x2) (hashx5f3 x3))) (And (Not (Eq (hashx5f4 x1) (hashx5f4 x2))) (And (Not (Eq (hashx5f4 x1) (hashx5f4 x3))) (And (Not (Eq (hashx5f4 x2) (hashx5f4 x3))) (And (Not (Eq (hashx5f5 x1) (hashx5f5 x2))) (And (Not (Eq (hashx5f5 x1) (hashx5f5 x3))) (And (Not (Eq (hashx5f5 x2) (hashx5f5 x3))) (And (Or (Eq x1 (hashx5f1 x1)) (Or (Eq x2 (hashx5f1 x1)) (Eq x3 (hashx5f1 x1)))) (And (Or (Eq x1 (hashx5f1 x2)) (Or (Eq x2 (hashx5f1 x2)) (Eq x3 (hashx5f1 x2)))) (And (Or (Eq x1 (hashx5f1 x3)) (Or (Eq x2 (hashx5f1 x3)) (Eq x3 (hashx5f1 x3)))) (And (Or (Eq x1 (hashx5f2 x1)) (Or (Eq x2 (hashx5f2 x1)) (Eq x3 (hashx5f2 x1)))) (And (Or (Eq x1 (hashx5f2 x2)) (Or (Eq x2 (hashx5f2 x2)) (Eq x3 (hashx5f2 x2)))) (And (Or (Eq x1 (hashx5f2 x3)) (Or (Eq x2 (hashx5f2 x3)) (Eq x3 (hashx5f2 x3)))) (And (Or (Eq x1 (hashx5f3 x1)) (Or (Eq x2 (hashx5f3 x1)) (Eq x3 (hashx5f3 x1)))) (And (Or (Eq x1 (hashx5f3 x2)) (Or (Eq x2 (hashx5f3 x2)) (Eq x3 (hashx5f3 x2)))) (And (Or (Eq x1 (hashx5f3 x3)) (Or (Eq x2 (hashx5f3 x3)) (Eq x3 (hashx5f3 x3)))) (And (Or (Eq x1 (hashx5f4 x1)) (Or (Eq x2 (hashx5f4 x1)) (Eq x3 (hashx5f4 x1)))) (And (Or (Eq x1 (hashx5f4 x2)) (Or (Eq x2 (hashx5f4 x2)) (Eq x3 (hashx5f4 x2)))) (And (Or (Eq x1 (hashx5f4 x3)) (Or (Eq x2 (hashx5f4 x3)) (Eq x3 (hashx5f4 x3)))) (And (Or (Eq x1 (hashx5f5 x1)) (Or (Eq x2 (hashx5f5 x1)) (Eq x3 (hashx5f5 x1)))) (And (Or (Eq x1 (hashx5f5 x2)) (Or (Eq x2 (hashx5f5 x2)) (Eq x3 (hashx5f5 x2)))) (And (Or (Eq x1 (hashx5f5 x3)) (Or (Eq x2 (hashx5f5 x3)) (Eq x3 (hashx5f5 x3)))) (And (Not (Eq x1 x2)) (And (Not (Eq x1 x3)) (And (Not (Eq x2 x3)) (And (binrel% GE.ge x1 (Int.ofNat 0)) (And (Not (binrel% GE.ge x1 (Int.ofNat 4))) (And (binrel% GE.ge x2 (Int.ofNat 0)) (And (Not (binrel% GE.ge x2 (Int.ofNat 4))) (And (binrel% GE.ge x3 (Int.ofNat 0)) (And (Not (binrel% GE.ge x3 (Int.ofNat 4))) False))))))))))))))))))))))))))))))))))))))) False) → (Eq (Not True) False) → (Eq (Eq (hashx5f5 x2) x2) (Eq x2 (hashx5f5 x2))) → (Eq (binrel% LT.lt x1 (Int.ofNat 4)) (Not (binrel% GE.ge x1 (Int.ofNat 4)))) → (Eq (Eq (hashx5f3 x1) x1) (Eq x1 (hashx5f3 x1))) → (Eq (Eq (hashx5f5 x2) x3) (Eq x3 (hashx5f5 x2))) → (Eq (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (Or (Eq (hashx5f4 x3) x1) (Or (Eq (hashx5f4 x3) x2) (Eq (hashx5f4 x3) x3)))) → (Eq (binrel% LE.le (Int.ofNat 0) x2) (binrel% GE.ge x2 (Int.ofNat 0))) → (Eq (Eq (hashx5f3 x1) x2) (Eq x2 (hashx5f3 x1))) → (Eq (Or (Or (Eq (hashx5f5 x2) x1) (Eq (hashx5f5 x2) x2)) (Eq (hashx5f5 x2) x3)) (Or (Eq (hashx5f5 x2) x1) (Or (Eq (hashx5f5 x2) x2) (Eq (hashx5f5 x2) x3)))) → (Eq (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (Ne (hashx5f1 x1) (hashx5f1 x3))) (Ne (hashx5f1 x2) (hashx5f1 x3))) (Ne (hashx5f2 x1) (hashx5f2 x2))) (Ne (hashx5f2 x1) (hashx5f2 x3))) (Ne (hashx5f2 x2) (hashx5f2 x3))) (Ne (hashx5f3 x1) (hashx5f3 x2))) (Ne (hashx5f3 x1) (hashx5f3 x3))) (Ne (hashx5f3 x2) (hashx5f3 x3))) (Ne (hashx5f4 x1) (hashx5f4 x2))) (Ne (hashx5f4 x1) (hashx5f4 x3))) (Ne (hashx5f4 x2) (hashx5f4 x3))) (Ne (hashx5f5 x1) (hashx5f5 x2))) (Ne (hashx5f5 x1) (hashx5f5 x3))) (Ne (hashx5f5 x2) (hashx5f5 x3))) (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3))) (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3))) (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3))) (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3))) (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3))) (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3))) (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3))) (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3))) (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3))) (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3))) (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3))) (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3))) (Or (Or (Eq (hashx5f5 x1) x1) (Eq (hashx5f5 x1) x2)) (Eq (hashx5f5 x1) x3))) (Or (Or (Eq (hashx5f5 x2) x1) (Eq (hashx5f5 x2) x2)) (Eq (hashx5f5 x2) x3))) (Or (Or (Eq (hashx5f5 x3) x1) (Eq (hashx5f5 x3) x2)) (Eq (hashx5f5 x3) x3))) (Ne x1 x2)) (Ne x1 x3)) (Ne x2 x3)) (binrel% LE.le (Int.ofNat 0) x1)) (binrel% LT.lt x1 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x2)) (binrel% LT.lt x2 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x3)) (binrel% LT.lt x3 (Int.ofNat 4))) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (And (Ne (hashx5f1 x1) (hashx5f1 x3)) (And (Ne (hashx5f1 x2) (hashx5f1 x3)) (And (Ne (hashx5f2 x1) (hashx5f2 x2)) (And (Ne (hashx5f2 x1) (hashx5f2 x3)) (And (Ne (hashx5f2 x2) (hashx5f2 x3)) (And (Ne (hashx5f3 x1) (hashx5f3 x2)) (And (Ne (hashx5f3 x1) (hashx5f3 x3)) (And (Ne (hashx5f3 x2) (hashx5f3 x3)) (And (Ne (hashx5f4 x1) (hashx5f4 x2)) (And (Ne (hashx5f4 x1) (hashx5f4 x3)) (And (Ne (hashx5f4 x2) (hashx5f4 x3)) (And (Ne (hashx5f5 x1) (hashx5f5 x2)) (And (Ne (hashx5f5 x1) (hashx5f5 x3)) (And (Ne (hashx5f5 x2) (hashx5f5 x3)) (And (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (And (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (And (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (And (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (And (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (And (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (And (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (And (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (And (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (And (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (And (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (And (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (And (Or (Or (Eq (hashx5f5 x1) x1) (Eq (hashx5f5 x1) x2)) (Eq (hashx5f5 x1) x3)) (And (Or (Or (Eq (hashx5f5 x2) x1) (Eq (hashx5f5 x2) x2)) (Eq (hashx5f5 x2) x3)) (And (Or (Or (Eq (hashx5f5 x3) x1) (Eq (hashx5f5 x3) x2)) (Eq (hashx5f5 x3) x3)) (And (Ne x1 x2) (And (Ne x1 x3) (And (Ne x2 x3) (And (binrel% LE.le (Int.ofNat 0) x1) (And (binrel% LT.lt x1 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x2) (And (binrel% LT.lt x2 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x3) (And (binrel% LT.lt x3 (Int.ofNat 4)) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)))))))))))))))))))))))))))))))))))))))))) → (Eq (Eq (hashx5f3 x3) x2) (Eq x2 (hashx5f3 x3))) → (Eq (Ne (hashx5f4 x1) (hashx5f4 x2)) (Not (Eq (hashx5f4 x1) (hashx5f4 x2)))) → (Eq (Eq (hashx5f2 x2) x3) (Eq x3 (hashx5f2 x2))) → (Eq (binrel% LT.lt x3 (Int.ofNat 4)) (Not (binrel% GE.ge x3 (Int.ofNat 4)))) → (Eq (Ne (hashx5f3 x2) (hashx5f3 x3)) (Not (Eq (hashx5f3 x2) (hashx5f3 x3)))) → (Eq (Eq (hashx5f2 x2) x2) (Eq x2 (hashx5f2 x2))) → (Eq (binrel% LE.le (Int.ofNat 0) x3) (binrel% GE.ge x3 (Int.ofNat 0))) → (Eq (Ne (hashx5f3 x1) (hashx5f3 x3)) (Not (Eq (hashx5f3 x1) (hashx5f3 x3)))) → (Eq (Eq (hashx5f2 x2) x1) (Eq x1 (hashx5f2 x2))) → (Eq (binrel% LT.lt x2 (Int.ofNat 4)) (Not (binrel% GE.ge x2 (Int.ofNat 4)))) → (Eq (Eq (hashx5f3 x1) x3) (Eq x3 (hashx5f3 x1))) → (Eq (Ne (hashx5f3 x1) (hashx5f3 x2)) (Not (Eq (hashx5f3 x1) (hashx5f3 x2)))) → (Eq (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (Or (Eq (hashx5f2 x2) x1) (Or (Eq (hashx5f2 x2) x2) (Eq (hashx5f2 x2) x3)))) → (Eq (Eq (hashx5f5 x2) x1) (Eq x1 (hashx5f5 x2))) → (Eq (Eq (hashx5f4 x2) x3) (Eq x3 (hashx5f4 x2))) → (Eq (binrel% LE.le (Int.ofNat 0) x1) (binrel% GE.ge x1 (Int.ofNat 0))) → (Eq (Ne (hashx5f1 x1) (hashx5f1 x2)) (Not (Eq (hashx5f1 x1) (hashx5f1 x2)))) → (Eq (Eq (hashx5f3 x3) x3) (Eq x3 (hashx5f3 x3))) → (Eq (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) (Not (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)))) → (Eq (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (Or (Eq (hashx5f3 x1) x1) (Or (Eq (hashx5f3 x1) x2) (Eq (hashx5f3 x1) x3)))) → (Eq (Eq (hashx5f3 x3) x1) (Eq x1 (hashx5f3 x3))) → (Eq (Ne x2 x3) (Not (Eq x2 x3))) → (Eq (Eq (hashx5f4 x2) x2) (Eq x2 (hashx5f4 x2))) → (Eq (Ne x1 x3) (Not (Eq x1 x3))) → (Eq (Eq (hashx5f4 x2) x1) (Eq x1 (hashx5f4 x2))) → (Eq (Eq (hashx5f4 x1) x3) (Eq x3 (hashx5f4 x1))) → (Eq (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (Or (Eq (hashx5f3 x2) x1) (Or (Eq (hashx5f3 x2) x2) (Eq (hashx5f3 x2) x3)))) → (Eq (Eq (hashx5f4 x1) x2) (Eq x2 (hashx5f4 x1))) → (Eq (Eq (hashx5f4 x1) x1) (Eq x1 (hashx5f4 x1))) → (Eq (Eq (hashx5f3 x2) x3) (Eq x3 (hashx5f3 x2))) → (Eq (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (Or (Eq (hashx5f2 x3) x1) (Or (Eq (hashx5f2 x3) x2) (Eq (hashx5f2 x3) x3)))) → (Eq (Eq (hashx5f3 x2) x2) (Eq x2 (hashx5f3 x2))) → (Eq (Eq (hashx5f3 x2) x1) (Eq x1 (hashx5f3 x2))) → (Eq (Eq (hashx5f2 x3) x3) (Eq x3 (hashx5f2 x3))) → (Eq (Eq (hashx5f2 x3) x2) (Eq x2 (hashx5f2 x3))) → (Eq (Eq (hashx5f2 x3) x1) (Eq x1 (hashx5f2 x3))) → (Eq (Eq (hashx5f2 x1) x3) (Eq x3 (hashx5f2 x1))) → (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (Ne (hashx5f1 x1) (hashx5f1 x3))) (Ne (hashx5f1 x2) (hashx5f1 x3))) (Ne (hashx5f2 x1) (hashx5f2 x2))) (Ne (hashx5f2 x1) (hashx5f2 x3))) (Ne (hashx5f2 x2) (hashx5f2 x3))) (Ne (hashx5f3 x1) (hashx5f3 x2))) (Ne (hashx5f3 x1) (hashx5f3 x3))) (Ne (hashx5f3 x2) (hashx5f3 x3))) (Ne (hashx5f4 x1) (hashx5f4 x2))) (Ne (hashx5f4 x1) (hashx5f4 x3))) (Ne (hashx5f4 x2) (hashx5f4 x3))) (Ne (hashx5f5 x1) (hashx5f5 x2))) (Ne (hashx5f5 x1) (hashx5f5 x3))) (Ne (hashx5f5 x2) (hashx5f5 x3))) (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3))) (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3))) (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3))) (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3))) (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3))) (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3))) (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3))) (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3))) (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3))) (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3))) (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3))) (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3))) (Or (Or (Eq (hashx5f5 x1) x1) (Eq (hashx5f5 x1) x2)) (Eq (hashx5f5 x1) x3))) (Or (Or (Eq (hashx5f5 x2) x1) (Eq (hashx5f5 x2) x2)) (Eq (hashx5f5 x2) x3))) (Or (Or (Eq (hashx5f5 x3) x1) (Eq (hashx5f5 x3) x2)) (Eq (hashx5f5 x3) x3))) (Ne x1 x2)) (Ne x1 x3)) (Ne x2 x3)) (binrel% LE.le (Int.ofNat 0) x1)) (binrel% LT.lt x1 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x2)) (binrel% LT.lt x2 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x3)) (binrel% LT.lt x3 (Int.ofNat 4))) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) → False :=
fun lean_r0 : (Eq (Ne (hashx5f1 x1) (hashx5f1 x3)) (Not (Eq (hashx5f1 x1) (hashx5f1 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r1 : (Eq (Ne (hashx5f1 x2) (hashx5f1 x3)) (Not (Eq (hashx5f1 x2) (hashx5f1 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r2 : (Eq (Ne (hashx5f2 x1) (hashx5f2 x2)) (Not (Eq (hashx5f2 x1) (hashx5f2 x2)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r3 : (Eq (Ne (hashx5f2 x1) (hashx5f2 x3)) (Not (Eq (hashx5f2 x1) (hashx5f2 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r4 : (Eq (Ne (hashx5f2 x2) (hashx5f2 x3)) (Not (Eq (hashx5f2 x2) (hashx5f2 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r5 : (Eq (Ne (hashx5f4 x1) (hashx5f4 x3)) (Not (Eq (hashx5f4 x1) (hashx5f4 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r6 : (Eq (Ne (hashx5f4 x2) (hashx5f4 x3)) (Not (Eq (hashx5f4 x2) (hashx5f4 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r7 : (Eq (Ne (hashx5f5 x1) (hashx5f5 x2)) (Not (Eq (hashx5f5 x1) (hashx5f5 x2)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r8 : (Eq (Ne (hashx5f5 x1) (hashx5f5 x3)) (Not (Eq (hashx5f5 x1) (hashx5f5 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r9 : (Eq (Ne (hashx5f5 x2) (hashx5f5 x3)) (Not (Eq (hashx5f5 x2) (hashx5f5 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r10 : (Eq (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (Or (Eq (hashx5f1 x1) x1) (Or (Eq (hashx5f1 x1) x2) (Eq (hashx5f1 x1) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq (Eq (hashx5f1 x1) x1) (Eq x1 (hashx5f1 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (Eq (hashx5f1 x1) x2) (Eq x2 (hashx5f1 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (Eq (hashx5f1 x1) x3) (Eq x3 (hashx5f1 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (Or (Eq (hashx5f1 x2) x1) (Or (Eq (hashx5f1 x2) x2) (Eq (hashx5f1 x2) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq (Eq (hashx5f1 x2) x2) (Eq x2 (hashx5f1 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (Eq (hashx5f1 x2) x3) (Eq x3 (hashx5f1 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (Or (Eq (hashx5f1 x3) x1) (Or (Eq (hashx5f1 x3) x2) (Eq (hashx5f1 x3) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq (Eq (hashx5f1 x3) x1) (Eq x1 (hashx5f1 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (Eq (hashx5f1 x3) x2) (Eq x2 (hashx5f1 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (Eq (hashx5f1 x3) x3) (Eq x3 (hashx5f1 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (Or (Eq (hashx5f2 x1) x1) (Or (Eq (hashx5f2 x1) x2) (Eq (hashx5f2 x1) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq (Eq (hashx5f2 x1) x1) (Eq x1 (hashx5f2 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq (Eq (hashx5f2 x1) x2) (Eq x2 (hashx5f2 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq (Eq (hashx5f4 x3) x1) (Eq x1 (hashx5f4 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (Eq (hashx5f4 x3) x2) (Eq x2 (hashx5f4 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq (Eq (hashx5f4 x3) x3) (Eq x3 (hashx5f4 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (Or (Eq (hashx5f4 x1) x1) (Or (Eq (hashx5f4 x1) x2) (Eq (hashx5f4 x1) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq (Or (Or (Eq (hashx5f5 x1) x1) (Eq (hashx5f5 x1) x2)) (Eq (hashx5f5 x1) x3)) (Or (Eq (hashx5f5 x1) x1) (Or (Eq (hashx5f5 x1) x2) (Eq (hashx5f5 x1) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq (Eq (hashx5f5 x3) x3) (Eq x3 (hashx5f5 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) True) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq (Eq (hashx5f5 x1) x1) (Eq x1 (hashx5f5 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq (Eq (hashx5f5 x1) x2) (Eq x2 (hashx5f5 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq (Eq (hashx5f5 x1) x3) (Eq x3 (hashx5f5 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq (Or (Or (Eq (hashx5f5 x3) x1) (Eq (hashx5f5 x3) x2)) (Eq (hashx5f5 x3) x3)) (Or (Eq (hashx5f5 x3) x1) (Or (Eq (hashx5f5 x3) x2) (Eq (hashx5f5 x3) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq (Eq (hashx5f1 x2) x1) (Eq x1 (hashx5f1 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq (Eq (hashx5f5 x3) x2) (Eq x2 (hashx5f5 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (Or (Eq (hashx5f4 x2) x1) (Or (Eq (hashx5f4 x2) x2) (Eq (hashx5f4 x2) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq (Ne x1 x2) (Not (Eq x1 x2))) => -- THEORY_REWRITE_BUILTIN
fun lean_r40 : (Eq (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (Or (Eq (hashx5f3 x3) x1) (Or (Eq (hashx5f3 x3) x2) (Eq (hashx5f3 x3) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq (Eq (hashx5f5 x3) x1) (Eq x1 (hashx5f5 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq (And (Not (Eq (hashx5f1 x1) (hashx5f1 x2))) (And (Not (Eq (hashx5f1 x1) (hashx5f1 x3))) (And (Not (Eq (hashx5f1 x2) (hashx5f1 x3))) (And (Not (Eq (hashx5f2 x1) (hashx5f2 x2))) (And (Not (Eq (hashx5f2 x1) (hashx5f2 x3))) (And (Not (Eq (hashx5f2 x2) (hashx5f2 x3))) (And (Not (Eq (hashx5f3 x1) (hashx5f3 x2))) (And (Not (Eq (hashx5f3 x1) (hashx5f3 x3))) (And (Not (Eq (hashx5f3 x2) (hashx5f3 x3))) (And (Not (Eq (hashx5f4 x1) (hashx5f4 x2))) (And (Not (Eq (hashx5f4 x1) (hashx5f4 x3))) (And (Not (Eq (hashx5f4 x2) (hashx5f4 x3))) (And (Not (Eq (hashx5f5 x1) (hashx5f5 x2))) (And (Not (Eq (hashx5f5 x1) (hashx5f5 x3))) (And (Not (Eq (hashx5f5 x2) (hashx5f5 x3))) (And (Or (Eq x1 (hashx5f1 x1)) (Or (Eq x2 (hashx5f1 x1)) (Eq x3 (hashx5f1 x1)))) (And (Or (Eq x1 (hashx5f1 x2)) (Or (Eq x2 (hashx5f1 x2)) (Eq x3 (hashx5f1 x2)))) (And (Or (Eq x1 (hashx5f1 x3)) (Or (Eq x2 (hashx5f1 x3)) (Eq x3 (hashx5f1 x3)))) (And (Or (Eq x1 (hashx5f2 x1)) (Or (Eq x2 (hashx5f2 x1)) (Eq x3 (hashx5f2 x1)))) (And (Or (Eq x1 (hashx5f2 x2)) (Or (Eq x2 (hashx5f2 x2)) (Eq x3 (hashx5f2 x2)))) (And (Or (Eq x1 (hashx5f2 x3)) (Or (Eq x2 (hashx5f2 x3)) (Eq x3 (hashx5f2 x3)))) (And (Or (Eq x1 (hashx5f3 x1)) (Or (Eq x2 (hashx5f3 x1)) (Eq x3 (hashx5f3 x1)))) (And (Or (Eq x1 (hashx5f3 x2)) (Or (Eq x2 (hashx5f3 x2)) (Eq x3 (hashx5f3 x2)))) (And (Or (Eq x1 (hashx5f3 x3)) (Or (Eq x2 (hashx5f3 x3)) (Eq x3 (hashx5f3 x3)))) (And (Or (Eq x1 (hashx5f4 x1)) (Or (Eq x2 (hashx5f4 x1)) (Eq x3 (hashx5f4 x1)))) (And (Or (Eq x1 (hashx5f4 x2)) (Or (Eq x2 (hashx5f4 x2)) (Eq x3 (hashx5f4 x2)))) (And (Or (Eq x1 (hashx5f4 x3)) (Or (Eq x2 (hashx5f4 x3)) (Eq x3 (hashx5f4 x3)))) (And (Or (Eq x1 (hashx5f5 x1)) (Or (Eq x2 (hashx5f5 x1)) (Eq x3 (hashx5f5 x1)))) (And (Or (Eq x1 (hashx5f5 x2)) (Or (Eq x2 (hashx5f5 x2)) (Eq x3 (hashx5f5 x2)))) (And (Or (Eq x1 (hashx5f5 x3)) (Or (Eq x2 (hashx5f5 x3)) (Eq x3 (hashx5f5 x3)))) (And (Not (Eq x1 x2)) (And (Not (Eq x1 x3)) (And (Not (Eq x2 x3)) (And (binrel% GE.ge x1 (Int.ofNat 0)) (And (Not (binrel% GE.ge x1 (Int.ofNat 4))) (And (binrel% GE.ge x2 (Int.ofNat 0)) (And (Not (binrel% GE.ge x2 (Int.ofNat 4))) (And (binrel% GE.ge x3 (Int.ofNat 0)) (And (Not (binrel% GE.ge x3 (Int.ofNat 4))) False))))))))))))))))))))))))))))))))))))))) False) => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq (Eq (hashx5f5 x2) x2) (Eq x2 (hashx5f5 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq (binrel% LT.lt x1 (Int.ofNat 4)) (Not (binrel% GE.ge x1 (Int.ofNat 4)))) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq (Eq (hashx5f3 x1) x1) (Eq x1 (hashx5f3 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq (Eq (hashx5f5 x2) x3) (Eq x3 (hashx5f5 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (Or (Eq (hashx5f4 x3) x1) (Or (Eq (hashx5f4 x3) x2) (Eq (hashx5f4 x3) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r49 : (Eq (binrel% LE.le (Int.ofNat 0) x2) (binrel% GE.ge x2 (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq (Eq (hashx5f3 x1) x2) (Eq x2 (hashx5f3 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq (Or (Or (Eq (hashx5f5 x2) x1) (Eq (hashx5f5 x2) x2)) (Eq (hashx5f5 x2) x3)) (Or (Eq (hashx5f5 x2) x1) (Or (Eq (hashx5f5 x2) x2) (Eq (hashx5f5 x2) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r52 : (Eq (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (Ne (hashx5f1 x1) (hashx5f1 x3))) (Ne (hashx5f1 x2) (hashx5f1 x3))) (Ne (hashx5f2 x1) (hashx5f2 x2))) (Ne (hashx5f2 x1) (hashx5f2 x3))) (Ne (hashx5f2 x2) (hashx5f2 x3))) (Ne (hashx5f3 x1) (hashx5f3 x2))) (Ne (hashx5f3 x1) (hashx5f3 x3))) (Ne (hashx5f3 x2) (hashx5f3 x3))) (Ne (hashx5f4 x1) (hashx5f4 x2))) (Ne (hashx5f4 x1) (hashx5f4 x3))) (Ne (hashx5f4 x2) (hashx5f4 x3))) (Ne (hashx5f5 x1) (hashx5f5 x2))) (Ne (hashx5f5 x1) (hashx5f5 x3))) (Ne (hashx5f5 x2) (hashx5f5 x3))) (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3))) (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3))) (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3))) (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3))) (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3))) (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3))) (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3))) (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3))) (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3))) (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3))) (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3))) (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3))) (Or (Or (Eq (hashx5f5 x1) x1) (Eq (hashx5f5 x1) x2)) (Eq (hashx5f5 x1) x3))) (Or (Or (Eq (hashx5f5 x2) x1) (Eq (hashx5f5 x2) x2)) (Eq (hashx5f5 x2) x3))) (Or (Or (Eq (hashx5f5 x3) x1) (Eq (hashx5f5 x3) x2)) (Eq (hashx5f5 x3) x3))) (Ne x1 x2)) (Ne x1 x3)) (Ne x2 x3)) (binrel% LE.le (Int.ofNat 0) x1)) (binrel% LT.lt x1 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x2)) (binrel% LT.lt x2 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x3)) (binrel% LT.lt x3 (Int.ofNat 4))) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (And (Ne (hashx5f1 x1) (hashx5f1 x3)) (And (Ne (hashx5f1 x2) (hashx5f1 x3)) (And (Ne (hashx5f2 x1) (hashx5f2 x2)) (And (Ne (hashx5f2 x1) (hashx5f2 x3)) (And (Ne (hashx5f2 x2) (hashx5f2 x3)) (And (Ne (hashx5f3 x1) (hashx5f3 x2)) (And (Ne (hashx5f3 x1) (hashx5f3 x3)) (And (Ne (hashx5f3 x2) (hashx5f3 x3)) (And (Ne (hashx5f4 x1) (hashx5f4 x2)) (And (Ne (hashx5f4 x1) (hashx5f4 x3)) (And (Ne (hashx5f4 x2) (hashx5f4 x3)) (And (Ne (hashx5f5 x1) (hashx5f5 x2)) (And (Ne (hashx5f5 x1) (hashx5f5 x3)) (And (Ne (hashx5f5 x2) (hashx5f5 x3)) (And (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (And (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (And (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (And (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (And (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (And (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (And (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (And (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (And (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (And (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (And (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (And (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (And (Or (Or (Eq (hashx5f5 x1) x1) (Eq (hashx5f5 x1) x2)) (Eq (hashx5f5 x1) x3)) (And (Or (Or (Eq (hashx5f5 x2) x1) (Eq (hashx5f5 x2) x2)) (Eq (hashx5f5 x2) x3)) (And (Or (Or (Eq (hashx5f5 x3) x1) (Eq (hashx5f5 x3) x2)) (Eq (hashx5f5 x3) x3)) (And (Ne x1 x2) (And (Ne x1 x3) (And (Ne x2 x3) (And (binrel% LE.le (Int.ofNat 0) x1) (And (binrel% LT.lt x1 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x2) (And (binrel% LT.lt x2 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x3) (And (binrel% LT.lt x3 (Int.ofNat 4)) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)))))))))))))))))))))))))))))))))))))))))) => -- THEORY_REWRITE_BOOL
fun lean_r53 : (Eq (Eq (hashx5f3 x3) x2) (Eq x2 (hashx5f3 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq (Ne (hashx5f4 x1) (hashx5f4 x2)) (Not (Eq (hashx5f4 x1) (hashx5f4 x2)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r55 : (Eq (Eq (hashx5f2 x2) x3) (Eq x3 (hashx5f2 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq (binrel% LT.lt x3 (Int.ofNat 4)) (Not (binrel% GE.ge x3 (Int.ofNat 4)))) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq (Ne (hashx5f3 x2) (hashx5f3 x3)) (Not (Eq (hashx5f3 x2) (hashx5f3 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r58 : (Eq (Eq (hashx5f2 x2) x2) (Eq x2 (hashx5f2 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq (binrel% LE.le (Int.ofNat 0) x3) (binrel% GE.ge x3 (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq (Ne (hashx5f3 x1) (hashx5f3 x3)) (Not (Eq (hashx5f3 x1) (hashx5f3 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r61 : (Eq (Eq (hashx5f2 x2) x1) (Eq x1 (hashx5f2 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r62 : (Eq (binrel% LT.lt x2 (Int.ofNat 4)) (Not (binrel% GE.ge x2 (Int.ofNat 4)))) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq (Eq (hashx5f3 x1) x3) (Eq x3 (hashx5f3 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq (Ne (hashx5f3 x1) (hashx5f3 x2)) (Not (Eq (hashx5f3 x1) (hashx5f3 x2)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r65 : (Eq (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (Or (Eq (hashx5f2 x2) x1) (Or (Eq (hashx5f2 x2) x2) (Eq (hashx5f2 x2) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r66 : (Eq (Eq (hashx5f5 x2) x1) (Eq x1 (hashx5f5 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq (Eq (hashx5f4 x2) x3) (Eq x3 (hashx5f4 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r68 : (Eq (binrel% LE.le (Int.ofNat 0) x1) (binrel% GE.ge x1 (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r69 : (Eq (Ne (hashx5f1 x1) (hashx5f1 x2)) (Not (Eq (hashx5f1 x1) (hashx5f1 x2)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r70 : (Eq (Eq (hashx5f3 x3) x3) (Eq x3 (hashx5f3 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r71 : (Eq (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) (Not (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r72 : (Eq (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (Or (Eq (hashx5f3 x1) x1) (Or (Eq (hashx5f3 x1) x2) (Eq (hashx5f3 x1) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r73 : (Eq (Eq (hashx5f3 x3) x1) (Eq x1 (hashx5f3 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq (Ne x2 x3) (Not (Eq x2 x3))) => -- THEORY_REWRITE_BUILTIN
fun lean_r75 : (Eq (Eq (hashx5f4 x2) x2) (Eq x2 (hashx5f4 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r76 : (Eq (Ne x1 x3) (Not (Eq x1 x3))) => -- THEORY_REWRITE_BUILTIN
fun lean_r77 : (Eq (Eq (hashx5f4 x2) x1) (Eq x1 (hashx5f4 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r78 : (Eq (Eq (hashx5f4 x1) x3) (Eq x3 (hashx5f4 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r79 : (Eq (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (Or (Eq (hashx5f3 x2) x1) (Or (Eq (hashx5f3 x2) x2) (Eq (hashx5f3 x2) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r80 : (Eq (Eq (hashx5f4 x1) x2) (Eq x2 (hashx5f4 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r81 : (Eq (Eq (hashx5f4 x1) x1) (Eq x1 (hashx5f4 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r82 : (Eq (Eq (hashx5f3 x2) x3) (Eq x3 (hashx5f3 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r83 : (Eq (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (Or (Eq (hashx5f2 x3) x1) (Or (Eq (hashx5f2 x3) x2) (Eq (hashx5f2 x3) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r84 : (Eq (Eq (hashx5f3 x2) x2) (Eq x2 (hashx5f3 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r85 : (Eq (Eq (hashx5f3 x2) x1) (Eq x1 (hashx5f3 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r86 : (Eq (Eq (hashx5f2 x3) x3) (Eq x3 (hashx5f2 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r87 : (Eq (Eq (hashx5f2 x3) x2) (Eq x2 (hashx5f2 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r88 : (Eq (Eq (hashx5f2 x3) x1) (Eq x1 (hashx5f2 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r89 : (Eq (Eq (hashx5f2 x1) x3) (Eq x3 (hashx5f2 x1))) => -- THEORY_REWRITE_ARITH
fun lean_a90 : (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (Ne (hashx5f1 x1) (hashx5f1 x3))) (Ne (hashx5f1 x2) (hashx5f1 x3))) (Ne (hashx5f2 x1) (hashx5f2 x2))) (Ne (hashx5f2 x1) (hashx5f2 x3))) (Ne (hashx5f2 x2) (hashx5f2 x3))) (Ne (hashx5f3 x1) (hashx5f3 x2))) (Ne (hashx5f3 x1) (hashx5f3 x3))) (Ne (hashx5f3 x2) (hashx5f3 x3))) (Ne (hashx5f4 x1) (hashx5f4 x2))) (Ne (hashx5f4 x1) (hashx5f4 x3))) (Ne (hashx5f4 x2) (hashx5f4 x3))) (Ne (hashx5f5 x1) (hashx5f5 x2))) (Ne (hashx5f5 x1) (hashx5f5 x3))) (Ne (hashx5f5 x2) (hashx5f5 x3))) (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3))) (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3))) (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3))) (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3))) (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3))) (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3))) (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3))) (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3))) (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3))) (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3))) (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3))) (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3))) (Or (Or (Eq (hashx5f5 x1) x1) (Eq (hashx5f5 x1) x2)) (Eq (hashx5f5 x1) x3))) (Or (Or (Eq (hashx5f5 x2) x1) (Eq (hashx5f5 x2) x2)) (Eq (hashx5f5 x2) x3))) (Or (Or (Eq (hashx5f5 x3) x1) (Eq (hashx5f5 x3) x2)) (Eq (hashx5f5 x3) x3))) (Ne x1 x2)) (Ne x1 x3)) (Ne x2 x3)) (binrel% LE.le (Int.ofNat 0) x1)) (binrel% LT.lt x1 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x2)) (binrel% LT.lt x2 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x3)) (binrel% LT.lt x3 (Int.ofNat 4))) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) => by
have lean_s0 : (Eq And And) := by timed rfl
let lean_s1 := by timed congr lean_s0 lean_r69
let lean_s2 := by timed congr lean_s0 lean_r0
let lean_s3 := by timed congr lean_s0 lean_r1
let lean_s4 := by timed congr lean_s0 lean_r2
let lean_s5 := by timed congr lean_s0 lean_r3
let lean_s6 := by timed congr lean_s0 lean_r4
let lean_s7 := by timed congr lean_s0 lean_r64
let lean_s8 := by timed congr lean_s0 lean_r60
let lean_s9 := by timed congr lean_s0 lean_r57
let lean_s10 := by timed congr lean_s0 lean_r54
let lean_s11 := by timed congr lean_s0 lean_r5
let lean_s12 := by timed congr lean_s0 lean_r6
let lean_s13 := by timed congr lean_s0 lean_r7
let lean_s14 := by timed congr lean_s0 lean_r8
let lean_s15 := by timed congr lean_s0 lean_r9
have lean_s16 : (Eq Or Or) := by timed rfl
let lean_s17 := by timed congr lean_s16 lean_r11
let lean_s18 := by timed congr lean_s16 lean_r12
let lean_s19 := by timed congr lean_s18 lean_r13
have lean_s20 : (Eq (Or (Eq (hashx5f1 x1) x1) (Or (Eq (hashx5f1 x1) x2) (Eq (hashx5f1 x1) x3))) (Or (Eq x1 (hashx5f1 x1)) (Or (Eq x2 (hashx5f1 x1)) (Eq x3 (hashx5f1 x1))))) := by timed congr lean_s17 lean_s19
have lean_s21 : (Eq (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (Or (Eq x1 (hashx5f1 x1)) (Or (Eq x2 (hashx5f1 x1)) (Eq x3 (hashx5f1 x1))))) := by timed Eq.trans lean_r10 lean_s20
let lean_s22 := by timed congr lean_s0 lean_s21
have lean_s23 : (Eq Or Or) := by timed rfl
let lean_s24 := by timed congr lean_s23 lean_r35
let lean_s25 := by timed congr lean_s23 lean_r15
let lean_s26 := by timed congr lean_s25 lean_r16
have lean_s27 : (Eq (Or (Eq (hashx5f1 x2) x1) (Or (Eq (hashx5f1 x2) x2) (Eq (hashx5f1 x2) x3))) (Or (Eq x1 (hashx5f1 x2)) (Or (Eq x2 (hashx5f1 x2)) (Eq x3 (hashx5f1 x2))))) := by timed congr lean_s24 lean_s26
have lean_s28 : (Eq (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (Or (Eq x1 (hashx5f1 x2)) (Or (Eq x2 (hashx5f1 x2)) (Eq x3 (hashx5f1 x2))))) := by timed Eq.trans lean_r14 lean_s27
let lean_s29 := by timed congr lean_s0 lean_s28
have lean_s30 : (Eq Or Or) := by timed rfl
let lean_s31 := by timed congr lean_s30 lean_r18
let lean_s32 := by timed congr lean_s30 lean_r19
let lean_s33 := by timed congr lean_s32 lean_r20
have lean_s34 : (Eq (Or (Eq (hashx5f1 x3) x1) (Or (Eq (hashx5f1 x3) x2) (Eq (hashx5f1 x3) x3))) (Or (Eq x1 (hashx5f1 x3)) (Or (Eq x2 (hashx5f1 x3)) (Eq x3 (hashx5f1 x3))))) := by timed congr lean_s31 lean_s33
have lean_s35 : (Eq (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (Or (Eq x1 (hashx5f1 x3)) (Or (Eq x2 (hashx5f1 x3)) (Eq x3 (hashx5f1 x3))))) := by timed Eq.trans lean_r17 lean_s34
let lean_s36 := by timed congr lean_s0 lean_s35
have lean_s37 : (Eq Or Or) := by timed rfl
let lean_s38 := by timed congr lean_s37 lean_r22
let lean_s39 := by timed congr lean_s37 lean_r23
let lean_s40 := by timed congr lean_s39 lean_r89
have lean_s41 : (Eq (Or (Eq (hashx5f2 x1) x1) (Or (Eq (hashx5f2 x1) x2) (Eq (hashx5f2 x1) x3))) (Or (Eq x1 (hashx5f2 x1)) (Or (Eq x2 (hashx5f2 x1)) (Eq x3 (hashx5f2 x1))))) := by timed congr lean_s38 lean_s40
have lean_s42 : (Eq (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (Or (Eq x1 (hashx5f2 x1)) (Or (Eq x2 (hashx5f2 x1)) (Eq x3 (hashx5f2 x1))))) := by timed Eq.trans lean_r21 lean_s41
let lean_s43 := by timed congr lean_s0 lean_s42
have lean_s44 : (Eq Or Or) := by timed rfl
let lean_s45 := by timed congr lean_s44 lean_r61
let lean_s46 := by timed congr lean_s44 lean_r58
let lean_s47 := by timed congr lean_s46 lean_r55
have lean_s48 : (Eq (Or (Eq (hashx5f2 x2) x1) (Or (Eq (hashx5f2 x2) x2) (Eq (hashx5f2 x2) x3))) (Or (Eq x1 (hashx5f2 x2)) (Or (Eq x2 (hashx5f2 x2)) (Eq x3 (hashx5f2 x2))))) := by timed congr lean_s45 lean_s47
have lean_s49 : (Eq (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (Or (Eq x1 (hashx5f2 x2)) (Or (Eq x2 (hashx5f2 x2)) (Eq x3 (hashx5f2 x2))))) := by timed Eq.trans lean_r65 lean_s48
let lean_s50 := by timed congr lean_s0 lean_s49
have lean_s51 : (Eq Or Or) := by timed rfl
let lean_s52 := by timed congr lean_s51 lean_r88
let lean_s53 := by timed congr lean_s51 lean_r87
let lean_s54 := by timed congr lean_s53 lean_r86
have lean_s55 : (Eq (Or (Eq (hashx5f2 x3) x1) (Or (Eq (hashx5f2 x3) x2) (Eq (hashx5f2 x3) x3))) (Or (Eq x1 (hashx5f2 x3)) (Or (Eq x2 (hashx5f2 x3)) (Eq x3 (hashx5f2 x3))))) := by timed congr lean_s52 lean_s54
have lean_s56 : (Eq (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (Or (Eq x1 (hashx5f2 x3)) (Or (Eq x2 (hashx5f2 x3)) (Eq x3 (hashx5f2 x3))))) := by timed Eq.trans lean_r83 lean_s55
let lean_s57 := by timed congr lean_s0 lean_s56
have lean_s58 : (Eq Or Or) := by timed rfl
let lean_s59 := by timed congr lean_s58 lean_r46
let lean_s60 := by timed congr lean_s58 lean_r50
let lean_s61 := by timed congr lean_s60 lean_r63
have lean_s62 : (Eq (Or (Eq (hashx5f3 x1) x1) (Or (Eq (hashx5f3 x1) x2) (Eq (hashx5f3 x1) x3))) (Or (Eq x1 (hashx5f3 x1)) (Or (Eq x2 (hashx5f3 x1)) (Eq x3 (hashx5f3 x1))))) := by timed congr lean_s59 lean_s61
have lean_s63 : (Eq (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (Or (Eq x1 (hashx5f3 x1)) (Or (Eq x2 (hashx5f3 x1)) (Eq x3 (hashx5f3 x1))))) := by timed Eq.trans lean_r72 lean_s62
let lean_s64 := by timed congr lean_s0 lean_s63
have lean_s65 : (Eq Or Or) := by timed rfl
let lean_s66 := by timed congr lean_s65 lean_r85
let lean_s67 := by timed congr lean_s65 lean_r84
let lean_s68 := by timed congr lean_s67 lean_r82
have lean_s69 : (Eq (Or (Eq (hashx5f3 x2) x1) (Or (Eq (hashx5f3 x2) x2) (Eq (hashx5f3 x2) x3))) (Or (Eq x1 (hashx5f3 x2)) (Or (Eq x2 (hashx5f3 x2)) (Eq x3 (hashx5f3 x2))))) := by timed congr lean_s66 lean_s68
have lean_s70 : (Eq (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (Or (Eq x1 (hashx5f3 x2)) (Or (Eq x2 (hashx5f3 x2)) (Eq x3 (hashx5f3 x2))))) := by timed Eq.trans lean_r79 lean_s69
let lean_s71 := by timed congr lean_s0 lean_s70
have lean_s72 : (Eq Or Or) := by timed rfl
let lean_s73 := by timed congr lean_s72 lean_r73
let lean_s74 := by timed congr lean_s72 lean_r53
let lean_s75 := by timed congr lean_s74 lean_r70
have lean_s76 : (Eq (Or (Eq (hashx5f3 x3) x1) (Or (Eq (hashx5f3 x3) x2) (Eq (hashx5f3 x3) x3))) (Or (Eq x1 (hashx5f3 x3)) (Or (Eq x2 (hashx5f3 x3)) (Eq x3 (hashx5f3 x3))))) := by timed congr lean_s73 lean_s75
have lean_s77 : (Eq (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (Or (Eq x1 (hashx5f3 x3)) (Or (Eq x2 (hashx5f3 x3)) (Eq x3 (hashx5f3 x3))))) := by timed Eq.trans lean_r40 lean_s76
let lean_s78 := by timed congr lean_s0 lean_s77
have lean_s79 : (Eq Or Or) := by timed rfl
let lean_s80 := by timed congr lean_s79 lean_r81
let lean_s81 := by timed congr lean_s79 lean_r80
let lean_s82 := by timed congr lean_s81 lean_r78
have lean_s83 : (Eq (Or (Eq (hashx5f4 x1) x1) (Or (Eq (hashx5f4 x1) x2) (Eq (hashx5f4 x1) x3))) (Or (Eq x1 (hashx5f4 x1)) (Or (Eq x2 (hashx5f4 x1)) (Eq x3 (hashx5f4 x1))))) := by timed congr lean_s80 lean_s82
have lean_s84 : (Eq (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (Or (Eq x1 (hashx5f4 x1)) (Or (Eq x2 (hashx5f4 x1)) (Eq x3 (hashx5f4 x1))))) := by timed Eq.trans lean_r27 lean_s83
let lean_s85 := by timed congr lean_s0 lean_s84
have lean_s86 : (Eq Or Or) := by timed rfl
let lean_s87 := by timed congr lean_s86 lean_r77
let lean_s88 := by timed congr lean_s86 lean_r75
let lean_s89 := by timed congr lean_s88 lean_r67
have lean_s90 : (Eq (Or (Eq (hashx5f4 x2) x1) (Or (Eq (hashx5f4 x2) x2) (Eq (hashx5f4 x2) x3))) (Or (Eq x1 (hashx5f4 x2)) (Or (Eq x2 (hashx5f4 x2)) (Eq x3 (hashx5f4 x2))))) := by timed congr lean_s87 lean_s89
have lean_s91 : (Eq (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (Or (Eq x1 (hashx5f4 x2)) (Or (Eq x2 (hashx5f4 x2)) (Eq x3 (hashx5f4 x2))))) := by timed Eq.trans lean_r38 lean_s90
let lean_s92 := by timed congr lean_s0 lean_s91
have lean_s93 : (Eq Or Or) := by timed rfl
let lean_s94 := by timed congr lean_s93 lean_r24
let lean_s95 := by timed congr lean_s93 lean_r25
let lean_s96 := by timed congr lean_s95 lean_r26
have lean_s97 : (Eq (Or (Eq (hashx5f4 x3) x1) (Or (Eq (hashx5f4 x3) x2) (Eq (hashx5f4 x3) x3))) (Or (Eq x1 (hashx5f4 x3)) (Or (Eq x2 (hashx5f4 x3)) (Eq x3 (hashx5f4 x3))))) := by timed congr lean_s94 lean_s96
have lean_s98 : (Eq (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (Or (Eq x1 (hashx5f4 x3)) (Or (Eq x2 (hashx5f4 x3)) (Eq x3 (hashx5f4 x3))))) := by timed Eq.trans lean_r48 lean_s97
let lean_s99 := by timed congr lean_s0 lean_s98
have lean_s100 : (Eq Or Or) := by timed rfl
let lean_s101 := by timed congr lean_s100 lean_r31
let lean_s102 := by timed congr lean_s100 lean_r32
let lean_s103 := by timed congr lean_s102 lean_r33
have lean_s104 : (Eq (Or (Eq (hashx5f5 x1) x1) (Or (Eq (hashx5f5 x1) x2) (Eq (hashx5f5 x1) x3))) (Or (Eq x1 (hashx5f5 x1)) (Or (Eq x2 (hashx5f5 x1)) (Eq x3 (hashx5f5 x1))))) := by timed congr lean_s101 lean_s103
have lean_s105 : (Eq (Or (Or (Eq (hashx5f5 x1) x1) (Eq (hashx5f5 x1) x2)) (Eq (hashx5f5 x1) x3)) (Or (Eq x1 (hashx5f5 x1)) (Or (Eq x2 (hashx5f5 x1)) (Eq x3 (hashx5f5 x1))))) := by timed Eq.trans lean_r28 lean_s104
let lean_s106 := by timed congr lean_s0 lean_s105
have lean_s107 : (Eq Or Or) := by timed rfl
let lean_s108 := by timed congr lean_s107 lean_r66
let lean_s109 := by timed congr lean_s107 lean_r44
let lean_s110 := by timed congr lean_s109 lean_r47
have lean_s111 : (Eq (Or (Eq (hashx5f5 x2) x1) (Or (Eq (hashx5f5 x2) x2) (Eq (hashx5f5 x2) x3))) (Or (Eq x1 (hashx5f5 x2)) (Or (Eq x2 (hashx5f5 x2)) (Eq x3 (hashx5f5 x2))))) := by timed congr lean_s108 lean_s110
have lean_s112 : (Eq (Or (Or (Eq (hashx5f5 x2) x1) (Eq (hashx5f5 x2) x2)) (Eq (hashx5f5 x2) x3)) (Or (Eq x1 (hashx5f5 x2)) (Or (Eq x2 (hashx5f5 x2)) (Eq x3 (hashx5f5 x2))))) := by timed Eq.trans lean_r51 lean_s111
let lean_s113 := by timed congr lean_s0 lean_s112
have lean_s114 : (Eq Or Or) := by timed rfl
let lean_s115 := by timed congr lean_s114 lean_r41
let lean_s116 := by timed congr lean_s114 lean_r37
let lean_s117 := by timed congr lean_s116 lean_r29
have lean_s118 : (Eq (Or (Eq (hashx5f5 x3) x1) (Or (Eq (hashx5f5 x3) x2) (Eq (hashx5f5 x3) x3))) (Or (Eq x1 (hashx5f5 x3)) (Or (Eq x2 (hashx5f5 x3)) (Eq x3 (hashx5f5 x3))))) := by timed congr lean_s115 lean_s117
have lean_s119 : (Eq (Or (Or (Eq (hashx5f5 x3) x1) (Eq (hashx5f5 x3) x2)) (Eq (hashx5f5 x3) x3)) (Or (Eq x1 (hashx5f5 x3)) (Or (Eq x2 (hashx5f5 x3)) (Eq x3 (hashx5f5 x3))))) := by timed Eq.trans lean_r34 lean_s118
let lean_s120 := by timed congr lean_s0 lean_s119
let lean_s121 := by timed congr lean_s0 lean_r39
let lean_s122 := by timed congr lean_s0 lean_r76
let lean_s123 := by timed congr lean_s0 lean_r74
let lean_s124 := by timed congr lean_s0 lean_r68
let lean_s125 := by timed congr lean_s0 lean_r45
let lean_s126 := by timed congr lean_s0 lean_r49
let lean_s127 := by timed congr lean_s0 lean_r62
let lean_s128 := by timed congr lean_s0 lean_r59
let lean_s129 := by timed congr lean_s0 lean_r56
have lean_s130 : (Eq (Eq (hashx5f1 x1) (hashx5f2 x1)) (Eq (hashx5f1 x1) (hashx5f2 x1))) := by timed rfl
have lean_s131 : (Eq (hashx5f2 x1) (hashx5f2 x1)) := by timed rfl
have lean_s132 : (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) := by timed congrIte lean_s130 lean_s131 lean_r36
let lean_s133 := by timed flipCongrArg lean_s132 [Eq]
have lean_s134 : (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) := by timed rfl
have lean_s135 : (Eq (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) := by timed congr lean_s133 lean_s134
have lean_s136 : (Eq (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) True) := by timed Eq.trans lean_s135 lean_r30
have lean_s137 : (Eq (Not (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) (Not True)) := by timed flipCongrArg lean_s136 [Not]
have lean_s138 : (Eq (Not (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) False) := by timed Eq.trans lean_s137 lean_r43
have lean_s139 : (Eq (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) False) := by timed Eq.trans lean_r71 lean_s138
let lean_s140 := by timed congr lean_s129 lean_s139
let lean_s141 := by timed congr lean_s128 lean_s140
let lean_s142 := by timed congr lean_s127 lean_s141
let lean_s143 := by timed congr lean_s126 lean_s142
let lean_s144 := by timed congr lean_s125 lean_s143
let lean_s145 := by timed congr lean_s124 lean_s144
let lean_s146 := by timed congr lean_s123 lean_s145
let lean_s147 := by timed congr lean_s122 lean_s146
let lean_s148 := by timed congr lean_s121 lean_s147
let lean_s149 := by timed congr lean_s120 lean_s148
let lean_s150 := by timed congr lean_s113 lean_s149
let lean_s151 := by timed congr lean_s106 lean_s150
let lean_s152 := by timed congr lean_s99 lean_s151
let lean_s153 := by timed congr lean_s92 lean_s152
let lean_s154 := by timed congr lean_s85 lean_s153
let lean_s155 := by timed congr lean_s78 lean_s154
let lean_s156 := by timed congr lean_s71 lean_s155
let lean_s157 := by timed congr lean_s64 lean_s156
let lean_s158 := by timed congr lean_s57 lean_s157
let lean_s159 := by timed congr lean_s50 lean_s158
let lean_s160 := by timed congr lean_s43 lean_s159
let lean_s161 := by timed congr lean_s36 lean_s160
let lean_s162 := by timed congr lean_s29 lean_s161
let lean_s163 := by timed congr lean_s22 lean_s162
let lean_s164 := by timed congr lean_s15 lean_s163
let lean_s165 := by timed congr lean_s14 lean_s164
let lean_s166 := by timed congr lean_s13 lean_s165
let lean_s167 := by timed congr lean_s12 lean_s166
let lean_s168 := by timed congr lean_s11 lean_s167
let lean_s169 := by timed congr lean_s10 lean_s168
let lean_s170 := by timed congr lean_s9 lean_s169
let lean_s171 := by timed congr lean_s8 lean_s170
let lean_s172 := by timed congr lean_s7 lean_s171
let lean_s173 := by timed congr lean_s6 lean_s172
let lean_s174 := by timed congr lean_s5 lean_s173
let lean_s175 := by timed congr lean_s4 lean_s174
let lean_s176 := by timed congr lean_s3 lean_s175
let lean_s177 := by timed congr lean_s2 lean_s176
have lean_s178 : (Eq (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (And (Ne (hashx5f1 x1) (hashx5f1 x3)) (And (Ne (hashx5f1 x2) (hashx5f1 x3)) (And (Ne (hashx5f2 x1) (hashx5f2 x2)) (And (Ne (hashx5f2 x1) (hashx5f2 x3)) (And (Ne (hashx5f2 x2) (hashx5f2 x3)) (And (Ne (hashx5f3 x1) (hashx5f3 x2)) (And (Ne (hashx5f3 x1) (hashx5f3 x3)) (And (Ne (hashx5f3 x2) (hashx5f3 x3)) (And (Ne (hashx5f4 x1) (hashx5f4 x2)) (And (Ne (hashx5f4 x1) (hashx5f4 x3)) (And (Ne (hashx5f4 x2) (hashx5f4 x3)) (And (Ne (hashx5f5 x1) (hashx5f5 x2)) (And (Ne (hashx5f5 x1) (hashx5f5 x3)) (And (Ne (hashx5f5 x2) (hashx5f5 x3)) (And (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (And (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (And (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (And (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (And (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (And (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (And (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (And (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (And (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (And (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (And (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (And (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (And (Or (Or (Eq (hashx5f5 x1) x1) (Eq (hashx5f5 x1) x2)) (Eq (hashx5f5 x1) x3)) (And (Or (Or (Eq (hashx5f5 x2) x1) (Eq (hashx5f5 x2) x2)) (Eq (hashx5f5 x2) x3)) (And (Or (Or (Eq (hashx5f5 x3) x1) (Eq (hashx5f5 x3) x2)) (Eq (hashx5f5 x3) x3)) (And (Ne x1 x2) (And (Ne x1 x3) (And (Ne x2 x3) (And (binrel% LE.le (Int.ofNat 0) x1) (And (binrel% LT.lt x1 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x2) (And (binrel% LT.lt x2 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x3) (And (binrel% LT.lt x3 (Int.ofNat 4)) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))))))))))))))))))))))))))))))))))))))))) (And (Not (Eq (hashx5f1 x1) (hashx5f1 x2))) (And (Not (Eq (hashx5f1 x1) (hashx5f1 x3))) (And (Not (Eq (hashx5f1 x2) (hashx5f1 x3))) (And (Not (Eq (hashx5f2 x1) (hashx5f2 x2))) (And (Not (Eq (hashx5f2 x1) (hashx5f2 x3))) (And (Not (Eq (hashx5f2 x2) (hashx5f2 x3))) (And (Not (Eq (hashx5f3 x1) (hashx5f3 x2))) (And (Not (Eq (hashx5f3 x1) (hashx5f3 x3))) (And (Not (Eq (hashx5f3 x2) (hashx5f3 x3))) (And (Not (Eq (hashx5f4 x1) (hashx5f4 x2))) (And (Not (Eq (hashx5f4 x1) (hashx5f4 x3))) (And (Not (Eq (hashx5f4 x2) (hashx5f4 x3))) (And (Not (Eq (hashx5f5 x1) (hashx5f5 x2))) (And (Not (Eq (hashx5f5 x1) (hashx5f5 x3))) (And (Not (Eq (hashx5f5 x2) (hashx5f5 x3))) (And (Or (Eq x1 (hashx5f1 x1)) (Or (Eq x2 (hashx5f1 x1)) (Eq x3 (hashx5f1 x1)))) (And (Or (Eq x1 (hashx5f1 x2)) (Or (Eq x2 (hashx5f1 x2)) (Eq x3 (hashx5f1 x2)))) (And (Or (Eq x1 (hashx5f1 x3)) (Or (Eq x2 (hashx5f1 x3)) (Eq x3 (hashx5f1 x3)))) (And (Or (Eq x1 (hashx5f2 x1)) (Or (Eq x2 (hashx5f2 x1)) (Eq x3 (hashx5f2 x1)))) (And (Or (Eq x1 (hashx5f2 x2)) (Or (Eq x2 (hashx5f2 x2)) (Eq x3 (hashx5f2 x2)))) (And (Or (Eq x1 (hashx5f2 x3)) (Or (Eq x2 (hashx5f2 x3)) (Eq x3 (hashx5f2 x3)))) (And (Or (Eq x1 (hashx5f3 x1)) (Or (Eq x2 (hashx5f3 x1)) (Eq x3 (hashx5f3 x1)))) (And (Or (Eq x1 (hashx5f3 x2)) (Or (Eq x2 (hashx5f3 x2)) (Eq x3 (hashx5f3 x2)))) (And (Or (Eq x1 (hashx5f3 x3)) (Or (Eq x2 (hashx5f3 x3)) (Eq x3 (hashx5f3 x3)))) (And (Or (Eq x1 (hashx5f4 x1)) (Or (Eq x2 (hashx5f4 x1)) (Eq x3 (hashx5f4 x1)))) (And (Or (Eq x1 (hashx5f4 x2)) (Or (Eq x2 (hashx5f4 x2)) (Eq x3 (hashx5f4 x2)))) (And (Or (Eq x1 (hashx5f4 x3)) (Or (Eq x2 (hashx5f4 x3)) (Eq x3 (hashx5f4 x3)))) (And (Or (Eq x1 (hashx5f5 x1)) (Or (Eq x2 (hashx5f5 x1)) (Eq x3 (hashx5f5 x1)))) (And (Or (Eq x1 (hashx5f5 x2)) (Or (Eq x2 (hashx5f5 x2)) (Eq x3 (hashx5f5 x2)))) (And (Or (Eq x1 (hashx5f5 x3)) (Or (Eq x2 (hashx5f5 x3)) (Eq x3 (hashx5f5 x3)))) (And (Not (Eq x1 x2)) (And (Not (Eq x1 x3)) (And (Not (Eq x2 x3)) (And (binrel% GE.ge x1 (Int.ofNat 0)) (And (Not (binrel% GE.ge x1 (Int.ofNat 4))) (And (binrel% GE.ge x2 (Int.ofNat 0)) (And (Not (binrel% GE.ge x2 (Int.ofNat 4))) (And (binrel% GE.ge x3 (Int.ofNat 0)) (And (Not (binrel% GE.ge x3 (Int.ofNat 4))) False)))))))))))))))))))))))))))))))))))))))) := by timed congr lean_s1 lean_s177
have lean_s179 : (Eq (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (And (Ne (hashx5f1 x1) (hashx5f1 x3)) (And (Ne (hashx5f1 x2) (hashx5f1 x3)) (And (Ne (hashx5f2 x1) (hashx5f2 x2)) (And (Ne (hashx5f2 x1) (hashx5f2 x3)) (And (Ne (hashx5f2 x2) (hashx5f2 x3)) (And (Ne (hashx5f3 x1) (hashx5f3 x2)) (And (Ne (hashx5f3 x1) (hashx5f3 x3)) (And (Ne (hashx5f3 x2) (hashx5f3 x3)) (And (Ne (hashx5f4 x1) (hashx5f4 x2)) (And (Ne (hashx5f4 x1) (hashx5f4 x3)) (And (Ne (hashx5f4 x2) (hashx5f4 x3)) (And (Ne (hashx5f5 x1) (hashx5f5 x2)) (And (Ne (hashx5f5 x1) (hashx5f5 x3)) (And (Ne (hashx5f5 x2) (hashx5f5 x3)) (And (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (And (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (And (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (And (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (And (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (And (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (And (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (And (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (And (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (And (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (And (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (And (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (And (Or (Or (Eq (hashx5f5 x1) x1) (Eq (hashx5f5 x1) x2)) (Eq (hashx5f5 x1) x3)) (And (Or (Or (Eq (hashx5f5 x2) x1) (Eq (hashx5f5 x2) x2)) (Eq (hashx5f5 x2) x3)) (And (Or (Or (Eq (hashx5f5 x3) x1) (Eq (hashx5f5 x3) x2)) (Eq (hashx5f5 x3) x3)) (And (Ne x1 x2) (And (Ne x1 x3) (And (Ne x2 x3) (And (binrel% LE.le (Int.ofNat 0) x1) (And (binrel% LT.lt x1 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x2) (And (binrel% LT.lt x2 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x3) (And (binrel% LT.lt x3 (Int.ofNat 4)) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))))))))))))))))))))))))))))))))))))))))) False) := by timed Eq.trans lean_s178 lean_r42
have lean_s180 : (Eq (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (Ne (hashx5f1 x1) (hashx5f1 x3))) (Ne (hashx5f1 x2) (hashx5f1 x3))) (Ne (hashx5f2 x1) (hashx5f2 x2))) (Ne (hashx5f2 x1) (hashx5f2 x3))) (Ne (hashx5f2 x2) (hashx5f2 x3))) (Ne (hashx5f3 x1) (hashx5f3 x2))) (Ne (hashx5f3 x1) (hashx5f3 x3))) (Ne (hashx5f3 x2) (hashx5f3 x3))) (Ne (hashx5f4 x1) (hashx5f4 x2))) (Ne (hashx5f4 x1) (hashx5f4 x3))) (Ne (hashx5f4 x2) (hashx5f4 x3))) (Ne (hashx5f5 x1) (hashx5f5 x2))) (Ne (hashx5f5 x1) (hashx5f5 x3))) (Ne (hashx5f5 x2) (hashx5f5 x3))) (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3))) (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3))) (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3))) (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3))) (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3))) (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3))) (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3))) (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3))) (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3))) (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3))) (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3))) (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3))) (Or (Or (Eq (hashx5f5 x1) x1) (Eq (hashx5f5 x1) x2)) (Eq (hashx5f5 x1) x3))) (Or (Or (Eq (hashx5f5 x2) x1) (Eq (hashx5f5 x2) x2)) (Eq (hashx5f5 x2) x3))) (Or (Or (Eq (hashx5f5 x3) x1) (Eq (hashx5f5 x3) x2)) (Eq (hashx5f5 x3) x3))) (Ne x1 x2)) (Ne x1 x3)) (Ne x2 x3)) (binrel% LE.le (Int.ofNat 0) x1)) (binrel% LT.lt x1 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x2)) (binrel% LT.lt x2 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x3)) (binrel% LT.lt x3 (Int.ofNat 4))) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) False) := by timed Eq.trans lean_r52 lean_s179
exact (show False from by timed eqResolve lean_a90 lean_s180)


