-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x1 : Int}
variable {hashx5f1 : (Int -> Int)}
variable {x3 : Int}
variable {x2 : Int}
variable {hashx5f4 : (Int -> Int)}
variable {hashx5f3 : (Int -> Int)}
variable {hashx5f2 : (Int -> Int)}
variable {hashx5f4 : (Int -> Int)}
variable {x1 : Int}
variable {x3 : Int}
variable {hashx5f1 : (Int -> Int)}
variable {hashx5f2 : (Int -> Int)}
variable {hashx5f3 : (Int -> Int)}
variable {x2 : Int}

theorem th0 : (Eq (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (Ne (hashx5f1 x1) (hashx5f1 x3))) (Ne (hashx5f1 x2) (hashx5f1 x3))) (Ne (hashx5f2 x1) (hashx5f2 x2))) (Ne (hashx5f2 x1) (hashx5f2 x3))) (Ne (hashx5f2 x2) (hashx5f2 x3))) (Ne (hashx5f3 x1) (hashx5f3 x2))) (Ne (hashx5f3 x1) (hashx5f3 x3))) (Ne (hashx5f3 x2) (hashx5f3 x3))) (Ne (hashx5f4 x1) (hashx5f4 x2))) (Ne (hashx5f4 x1) (hashx5f4 x3))) (Ne (hashx5f4 x2) (hashx5f4 x3))) (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3))) (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3))) (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3))) (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3))) (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3))) (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3))) (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3))) (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3))) (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3))) (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3))) (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3))) (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3))) (Ne x1 x2)) (Ne x1 x3)) (Ne x2 x3)) (binrel% LE.le (Int.ofNat 0) x1)) (binrel% LT.lt x1 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x2)) (binrel% LT.lt x2 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x3)) (binrel% LT.lt x3 (Int.ofNat 4))) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (And (Ne (hashx5f1 x1) (hashx5f1 x3)) (And (Ne (hashx5f1 x2) (hashx5f1 x3)) (And (Ne (hashx5f2 x1) (hashx5f2 x2)) (And (Ne (hashx5f2 x1) (hashx5f2 x3)) (And (Ne (hashx5f2 x2) (hashx5f2 x3)) (And (Ne (hashx5f3 x1) (hashx5f3 x2)) (And (Ne (hashx5f3 x1) (hashx5f3 x3)) (And (Ne (hashx5f3 x2) (hashx5f3 x3)) (And (Ne (hashx5f4 x1) (hashx5f4 x2)) (And (Ne (hashx5f4 x1) (hashx5f4 x3)) (And (Ne (hashx5f4 x2) (hashx5f4 x3)) (And (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (And (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (And (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (And (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (And (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (And (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (And (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (And (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (And (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (And (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (And (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (And (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (And (Ne x1 x2) (And (Ne x1 x3) (And (Ne x2 x3) (And (binrel% LE.le (Int.ofNat 0) x1) (And (binrel% LT.lt x1 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x2) (And (binrel% LT.lt x2 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x3) (And (binrel% LT.lt x3 (Int.ofNat 4)) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)))))))))))))))))))))))))))))))))))) → (Eq (Ne (hashx5f1 x1) (hashx5f1 x2)) (Not (Eq (hashx5f1 x1) (hashx5f1 x2)))) → (Eq (Ne (hashx5f1 x1) (hashx5f1 x3)) (Not (Eq (hashx5f1 x1) (hashx5f1 x3)))) → (Eq (Ne (hashx5f1 x2) (hashx5f1 x3)) (Not (Eq (hashx5f1 x2) (hashx5f1 x3)))) → (Eq (Ne (hashx5f3 x1) (hashx5f3 x3)) (Not (Eq (hashx5f3 x1) (hashx5f3 x3)))) → (Eq (Ne (hashx5f3 x2) (hashx5f3 x3)) (Not (Eq (hashx5f3 x2) (hashx5f3 x3)))) → (Eq (Ne (hashx5f4 x1) (hashx5f4 x2)) (Not (Eq (hashx5f4 x1) (hashx5f4 x2)))) → (Eq (Ne (hashx5f4 x1) (hashx5f4 x3)) (Not (Eq (hashx5f4 x1) (hashx5f4 x3)))) → (Eq (Ne (hashx5f4 x2) (hashx5f4 x3)) (Not (Eq (hashx5f4 x2) (hashx5f4 x3)))) → (Eq (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (Or (Eq (hashx5f1 x1) x1) (Or (Eq (hashx5f1 x1) x2) (Eq (hashx5f1 x1) x3)))) → (Eq (Eq (hashx5f1 x1) x1) (Eq x1 (hashx5f1 x1))) → (Eq (Eq (hashx5f1 x1) x2) (Eq x2 (hashx5f1 x1))) → (Eq (Eq (hashx5f3 x3) x2) (Eq x2 (hashx5f3 x3))) → (Eq (Eq (hashx5f3 x3) x3) (Eq x3 (hashx5f3 x3))) → (Eq (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (Or (Eq (hashx5f3 x1) x1) (Or (Eq (hashx5f3 x1) x2) (Eq (hashx5f3 x1) x3)))) → (Eq (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (Or (Eq (hashx5f4 x1) x1) (Or (Eq (hashx5f4 x1) x2) (Eq (hashx5f4 x1) x3)))) → (Eq (Eq (hashx5f4 x3) x3) (Eq x3 (hashx5f4 x3))) → (Eq (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) True) → (Eq (Eq (hashx5f4 x1) x1) (Eq x1 (hashx5f4 x1))) → (Eq (Eq (hashx5f4 x1) x2) (Eq x2 (hashx5f4 x1))) → (Eq (Eq (hashx5f4 x1) x3) (Eq x3 (hashx5f4 x1))) → (Eq (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (Or (Eq (hashx5f4 x3) x1) (Or (Eq (hashx5f4 x3) x2) (Eq (hashx5f4 x3) x3)))) → (Eq (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1))) → (Eq (Eq (hashx5f4 x3) x1) (Eq x1 (hashx5f4 x3))) → (Eq (Eq (hashx5f4 x3) x2) (Eq x2 (hashx5f4 x3))) → (Eq (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (Or (Eq (hashx5f3 x2) x1) (Or (Eq (hashx5f3 x2) x2) (Eq (hashx5f3 x2) x3)))) → (Eq (Ne x1 x2) (Not (Eq x1 x2))) → (Eq (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (Or (Eq (hashx5f2 x3) x1) (Or (Eq (hashx5f2 x3) x2) (Eq (hashx5f2 x3) x3)))) → (Eq (Eq (hashx5f4 x2) x1) (Eq x1 (hashx5f4 x2))) → (Eq (Eq (hashx5f3 x2) x3) (Eq x3 (hashx5f3 x2))) → (Eq (binrel% LE.le (Int.ofNat 0) x1) (binrel% GE.ge x1 (Int.ofNat 0))) → (Eq (Eq (hashx5f2 x3) x3) (Eq x3 (hashx5f2 x3))) → (Eq (Not True) False) → (Eq (Eq (hashx5f4 x2) x2) (Eq x2 (hashx5f4 x2))) → (Eq (binrel% LT.lt x1 (Int.ofNat 4)) (Not (binrel% GE.ge x1 (Int.ofNat 4)))) → (Eq (Eq (hashx5f2 x1) x1) (Eq x1 (hashx5f2 x1))) → (Eq (Eq (hashx5f4 x2) x3) (Eq x3 (hashx5f4 x2))) → (Eq (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (Or (Eq (hashx5f3 x3) x1) (Or (Eq (hashx5f3 x3) x2) (Eq (hashx5f3 x3) x3)))) → (Eq (binrel% LE.le (Int.ofNat 0) x2) (binrel% GE.ge x2 (Int.ofNat 0))) → (Eq (Eq (hashx5f2 x1) x2) (Eq x2 (hashx5f2 x1))) → (Eq (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (Or (Eq (hashx5f4 x2) x1) (Or (Eq (hashx5f4 x2) x2) (Eq (hashx5f4 x2) x3)))) → (Eq (Eq (hashx5f2 x3) x2) (Eq x2 (hashx5f2 x3))) → (Eq (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (Or (Eq (hashx5f2 x1) x1) (Or (Eq (hashx5f2 x1) x2) (Eq (hashx5f2 x1) x3)))) → (Eq (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) (Not (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)))) → (Eq (Eq (hashx5f1 x2) x3) (Eq x3 (hashx5f1 x2))) → (Eq (binrel% LT.lt x3 (Int.ofNat 4)) (Not (binrel% GE.ge x3 (Int.ofNat 4)))) → (Eq (Eq (hashx5f1 x2) x2) (Eq x2 (hashx5f1 x2))) → (Eq (Eq (hashx5f3 x3) x1) (Eq x1 (hashx5f3 x3))) → (Eq (And (Not (Eq (hashx5f1 x1) (hashx5f1 x2))) (And (Not (Eq (hashx5f1 x1) (hashx5f1 x3))) (And (Not (Eq (hashx5f1 x2) (hashx5f1 x3))) (And (Not (Eq (hashx5f2 x1) (hashx5f2 x2))) (And (Not (Eq (hashx5f2 x1) (hashx5f2 x3))) (And (Not (Eq (hashx5f2 x2) (hashx5f2 x3))) (And (Not (Eq (hashx5f3 x1) (hashx5f3 x2))) (And (Not (Eq (hashx5f3 x1) (hashx5f3 x3))) (And (Not (Eq (hashx5f3 x2) (hashx5f3 x3))) (And (Not (Eq (hashx5f4 x1) (hashx5f4 x2))) (And (Not (Eq (hashx5f4 x1) (hashx5f4 x3))) (And (Not (Eq (hashx5f4 x2) (hashx5f4 x3))) (And (Or (Eq x1 (hashx5f1 x1)) (Or (Eq x2 (hashx5f1 x1)) (Eq x3 (hashx5f1 x1)))) (And (Or (Eq x1 (hashx5f1 x2)) (Or (Eq x2 (hashx5f1 x2)) (Eq x3 (hashx5f1 x2)))) (And (Or (Eq x1 (hashx5f1 x3)) (Or (Eq x2 (hashx5f1 x3)) (Eq x3 (hashx5f1 x3)))) (And (Or (Eq x1 (hashx5f2 x1)) (Or (Eq x2 (hashx5f2 x1)) (Eq x3 (hashx5f2 x1)))) (And (Or (Eq x1 (hashx5f2 x2)) (Or (Eq x2 (hashx5f2 x2)) (Eq x3 (hashx5f2 x2)))) (And (Or (Eq x1 (hashx5f2 x3)) (Or (Eq x2 (hashx5f2 x3)) (Eq x3 (hashx5f2 x3)))) (And (Or (Eq x1 (hashx5f3 x1)) (Or (Eq x2 (hashx5f3 x1)) (Eq x3 (hashx5f3 x1)))) (And (Or (Eq x1 (hashx5f3 x2)) (Or (Eq x2 (hashx5f3 x2)) (Eq x3 (hashx5f3 x2)))) (And (Or (Eq x1 (hashx5f3 x3)) (Or (Eq x2 (hashx5f3 x3)) (Eq x3 (hashx5f3 x3)))) (And (Or (Eq x1 (hashx5f4 x1)) (Or (Eq x2 (hashx5f4 x1)) (Eq x3 (hashx5f4 x1)))) (And (Or (Eq x1 (hashx5f4 x2)) (Or (Eq x2 (hashx5f4 x2)) (Eq x3 (hashx5f4 x2)))) (And (Or (Eq x1 (hashx5f4 x3)) (Or (Eq x2 (hashx5f4 x3)) (Eq x3 (hashx5f4 x3)))) (And (Not (Eq x1 x2)) (And (Not (Eq x1 x3)) (And (Not (Eq x2 x3)) (And (binrel% GE.ge x1 (Int.ofNat 0)) (And (Not (binrel% GE.ge x1 (Int.ofNat 4))) (And (binrel% GE.ge x2 (Int.ofNat 0)) (And (Not (binrel% GE.ge x2 (Int.ofNat 4))) (And (binrel% GE.ge x3 (Int.ofNat 0)) (And (Not (binrel% GE.ge x3 (Int.ofNat 4))) False))))))))))))))))))))))))))))))))) False) → (Eq (Eq (hashx5f1 x3) x1) (Eq x1 (hashx5f1 x3))) → (Eq (binrel% LE.le (Int.ofNat 0) x3) (binrel% GE.ge x3 (Int.ofNat 0))) → (Eq (Eq (hashx5f1 x2) x1) (Eq x1 (hashx5f1 x2))) → (Eq (binrel% LT.lt x2 (Int.ofNat 4)) (Not (binrel% GE.ge x2 (Int.ofNat 4)))) → (Eq (Eq (hashx5f2 x1) x3) (Eq x3 (hashx5f2 x1))) → (Eq (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (Or (Eq (hashx5f1 x2) x1) (Or (Eq (hashx5f1 x2) x2) (Eq (hashx5f1 x2) x3)))) → (Eq (Eq (hashx5f2 x3) x1) (Eq x1 (hashx5f2 x3))) → (Eq (Ne x2 x3) (Not (Eq x2 x3))) → (Eq (Eq (hashx5f3 x2) x2) (Eq x2 (hashx5f3 x2))) → (Eq (Ne x1 x3) (Not (Eq x1 x3))) → (Eq (Eq (hashx5f3 x2) x1) (Eq x1 (hashx5f3 x2))) → (Eq (Eq (hashx5f3 x1) x3) (Eq x3 (hashx5f3 x1))) → (Eq (Ne (hashx5f2 x1) (hashx5f2 x2)) (Not (Eq (hashx5f2 x1) (hashx5f2 x2)))) → (Eq (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (Or (Eq (hashx5f2 x2) x1) (Or (Eq (hashx5f2 x2) x2) (Eq (hashx5f2 x2) x3)))) → (Eq (Eq (hashx5f3 x1) x2) (Eq x2 (hashx5f3 x1))) → (Eq (Eq (hashx5f3 x1) x1) (Eq x1 (hashx5f3 x1))) → (Eq (Ne (hashx5f3 x1) (hashx5f3 x2)) (Not (Eq (hashx5f3 x1) (hashx5f3 x2)))) → (Eq (Eq (hashx5f2 x2) x3) (Eq x3 (hashx5f2 x2))) → (Eq (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (Or (Eq (hashx5f1 x3) x1) (Or (Eq (hashx5f1 x3) x2) (Eq (hashx5f1 x3) x3)))) → (Eq (Ne (hashx5f2 x2) (hashx5f2 x3)) (Not (Eq (hashx5f2 x2) (hashx5f2 x3)))) → (Eq (Eq (hashx5f2 x2) x2) (Eq x2 (hashx5f2 x2))) → (Eq (Ne (hashx5f2 x1) (hashx5f2 x3)) (Not (Eq (hashx5f2 x1) (hashx5f2 x3)))) → (Eq (Eq (hashx5f2 x2) x1) (Eq x1 (hashx5f2 x2))) → (Eq (Eq (hashx5f1 x3) x3) (Eq x3 (hashx5f1 x3))) → (Eq (Eq (hashx5f1 x3) x2) (Eq x2 (hashx5f1 x3))) → (Eq (Eq (hashx5f1 x1) x3) (Eq x3 (hashx5f1 x1))) → (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (Ne (hashx5f1 x1) (hashx5f1 x3))) (Ne (hashx5f1 x2) (hashx5f1 x3))) (Ne (hashx5f2 x1) (hashx5f2 x2))) (Ne (hashx5f2 x1) (hashx5f2 x3))) (Ne (hashx5f2 x2) (hashx5f2 x3))) (Ne (hashx5f3 x1) (hashx5f3 x2))) (Ne (hashx5f3 x1) (hashx5f3 x3))) (Ne (hashx5f3 x2) (hashx5f3 x3))) (Ne (hashx5f4 x1) (hashx5f4 x2))) (Ne (hashx5f4 x1) (hashx5f4 x3))) (Ne (hashx5f4 x2) (hashx5f4 x3))) (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3))) (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3))) (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3))) (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3))) (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3))) (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3))) (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3))) (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3))) (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3))) (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3))) (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3))) (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3))) (Ne x1 x2)) (Ne x1 x3)) (Ne x2 x3)) (binrel% LE.le (Int.ofNat 0) x1)) (binrel% LT.lt x1 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x2)) (binrel% LT.lt x2 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x3)) (binrel% LT.lt x3 (Int.ofNat 4))) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) → False :=
fun lean_r0 : (Eq (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (Ne (hashx5f1 x1) (hashx5f1 x3))) (Ne (hashx5f1 x2) (hashx5f1 x3))) (Ne (hashx5f2 x1) (hashx5f2 x2))) (Ne (hashx5f2 x1) (hashx5f2 x3))) (Ne (hashx5f2 x2) (hashx5f2 x3))) (Ne (hashx5f3 x1) (hashx5f3 x2))) (Ne (hashx5f3 x1) (hashx5f3 x3))) (Ne (hashx5f3 x2) (hashx5f3 x3))) (Ne (hashx5f4 x1) (hashx5f4 x2))) (Ne (hashx5f4 x1) (hashx5f4 x3))) (Ne (hashx5f4 x2) (hashx5f4 x3))) (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3))) (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3))) (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3))) (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3))) (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3))) (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3))) (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3))) (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3))) (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3))) (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3))) (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3))) (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3))) (Ne x1 x2)) (Ne x1 x3)) (Ne x2 x3)) (binrel% LE.le (Int.ofNat 0) x1)) (binrel% LT.lt x1 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x2)) (binrel% LT.lt x2 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x3)) (binrel% LT.lt x3 (Int.ofNat 4))) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (And (Ne (hashx5f1 x1) (hashx5f1 x3)) (And (Ne (hashx5f1 x2) (hashx5f1 x3)) (And (Ne (hashx5f2 x1) (hashx5f2 x2)) (And (Ne (hashx5f2 x1) (hashx5f2 x3)) (And (Ne (hashx5f2 x2) (hashx5f2 x3)) (And (Ne (hashx5f3 x1) (hashx5f3 x2)) (And (Ne (hashx5f3 x1) (hashx5f3 x3)) (And (Ne (hashx5f3 x2) (hashx5f3 x3)) (And (Ne (hashx5f4 x1) (hashx5f4 x2)) (And (Ne (hashx5f4 x1) (hashx5f4 x3)) (And (Ne (hashx5f4 x2) (hashx5f4 x3)) (And (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (And (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (And (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (And (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (And (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (And (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (And (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (And (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (And (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (And (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (And (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (And (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (And (Ne x1 x2) (And (Ne x1 x3) (And (Ne x2 x3) (And (binrel% LE.le (Int.ofNat 0) x1) (And (binrel% LT.lt x1 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x2) (And (binrel% LT.lt x2 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x3) (And (binrel% LT.lt x3 (Int.ofNat 4)) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)))))))))))))))))))))))))))))))))))) => -- THEORY_REWRITE_BOOL
fun lean_r1 : (Eq (Ne (hashx5f1 x1) (hashx5f1 x2)) (Not (Eq (hashx5f1 x1) (hashx5f1 x2)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r2 : (Eq (Ne (hashx5f1 x1) (hashx5f1 x3)) (Not (Eq (hashx5f1 x1) (hashx5f1 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r3 : (Eq (Ne (hashx5f1 x2) (hashx5f1 x3)) (Not (Eq (hashx5f1 x2) (hashx5f1 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r4 : (Eq (Ne (hashx5f3 x1) (hashx5f3 x3)) (Not (Eq (hashx5f3 x1) (hashx5f3 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r5 : (Eq (Ne (hashx5f3 x2) (hashx5f3 x3)) (Not (Eq (hashx5f3 x2) (hashx5f3 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r6 : (Eq (Ne (hashx5f4 x1) (hashx5f4 x2)) (Not (Eq (hashx5f4 x1) (hashx5f4 x2)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r7 : (Eq (Ne (hashx5f4 x1) (hashx5f4 x3)) (Not (Eq (hashx5f4 x1) (hashx5f4 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r8 : (Eq (Ne (hashx5f4 x2) (hashx5f4 x3)) (Not (Eq (hashx5f4 x2) (hashx5f4 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r9 : (Eq (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (Or (Eq (hashx5f1 x1) x1) (Or (Eq (hashx5f1 x1) x2) (Eq (hashx5f1 x1) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq (Eq (hashx5f1 x1) x1) (Eq x1 (hashx5f1 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (Eq (hashx5f1 x1) x2) (Eq x2 (hashx5f1 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (Eq (hashx5f3 x3) x2) (Eq x2 (hashx5f3 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (Eq (hashx5f3 x3) x3) (Eq x3 (hashx5f3 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (Or (Eq (hashx5f3 x1) x1) (Or (Eq (hashx5f3 x1) x2) (Eq (hashx5f3 x1) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (Or (Eq (hashx5f4 x1) x1) (Or (Eq (hashx5f4 x1) x2) (Eq (hashx5f4 x1) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq (Eq (hashx5f4 x3) x3) (Eq x3 (hashx5f4 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) True) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (Eq (hashx5f4 x1) x1) (Eq x1 (hashx5f4 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (Eq (hashx5f4 x1) x2) (Eq x2 (hashx5f4 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (Eq (hashx5f4 x1) x3) (Eq x3 (hashx5f4 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (Or (Eq (hashx5f4 x3) x1) (Or (Eq (hashx5f4 x3) x2) (Eq (hashx5f4 x3) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq (Eq (hashx5f4 x3) x1) (Eq x1 (hashx5f4 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq (Eq (hashx5f4 x3) x2) (Eq x2 (hashx5f4 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (Or (Eq (hashx5f3 x2) x1) (Or (Eq (hashx5f3 x2) x2) (Eq (hashx5f3 x2) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq (Ne x1 x2) (Not (Eq x1 x2))) => -- THEORY_REWRITE_BUILTIN
fun lean_r27 : (Eq (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (Or (Eq (hashx5f2 x3) x1) (Or (Eq (hashx5f2 x3) x2) (Eq (hashx5f2 x3) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq (Eq (hashx5f4 x2) x1) (Eq x1 (hashx5f4 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq (Eq (hashx5f3 x2) x3) (Eq x3 (hashx5f3 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq (binrel% LE.le (Int.ofNat 0) x1) (binrel% GE.ge x1 (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq (Eq (hashx5f2 x3) x3) (Eq x3 (hashx5f2 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq (Eq (hashx5f4 x2) x2) (Eq x2 (hashx5f4 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq (binrel% LT.lt x1 (Int.ofNat 4)) (Not (binrel% GE.ge x1 (Int.ofNat 4)))) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq (Eq (hashx5f2 x1) x1) (Eq x1 (hashx5f2 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq (Eq (hashx5f4 x2) x3) (Eq x3 (hashx5f4 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (Or (Eq (hashx5f3 x3) x1) (Or (Eq (hashx5f3 x3) x2) (Eq (hashx5f3 x3) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq (binrel% LE.le (Int.ofNat 0) x2) (binrel% GE.ge x2 (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq (Eq (hashx5f2 x1) x2) (Eq x2 (hashx5f2 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (Or (Eq (hashx5f4 x2) x1) (Or (Eq (hashx5f4 x2) x2) (Eq (hashx5f4 x2) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq (Eq (hashx5f2 x3) x2) (Eq x2 (hashx5f2 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (Or (Eq (hashx5f2 x1) x1) (Or (Eq (hashx5f2 x1) x2) (Eq (hashx5f2 x1) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) (Not (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r44 : (Eq (Eq (hashx5f1 x2) x3) (Eq x3 (hashx5f1 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq (binrel% LT.lt x3 (Int.ofNat 4)) (Not (binrel% GE.ge x3 (Int.ofNat 4)))) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq (Eq (hashx5f1 x2) x2) (Eq x2 (hashx5f1 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq (Eq (hashx5f3 x3) x1) (Eq x1 (hashx5f3 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq (And (Not (Eq (hashx5f1 x1) (hashx5f1 x2))) (And (Not (Eq (hashx5f1 x1) (hashx5f1 x3))) (And (Not (Eq (hashx5f1 x2) (hashx5f1 x3))) (And (Not (Eq (hashx5f2 x1) (hashx5f2 x2))) (And (Not (Eq (hashx5f2 x1) (hashx5f2 x3))) (And (Not (Eq (hashx5f2 x2) (hashx5f2 x3))) (And (Not (Eq (hashx5f3 x1) (hashx5f3 x2))) (And (Not (Eq (hashx5f3 x1) (hashx5f3 x3))) (And (Not (Eq (hashx5f3 x2) (hashx5f3 x3))) (And (Not (Eq (hashx5f4 x1) (hashx5f4 x2))) (And (Not (Eq (hashx5f4 x1) (hashx5f4 x3))) (And (Not (Eq (hashx5f4 x2) (hashx5f4 x3))) (And (Or (Eq x1 (hashx5f1 x1)) (Or (Eq x2 (hashx5f1 x1)) (Eq x3 (hashx5f1 x1)))) (And (Or (Eq x1 (hashx5f1 x2)) (Or (Eq x2 (hashx5f1 x2)) (Eq x3 (hashx5f1 x2)))) (And (Or (Eq x1 (hashx5f1 x3)) (Or (Eq x2 (hashx5f1 x3)) (Eq x3 (hashx5f1 x3)))) (And (Or (Eq x1 (hashx5f2 x1)) (Or (Eq x2 (hashx5f2 x1)) (Eq x3 (hashx5f2 x1)))) (And (Or (Eq x1 (hashx5f2 x2)) (Or (Eq x2 (hashx5f2 x2)) (Eq x3 (hashx5f2 x2)))) (And (Or (Eq x1 (hashx5f2 x3)) (Or (Eq x2 (hashx5f2 x3)) (Eq x3 (hashx5f2 x3)))) (And (Or (Eq x1 (hashx5f3 x1)) (Or (Eq x2 (hashx5f3 x1)) (Eq x3 (hashx5f3 x1)))) (And (Or (Eq x1 (hashx5f3 x2)) (Or (Eq x2 (hashx5f3 x2)) (Eq x3 (hashx5f3 x2)))) (And (Or (Eq x1 (hashx5f3 x3)) (Or (Eq x2 (hashx5f3 x3)) (Eq x3 (hashx5f3 x3)))) (And (Or (Eq x1 (hashx5f4 x1)) (Or (Eq x2 (hashx5f4 x1)) (Eq x3 (hashx5f4 x1)))) (And (Or (Eq x1 (hashx5f4 x2)) (Or (Eq x2 (hashx5f4 x2)) (Eq x3 (hashx5f4 x2)))) (And (Or (Eq x1 (hashx5f4 x3)) (Or (Eq x2 (hashx5f4 x3)) (Eq x3 (hashx5f4 x3)))) (And (Not (Eq x1 x2)) (And (Not (Eq x1 x3)) (And (Not (Eq x2 x3)) (And (binrel% GE.ge x1 (Int.ofNat 0)) (And (Not (binrel% GE.ge x1 (Int.ofNat 4))) (And (binrel% GE.ge x2 (Int.ofNat 0)) (And (Not (binrel% GE.ge x2 (Int.ofNat 4))) (And (binrel% GE.ge x3 (Int.ofNat 0)) (And (Not (binrel% GE.ge x3 (Int.ofNat 4))) False))))))))))))))))))))))))))))))))) False) => -- THEORY_REWRITE_BOOL
fun lean_r49 : (Eq (Eq (hashx5f1 x3) x1) (Eq x1 (hashx5f1 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq (binrel% LE.le (Int.ofNat 0) x3) (binrel% GE.ge x3 (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq (Eq (hashx5f1 x2) x1) (Eq x1 (hashx5f1 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq (binrel% LT.lt x2 (Int.ofNat 4)) (Not (binrel% GE.ge x2 (Int.ofNat 4)))) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq (Eq (hashx5f2 x1) x3) (Eq x3 (hashx5f2 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (Or (Eq (hashx5f1 x2) x1) (Or (Eq (hashx5f1 x2) x2) (Eq (hashx5f1 x2) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r55 : (Eq (Eq (hashx5f2 x3) x1) (Eq x1 (hashx5f2 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq (Ne x2 x3) (Not (Eq x2 x3))) => -- THEORY_REWRITE_BUILTIN
fun lean_r57 : (Eq (Eq (hashx5f3 x2) x2) (Eq x2 (hashx5f3 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq (Ne x1 x3) (Not (Eq x1 x3))) => -- THEORY_REWRITE_BUILTIN
fun lean_r59 : (Eq (Eq (hashx5f3 x2) x1) (Eq x1 (hashx5f3 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq (Eq (hashx5f3 x1) x3) (Eq x3 (hashx5f3 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq (Ne (hashx5f2 x1) (hashx5f2 x2)) (Not (Eq (hashx5f2 x1) (hashx5f2 x2)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r62 : (Eq (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (Or (Eq (hashx5f2 x2) x1) (Or (Eq (hashx5f2 x2) x2) (Eq (hashx5f2 x2) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r63 : (Eq (Eq (hashx5f3 x1) x2) (Eq x2 (hashx5f3 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq (Eq (hashx5f3 x1) x1) (Eq x1 (hashx5f3 x1))) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq (Ne (hashx5f3 x1) (hashx5f3 x2)) (Not (Eq (hashx5f3 x1) (hashx5f3 x2)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r66 : (Eq (Eq (hashx5f2 x2) x3) (Eq x3 (hashx5f2 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (Or (Eq (hashx5f1 x3) x1) (Or (Eq (hashx5f1 x3) x2) (Eq (hashx5f1 x3) x3)))) => -- THEORY_REWRITE_BOOL
fun lean_r68 : (Eq (Ne (hashx5f2 x2) (hashx5f2 x3)) (Not (Eq (hashx5f2 x2) (hashx5f2 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r69 : (Eq (Eq (hashx5f2 x2) x2) (Eq x2 (hashx5f2 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq (Ne (hashx5f2 x1) (hashx5f2 x3)) (Not (Eq (hashx5f2 x1) (hashx5f2 x3)))) => -- THEORY_REWRITE_BUILTIN
fun lean_r71 : (Eq (Eq (hashx5f2 x2) x1) (Eq x1 (hashx5f2 x2))) => -- THEORY_REWRITE_ARITH
fun lean_r72 : (Eq (Eq (hashx5f1 x3) x3) (Eq x3 (hashx5f1 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq (Eq (hashx5f1 x3) x2) (Eq x2 (hashx5f1 x3))) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq (Eq (hashx5f1 x1) x3) (Eq x3 (hashx5f1 x1))) => -- THEORY_REWRITE_ARITH
fun lean_a75 : (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (Ne (hashx5f1 x1) (hashx5f1 x3))) (Ne (hashx5f1 x2) (hashx5f1 x3))) (Ne (hashx5f2 x1) (hashx5f2 x2))) (Ne (hashx5f2 x1) (hashx5f2 x3))) (Ne (hashx5f2 x2) (hashx5f2 x3))) (Ne (hashx5f3 x1) (hashx5f3 x2))) (Ne (hashx5f3 x1) (hashx5f3 x3))) (Ne (hashx5f3 x2) (hashx5f3 x3))) (Ne (hashx5f4 x1) (hashx5f4 x2))) (Ne (hashx5f4 x1) (hashx5f4 x3))) (Ne (hashx5f4 x2) (hashx5f4 x3))) (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3))) (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3))) (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3))) (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3))) (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3))) (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3))) (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3))) (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3))) (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3))) (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3))) (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3))) (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3))) (Ne x1 x2)) (Ne x1 x3)) (Ne x2 x3)) (binrel% LE.le (Int.ofNat 0) x1)) (binrel% LT.lt x1 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x2)) (binrel% LT.lt x2 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x3)) (binrel% LT.lt x3 (Int.ofNat 4))) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) => by
have lean_s0 : (Eq And And) := by timed rfl
let lean_s1 := by timed congr lean_s0 lean_r1
let lean_s2 := by timed congr lean_s0 lean_r2
let lean_s3 := by timed congr lean_s0 lean_r3
let lean_s4 := by timed congr lean_s0 lean_r61
let lean_s5 := by timed congr lean_s0 lean_r70
let lean_s6 := by timed congr lean_s0 lean_r68
let lean_s7 := by timed congr lean_s0 lean_r65
let lean_s8 := by timed congr lean_s0 lean_r4
let lean_s9 := by timed congr lean_s0 lean_r5
let lean_s10 := by timed congr lean_s0 lean_r6
let lean_s11 := by timed congr lean_s0 lean_r7
let lean_s12 := by timed congr lean_s0 lean_r8
have lean_s13 : (Eq Or Or) := by timed rfl
let lean_s14 := by timed congr lean_s13 lean_r10
let lean_s15 := by timed congr lean_s13 lean_r11
let lean_s16 := by timed congr lean_s15 lean_r74
have lean_s17 : (Eq (Or (Eq (hashx5f1 x1) x1) (Or (Eq (hashx5f1 x1) x2) (Eq (hashx5f1 x1) x3))) (Or (Eq x1 (hashx5f1 x1)) (Or (Eq x2 (hashx5f1 x1)) (Eq x3 (hashx5f1 x1))))) := by timed congr lean_s14 lean_s16
have lean_s18 : (Eq (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (Or (Eq x1 (hashx5f1 x1)) (Or (Eq x2 (hashx5f1 x1)) (Eq x3 (hashx5f1 x1))))) := by timed Eq.trans lean_r9 lean_s17
let lean_s19 := by timed congr lean_s0 lean_s18
have lean_s20 : (Eq Or Or) := by timed rfl
let lean_s21 := by timed congr lean_s20 lean_r51
let lean_s22 := by timed congr lean_s20 lean_r46
let lean_s23 := by timed congr lean_s22 lean_r44
have lean_s24 : (Eq (Or (Eq (hashx5f1 x2) x1) (Or (Eq (hashx5f1 x2) x2) (Eq (hashx5f1 x2) x3))) (Or (Eq x1 (hashx5f1 x2)) (Or (Eq x2 (hashx5f1 x2)) (Eq x3 (hashx5f1 x2))))) := by timed congr lean_s21 lean_s23
have lean_s25 : (Eq (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (Or (Eq x1 (hashx5f1 x2)) (Or (Eq x2 (hashx5f1 x2)) (Eq x3 (hashx5f1 x2))))) := by timed Eq.trans lean_r54 lean_s24
let lean_s26 := by timed congr lean_s0 lean_s25
have lean_s27 : (Eq Or Or) := by timed rfl
let lean_s28 := by timed congr lean_s27 lean_r49
let lean_s29 := by timed congr lean_s27 lean_r73
let lean_s30 := by timed congr lean_s29 lean_r72
have lean_s31 : (Eq (Or (Eq (hashx5f1 x3) x1) (Or (Eq (hashx5f1 x3) x2) (Eq (hashx5f1 x3) x3))) (Or (Eq x1 (hashx5f1 x3)) (Or (Eq x2 (hashx5f1 x3)) (Eq x3 (hashx5f1 x3))))) := by timed congr lean_s28 lean_s30
have lean_s32 : (Eq (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (Or (Eq x1 (hashx5f1 x3)) (Or (Eq x2 (hashx5f1 x3)) (Eq x3 (hashx5f1 x3))))) := by timed Eq.trans lean_r67 lean_s31
let lean_s33 := by timed congr lean_s0 lean_s32
have lean_s34 : (Eq Or Or) := by timed rfl
let lean_s35 := by timed congr lean_s34 lean_r35
let lean_s36 := by timed congr lean_s34 lean_r39
let lean_s37 := by timed congr lean_s36 lean_r53
have lean_s38 : (Eq (Or (Eq (hashx5f2 x1) x1) (Or (Eq (hashx5f2 x1) x2) (Eq (hashx5f2 x1) x3))) (Or (Eq x1 (hashx5f2 x1)) (Or (Eq x2 (hashx5f2 x1)) (Eq x3 (hashx5f2 x1))))) := by timed congr lean_s35 lean_s37
have lean_s39 : (Eq (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (Or (Eq x1 (hashx5f2 x1)) (Or (Eq x2 (hashx5f2 x1)) (Eq x3 (hashx5f2 x1))))) := by timed Eq.trans lean_r42 lean_s38
let lean_s40 := by timed congr lean_s0 lean_s39
have lean_s41 : (Eq Or Or) := by timed rfl
let lean_s42 := by timed congr lean_s41 lean_r71
let lean_s43 := by timed congr lean_s41 lean_r69
let lean_s44 := by timed congr lean_s43 lean_r66
have lean_s45 : (Eq (Or (Eq (hashx5f2 x2) x1) (Or (Eq (hashx5f2 x2) x2) (Eq (hashx5f2 x2) x3))) (Or (Eq x1 (hashx5f2 x2)) (Or (Eq x2 (hashx5f2 x2)) (Eq x3 (hashx5f2 x2))))) := by timed congr lean_s42 lean_s44
have lean_s46 : (Eq (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (Or (Eq x1 (hashx5f2 x2)) (Or (Eq x2 (hashx5f2 x2)) (Eq x3 (hashx5f2 x2))))) := by timed Eq.trans lean_r62 lean_s45
let lean_s47 := by timed congr lean_s0 lean_s46
have lean_s48 : (Eq Or Or) := by timed rfl
let lean_s49 := by timed congr lean_s48 lean_r55
let lean_s50 := by timed congr lean_s48 lean_r41
let lean_s51 := by timed congr lean_s50 lean_r31
have lean_s52 : (Eq (Or (Eq (hashx5f2 x3) x1) (Or (Eq (hashx5f2 x3) x2) (Eq (hashx5f2 x3) x3))) (Or (Eq x1 (hashx5f2 x3)) (Or (Eq x2 (hashx5f2 x3)) (Eq x3 (hashx5f2 x3))))) := by timed congr lean_s49 lean_s51
have lean_s53 : (Eq (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (Or (Eq x1 (hashx5f2 x3)) (Or (Eq x2 (hashx5f2 x3)) (Eq x3 (hashx5f2 x3))))) := by timed Eq.trans lean_r27 lean_s52
let lean_s54 := by timed congr lean_s0 lean_s53
have lean_s55 : (Eq Or Or) := by timed rfl
let lean_s56 := by timed congr lean_s55 lean_r64
let lean_s57 := by timed congr lean_s55 lean_r63
let lean_s58 := by timed congr lean_s57 lean_r60
have lean_s59 : (Eq (Or (Eq (hashx5f3 x1) x1) (Or (Eq (hashx5f3 x1) x2) (Eq (hashx5f3 x1) x3))) (Or (Eq x1 (hashx5f3 x1)) (Or (Eq x2 (hashx5f3 x1)) (Eq x3 (hashx5f3 x1))))) := by timed congr lean_s56 lean_s58
have lean_s60 : (Eq (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (Or (Eq x1 (hashx5f3 x1)) (Or (Eq x2 (hashx5f3 x1)) (Eq x3 (hashx5f3 x1))))) := by timed Eq.trans lean_r14 lean_s59
let lean_s61 := by timed congr lean_s0 lean_s60
have lean_s62 : (Eq Or Or) := by timed rfl
let lean_s63 := by timed congr lean_s62 lean_r59
let lean_s64 := by timed congr lean_s62 lean_r57
let lean_s65 := by timed congr lean_s64 lean_r29
have lean_s66 : (Eq (Or (Eq (hashx5f3 x2) x1) (Or (Eq (hashx5f3 x2) x2) (Eq (hashx5f3 x2) x3))) (Or (Eq x1 (hashx5f3 x2)) (Or (Eq x2 (hashx5f3 x2)) (Eq x3 (hashx5f3 x2))))) := by timed congr lean_s63 lean_s65
have lean_s67 : (Eq (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (Or (Eq x1 (hashx5f3 x2)) (Or (Eq x2 (hashx5f3 x2)) (Eq x3 (hashx5f3 x2))))) := by timed Eq.trans lean_r25 lean_s66
let lean_s68 := by timed congr lean_s0 lean_s67
have lean_s69 : (Eq Or Or) := by timed rfl
let lean_s70 := by timed congr lean_s69 lean_r47
let lean_s71 := by timed congr lean_s69 lean_r12
let lean_s72 := by timed congr lean_s71 lean_r13
have lean_s73 : (Eq (Or (Eq (hashx5f3 x3) x1) (Or (Eq (hashx5f3 x3) x2) (Eq (hashx5f3 x3) x3))) (Or (Eq x1 (hashx5f3 x3)) (Or (Eq x2 (hashx5f3 x3)) (Eq x3 (hashx5f3 x3))))) := by timed congr lean_s70 lean_s72
have lean_s74 : (Eq (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (Or (Eq x1 (hashx5f3 x3)) (Or (Eq x2 (hashx5f3 x3)) (Eq x3 (hashx5f3 x3))))) := by timed Eq.trans lean_r37 lean_s73
let lean_s75 := by timed congr lean_s0 lean_s74
have lean_s76 : (Eq Or Or) := by timed rfl
let lean_s77 := by timed congr lean_s76 lean_r18
let lean_s78 := by timed congr lean_s76 lean_r19
let lean_s79 := by timed congr lean_s78 lean_r20
have lean_s80 : (Eq (Or (Eq (hashx5f4 x1) x1) (Or (Eq (hashx5f4 x1) x2) (Eq (hashx5f4 x1) x3))) (Or (Eq x1 (hashx5f4 x1)) (Or (Eq x2 (hashx5f4 x1)) (Eq x3 (hashx5f4 x1))))) := by timed congr lean_s77 lean_s79
have lean_s81 : (Eq (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (Or (Eq x1 (hashx5f4 x1)) (Or (Eq x2 (hashx5f4 x1)) (Eq x3 (hashx5f4 x1))))) := by timed Eq.trans lean_r15 lean_s80
let lean_s82 := by timed congr lean_s0 lean_s81
have lean_s83 : (Eq Or Or) := by timed rfl
let lean_s84 := by timed congr lean_s83 lean_r28
let lean_s85 := by timed congr lean_s83 lean_r33
let lean_s86 := by timed congr lean_s85 lean_r36
have lean_s87 : (Eq (Or (Eq (hashx5f4 x2) x1) (Or (Eq (hashx5f4 x2) x2) (Eq (hashx5f4 x2) x3))) (Or (Eq x1 (hashx5f4 x2)) (Or (Eq x2 (hashx5f4 x2)) (Eq x3 (hashx5f4 x2))))) := by timed congr lean_s84 lean_s86
have lean_s88 : (Eq (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (Or (Eq x1 (hashx5f4 x2)) (Or (Eq x2 (hashx5f4 x2)) (Eq x3 (hashx5f4 x2))))) := by timed Eq.trans lean_r40 lean_s87
let lean_s89 := by timed congr lean_s0 lean_s88
have lean_s90 : (Eq Or Or) := by timed rfl
let lean_s91 := by timed congr lean_s90 lean_r23
let lean_s92 := by timed congr lean_s90 lean_r24
let lean_s93 := by timed congr lean_s92 lean_r16
have lean_s94 : (Eq (Or (Eq (hashx5f4 x3) x1) (Or (Eq (hashx5f4 x3) x2) (Eq (hashx5f4 x3) x3))) (Or (Eq x1 (hashx5f4 x3)) (Or (Eq x2 (hashx5f4 x3)) (Eq x3 (hashx5f4 x3))))) := by timed congr lean_s91 lean_s93
have lean_s95 : (Eq (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (Or (Eq x1 (hashx5f4 x3)) (Or (Eq x2 (hashx5f4 x3)) (Eq x3 (hashx5f4 x3))))) := by timed Eq.trans lean_r21 lean_s94
let lean_s96 := by timed congr lean_s0 lean_s95
let lean_s97 := by timed congr lean_s0 lean_r26
let lean_s98 := by timed congr lean_s0 lean_r58
let lean_s99 := by timed congr lean_s0 lean_r56
let lean_s100 := by timed congr lean_s0 lean_r30
let lean_s101 := by timed congr lean_s0 lean_r34
let lean_s102 := by timed congr lean_s0 lean_r38
let lean_s103 := by timed congr lean_s0 lean_r52
let lean_s104 := by timed congr lean_s0 lean_r50
let lean_s105 := by timed congr lean_s0 lean_r45
have lean_s106 : (Eq (Eq (hashx5f1 x1) (hashx5f2 x1)) (Eq (hashx5f1 x1) (hashx5f2 x1))) := by timed rfl
have lean_s107 : (Eq (hashx5f2 x1) (hashx5f2 x1)) := by timed rfl
have lean_s108 : (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) := by timed congrIte lean_s106 lean_s107 lean_r22
let lean_s109 := by timed flipCongrArg lean_s108 [Eq]
have lean_s110 : (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) := by timed rfl
have lean_s111 : (Eq (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) := by timed congr lean_s109 lean_s110
have lean_s112 : (Eq (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) True) := by timed Eq.trans lean_s111 lean_r17
have lean_s113 : (Eq (Not (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) (Not True)) := by timed flipCongrArg lean_s112 [Not]
have lean_s114 : (Eq (Not (Eq (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) False) := by timed Eq.trans lean_s113 lean_r32
have lean_s115 : (Eq (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int)) False) := by timed Eq.trans lean_r43 lean_s114
let lean_s116 := by timed congr lean_s105 lean_s115
let lean_s117 := by timed congr lean_s104 lean_s116
let lean_s118 := by timed congr lean_s103 lean_s117
let lean_s119 := by timed congr lean_s102 lean_s118
let lean_s120 := by timed congr lean_s101 lean_s119
let lean_s121 := by timed congr lean_s100 lean_s120
let lean_s122 := by timed congr lean_s99 lean_s121
let lean_s123 := by timed congr lean_s98 lean_s122
let lean_s124 := by timed congr lean_s97 lean_s123
let lean_s125 := by timed congr lean_s96 lean_s124
let lean_s126 := by timed congr lean_s89 lean_s125
let lean_s127 := by timed congr lean_s82 lean_s126
let lean_s128 := by timed congr lean_s75 lean_s127
let lean_s129 := by timed congr lean_s68 lean_s128
let lean_s130 := by timed congr lean_s61 lean_s129
let lean_s131 := by timed congr lean_s54 lean_s130
let lean_s132 := by timed congr lean_s47 lean_s131
let lean_s133 := by timed congr lean_s40 lean_s132
let lean_s134 := by timed congr lean_s33 lean_s133
let lean_s135 := by timed congr lean_s26 lean_s134
let lean_s136 := by timed congr lean_s19 lean_s135
let lean_s137 := by timed congr lean_s12 lean_s136
let lean_s138 := by timed congr lean_s11 lean_s137
let lean_s139 := by timed congr lean_s10 lean_s138
let lean_s140 := by timed congr lean_s9 lean_s139
let lean_s141 := by timed congr lean_s8 lean_s140
let lean_s142 := by timed congr lean_s7 lean_s141
let lean_s143 := by timed congr lean_s6 lean_s142
let lean_s144 := by timed congr lean_s5 lean_s143
let lean_s145 := by timed congr lean_s4 lean_s144
let lean_s146 := by timed congr lean_s3 lean_s145
let lean_s147 := by timed congr lean_s2 lean_s146
have lean_s148 : (Eq (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (And (Ne (hashx5f1 x1) (hashx5f1 x3)) (And (Ne (hashx5f1 x2) (hashx5f1 x3)) (And (Ne (hashx5f2 x1) (hashx5f2 x2)) (And (Ne (hashx5f2 x1) (hashx5f2 x3)) (And (Ne (hashx5f2 x2) (hashx5f2 x3)) (And (Ne (hashx5f3 x1) (hashx5f3 x2)) (And (Ne (hashx5f3 x1) (hashx5f3 x3)) (And (Ne (hashx5f3 x2) (hashx5f3 x3)) (And (Ne (hashx5f4 x1) (hashx5f4 x2)) (And (Ne (hashx5f4 x1) (hashx5f4 x3)) (And (Ne (hashx5f4 x2) (hashx5f4 x3)) (And (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (And (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (And (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (And (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (And (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (And (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (And (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (And (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (And (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (And (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (And (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (And (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (And (Ne x1 x2) (And (Ne x1 x3) (And (Ne x2 x3) (And (binrel% LE.le (Int.ofNat 0) x1) (And (binrel% LT.lt x1 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x2) (And (binrel% LT.lt x2 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x3) (And (binrel% LT.lt x3 (Int.ofNat 4)) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))))))))))))))))))))))))))))))))))) (And (Not (Eq (hashx5f1 x1) (hashx5f1 x2))) (And (Not (Eq (hashx5f1 x1) (hashx5f1 x3))) (And (Not (Eq (hashx5f1 x2) (hashx5f1 x3))) (And (Not (Eq (hashx5f2 x1) (hashx5f2 x2))) (And (Not (Eq (hashx5f2 x1) (hashx5f2 x3))) (And (Not (Eq (hashx5f2 x2) (hashx5f2 x3))) (And (Not (Eq (hashx5f3 x1) (hashx5f3 x2))) (And (Not (Eq (hashx5f3 x1) (hashx5f3 x3))) (And (Not (Eq (hashx5f3 x2) (hashx5f3 x3))) (And (Not (Eq (hashx5f4 x1) (hashx5f4 x2))) (And (Not (Eq (hashx5f4 x1) (hashx5f4 x3))) (And (Not (Eq (hashx5f4 x2) (hashx5f4 x3))) (And (Or (Eq x1 (hashx5f1 x1)) (Or (Eq x2 (hashx5f1 x1)) (Eq x3 (hashx5f1 x1)))) (And (Or (Eq x1 (hashx5f1 x2)) (Or (Eq x2 (hashx5f1 x2)) (Eq x3 (hashx5f1 x2)))) (And (Or (Eq x1 (hashx5f1 x3)) (Or (Eq x2 (hashx5f1 x3)) (Eq x3 (hashx5f1 x3)))) (And (Or (Eq x1 (hashx5f2 x1)) (Or (Eq x2 (hashx5f2 x1)) (Eq x3 (hashx5f2 x1)))) (And (Or (Eq x1 (hashx5f2 x2)) (Or (Eq x2 (hashx5f2 x2)) (Eq x3 (hashx5f2 x2)))) (And (Or (Eq x1 (hashx5f2 x3)) (Or (Eq x2 (hashx5f2 x3)) (Eq x3 (hashx5f2 x3)))) (And (Or (Eq x1 (hashx5f3 x1)) (Or (Eq x2 (hashx5f3 x1)) (Eq x3 (hashx5f3 x1)))) (And (Or (Eq x1 (hashx5f3 x2)) (Or (Eq x2 (hashx5f3 x2)) (Eq x3 (hashx5f3 x2)))) (And (Or (Eq x1 (hashx5f3 x3)) (Or (Eq x2 (hashx5f3 x3)) (Eq x3 (hashx5f3 x3)))) (And (Or (Eq x1 (hashx5f4 x1)) (Or (Eq x2 (hashx5f4 x1)) (Eq x3 (hashx5f4 x1)))) (And (Or (Eq x1 (hashx5f4 x2)) (Or (Eq x2 (hashx5f4 x2)) (Eq x3 (hashx5f4 x2)))) (And (Or (Eq x1 (hashx5f4 x3)) (Or (Eq x2 (hashx5f4 x3)) (Eq x3 (hashx5f4 x3)))) (And (Not (Eq x1 x2)) (And (Not (Eq x1 x3)) (And (Not (Eq x2 x3)) (And (binrel% GE.ge x1 (Int.ofNat 0)) (And (Not (binrel% GE.ge x1 (Int.ofNat 4))) (And (binrel% GE.ge x2 (Int.ofNat 0)) (And (Not (binrel% GE.ge x2 (Int.ofNat 4))) (And (binrel% GE.ge x3 (Int.ofNat 0)) (And (Not (binrel% GE.ge x3 (Int.ofNat 4))) False)))))))))))))))))))))))))))))))))) := by timed congr lean_s1 lean_s147
have lean_s149 : (Eq (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (And (Ne (hashx5f1 x1) (hashx5f1 x3)) (And (Ne (hashx5f1 x2) (hashx5f1 x3)) (And (Ne (hashx5f2 x1) (hashx5f2 x2)) (And (Ne (hashx5f2 x1) (hashx5f2 x3)) (And (Ne (hashx5f2 x2) (hashx5f2 x3)) (And (Ne (hashx5f3 x1) (hashx5f3 x2)) (And (Ne (hashx5f3 x1) (hashx5f3 x3)) (And (Ne (hashx5f3 x2) (hashx5f3 x3)) (And (Ne (hashx5f4 x1) (hashx5f4 x2)) (And (Ne (hashx5f4 x1) (hashx5f4 x3)) (And (Ne (hashx5f4 x2) (hashx5f4 x3)) (And (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3)) (And (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3)) (And (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3)) (And (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3)) (And (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3)) (And (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3)) (And (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3)) (And (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3)) (And (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3)) (And (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3)) (And (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3)) (And (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3)) (And (Ne x1 x2) (And (Ne x1 x3) (And (Ne x2 x3) (And (binrel% LE.le (Int.ofNat 0) x1) (And (binrel% LT.lt x1 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x2) (And (binrel% LT.lt x2 (Int.ofNat 4)) (And (binrel% LE.le (Int.ofNat 0) x3) (And (binrel% LT.lt x3 (Int.ofNat 4)) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))))))))))))))))))))))))))))))))))) False) := by timed Eq.trans lean_s148 lean_r48
have lean_s150 : (Eq (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (Ne (hashx5f1 x1) (hashx5f1 x2)) (Ne (hashx5f1 x1) (hashx5f1 x3))) (Ne (hashx5f1 x2) (hashx5f1 x3))) (Ne (hashx5f2 x1) (hashx5f2 x2))) (Ne (hashx5f2 x1) (hashx5f2 x3))) (Ne (hashx5f2 x2) (hashx5f2 x3))) (Ne (hashx5f3 x1) (hashx5f3 x2))) (Ne (hashx5f3 x1) (hashx5f3 x3))) (Ne (hashx5f3 x2) (hashx5f3 x3))) (Ne (hashx5f4 x1) (hashx5f4 x2))) (Ne (hashx5f4 x1) (hashx5f4 x3))) (Ne (hashx5f4 x2) (hashx5f4 x3))) (Or (Or (Eq (hashx5f1 x1) x1) (Eq (hashx5f1 x1) x2)) (Eq (hashx5f1 x1) x3))) (Or (Or (Eq (hashx5f1 x2) x1) (Eq (hashx5f1 x2) x2)) (Eq (hashx5f1 x2) x3))) (Or (Or (Eq (hashx5f1 x3) x1) (Eq (hashx5f1 x3) x2)) (Eq (hashx5f1 x3) x3))) (Or (Or (Eq (hashx5f2 x1) x1) (Eq (hashx5f2 x1) x2)) (Eq (hashx5f2 x1) x3))) (Or (Or (Eq (hashx5f2 x2) x1) (Eq (hashx5f2 x2) x2)) (Eq (hashx5f2 x2) x3))) (Or (Or (Eq (hashx5f2 x3) x1) (Eq (hashx5f2 x3) x2)) (Eq (hashx5f2 x3) x3))) (Or (Or (Eq (hashx5f3 x1) x1) (Eq (hashx5f3 x1) x2)) (Eq (hashx5f3 x1) x3))) (Or (Or (Eq (hashx5f3 x2) x1) (Eq (hashx5f3 x2) x2)) (Eq (hashx5f3 x2) x3))) (Or (Or (Eq (hashx5f3 x3) x1) (Eq (hashx5f3 x3) x2)) (Eq (hashx5f3 x3) x3))) (Or (Or (Eq (hashx5f4 x1) x1) (Eq (hashx5f4 x1) x2)) (Eq (hashx5f4 x1) x3))) (Or (Or (Eq (hashx5f4 x2) x1) (Eq (hashx5f4 x2) x2)) (Eq (hashx5f4 x2) x3))) (Or (Or (Eq (hashx5f4 x3) x1) (Eq (hashx5f4 x3) x2)) (Eq (hashx5f4 x3) x3))) (Ne x1 x2)) (Ne x1 x3)) (Ne x2 x3)) (binrel% LE.le (Int.ofNat 0) x1)) (binrel% LT.lt x1 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x2)) (binrel% LT.lt x2 (Int.ofNat 4))) (binrel% LE.le (Int.ofNat 0) x3)) (binrel% LT.lt x3 (Int.ofNat 4))) (Ne (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HAdd.hAdd (hashx5f1 x1) (hashx5f1 x1)) Int) (smtIte (Eq (hashx5f1 x1) (hashx5f2 x1)) (hashx5f2 x1) (binrel% HMul.hMul (Int.ofNat 2) (hashx5f1 x1)) Int))) False) := by timed Eq.trans lean_r0 lean_s149
exact (show False from by timed eqResolve lean_a75 lean_s150)


