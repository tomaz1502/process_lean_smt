-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoSP : Rat}
variable {skoSM : Rat}
variable {skoS2 : Rat}
variable {skoSP : Rat}
variable {skoSM : Rat}
variable {skoS2 : Rat}
variable {skoX : Rat}
variable {skoX : Rat}

theorem th0 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (Eq (binrel% GT.gt skoSM (Rat.ofInt 0)) (Not (binrel% LE.le skoSM (Rat.ofInt 0)))) → (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (binrel% GT.gt skoSP (Rat.ofInt 0)) (Not (binrel% LE.le skoSP (Rat.ofInt 0)))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd skoSP skoSM)) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM)) → (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) True) → (Eq (Not True) False) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM)) → (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) → (Eq (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 4)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM)) skoSP) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))))) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM)) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 4)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM))) → (Eq (binrel% LE.le skoSP (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) → (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))))) → (Eq (binrel% LE.le skoS2 (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoS2) (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (Neg.neg (Rat.ofInt 4))) → (Eq (And (Not (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) skoSP)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSP (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSM (Rat.ofInt 0))) (And (Not (binrel% LE.le skoS2 (Rat.ofInt 0))) (Not (binrel% LE.le (Rat.ofInt 1) skoX))))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) skoSP)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSP (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSM (Rat.ofInt 0))) (And (Not (binrel% LE.le skoS2 (Rat.ofInt 0))) (Not (binrel% LE.le (Rat.ofInt 1) skoX)))))))) → (Eq (binrel% LE.le (Rat.ofInt 1) skoX) (binrel% GE.ge skoX (Int.ofNat 1))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))))) → (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) True) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) → (Eq (Neg.neg (Rat.ofInt 4)) (Neg.neg (Rat.ofInt 4))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))))) → (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) True) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (Rat.ofInt 4))) True) → (Eq (binrel% LE.le skoSM (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) → (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoSP skoSM) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP))) (Rat.ofInt 0)) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))))) → (Eq (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0))) (Neg.neg (Rat.ofInt 4))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP)) → (And (Not (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) skoSP)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSP (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSM (Rat.ofInt 0))) (And (Not (binrel% LE.le skoS2 (Rat.ofInt 0))) (Not (binrel% LE.le (Rat.ofInt 1) skoX))))))) → False :=
fun lean_r0 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r1 : (Eq (binrel% GT.gt skoSM (Rat.ofInt 0)) (Not (binrel% LE.le skoSM (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r3 : (Eq (binrel% GT.gt skoSP (Rat.ofInt 0)) (Not (binrel% LE.le skoSP (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd skoSP skoSM)) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM)) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) True) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM)) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 4)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM)) skoSP) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM)) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 4)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM))) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (binrel% LE.le skoSP (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))))) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (binrel% LE.le skoS2 (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoS2) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (Neg.neg (Rat.ofInt 4))) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (And (Not (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) skoSP)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSP (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSM (Rat.ofInt 0))) (And (Not (binrel% LE.le skoS2 (Rat.ofInt 0))) (Not (binrel% LE.le (Rat.ofInt 1) skoX))))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) skoSP)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSP (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSM (Rat.ofInt 0))) (And (Not (binrel% LE.le skoS2 (Rat.ofInt 0))) (Not (binrel% LE.le (Rat.ofInt 1) skoX)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq (binrel% LE.le (Rat.ofInt 1) skoX) (binrel% GE.ge skoX (Int.ofNat 1))) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))))) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq (Neg.neg (Rat.ofInt 4)) (Neg.neg (Rat.ofInt 4))) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (Rat.ofInt 4))) True) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq (binrel% LE.le skoSM (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoSP skoSM) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0))) (Neg.neg (Rat.ofInt 4))) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP)) => -- THEORY_REWRITE_ARITH
fun lean_a36 : (And (Not (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) skoSP)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSP (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSM (Rat.ofInt 0))) (And (Not (binrel% LE.le skoS2 (Rat.ofInt 0))) (Not (binrel% LE.le (Rat.ofInt 1) skoX))))))) => by
have lean_s0 : (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))) False))) :=
  (scope (fun lean_a37 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) =>
    (scope (fun lean_a38 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) =>
      (scope (fun lean_a39 : (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) =>
        have lean_s0 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))) := by timed flipCongrArg lean_r31 [Not]
        have lean_s1 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))) := by timed Eq.trans lean_r17 lean_s0
        have lean_s2 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4)))) := by timed Eq.symm lean_s1
        have lean_s3 : (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))) := by timed eqResolve lean_a39 lean_s2
        have lean_s4 : (Or (Not (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4)))) False) :=
          (scope (fun lean_a40 : (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))) =>
            have lean_s4 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := by timed trueElim lean_r0
            have lean_s5 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4)))) := by timed And.intro lean_s4 lean_a40
            have lean_s6 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4)))) (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))))) := by arithMulPos [(binrel% HAdd.hAdd skoSP skoSM), (Neg.neg (Rat.ofInt 4)), (Rat.ofInt 1)], 0
            have lean_s7 : (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4)))) := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r2
            have lean_s9 : (Eq (Not (binrel% LE.le skoSM (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) := by timed flipCongrArg lean_r29 [Not]
            have lean_s10 : (Eq (binrel% GT.gt skoSM (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) := by timed Eq.trans lean_r1 lean_s9
            have lean_s11 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) (binrel% GT.gt skoSM (Rat.ofInt 0))) := by timed Eq.symm lean_s10
            have lean_s12 : (binrel% GT.gt skoSM (Rat.ofInt 0)) := by timed eqResolve lean_a38 lean_s11
            have lean_s13 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoSM (Rat.ofInt 0))) := by timed And.intro lean_s8 lean_s12
            have lean_s14 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoSM (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoSM, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 2
            have lean_s15 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s13 lean_s14
            have lean_s16 : (Eq (Not (binrel% LE.le skoSP (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) := by timed flipCongrArg lean_r15 [Not]
            have lean_s17 : (Eq (binrel% GT.gt skoSP (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) := by timed Eq.trans lean_r3 lean_s16
            have lean_s18 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) (binrel% GT.gt skoSP (Rat.ofInt 0))) := by timed Eq.symm lean_s17
            have lean_s19 : (binrel% GT.gt skoSP (Rat.ofInt 0)) := by timed eqResolve lean_a37 lean_s18
            have lean_s20 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoSP (Rat.ofInt 0))) := by timed And.intro lean_s8 lean_s19
            have lean_s21 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoSP (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoSP, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 2
            have lean_s22 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s20 lean_s21
            have lean_s23 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) := by sumBounds [lean_s7, lean_s15, lean_s22]
            let lean_s24 := by timed congrHAdd lean_r5 lean_r35
            have lean_s25 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP))) (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoSP skoSM) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP)))) := by timed congrHAdd lean_r4 lean_s24
            have lean_s26 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP))) (Rat.ofInt 0)) := by timed Eq.trans lean_s25 lean_r32
            let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
            let lean_s28 := by timed congrHAdd lean_r8 lean_r8
            have lean_s29 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0)))) := by timed congrHAdd lean_r19 lean_s28
            have lean_s30 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) (Neg.neg (Rat.ofInt 4))) := by timed Eq.trans lean_s29 lean_r34
            have lean_s31 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (Rat.ofInt 4)))) := by timed congr lean_s27 lean_s30
            have lean_s32 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) True) := by timed Eq.trans lean_s31 lean_r28
            have lean_s33 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) (Not True)) := by timed flipCongrArg lean_s32 [Not]
            have lean_s34 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) False) := by timed Eq.trans lean_s33 lean_r7
            have lean_s35 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoSP skoSM)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSM) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSP))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Rat.ofInt 4))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) False) := by timed Eq.trans lean_r12 lean_s34
            show False from by timed eqResolve lean_s23 lean_s35
          ))
        have lean_s5 : (Not (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4)))) := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq (Not (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4)))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))))) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq (Not (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4)))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) := by timed Eq.trans lean_s6 lean_r16
        have lean_s8 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4)))) := by timed Eq.symm lean_r31
        have lean_s9 : (Eq (Not (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4)))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4)))) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))) := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))) (Not (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))))) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))) (Not (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4))))) := by timed Eq.trans lean_r31 lean_s11
        have lean_s13 : (Not (binrel% LT.lt (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Rat.ofInt 4)))) := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))))) := by timed flipNotAnd lean_s1 [(Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))), (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))), (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) := by timed congr lean_s5 lean_r30
have lean_s7 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s6 lean_r27
have lean_s8 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) True) := by timed Eq.trans lean_r33 lean_s7
have lean_s9 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) := by timed congr lean_s12 lean_r24
have lean_s14 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s13 lean_r23
have lean_s15 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) True) := by timed Eq.trans lean_r26 lean_s14
have lean_s16 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))) := by timed congr lean_s19 lean_r16
have lean_s21 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))))) True) := by timed Eq.trans lean_s20 lean_r6
have lean_s22 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) True) := by timed Eq.trans lean_r22 lean_s21
have lean_s23 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))))) := by timed congr lean_s10 lean_s24
have lean_s26 : (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))) := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Or (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) := by permutateOr lean_s26, [2, 0, 1], (- 1)
have lean_s28 : (Eq And And) := by timed rfl
let lean_s29 := by timed flipCongrArg lean_r25 [HAdd.hAdd]
have lean_s30 : (Eq skoSM skoSM) := by timed rfl
let lean_s31 := by timed flipCongrArg lean_s30 [HMul.hMul]
have lean_s32 : (Eq (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s31 lean_r13
have lean_s33 : (Eq (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM)) := by timed Eq.trans lean_s32 lean_r9
have lean_s34 : (Eq (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM))) := by timed congr lean_s29 lean_s33
have lean_s35 : (Eq (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 4)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM))) := by timed Eq.trans lean_s34 lean_r14
let lean_s36 := by timed flipCongrArg lean_s35 [LE.le]
have lean_s37 : (Eq skoSP skoSP) := by timed rfl
have lean_s38 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) skoSP) (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 4)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM)) skoSP)) := by timed congr lean_s36 lean_s37
have lean_s39 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) skoSP) (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) := by timed Eq.trans lean_s38 lean_r11
have lean_s40 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) skoSP)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))))) := by timed flipCongrArg lean_s39 [Not]
let lean_s41 := by timed congr lean_s28 lean_s40
have lean_s42 : (Eq (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r10 [Not]
let lean_s43 := by timed congr lean_s28 lean_s42
have lean_s44 : (Eq (Not (binrel% LE.le skoSP (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)))) := by timed flipCongrArg lean_r15 [Not]
let lean_s45 := by timed congr lean_s28 lean_s44
have lean_s46 : (Eq (Not (binrel% LE.le skoSM (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)))) := by timed flipCongrArg lean_r29 [Not]
let lean_s47 := by timed congr lean_s28 lean_s46
have lean_s48 : (Eq (Not (binrel% LE.le skoS2 (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoS2) (Int.ofNat 0)))) := by timed flipCongrArg lean_r18 [Not]
let lean_s49 := by timed congr lean_s28 lean_s48
have lean_s50 : (Eq (Not (binrel% LE.le (Rat.ofInt 1) skoX)) (Not (binrel% GE.ge skoX (Int.ofNat 1)))) := by timed flipCongrArg lean_r21 [Not]
let lean_s51 := by timed congr lean_s49 lean_s50
let lean_s52 := by timed congr lean_s47 lean_s51
let lean_s53 := by timed congr lean_s45 lean_s52
let lean_s54 := by timed congr lean_s43 lean_s53
have lean_s55 : (Eq (And (Not (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) skoSP)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSP (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSM (Rat.ofInt 0))) (And (Not (binrel% LE.le skoS2 (Rat.ofInt 0))) (Not (binrel% LE.le (Rat.ofInt 1) skoX))))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoS2) (Int.ofNat 0))) (Not (binrel% GE.ge skoX (Int.ofNat 1))))))))) := by timed congr lean_s41 lean_s54
have lean_s56 : (Eq (And (Not (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 4)) (binrel% HMul.hMul skoSM (Neg.neg (Rat.ofInt 1)))) skoSP)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSP (Rat.ofInt 0))) (And (Not (binrel% LE.le skoSM (Rat.ofInt 0))) (And (Not (binrel% LE.le skoS2 (Rat.ofInt 0))) (Not (binrel% LE.le (Rat.ofInt 1) skoX))))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoS2) (Int.ofNat 0))) (Not (binrel% GE.ge skoX (Int.ofNat 1))))))))) := by timed Eq.trans lean_r20 lean_s55
have lean_s57 : (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoS2) (Int.ofNat 0))) (Not (binrel% GE.ge skoX (Int.ofNat 1)))))))) := by timed eqResolve lean_a36 lean_s56
have lean_s58 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0))) := by andElim lean_s57, 3
let lean_s59 := by R1 lean_s27, lean_s58, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSM) (Int.ofNat 0)), [(- 1), 0]
have lean_s60 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0))) := by andElim lean_s57, 2
let lean_s61 := by R1 lean_s59, lean_s60, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSP) (Int.ofNat 0)), [(- 1), 0]
have lean_s62 : (Not (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4)))) := by andElim lean_s57, 0
exact (show False from by R1 lean_s61, lean_s62, (binrel% GE.ge (binrel% HAdd.hAdd skoSP skoSM) (Neg.neg (Int.ofNat 4))), [0, 0])


