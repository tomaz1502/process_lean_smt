-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoB : Rat}
variable {skoT : Rat}
variable {skoA : Rat}
variable {skoT : Rat}
variable {skoB : Rat}
variable {skoA : Rat}

theorem th0 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoB skoA) (Rat.ofInt 0)) (Not (binrel% LE.le (binrel% HAdd.hAdd skoB skoA) (Rat.ofInt 0)))) → (Eq (binrel% GT.gt (Rat.ofInt 2) (Int.ofNat 0)) True) → (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) True) → (Eq (binrel% LE.le (binrel% HAdd.hAdd skoB skoA) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))))) → (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) → (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) True) → (Eq (And (Not (binrel% LE.le (Rat.ofInt 0) skoB)) (And (Not (binrel% LE.le skoB (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le skoT (Rat.ofInt 1))) (Not (binrel% LE.le skoB skoA))))) (And (Not (binrel% LE.le (Rat.ofInt 0) skoB)) (And (Not (binrel% LE.le skoB (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le skoT (Rat.ofInt 1))) (Not (binrel% LE.le skoB skoA)))))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) → (Eq (binrel% LE.le skoB skoA) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Rat.ofInt 2) skoB) (binrel% HMul.hMul (Int.ofNat 2) skoB)) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Rat.ofInt 2) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Rat.ofInt 2) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0))))))) → (Eq (binrel% LE.le (Rat.ofInt 0) skoB) (binrel% GE.ge skoB (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA)) → (Eq (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (binrel% HMul.hMul (Int.ofNat 2) skoB))) (Rat.ofInt 0)) → (Eq (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% LE.le skoT (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoT) (Neg.neg (Int.ofNat 1)))) → (Eq (Eq (binrel% GE.ge skoB (Int.ofNat 0)) (binrel% GE.ge skoB (Int.ofNat 0))) True) → (Eq (Not (Not (binrel% GE.ge skoB (Int.ofNat 0)))) (binrel% GE.ge skoB (Int.ofNat 0))) → (Eq (binrel% LE.le (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) → (Eq (Not True) False) → (Eq (Eq (Not (Not (binrel% GE.ge skoB (Int.ofNat 0)))) (binrel% GE.ge skoB (Int.ofNat 0))) (Eq (binrel% GE.ge skoB (Int.ofNat 0)) (Not (Not (binrel% GE.ge skoB (Int.ofNat 0)))))) → (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)) (Not (binrel% LE.le (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)))) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0)) True) → (Eq (binrel% LT.lt skoB (Rat.ofInt 0)) (Not (binrel% GE.ge skoB (Rat.ofInt 0)))) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0))) (Rat.ofInt 0)) → (Eq (binrel% LE.le skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% GE.ge skoB (Rat.ofInt 0)) (binrel% GE.ge skoB (Int.ofNat 0))) → (And (Not (binrel% LE.le (Rat.ofInt 0) skoB)) (And (Not (binrel% LE.le skoB (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le skoT (Rat.ofInt 1))) (Not (binrel% LE.le skoB skoA))))) → False :=
fun lean_r0 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r1 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoB skoA) (Rat.ofInt 0)) (Not (binrel% LE.le (binrel% HAdd.hAdd skoB skoA) (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% GT.gt (Rat.ofInt 2) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r3 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq (binrel% LE.le (binrel% HAdd.hAdd skoB skoA) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r6 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq (And (Not (binrel% LE.le (Rat.ofInt 0) skoB)) (And (Not (binrel% LE.le skoB (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le skoT (Rat.ofInt 1))) (Not (binrel% LE.le skoB skoA))))) (And (Not (binrel% LE.le (Rat.ofInt 0) skoB)) (And (Not (binrel% LE.le skoB (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le skoT (Rat.ofInt 1))) (Not (binrel% LE.le skoB skoA)))))) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq (binrel% LE.le skoB skoA) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% HMul.hMul (Rat.ofInt 2) skoB) (binrel% HMul.hMul (Int.ofNat 2) skoB)) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Rat.ofInt 2) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Rat.ofInt 2) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0))))))) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (binrel% LE.le (Rat.ofInt 0) skoB) (binrel% GE.ge skoB (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA)) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (binrel% HMul.hMul (Int.ofNat 2) skoB))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (binrel% LE.le skoT (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoT) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq (Eq (binrel% GE.ge skoB (Int.ofNat 0)) (binrel% GE.ge skoB (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq (Not (Not (binrel% GE.ge skoB (Int.ofNat 0)))) (binrel% GE.ge skoB (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq (binrel% LE.le (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq (Eq (Not (Not (binrel% GE.ge skoB (Int.ofNat 0)))) (binrel% GE.ge skoB (Int.ofNat 0))) (Eq (binrel% GE.ge skoB (Int.ofNat 0)) (Not (Not (binrel% GE.ge skoB (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)) (Not (binrel% LE.le (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0)) True) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq (binrel% LT.lt skoB (Rat.ofInt 0)) (Not (binrel% GE.ge skoB (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq (binrel% LE.le skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq (binrel% GE.ge skoB (Rat.ofInt 0)) (binrel% GE.ge skoB (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_a34 : (And (Not (binrel% LE.le (Rat.ofInt 0) skoB)) (And (Not (binrel% LE.le skoB (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le skoT (Rat.ofInt 1))) (Not (binrel% LE.le skoB skoA))))) => by
have lean_s0 : (Or (Not (Not (binrel% GE.ge skoB (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))) False))) :=
  (scope (fun lean_a35 : (Not (binrel% GE.ge skoB (Int.ofNat 0))) =>
    (scope (fun lean_a36 : (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) =>
      (scope (fun lean_a37 : (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) =>
        have lean_s0 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))) := by timed flipCongrArg lean_r24 [Not]
        have lean_s1 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))) := by timed Eq.trans lean_r27 lean_s0
        have lean_s2 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0))) := by timed Eq.symm lean_s1
        have lean_s3 : (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)) := by timed eqResolve lean_a37 lean_s2
        have lean_s4 : (Or (Not (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0))) False) :=
          (scope (fun lean_a38 : (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)) =>
            have lean_s4 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r0
            have lean_s5 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0))) := by timed And.intro lean_s4 lean_a38
            have lean_s6 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [(binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)), (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 2
            have lean_s7 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd skoB skoA) (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) := by timed flipCongrArg lean_r4 [Not]
            have lean_s9 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoB skoA) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) := by timed Eq.trans lean_r1 lean_s8
            have lean_s10 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) (binrel% GT.gt (binrel% HAdd.hAdd skoB skoA) (Rat.ofInt 0))) := by timed Eq.symm lean_s9
            have lean_s11 : (binrel% GT.gt (binrel% HAdd.hAdd skoB skoA) (Rat.ofInt 0)) := by timed eqResolve lean_a36 lean_s10
            have lean_s12 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt (binrel% HAdd.hAdd skoB skoA) (Rat.ofInt 0))) := by timed And.intro lean_s4 lean_s11
            have lean_s13 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt (binrel% HAdd.hAdd skoB skoA) (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [(binrel% HAdd.hAdd skoB skoA), (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 2
            have lean_s14 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : (binrel% GT.gt (Rat.ofInt 2) (Int.ofNat 0)) := by timed trueElim lean_r2
            have lean_s16 : (Eq (Not (binrel% GE.ge skoB (Rat.ofInt 0))) (Not (binrel% GE.ge skoB (Int.ofNat 0)))) := by timed flipCongrArg lean_r33 [Not]
            have lean_s17 : (Eq (binrel% LT.lt skoB (Rat.ofInt 0)) (Not (binrel% GE.ge skoB (Int.ofNat 0)))) := by timed Eq.trans lean_r29 lean_s16
            have lean_s18 : (Eq (Not (binrel% GE.ge skoB (Int.ofNat 0))) (binrel% LT.lt skoB (Rat.ofInt 0))) := by timed Eq.symm lean_s17
            have lean_s19 : (binrel% LT.lt skoB (Rat.ofInt 0)) := by timed eqResolve lean_a35 lean_s18
            have lean_s20 : (And (binrel% GT.gt (Rat.ofInt 2) (Int.ofNat 0)) (binrel% LT.lt skoB (Rat.ofInt 0))) := by timed And.intro lean_s15 lean_s19
            have lean_s21 : (Implies (And (binrel% GT.gt (Rat.ofInt 2) (Int.ofNat 0)) (binrel% LT.lt skoB (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 2) skoB) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0)))) := by arithMulPos [skoB, (Rat.ofInt 0), (Rat.ofInt 2)], 0
            have lean_s22 : (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 2) skoB) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0))) := by timed modusPonens lean_s20 lean_s21
            have lean_s23 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Rat.ofInt 2) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0))))) := by sumBounds [lean_s7, lean_s14, lean_s22]
            let lean_s24 := by timed congrHAdd lean_r10 lean_r14
            have lean_s25 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Rat.ofInt 2) skoB))) (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (binrel% HMul.hMul (Int.ofNat 2) skoB)))) := by timed congrHAdd lean_r17 lean_s24
            have lean_s26 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Rat.ofInt 2) skoB))) (Rat.ofInt 0)) := by timed Eq.trans lean_s25 lean_r19
            let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
            let lean_s28 := by timed congrHAdd lean_r32 lean_r20
            have lean_s29 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0)))) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0)))) := by timed congrHAdd lean_r32 lean_s28
            have lean_s30 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0)))) (Rat.ofInt 0)) := by timed Eq.trans lean_s29 lean_r30
            have lean_s31 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Rat.ofInt 2) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0))))) (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0))) := by timed congr lean_s27 lean_s30
            have lean_s32 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Rat.ofInt 2) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0))))) True) := by timed Eq.trans lean_s31 lean_r28
            have lean_s33 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Rat.ofInt 2) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0)))))) (Not True)) := by timed flipCongrArg lean_s32 [Not]
            have lean_s34 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Rat.ofInt 2) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0)))))) False) := by timed Eq.trans lean_s33 lean_r25
            have lean_s35 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoB skoA)) (binrel% HMul.hMul (Rat.ofInt 2) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 2) (Rat.ofInt 0))))) False) := by timed Eq.trans lean_r15 lean_s34
            show False from by timed eqResolve lean_s23 lean_s35
          ))
        have lean_s5 : (Not (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0))) := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq (Not (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))))) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq (Not (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) := by timed Eq.trans lean_s6 lean_r6
        have lean_s8 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)) (binrel% LE.le (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0))) := by timed Eq.symm lean_r24
        have lean_s9 : (Eq (Not (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0))) (binrel% LE.le (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0))) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : (binrel% LE.le (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)) := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)) (Not (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)))) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq (binrel% LE.le (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)) (Not (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0)))) := by timed Eq.trans lean_r24 lean_s11
        have lean_s13 : (Not (binrel% GT.gt (binrel% HAdd.hAdd skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Rat.ofInt 0))) := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And (Not (binrel% GE.ge skoB (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (Not (binrel% GE.ge skoB (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))))) := by timed flipNotAnd lean_s1 [(Not (binrel% GE.ge skoB (Int.ofNat 0))), (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))), (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq (binrel% GE.ge skoB (Int.ofNat 0)) (binrel% GE.ge skoB (Int.ofNat 0))) := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq (Eq (binrel% GE.ge skoB (Int.ofNat 0)) (Not (Not (binrel% GE.ge skoB (Int.ofNat 0))))) (Eq (binrel% GE.ge skoB (Int.ofNat 0)) (binrel% GE.ge skoB (Int.ofNat 0)))) := by timed congr lean_s5 lean_r23
have lean_s7 : (Eq (Eq (binrel% GE.ge skoB (Int.ofNat 0)) (Not (Not (binrel% GE.ge skoB (Int.ofNat 0))))) True) := by timed Eq.trans lean_s6 lean_r22
have lean_s8 : (Eq (Eq (Not (Not (binrel% GE.ge skoB (Int.ofNat 0)))) (binrel% GE.ge skoB (Int.ofNat 0))) True) := by timed Eq.trans lean_r26 lean_s7
have lean_s9 : (Eq (Not (Not (binrel% GE.ge skoB (Int.ofNat 0)))) (binrel% GE.ge skoB (Int.ofNat 0))) := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) := by timed congr lean_s12 lean_r12
have lean_s14 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s13 lean_r3
have lean_s15 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) True) := by timed Eq.trans lean_r9 lean_s14
have lean_s16 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))) := by timed congr lean_s19 lean_r6
have lean_s21 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s20 lean_r7
have lean_s22 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) True) := by timed Eq.trans lean_r5 lean_s21
have lean_s23 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq (Or (Not (Not (binrel% GE.ge skoB (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))))) (Or (binrel% GE.ge skoB (Int.ofNat 0)) (Or (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))))) := by timed congr lean_s10 lean_s24
have lean_s26 : (Or (binrel% GE.ge skoB (Int.ofNat 0)) (Or (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))) := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Eq And And) := by timed rfl
have lean_s28 : (Eq (Not (binrel% LE.le (Rat.ofInt 0) skoB)) (Not (binrel% GE.ge skoB (Int.ofNat 0)))) := by timed flipCongrArg lean_r16 [Not]
let lean_s29 := by timed congr lean_s27 lean_s28
have lean_s30 : (Eq skoB skoB) := by timed rfl
let lean_s31 := by timed flipCongrArg lean_s30 [LE.le]
have lean_s32 : (Eq skoA skoA) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [HMul.hMul]
have lean_s34 : (Eq (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s33 lean_r11
have lean_s35 : (Eq (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) := by timed Eq.trans lean_s34 lean_r18
have lean_s36 : (Eq (binrel% LE.le skoB (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1)))) (binrel% LE.le skoB (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA))) := by timed congr lean_s31 lean_s35
have lean_s37 : (Eq (binrel% LE.le skoB (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) := by timed Eq.trans lean_s36 lean_r31
have lean_s38 : (Eq (Not (binrel% LE.le skoB (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)))) := by timed flipCongrArg lean_s37 [Not]
let lean_s39 := by timed congr lean_s27 lean_s38
have lean_s40 : (Eq (Not (binrel% LE.le skoT (Rat.ofInt 1))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoT) (Neg.neg (Int.ofNat 1))))) := by timed flipCongrArg lean_r21 [Not]
let lean_s41 := by timed congr lean_s27 lean_s40
have lean_s42 : (Eq (Not (binrel% LE.le skoB skoA)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))) := by timed flipCongrArg lean_r13 [Not]
let lean_s43 := by timed congr lean_s41 lean_s42
let lean_s44 := by timed congr lean_s39 lean_s43
have lean_s45 : (Eq (And (Not (binrel% LE.le (Rat.ofInt 0) skoB)) (And (Not (binrel% LE.le skoB (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le skoT (Rat.ofInt 1))) (Not (binrel% LE.le skoB skoA))))) (And (Not (binrel% GE.ge skoB (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoT) (Neg.neg (Int.ofNat 1)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))))))) := by timed congr lean_s29 lean_s44
have lean_s46 : (Eq (And (Not (binrel% LE.le (Rat.ofInt 0) skoB)) (And (Not (binrel% LE.le skoB (binrel% HMul.hMul skoA (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le skoT (Rat.ofInt 1))) (Not (binrel% LE.le skoB skoA))))) (And (Not (binrel% GE.ge skoB (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoT) (Neg.neg (Int.ofNat 1)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))))))) := by timed Eq.trans lean_r8 lean_s45
have lean_s47 : (And (Not (binrel% GE.ge skoB (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoT) (Neg.neg (Int.ofNat 1)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)))))) := by timed eqResolve lean_a34 lean_s46
have lean_s48 : (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0))) := by andElim lean_s47, 3
let lean_s49 := by R1 lean_s26, lean_s48, (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) skoA) (Int.ofNat 0)), [(- 1), 0]
have lean_s50 : (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0))) := by andElim lean_s47, 1
let lean_s51 := by R1 lean_s49, lean_s50, (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA)) (Int.ofNat 0)), [(- 1), 0]
have lean_s52 : (Not (binrel% GE.ge skoB (Int.ofNat 0))) := by andElim lean_s47, 0
exact (show False from by R1 lean_s51, lean_s52, (binrel% GE.ge skoB (Int.ofNat 0)), [0, 0])


