-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoS : Rat}
variable {skoX : Rat}
variable {skoC : Rat}
variable {skoX : Rat}
variable {skoS : Rat}
variable {skoC : Rat}

theorem th0 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (Eq (binrel% LT.lt skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))))) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) True) → (Eq (binrel% GT.gt skoX (Rat.ofInt 0)) (Not (binrel% LE.le skoX (Rat.ofInt 0)))) → (Eq (Not True) False) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoX) skoX) → (Eq (binrel% LE.le skoS (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42))) skoC)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoC) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 42) (Int.ofNat 235))) skoS)) (Int.ofNat 0))) → (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) → (Eq (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))) (Rat.ofInt 0)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) → (Eq (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoS (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42))))))) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoS (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42)))))))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% HMul.hMul skoC (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42)))) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42))) skoC)) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) → (Eq (Neg.neg (Rat.ofInt 235)) (Neg.neg (Rat.ofInt 235))) → (Eq (Neg.neg (Rat.ofInt 3000)) (Neg.neg (Rat.ofInt 3000))) → (Eq (binrel% LE.le (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))) skoX) (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) → (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 235)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 42))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42)))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 3000)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 19))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) → (Eq (binrel% HAdd.hAdd skoX (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) → (Eq (Not (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))))) (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) → (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 235)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 42)))) → (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 3000)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 19)))) → (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoS (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42))))))) → False :=
fun lean_r0 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r1 : (Eq (binrel% LT.lt skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) True) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% GT.gt skoX (Rat.ofInt 0)) (Not (binrel% LE.le skoX (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoX) skoX) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% LE.le skoS (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42))) skoC)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoC) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 42) (Int.ofNat 235))) skoS)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))) (Rat.ofInt 0)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoS (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42))))))) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoS (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% HMul.hMul skoC (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42)))) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42))) skoC)) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq (Neg.neg (Rat.ofInt 235)) (Neg.neg (Rat.ofInt 235))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (Neg.neg (Rat.ofInt 3000)) (Neg.neg (Rat.ofInt 3000))) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (binrel% LE.le (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))) skoX) (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r20 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 235)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 42))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42)))) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 3000)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 19))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq (binrel% HAdd.hAdd skoX (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq (Not (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))))) (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 235)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 42)))) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 3000)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 19)))) => -- THEORY_REWRITE_ARITH
fun lean_a26 : (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoS (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42))))))) => by
have lean_s0 : (Or (Not (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) False)) :=
  (scope (fun lean_a27 : (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) =>
    (scope (fun lean_a28 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) =>
      have lean_s0 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := by timed trueElim lean_r0
      have lean_s1 : (Eq (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) (binrel% LT.lt skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) := by timed Eq.symm lean_r1
      have lean_s2 : (binrel% LT.lt skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) := by timed eqResolve lean_a27 lean_s1
      have lean_s3 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))))) := by arithMulPos [skoX, (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))), (Rat.ofInt 1)], 0
      have lean_s5 : (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r19
      have lean_s7 : (Eq (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r10 [Not]
      have lean_s8 : (Eq (binrel% GT.gt skoX (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed Eq.trans lean_r6 lean_s7
      have lean_s9 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (binrel% GT.gt skoX (Rat.ofInt 0))) := by timed Eq.symm lean_s8
      have lean_s10 : (binrel% GT.gt skoX (Rat.ofInt 0)) := by timed eqResolve lean_a28 lean_s9
      have lean_s11 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoX (Rat.ofInt 0))) := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoX (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoX, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 2
      have lean_s13 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r8 [HAdd.hAdd]
      have lean_s16 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd skoX (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) := by timed congr lean_s15 lean_r3
      have lean_s17 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (Rat.ofInt 0)) := by timed Eq.trans lean_s16 lean_r22
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r4 [HAdd.hAdd]
      have lean_s20 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))) (Rat.ofInt 0))) := by timed congr lean_s19 lean_r13
      have lean_s21 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) := by timed Eq.trans lean_s20 lean_r11
      have lean_s22 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) True) := by timed Eq.trans lean_s22 lean_r5
      have lean_s24 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) (Not True)) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) False) := by timed Eq.trans lean_s24 lean_r7
      have lean_s26 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) False) := by timed Eq.trans lean_r2 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))))) := by timed flipNotAnd lean_s1 [(Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))), (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))]
let lean_s3 := by timed flipCongrArg lean_r23 [Or]
have lean_s4 : (Eq (Or (Not (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))))) (Or (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed congr lean_s3 lean_r15
have lean_s5 : (Or (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
let lean_s7 := by timed flipCongrArg lean_r17 [HMul.hMul]
have lean_s8 : (Eq (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 19)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 19))) := by timed rfl
have lean_s9 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 3000)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 19))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 3000)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 19)))) := by timed congr lean_s7 lean_s8
have lean_s10 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 3000)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 19))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) := by timed Eq.trans lean_s9 lean_r21
have lean_s11 : (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))) := by timed Eq.trans lean_r25 lean_s10
let lean_s12 := by timed flipCongrArg lean_s11 [LE.le]
have lean_s13 : (Eq skoX skoX) := by timed rfl
have lean_s14 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) skoX) (binrel% LE.le (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))) skoX)) := by timed congr lean_s12 lean_s13
have lean_s15 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) skoX) (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) := by timed Eq.trans lean_s14 lean_r18
have lean_s16 : (Eq (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) skoX)) (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))))) := by timed flipCongrArg lean_s15 [Not]
let lean_s17 := by timed congr lean_s6 lean_s16
have lean_s18 : (Eq (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r10 [Not]
let lean_s19 := by timed congr lean_s6 lean_s18
have lean_s20 : (Eq skoS skoS) := by timed rfl
let lean_s21 := by timed flipCongrArg lean_s20 [LE.le]
have lean_s22 : (Eq skoC skoC) := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [HMul.hMul]
let lean_s24 := by timed flipCongrArg lean_r16 [HMul.hMul]
have lean_s25 : (Eq (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 42)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 42))) := by timed rfl
have lean_s26 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 235)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 42))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 235)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 42)))) := by timed congr lean_s24 lean_s25
have lean_s27 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 235)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 42))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42)))) := by timed Eq.trans lean_s26 lean_r20
have lean_s28 : (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42)))) := by timed Eq.trans lean_r24 lean_s27
have lean_s29 : (Eq (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42))) (binrel% HMul.hMul skoC (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42))))) := by timed congr lean_s23 lean_s28
have lean_s30 : (Eq (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42))) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42))) skoC)) := by timed Eq.trans lean_s29 lean_r14
have lean_s31 : (Eq (binrel% LE.le skoS (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42)))) (binrel% LE.le skoS (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 235) (Int.ofNat 42))) skoC))) := by timed congr lean_s21 lean_s30
have lean_s32 : (Eq (binrel% LE.le skoS (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoC) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 42) (Int.ofNat 235))) skoS)) (Int.ofNat 0))) := by timed Eq.trans lean_s31 lean_r9
have lean_s33 : (Eq (Not (binrel% LE.le skoS (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoC) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 42) (Int.ofNat 235))) skoS)) (Int.ofNat 0)))) := by timed flipCongrArg lean_s32 [Not]
let lean_s34 := by timed congr lean_s19 lean_s33
have lean_s35 : (Eq (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoS (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42))))))) (And (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoC) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 42) (Int.ofNat 235))) skoS)) (Int.ofNat 0)))))) := by timed congr lean_s17 lean_s34
have lean_s36 : (Eq (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 3000)) (Rat.ofInt 19)) skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoS (binrel% HMul.hMul skoC (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 235)) (Rat.ofInt 42))))))) (And (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoC) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 42) (Int.ofNat 235))) skoS)) (Int.ofNat 0)))))) := by timed Eq.trans lean_r12 lean_s35
have lean_s37 : (And (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoC) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 42) (Int.ofNat 235))) skoS)) (Int.ofNat 0))))) := by timed eqResolve lean_a26 lean_s36
have lean_s38 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) := by andElim lean_s37, 1
let lean_s39 := by R1 lean_s5, lean_s38, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)), [(- 1), 0]
have lean_s40 : (Not (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19))))) := by andElim lean_s37, 0
exact (show False from by R1 lean_s39, lean_s40, (binrel% GE.ge skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) (Int.ofNat 19)))), [0, 0])


