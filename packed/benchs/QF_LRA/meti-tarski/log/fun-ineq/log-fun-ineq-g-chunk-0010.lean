-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoB : Rat}
variable {skoA : Rat}
variable {skoX : Rat}
variable {skoB : Rat}
variable {skoA : Rat}

theorem th0 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd skoB skoX)) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoB skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB))) (Rat.ofInt 0)) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0)) True) → (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)) (Not (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)))) → (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (Eq (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))) → (Eq (binrel% LE.le skoX (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))) → (Eq (binrel% GT.gt skoB (Rat.ofInt 0)) (Not (binrel% LE.le skoB (Rat.ofInt 0)))) → (Eq (binrel% LE.le skoB (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) → (Eq (Not True) False) → (Eq (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB)) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB)) → (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) → (Eq (And (binrel% LE.le skoX (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1)))) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoB (Rat.ofInt 0))) (Not (binrel% LE.le skoA (Rat.ofInt 0)))))) (And (binrel% LE.le skoX (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1)))) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoB (Rat.ofInt 0))) (Not (binrel% LE.le skoA (Rat.ofInt 0))))))) → (Eq (binrel% GT.gt skoX (Rat.ofInt 0)) (Not (binrel% LE.le skoX (Rat.ofInt 0)))) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0))) (Rat.ofInt 0)) → (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) True) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))))) → (Eq (binrel% LE.le skoA (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))) → (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) True) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))))) → (And (binrel% LE.le skoX (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1)))) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoB (Rat.ofInt 0))) (Not (binrel% LE.le skoA (Rat.ofInt 0)))))) → False :=
fun lean_r0 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r1 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd skoB skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoB skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0)) True) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)) (Not (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r9 : (Eq (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% LE.le skoX (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% GT.gt skoB (Rat.ofInt 0)) (Not (binrel% LE.le skoB (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (binrel% LE.le skoB (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB)) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB)) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (And (binrel% LE.le skoX (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1)))) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoB (Rat.ofInt 0))) (Not (binrel% LE.le skoA (Rat.ofInt 0)))))) (And (binrel% LE.le skoX (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1)))) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoB (Rat.ofInt 0))) (Not (binrel% LE.le skoA (Rat.ofInt 0))))))) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq (binrel% GT.gt skoX (Rat.ofInt 0)) (Not (binrel% LE.le skoX (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq (binrel% LE.le skoA (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_a29 : (And (binrel% LE.le skoX (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1)))) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoB (Rat.ofInt 0))) (Not (binrel% LE.le skoA (Rat.ofInt 0)))))) => by
have lean_s0 : (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))) False))) :=
  (scope (fun lean_a30 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) =>
    (scope (fun lean_a31 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) =>
      (scope (fun lean_a32 : (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0)) =>
        have lean_s0 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0)) (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0))) := by timed Eq.symm lean_r9
        have lean_s1 : (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)) := by timed eqResolve lean_a32 lean_s0
        have lean_s2 : (Or (Not (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0))) False) :=
          (scope (fun lean_a33 : (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)) =>
            have lean_s2 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := by timed trueElim lean_r8
            have lean_s3 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0))) := by timed And.intro lean_s2 lean_a33
            have lean_s4 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0))) (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))) := by arithMulPos [(binrel% HAdd.hAdd skoB skoX), (Rat.ofInt 0), (Rat.ofInt 1)], 1
            have lean_s5 : (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))) := by timed modusPonens lean_s3 lean_s4
            have lean_s6 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r0
            have lean_s7 : (Eq (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r18 [Not]
            have lean_s8 : (Eq (binrel% GT.gt skoX (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed Eq.trans lean_r20 lean_s7
            have lean_s9 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (binrel% GT.gt skoX (Rat.ofInt 0))) := by timed Eq.symm lean_s8
            have lean_s10 : (binrel% GT.gt skoX (Rat.ofInt 0)) := by timed eqResolve lean_a31 lean_s9
            have lean_s11 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoX (Rat.ofInt 0))) := by timed And.intro lean_s6 lean_s10
            have lean_s12 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoX (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoX, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 2
            have lean_s13 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s11 lean_s12
            have lean_s14 : (Eq (Not (binrel% LE.le skoB (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) := by timed flipCongrArg lean_r12 [Not]
            have lean_s15 : (Eq (binrel% GT.gt skoB (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) := by timed Eq.trans lean_r11 lean_s14
            have lean_s16 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) (binrel% GT.gt skoB (Rat.ofInt 0))) := by timed Eq.symm lean_s15
            have lean_s17 : (binrel% GT.gt skoB (Rat.ofInt 0)) := by timed eqResolve lean_a30 lean_s16
            have lean_s18 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoB (Rat.ofInt 0))) := by timed And.intro lean_s6 lean_s17
            have lean_s19 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoB (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoB, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 2
            have lean_s20 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s18 lean_s19
            have lean_s21 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) := by sumBounds [lean_s5, lean_s13, lean_s20]
            let lean_s22 := by timed congrHAdd lean_r3 lean_r17
            have lean_s23 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB))) (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoB skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB)))) := by timed congrHAdd lean_r2 lean_s22
            have lean_s24 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB))) (Rat.ofInt 0)) := by timed Eq.trans lean_s23 lean_r4
            let lean_s25 := by timed flipCongrArg lean_s24 [GE.ge]
            let lean_s26 := by timed congrHAdd lean_r24 lean_r24
            have lean_s27 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0)))) := by timed congrHAdd lean_r5 lean_s26
            have lean_s28 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) (Rat.ofInt 0)) := by timed Eq.trans lean_s27 lean_r22
            have lean_s29 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0))) := by timed congr lean_s25 lean_s28
            have lean_s30 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) True) := by timed Eq.trans lean_s29 lean_r6
            have lean_s31 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) (Not True)) := by timed flipCongrArg lean_s30 [Not]
            have lean_s32 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) False) := by timed Eq.trans lean_s31 lean_r13
            have lean_s33 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoB skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoB))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) False) := by timed Eq.trans lean_r1 lean_s32
            show False from by timed eqResolve lean_s21 lean_s33
          ))
        have lean_s3 : (Not (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0))) := by liftOrNToNeg lean_s2
        have lean_s4 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0)))) := by timed flipCongrArg lean_r9 [Not]
        have lean_s5 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0)))) := by timed Eq.trans lean_r7 lean_s4
        have lean_s6 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))) (binrel% GT.gt (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0))) := by timed Eq.symm lean_s5
        have lean_s7 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0))) (binrel% GT.gt (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0))) := by timed Eq.trans lean_s4 lean_s6
        have lean_s8 : (binrel% GT.gt (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)) := by timed eqResolve lean_s3 lean_s7
        have lean_s9 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))) (Not (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)))) := by timed Eq.symm lean_s4
        have lean_s10 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)) (Not (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0)))) := by timed Eq.trans lean_s5 lean_s9
        have lean_s11 : (Not (binrel% LE.le (binrel% HAdd.hAdd skoB skoX) (Rat.ofInt 0))) := by timed eqResolve lean_s8 lean_s10
        show False from by timed contradiction lean_s1 lean_s11
  ))))))
have lean_s1 : (Not (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))))) := by timed flipNotAnd lean_s1 [(Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))), (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))), (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) := by timed congr lean_s5 lean_r15
have lean_s7 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s6 lean_r27
have lean_s8 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) True) := by timed Eq.trans lean_r28 lean_s7
have lean_s9 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed congr lean_s12 lean_r21
have lean_s14 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s13 lean_r23
have lean_s15 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) True) := by timed Eq.trans lean_r25 lean_s14
have lean_s16 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0)))) := by timed rfl
let lean_s19 := by timed congr lean_s17 lean_s18
have lean_s20 : (Eq (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0)))))) := by timed congr lean_s10 lean_s19
have lean_s21 : (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))))) := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))))) := by permutateOr lean_s21, [1, 0, 2], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
have lean_s24 : (Eq skoX skoX) := by timed rfl
let lean_s25 := by timed flipCongrArg lean_s24 [LE.le]
have lean_s26 : (Eq skoB skoB) := by timed rfl
let lean_s27 := by timed flipCongrArg lean_s26 [HMul.hMul]
have lean_s28 : (Eq (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s27 lean_r16
have lean_s29 : (Eq (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB)) := by timed Eq.trans lean_s28 lean_r14
have lean_s30 : (Eq (binrel% LE.le skoX (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1)))) (binrel% LE.le skoX (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB))) := by timed congr lean_s25 lean_s29
have lean_s31 : (Eq (binrel% LE.le skoX (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0))) := by timed Eq.trans lean_s30 lean_r10
let lean_s32 := by timed congr lean_s23 lean_s31
have lean_s33 : (Eq (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r18 [Not]
let lean_s34 := by timed congr lean_s23 lean_s33
have lean_s35 : (Eq (Not (binrel% LE.le skoB (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)))) := by timed flipCongrArg lean_r12 [Not]
let lean_s36 := by timed congr lean_s23 lean_s35
have lean_s37 : (Eq (Not (binrel% LE.le skoA (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0)))) := by timed flipCongrArg lean_r26 [Not]
let lean_s38 := by timed congr lean_s36 lean_s37
let lean_s39 := by timed congr lean_s34 lean_s38
have lean_s40 : (Eq (And (binrel% LE.le skoX (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1)))) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoB (Rat.ofInt 0))) (Not (binrel% LE.le skoA (Rat.ofInt 0)))))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))))))) := by timed congr lean_s32 lean_s39
have lean_s41 : (Eq (And (binrel% LE.le skoX (binrel% HMul.hMul skoB (Neg.neg (Rat.ofInt 1)))) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le skoB (Rat.ofInt 0))) (Not (binrel% LE.le skoA (Rat.ofInt 0)))))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))))))) := by timed Eq.trans lean_r19 lean_s40
have lean_s42 : (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0)))))) := by timed eqResolve lean_a29 lean_s41
have lean_s43 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0))) := by andElim lean_s42, 2
let lean_s44 := by R1 lean_s22, lean_s43, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (Int.ofNat 0)), [(- 1), 0]
have lean_s45 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) := by andElim lean_s42, 1
let lean_s46 := by R1 lean_s44, lean_s45, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)), [(- 1), 0]
have lean_s47 : (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0)) := by andElim lean_s42, 0
exact (show False from by R2 lean_s46, lean_s47, (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoB) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Int.ofNat 0)), [0, 0])


