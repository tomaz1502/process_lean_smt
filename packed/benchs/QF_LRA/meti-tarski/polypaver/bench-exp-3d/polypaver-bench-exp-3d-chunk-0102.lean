-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}

theorem th0 : (Eq (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)))))))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ))))))))))) → (Eq (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) → (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) → (Eq (binrel% LE.le (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))) → (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) → (Eq (binrel% LE.le skoZ (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2)))) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) → (Eq (binrel% LE.le (Rat.ofInt 0) skoZ) (binrel% GE.ge skoZ (Int.ofNat 0))) → (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) → (Eq (binrel% LE.le skoY (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) → (Eq (binrel% LE.le skoX (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) → (Eq (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% GE.ge skoY (Int.ofNat 0))) → (Eq (binrel% LE.le (Rat.ofInt 0) skoX) (binrel% GE.ge skoX (Int.ofNat 0))) → (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)))))))))) → False :=
fun lean_r0 : (Eq (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)))))))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ))))))))))) => -- THEORY_REWRITE_BOOL
fun lean_r1 : (Eq (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% LE.le skoZ (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% LE.le (Rat.ofInt 0) skoZ) (binrel% GE.ge skoZ (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (binrel% LE.le skoY (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% LE.le skoX (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% GE.ge skoY (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (binrel% LE.le (Rat.ofInt 0) skoX) (binrel% GE.ge skoX (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_a18 : (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)))))))))) => by
have lean_s0 : (Eq And And) := by timed rfl
have lean_s1 : (Eq (Rat.ofInt 2) (Rat.ofInt 2)) := by timed rfl
have lean_s2 : (Eq skoX skoX) := by timed rfl
let lean_s3 := by timed flipCongrArg lean_s2 [HMul.hMul]
have lean_s4 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s3 lean_r8
have lean_s5 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) := by timed Eq.trans lean_s4 lean_r4
have lean_s6 : (Eq skoY skoY) := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [HMul.hMul]
have lean_s8 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s7 lean_r8
have lean_s9 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) := by timed Eq.trans lean_s8 lean_r12
let lean_s10 := by timed congrHAdd lean_s5 lean_s9
have lean_s11 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) := by timed congrHAdd lean_s1 lean_s10
have lean_s12 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_s11 lean_r5
have lean_s13 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_r6 lean_s12
let lean_s14 := by timed flipCongrArg lean_s13 [LE.le]
have lean_s15 : (Eq skoZ skoZ) := by timed rfl
have lean_s16 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (binrel% LE.le (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) skoZ)) := by timed congr lean_s14 lean_s15
have lean_s17 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))) := by timed Eq.trans lean_s16 lean_r3
have lean_s18 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2)))) := by timed flipCongrArg lean_s17 [Not]
let lean_s19 := by timed congr lean_s0 lean_s18
let lean_s20 := by timed flipCongrArg lean_s15 [LE.le]
let lean_s21 := by timed congrHAdd lean_s5 lean_s9
have lean_s22 : (Eq (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) := by timed congrHAdd lean_r10 lean_s21
have lean_s23 : (Eq (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_s22 lean_r1
have lean_s24 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_r15 lean_s23
have lean_s25 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))))) := by timed congr lean_s20 lean_s24
have lean_s26 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) := by timed Eq.trans lean_s25 lean_r2
have lean_s27 : (Eq (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) := by timed flipCongrArg lean_s26 [Not]
let lean_s28 := by timed congr lean_s0 lean_s27
let lean_s29 := by timed congr lean_s0 lean_r17
let lean_s30 := by timed congr lean_s0 lean_r16
let lean_s31 := by timed congr lean_s0 lean_r11
let lean_s32 := by timed congr lean_s0 lean_r14
let lean_s33 := by timed congr lean_s0 lean_r13
let lean_s34 := by timed congr lean_s0 lean_r7
let lean_s35 := by timed flipCongrArg lean_s15 [LE.le]
have lean_s36 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le skoZ (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))))) := by timed congr lean_s35 lean_s13
have lean_s37 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2)))) := by timed Eq.trans lean_s36 lean_r9
let lean_s38 := by timed congr lean_s0 lean_s37
let lean_s39 := by timed congr lean_s38 lean_s17
let lean_s40 := by timed congr lean_s34 lean_s39
let lean_s41 := by timed congr lean_s33 lean_s40
let lean_s42 := by timed congr lean_s32 lean_s41
let lean_s43 := by timed congr lean_s31 lean_s42
let lean_s44 := by timed congr lean_s30 lean_s43
let lean_s45 := by timed congr lean_s29 lean_s44
let lean_s46 := by timed congr lean_s28 lean_s45
have lean_s47 : (Eq (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)))))))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (And (binrel% GE.ge skoX (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2)))))))))))) := by timed congr lean_s19 lean_s46
have lean_s48 : (Eq (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)))))))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (And (binrel% GE.ge skoX (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2)))))))))))) := by timed Eq.trans lean_r0 lean_s47
have lean_s49 : (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (And (binrel% GE.ge skoX (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))))))))))) := by timed eqResolve lean_a18 lean_s48
have lean_s50 : (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2)) := by andElim lean_s49, 9
have lean_s51 : (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (And (binrel% GE.ge skoX (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))))))))))) := by timed eqResolve lean_a18 lean_s48
have lean_s52 : (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))) := by andElim lean_s51, 0
exact (show False from by timed contradiction lean_s50 lean_s52)


