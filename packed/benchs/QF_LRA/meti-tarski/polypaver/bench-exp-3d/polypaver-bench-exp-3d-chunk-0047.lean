-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (Eq (binrel% LE.le skoY (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) → (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) → (Eq (binrel% LE.le skoZ (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) → (Eq (binrel% GE.ge skoZ (Rat.ofInt 0)) (binrel% GE.ge skoZ (Int.ofNat 0))) → (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% GE.ge skoY (Int.ofNat 0))) → (Eq (binrel% LE.le skoX (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) → (Eq (binrel% LE.le (Rat.ofInt 0) skoZ) (binrel% GE.ge skoZ (Int.ofNat 0))) → (Eq (binrel% LE.le (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) False) → (Eq (binrel% LE.le (Rat.ofInt 0) skoX) (binrel% GE.ge skoX (Int.ofNat 0))) → (Eq (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX)))))))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) → (Eq (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) → (Eq (binrel% GE.ge skoY (Rat.ofInt 0)) (binrel% GE.ge skoY (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 14)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 9))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) → (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (Not (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) → (Eq (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) → (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) → (Eq (binrel% GE.ge skoX (Rat.ofInt 0)) (binrel% GE.ge skoX (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) (Rat.ofInt 0)) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (Neg.neg (Rat.ofInt 14)) (Neg.neg (Rat.ofInt 14))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ)) → (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 14)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 9)))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) → (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))) → False :=
fun lean_r0 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r1 : (Eq (binrel% LE.le skoY (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% LE.le skoZ (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% GE.ge skoZ (Rat.ofInt 0)) (binrel% GE.ge skoZ (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% GE.ge skoY (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% LE.le skoX (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% LE.le (Rat.ofInt 0) skoZ) (binrel% GE.ge skoZ (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (binrel% LE.le (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) False) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (binrel% LE.le (Rat.ofInt 0) skoX) (binrel% GE.ge skoX (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (binrel% GE.ge skoY (Rat.ofInt 0)) (binrel% GE.ge skoY (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 14)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 9))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (Not (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))))) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r23 : (Eq (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq (binrel% GE.ge skoX (Rat.ofInt 0)) (binrel% GE.ge skoX (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq (Neg.neg (Rat.ofInt 14)) (Neg.neg (Rat.ofInt 14))) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ)) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 14)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 9)))) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) => -- THEORY_REWRITE_ARITH
fun lean_a32 : (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))) => by
have lean_s0 : (Or (Not (binrel% GE.ge skoY (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoX (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoZ (Int.ofNat 0))) (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) False)))) :=
  (scope (fun lean_a33 : (binrel% GE.ge skoY (Int.ofNat 0)) =>
    (scope (fun lean_a34 : (binrel% GE.ge skoX (Int.ofNat 0)) =>
      (scope (fun lean_a35 : (binrel% GE.ge skoZ (Int.ofNat 0)) =>
        (scope (fun lean_a36 : (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) =>
          have lean_s0 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) := by timed Eq.symm lean_r16
          have lean_s1 : (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) := by timed eqResolve lean_a36 lean_s0
          have lean_s2 : (Or (Not (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) False) :=
            (scope (fun lean_a37 : (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) =>
              have lean_s2 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := by timed trueElim lean_r0
              have lean_s3 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) := by timed And.intro lean_s2 lean_a37
              have lean_s4 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))))) := by arithMulPos [(binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)), (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))), (Rat.ofInt 1)], 1
              have lean_s5 : (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r22
              have lean_s7 : (Eq (binrel% GE.ge skoZ (Int.ofNat 0)) (binrel% GE.ge skoZ (Rat.ofInt 0))) := by timed Eq.symm lean_r7
              have lean_s8 : (binrel% GE.ge skoZ (Rat.ofInt 0)) := by timed eqResolve lean_a35 lean_s7
              have lean_s9 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge skoZ (Rat.ofInt 0))) := by timed And.intro lean_s6 lean_s8
              have lean_s10 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge skoZ (Rat.ofInt 0))) (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoZ, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 3
              have lean_s11 : (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s9 lean_s10
              have lean_s12 : (Eq (binrel% GE.ge skoX (Int.ofNat 0)) (binrel% GE.ge skoX (Rat.ofInt 0))) := by timed Eq.symm lean_r24
              have lean_s13 : (binrel% GE.ge skoX (Rat.ofInt 0)) := by timed eqResolve lean_a34 lean_s12
              have lean_s14 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge skoX (Rat.ofInt 0))) := by timed And.intro lean_s6 lean_s13
              have lean_s15 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge skoX (Rat.ofInt 0))) (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoX, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 3
              have lean_s16 : (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s14 lean_s15
              have lean_s17 : (Eq (binrel% GE.ge skoY (Int.ofNat 0)) (binrel% GE.ge skoY (Rat.ofInt 0))) := by timed Eq.symm lean_r17
              have lean_s18 : (binrel% GE.ge skoY (Rat.ofInt 0)) := by timed eqResolve lean_a33 lean_s17
              have lean_s19 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge skoY (Rat.ofInt 0))) := by timed And.intro lean_s6 lean_s18
              have lean_s20 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge skoY (Rat.ofInt 0))) (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoY, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 3
              have lean_s21 : (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s19 lean_s20
              have lean_s22 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) := by sumBounds [lean_s5, lean_s11, lean_s16, lean_s21]
              let lean_s23 := by timed congrHAdd lean_r27 lean_r20
              let lean_s24 := by timed congrHAdd lean_r29 lean_s23
              have lean_s25 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))))) := by timed congrHAdd lean_r31 lean_s24
              have lean_s26 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (Rat.ofInt 0)) := by timed Eq.trans lean_s25 lean_r26
              let lean_s27 := by timed flipCongrArg lean_s26 [LE.le]
              let lean_s28 := by timed congrHAdd lean_r25 lean_r25
              let lean_s29 := by timed congrHAdd lean_r25 lean_s28
              have lean_s30 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0))))) := by timed congrHAdd lean_r15 lean_s29
              have lean_s31 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) := by timed Eq.trans lean_s30 lean_r23
              have lean_s32 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) (binrel% LE.le (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) := by timed congr lean_s27 lean_s31
              have lean_s33 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) False) := by timed Eq.trans lean_s32 lean_r12
              show False from by timed eqResolve lean_s22 lean_s33
            ))
          have lean_s3 : (Not (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) := by timed flipCongrArg lean_r16 [Not]
          have lean_s5 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) := by timed Eq.trans lean_r19 lean_s4
          have lean_s6 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) := by timed Eq.symm lean_s5
          have lean_s7 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) := by timed Eq.trans lean_s4 lean_s6
          have lean_s8 : (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) := by timed eqResolve lean_s3 lean_s7
          have lean_s9 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (Not (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))))) := by timed Eq.symm lean_s4
          have lean_s10 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (Not (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))))) := by timed Eq.trans lean_s5 lean_s9
          have lean_s11 : (Not (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))) := by timed eqResolve lean_s8 lean_s10
          show False from by timed contradiction lean_s1 lean_s11
  ))))))))
have lean_s1 : (Not (And (binrel% GE.ge skoY (Int.ofNat 0)) (And (binrel% GE.ge skoX (Int.ofNat 0)) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (binrel% GE.ge skoY (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoX (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoZ (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))))))) := by timed flipNotAnd lean_s1 [(binrel% GE.ge skoY (Int.ofNat 0)), (binrel% GE.ge skoX (Int.ofNat 0)), (binrel% GE.ge skoZ (Int.ofNat 0)), (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))]
have lean_s3 : (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) (Or (Not (binrel% GE.ge skoZ (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoY (Int.ofNat 0))) (Not (binrel% GE.ge skoX (Int.ofNat 0)))))) := by permutateOr lean_s2, [3, 2, 0, 1], (- 1)
have lean_s4 : (Eq And And) := by timed rfl
have lean_s5 : (Eq skoZ skoZ) := by timed rfl
let lean_s6 := by timed flipCongrArg lean_s5 [LE.le]
let lean_s7 := by timed flipCongrArg lean_r28 [HMul.hMul]
have lean_s8 : (Eq (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 9)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 9))) := by timed rfl
have lean_s9 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 14)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 9))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 14)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 9)))) := by timed congr lean_s7 lean_s8
have lean_s10 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 14)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 9))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) := by timed Eq.trans lean_s9 lean_r18
have lean_s11 : (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) := by timed Eq.trans lean_r30 lean_s10
have lean_s12 : (Eq skoX skoX) := by timed rfl
let lean_s13 := by timed flipCongrArg lean_s12 [HMul.hMul]
have lean_s14 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s13 lean_r2
have lean_s15 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) := by timed Eq.trans lean_s14 lean_r8
have lean_s16 : (Eq skoY skoY) := by timed rfl
let lean_s17 := by timed flipCongrArg lean_s16 [HMul.hMul]
have lean_s18 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s17 lean_r2
have lean_s19 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) := by timed Eq.trans lean_s18 lean_r3
let lean_s20 := by timed congrHAdd lean_s15 lean_s19
have lean_s21 : (Eq (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) := by timed congrHAdd lean_s11 lean_s20
have lean_s22 : (Eq (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_s21 lean_r21
have lean_s23 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_r5 lean_s22
have lean_s24 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le skoZ (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))))) := by timed congr lean_s6 lean_s23
have lean_s25 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9)))) := by timed Eq.trans lean_s24 lean_r4
let lean_s26 := by timed congr lean_s4 lean_s25
let lean_s27 := by timed congr lean_s4 lean_r6
let lean_s28 := by timed congr lean_s4 lean_r1
let lean_s29 := by timed congr lean_s4 lean_r10
let lean_s30 := by timed congr lean_s4 lean_r11
let lean_s31 := by timed congr lean_s4 lean_r9
let lean_s32 := by timed congr lean_s31 lean_r13
let lean_s33 := by timed congr lean_s30 lean_s32
let lean_s34 := by timed congr lean_s29 lean_s33
let lean_s35 := by timed congr lean_s28 lean_s34
let lean_s36 := by timed congr lean_s27 lean_s35
have lean_s37 : (Eq (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (binrel% GE.ge skoX (Int.ofNat 0))))))))) := by timed congr lean_s26 lean_s36
have lean_s38 : (Eq (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 14)) (Rat.ofInt 9)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (binrel% GE.ge skoX (Int.ofNat 0))))))))) := by timed Eq.trans lean_r14 lean_s37
have lean_s39 : (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (binrel% GE.ge skoX (Int.ofNat 0)))))))) := by timed eqResolve lean_a32 lean_s38
have lean_s40 : (binrel% GE.ge skoX (Int.ofNat 0)) := by andElim lean_s39, 6
let lean_s41 := by R2 lean_s3, lean_s40, (binrel% GE.ge skoX (Int.ofNat 0)), [(- 1), 0]
have lean_s42 : (binrel% GE.ge skoY (Int.ofNat 0)) := by andElim lean_s39, 5
let lean_s43 := by R2 lean_s41, lean_s42, (binrel% GE.ge skoY (Int.ofNat 0)), [(- 1), 0]
have lean_s44 : (binrel% GE.ge skoZ (Int.ofNat 0)) := by andElim lean_s39, 4
let lean_s45 := by R2 lean_s43, lean_s44, (binrel% GE.ge skoZ (Int.ofNat 0)), [(- 1), 0]
have lean_s46 : (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))) := by andElim lean_s39, 0
exact (show False from by R2 lean_s45, lean_s46, (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HDiv.hDiv (Int.ofNat 14) (Int.ofNat 9))), [0, 0])


