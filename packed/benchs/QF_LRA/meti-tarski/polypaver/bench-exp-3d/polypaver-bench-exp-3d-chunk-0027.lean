-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 3)) (Not (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 3)))) → (Eq (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 3)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) → (Eq (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))) (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX)))))))) → (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (Int.ofNat 3) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoX) skoX) → (Eq (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HAdd.hAdd skoX skoY))) (Rat.ofInt 0)) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% GE.ge skoY (Int.ofNat 0))) → (Eq (binrel% LE.le skoX (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))))) → (Eq (binrel% LE.le skoY (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (Int.ofNat 3) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) → (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0)) True) → (Eq (binrel% LE.le (Rat.ofInt 0) skoZ) (binrel% GE.ge skoZ (Int.ofNat 0))) → (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (Not True) False) → (Eq (binrel% LE.le (Rat.ofInt 0) skoX) (binrel% GE.ge skoX (Int.ofNat 0))) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 3)) (binrel% HAdd.hAdd (Rat.ofInt 1) (Rat.ofInt 1)))) (Rat.ofInt 0)) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (Rat.ofInt 1)) → (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) True) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoZ) skoZ) → (Eq (binrel% GT.gt skoZ (Rat.ofInt 1)) (Not (binrel% LE.le skoZ (Rat.ofInt 1)))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (Neg.neg (Rat.ofInt 3))) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)))))))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoY) skoY) → (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ)))) → (Eq (binrel% LE.le skoZ (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) → (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))) → False :=
fun lean_r0 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r1 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 3)) (Not (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 3)))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 3)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))) (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (Int.ofNat 3) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoX) skoX) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HAdd.hAdd skoX skoY))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% GE.ge skoY (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% LE.le skoX (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))))) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq (binrel% LE.le skoY (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (Int.ofNat 3) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0)) True) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (binrel% LE.le (Rat.ofInt 0) skoZ) (binrel% GE.ge skoZ (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq (binrel% LE.le (Rat.ofInt 0) skoX) (binrel% GE.ge skoX (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 3)) (binrel% HAdd.hAdd (Rat.ofInt 1) (Rat.ofInt 1)))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (Rat.ofInt 1)) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) True) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoZ) skoZ) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq (binrel% GT.gt skoZ (Rat.ofInt 1)) (Not (binrel% LE.le skoZ (Rat.ofInt 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (Neg.neg (Rat.ofInt 3))) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)))))))) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoY) skoY) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ)))) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq (binrel% LE.le skoZ (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_a32 : (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))) => by
have lean_s0 : (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) (Or (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) False)))) :=
  (scope (fun lean_a33 : (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) =>
    (scope (fun lean_a34 : (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) =>
      (scope (fun lean_a35 : (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) =>
        (scope (fun lean_a36 : (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) =>
          have lean_s0 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (binrel% LE.le skoZ (Rat.ofInt 1))) := by timed Eq.symm lean_r30
          have lean_s1 : (binrel% LE.le skoZ (Rat.ofInt 1)) := by timed eqResolve lean_a36 lean_s0
          have lean_s2 : (Or (Not (binrel% LE.le skoZ (Rat.ofInt 1))) False) :=
            (scope (fun lean_a37 : (binrel% LE.le skoZ (Rat.ofInt 1)) =>
              have lean_s2 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := by timed trueElim lean_r31
              have lean_s3 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le skoZ (Rat.ofInt 1))) := by timed And.intro lean_s2 lean_a37
              have lean_s4 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le skoZ (Rat.ofInt 1))) (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)))) := by arithMulPos [skoZ, (Rat.ofInt 1), (Rat.ofInt 1)], 1
              have lean_s5 : (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1))) := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r0
              have lean_s7 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 3))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) := by timed flipCongrArg lean_r2 [Not]
              have lean_s8 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 3)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) := by timed Eq.trans lean_r1 lean_s7
              have lean_s9 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 3))) := by timed Eq.symm lean_s8
              have lean_s10 : (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 3)) := by timed eqResolve lean_a35 lean_s9
              have lean_s11 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 3))) := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 3))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)))) := by arithMulNeg [(binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)), (Rat.ofInt 3), (Neg.neg (Rat.ofInt 1))], 2
              have lean_s13 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3))) := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (binrel% LE.le skoX (Rat.ofInt 1))) := by timed Eq.symm lean_r9
              have lean_s15 : (binrel% LE.le skoX (Rat.ofInt 1)) := by timed eqResolve lean_a34 lean_s14
              have lean_s16 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le skoX (Rat.ofInt 1))) := by timed And.intro lean_s2 lean_s15
              have lean_s17 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le skoX (Rat.ofInt 1))) (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)))) := by arithMulPos [skoX, (Rat.ofInt 1), (Rat.ofInt 1)], 1
              have lean_s18 : (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1))) := by timed modusPonens lean_s16 lean_s17
              have lean_s19 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (binrel% LE.le skoY (Rat.ofInt 1))) := by timed Eq.symm lean_r11
              have lean_s20 : (binrel% LE.le skoY (Rat.ofInt 1)) := by timed eqResolve lean_a33 lean_s19
              have lean_s21 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le skoY (Rat.ofInt 1))) := by timed And.intro lean_s2 lean_s20
              have lean_s22 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le skoY (Rat.ofInt 1))) (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)))) := by arithMulPos [skoY, (Rat.ofInt 1), (Rat.ofInt 1)], 1
              have lean_s23 : (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1))) := by timed modusPonens lean_s21 lean_s22
              have lean_s24 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)))))) := by sumBounds [lean_s5, lean_s13, lean_s18, lean_s23]
              let lean_s25 := by timed congrHAdd lean_r5 lean_r27
              let lean_s26 := by timed congrHAdd lean_r29 lean_s25
              have lean_s27 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoY)))) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (binrel% HAdd.hAdd skoX skoY)))) := by timed congrHAdd lean_r23 lean_s26
              have lean_s28 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoY)))) (Rat.ofInt 0)) := by timed Eq.trans lean_s27 lean_r6
              let lean_s29 := by timed flipCongrArg lean_s28 [GE.ge]
              let lean_s30 := by timed congrHAdd lean_r21 lean_r21
              let lean_s31 := by timed congrHAdd lean_r25 lean_s30
              have lean_s32 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 3)) (binrel% HAdd.hAdd (Rat.ofInt 1) (Rat.ofInt 1))))) := by timed congrHAdd lean_r21 lean_s31
              have lean_s33 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1))))) (Rat.ofInt 0)) := by timed Eq.trans lean_s32 lean_r20
              have lean_s34 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)))))) (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0))) := by timed congr lean_s29 lean_s33
              have lean_s35 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)))))) True) := by timed Eq.trans lean_s34 lean_r15
              have lean_s36 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1))))))) (Not True)) := by timed flipCongrArg lean_s35 [Not]
              have lean_s37 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1))))))) False) := by timed Eq.trans lean_s36 lean_r18
              have lean_s38 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 1)))))) False) := by timed Eq.trans lean_r26 lean_s37
              show False from by timed eqResolve lean_s24 lean_s38
            ))
          have lean_s3 : (Not (binrel% LE.le skoZ (Rat.ofInt 1))) := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq (Not (binrel% LE.le skoZ (Rat.ofInt 1))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))))) := by timed flipCongrArg lean_r30 [Not]
          have lean_s5 : (Eq (binrel% GT.gt skoZ (Rat.ofInt 1)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))))) := by timed Eq.trans lean_r24 lean_s4
          have lean_s6 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) (binrel% GT.gt skoZ (Rat.ofInt 1))) := by timed Eq.symm lean_s5
          have lean_s7 : (Eq (Not (binrel% LE.le skoZ (Rat.ofInt 1))) (binrel% GT.gt skoZ (Rat.ofInt 1))) := by timed Eq.trans lean_s4 lean_s6
          have lean_s8 : (binrel% GT.gt skoZ (Rat.ofInt 1)) := by timed eqResolve lean_s3 lean_s7
          have lean_s9 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) (Not (binrel% LE.le skoZ (Rat.ofInt 1)))) := by timed Eq.symm lean_s4
          have lean_s10 : (Eq (binrel% GT.gt skoZ (Rat.ofInt 1)) (Not (binrel% LE.le skoZ (Rat.ofInt 1)))) := by timed Eq.trans lean_s5 lean_s9
          have lean_s11 : (Not (binrel% LE.le skoZ (Rat.ofInt 1))) := by timed eqResolve lean_s8 lean_s10
          show False from by timed contradiction lean_s1 lean_s11
  ))))))))
have lean_s1 : (Not (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) (Or (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))))))) := by timed flipNotAnd lean_s1 [(binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))), (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))), (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))), (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))))) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))))) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [Eq]
have lean_s10 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) := by timed congr lean_s9 lean_r14
have lean_s11 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))))) True) := by timed Eq.trans lean_s10 lean_r22
have lean_s12 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) True) := by timed Eq.trans lean_r10 lean_s11
have lean_s13 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) := by timed trueElim lean_s12
let lean_s14 := by timed congr lean_s3 lean_s13
have lean_s15 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))))) := by timed rfl
let lean_s16 := by timed congr lean_s14 lean_s15
let lean_s17 := by timed congr lean_s7 lean_s16
have lean_s18 : (Eq (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) (Or (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))))))) (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) (Or (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))))))) := by timed congr lean_s5 lean_s17
have lean_s19 : (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) (Or (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))))))) := by timed eqResolve lean_s2 lean_s18
have lean_s20 : (Or (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))) (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))))))) := by permutateOr lean_s19, [2, 3, 0, 1], (- 1)
have lean_s21 : (Eq And And) := by timed rfl
have lean_s22 : (Eq skoZ skoZ) := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [LE.le]
have lean_s24 : (Eq (Rat.ofInt 3) (Rat.ofInt 3)) := by timed rfl
have lean_s25 : (Eq skoX skoX) := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [HMul.hMul]
have lean_s27 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s26 lean_r7
have lean_s28 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) := by timed Eq.trans lean_s27 lean_r17
have lean_s29 : (Eq skoY skoY) := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [HMul.hMul]
have lean_s31 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s30 lean_r7
have lean_s32 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) := by timed Eq.trans lean_s31 lean_r28
let lean_s33 := by timed congrHAdd lean_s28 lean_s32
have lean_s34 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) := by timed congrHAdd lean_s24 lean_s33
have lean_s35 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Int.ofNat 3) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_s34 lean_r13
have lean_s36 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Int.ofNat 3) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_r12 lean_s35
have lean_s37 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le skoZ (binrel% HAdd.hAdd (Int.ofNat 3) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))))) := by timed congr lean_s23 lean_s36
have lean_s38 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) := by timed Eq.trans lean_s37 lean_r4
have lean_s39 : (Eq (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))))) := by timed flipCongrArg lean_s38 [Not]
let lean_s40 := by timed congr lean_s21 lean_s39
let lean_s41 := by timed congr lean_s21 lean_r30
let lean_s42 := by timed congr lean_s21 lean_r11
let lean_s43 := by timed congr lean_s21 lean_r9
let lean_s44 := by timed congr lean_s21 lean_r16
let lean_s45 := by timed congr lean_s21 lean_r8
let lean_s46 := by timed congr lean_s45 lean_r19
let lean_s47 := by timed congr lean_s44 lean_s46
let lean_s48 := by timed congr lean_s43 lean_s47
let lean_s49 := by timed congr lean_s42 lean_s48
let lean_s50 := by timed congr lean_s41 lean_s49
have lean_s51 : (Eq (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (binrel% GE.ge skoX (Int.ofNat 0))))))))) := by timed congr lean_s40 lean_s50
have lean_s52 : (Eq (And (Not (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 3) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (binrel% GE.ge skoX (Int.ofNat 0))))))))) := by timed Eq.trans lean_r3 lean_s51
have lean_s53 : (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (binrel% GE.ge skoX (Int.ofNat 0)))))))) := by timed eqResolve lean_a32 lean_s52
have lean_s54 : (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) := by andElim lean_s53, 3
let lean_s55 := by R2 lean_s20, lean_s54, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))), [(- 1), 0]
have lean_s56 : (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) := by andElim lean_s53, 2
let lean_s57 := by R2 lean_s55, lean_s56, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))), [(- 1), 0]
have lean_s58 : (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) := by andElim lean_s53, 1
let lean_s59 := by R2 lean_s57, lean_s58, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))), [(- 1), 0]
have lean_s60 : (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3)))) := by andElim lean_s53, 0
exact (show False from by R1 lean_s59, lean_s60, (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (Int.ofNat 3))), [0, 0])


