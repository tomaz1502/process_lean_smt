-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 : (Eq (binrel% GE.ge skoX (Rat.ofInt 0)) (binrel% GE.ge skoX (Int.ofNat 0))) → (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (binrel% GE.ge skoY (Rat.ofInt 0)) (binrel% GE.ge skoY (Int.ofNat 0))) → (Eq (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) → (Eq (binrel% GE.ge skoZ (Rat.ofInt 0)) (binrel% GE.ge skoZ (Int.ofNat 0))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) (Rat.ofInt 0)) → (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) → (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) → (Eq (binrel% LE.le skoZ (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) → (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) → (Eq (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% GE.ge skoY (Int.ofNat 0))) → (Eq (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX)))))))) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))))) → (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (binrel% LE.le (Rat.ofInt 0) skoX) (binrel% GE.ge skoX (Int.ofNat 0))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) → (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0)) True) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ)) → (Eq (binrel% LE.le skoY (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) → (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) True) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))))) → (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))))) → (Eq (Not True) False) → (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)))) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0)))) (Rat.ofInt 0)) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% LE.le (Rat.ofInt 0) skoZ) (binrel% GE.ge skoZ (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) → (Eq (binrel% LE.le skoX (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX)))))))) → False :=
fun lean_r0 : (Eq (binrel% GE.ge skoX (Rat.ofInt 0)) (binrel% GE.ge skoX (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r2 : (Eq (binrel% GE.ge skoY (Rat.ofInt 0)) (binrel% GE.ge skoY (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% GE.ge skoZ (Rat.ofInt 0)) (binrel% GE.ge skoZ (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r7 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% LE.le skoZ (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% GE.ge skoY (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX)))))))) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX))))))))) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (binrel% LE.le (Rat.ofInt 0) skoX) (binrel% GE.ge skoX (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0)) True) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ)) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq (binrel% LE.le skoY (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))))) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0)))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq (binrel% LE.le (Rat.ofInt 0) skoZ) (binrel% GE.ge skoZ (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq (binrel% LE.le skoX (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_a37 : (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX)))))))) => by
have lean_s0 : (Or (Not (binrel% GE.ge skoY (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoX (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoZ (Int.ofNat 0))) (Or (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))) False)))) :=
  (scope (fun lean_a38 : (binrel% GE.ge skoY (Int.ofNat 0)) =>
    (scope (fun lean_a39 : (binrel% GE.ge skoX (Int.ofNat 0)) =>
      (scope (fun lean_a40 : (binrel% GE.ge skoZ (Int.ofNat 0)) =>
        (scope (fun lean_a41 : (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) =>
          have lean_s0 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))) := by timed flipCongrArg lean_r28 [Not]
          have lean_s1 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))) := by timed Eq.trans lean_r30 lean_s0
          have lean_s2 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0))) := by timed Eq.symm lean_s1
          have lean_s3 : (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)) := by timed eqResolve lean_a41 lean_s2
          have lean_s4 : (Or (Not (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0))) False) :=
            (scope (fun lean_a42 : (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)) =>
              have lean_s4 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := by timed trueElim lean_r6
              have lean_s5 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0))) := by timed And.intro lean_s4 lean_a42
              have lean_s6 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))) := by arithMulPos [(binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)), (Rat.ofInt 0), (Rat.ofInt 1)], 0
              have lean_s7 : (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))) := by timed modusPonens lean_s5 lean_s6
              have lean_s8 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r1
              have lean_s9 : (Eq (binrel% GE.ge skoZ (Int.ofNat 0)) (binrel% GE.ge skoZ (Rat.ofInt 0))) := by timed Eq.symm lean_r4
              have lean_s10 : (binrel% GE.ge skoZ (Rat.ofInt 0)) := by timed eqResolve lean_a40 lean_s9
              have lean_s11 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge skoZ (Rat.ofInt 0))) := by timed And.intro lean_s8 lean_s10
              have lean_s12 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge skoZ (Rat.ofInt 0))) (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoZ, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 3
              have lean_s13 : (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq (binrel% GE.ge skoX (Int.ofNat 0)) (binrel% GE.ge skoX (Rat.ofInt 0))) := by timed Eq.symm lean_r0
              have lean_s15 : (binrel% GE.ge skoX (Rat.ofInt 0)) := by timed eqResolve lean_a39 lean_s14
              have lean_s16 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge skoX (Rat.ofInt 0))) := by timed And.intro lean_s8 lean_s15
              have lean_s17 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge skoX (Rat.ofInt 0))) (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoX, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 3
              have lean_s18 : (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s16 lean_s17
              have lean_s19 : (Eq (binrel% GE.ge skoY (Int.ofNat 0)) (binrel% GE.ge skoY (Rat.ofInt 0))) := by timed Eq.symm lean_r2
              have lean_s20 : (binrel% GE.ge skoY (Rat.ofInt 0)) := by timed eqResolve lean_a38 lean_s19
              have lean_s21 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge skoY (Rat.ofInt 0))) := by timed And.intro lean_s8 lean_s20
              have lean_s22 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge skoY (Rat.ofInt 0))) (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoY, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 3
              have lean_s23 : (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s21 lean_s22
              have lean_s24 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) := by sumBounds [lean_s7, lean_s13, lean_s18, lean_s23]
              let lean_s25 := by timed congrHAdd lean_r36 lean_r34
              let lean_s26 := by timed congrHAdd lean_r21 lean_s25
              have lean_s27 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))))) := by timed congrHAdd lean_r9 lean_s26
              have lean_s28 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (Rat.ofInt 0)) := by timed Eq.trans lean_s27 lean_r5
              let lean_s29 := by timed flipCongrArg lean_s28 [GE.ge]
              let lean_s30 := by timed congrHAdd lean_r32 lean_r32
              let lean_s31 := by timed congrHAdd lean_r32 lean_s30
              have lean_s32 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0))))) := by timed congrHAdd lean_r29 lean_s31
              have lean_s33 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) (Rat.ofInt 0)) := by timed Eq.trans lean_s32 lean_r31
              have lean_s34 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0))) := by timed congr lean_s29 lean_s33
              have lean_s35 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) True) := by timed Eq.trans lean_s34 lean_r20
              have lean_s36 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))))) (Not True)) := by timed flipCongrArg lean_s35 [Not]
              have lean_s37 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))))) False) := by timed Eq.trans lean_s36 lean_r27
              have lean_s38 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) False) := by timed Eq.trans lean_r24 lean_s37
              show False from by timed eqResolve lean_s24 lean_s38
            ))
          have lean_s5 : (Not (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0))) := by liftOrNToNeg lean_s4
          have lean_s6 : (Eq (Not (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))))) := by timed flipCongrArg lean_s1 [Not]
          have lean_s7 : (Eq (Not (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0))) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) := by timed Eq.trans lean_s6 lean_r25
          have lean_s8 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0))) := by timed Eq.symm lean_r28
          have lean_s9 : (Eq (Not (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0))) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0))) := by timed Eq.trans lean_s7 lean_s8
          have lean_s10 : (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)) := by timed eqResolve lean_s5 lean_s9
          have lean_s11 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)) (Not (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)))) := by timed Eq.symm lean_s7
          have lean_s12 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)) (Not (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0)))) := by timed Eq.trans lean_r28 lean_s11
          have lean_s13 : (Not (binrel% LT.lt (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Rat.ofInt 0))) := by timed eqResolve lean_s10 lean_s12
          show False from by timed contradiction lean_s3 lean_s13
  ))))))))
have lean_s1 : (Not (And (binrel% GE.ge skoY (Int.ofNat 0)) (And (binrel% GE.ge skoX (Int.ofNat 0)) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (binrel% GE.ge skoY (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoX (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoZ (Int.ofNat 0))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))))))) := by timed flipNotAnd lean_s1 [(binrel% GE.ge skoY (Int.ofNat 0)), (binrel% GE.ge skoX (Int.ofNat 0)), (binrel% GE.ge skoZ (Int.ofNat 0)), (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq (Not (binrel% GE.ge skoY (Int.ofNat 0))) (Not (binrel% GE.ge skoY (Int.ofNat 0)))) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq (Not (binrel% GE.ge skoX (Int.ofNat 0))) (Not (binrel% GE.ge skoX (Int.ofNat 0)))) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : (Eq (Not (binrel% GE.ge skoZ (Int.ofNat 0))) (Not (binrel% GE.ge skoZ (Int.ofNat 0)))) := by timed rfl
let lean_s9 := by timed congr lean_s3 lean_s8
have lean_s10 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) := by timed rfl
let lean_s11 := by timed flipCongrArg lean_s10 [Eq]
have lean_s12 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))) := by timed congr lean_s11 lean_r25
have lean_s13 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s12 lean_r23
have lean_s14 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) True) := by timed Eq.trans lean_r26 lean_s13
have lean_s15 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) := by timed trueElim lean_s14
let lean_s16 := by timed congr lean_s9 lean_s15
let lean_s17 := by timed congr lean_s7 lean_s16
have lean_s18 : (Eq (Or (Not (binrel% GE.ge skoY (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoX (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoZ (Int.ofNat 0))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))))))) (Or (Not (binrel% GE.ge skoY (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoX (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoZ (Int.ofNat 0))) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))))) := by timed congr lean_s5 lean_s17
have lean_s19 : (Or (Not (binrel% GE.ge skoY (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoX (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoZ (Int.ofNat 0))) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))))) := by timed eqResolve lean_s2 lean_s18
have lean_s20 : (Or (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)) (Or (Not (binrel% GE.ge skoZ (Int.ofNat 0))) (Or (Not (binrel% GE.ge skoY (Int.ofNat 0))) (Not (binrel% GE.ge skoX (Int.ofNat 0)))))) := by permutateOr lean_s19, [3, 2, 0, 1], (- 1)
have lean_s21 : (Eq And And) := by timed rfl
have lean_s22 : (Eq skoZ skoZ) := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [LE.le]
have lean_s24 : (Eq skoX skoX) := by timed rfl
let lean_s25 := by timed flipCongrArg lean_s24 [HMul.hMul]
have lean_s26 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s25 lean_r12
have lean_s27 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) := by timed Eq.trans lean_s26 lean_r16
have lean_s28 : (Eq skoY skoY) := by timed rfl
let lean_s29 := by timed flipCongrArg lean_s28 [HMul.hMul]
have lean_s30 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s29 lean_r12
have lean_s31 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) := by timed Eq.trans lean_s30 lean_r11
let lean_s32 := by timed congrHAdd lean_s27 lean_s31
have lean_s33 : (Eq (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) := by timed congrHAdd lean_r13 lean_s32
have lean_s34 : (Eq (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_s33 lean_r3
have lean_s35 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_r18 lean_s34
have lean_s36 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))))) := by timed congr lean_s23 lean_s35
have lean_s37 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) := by timed Eq.trans lean_s36 lean_r7
let lean_s38 := by timed congr lean_s21 lean_s37
let lean_s39 := by timed flipCongrArg lean_s27 [HAdd.hAdd]
have lean_s40 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) := by timed congr lean_s39 lean_s31
have lean_s41 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) := by timed Eq.trans lean_s40 lean_r8
let lean_s42 := by timed flipCongrArg lean_s41 [LE.le]
have lean_s43 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) skoZ)) := by timed congr lean_s42 lean_s22
have lean_s44 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) := by timed Eq.trans lean_s43 lean_r19
have lean_s45 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)))) := by timed flipCongrArg lean_s44 [Not]
let lean_s46 := by timed congr lean_s21 lean_s45
let lean_s47 := by timed congr lean_s21 lean_r10
let lean_s48 := by timed congr lean_s21 lean_r22
let lean_s49 := by timed congr lean_s21 lean_r35
let lean_s50 := by timed congr lean_s21 lean_r33
let lean_s51 := by timed congr lean_s21 lean_r14
let lean_s52 := by timed congr lean_s51 lean_r17
let lean_s53 := by timed congr lean_s50 lean_s52
let lean_s54 := by timed congr lean_s49 lean_s53
let lean_s55 := by timed congr lean_s48 lean_s54
let lean_s56 := by timed congr lean_s47 lean_s55
let lean_s57 := by timed congr lean_s46 lean_s56
have lean_s58 : (Eq (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX)))))))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (binrel% GE.ge skoX (Int.ofNat 0)))))))))) := by timed congr lean_s38 lean_s57
have lean_s59 : (Eq (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% LE.le (Rat.ofInt 0) skoX)))))))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (binrel% GE.ge skoX (Int.ofNat 0)))))))))) := by timed Eq.trans lean_r15 lean_s58
have lean_s60 : (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (binrel% GE.ge skoX (Int.ofNat 0))))))))) := by timed eqResolve lean_a37 lean_s59
have lean_s61 : (binrel% GE.ge skoX (Int.ofNat 0)) := by andElim lean_s60, 7
let lean_s62 := by R2 lean_s20, lean_s61, (binrel% GE.ge skoX (Int.ofNat 0)), [(- 1), 0]
have lean_s63 : (binrel% GE.ge skoY (Int.ofNat 0)) := by andElim lean_s60, 6
let lean_s64 := by R2 lean_s62, lean_s63, (binrel% GE.ge skoY (Int.ofNat 0)), [(- 1), 0]
have lean_s65 : (binrel% GE.ge skoZ (Int.ofNat 0)) := by andElim lean_s60, 5
let lean_s66 := by R2 lean_s64, lean_s65, (binrel% GE.ge skoZ (Int.ofNat 0)), [(- 1), 0]
have lean_s67 : (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0))) := by andElim lean_s60, 1
exact (show False from by R1 lean_s66, lean_s67, (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ)) (Int.ofNat 0)), [0, 0])


