-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}

theorem th0 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))) → (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (And (Not (binrel% LE.le (Rat.ofInt 0) skoX)) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ))))))))) (And (Not (binrel% LE.le (Rat.ofInt 0) skoX)) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)))))))))) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) → (Eq (binrel% LE.le skoZ (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2)))) → (Eq (binrel% LE.le (Rat.ofInt 0) skoZ) (binrel% GE.ge skoZ (Int.ofNat 0))) → (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) → (Eq (binrel% LE.le skoY (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) → (Eq (binrel% LE.le skoX (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) → (Eq (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% GE.ge skoY (Int.ofNat 0))) → (Eq (binrel% LE.le (Rat.ofInt 0) skoX) (binrel% GE.ge skoX (Int.ofNat 0))) → (And (Not (binrel% LE.le (Rat.ofInt 0) skoX)) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ))))))))) → False :=
fun lean_r0 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (And (Not (binrel% LE.le (Rat.ofInt 0) skoX)) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ))))))))) (And (Not (binrel% LE.le (Rat.ofInt 0) skoX)) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)))))))))) => -- THEORY_REWRITE_BOOL
fun lean_r3 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% LE.le skoZ (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% LE.le (Rat.ofInt 0) skoZ) (binrel% GE.ge skoZ (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% LE.le skoY (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% LE.le skoX (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (binrel% LE.le (Rat.ofInt 0) skoY) (binrel% GE.ge skoY (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (binrel% LE.le (Rat.ofInt 0) skoX) (binrel% GE.ge skoX (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_a14 : (And (Not (binrel% LE.le (Rat.ofInt 0) skoX)) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ))))))))) => by
have lean_s0 : (Eq And And) := by timed rfl
have lean_s1 : (Eq (Not (binrel% LE.le (Rat.ofInt 0) skoX)) (Not (binrel% GE.ge skoX (Int.ofNat 0)))) := by timed flipCongrArg lean_r13 [Not]
let lean_s2 := by timed congr lean_s0 lean_s1
let lean_s3 := by timed congr lean_s0 lean_r13
let lean_s4 := by timed congr lean_s0 lean_r12
let lean_s5 := by timed congr lean_s0 lean_r8
let lean_s6 := by timed congr lean_s0 lean_r11
let lean_s7 := by timed congr lean_s0 lean_r10
let lean_s8 := by timed congr lean_s0 lean_r5
have lean_s9 : (Eq skoZ skoZ) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [LE.le]
have lean_s11 : (Eq (Rat.ofInt 2) (Rat.ofInt 2)) := by timed rfl
have lean_s12 : (Eq skoX skoX) := by timed rfl
let lean_s13 := by timed flipCongrArg lean_s12 [HMul.hMul]
have lean_s14 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s13 lean_r6
have lean_s15 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) := by timed Eq.trans lean_s14 lean_r1
have lean_s16 : (Eq skoY skoY) := by timed rfl
let lean_s17 := by timed flipCongrArg lean_s16 [HMul.hMul]
have lean_s18 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s17 lean_r6
have lean_s19 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) := by timed Eq.trans lean_s18 lean_r9
let lean_s20 := by timed congrHAdd lean_s15 lean_s19
have lean_s21 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) := by timed congrHAdd lean_s11 lean_s20
have lean_s22 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_s21 lean_r3
have lean_s23 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_r4 lean_s22
have lean_s24 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le skoZ (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))))) := by timed congr lean_s10 lean_s23
have lean_s25 : (Eq (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2)))) := by timed Eq.trans lean_s24 lean_r7
let lean_s26 := by timed congr lean_s0 lean_s25
let lean_s27 := by timed flipCongrArg lean_s23 [LE.le]
have lean_s28 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (binrel% LE.le (binrel% HAdd.hAdd (Int.ofNat 2) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) skoZ)) := by timed congr lean_s27 lean_s9
have lean_s29 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))) := by timed Eq.trans lean_s28 lean_r0
let lean_s30 := by timed congr lean_s26 lean_s29
let lean_s31 := by timed congr lean_s8 lean_s30
let lean_s32 := by timed congr lean_s7 lean_s31
let lean_s33 := by timed congr lean_s6 lean_s32
let lean_s34 := by timed congr lean_s5 lean_s33
let lean_s35 := by timed congr lean_s4 lean_s34
let lean_s36 := by timed congr lean_s3 lean_s35
have lean_s37 : (Eq (And (Not (binrel% LE.le (Rat.ofInt 0) skoX)) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ))))))))) (And (Not (binrel% GE.ge skoX (Int.ofNat 0))) (And (binrel% GE.ge skoX (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))))))))))) := by timed congr lean_s2 lean_s36
have lean_s38 : (Eq (And (Not (binrel% LE.le (Rat.ofInt 0) skoX)) (And (binrel% LE.le (Rat.ofInt 0) skoX) (And (binrel% LE.le (Rat.ofInt 0) skoY) (And (binrel% LE.le (Rat.ofInt 0) skoZ) (And (binrel% LE.le skoX (Rat.ofInt 1)) (And (binrel% LE.le skoY (Rat.ofInt 1)) (And (binrel% LE.le skoZ (Rat.ofInt 1)) (And (binrel% LE.le skoZ (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 2) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ))))))))) (And (Not (binrel% GE.ge skoX (Int.ofNat 0))) (And (binrel% GE.ge skoX (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2))))))))))) := by timed Eq.trans lean_r2 lean_s37
have lean_s39 : (And (Not (binrel% GE.ge skoX (Int.ofNat 0))) (And (binrel% GE.ge skoX (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2)))))))))) := by timed eqResolve lean_a14 lean_s38
have lean_s40 : (binrel% GE.ge skoX (Int.ofNat 0)) := by andElim lean_s39, 1
have lean_s41 : (And (Not (binrel% GE.ge skoX (Int.ofNat 0))) (And (binrel% GE.ge skoX (Int.ofNat 0)) (And (binrel% GE.ge skoY (Int.ofNat 0)) (And (binrel% GE.ge skoZ (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (Int.ofNat 1))) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Neg.neg (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) (Int.ofNat 2)))))))))) := by timed eqResolve lean_a14 lean_s38
have lean_s42 : (Not (binrel% GE.ge skoX (Int.ofNat 0))) := by andElim lean_s41, 0
exact (show False from by timed contradiction lean_s40 lean_s42)


