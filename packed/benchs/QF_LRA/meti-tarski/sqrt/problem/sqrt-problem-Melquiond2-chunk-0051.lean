-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoSXY : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoSXY : Rat}
variable {skoX : Rat}
variable {skoY : Rat}

theorem th0 : (Eq (binrel% GT.gt skoSXY (Rat.ofInt 0)) (Not (binrel% LE.le skoSXY (Rat.ofInt 0)))) → (Eq (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd skoX skoSXY)) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY)) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)))) → (Eq (And (Not (binrel% LE.le (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) skoX)) (And (Not (binrel% LE.le skoY (Rat.ofInt 1))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)))) (And (Not (binrel% LE.le skoSXY (Rat.ofInt 0))) (And (Not (binrel% LE.le (Rat.ofInt 2) skoX)) (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) skoY))))))) (And (Not (binrel% LE.le (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) skoX)) (And (Not (binrel% LE.le skoY (Rat.ofInt 1))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)))) (And (Not (binrel% LE.le skoSXY (Rat.ofInt 0))) (And (Not (binrel% LE.le (Rat.ofInt 2) skoX)) (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) skoY)))))))) → (Eq (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY)) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))))) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))))) → (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoX skoSXY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Rat.ofInt 0)) → (Eq (binrel% LE.le skoY (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) → (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) True) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) True) → (Eq (binrel% LE.le (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32)) skoY) (binrel% GE.ge skoY (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32)))) → (Eq (Not True) False) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) → (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) → (Eq (binrel% LE.le skoSXY (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) → (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) → (Eq (binrel% LE.le (Rat.ofInt 2) skoX) (binrel% GE.ge skoX (Int.ofNat 2))) → (Eq (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) skoX) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))))) → (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) True) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))))) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) True) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) → (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) → (And (Not (binrel% LE.le (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) skoX)) (And (Not (binrel% LE.le skoY (Rat.ofInt 1))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)))) (And (Not (binrel% LE.le skoSXY (Rat.ofInt 0))) (And (Not (binrel% LE.le (Rat.ofInt 2) skoX)) (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) skoY))))))) → False :=
fun lean_r0 : (Eq (binrel% GT.gt skoSXY (Rat.ofInt 0)) (Not (binrel% LE.le skoSXY (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd skoX skoSXY)) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY)) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (And (Not (binrel% LE.le (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) skoX)) (And (Not (binrel% LE.le skoY (Rat.ofInt 1))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)))) (And (Not (binrel% LE.le skoSXY (Rat.ofInt 0))) (And (Not (binrel% LE.le (Rat.ofInt 2) skoX)) (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) skoY))))))) (And (Not (binrel% LE.le (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) skoX)) (And (Not (binrel% LE.le skoY (Rat.ofInt 1))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)))) (And (Not (binrel% LE.le skoSXY (Rat.ofInt 0))) (And (Not (binrel% LE.le (Rat.ofInt 2) skoX)) (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) skoY)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY)) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))))) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r13 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoX skoSXY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (binrel% LE.le skoY (Rat.ofInt 1)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) True) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32)) skoY) (binrel% GE.ge skoY (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32)))) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq (binrel% LE.le skoSXY (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r26 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq (binrel% LE.le (Rat.ofInt 2) skoX) (binrel% GE.ge skoX (Int.ofNat 2))) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) skoX) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) True) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_a37 : (And (Not (binrel% LE.le (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) skoX)) (And (Not (binrel% LE.le skoY (Rat.ofInt 1))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)))) (And (Not (binrel% LE.le skoSXY (Rat.ofInt 0))) (And (Not (binrel% LE.le (Rat.ofInt 2) skoX)) (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) skoY))))))) => by
have lean_s0 : (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))) False))) :=
  (scope (fun lean_a38 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) =>
    (scope (fun lean_a39 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) =>
      (scope (fun lean_a40 : (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) =>
        have lean_s0 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))) := by timed flipCongrArg lean_r35 [Not]
        have lean_s1 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))) := by timed Eq.trans lean_r5 lean_s0
        have lean_s2 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0))) := by timed Eq.symm lean_s1
        have lean_s3 : (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)) := by timed eqResolve lean_a40 lean_s2
        have lean_s4 : (Or (Not (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0))) False) :=
          (scope (fun lean_a41 : (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)) =>
            have lean_s4 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := by timed trueElim lean_r12
            have lean_s5 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0))) := by timed And.intro lean_s4 lean_a41
            have lean_s6 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))) := by arithMulPos [(binrel% HAdd.hAdd skoX skoSXY), (Rat.ofInt 0), (Rat.ofInt 1)], 0
            have lean_s7 : (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))) := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r25
            have lean_s9 : (Eq (Not (binrel% LE.le skoSXY (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) := by timed flipCongrArg lean_r24 [Not]
            have lean_s10 : (Eq (binrel% GT.gt skoSXY (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) := by timed Eq.trans lean_r0 lean_s9
            have lean_s11 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) (binrel% GT.gt skoSXY (Rat.ofInt 0))) := by timed Eq.symm lean_s10
            have lean_s12 : (binrel% GT.gt skoSXY (Rat.ofInt 0)) := by timed eqResolve lean_a39 lean_s11
            have lean_s13 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoSXY (Rat.ofInt 0))) := by timed And.intro lean_s8 lean_s12
            have lean_s14 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoSXY (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoSXY, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 2
            have lean_s15 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s13 lean_s14
            have lean_s16 : (Eq (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) := by timed flipCongrArg lean_r23 [Not]
            have lean_s17 : (Eq (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) := by timed Eq.trans lean_r1 lean_s16
            have lean_s18 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) := by timed Eq.symm lean_s17
            have lean_s19 : (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))) := by timed eqResolve lean_a38 lean_s18
            have lean_s20 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) := by timed And.intro lean_s8 lean_s19
            have lean_s21 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) := by arithMulNeg [skoX, (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)), (Neg.neg (Rat.ofInt 1))], 2
            have lean_s22 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) := by timed modusPonens lean_s20 lean_s21
            have lean_s23 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) := by sumBounds [lean_s7, lean_s15, lean_s22]
            let lean_s24 := by timed congrHAdd lean_r3 lean_r4
            have lean_s25 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX))) (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoX skoSXY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed congrHAdd lean_r2 lean_s24
            have lean_s26 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX))) (Rat.ofInt 0)) := by timed Eq.trans lean_s25 lean_r14
            let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
            let lean_s28 := by timed congrHAdd lean_r36 lean_r22
            have lean_s29 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) := by timed congrHAdd lean_r18 lean_s28
            have lean_s30 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) := by timed Eq.trans lean_s29 lean_r26
            have lean_s31 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) := by timed congr lean_s27 lean_s30
            have lean_s32 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) True) := by timed Eq.trans lean_s31 lean_r33
            have lean_s33 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))))) (Not True)) := by timed flipCongrArg lean_s32 [Not]
            have lean_s34 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))))) False) := by timed Eq.trans lean_s33 lean_r21
            have lean_s35 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoX skoSXY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoSXY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) False) := by timed Eq.trans lean_r8 lean_s34
            show False from by timed eqResolve lean_s23 lean_s35
          ))
        have lean_s5 : (Not (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0))) := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq (Not (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))))) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq (Not (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0))) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) := by timed Eq.trans lean_s6 lean_r13
        have lean_s8 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0))) := by timed Eq.symm lean_r35
        have lean_s9 : (Eq (Not (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0))) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0))) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)) := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)) (Not (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)))) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)) (Not (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0)))) := by timed Eq.trans lean_r35 lean_s11
        have lean_s13 : (Not (binrel% LT.lt (binrel% HAdd.hAdd skoX skoSXY) (Rat.ofInt 0))) := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))))) := by timed flipNotAnd lean_s1 [(Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))), (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))), (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) := by timed congr lean_s5 lean_r34
have lean_s7 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))))) True) := by timed Eq.trans lean_s6 lean_r16
have lean_s8 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) True) := by timed Eq.trans lean_r11 lean_s7
have lean_s9 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) := by timed congr lean_s12 lean_r31
have lean_s14 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s13 lean_r30
have lean_s15 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) True) := by timed Eq.trans lean_r32 lean_s14
have lean_s16 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))) := by timed congr lean_s19 lean_r13
have lean_s21 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s20 lean_r19
have lean_s22 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) True) := by timed Eq.trans lean_r29 lean_s21
have lean_s23 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))))) := by timed congr lean_s10 lean_s24
have lean_s26 : (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))) := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Or (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) := by permutateOr lean_s26, [2, 0, 1], (- 1)
have lean_s28 : (Eq And And) := by timed rfl
have lean_s29 : (Eq skoSXY skoSXY) := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [HMul.hMul]
have lean_s31 : (Eq (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s30 lean_r9
have lean_s32 : (Eq (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY)) := by timed Eq.trans lean_s31 lean_r7
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq skoX skoX) := by timed rfl
have lean_s35 : (Eq (binrel% LE.le (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) skoX) (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) skoX)) := by timed congr lean_s33 lean_s34
have lean_s36 : (Eq (binrel% LE.le (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) skoX) (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) := by timed Eq.trans lean_s35 lean_r28
have lean_s37 : (Eq (Not (binrel% LE.le (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) skoX)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)))) := by timed flipCongrArg lean_s36 [Not]
let lean_s38 := by timed congr lean_s28 lean_s37
have lean_s39 : (Eq (Not (binrel% LE.le skoY (Rat.ofInt 1))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1))))) := by timed flipCongrArg lean_r15 [Not]
let lean_s40 := by timed congr lean_s28 lean_s39
let lean_s41 := by timed flipCongrArg lean_s34 [LE.le]
have lean_s42 : (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2))) (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))) := by timed congr lean_s41 lean_r17
have lean_s43 : (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) := by timed Eq.trans lean_s42 lean_r23
have lean_s44 : (Eq (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))))) := by timed flipCongrArg lean_s43 [Not]
let lean_s45 := by timed congr lean_s28 lean_s44
have lean_s46 : (Eq (Not (binrel% LE.le skoSXY (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)))) := by timed flipCongrArg lean_r24 [Not]
let lean_s47 := by timed congr lean_s28 lean_s46
have lean_s48 : (Eq (Not (binrel% LE.le (Rat.ofInt 2) skoX)) (Not (binrel% GE.ge skoX (Int.ofNat 2)))) := by timed flipCongrArg lean_r27 [Not]
let lean_s49 := by timed congr lean_s28 lean_s48
let lean_s50 := by timed flipCongrArg lean_r10 [LE.le]
have lean_s51 : (Eq skoY skoY) := by timed rfl
have lean_s52 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) skoY) (binrel% LE.le (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32)) skoY)) := by timed congr lean_s50 lean_s51
have lean_s53 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) skoY) (binrel% GE.ge skoY (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32)))) := by timed Eq.trans lean_s52 lean_r20
have lean_s54 : (Eq (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) skoY)) (Not (binrel% GE.ge skoY (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32))))) := by timed flipCongrArg lean_s53 [Not]
let lean_s55 := by timed congr lean_s49 lean_s54
let lean_s56 := by timed congr lean_s47 lean_s55
let lean_s57 := by timed congr lean_s45 lean_s56
let lean_s58 := by timed congr lean_s40 lean_s57
have lean_s59 : (Eq (And (Not (binrel% LE.le (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) skoX)) (And (Not (binrel% LE.le skoY (Rat.ofInt 1))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)))) (And (Not (binrel% LE.le skoSXY (Rat.ofInt 0))) (And (Not (binrel% LE.le (Rat.ofInt 2) skoX)) (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) skoY))))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) (And (Not (binrel% GE.ge skoX (Int.ofNat 2))) (Not (binrel% GE.ge skoY (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32)))))))))) := by timed congr lean_s38 lean_s58
have lean_s60 : (Eq (And (Not (binrel% LE.le (binrel% HMul.hMul skoSXY (Neg.neg (Rat.ofInt 1))) skoX)) (And (Not (binrel% LE.le skoY (Rat.ofInt 1))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2)))) (And (Not (binrel% LE.le skoSXY (Rat.ofInt 0))) (And (Not (binrel% LE.le (Rat.ofInt 2) skoX)) (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32)) skoY))))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) (And (Not (binrel% GE.ge skoX (Int.ofNat 2))) (Not (binrel% GE.ge skoY (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32)))))))))) := by timed Eq.trans lean_r6 lean_s59
have lean_s61 : (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (Int.ofNat 1)))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) (And (Not (binrel% GE.ge skoX (Int.ofNat 2))) (Not (binrel% GE.ge skoY (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32))))))))) := by timed eqResolve lean_a37 lean_s60
have lean_s62 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0))) := by andElim lean_s61, 3
let lean_s63 := by R1 lean_s27, lean_s62, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoSXY) (Int.ofNat 0)), [(- 1), 0]
have lean_s64 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))))) := by andElim lean_s61, 2
let lean_s65 := by R1 lean_s63, lean_s64, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2)))), [(- 1), 0]
have lean_s66 : (Not (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0))) := by andElim lean_s61, 0
exact (show False from by R1 lean_s65, lean_s66, (binrel% GE.ge (binrel% HAdd.hAdd skoX skoSXY) (Int.ofNat 0)), [0, 0])


