-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoW : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoW : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}

theorem th0 : (Eq (binrel% GT.gt skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Not (binrel% LE.le skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) → (Eq (binrel% GT.gt skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) → (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (binrel% GT.gt skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))))) → (Eq (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ)) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2) (Int.ofNat 5)))) True) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)))) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% LE.le (Rat.ofInt 3) skoW) (binrel% GE.ge skoW (Int.ofNat 3))) → (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW)))) → (Eq (binrel% LE.le (Rat.ofInt 3) skoX) (binrel% GE.ge skoX (Int.ofNat 3))) → (Eq (binrel% LE.le skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) → (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))))) (Rat.ofInt 0)) → (Eq (binrel% LE.le skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) True) → (Eq (binrel% LE.le (Rat.ofInt 3) skoY) (binrel% GE.ge skoY (Int.ofNat 3))) → (Eq (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoW)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoX)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoY)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoZ)) (And (Not (binrel% LE.le skoW (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))))))))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoW)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoX)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoY)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoZ)) (And (Not (binrel% LE.le skoW (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10))))))))))))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) → (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) → (Eq (binrel% LE.le skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) → (Eq (Not True) False) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))))) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2) (Int.ofNat 5)))) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) → (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) True) → (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (binrel% LE.le (Rat.ofInt 3) skoZ) (binrel% GE.ge skoZ (Int.ofNat 3))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) → (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) True) → (Eq (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW)) → (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) True) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW)) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) → (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) → (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) → (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) True) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) → (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoW)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoX)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoY)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoZ)) (And (Not (binrel% LE.le skoW (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))))))))))) → False :=
fun lean_r0 : (Eq (binrel% GT.gt skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Not (binrel% LE.le skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq (binrel% GT.gt skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r3 : (Eq (binrel% GT.gt skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ)) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2) (Int.ofNat 5)))) True) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (binrel% LE.le (Rat.ofInt 3) skoW) (binrel% GE.ge skoW (Int.ofNat 3))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW)))) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (binrel% LE.le (Rat.ofInt 3) skoX) (binrel% GE.ge skoX (Int.ofNat 3))) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (binrel% LE.le skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ))))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (binrel% LE.le skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) True) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq (binrel% LE.le (Rat.ofInt 3) skoY) (binrel% GE.ge skoY (Int.ofNat 3))) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoW)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoX)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoY)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoZ)) (And (Not (binrel% LE.le skoW (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))))))))))) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoW)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoX)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoY)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoZ)) (And (Not (binrel% LE.le skoW (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10))))))))))))) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq (binrel% LE.le skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2) (Int.ofNat 5)))) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) True) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq (binrel% LE.le (Rat.ofInt 3) skoZ) (binrel% GE.ge skoZ (Int.ofNat 3))) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) True) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW)) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r42 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW)) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r46 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r47 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r49 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) True) => -- THEORY_REWRITE_BOOL
fun lean_r51 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) => -- THEORY_REWRITE_BOOL
fun lean_a52 : (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoW)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoX)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoY)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoZ)) (And (Not (binrel% LE.le skoW (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))))))))))) => by
have lean_s0 : (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (Or (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))) False))))) :=
  (scope (fun lean_a53 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) =>
    (scope (fun lean_a54 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) =>
      (scope (fun lean_a55 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) =>
        (scope (fun lean_a56 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) =>
          (scope (fun lean_a57 : (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) =>
            have lean_s0 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))) := by timed flipCongrArg lean_r47 [Not]
            have lean_s1 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))) := by timed Eq.trans lean_r10 lean_s0
            have lean_s2 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0))) := by timed Eq.symm lean_s1
            have lean_s3 : (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)) := by timed eqResolve lean_a57 lean_s2
            have lean_s4 : (Or (Not (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0))) False) :=
              (scope (fun lean_a58 : (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)) =>
                have lean_s4 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := by timed trueElim lean_r46
                have lean_s5 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0))) := by timed And.intro lean_s4 lean_a58
                have lean_s6 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))) := by arithMulPos [(binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))), (Rat.ofInt 0), (Rat.ofInt 1)], 0
                have lean_s7 : (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))) := by timed modusPonens lean_s5 lean_s6
                have lean_s8 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r2
                have lean_s9 : (Eq (Not (binrel% LE.le skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed flipCongrArg lean_r20 [Not]
                have lean_s10 : (Eq (binrel% GT.gt skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed Eq.trans lean_r0 lean_s9
                have lean_s11 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (binrel% GT.gt skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed Eq.symm lean_s10
                have lean_s12 : (binrel% GT.gt skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) := by timed eqResolve lean_a56 lean_s11
                have lean_s13 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed And.intro lean_s8 lean_s12
                have lean_s14 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by arithMulNeg [skoW, (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)), (Neg.neg (Rat.ofInt 1))], 2
                have lean_s15 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed modusPonens lean_s13 lean_s14
                have lean_s16 : (Eq (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed flipCongrArg lean_r22 [Not]
                have lean_s17 : (Eq (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed Eq.trans lean_r5 lean_s16
                have lean_s18 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed Eq.symm lean_s17
                have lean_s19 : (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) := by timed eqResolve lean_a55 lean_s18
                have lean_s20 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed And.intro lean_s8 lean_s19
                have lean_s21 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by arithMulNeg [skoX, (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)), (Neg.neg (Rat.ofInt 1))], 2
                have lean_s22 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed modusPonens lean_s20 lean_s21
                have lean_s23 : (Eq (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed flipCongrArg lean_r29 [Not]
                have lean_s24 : (Eq (binrel% GT.gt skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed Eq.trans lean_r1 lean_s23
                have lean_s25 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (binrel% GT.gt skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed Eq.symm lean_s24
                have lean_s26 : (binrel% GT.gt skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) := by timed eqResolve lean_a54 lean_s25
                have lean_s27 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed And.intro lean_s8 lean_s26
                have lean_s28 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by arithMulNeg [skoY, (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)), (Neg.neg (Rat.ofInt 1))], 2
                have lean_s29 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed modusPonens lean_s27 lean_s28
                have lean_s30 : (Eq (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed flipCongrArg lean_r16 [Not]
                have lean_s31 : (Eq (binrel% GT.gt skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed Eq.trans lean_r3 lean_s30
                have lean_s32 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (binrel% GT.gt skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed Eq.symm lean_s31
                have lean_s33 : (binrel% GT.gt skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) := by timed eqResolve lean_a53 lean_s32
                have lean_s34 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed And.intro lean_s8 lean_s33
                have lean_s35 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by arithMulNeg [skoZ, (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)), (Neg.neg (Rat.ofInt 1))], 2
                have lean_s36 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed modusPonens lean_s34 lean_s35
                have lean_s37 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) := by sumBounds [lean_s7, lean_s15, lean_s22, lean_s29, lean_s36]
                let lean_s38 := by timed congrHAdd lean_r6 lean_r7
                let lean_s39 := by timed congrHAdd lean_r23 lean_s38
                let lean_s40 := by timed congrHAdd lean_r42 lean_s39
                have lean_s41 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ))))) (binrel% HAdd.hAdd (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ)))))) := by timed congrHAdd lean_r44 lean_s40
                have lean_s42 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ))))) (Rat.ofInt 0)) := by timed Eq.trans lean_s41 lean_r19
                let lean_s43 := by timed flipCongrArg lean_s42 [GE.ge]
                let lean_s44 := by timed congrHAdd lean_r8 lean_r8
                let lean_s45 := by timed congrHAdd lean_r8 lean_s44
                let lean_s46 := by timed congrHAdd lean_r8 lean_s45
                have lean_s47 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) := by timed congrHAdd lean_r21 lean_s46
                have lean_s48 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2) (Int.ofNat 5)))) := by timed Eq.trans lean_s47 lean_r32
                have lean_s49 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2) (Int.ofNat 5))))) := by timed congr lean_s43 lean_s48
                have lean_s50 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) True) := by timed Eq.trans lean_s49 lean_r9
                have lean_s51 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))))) (Not True)) := by timed flipCongrArg lean_s50 [Not]
                have lean_s52 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))))) False) := by timed Eq.trans lean_s51 lean_r30
                have lean_s53 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoZ))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) False) := by timed Eq.trans lean_r4 lean_s52
                show False from by timed eqResolve lean_s37 lean_s53
              ))
            have lean_s5 : (Not (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0))) := by liftOrNToNeg lean_s4
            have lean_s6 : (Eq (Not (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))))) := by timed flipCongrArg lean_s1 [Not]
            have lean_s7 : (Eq (Not (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) := by timed Eq.trans lean_s6 lean_r28
            have lean_s8 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0))) := by timed Eq.symm lean_r47
            have lean_s9 : (Eq (Not (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0))) := by timed Eq.trans lean_s7 lean_s8
            have lean_s10 : (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)) := by timed eqResolve lean_s5 lean_s9
            have lean_s11 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)) (Not (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)))) := by timed Eq.symm lean_s7
            have lean_s12 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)) (Not (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0)))) := by timed Eq.trans lean_r47 lean_s11
            have lean_s13 : (Not (binrel% LT.lt (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Rat.ofInt 0))) := by timed eqResolve lean_s10 lean_s12
            show False from by timed contradiction lean_s3 lean_s13
  ))))))))))
have lean_s1 : (Not (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))))))) := by timed flipNotAnd lean_s1 [(Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))), (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))), (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))), (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))), (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed congr lean_s5 lean_r11
have lean_s7 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))) True) := by timed Eq.trans lean_s6 lean_r39
have lean_s8 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) True) := by timed Eq.trans lean_r27 lean_s7
have lean_s9 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed congr lean_s12 lean_r51
have lean_s14 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))) True) := by timed Eq.trans lean_s13 lean_r50
have lean_s15 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) True) := by timed Eq.trans lean_r18 lean_s14
have lean_s16 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed congr lean_s19 lean_r33
have lean_s21 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))) True) := by timed Eq.trans lean_s20 lean_r35
have lean_s22 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) True) := by timed Eq.trans lean_r48 lean_s21
have lean_s23 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed congr lean_s26 lean_r43
have lean_s28 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))) True) := by timed Eq.trans lean_s27 lean_r24
have lean_s29 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) True) := by timed Eq.trans lean_r45 lean_s28
have lean_s30 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s3 lean_s30
have lean_s32 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [Eq]
have lean_s34 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))) := by timed congr lean_s33 lean_r28
have lean_s35 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s34 lean_r41
have lean_s36 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) True) := by timed Eq.trans lean_r31 lean_s35
have lean_s37 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) := by timed trueElim lean_s36
let lean_s38 := by timed congr lean_s31 lean_s37
let lean_s39 := by timed congr lean_s24 lean_s38
let lean_s40 := by timed congr lean_s17 lean_s39
have lean_s41 : (Eq (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))))))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))))))) := by timed congr lean_s10 lean_s40
have lean_s42 : (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))))) := by timed eqResolve lean_s2 lean_s41
have lean_s43 : (Or (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))) := by permutateOr lean_s42, [4, 3, 2, 1, 0], (- 1)
have lean_s44 : (Eq And And) := by timed rfl
have lean_s45 : (Eq skoW skoW) := by timed rfl
let lean_s46 := by timed flipCongrArg lean_s45 [HMul.hMul]
have lean_s47 : (Eq (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s46 lean_r12
have lean_s48 : (Eq (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW)) := by timed Eq.trans lean_s47 lean_r40
have lean_s49 : (Eq skoX skoX) := by timed rfl
let lean_s50 := by timed flipCongrArg lean_s49 [HMul.hMul]
have lean_s51 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s50 lean_r12
have lean_s52 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) := by timed Eq.trans lean_s51 lean_r36
have lean_s53 : (Eq skoY skoY) := by timed rfl
let lean_s54 := by timed flipCongrArg lean_s53 [HMul.hMul]
have lean_s55 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s54 lean_r12
have lean_s56 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) := by timed Eq.trans lean_s55 lean_r49
let lean_s57 := by timed congrHAdd lean_s52 lean_s56
have lean_s58 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) := by timed congrHAdd lean_s48 lean_s57
have lean_s59 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW)))) := by timed Eq.trans lean_s58 lean_r14
have lean_s60 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW)))) := by timed Eq.trans lean_r38 lean_s59
let lean_s61 := by timed flipCongrArg lean_s60 [LE.le]
have lean_s62 : (Eq skoZ skoZ) := by timed rfl
have lean_s63 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW))) skoZ)) := by timed congr lean_s61 lean_s62
have lean_s64 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) := by timed Eq.trans lean_s63 lean_r17
have lean_s65 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)))) := by timed flipCongrArg lean_s64 [Not]
let lean_s66 := by timed congr lean_s44 lean_s65
have lean_s67 : (Eq (Not (binrel% LE.le (Rat.ofInt 3) skoW)) (Not (binrel% GE.ge skoW (Int.ofNat 3)))) := by timed flipCongrArg lean_r13 [Not]
let lean_s68 := by timed congr lean_s44 lean_s67
have lean_s69 : (Eq (Not (binrel% LE.le (Rat.ofInt 3) skoX)) (Not (binrel% GE.ge skoX (Int.ofNat 3)))) := by timed flipCongrArg lean_r15 [Not]
let lean_s70 := by timed congr lean_s44 lean_s69
have lean_s71 : (Eq (Not (binrel% LE.le (Rat.ofInt 3) skoY)) (Not (binrel% GE.ge skoY (Int.ofNat 3)))) := by timed flipCongrArg lean_r25 [Not]
let lean_s72 := by timed congr lean_s44 lean_s71
have lean_s73 : (Eq (Not (binrel% LE.le (Rat.ofInt 3) skoZ)) (Not (binrel% GE.ge skoZ (Int.ofNat 3)))) := by timed flipCongrArg lean_r37 [Not]
let lean_s74 := by timed congr lean_s44 lean_s73
let lean_s75 := by timed flipCongrArg lean_s45 [LE.le]
have lean_s76 : (Eq (binrel% LE.le skoW (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10))) (binrel% LE.le skoW (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed congr lean_s75 lean_r34
have lean_s77 : (Eq (binrel% LE.le skoW (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by timed Eq.trans lean_s76 lean_r20
have lean_s78 : (Eq (Not (binrel% LE.le skoW (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed flipCongrArg lean_s77 [Not]
let lean_s79 := by timed congr lean_s44 lean_s78
let lean_s80 := by timed flipCongrArg lean_s49 [LE.le]
have lean_s81 : (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10))) (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed congr lean_s80 lean_r34
have lean_s82 : (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by timed Eq.trans lean_s81 lean_r22
have lean_s83 : (Eq (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed flipCongrArg lean_s82 [Not]
let lean_s84 := by timed congr lean_s44 lean_s83
let lean_s85 := by timed flipCongrArg lean_s53 [LE.le]
have lean_s86 : (Eq (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10))) (binrel% LE.le skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed congr lean_s85 lean_r34
have lean_s87 : (Eq (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by timed Eq.trans lean_s86 lean_r29
have lean_s88 : (Eq (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed flipCongrArg lean_s87 [Not]
let lean_s89 := by timed congr lean_s44 lean_s88
let lean_s90 := by timed flipCongrArg lean_s62 [LE.le]
have lean_s91 : (Eq (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10))) (binrel% LE.le skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))) := by timed congr lean_s90 lean_r34
have lean_s92 : (Eq (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by timed Eq.trans lean_s91 lean_r16
have lean_s93 : (Eq (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))) := by timed flipCongrArg lean_s92 [Not]
let lean_s94 := by timed congr lean_s89 lean_s93
let lean_s95 := by timed congr lean_s84 lean_s94
let lean_s96 := by timed congr lean_s79 lean_s95
let lean_s97 := by timed congr lean_s74 lean_s96
let lean_s98 := by timed congr lean_s72 lean_s97
let lean_s99 := by timed congr lean_s70 lean_s98
let lean_s100 := by timed congr lean_s68 lean_s99
have lean_s101 : (Eq (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoW)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoX)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoY)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoZ)) (And (Not (binrel% LE.le skoW (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))))))))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) (And (Not (binrel% GE.ge skoW (Int.ofNat 3))) (And (Not (binrel% GE.ge skoX (Int.ofNat 3))) (And (Not (binrel% GE.ge skoY (Int.ofNat 3))) (And (Not (binrel% GE.ge skoZ (Int.ofNat 3))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))))))))) := by timed congr lean_s66 lean_s100
have lean_s102 : (Eq (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul skoW (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoW)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoX)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoY)) (And (Not (binrel% LE.le (Rat.ofInt 3) skoZ)) (And (Not (binrel% LE.le skoW (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))) (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 10)))))))))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) (And (Not (binrel% GE.ge skoW (Int.ofNat 3))) (And (Not (binrel% GE.ge skoX (Int.ofNat 3))) (And (Not (binrel% GE.ge skoY (Int.ofNat 3))) (And (Not (binrel% GE.ge skoZ (Int.ofNat 3))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))))))))))))) := by timed Eq.trans lean_r26 lean_s101
have lean_s103 : (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) (And (Not (binrel% GE.ge skoW (Int.ofNat 3))) (And (Not (binrel% GE.ge skoX (Int.ofNat 3))) (And (Not (binrel% GE.ge skoY (Int.ofNat 3))) (And (Not (binrel% GE.ge skoZ (Int.ofNat 3))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))))))))))) := by timed eqResolve lean_a52 lean_s102
have lean_s104 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by andElim lean_s103, 8
let lean_s105 := by R1 lean_s43, lean_s104, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))), [(- 1), 0]
have lean_s106 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by andElim lean_s103, 7
let lean_s107 := by R1 lean_s105, lean_s106, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))), [(- 1), 0]
have lean_s108 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by andElim lean_s103, 6
let lean_s109 := by R1 lean_s107, lean_s108, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))), [(- 1), 0]
have lean_s110 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10))))) := by andElim lean_s103, 5
let lean_s111 := by R1 lean_s109, lean_s110, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoW) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 10)))), [(- 1), 0]
have lean_s112 : (Not (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0))) := by andElim lean_s103, 0
exact (show False from by R1 lean_s111, lean_s112, (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW))) (Int.ofNat 0)), [0, 0])


