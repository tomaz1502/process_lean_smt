-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoA : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoA : Rat}
variable {pi : Rat}

theorem th0 : (Eq (binrel% GT.gt skoX (Rat.ofInt 0)) (Not (binrel% LE.le skoX (Rat.ofInt 0)))) → (Eq (binrel% LT.lt skoA (Rat.ofInt 0)) (Not (binrel% GE.ge skoA (Rat.ofInt 0)))) → (Eq (binrel% GE.ge skoA (Rat.ofInt 0)) (binrel% GE.ge skoA (Int.ofNat 0))) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoA) skoA) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA)) → (Eq (binrel% LE.le skoX (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA)) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) → (Eq (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi)) → (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX)) → (Eq (binrel% LE.le (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA) skoX) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) → (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) (Not (binrel% LE.le (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) → (Eq (binrel% LE.le (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)) pi) (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)) (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))) → (Eq (binrel% LE.le pi (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) → (Eq (binrel% LE.le (Rat.ofInt 0) skoA) (binrel% GE.ge skoA (Int.ofNat 0))) → (Eq (binrel% LE.le (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi) skoA) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))))) → (Eq (And (Not (binrel% LE.le (Rat.ofInt 0) skoA)) (And (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))))))))))) (And (Not (binrel% LE.le (Rat.ofInt 0) skoA)) (And (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))))))))))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) True) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) skoA)) (Rat.ofInt 0)) → (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))))) → (Eq (Eq (Not (Not (binrel% GE.ge skoA (Int.ofNat 0)))) (binrel% GE.ge skoA (Int.ofNat 0))) (Eq (binrel% GE.ge skoA (Int.ofNat 0)) (Not (Not (binrel% GE.ge skoA (Int.ofNat 0)))))) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0)) True) → (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) True) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) → (Eq (Not True) False) → (Eq (Eq (binrel% GE.ge skoA (Int.ofNat 0)) (binrel% GE.ge skoA (Int.ofNat 0))) True) → (Eq (Not (Not (binrel% GE.ge skoA (Int.ofNat 0)))) (binrel% GE.ge skoA (Int.ofNat 0))) → (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (binrel% LE.le (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) → (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (Eq (binrel% LE.le skoA skoX) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0))) (Rat.ofInt 0)) → (And (Not (binrel% LE.le (Rat.ofInt 0) skoA)) (And (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))))))))))) → False :=
fun lean_r0 : (Eq (binrel% GT.gt skoX (Rat.ofInt 0)) (Not (binrel% LE.le skoX (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq (binrel% LT.lt skoA (Rat.ofInt 0)) (Not (binrel% GE.ge skoA (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% GE.ge skoA (Rat.ofInt 0)) (binrel% GE.ge skoA (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))))) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoA) skoA) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA)) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% LE.le skoX (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA)) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi)) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% LE.le (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA) skoX) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) (Not (binrel% LE.le (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)) pi) (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)) (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (binrel% LE.le pi (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (binrel% LE.le (Rat.ofInt 0) skoA) (binrel% GE.ge skoA (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (binrel% LE.le (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi) skoA) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq (And (Not (binrel% LE.le (Rat.ofInt 0) skoA)) (And (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))))))))))) (And (Not (binrel% LE.le (Rat.ofInt 0) skoA)) (And (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))))))))))) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) skoA)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq (Eq (Not (Not (binrel% GE.ge skoA (Int.ofNat 0)))) (binrel% GE.ge skoA (Int.ofNat 0))) (Eq (binrel% GE.ge skoA (Int.ofNat 0)) (Not (Not (binrel% GE.ge skoA (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0)) True) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq (Eq (binrel% GE.ge skoA (Int.ofNat 0)) (binrel% GE.ge skoA (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq (Not (Not (binrel% GE.ge skoA (Int.ofNat 0)))) (binrel% GE.ge skoA (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r37 : (Eq (binrel% LE.le (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r39 : (Eq (binrel% LE.le skoA skoX) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_a41 : (And (Not (binrel% LE.le (Rat.ofInt 0) skoA)) (And (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))))))))))) => by
have lean_s0 : (Or (Not (Not (binrel% GE.ge skoA (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) False))) :=
  (scope (fun lean_a42 : (Not (binrel% GE.ge skoA (Int.ofNat 0))) =>
    (scope (fun lean_a43 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) =>
      (scope (fun lean_a44 : (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) =>
        have lean_s0 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r37 [Not]
        have lean_s1 : (Eq (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) := by timed Eq.trans lean_r13 lean_s0
        have lean_s2 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0))) := by timed Eq.symm lean_s1
        have lean_s3 : (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) := by timed eqResolve lean_a44 lean_s2
        have lean_s4 : (Or (Not (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0))) False) :=
          (scope (fun lean_a45 : (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) =>
            have lean_s4 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r36
            have lean_s5 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0))) := by timed And.intro lean_s4 lean_a45
            have lean_s6 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [(binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)), (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 2
            have lean_s7 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r9 [Not]
            have lean_s9 : (Eq (binrel% GT.gt skoX (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed Eq.trans lean_r0 lean_s8
            have lean_s10 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (binrel% GT.gt skoX (Rat.ofInt 0))) := by timed Eq.symm lean_s9
            have lean_s11 : (binrel% GT.gt skoX (Rat.ofInt 0)) := by timed eqResolve lean_a43 lean_s10
            have lean_s12 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoX (Rat.ofInt 0))) := by timed And.intro lean_s4 lean_s11
            have lean_s13 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoX (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoX, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 2
            have lean_s14 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := by timed trueElim lean_r38
            have lean_s16 : (Eq (Not (binrel% GE.ge skoA (Rat.ofInt 0))) (Not (binrel% GE.ge skoA (Int.ofNat 0)))) := by timed flipCongrArg lean_r2 [Not]
            have lean_s17 : (Eq (binrel% LT.lt skoA (Rat.ofInt 0)) (Not (binrel% GE.ge skoA (Int.ofNat 0)))) := by timed Eq.trans lean_r1 lean_s16
            have lean_s18 : (Eq (Not (binrel% GE.ge skoA (Int.ofNat 0))) (binrel% LT.lt skoA (Rat.ofInt 0))) := by timed Eq.symm lean_s17
            have lean_s19 : (binrel% LT.lt skoA (Rat.ofInt 0)) := by timed eqResolve lean_a42 lean_s18
            have lean_s20 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt skoA (Rat.ofInt 0))) := by timed And.intro lean_s15 lean_s19
            have lean_s21 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt skoA (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) skoA) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))) := by arithMulPos [skoA, (Rat.ofInt 0), (Rat.ofInt 1)], 0
            have lean_s22 : (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) skoA) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))) := by timed modusPonens lean_s20 lean_s21
            have lean_s23 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))) := by sumBounds [lean_s7, lean_s14, lean_s22]
            let lean_s24 := by timed congrHAdd lean_r14 lean_r4
            have lean_s25 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) skoA))) := by timed congrHAdd lean_r10 lean_s24
            have lean_s26 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (Rat.ofInt 0)) := by timed Eq.trans lean_s25 lean_r26
            let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
            let lean_s28 := by timed congrHAdd lean_r24 lean_r5
            have lean_s29 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0)))) := by timed congrHAdd lean_r24 lean_s28
            have lean_s30 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))) (Rat.ofInt 0)) := by timed Eq.trans lean_s29 lean_r40
            have lean_s31 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))) (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0))) := by timed congr lean_s27 lean_s30
            have lean_s32 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))) True) := by timed Eq.trans lean_s31 lean_r30
            have lean_s33 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))))) (Not True)) := by timed flipCongrArg lean_s32 [Not]
            have lean_s34 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))))) False) := by timed Eq.trans lean_s33 lean_r33
            have lean_s35 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))) False) := by timed Eq.trans lean_r3 lean_s34
            show False from by timed eqResolve lean_s23 lean_s35
          ))
        have lean_s5 : (Not (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0))) := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq (Not (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))))) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq (Not (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) := by timed Eq.trans lean_s6 lean_r27
        have lean_s8 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)) (binrel% LE.le (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0))) := by timed Eq.symm lean_r37
        have lean_s9 : (Eq (Not (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0))) (binrel% LE.le (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0))) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : (binrel% LE.le (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)) (Not (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)))) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq (binrel% LE.le (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) (Not (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)))) := by timed Eq.trans lean_r37 lean_s11
        have lean_s13 : (Not (binrel% GT.gt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0))) := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And (Not (binrel% GE.ge skoA (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (Not (binrel% GE.ge skoA (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))))) := by timed flipNotAnd lean_s1 [(Not (binrel% GE.ge skoA (Int.ofNat 0))), (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))), (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq (binrel% GE.ge skoA (Int.ofNat 0)) (binrel% GE.ge skoA (Int.ofNat 0))) := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq (Eq (binrel% GE.ge skoA (Int.ofNat 0)) (Not (Not (binrel% GE.ge skoA (Int.ofNat 0))))) (Eq (binrel% GE.ge skoA (Int.ofNat 0)) (binrel% GE.ge skoA (Int.ofNat 0)))) := by timed congr lean_s5 lean_r35
have lean_s7 : (Eq (Eq (binrel% GE.ge skoA (Int.ofNat 0)) (Not (Not (binrel% GE.ge skoA (Int.ofNat 0))))) True) := by timed Eq.trans lean_s6 lean_r34
have lean_s8 : (Eq (Eq (Not (Not (binrel% GE.ge skoA (Int.ofNat 0)))) (binrel% GE.ge skoA (Int.ofNat 0))) True) := by timed Eq.trans lean_r29 lean_s7
have lean_s9 : (Eq (Not (Not (binrel% GE.ge skoA (Int.ofNat 0)))) (binrel% GE.ge skoA (Int.ofNat 0))) := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed congr lean_s12 lean_r32
have lean_s14 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s13 lean_r31
have lean_s15 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) True) := by timed Eq.trans lean_r22 lean_s14
have lean_s16 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) := by timed congr lean_s19 lean_r27
have lean_s21 : (Eq (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s20 lean_r25
have lean_s22 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) True) := by timed Eq.trans lean_r28 lean_s21
have lean_s23 : (Eq (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq (Or (Not (Not (binrel% GE.ge skoA (Int.ofNat 0)))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (Not (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))))) (Or (binrel% GE.ge skoA (Int.ofNat 0)) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))))) := by timed congr lean_s10 lean_s24
have lean_s26 : (Or (binrel% GE.ge skoA (Int.ofNat 0)) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Or (binrel% GE.ge skoA (Int.ofNat 0)) (Or (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by permutateOr lean_s26, [0, 2, 1], (- 1)
have lean_s28 : (Eq And And) := by timed rfl
have lean_s29 : (Eq (Not (binrel% LE.le (Rat.ofInt 0) skoA)) (Not (binrel% GE.ge skoA (Int.ofNat 0)))) := by timed flipCongrArg lean_r20 [Not]
let lean_s30 := by timed congr lean_s28 lean_s29
have lean_s31 : (Eq skoX skoX) := by timed rfl
let lean_s32 := by timed flipCongrArg lean_s31 [LE.le]
have lean_s33 : (Eq skoA skoA) := by timed rfl
let lean_s34 := by timed flipCongrArg lean_s33 [HMul.hMul]
have lean_s35 : (Eq (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)))) := by timed congr lean_s34 lean_r16
have lean_s36 : (Eq (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA)) := by timed Eq.trans lean_s35 lean_r6
have lean_s37 : (Eq (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))) (binrel% LE.le skoX (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA))) := by timed congr lean_s32 lean_s36
have lean_s38 : (Eq (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) := by timed Eq.trans lean_s37 lean_r7
have lean_s39 : (Eq (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)))) := by timed flipCongrArg lean_s38 [Not]
let lean_s40 := by timed congr lean_s28 lean_s39
let lean_s41 := by timed flipCongrArg lean_s36 [LE.le]
have lean_s42 : (Eq (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX) (binrel% LE.le (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA) skoX)) := by timed congr lean_s41 lean_s31
have lean_s43 : (Eq (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) := by timed Eq.trans lean_s42 lean_r11
have lean_s44 : (Eq (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0)))) := by timed flipCongrArg lean_s43 [Not]
let lean_s45 := by timed flipCongrArg lean_s44 [Or]
have lean_s46 : (Eq (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))))) := by timed congr lean_s45 lean_s39
let lean_s47 := by timed congr lean_s28 lean_s46
have lean_s48 : (Eq (Not (binrel% LE.le skoA skoX)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r39 [Not]
let lean_s49 := by timed congr lean_s28 lean_s48
have lean_s50 : (Eq (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r9 [Not]
let lean_s51 := by timed congr lean_s28 lean_s50
have lean_s52 : (Eq pi pi) := by timed rfl
let lean_s53 := by timed flipCongrArg lean_s52 [HMul.hMul]
have lean_s54 : (Eq (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed congr lean_s53 lean_r12
have lean_s55 : (Eq (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi)) := by timed Eq.trans lean_s54 lean_r8
let lean_s56 := by timed flipCongrArg lean_s55 [LE.le]
have lean_s57 : (Eq (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA) (binrel% LE.le (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi) skoA)) := by timed congr lean_s56 lean_s33
have lean_s58 : (Eq (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0))) := by timed Eq.trans lean_s57 lean_r21
have lean_s59 : (Eq (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0)))) := by timed flipCongrArg lean_s58 [Not]
let lean_s60 := by timed congr lean_s28 lean_s59
let lean_s61 := by timed flipCongrArg lean_r15 [LE.le]
have lean_s62 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi) (binrel% LE.le (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)) pi)) := by timed congr lean_s61 lean_s52
have lean_s63 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi) (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) := by timed Eq.trans lean_s62 lean_r17
have lean_s64 : (Eq (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))))) := by timed flipCongrArg lean_s63 [Not]
let lean_s65 := by timed congr lean_s28 lean_s64
let lean_s66 := by timed flipCongrArg lean_s52 [LE.le]
have lean_s67 : (Eq (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))) (binrel% LE.le pi (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000)))) := by timed congr lean_s66 lean_r18
have lean_s68 : (Eq (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) := by timed Eq.trans lean_s67 lean_r19
have lean_s69 : (Eq (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000)))))) := by timed flipCongrArg lean_s68 [Not]
let lean_s70 := by timed congr lean_s65 lean_s69
let lean_s71 := by timed congr lean_s60 lean_s70
let lean_s72 := by timed congr lean_s51 lean_s71
let lean_s73 := by timed congr lean_s49 lean_s72
let lean_s74 := by timed congr lean_s47 lean_s73
let lean_s75 := by timed congr lean_s40 lean_s74
have lean_s76 : (Eq (And (Not (binrel% LE.le (Rat.ofInt 0) skoA)) (And (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))))))))))) (And (Not (binrel% GE.ge skoA (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) (And (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0))) (And (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))))))))))) := by timed congr lean_s30 lean_s75
have lean_s77 : (Eq (And (Not (binrel% LE.le (Rat.ofInt 0) skoA)) (And (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))))))))))) (And (Not (binrel% GE.ge skoA (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) (And (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0))) (And (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))))))))))) := by timed Eq.trans lean_r23 lean_s76
have lean_s78 : (And (Not (binrel% GE.ge skoA (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) (And (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0))) (And (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000)))))))))))) := by timed eqResolve lean_a41 lean_s77
have lean_s79 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) := by andElim lean_s78, 4
let lean_s80 := by R1 lean_s27, lean_s79, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)), [(- 1), 0]
have lean_s81 : (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) := by andElim lean_s78, 3
let lean_s82 := by R1 lean_s80, lean_s81, (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)), [(- 1), 0]
have lean_s83 : (Not (binrel% GE.ge skoA (Int.ofNat 0))) := by andElim lean_s78, 0
exact (show False from by R1 lean_s82, lean_s83, (binrel% GE.ge skoA (Int.ofNat 0)), [0, 0])


