-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoA : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoA : Rat}
variable {pi : Rat}

theorem th0 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))))) → (Eq (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA)) → (Eq (binrel% LE.le skoX (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA)) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) → (Eq (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi)) → (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) → (Eq (binrel% GT.gt skoX (Rat.ofInt 0)) (Not (binrel% LE.le skoX (Rat.ofInt 0)))) → (Eq (binrel% LE.le (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA) skoX) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0))) (Rat.ofInt 0)) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) → (Eq (binrel% LE.le (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)) pi) (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)) (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX))) → (Eq (binrel% LE.le skoA skoX) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) → (Eq (binrel% LE.le pi (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) → (Eq (binrel% LE.le (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi) skoA) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0))) → (Eq (binrel% LE.le skoA (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))) → (Eq (And (binrel% LE.le skoA (Rat.ofInt 0)) (And (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))))))))))) (And (binrel% LE.le skoA (Rat.ofInt 0)) (And (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))))))))))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX) skoA)) (Rat.ofInt 0)) → (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)))) → (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) True) → (Eq (Not True) False) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0)) True) → (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 2000)) (Int.ofNat 0)) True) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoA) skoA) → (And (binrel% LE.le skoA (Rat.ofInt 0)) (And (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))))))))))) → False :=
fun lean_r0 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))))) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA)) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% LE.le skoX (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA)) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi)) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% GT.gt skoX (Rat.ofInt 0)) (Not (binrel% LE.le skoX (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% LE.le (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA) skoX) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)) pi) (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)) (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% LE.le skoA skoX) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (binrel% LE.le pi (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (binrel% LE.le (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi) skoA) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (binrel% LE.le skoA (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (And (binrel% LE.le skoA (Rat.ofInt 0)) (And (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))))))))))) (And (binrel% LE.le skoA (Rat.ofInt 0)) (And (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))))))))))) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r22 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))))) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX) skoA)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r25 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) True) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0)) True) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 2000)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r31 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoA) skoA) => -- THEORY_REWRITE_ARITH
fun lean_a35 : (And (binrel% LE.le skoA (Rat.ofInt 0)) (And (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))))))))))) => by
have lean_s0 : (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) False))) :=
  (scope (fun lean_a36 : (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0)) =>
    (scope (fun lean_a37 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) =>
      (scope (fun lean_a38 : (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)) =>
        have lean_s0 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0))) := by timed Eq.symm lean_r32
        have lean_s1 : (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)) := by timed eqResolve lean_a38 lean_s0
        have lean_s2 : (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0))) False) :=
          (scope (fun lean_a39 : (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)) =>
            have lean_s2 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r24
            have lean_s3 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0))) := by timed And.intro lean_s2 lean_a39
            have lean_s4 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0))) (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [(binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)), (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 3
            have lean_s5 : (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s3 lean_s4
            have lean_s6 : (binrel% LT.lt (Neg.neg (Rat.ofInt 2000)) (Int.ofNat 0)) := by timed trueElim lean_r30
            have lean_s7 : (Eq (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r4 [Not]
            have lean_s8 : (Eq (binrel% GT.gt skoX (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed Eq.trans lean_r5 lean_s7
            have lean_s9 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (binrel% GT.gt skoX (Rat.ofInt 0))) := by timed Eq.symm lean_s8
            have lean_s10 : (binrel% GT.gt skoX (Rat.ofInt 0)) := by timed eqResolve lean_a37 lean_s9
            have lean_s11 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 2000)) (Int.ofNat 0)) (binrel% GT.gt skoX (Rat.ofInt 0))) := by timed And.intro lean_s6 lean_s10
            have lean_s12 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 2000)) (Int.ofNat 0)) (binrel% GT.gt skoX (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)))) := by arithMulNeg [skoX, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 2000))], 2
            have lean_s13 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0))) := by timed modusPonens lean_s11 lean_s12
            have lean_s14 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := by timed trueElim lean_r21
            have lean_s15 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0)) (binrel% LE.le skoA (Rat.ofInt 0))) := by timed Eq.symm lean_r18
            have lean_s16 : (binrel% LE.le skoA (Rat.ofInt 0)) := by timed eqResolve lean_a36 lean_s15
            have lean_s17 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le skoA (Rat.ofInt 0))) := by timed And.intro lean_s14 lean_s16
            have lean_s18 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le skoA (Rat.ofInt 0))) (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) skoA) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))) := by arithMulPos [skoA, (Rat.ofInt 0), (Rat.ofInt 1)], 1
            have lean_s19 : (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) skoA) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))) := by timed modusPonens lean_s17 lean_s18
            have lean_s20 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))) := by sumBounds [lean_s5, lean_s13, lean_s19]
            let lean_s21 := by timed congrHAdd lean_r15 lean_r34
            have lean_s22 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX) skoA))) := by timed congrHAdd lean_r13 lean_s21
            have lean_s23 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (Rat.ofInt 0)) := by timed Eq.trans lean_s22 lean_r23
            let lean_s24 := by timed flipCongrArg lean_s23 [GE.ge]
            let lean_s25 := by timed congrHAdd lean_r20 lean_r31
            have lean_s26 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Rat.ofInt 0) (Rat.ofInt 0)))) := by timed congrHAdd lean_r33 lean_s25
            have lean_s27 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))) (Rat.ofInt 0)) := by timed Eq.trans lean_s26 lean_r9
            have lean_s28 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))) (binrel% GE.ge (Rat.ofInt 0) (Rat.ofInt 0))) := by timed congr lean_s24 lean_s27
            have lean_s29 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))) True) := by timed Eq.trans lean_s28 lean_r29
            have lean_s30 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))))) (Not True)) := by timed flipCongrArg lean_s29 [Not]
            have lean_s31 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0)))))) False) := by timed Eq.trans lean_s30 lean_r27
            have lean_s32 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) skoX) (binrel% HMul.hMul (Rat.ofInt 1) skoA))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Rat.ofInt 2000)) (Rat.ofInt 0)) (binrel% HMul.hMul (Rat.ofInt 1) (Rat.ofInt 0))))) False) := by timed Eq.trans lean_r0 lean_s31
            show False from by timed eqResolve lean_s20 lean_s32
          ))
        have lean_s3 : (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0))) := by liftOrNToNeg lean_s2
        have lean_s4 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)))) := by timed flipCongrArg lean_r32 [Not]
        have lean_s5 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)))) := by timed Eq.trans lean_r25 lean_s4
        have lean_s6 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) (binrel% LT.lt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0))) := by timed Eq.symm lean_s5
        have lean_s7 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0))) (binrel% LT.lt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0))) := by timed Eq.trans lean_s4 lean_s6
        have lean_s8 : (binrel% LT.lt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)) := by timed eqResolve lean_s3 lean_s7
        have lean_s9 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)))) := by timed Eq.symm lean_s4
        have lean_s10 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0)))) := by timed Eq.trans lean_s5 lean_s9
        have lean_s11 : (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Rat.ofInt 0))) := by timed eqResolve lean_s8 lean_s10
        show False from by timed contradiction lean_s1 lean_s11
  ))))))
have lean_s1 : (Not (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))))) := by timed flipNotAnd lean_s1 [(binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0)), (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))), (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0)))) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))))) (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed congr lean_s7 lean_r28
have lean_s9 : (Eq (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))))) True) := by timed Eq.trans lean_s8 lean_r26
have lean_s10 : (Eq (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) True) := by timed Eq.trans lean_r22 lean_s9
have lean_s11 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)))) := by timed rfl
let lean_s14 := by timed congr lean_s12 lean_s13
have lean_s15 : (Eq (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))))) (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)))))) := by timed congr lean_s5 lean_s14
have lean_s16 : (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))))) := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0))))) := by permutateOr lean_s16, [2, 1, 0], (- 1)
have lean_s18 : (Eq And And) := by timed rfl
let lean_s19 := by timed congr lean_s18 lean_r18
have lean_s20 : (Eq skoX skoX) := by timed rfl
let lean_s21 := by timed flipCongrArg lean_s20 [LE.le]
have lean_s22 : (Eq skoA skoA) := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [HMul.hMul]
have lean_s24 : (Eq (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)))) := by timed congr lean_s23 lean_r10
have lean_s25 : (Eq (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA)) := by timed Eq.trans lean_s24 lean_r1
have lean_s26 : (Eq (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))) (binrel% LE.le skoX (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA))) := by timed congr lean_s21 lean_s25
have lean_s27 : (Eq (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))) := by timed Eq.trans lean_s26 lean_r2
let lean_s28 := by timed congr lean_s18 lean_s27
let lean_s29 := by timed flipCongrArg lean_s25 [LE.le]
have lean_s30 : (Eq (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX) (binrel% LE.le (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) skoA) skoX)) := by timed congr lean_s29 lean_s20
have lean_s31 : (Eq (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) := by timed Eq.trans lean_s30 lean_r6
have lean_s32 : (Eq (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0)))) := by timed flipCongrArg lean_s31 [Not]
let lean_s33 := by timed flipCongrArg lean_s32 [Or]
have lean_s34 : (Eq (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)))) := by timed flipCongrArg lean_s27 [Not]
have lean_s35 : (Eq (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0))))) := by timed congr lean_s33 lean_s34
let lean_s36 := by timed congr lean_s18 lean_s35
have lean_s37 : (Eq (Not (binrel% LE.le skoA skoX)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r14 [Not]
let lean_s38 := by timed congr lean_s18 lean_s37
have lean_s39 : (Eq (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r4 [Not]
let lean_s40 := by timed congr lean_s18 lean_s39
have lean_s41 : (Eq pi pi) := by timed rfl
let lean_s42 := by timed flipCongrArg lean_s41 [HMul.hMul]
have lean_s43 : (Eq (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed congr lean_s42 lean_r7
have lean_s44 : (Eq (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi)) := by timed Eq.trans lean_s43 lean_r3
let lean_s45 := by timed flipCongrArg lean_s44 [LE.le]
have lean_s46 : (Eq (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA) (binrel% LE.le (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi) skoA)) := by timed congr lean_s45 lean_s22
have lean_s47 : (Eq (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA) (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0))) := by timed Eq.trans lean_s46 lean_r17
have lean_s48 : (Eq (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0)))) := by timed flipCongrArg lean_s47 [Not]
let lean_s49 := by timed congr lean_s18 lean_s48
let lean_s50 := by timed flipCongrArg lean_r8 [LE.le]
have lean_s51 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi) (binrel% LE.le (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)) pi)) := by timed congr lean_s50 lean_s41
have lean_s52 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi) (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) := by timed Eq.trans lean_s51 lean_r11
have lean_s53 : (Eq (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))))) := by timed flipCongrArg lean_s52 [Not]
let lean_s54 := by timed congr lean_s18 lean_s53
let lean_s55 := by timed flipCongrArg lean_s41 [LE.le]
have lean_s56 : (Eq (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))) (binrel% LE.le pi (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000)))) := by timed congr lean_s55 lean_r12
have lean_s57 : (Eq (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) := by timed Eq.trans lean_s56 lean_r16
have lean_s58 : (Eq (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000)))))) := by timed flipCongrArg lean_s57 [Not]
let lean_s59 := by timed congr lean_s54 lean_s58
let lean_s60 := by timed congr lean_s49 lean_s59
let lean_s61 := by timed congr lean_s40 lean_s60
let lean_s62 := by timed congr lean_s38 lean_s61
let lean_s63 := by timed congr lean_s36 lean_s62
let lean_s64 := by timed congr lean_s28 lean_s63
have lean_s65 : (Eq (And (binrel% LE.le skoA (Rat.ofInt 0)) (And (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))))))))))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)) (And (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0))) (And (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))))))))))) := by timed congr lean_s19 lean_s64
have lean_s66 : (Eq (And (binrel% LE.le skoA (Rat.ofInt 0)) (And (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))) (And (Or (Not (binrel% LE.le (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000))) skoX)) (Not (binrel% LE.le skoX (binrel% HMul.hMul skoA (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2000)))))) (And (Not (binrel% LE.le skoA skoX)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (And (Not (binrel% LE.le (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) skoA)) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))))))))))) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)) (And (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0))) (And (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))))))))))) := by timed Eq.trans lean_r19 lean_s65
have lean_s67 : (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)) (And (Or (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (binrel% HMul.hMul (Int.ofNat 2000) skoX)) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) pi)) (Int.ofNat 0))) (And (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000)))))))))))) := by timed eqResolve lean_a35 lean_s66
have lean_s68 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) := by andElim lean_s67, 4
let lean_s69 := by R1 lean_s17, lean_s68, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)), [(- 1), 0]
have lean_s70 : (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)) := by andElim lean_s67, 1
let lean_s71 := by R2 lean_s69, lean_s70, (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg (Int.ofNat 2000)) skoX)) (Int.ofNat 0)), [(- 1), 0]
have lean_s72 : (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0)) := by andElim lean_s67, 0
exact (show False from by R2 lean_s71, lean_s72, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoA) (Int.ofNat 0)), [0, 0])


