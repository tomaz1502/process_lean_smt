-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 : (Eq (And (Eq skoX (Rat.ofInt 0)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)))) skoY)) (And (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoY skoX))))))) (And (Eq skoX (Rat.ofInt 0)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)))) skoY)) (And (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoY skoX)))))))) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (Not True) False) → (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)))) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Int.ofNat 0)) True) → (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) → (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% LE.le skoY skoX) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) skoX) (Int.ofNat 0))) → (Eq (binrel% LE.le (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)) pi) (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))) → (Eq (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi)) skoY) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (binrel% HMul.hMul (Int.ofNat 2) skoY)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 1000))))) → (Eq (binrel% LE.le pi (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) → (Eq (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi)) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)) (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)))) → (And (Eq skoX (Rat.ofInt 0)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)))) skoY)) (And (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoY skoX))))))) → False :=
fun lean_r0 : (Eq (And (Eq skoX (Rat.ofInt 0)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)))) skoY)) (And (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoY skoX))))))) (And (Eq skoX (Rat.ofInt 0)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)))) skoY)) (And (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoY skoX)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r1 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r3 : (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)))) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Int.ofNat 0)) True) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% LE.le skoY skoX) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)) pi) (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi)) skoY) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (binrel% HMul.hMul (Int.ofNat 2) skoY)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 1000))))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% LE.le pi (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi)) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)) (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)))) => -- THEORY_REWRITE_ARITH
fun lean_a16 : (And (Eq skoX (Rat.ofInt 0)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)))) skoY)) (And (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoY skoX))))))) => by
have lean_s0 : (Eq And And) := by timed rfl
have lean_s1 : (Eq (Eq skoX (Rat.ofInt 0)) (Eq skoX (Rat.ofInt 0))) := by timed rfl
let lean_s2 := by timed congr lean_s0 lean_s1
let lean_s3 := by timed flipCongrArg lean_r1 [HMul.hMul]
have lean_s4 : (Eq (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) := by timed rfl
have lean_s5 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)))) := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)))) := by timed Eq.trans lean_s5 lean_r15
have lean_s7 : (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000)))) := by timed Eq.trans lean_r3 lean_s6
let lean_s8 := by timed flipCongrArg lean_s7 [HAdd.hAdd]
have lean_s9 : (Eq pi pi) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s11 : (Eq (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed congr lean_s10 lean_r14
have lean_s12 : (Eq (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi)) := by timed Eq.trans lean_s11 lean_r12
have lean_s13 : (Eq (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi))) := by timed congr lean_s8 lean_s12
let lean_s14 := by timed flipCongrArg lean_s13 [LE.le]
have lean_s15 : (Eq skoY skoY) := by timed rfl
have lean_s16 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)))) skoY) (binrel% LE.le (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2000))) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) pi)) skoY)) := by timed congr lean_s14 lean_s15
have lean_s17 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)))) skoY) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (binrel% HMul.hMul (Int.ofNat 2) skoY)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 1000))))) := by timed Eq.trans lean_s16 lean_r10
have lean_s18 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)))) skoY)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (binrel% HMul.hMul (Int.ofNat 2) skoY)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 1000)))))) := by timed flipCongrArg lean_s17 [Not]
let lean_s19 := by timed congr lean_s0 lean_s18
let lean_s20 := by timed flipCongrArg lean_s9 [LE.le]
have lean_s21 : (Eq (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))) (binrel% LE.le pi (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000)))) := by timed congr lean_s20 lean_r13
have lean_s22 : (Eq (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) := by timed Eq.trans lean_s21 lean_r11
have lean_s23 : (Eq (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000)))))) := by timed flipCongrArg lean_s22 [Not]
let lean_s24 := by timed congr lean_s0 lean_s23
let lean_s25 := by timed flipCongrArg lean_r9 [LE.le]
have lean_s26 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi) (binrel% LE.le (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)) pi)) := by timed congr lean_s25 lean_s9
have lean_s27 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi) (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) := by timed Eq.trans lean_s26 lean_r8
have lean_s28 : (Eq (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))))) := by timed flipCongrArg lean_s27 [Not]
let lean_s29 := by timed congr lean_s0 lean_s28
have lean_s30 : (Eq (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r5 [Not]
let lean_s31 := by timed congr lean_s0 lean_s30
have lean_s32 : (Eq (Not (binrel% LE.le skoY skoX)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r7 [Not]
let lean_s33 := by timed congr lean_s31 lean_s32
let lean_s34 := by timed congr lean_s29 lean_s33
let lean_s35 := by timed congr lean_s24 lean_s34
let lean_s36 := by timed congr lean_s19 lean_s35
have lean_s37 : (Eq (And (Eq skoX (Rat.ofInt 0)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)))) skoY)) (And (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoY skoX))))))) (And (Eq skoX (Rat.ofInt 0)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (binrel% HMul.hMul (Int.ofNat 2) skoY)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 1000))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) (And (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) skoX) (Int.ofNat 0))))))))) := by timed congr lean_s2 lean_s36
have lean_s38 : (Eq (And (Eq skoX (Rat.ofInt 0)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2000)) (binrel% HMul.hMul pi (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2)))) skoY)) (And (Not (binrel% LE.le pi (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000)))) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000)) pi)) (And (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% LE.le skoY skoX))))))) (And (Eq skoX (Rat.ofInt 0)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (binrel% HMul.hMul (Int.ofNat 2) skoY)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 1000))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) (And (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) skoX) (Int.ofNat 0))))))))) := by timed Eq.trans lean_r0 lean_s37
have lean_s39 : (And (Eq skoX (Rat.ofInt 0)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (binrel% HMul.hMul (Int.ofNat 2) skoY)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 1000))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) (And (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) skoX) (Int.ofNat 0)))))))) := by timed eqResolve lean_a16 lean_s38
have lean_s40 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) := by andElim lean_s39, 4
have lean_s41 : (Eq (Neg.neg (Int.ofNat 1)) (Neg.neg (Int.ofNat 1))) := by timed rfl
let lean_s42 := by timed flipCongrArg lean_s41 [HMul.hMul]
have lean_s43 : (And (Eq skoX (Rat.ofInt 0)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (binrel% HMul.hMul (Int.ofNat 2) skoY)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 1000))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) pi) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))))) (And (Not (binrel% GE.ge pi (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000)))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) skoX) (Int.ofNat 0)))))))) := by timed eqResolve lean_a16 lean_s38
have lean_s44 : (Eq skoX (Rat.ofInt 0)) := by andElim lean_s43, 0
have lean_s45 : (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 0))) := by timed congr lean_s42 lean_s44
let lean_s46 := by timed flipCongrArg lean_s45 [GE.ge]
have lean_s47 : (Eq (Int.ofNat 0) (Int.ofNat 0)) := by timed rfl
have lean_s48 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 0)) (Int.ofNat 0))) := by timed congr lean_s46 lean_s47
have lean_s49 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 0)) (Int.ofNat 0)))) := by timed flipCongrArg lean_s48 [Not]
let lean_s50 := by timed flipCongrArg lean_r6 [GE.ge]
have lean_s51 : (Eq (Int.ofNat 0) (Int.ofNat 0)) := by timed rfl
have lean_s52 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 0)) (Int.ofNat 0)) (binrel% GE.ge (Rat.ofInt 0) (Int.ofNat 0))) := by timed congr lean_s50 lean_s51
have lean_s53 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 0)) (Int.ofNat 0)) True) := by timed Eq.trans lean_s52 lean_r4
have lean_s54 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 0)) (Int.ofNat 0))) (Not True)) := by timed flipCongrArg lean_s53 [Not]
have lean_s55 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 0)) (Int.ofNat 0))) False) := by timed Eq.trans lean_s54 lean_r2
have lean_s56 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) False) := by timed Eq.trans lean_s49 lean_s55
exact (show False from by timed eqResolve lean_s40 lean_s56)


