-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoX : Rat}

theorem th0 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (Eq (binrel% LT.lt skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoY) skoY) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) True) → (Eq (binrel% GT.gt skoY (Rat.ofInt 0)) (Not (binrel% LE.le skoY (Rat.ofInt 0)))) → (Eq (Not True) False) → (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) → (Eq (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (Rat.ofInt 0)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) → (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) → (Eq (binrel% LE.le skoY (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))) → (Eq (binrel% LE.le skoZ (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Int.ofNat 0))) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) → (Eq (binrel% LE.le (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoZ skoX)) (Int.ofNat 1))) → (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) skoY)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (Rat.ofInt 0))) (And (Not (binrel% LE.le skoY (Rat.ofInt 0))) (Not (binrel% LE.le skoX (Rat.ofInt 0))))))) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) skoY)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (Rat.ofInt 0))) (And (Not (binrel% LE.le skoY (Rat.ofInt 0))) (Not (binrel% LE.le skoX (Rat.ofInt 0)))))))) → (Eq (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) (Rat.ofInt 0)) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) → (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (Not (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))))) (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) → (Eq (binrel% LE.le (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) skoY) (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) → (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) skoY)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (Rat.ofInt 0))) (And (Not (binrel% LE.le skoY (Rat.ofInt 0))) (Not (binrel% LE.le skoX (Rat.ofInt 0))))))) → False :=
fun lean_r0 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r1 : (Eq (binrel% LT.lt skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoY) skoY) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) True) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% GT.gt skoY (Rat.ofInt 0)) (Not (binrel% LE.le skoY (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq (binrel% LE.le skoX (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (Rat.ofInt 0)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (binrel% LE.le skoY (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (binrel% LE.le skoZ (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))))) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoZ skoX)) (Int.ofNat 1))) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) skoY)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (Rat.ofInt 0))) (And (Not (binrel% LE.le skoY (Rat.ofInt 0))) (Not (binrel% LE.le skoX (Rat.ofInt 0))))))) (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) skoY)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (Rat.ofInt 0))) (And (Not (binrel% LE.le skoY (Rat.ofInt 0))) (Not (binrel% LE.le skoX (Rat.ofInt 0)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r26 : (Eq (Not (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))))) (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq (binrel% LE.le (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) skoY) (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) => -- THEORY_REWRITE_ARITH
fun lean_a28 : (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) skoY)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (Rat.ofInt 0))) (And (Not (binrel% LE.le skoY (Rat.ofInt 0))) (Not (binrel% LE.le skoX (Rat.ofInt 0))))))) => by
have lean_s0 : (Or (Not (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))))) (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0)))) False)) :=
  (scope (fun lean_a29 : (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) =>
    (scope (fun lean_a30 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))) =>
      have lean_s0 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := by timed trueElim lean_r0
      have lean_s1 : (Eq (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) (binrel% LT.lt skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by timed Eq.symm lean_r1
      have lean_s2 : (binrel% LT.lt skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed eqResolve lean_a29 lean_s1
      have lean_s3 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LT.lt skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))))) := by arithMulPos [skoY, (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))), (Rat.ofInt 1)], 0
      have lean_s5 : (binrel% LT.lt (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r25
      have lean_s7 : (Eq (Not (binrel% LE.le skoY (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0)))) := by timed flipCongrArg lean_r12 [Not]
      have lean_s8 : (Eq (binrel% GT.gt skoY (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0)))) := by timed Eq.trans lean_r7 lean_s7
      have lean_s9 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))) (binrel% GT.gt skoY (Rat.ofInt 0))) := by timed Eq.symm lean_s8
      have lean_s10 : (binrel% GT.gt skoY (Rat.ofInt 0)) := by timed eqResolve lean_a30 lean_s9
      have lean_s11 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoY (Rat.ofInt 0))) := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoY (Rat.ofInt 0))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by arithMulNeg [skoY, (Rat.ofInt 0), (Neg.neg (Rat.ofInt 1))], 2
      have lean_s13 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r2 [HAdd.hAdd]
      have lean_s16 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)) (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) := by timed congr lean_s15 lean_r3
      have lean_s17 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)) (Rat.ofInt 0)) := by timed Eq.trans lean_s16 lean_r18
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r4 [HAdd.hAdd]
      have lean_s20 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (Rat.ofInt 0))) := by timed congr lean_s19 lean_r5
      have lean_s21 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed Eq.trans lean_s20 lean_r10
      have lean_s22 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) True) := by timed Eq.trans lean_s22 lean_r6
      have lean_s24 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) (Not True)) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0))))) False) := by timed Eq.trans lean_s24 lean_r8
      have lean_s26 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoY) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoY)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 0)))) False) := by timed Eq.trans lean_r14 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))))) := by timed flipNotAnd lean_s1 [(Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))), (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0)))]
let lean_s3 := by timed flipCongrArg lean_r26 [Or]
have lean_s4 : (Eq (Or (Not (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))))) (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))))) (Or (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0)))) := by timed congr lean_s3 lean_r19
have lean_s5 : (Or (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))) := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
let lean_s7 := by timed flipCongrArg lean_r24 [HMul.hMul]
have lean_s8 : (Eq (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) := by timed rfl
have lean_s9 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed congr lean_s7 lean_s8
have lean_s10 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed Eq.trans lean_s9 lean_r22
have lean_s11 : (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed Eq.trans lean_r11 lean_s10
let lean_s12 := by timed flipCongrArg lean_s11 [LE.le]
have lean_s13 : (Eq skoY skoY) := by timed rfl
have lean_s14 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) skoY) (binrel% LE.le (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) skoY)) := by timed congr lean_s12 lean_s13
have lean_s15 : (Eq (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) skoY) (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by timed Eq.trans lean_s14 lean_r27
have lean_s16 : (Eq (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) skoY)) (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))))) := by timed flipCongrArg lean_s15 [Not]
let lean_s17 := by timed congr lean_s6 lean_s16
have lean_s18 : (Eq (Rat.ofInt 1) (Rat.ofInt 1)) := by timed rfl
have lean_s19 : (Eq skoX skoX) := by timed rfl
let lean_s20 := by timed flipCongrArg lean_s19 [HMul.hMul]
have lean_s21 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s20 lean_r24
have lean_s22 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) := by timed Eq.trans lean_s21 lean_r16
let lean_s23 := by timed flipCongrArg lean_s13 [HMul.hMul]
have lean_s24 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s23 lean_r24
have lean_s25 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) := by timed Eq.trans lean_s24 lean_r23
let lean_s26 := by timed congrHAdd lean_s22 lean_s25
have lean_s27 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) := by timed congrHAdd lean_s18 lean_s26
have lean_s28 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_s27 lean_r20
have lean_s29 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)))) := by timed Eq.trans lean_r21 lean_s28
let lean_s30 := by timed flipCongrArg lean_s29 [LE.le]
have lean_s31 : (Eq skoZ skoZ) := by timed rfl
have lean_s32 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (binrel% LE.le (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) skoZ)) := by timed congr lean_s30 lean_s31
have lean_s33 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoZ skoX)) (Int.ofNat 1))) := by timed Eq.trans lean_s32 lean_r15
have lean_s34 : (Eq (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoZ skoX)) (Int.ofNat 1)))) := by timed flipCongrArg lean_s33 [Not]
let lean_s35 := by timed congr lean_s6 lean_s34
have lean_s36 : (Eq (Not (binrel% LE.le skoZ (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Int.ofNat 0)))) := by timed flipCongrArg lean_r13 [Not]
let lean_s37 := by timed congr lean_s6 lean_s36
have lean_s38 : (Eq (Not (binrel% LE.le skoY (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0)))) := by timed flipCongrArg lean_r12 [Not]
let lean_s39 := by timed congr lean_s6 lean_s38
have lean_s40 : (Eq (Not (binrel% LE.le skoX (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))) := by timed flipCongrArg lean_r9 [Not]
let lean_s41 := by timed congr lean_s39 lean_s40
let lean_s42 := by timed congr lean_s37 lean_s41
let lean_s43 := by timed congr lean_s35 lean_s42
have lean_s44 : (Eq (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) skoY)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (Rat.ofInt 0))) (And (Not (binrel% LE.le skoY (Rat.ofInt 0))) (Not (binrel% LE.le skoX (Rat.ofInt 0))))))) (And (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoZ skoX)) (Int.ofNat 1))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))))))) := by timed congr lean_s17 lean_s43
have lean_s45 : (Eq (And (Not (binrel% LE.le (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) skoY)) (And (Not (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ)) (And (Not (binrel% LE.le skoZ (Rat.ofInt 0))) (And (Not (binrel% LE.le skoY (Rat.ofInt 0))) (Not (binrel% LE.le skoX (Rat.ofInt 0))))))) (And (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoZ skoX)) (Int.ofNat 1))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0)))))))) := by timed Eq.trans lean_r17 lean_s44
have lean_s46 : (And (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoZ skoX)) (Int.ofNat 1))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Int.ofNat 0))))))) := by timed eqResolve lean_a28 lean_s45
have lean_s47 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0))) := by andElim lean_s46, 3
let lean_s48 := by R1 lean_s5, lean_s47, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Int.ofNat 0)), [(- 1), 0]
have lean_s49 : (Not (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by andElim lean_s46, 0
exact (show False from by R1 lean_s48, lean_s49, (binrel% GE.ge skoY (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))), [0, 0])


