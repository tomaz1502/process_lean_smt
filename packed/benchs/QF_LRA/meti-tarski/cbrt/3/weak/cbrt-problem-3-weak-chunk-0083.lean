-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoX : Rat}

theorem th0 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) → (Eq (binrel% LE.le skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) → (Eq (binrel% HAdd.hAdd skoX (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) → (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) → (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) → (Eq (binrel% LE.le (Rat.ofInt 15) skoZ) (binrel% GE.ge skoZ (Int.ofNat 15))) → (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) → (Eq (binrel% LE.le (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HAdd.hAdd skoZ skoY)) (Int.ofNat 1))) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))))) → (Eq (binrel% LE.le skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) → (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% LE.le (Rat.ofInt 15) skoY) (binrel% GE.ge skoY (Int.ofNat 15))) → (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) → (Eq (binrel% LE.le skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) → (Eq (binrel% LE.le (Rat.ofInt 15) skoX) (binrel% GE.ge skoX (Int.ofNat 15))) → (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) → (Eq (And (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (And (binrel% LE.le skoX (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2))) (And (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le (Rat.ofInt 15) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 15) skoY)) (Not (binrel% LE.le (Rat.ofInt 15) skoX))))))))) (And (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (And (binrel% LE.le skoX (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2))) (And (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le (Rat.ofInt 15) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 15) skoY)) (Not (binrel% LE.le (Rat.ofInt 15) skoX)))))))))) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) → (Eq (Not True) False) → (Eq (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 11) (Int.ofNat 20)))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoX) skoX) → (Eq (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 11) (Int.ofNat 20)))) True) → (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (And (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (And (binrel% LE.le skoX (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2))) (And (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le (Rat.ofInt 15) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 15) skoY)) (Not (binrel% LE.le (Rat.ofInt 15) skoX))))))))) → False :=
fun lean_r0 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r1 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% LE.le skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% HAdd.hAdd skoX (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% LE.le (Rat.ofInt 15) skoZ) (binrel% GE.ge skoZ (Int.ofNat 15))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HAdd.hAdd skoZ skoY)) (Int.ofNat 1))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (binrel% LE.le skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% LE.le (Rat.ofInt 15) skoY) (binrel% GE.ge skoY (Int.ofNat 15))) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (binrel% LE.le skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (binrel% LE.le (Rat.ofInt 15) skoX) (binrel% GE.ge skoX (Int.ofNat 15))) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))))) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (And (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (And (binrel% LE.le skoX (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2))) (And (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le (Rat.ofInt 15) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 15) skoY)) (Not (binrel% LE.le (Rat.ofInt 15) skoX))))))))) (And (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (And (binrel% LE.le skoX (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2))) (And (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le (Rat.ofInt 15) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 15) skoY)) (Not (binrel% LE.le (Rat.ofInt 15) skoX)))))))))) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 11) (Int.ofNat 20)))) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) skoX) skoX) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 11) (Int.ofNat 20)))) True) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_a30 : (And (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (And (binrel% LE.le skoX (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2))) (And (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le (Rat.ofInt 15) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 15) skoY)) (Not (binrel% LE.le (Rat.ofInt 15) skoX))))))))) => by
have lean_s0 : (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))))) (Or (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) False)) :=
  (scope (fun lean_a31 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) =>
    (scope (fun lean_a32 : (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) =>
      have lean_s0 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := by timed trueElim lean_r0
      have lean_s1 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (binrel% LE.le skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by timed Eq.symm lean_r12
      have lean_s2 : (binrel% LE.le skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed eqResolve lean_a32 lean_s1
      have lean_s3 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (binrel% LE.le skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))))) := by arithMulPos [skoX, (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))), (Rat.ofInt 1)], 1
      have lean_s5 : (binrel% LE.le (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := by timed trueElim lean_r29
      have lean_s7 : (Eq (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))))) := by timed flipCongrArg lean_r9 [Not]
      have lean_s8 : (Eq (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))))) := by timed Eq.trans lean_r27 lean_s7
      have lean_s9 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) := by timed Eq.symm lean_s8
      have lean_s10 : (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))) := by timed eqResolve lean_a31 lean_s9
      have lean_s11 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GT.gt skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) := by arithMulNeg [skoX, (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)), (Neg.neg (Rat.ofInt 1))], 2
      have lean_s13 : (binrel% LT.lt (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r26 [HAdd.hAdd]
      have lean_s16 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd skoX (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX))) := by timed congr lean_s15 lean_r25
      have lean_s17 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (Rat.ofInt 0)) := by timed Eq.trans lean_s16 lean_r4
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r19 [HAdd.hAdd]
      have lean_s20 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) (binrel% HAdd.hAdd (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) := by timed congr lean_s19 lean_r2
      have lean_s21 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 11) (Int.ofNat 20)))) := by timed Eq.trans lean_s20 lean_r24
      have lean_s22 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (binrel% GE.ge (Rat.ofInt 0) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 11) (Int.ofNat 20))))) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) True) := by timed Eq.trans lean_s22 lean_r28
      have lean_s24 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))))) (Not True)) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))))) False) := by timed Eq.trans lean_s24 lean_r23
      have lean_s26 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) skoX) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) skoX)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) False) := by timed Eq.trans lean_r11 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by timed flipNotAnd lean_s1 [(Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))), (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))]
let lean_s3 := by timed flipCongrArg lean_r18 [Or]
have lean_s4 : (Eq (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by timed rfl
have lean_s5 : (Eq (Or (Not (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))))) := by timed congr lean_s3 lean_s4
have lean_s6 : (Or (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
have lean_s8 : (Eq (Rat.ofInt 1) (Rat.ofInt 1)) := by timed rfl
have lean_s9 : (Eq skoX skoX) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s11 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s10 lean_r13
have lean_s12 : (Eq (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX)) := by timed Eq.trans lean_s11 lean_r8
have lean_s13 : (Eq skoY skoY) := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [HMul.hMul]
have lean_s15 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s14 lean_r13
have lean_s16 : (Eq (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)) := by timed Eq.trans lean_s15 lean_r15
let lean_s17 := by timed congrHAdd lean_s12 lean_s16
have lean_s18 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) := by timed congrHAdd lean_s8 lean_s17
have lean_s19 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HAdd.hAdd (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1))))) (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) := by timed Eq.trans lean_s18 lean_r22
have lean_s20 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY)))) := by timed Eq.trans lean_r20 lean_s19
let lean_s21 := by timed flipCongrArg lean_s20 [LE.le]
have lean_s22 : (Eq skoZ skoZ) := by timed rfl
have lean_s23 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (binrel% LE.le (binrel% HAdd.hAdd (Int.ofNat 1) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY))) skoZ)) := by timed congr lean_s21 lean_s22
have lean_s24 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HAdd.hAdd skoZ skoY)) (Int.ofNat 1))) := by timed Eq.trans lean_s23 lean_r10
let lean_s25 := by timed congr lean_s7 lean_s24
let lean_s26 := by timed flipCongrArg lean_s9 [LE.le]
let lean_s27 := by timed flipCongrArg lean_r13 [HMul.hMul]
have lean_s28 : (Eq (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) := by timed rfl
have lean_s29 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed congr lean_s27 lean_s28
have lean_s30 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed Eq.trans lean_s29 lean_r1
have lean_s31 : (Eq (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed Eq.trans lean_r6 lean_s30
have lean_s32 : (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2))) (binrel% LE.le skoX (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))))) := by timed congr lean_s26 lean_s31
have lean_s33 : (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)))) := by timed Eq.trans lean_s32 lean_r12
let lean_s34 := by timed congr lean_s7 lean_s33
let lean_s35 := by timed flipCongrArg lean_s22 [LE.le]
have lean_s36 : (Eq (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20))) (binrel% LE.le skoZ (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) := by timed congr lean_s35 lean_r5
have lean_s37 : (Eq (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) := by timed Eq.trans lean_s36 lean_r16
have lean_s38 : (Eq (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))))) := by timed flipCongrArg lean_s37 [Not]
let lean_s39 := by timed congr lean_s7 lean_s38
let lean_s40 := by timed flipCongrArg lean_s13 [LE.le]
have lean_s41 : (Eq (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20))) (binrel% LE.le skoY (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) := by timed congr lean_s40 lean_r5
have lean_s42 : (Eq (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) := by timed Eq.trans lean_s41 lean_r3
have lean_s43 : (Eq (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))))) := by timed flipCongrArg lean_s42 [Not]
let lean_s44 := by timed congr lean_s7 lean_s43
let lean_s45 := by timed flipCongrArg lean_s9 [LE.le]
have lean_s46 : (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20))) (binrel% LE.le skoX (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))) := by timed congr lean_s45 lean_r5
have lean_s47 : (Eq (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) := by timed Eq.trans lean_s46 lean_r9
have lean_s48 : (Eq (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))))) := by timed flipCongrArg lean_s47 [Not]
let lean_s49 := by timed congr lean_s7 lean_s48
have lean_s50 : (Eq (Not (binrel% LE.le (Rat.ofInt 15) skoZ)) (Not (binrel% GE.ge skoZ (Int.ofNat 15)))) := by timed flipCongrArg lean_r7 [Not]
let lean_s51 := by timed congr lean_s7 lean_s50
have lean_s52 : (Eq (Not (binrel% LE.le (Rat.ofInt 15) skoY)) (Not (binrel% GE.ge skoY (Int.ofNat 15)))) := by timed flipCongrArg lean_r14 [Not]
let lean_s53 := by timed congr lean_s7 lean_s52
have lean_s54 : (Eq (Not (binrel% LE.le (Rat.ofInt 15) skoX)) (Not (binrel% GE.ge skoX (Int.ofNat 15)))) := by timed flipCongrArg lean_r17 [Not]
let lean_s55 := by timed congr lean_s53 lean_s54
let lean_s56 := by timed congr lean_s51 lean_s55
let lean_s57 := by timed congr lean_s49 lean_s56
let lean_s58 := by timed congr lean_s44 lean_s57
let lean_s59 := by timed congr lean_s39 lean_s58
let lean_s60 := by timed congr lean_s34 lean_s59
have lean_s61 : (Eq (And (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (And (binrel% LE.le skoX (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2))) (And (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le (Rat.ofInt 15) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 15) skoY)) (Not (binrel% LE.le (Rat.ofInt 15) skoX))))))))) (And (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HAdd.hAdd skoZ skoY)) (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (And (Not (binrel% GE.ge skoZ (Int.ofNat 15))) (And (Not (binrel% GE.ge skoY (Int.ofNat 15))) (Not (binrel% GE.ge skoX (Int.ofNat 15))))))))))) := by timed congr lean_s25 lean_s60
have lean_s62 : (Eq (And (binrel% LE.le (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Rat.ofInt 1) (binrel% HMul.hMul skoX (Neg.neg (Rat.ofInt 1)))) (binrel% HMul.hMul skoY (Neg.neg (Rat.ofInt 1)))) skoZ) (And (binrel% LE.le skoX (binrel% HDiv.hDiv (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 2))) (And (Not (binrel% LE.le skoZ (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoY (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le skoX (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 20)))) (And (Not (binrel% LE.le (Rat.ofInt 15) skoZ)) (And (Not (binrel% LE.le (Rat.ofInt 15) skoY)) (Not (binrel% LE.le (Rat.ofInt 15) skoX))))))))) (And (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HAdd.hAdd skoZ skoY)) (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (And (Not (binrel% GE.ge skoZ (Int.ofNat 15))) (And (Not (binrel% GE.ge skoY (Int.ofNat 15))) (Not (binrel% GE.ge skoX (Int.ofNat 15))))))))))) := by timed Eq.trans lean_r21 lean_s61
have lean_s63 : (And (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HAdd.hAdd skoZ skoY)) (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoZ) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoY) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) (And (Not (binrel% GE.ge skoZ (Int.ofNat 15))) (And (Not (binrel% GE.ge skoY (Int.ofNat 15))) (Not (binrel% GE.ge skoX (Int.ofNat 15)))))))))) := by timed eqResolve lean_a30 lean_s62
have lean_s64 : (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20))))) := by andElim lean_s63, 4
let lean_s65 := by R1 lean_s6, lean_s64, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 20)))), [(- 1), 0]
have lean_s66 : (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) := by andElim lean_s63, 1
exact (show False from by R2 lean_s65, lean_s66, (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) skoX) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))), [0, 0])


