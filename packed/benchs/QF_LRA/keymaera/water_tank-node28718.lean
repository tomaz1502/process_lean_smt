-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {stuscore2dollarskuscore66 : Rat}
variable {yuscore2dollarskuscore66 : Rat}
variable {xuscore2dollarskuscore56 : Rat}
variable {xuscore2dollarskuscore56 : Rat}
variable {stuscore2dollarskuscore66 : Rat}
variable {yuscore2dollarskuscore66 : Rat}

theorem th0 : (Eq (And (And (And (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (Eq stuscore2dollarskuscore66 (Rat.ofInt 2))) (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore66 (Rat.ofInt 12))) (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56))) (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (And (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (And (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 1)) (And (binrel% LE.le yuscore2dollarskuscore66 (Rat.ofInt 12)) (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56))))))) → (Eq (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 1)) (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 1))) → (Eq (binrel% LE.le yuscore2dollarskuscore66 (Rat.ofInt 12)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66) (Neg.neg (Int.ofNat 12)))) → (Eq (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Int.ofNat 10) xuscore2dollarskuscore56)) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore56 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66)) (Neg.neg (Int.ofNat 10)))) → (Eq (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 5)) (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 5))) → (Eq (binrel% GE.ge (Rat.ofInt 5) (Int.ofNat 5)) True) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56) (binrel% HAdd.hAdd (Int.ofNat 10) xuscore2dollarskuscore56)) → (Eq (Not True) False) → (Not (Implies (And (And (And (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (Eq stuscore2dollarskuscore66 (Rat.ofInt 2))) (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore66 (Rat.ofInt 12))) (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56))) (Or (Eq stuscore2dollarskuscore66 (Rat.ofInt 3)) (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 5))))) → False :=
fun lean_r0 : (Eq (And (And (And (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (Eq stuscore2dollarskuscore66 (Rat.ofInt 2))) (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore66 (Rat.ofInt 12))) (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56))) (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (And (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (And (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 1)) (And (binrel% LE.le yuscore2dollarskuscore66 (Rat.ofInt 12)) (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56))))))) => -- THEORY_REWRITE_BOOL
fun lean_r1 : (Eq (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 1)) (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 1))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% LE.le yuscore2dollarskuscore66 (Rat.ofInt 12)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66) (Neg.neg (Int.ofNat 12)))) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Int.ofNat 10) xuscore2dollarskuscore56)) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore56 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66)) (Neg.neg (Int.ofNat 10)))) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 5)) (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 5))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% GE.ge (Rat.ofInt 5) (Int.ofNat 5)) True) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56) (binrel% HAdd.hAdd (Int.ofNat 10) xuscore2dollarskuscore56)) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_a8 : (Not (Implies (And (And (And (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (Eq stuscore2dollarskuscore66 (Rat.ofInt 2))) (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore66 (Rat.ofInt 12))) (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56))) (Or (Eq stuscore2dollarskuscore66 (Rat.ofInt 3)) (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 5))))) => by
have lean_s0 : (Eq And And) := by timed rfl
have lean_s1 : (Eq (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (Eq yuscore2dollarskuscore66 (Rat.ofInt 5))) := by timed rfl
let lean_s2 := by timed congr lean_s0 lean_s1
have lean_s3 : (Eq (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (Eq stuscore2dollarskuscore66 (Rat.ofInt 2))) := by timed rfl
let lean_s4 := by timed congr lean_s0 lean_s3
let lean_s5 := by timed congr lean_s0 lean_r1
let lean_s6 := by timed congr lean_s0 lean_r2
have lean_s7 : (Eq yuscore2dollarskuscore66 yuscore2dollarskuscore66) := by timed rfl
let lean_s8 := by timed flipCongrArg lean_s7 [LE.le]
have lean_s9 : (Eq (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56)) (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Int.ofNat 10) xuscore2dollarskuscore56))) := by timed congr lean_s8 lean_r6
have lean_s10 : (Eq (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56)) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore56 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66)) (Neg.neg (Int.ofNat 10)))) := by timed Eq.trans lean_s9 lean_r3
let lean_s11 := by timed congr lean_s6 lean_s10
let lean_s12 := by timed congr lean_s5 lean_s11
let lean_s13 := by timed congr lean_s4 lean_s12
have lean_s14 : (Eq (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (And (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (And (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 1)) (And (binrel% LE.le yuscore2dollarskuscore66 (Rat.ofInt 12)) (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56)))))) (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (And (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (And (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66) (Neg.neg (Int.ofNat 12))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore56 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66)) (Neg.neg (Int.ofNat 10)))))))) := by timed congr lean_s2 lean_s13
have lean_s15 : (Eq (And (And (And (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (Eq stuscore2dollarskuscore66 (Rat.ofInt 2))) (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore66 (Rat.ofInt 12))) (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56))) (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (And (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (And (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66) (Neg.neg (Int.ofNat 12))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore56 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66)) (Neg.neg (Int.ofNat 10)))))))) := by timed Eq.trans lean_r0 lean_s14
let lean_s16 := by timed flipCongrArg lean_s15 [Implies]
have lean_s17 : (Eq (Eq stuscore2dollarskuscore66 (Rat.ofInt 3)) (Eq stuscore2dollarskuscore66 (Rat.ofInt 3))) := by timed rfl
let lean_s18 := by timed flipCongrArg lean_s17 [Or]
have lean_s19 : (Eq (Or (Eq stuscore2dollarskuscore66 (Rat.ofInt 3)) (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 5))) (Or (Eq stuscore2dollarskuscore66 (Rat.ofInt 3)) (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 5)))) := by timed congr lean_s18 lean_r4
have lean_s20 : (Eq (Implies (And (And (And (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (Eq stuscore2dollarskuscore66 (Rat.ofInt 2))) (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore66 (Rat.ofInt 12))) (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56))) (Or (Eq stuscore2dollarskuscore66 (Rat.ofInt 3)) (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 5)))) (Implies (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (And (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (And (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66) (Neg.neg (Int.ofNat 12))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore56 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66)) (Neg.neg (Int.ofNat 10))))))) (Or (Eq stuscore2dollarskuscore66 (Rat.ofInt 3)) (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 5))))) := by timed congr lean_s16 lean_s19
have lean_s21 : (Eq (Not (Implies (And (And (And (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (Eq stuscore2dollarskuscore66 (Rat.ofInt 2))) (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore66 (Rat.ofInt 12))) (binrel% LE.le yuscore2dollarskuscore66 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore56))) (Or (Eq stuscore2dollarskuscore66 (Rat.ofInt 3)) (binrel% GE.ge yuscore2dollarskuscore66 (Rat.ofInt 5))))) (Not (Implies (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (And (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (And (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66) (Neg.neg (Int.ofNat 12))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore56 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66)) (Neg.neg (Int.ofNat 10))))))) (Or (Eq stuscore2dollarskuscore66 (Rat.ofInt 3)) (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 5)))))) := by timed flipCongrArg lean_s20 [Not]
have lean_s22 : (Not (Implies (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (And (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (And (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66) (Neg.neg (Int.ofNat 12))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore56 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66)) (Neg.neg (Int.ofNat 10))))))) (Or (Eq stuscore2dollarskuscore66 (Rat.ofInt 3)) (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 5))))) := by timed eqResolve lean_a8 lean_s21
have lean_s23 : (Not (Or (Eq stuscore2dollarskuscore66 (Rat.ofInt 3)) (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 5)))) := by timed notImplies2 lean_s22
have lean_s24 : (Not (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 5))) := by notOrElim lean_s23, 1
have lean_s25 : (Not (Implies (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (And (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (And (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66) (Neg.neg (Int.ofNat 12))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore56 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66)) (Neg.neg (Int.ofNat 10))))))) (Or (Eq stuscore2dollarskuscore66 (Rat.ofInt 3)) (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 5))))) := by timed eqResolve lean_a8 lean_s21
have lean_s26 : (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (And (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (And (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66) (Neg.neg (Int.ofNat 12))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore56 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66)) (Neg.neg (Int.ofNat 10))))))) := by timed notImplies1 lean_s25
have lean_s27 : (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) := by andElim lean_s26, 1
have lean_s28 : (And (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) (And (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (And (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66) (Neg.neg (Int.ofNat 12))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore56 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore66)) (Neg.neg (Int.ofNat 10))))))) := by timed notImplies1 lean_s25
have lean_s29 : (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) := by andElim lean_s28, 0
have lean_s30 : (And (Eq stuscore2dollarskuscore66 (Rat.ofInt 2)) (Eq yuscore2dollarskuscore66 (Rat.ofInt 5))) := by timed And.intro lean_s27 lean_s29
have lean_s31 : (Eq yuscore2dollarskuscore66 (Rat.ofInt 5)) := by andElim lean_s30, 1
let lean_s32 := by timed flipCongrArg lean_s31 [GE.ge]
have lean_s33 : (Eq (Int.ofNat 5) (Int.ofNat 5)) := by timed rfl
have lean_s34 : (Eq (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 5)) (binrel% GE.ge (Rat.ofInt 5) (Int.ofNat 5))) := by timed congr lean_s32 lean_s33
have lean_s35 : (Eq (Not (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 5))) (Not (binrel% GE.ge (Rat.ofInt 5) (Int.ofNat 5)))) := by timed flipCongrArg lean_s34 [Not]
have lean_s36 : (Eq (Not (binrel% GE.ge (Rat.ofInt 5) (Int.ofNat 5))) (Not True)) := by timed flipCongrArg lean_r5 [Not]
have lean_s37 : (Eq (Not (binrel% GE.ge (Rat.ofInt 5) (Int.ofNat 5))) False) := by timed Eq.trans lean_s36 lean_r7
have lean_s38 : (Eq (Not (binrel% GE.ge yuscore2dollarskuscore66 (Int.ofNat 5))) False) := by timed Eq.trans lean_s35 lean_s37
exact (show False from by timed eqResolve lean_s24 lean_s38)


