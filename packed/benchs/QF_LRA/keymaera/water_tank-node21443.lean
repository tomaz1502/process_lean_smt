-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {stuscore2dollarskuscore40 : Rat}
variable {xuscore2dollarskuscore32 : Rat}
variable {yuscore2dollarskuscore40 : Rat}
variable {stuscore2dollarskuscore40 : Rat}
variable {xuscore2dollarskuscore32 : Rat}
variable {yuscore2dollarskuscore40 : Rat}

theorem th0 : (Eq (And (And (And (And (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (Eq stuscore2dollarskuscore40 (Rat.ofInt 0))) (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12))) (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)))) (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32))) (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1)) (And (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12)) (And (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32))) (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32)))))))) → (Eq (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1)) (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1))) → (Eq (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)) (binrel% HAdd.hAdd (Rat.ofInt 5) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HMul.hMul (Int.ofNat 2) xuscore2dollarskuscore32)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32)) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 5) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32)) (binrel% HAdd.hAdd (Int.ofNat 5) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32))) → (Eq (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12)))) → (Eq (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Int.ofNat 5) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) → (Eq (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Int.ofNat 10) xuscore2dollarskuscore32)) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10)))) → (Eq (Eq (Rat.ofInt 10) (Rat.ofInt 10)) True) → (Eq (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 10)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 10)))) → (Eq (Not True) False) → (Eq (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32) (binrel% HMul.hMul (Int.ofNat 2) xuscore2dollarskuscore32)) → (Eq (Implies (And (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0))) True) True) → (Eq (binrel% GE.ge (Neg.neg (Rat.ofInt 10)) (Neg.neg (Int.ofNat 10))) True) → (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Rat.ofInt 10))) → (Eq (binrel% GE.ge (Neg.neg (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) True) → (Eq (And True (And True (And True (And True (And (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0))))))) (And (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0)))) → (Eq (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10)) (Rat.ofInt 5)) → (Eq (Eq (Rat.ofInt 0) (Rat.ofInt 0)) True) → (Eq (binrel% GE.ge (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 10)) xuscore2dollarskuscore32) (Neg.neg (Int.ofNat 10))) (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0))) → (Eq (binrel% HAdd.hAdd xuscore2dollarskuscore32 (Rat.ofInt 5)) (binrel% HAdd.hAdd (Int.ofNat 5) xuscore2dollarskuscore32)) → (Eq (binrel% HAdd.hAdd xuscore2dollarskuscore32 (Neg.neg (Rat.ofInt 10))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 10)) xuscore2dollarskuscore32)) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32) (binrel% HAdd.hAdd (Int.ofNat 10) xuscore2dollarskuscore32)) → (Eq (binrel% GE.ge (binrel% HAdd.hAdd (Int.ofNat 5) xuscore2dollarskuscore32) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))))) → (Eq (binrel% GE.ge (Rat.ofInt 10) (Int.ofNat 1)) True) → (Not (Implies (And (And (And (And (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (Eq stuscore2dollarskuscore40 (Rat.ofInt 0))) (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12))) (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)))) (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 10)))) → False :=
fun lean_r0 : (Eq (And (And (And (And (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (Eq stuscore2dollarskuscore40 (Rat.ofInt 0))) (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12))) (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)))) (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32))) (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1)) (And (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12)) (And (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32))) (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32)))))))) => -- THEORY_REWRITE_BOOL
fun lean_r1 : (Eq (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1)) (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1))) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)) (binrel% HAdd.hAdd (Rat.ofInt 5) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)))) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HMul.hMul (Int.ofNat 2) xuscore2dollarskuscore32)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32)) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 5) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32)) (binrel% HAdd.hAdd (Int.ofNat 5) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12)))) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Int.ofNat 5) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Int.ofNat 10) xuscore2dollarskuscore32)) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10)))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (Eq (Rat.ofInt 10) (Rat.ofInt 10)) True) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 10)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 10)))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32) (binrel% HMul.hMul (Int.ofNat 2) xuscore2dollarskuscore32)) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (Implies (And (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0))) True) True) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq (binrel% GE.ge (Neg.neg (Rat.ofInt 10)) (Neg.neg (Int.ofNat 10))) True) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Rat.ofInt 10))) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (binrel% GE.ge (Neg.neg (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) True) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (And True (And True (And True (And True (And (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0))))))) (And (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0)))) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10)) (Rat.ofInt 5)) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (Eq (Rat.ofInt 0) (Rat.ofInt 0)) True) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 10)) xuscore2dollarskuscore32) (Neg.neg (Int.ofNat 10))) (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (binrel% HAdd.hAdd xuscore2dollarskuscore32 (Rat.ofInt 5)) (binrel% HAdd.hAdd (Int.ofNat 5) xuscore2dollarskuscore32)) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (binrel% HAdd.hAdd xuscore2dollarskuscore32 (Neg.neg (Rat.ofInt 10))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 10)) xuscore2dollarskuscore32)) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32) (binrel% HAdd.hAdd (Int.ofNat 10) xuscore2dollarskuscore32)) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (Int.ofNat 5) xuscore2dollarskuscore32) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))))) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq (binrel% GE.ge (Rat.ofInt 10) (Int.ofNat 1)) True) => -- THEORY_REWRITE_ARITH
fun lean_a25 : (Not (Implies (And (And (And (And (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (Eq stuscore2dollarskuscore40 (Rat.ofInt 0))) (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12))) (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)))) (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 10)))) => by
have lean_s0 : (Eq And And) := by timed rfl
have lean_s1 : (Eq (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (Eq yuscore2dollarskuscore40 (Rat.ofInt 10))) := by timed rfl
let lean_s2 := by timed congr lean_s0 lean_s1
have lean_s3 : (Eq (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (Eq stuscore2dollarskuscore40 (Rat.ofInt 0))) := by timed rfl
let lean_s4 := by timed congr lean_s0 lean_s3
let lean_s5 := by timed congr lean_s0 lean_r1
let lean_s6 := by timed congr lean_s0 lean_r5
have lean_s7 : (Eq yuscore2dollarskuscore40 yuscore2dollarskuscore40) := by timed rfl
let lean_s8 := by timed flipCongrArg lean_s7 [GE.ge]
have lean_s9 : (Eq (Rat.ofInt 5) (Rat.ofInt 5)) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HAdd.hAdd]
have lean_s11 : (Eq (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [HMul.hMul]
have lean_s13 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HMul.hMul (Int.ofNat 2) xuscore2dollarskuscore32))) := by timed congr lean_s12 lean_r11
have lean_s14 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32)) := by timed Eq.trans lean_s13 lean_r3
have lean_s15 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 5) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32))) (binrel% HAdd.hAdd (Rat.ofInt 5) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32))) := by timed congr lean_s10 lean_s14
have lean_s16 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 5) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32))) (binrel% HAdd.hAdd (Int.ofNat 5) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32))) := by timed Eq.trans lean_s15 lean_r4
have lean_s17 : (Eq (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)) (binrel% HAdd.hAdd (Int.ofNat 5) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32))) := by timed Eq.trans lean_r2 lean_s16
have lean_s18 : (Eq (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32))) (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Int.ofNat 5) (binrel% HMul.hMul (Neg.neg (Int.ofNat 2)) xuscore2dollarskuscore32)))) := by timed congr lean_s8 lean_s17
have lean_s19 : (Eq (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) := by timed Eq.trans lean_s18 lean_r6
let lean_s20 := by timed congr lean_s0 lean_s19
let lean_s21 := by timed flipCongrArg lean_s7 [LE.le]
have lean_s22 : (Eq (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32)) (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Int.ofNat 10) xuscore2dollarskuscore32))) := by timed congr lean_s21 lean_r22
have lean_s23 : (Eq (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32)) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10)))) := by timed Eq.trans lean_s22 lean_r7
let lean_s24 := by timed congr lean_s20 lean_s23
let lean_s25 := by timed congr lean_s6 lean_s24
let lean_s26 := by timed congr lean_s5 lean_s25
let lean_s27 := by timed congr lean_s4 lean_s26
have lean_s28 : (Eq (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1)) (And (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12)) (And (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32))) (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32))))))) (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10))))))))) := by timed congr lean_s2 lean_s27
have lean_s29 : (Eq (And (And (And (And (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (Eq stuscore2dollarskuscore40 (Rat.ofInt 0))) (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12))) (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)))) (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32))) (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10))))))))) := by timed Eq.trans lean_r0 lean_s28
let lean_s30 := by timed flipCongrArg lean_s29 [Implies]
have lean_s31 : (Eq (Implies (And (And (And (And (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (Eq stuscore2dollarskuscore40 (Rat.ofInt 0))) (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12))) (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)))) (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 10))) (Implies (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10)))))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 10))))) := by timed congr lean_s30 lean_r9
have lean_s32 : (Eq (Not (Implies (And (And (And (And (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (Eq stuscore2dollarskuscore40 (Rat.ofInt 0))) (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12))) (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)))) (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 10)))) (Not (Implies (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10)))))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 10)))))) := by timed flipCongrArg lean_s31 [Not]
have lean_s33 : (Eq And And) := by timed rfl
have lean_s34 : (Not (Implies (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10)))))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 10))))) := by timed eqResolve lean_a25 lean_s32
have lean_s35 : (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10)))))))) := by timed notImplies1 lean_s34
have lean_s36 : (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) := by andElim lean_s35, 1
have lean_s37 : (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10)))))))) := by timed notImplies1 lean_s34
have lean_s38 : (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) := by andElim lean_s37, 0
have lean_s39 : (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (Eq yuscore2dollarskuscore40 (Rat.ofInt 10))) := by timed And.intro lean_s36 lean_s38
have lean_s40 : (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) := by andElim lean_s39, 1
let lean_s41 := by timed flipCongrArg lean_s40 [Eq]
have lean_s42 : (Eq (Rat.ofInt 10) (Rat.ofInt 10)) := by timed rfl
have lean_s43 : (Eq (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (Eq (Rat.ofInt 10) (Rat.ofInt 10))) := by timed congr lean_s41 lean_s42
let lean_s44 := by timed congr lean_s33 lean_s43
have lean_s45 : (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) := by andElim lean_s39, 0
let lean_s46 := by timed flipCongrArg lean_s45 [Eq]
have lean_s47 : (Eq (Rat.ofInt 0) (Rat.ofInt 0)) := by timed rfl
have lean_s48 : (Eq (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (Eq (Rat.ofInt 0) (Rat.ofInt 0))) := by timed congr lean_s46 lean_s47
let lean_s49 := by timed congr lean_s33 lean_s48
let lean_s50 := by timed flipCongrArg lean_s40 [GE.ge]
have lean_s51 : (Eq (Int.ofNat 1) (Int.ofNat 1)) := by timed rfl
have lean_s52 : (Eq (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1)) (binrel% GE.ge (Rat.ofInt 10) (Int.ofNat 1))) := by timed congr lean_s50 lean_s51
let lean_s53 := by timed congr lean_s33 lean_s52
have lean_s54 : (Eq (Neg.neg (Int.ofNat 1)) (Neg.neg (Int.ofNat 1))) := by timed rfl
let lean_s55 := by timed flipCongrArg lean_s54 [HMul.hMul]
have lean_s56 : (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) := by timed congr lean_s55 lean_s40
let lean_s57 := by timed flipCongrArg lean_s56 [GE.ge]
have lean_s58 : (Eq (Neg.neg (Int.ofNat 12)) (Neg.neg (Int.ofNat 12))) := by timed rfl
have lean_s59 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12)))) := by timed congr lean_s57 lean_s58
let lean_s60 := by timed congr lean_s33 lean_s59
have lean_s61 : (Eq xuscore2dollarskuscore32 xuscore2dollarskuscore32) := by timed rfl
let lean_s62 := by timed flipCongrArg lean_s61 [HAdd.hAdd]
have lean_s63 : (Eq (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2))) := by timed rfl
let lean_s64 := by timed flipCongrArg lean_s63 [HMul.hMul]
have lean_s65 : (Eq (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40) (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) := by timed congr lean_s64 lean_s40
have lean_s66 : (Eq (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10)))) := by timed congr lean_s62 lean_s65
let lean_s67 := by timed flipCongrArg lean_s66 [GE.ge]
have lean_s68 : (Eq (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) := by timed rfl
have lean_s69 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) := by timed congr lean_s67 lean_s68
let lean_s70 := by timed congr lean_s33 lean_s69
let lean_s71 := by timed flipCongrArg lean_s61 [HAdd.hAdd]
have lean_s72 : (Eq (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)))) := by timed congr lean_s71 lean_s56
let lean_s73 := by timed flipCongrArg lean_s72 [GE.ge]
have lean_s74 : (Eq (Neg.neg (Int.ofNat 10)) (Neg.neg (Int.ofNat 10))) := by timed rfl
have lean_s75 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (Neg.neg (Int.ofNat 10)))) := by timed congr lean_s73 lean_s74
let lean_s76 := by timed congr lean_s70 lean_s75
let lean_s77 := by timed congr lean_s60 lean_s76
let lean_s78 := by timed congr lean_s53 lean_s77
let lean_s79 := by timed congr lean_s49 lean_s78
have lean_s80 : (Eq (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10)))))))) (And (Eq (Rat.ofInt 10) (Rat.ofInt 10)) (And (Eq (Rat.ofInt 0) (Rat.ofInt 0)) (And (binrel% GE.ge (Rat.ofInt 10) (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (Neg.neg (Int.ofNat 10))))))))) := by timed congr lean_s44 lean_s79
let lean_s81 := by timed flipCongrArg lean_s80 [Implies]
let lean_s82 := by timed flipCongrArg lean_s56 [GE.ge]
have lean_s83 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 10))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 10)))) := by timed congr lean_s82 lean_s74
have lean_s84 : (Eq (Implies (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10)))))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 10)))) (Implies (And (Eq (Rat.ofInt 10) (Rat.ofInt 10)) (And (Eq (Rat.ofInt 0) (Rat.ofInt 0)) (And (binrel% GE.ge (Rat.ofInt 10) (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (Neg.neg (Int.ofNat 10)))))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 10))))) := by timed congr lean_s81 lean_s83
have lean_s85 : (Eq (Not (Implies (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10)))))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 10))))) (Not (Implies (And (Eq (Rat.ofInt 10) (Rat.ofInt 10)) (And (Eq (Rat.ofInt 0) (Rat.ofInt 0)) (And (binrel% GE.ge (Rat.ofInt 10) (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (Neg.neg (Int.ofNat 10)))))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 10)))))) := by timed flipCongrArg lean_s84 [Not]
have lean_s86 : (Eq And And) := by timed rfl
let lean_s87 := by timed congr lean_s86 lean_r8
let lean_s88 := by timed congr lean_s86 lean_r18
let lean_s89 := by timed congr lean_s86 lean_r24
let lean_s90 := by timed flipCongrArg lean_r14 [GE.ge]
have lean_s91 : (Eq (Neg.neg (Int.ofNat 12)) (Neg.neg (Int.ofNat 12))) := by timed rfl
have lean_s92 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) (binrel% GE.ge (Neg.neg (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12)))) := by timed congr lean_s90 lean_s91
have lean_s93 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) True) := by timed Eq.trans lean_s92 lean_r15
let lean_s94 := by timed congr lean_s86 lean_s93
have lean_s95 : (Eq xuscore2dollarskuscore32 xuscore2dollarskuscore32) := by timed rfl
let lean_s96 := by timed flipCongrArg lean_s95 [HAdd.hAdd]
have lean_s97 : (Eq (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HAdd.hAdd xuscore2dollarskuscore32 (Rat.ofInt 5))) := by timed congr lean_s96 lean_r17
have lean_s98 : (Eq (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HAdd.hAdd (Int.ofNat 5) xuscore2dollarskuscore32)) := by timed Eq.trans lean_s97 lean_r20
let lean_s99 := by timed flipCongrArg lean_s98 [GE.ge]
have lean_s100 : (Eq (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) := by timed rfl
have lean_s101 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd (Int.ofNat 5) xuscore2dollarskuscore32) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) := by timed congr lean_s99 lean_s100
have lean_s102 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))))) := by timed Eq.trans lean_s101 lean_r23
let lean_s103 := by timed congr lean_s86 lean_s102
let lean_s104 := by timed flipCongrArg lean_s95 [HAdd.hAdd]
have lean_s105 : (Eq (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (binrel% HAdd.hAdd xuscore2dollarskuscore32 (Neg.neg (Rat.ofInt 10)))) := by timed congr lean_s104 lean_r14
have lean_s106 : (Eq (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 10)) xuscore2dollarskuscore32)) := by timed Eq.trans lean_s105 lean_r21
let lean_s107 := by timed flipCongrArg lean_s106 [GE.ge]
have lean_s108 : (Eq (Neg.neg (Int.ofNat 10)) (Neg.neg (Int.ofNat 10))) := by timed rfl
have lean_s109 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (Neg.neg (Int.ofNat 10))) (binrel% GE.ge (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 10)) xuscore2dollarskuscore32) (Neg.neg (Int.ofNat 10)))) := by timed congr lean_s107 lean_s108
have lean_s110 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (Neg.neg (Int.ofNat 10))) (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0))) := by timed Eq.trans lean_s109 lean_r19
let lean_s111 := by timed congr lean_s103 lean_s110
let lean_s112 := by timed congr lean_s94 lean_s111
let lean_s113 := by timed congr lean_s89 lean_s112
let lean_s114 := by timed congr lean_s88 lean_s113
have lean_s115 : (Eq (And (Eq (Rat.ofInt 10) (Rat.ofInt 10)) (And (Eq (Rat.ofInt 0) (Rat.ofInt 0)) (And (binrel% GE.ge (Rat.ofInt 10) (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (Neg.neg (Int.ofNat 10)))))))) (And True (And True (And True (And True (And (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0)))))))) := by timed congr lean_s87 lean_s114
have lean_s116 : (Eq (And (Eq (Rat.ofInt 10) (Rat.ofInt 10)) (And (Eq (Rat.ofInt 0) (Rat.ofInt 0)) (And (binrel% GE.ge (Rat.ofInt 10) (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (Neg.neg (Int.ofNat 10)))))))) (And (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0)))) := by timed Eq.trans lean_s115 lean_r16
let lean_s117 := by timed flipCongrArg lean_s116 [Implies]
let lean_s118 := by timed flipCongrArg lean_r14 [GE.ge]
have lean_s119 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 10))) (binrel% GE.ge (Neg.neg (Rat.ofInt 10)) (Neg.neg (Int.ofNat 10)))) := by timed congr lean_s118 lean_s108
have lean_s120 : (Eq (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 10))) True) := by timed Eq.trans lean_s119 lean_r13
have lean_s121 : (Eq (Implies (And (Eq (Rat.ofInt 10) (Rat.ofInt 10)) (And (Eq (Rat.ofInt 0) (Rat.ofInt 0)) (And (binrel% GE.ge (Rat.ofInt 10) (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (Neg.neg (Int.ofNat 10)))))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 10)))) (Implies (And (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2)))) (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0))) True)) := by timed congr lean_s117 lean_s120
have lean_s122 : (Eq (Implies (And (Eq (Rat.ofInt 10) (Rat.ofInt 10)) (And (Eq (Rat.ofInt 0) (Rat.ofInt 0)) (And (binrel% GE.ge (Rat.ofInt 10) (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (Neg.neg (Int.ofNat 10)))))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 10)))) True) := by timed Eq.trans lean_s121 lean_r12
have lean_s123 : (Eq (Not (Implies (And (Eq (Rat.ofInt 10) (Rat.ofInt 10)) (And (Eq (Rat.ofInt 0) (Rat.ofInt 0)) (And (binrel% GE.ge (Rat.ofInt 10) (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (Neg.neg (Int.ofNat 10)))))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 10))))) (Not True)) := by timed flipCongrArg lean_s122 [Not]
have lean_s124 : (Eq (Not (Implies (And (Eq (Rat.ofInt 10) (Rat.ofInt 10)) (And (Eq (Rat.ofInt 0) (Rat.ofInt 0)) (And (binrel% GE.ge (Rat.ofInt 10) (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) (Rat.ofInt 10))) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10))) (Neg.neg (Int.ofNat 10)))))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Rat.ofInt 10)) (Neg.neg (Int.ofNat 10))))) False) := by timed Eq.trans lean_s123 lean_r10
have lean_s125 : (Eq (Not (Implies (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (And (Eq stuscore2dollarskuscore40 (Rat.ofInt 0)) (And (binrel% GE.ge yuscore2dollarskuscore40 (Int.ofNat 1)) (And (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 12))) (And (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 2)) yuscore2dollarskuscore40)) (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 2))) (binrel% GE.ge (binrel% HAdd.hAdd xuscore2dollarskuscore32 (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40)) (Neg.neg (Int.ofNat 10)))))))) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) yuscore2dollarskuscore40) (Neg.neg (Int.ofNat 10))))) False) := by timed Eq.trans lean_s85 lean_s124
have lean_s126 : (Eq (Not (Implies (And (And (And (And (And (Eq yuscore2dollarskuscore40 (Rat.ofInt 10)) (Eq stuscore2dollarskuscore40 (Rat.ofInt 0))) (binrel% GE.ge yuscore2dollarskuscore40 (Rat.ofInt 1))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12))) (binrel% GE.ge yuscore2dollarskuscore40 (binrel% HSub.hSub (Rat.ofInt 5) (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)))) (binrel% LE.le yuscore2dollarskuscore40 (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore32))) (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 10)))) False) := by timed Eq.trans lean_s32 lean_s125
exact (show False from by timed eqResolve lean_a25 lean_s126)


