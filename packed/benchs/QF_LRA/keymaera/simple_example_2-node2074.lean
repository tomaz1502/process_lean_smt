-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {buscore2dollarskuscore0 : Rat}
variable {cuscore2dollarskuscore0 : Rat}
variable {e : Rat}
variable {auscore2dollarskuscore0 : Rat}
variable {e : Rat}
variable {auscore2dollarskuscore0 : Rat}
variable {buscore2dollarskuscore0 : Rat}
variable {cuscore2dollarskuscore0 : Rat}

theorem th0 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) cuscore2dollarskuscore0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) cuscore2dollarskuscore0))) → (Eq (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0)) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 5)) (Neg.neg (Rat.ofInt 5))) → (Eq (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0)) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (Rat.ofInt 6))) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1))) (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (Rat.ofInt 6) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1)))))) → (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) (Neg.neg (Rat.ofInt 5))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 5)) (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0))) → (Eq (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1)) (binrel% HAdd.hAdd cuscore2dollarskuscore0 (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 1)))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% HAdd.hAdd cuscore2dollarskuscore0 (Neg.neg (Rat.ofInt 1))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) cuscore2dollarskuscore0)) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0)) cuscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) cuscore2dollarskuscore0))) → (Eq (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 5)))) → (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 5)) (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (Rat.ofInt 6) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) cuscore2dollarskuscore0)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) cuscore2dollarskuscore0))) → (Eq (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) cuscore2dollarskuscore0)) (Rat.ofInt 10)) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0))))) → (Not (Implies (And (Eq e (Rat.ofInt 0)) (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0)) cuscore2dollarskuscore0) (Rat.ofInt 10))) (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (Rat.ofInt 6))) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1))) (Rat.ofInt 10)))) → False :=
fun lean_r0 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) cuscore2dollarskuscore0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) cuscore2dollarskuscore0))) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0)) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 5)) (Neg.neg (Rat.ofInt 5))) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0)) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (Rat.ofInt 6))) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1))) (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (Rat.ofInt 6) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1)))))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) (Neg.neg (Rat.ofInt 5))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 5)) (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0))) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1)) (binrel% HAdd.hAdd cuscore2dollarskuscore0 (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% HAdd.hAdd cuscore2dollarskuscore0 (Neg.neg (Rat.ofInt 1))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) cuscore2dollarskuscore0)) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0)) cuscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) cuscore2dollarskuscore0))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 5)))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 5)) (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (Rat.ofInt 6) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) cuscore2dollarskuscore0)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) cuscore2dollarskuscore0))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) cuscore2dollarskuscore0)) (Rat.ofInt 10)) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0))))) => -- THEORY_REWRITE_ARITH
fun lean_a13 : (Not (Implies (And (Eq e (Rat.ofInt 0)) (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0)) cuscore2dollarskuscore0) (Rat.ofInt 10))) (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (Rat.ofInt 6))) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1))) (Rat.ofInt 10)))) => by
have lean_s0 : (Eq (Eq e (Rat.ofInt 0)) (Eq e (Rat.ofInt 0))) := by timed rfl
let lean_s1 := by timed flipCongrArg lean_s0 [And]
have lean_s2 : (Eq cuscore2dollarskuscore0 cuscore2dollarskuscore0) := by timed rfl
let lean_s3 := by timed congrHAdd lean_r3 lean_s2
have lean_s4 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) cuscore2dollarskuscore0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) cuscore2dollarskuscore0))) := by timed congrHAdd lean_r1 lean_s3
have lean_s5 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) cuscore2dollarskuscore0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) cuscore2dollarskuscore0))) := by timed Eq.trans lean_s4 lean_r0
have lean_s6 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0)) cuscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) cuscore2dollarskuscore0))) := by timed Eq.trans lean_r9 lean_s5
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq (Rat.ofInt 10) (Rat.ofInt 10)) := by timed rfl
have lean_s9 : (Eq (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0)) cuscore2dollarskuscore0) (Rat.ofInt 10)) (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) cuscore2dollarskuscore0)) (Rat.ofInt 10))) := by timed congr lean_s7 lean_s8
have lean_s10 : (Eq (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0)) cuscore2dollarskuscore0) (Rat.ofInt 10)) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0))))) := by timed Eq.trans lean_s9 lean_r12
have lean_s11 : (Eq (And (Eq e (Rat.ofInt 0)) (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0)) cuscore2dollarskuscore0) (Rat.ofInt 10))) (And (Eq e (Rat.ofInt 0)) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0)))))) := by timed congr lean_s1 lean_s10
let lean_s12 := by timed flipCongrArg lean_s11 [Implies]
let lean_s13 := by timed flipCongrArg lean_r1 [HAdd.hAdd]
have lean_s14 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 5))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) (Neg.neg (Rat.ofInt 5)))) := by timed congr lean_s13 lean_r2
have lean_s15 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 5))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 5)) (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0))) := by timed Eq.trans lean_s14 lean_r5
have lean_s16 : (Eq (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 5)) (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0))) := by timed Eq.trans lean_r10 lean_s15
have lean_s17 : (Eq (Rat.ofInt 6) (Rat.ofInt 6)) := by timed rfl
let lean_s18 := by timed flipCongrArg lean_s2 [HAdd.hAdd]
have lean_s19 : (Eq (binrel% HAdd.hAdd cuscore2dollarskuscore0 (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 1))) (binrel% HAdd.hAdd cuscore2dollarskuscore0 (Neg.neg (Rat.ofInt 1)))) := by timed congr lean_s18 lean_r7
have lean_s20 : (Eq (binrel% HAdd.hAdd cuscore2dollarskuscore0 (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Rat.ofInt 1))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) cuscore2dollarskuscore0)) := by timed Eq.trans lean_s19 lean_r8
have lean_s21 : (Eq (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1)) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) cuscore2dollarskuscore0)) := by timed Eq.trans lean_r6 lean_s20
let lean_s22 := by timed congrHAdd lean_s17 lean_s21
let lean_s23 := by timed congrHAdd lean_r3 lean_s22
have lean_s24 : (Eq (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (Rat.ofInt 6) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1))))) (binrel% HAdd.hAdd (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 5)) (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (Rat.ofInt 6) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) cuscore2dollarskuscore0))))) := by timed congrHAdd lean_s16 lean_s23
have lean_s25 : (Eq (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (Rat.ofInt 6) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) cuscore2dollarskuscore0))) := by timed Eq.trans lean_s24 lean_r11
have lean_s26 : (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (Rat.ofInt 6))) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) cuscore2dollarskuscore0))) := by timed Eq.trans lean_r4 lean_s25
let lean_s27 := by timed flipCongrArg lean_s26 [Eq]
have lean_s28 : (Eq (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (Rat.ofInt 6))) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1))) (Rat.ofInt 10)) (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 3) buscore2dollarskuscore0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 5) auscore2dollarskuscore0) cuscore2dollarskuscore0)) (Rat.ofInt 10))) := by timed congr lean_s27 lean_s8
have lean_s29 : (Eq (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (Rat.ofInt 6))) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1))) (Rat.ofInt 10)) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0))))) := by timed Eq.trans lean_s28 lean_r12
have lean_s30 : (Eq (Implies (And (Eq e (Rat.ofInt 0)) (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0)) cuscore2dollarskuscore0) (Rat.ofInt 10))) (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (Rat.ofInt 6))) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1))) (Rat.ofInt 10))) (Implies (And (Eq e (Rat.ofInt 0)) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0))))) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0)))))) := by timed congr lean_s12 lean_s29
have lean_s31 : (Eq (Not (Implies (And (Eq e (Rat.ofInt 0)) (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0)) cuscore2dollarskuscore0) (Rat.ofInt 10))) (Eq (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HSub.hSub (binrel% HMul.hMul (Rat.ofInt 5) auscore2dollarskuscore0) (Rat.ofInt 5)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 3) buscore2dollarskuscore0) (Rat.ofInt 6))) (binrel% HSub.hSub cuscore2dollarskuscore0 (Rat.ofInt 1))) (Rat.ofInt 10)))) (Not (Implies (And (Eq e (Rat.ofInt 0)) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0))))) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0))))))) := by timed flipCongrArg lean_s30 [Not]
have lean_s32 : (Not (Implies (And (Eq e (Rat.ofInt 0)) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0))))) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0)))))) := by timed eqResolve lean_a13 lean_s31
have lean_s33 : (And (Eq e (Rat.ofInt 0)) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0))))) := by timed notImplies1 lean_s32
have lean_s34 : (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0)))) := by andElim lean_s33, 1
have lean_s35 : (Not (Implies (And (Eq e (Rat.ofInt 0)) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0))))) (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0)))))) := by timed eqResolve lean_a13 lean_s31
have lean_s36 : (Not (Eq buscore2dollarskuscore0 (binrel% HAdd.hAdd (binrel% HDiv.hDiv (Int.ofNat 10) (Int.ofNat 3)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5) (Int.ofNat 3))) auscore2dollarskuscore0) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1) (Int.ofNat 3))) cuscore2dollarskuscore0))))) := by timed notImplies2 lean_s35
exact (show False from by timed contradiction lean_s34 lean_s36)


