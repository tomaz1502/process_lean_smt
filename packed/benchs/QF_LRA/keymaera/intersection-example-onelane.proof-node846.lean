-- import Smt.Reconstruction.Certifying
open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {I1uscore1dollarskuscore0 : Rat}
variable {vuscore1dollarskuscore0 : Rat}
variable {xuscore1dollarskuscore0 : Rat}
variable {I1 : Rat}
variable {A : Rat}
variable {x : Rat}
variable {ep : Rat}
variable {V : Rat}
variable {V : Rat}
variable {A : Rat}
variable {v : Rat}
variable {v : Rat}
variable {B : Rat}
variable {B : Rat}
variable {x : Rat}
variable {xI : Rat}
variable {ep : Rat}
variable {xI : Rat}
variable {I1 : Rat}
variable {xuscore1dollarskuscore0 : Rat}
variable {vuscore1dollarskuscore0 : Rat}
variable {I1uscore1dollarskuscore0 : Rat}

theorem th0 : (Eq (Not (Not (And (And (And (And (And (And (And (And (And (And (And (And (Eq xI xuscore1dollarskuscore0) (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2))) (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0))) (binrel% LE.le vuscore1dollarskuscore0 V)) (binrel% LT.lt xI xuscore1dollarskuscore0)) (Eq I1 (Rat.ofInt 2))) (binrel% LT.lt xI x)) (binrel% GT.gt B (Rat.ofInt 0))) (binrel% GE.ge v (Rat.ofInt 0))) (binrel% LE.le v V)) (binrel% GE.ge A (Rat.ofInt 0))) (binrel% GT.gt V (Rat.ofInt 0))) (binrel% GT.gt ep (Rat.ofInt 0))))) (And (And (And (And (And (And (And (And (And (And (And (And (Eq xI xuscore1dollarskuscore0) (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2))) (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0))) (binrel% LE.le vuscore1dollarskuscore0 V)) (binrel% LT.lt xI xuscore1dollarskuscore0)) (Eq I1 (Rat.ofInt 2))) (binrel% LT.lt xI x)) (binrel% GT.gt B (Rat.ofInt 0))) (binrel% GE.ge v (Rat.ofInt 0))) (binrel% LE.le v V)) (binrel% GE.ge A (Rat.ofInt 0))) (binrel% GT.gt V (Rat.ofInt 0))) (binrel% GT.gt ep (Rat.ofInt 0)))) → (Eq (And (And (And (And (And (And (And (And (And (And (And (And (Eq xI xuscore1dollarskuscore0) (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2))) (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0))) (binrel% LE.le vuscore1dollarskuscore0 V)) (binrel% LT.lt xI xuscore1dollarskuscore0)) (Eq I1 (Rat.ofInt 2))) (binrel% LT.lt xI x)) (binrel% GT.gt B (Rat.ofInt 0))) (binrel% GE.ge v (Rat.ofInt 0))) (binrel% LE.le v V)) (binrel% GE.ge A (Rat.ofInt 0))) (binrel% GT.gt V (Rat.ofInt 0))) (binrel% GT.gt ep (Rat.ofInt 0))) (And (Eq xI xuscore1dollarskuscore0) (And (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) (And (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0)) (And (binrel% LE.le vuscore1dollarskuscore0 V) (And (binrel% LT.lt xI xuscore1dollarskuscore0) (And (Eq I1 (Rat.ofInt 2)) (And (binrel% LT.lt xI x) (And (binrel% GT.gt B (Rat.ofInt 0)) (And (binrel% GE.ge v (Rat.ofInt 0)) (And (binrel% LE.le v V) (And (binrel% GE.ge A (Rat.ofInt 0)) (And (binrel% GT.gt V (Rat.ofInt 0)) (binrel% GT.gt ep (Rat.ofInt 0))))))))))))))) → (Eq (Eq xI xuscore1dollarskuscore0) (Eq xuscore1dollarskuscore0 xI)) → (Eq (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0)) (binrel% GE.ge vuscore1dollarskuscore0 (Int.ofNat 0))) → (Eq (binrel% LE.le vuscore1dollarskuscore0 V) (binrel% GE.ge (binrel% HAdd.hAdd V (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) vuscore1dollarskuscore0)) (Int.ofNat 0))) → (Eq (binrel% LT.lt xI xuscore1dollarskuscore0) (Not (binrel% GE.ge xI xuscore1dollarskuscore0))) → (Eq (binrel% GE.ge xI xuscore1dollarskuscore0) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0))) → (Eq (Not True) False) → (Eq (binrel% LT.lt xI x) (Not (binrel% GE.ge xI x))) → (Eq (binrel% GT.gt V (Rat.ofInt 0)) (Not (binrel% LE.le V (Rat.ofInt 0)))) → (Eq (binrel% GE.ge (Rat.ofInt 0) (Int.ofNat 0)) True) → (Eq (binrel% GE.ge A (Rat.ofInt 0)) (binrel% GE.ge A (Int.ofNat 0))) → (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xI) xI) (Rat.ofInt 0)) → (Eq (binrel% LE.le ep (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) ep) (Int.ofNat 0))) → (Eq (binrel% LE.le B (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) B) (Int.ofNat 0))) → (Eq (binrel% GE.ge xI x) (binrel% GE.ge (binrel% HAdd.hAdd xI (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) x)) (Int.ofNat 0))) → (Eq (binrel% LE.le V (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) V) (Int.ofNat 0))) → (Eq (binrel% LE.le v V) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) v) V) (Int.ofNat 0))) → (Eq (binrel% GT.gt ep (Rat.ofInt 0)) (Not (binrel% LE.le ep (Rat.ofInt 0)))) → (Eq (binrel% GT.gt B (Rat.ofInt 0)) (Not (binrel% LE.le B (Rat.ofInt 0)))) → (Eq (binrel% GE.ge v (Rat.ofInt 0)) (binrel% GE.ge v (Int.ofNat 0))) → (Not (Not (And (And (And (And (And (And (And (And (And (And (And (And (Eq xI xuscore1dollarskuscore0) (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2))) (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0))) (binrel% LE.le vuscore1dollarskuscore0 V)) (binrel% LT.lt xI xuscore1dollarskuscore0)) (Eq I1 (Rat.ofInt 2))) (binrel% LT.lt xI x)) (binrel% GT.gt B (Rat.ofInt 0))) (binrel% GE.ge v (Rat.ofInt 0))) (binrel% LE.le v V)) (binrel% GE.ge A (Rat.ofInt 0))) (binrel% GT.gt V (Rat.ofInt 0))) (binrel% GT.gt ep (Rat.ofInt 0))))) → False :=
fun lean_r0 : (Eq (Not (Not (And (And (And (And (And (And (And (And (And (And (And (And (Eq xI xuscore1dollarskuscore0) (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2))) (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0))) (binrel% LE.le vuscore1dollarskuscore0 V)) (binrel% LT.lt xI xuscore1dollarskuscore0)) (Eq I1 (Rat.ofInt 2))) (binrel% LT.lt xI x)) (binrel% GT.gt B (Rat.ofInt 0))) (binrel% GE.ge v (Rat.ofInt 0))) (binrel% LE.le v V)) (binrel% GE.ge A (Rat.ofInt 0))) (binrel% GT.gt V (Rat.ofInt 0))) (binrel% GT.gt ep (Rat.ofInt 0))))) (And (And (And (And (And (And (And (And (And (And (And (And (Eq xI xuscore1dollarskuscore0) (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2))) (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0))) (binrel% LE.le vuscore1dollarskuscore0 V)) (binrel% LT.lt xI xuscore1dollarskuscore0)) (Eq I1 (Rat.ofInt 2))) (binrel% LT.lt xI x)) (binrel% GT.gt B (Rat.ofInt 0))) (binrel% GE.ge v (Rat.ofInt 0))) (binrel% LE.le v V)) (binrel% GE.ge A (Rat.ofInt 0))) (binrel% GT.gt V (Rat.ofInt 0))) (binrel% GT.gt ep (Rat.ofInt 0)))) => -- THEORY_REWRITE_BOOL
fun lean_r1 : (Eq (And (And (And (And (And (And (And (And (And (And (And (And (Eq xI xuscore1dollarskuscore0) (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2))) (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0))) (binrel% LE.le vuscore1dollarskuscore0 V)) (binrel% LT.lt xI xuscore1dollarskuscore0)) (Eq I1 (Rat.ofInt 2))) (binrel% LT.lt xI x)) (binrel% GT.gt B (Rat.ofInt 0))) (binrel% GE.ge v (Rat.ofInt 0))) (binrel% LE.le v V)) (binrel% GE.ge A (Rat.ofInt 0))) (binrel% GT.gt V (Rat.ofInt 0))) (binrel% GT.gt ep (Rat.ofInt 0))) (And (Eq xI xuscore1dollarskuscore0) (And (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) (And (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0)) (And (binrel% LE.le vuscore1dollarskuscore0 V) (And (binrel% LT.lt xI xuscore1dollarskuscore0) (And (Eq I1 (Rat.ofInt 2)) (And (binrel% LT.lt xI x) (And (binrel% GT.gt B (Rat.ofInt 0)) (And (binrel% GE.ge v (Rat.ofInt 0)) (And (binrel% LE.le v V) (And (binrel% GE.ge A (Rat.ofInt 0)) (And (binrel% GT.gt V (Rat.ofInt 0)) (binrel% GT.gt ep (Rat.ofInt 0))))))))))))))) => -- THEORY_REWRITE_BOOL
fun lean_r2 : (Eq (Eq xI xuscore1dollarskuscore0) (Eq xuscore1dollarskuscore0 xI)) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0)) (binrel% GE.ge vuscore1dollarskuscore0 (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% LE.le vuscore1dollarskuscore0 V) (binrel% GE.ge (binrel% HAdd.hAdd V (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) vuscore1dollarskuscore0)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% LT.lt xI xuscore1dollarskuscore0) (Not (binrel% GE.ge xI xuscore1dollarskuscore0))) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% GE.ge xI xuscore1dollarskuscore0) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq (binrel% LT.lt xI x) (Not (binrel% GE.ge xI x))) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (binrel% GT.gt V (Rat.ofInt 0)) (Not (binrel% LE.le V (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq (binrel% GE.ge (Rat.ofInt 0) (Int.ofNat 0)) True) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% GE.ge A (Rat.ofInt 0)) (binrel% GE.ge A (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xI) xI) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (binrel% LE.le ep (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) ep) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq (binrel% LE.le B (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) B) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq (binrel% GE.ge xI x) (binrel% GE.ge (binrel% HAdd.hAdd xI (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) x)) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (binrel% LE.le V (Rat.ofInt 0)) (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) V) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (binrel% LE.le v V) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) v) V) (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq (binrel% GT.gt ep (Rat.ofInt 0)) (Not (binrel% LE.le ep (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (binrel% GT.gt B (Rat.ofInt 0)) (Not (binrel% LE.le B (Rat.ofInt 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (binrel% GE.ge v (Rat.ofInt 0)) (binrel% GE.ge v (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_a21 : (Not (Not (And (And (And (And (And (And (And (And (And (And (And (And (Eq xI xuscore1dollarskuscore0) (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2))) (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0))) (binrel% LE.le vuscore1dollarskuscore0 V)) (binrel% LT.lt xI xuscore1dollarskuscore0)) (Eq I1 (Rat.ofInt 2))) (binrel% LT.lt xI x)) (binrel% GT.gt B (Rat.ofInt 0))) (binrel% GE.ge v (Rat.ofInt 0))) (binrel% LE.le v V)) (binrel% GE.ge A (Rat.ofInt 0))) (binrel% GT.gt V (Rat.ofInt 0))) (binrel% GT.gt ep (Rat.ofInt 0))))) => by
have lean_s0 : (Eq And And) := by timed rfl
let lean_s1 := by timed congr lean_s0 lean_r2
have lean_s2 : (Eq (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2))) := by timed rfl
let lean_s3 := by timed congr lean_s0 lean_s2
let lean_s4 := by timed congr lean_s0 lean_r3
let lean_s5 := by timed congr lean_s0 lean_r4
have lean_s6 : (Eq (Not (binrel% GE.ge xI xuscore1dollarskuscore0)) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0)))) := by timed flipCongrArg lean_r6 [Not]
have lean_s7 : (Eq (binrel% LT.lt xI xuscore1dollarskuscore0) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0)))) := by timed Eq.trans lean_r5 lean_s6
let lean_s8 := by timed congr lean_s0 lean_s7
have lean_s9 : (Eq (Eq I1 (Rat.ofInt 2)) (Eq I1 (Rat.ofInt 2))) := by timed rfl
let lean_s10 := by timed congr lean_s0 lean_s9
have lean_s11 : (Eq (Not (binrel% GE.ge xI x)) (Not (binrel% GE.ge (binrel% HAdd.hAdd xI (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) x)) (Int.ofNat 0)))) := by timed flipCongrArg lean_r15 [Not]
have lean_s12 : (Eq (binrel% LT.lt xI x) (Not (binrel% GE.ge (binrel% HAdd.hAdd xI (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) x)) (Int.ofNat 0)))) := by timed Eq.trans lean_r8 lean_s11
let lean_s13 := by timed congr lean_s0 lean_s12
have lean_s14 : (Eq (Not (binrel% LE.le B (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) B) (Int.ofNat 0)))) := by timed flipCongrArg lean_r14 [Not]
have lean_s15 : (Eq (binrel% GT.gt B (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) B) (Int.ofNat 0)))) := by timed Eq.trans lean_r19 lean_s14
let lean_s16 := by timed congr lean_s0 lean_s15
let lean_s17 := by timed congr lean_s0 lean_r20
let lean_s18 := by timed congr lean_s0 lean_r17
let lean_s19 := by timed congr lean_s0 lean_r11
have lean_s20 : (Eq (Not (binrel% LE.le V (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) V) (Int.ofNat 0)))) := by timed flipCongrArg lean_r16 [Not]
have lean_s21 : (Eq (binrel% GT.gt V (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) V) (Int.ofNat 0)))) := by timed Eq.trans lean_r9 lean_s20
let lean_s22 := by timed congr lean_s0 lean_s21
have lean_s23 : (Eq (Not (binrel% LE.le ep (Rat.ofInt 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) ep) (Int.ofNat 0)))) := by timed flipCongrArg lean_r13 [Not]
have lean_s24 : (Eq (binrel% GT.gt ep (Rat.ofInt 0)) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) ep) (Int.ofNat 0)))) := by timed Eq.trans lean_r18 lean_s23
let lean_s25 := by timed congr lean_s22 lean_s24
let lean_s26 := by timed congr lean_s19 lean_s25
let lean_s27 := by timed congr lean_s18 lean_s26
let lean_s28 := by timed congr lean_s17 lean_s27
let lean_s29 := by timed congr lean_s16 lean_s28
let lean_s30 := by timed congr lean_s13 lean_s29
let lean_s31 := by timed congr lean_s10 lean_s30
let lean_s32 := by timed congr lean_s8 lean_s31
let lean_s33 := by timed congr lean_s5 lean_s32
let lean_s34 := by timed congr lean_s4 lean_s33
let lean_s35 := by timed congr lean_s3 lean_s34
have lean_s36 : (Eq (And (Eq xI xuscore1dollarskuscore0) (And (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) (And (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0)) (And (binrel% LE.le vuscore1dollarskuscore0 V) (And (binrel% LT.lt xI xuscore1dollarskuscore0) (And (Eq I1 (Rat.ofInt 2)) (And (binrel% LT.lt xI x) (And (binrel% GT.gt B (Rat.ofInt 0)) (And (binrel% GE.ge v (Rat.ofInt 0)) (And (binrel% LE.le v V) (And (binrel% GE.ge A (Rat.ofInt 0)) (And (binrel% GT.gt V (Rat.ofInt 0)) (binrel% GT.gt ep (Rat.ofInt 0)))))))))))))) (And (Eq xuscore1dollarskuscore0 xI) (And (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) (And (binrel% GE.ge vuscore1dollarskuscore0 (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd V (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) vuscore1dollarskuscore0)) (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0))) (And (Eq I1 (Rat.ofInt 2)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd xI (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) x)) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) B) (Int.ofNat 0))) (And (binrel% GE.ge v (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) v) V) (Int.ofNat 0)) (And (binrel% GE.ge A (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) V) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) ep) (Int.ofNat 0)))))))))))))))) := by timed congr lean_s1 lean_s35
have lean_s37 : (Eq (And (And (And (And (And (And (And (And (And (And (And (And (Eq xI xuscore1dollarskuscore0) (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2))) (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0))) (binrel% LE.le vuscore1dollarskuscore0 V)) (binrel% LT.lt xI xuscore1dollarskuscore0)) (Eq I1 (Rat.ofInt 2))) (binrel% LT.lt xI x)) (binrel% GT.gt B (Rat.ofInt 0))) (binrel% GE.ge v (Rat.ofInt 0))) (binrel% LE.le v V)) (binrel% GE.ge A (Rat.ofInt 0))) (binrel% GT.gt V (Rat.ofInt 0))) (binrel% GT.gt ep (Rat.ofInt 0))) (And (Eq xuscore1dollarskuscore0 xI) (And (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) (And (binrel% GE.ge vuscore1dollarskuscore0 (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd V (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) vuscore1dollarskuscore0)) (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0))) (And (Eq I1 (Rat.ofInt 2)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd xI (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) x)) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) B) (Int.ofNat 0))) (And (binrel% GE.ge v (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) v) V) (Int.ofNat 0)) (And (binrel% GE.ge A (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) V) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) ep) (Int.ofNat 0)))))))))))))))) := by timed Eq.trans lean_r1 lean_s36
have lean_s38 : (Eq (Not (Not (And (And (And (And (And (And (And (And (And (And (And (And (Eq xI xuscore1dollarskuscore0) (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2))) (binrel% GE.ge vuscore1dollarskuscore0 (Rat.ofInt 0))) (binrel% LE.le vuscore1dollarskuscore0 V)) (binrel% LT.lt xI xuscore1dollarskuscore0)) (Eq I1 (Rat.ofInt 2))) (binrel% LT.lt xI x)) (binrel% GT.gt B (Rat.ofInt 0))) (binrel% GE.ge v (Rat.ofInt 0))) (binrel% LE.le v V)) (binrel% GE.ge A (Rat.ofInt 0))) (binrel% GT.gt V (Rat.ofInt 0))) (binrel% GT.gt ep (Rat.ofInt 0))))) (And (Eq xuscore1dollarskuscore0 xI) (And (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) (And (binrel% GE.ge vuscore1dollarskuscore0 (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd V (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) vuscore1dollarskuscore0)) (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0))) (And (Eq I1 (Rat.ofInt 2)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd xI (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) x)) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) B) (Int.ofNat 0))) (And (binrel% GE.ge v (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) v) V) (Int.ofNat 0)) (And (binrel% GE.ge A (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) V) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) ep) (Int.ofNat 0)))))))))))))))) := by timed Eq.trans lean_r0 lean_s37
have lean_s39 : (And (Eq xuscore1dollarskuscore0 xI) (And (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) (And (binrel% GE.ge vuscore1dollarskuscore0 (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd V (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) vuscore1dollarskuscore0)) (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0))) (And (Eq I1 (Rat.ofInt 2)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd xI (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) x)) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) B) (Int.ofNat 0))) (And (binrel% GE.ge v (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) v) V) (Int.ofNat 0)) (And (binrel% GE.ge A (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) V) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) ep) (Int.ofNat 0))))))))))))))) := by timed eqResolve lean_a21 lean_s38
have lean_s40 : (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0))) := by andElim lean_s39, 4
have lean_s41 : (Eq (Neg.neg (Int.ofNat 1)) (Neg.neg (Int.ofNat 1))) := by timed rfl
let lean_s42 := by timed flipCongrArg lean_s41 [HMul.hMul]
have lean_s43 : (And (Eq xuscore1dollarskuscore0 xI) (And (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) (And (binrel% GE.ge vuscore1dollarskuscore0 (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd V (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) vuscore1dollarskuscore0)) (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0))) (And (Eq I1 (Rat.ofInt 2)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd xI (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) x)) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) B) (Int.ofNat 0))) (And (binrel% GE.ge v (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) v) V) (Int.ofNat 0)) (And (binrel% GE.ge A (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) V) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) ep) (Int.ofNat 0))))))))))))))) := by timed eqResolve lean_a21 lean_s38
have lean_s44 : (Eq I1 (Rat.ofInt 2)) := by andElim lean_s43, 5
have lean_s45 : (And (Eq xuscore1dollarskuscore0 xI) (And (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) (And (binrel% GE.ge vuscore1dollarskuscore0 (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd V (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) vuscore1dollarskuscore0)) (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0))) (And (Eq I1 (Rat.ofInt 2)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd xI (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) x)) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) B) (Int.ofNat 0))) (And (binrel% GE.ge v (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) v) V) (Int.ofNat 0)) (And (binrel% GE.ge A (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) V) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) ep) (Int.ofNat 0))))))))))))))) := by timed eqResolve lean_a21 lean_s38
have lean_s46 : (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) := by andElim lean_s45, 1
have lean_s47 : (And (Eq xuscore1dollarskuscore0 xI) (And (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) (And (binrel% GE.ge vuscore1dollarskuscore0 (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd V (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) vuscore1dollarskuscore0)) (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0))) (And (Eq I1 (Rat.ofInt 2)) (And (Not (binrel% GE.ge (binrel% HAdd.hAdd xI (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) x)) (Int.ofNat 0))) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) B) (Int.ofNat 0))) (And (binrel% GE.ge v (Int.ofNat 0)) (And (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) v) V) (Int.ofNat 0)) (And (binrel% GE.ge A (Int.ofNat 0)) (And (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) V) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) ep) (Int.ofNat 0))))))))))))))) := by timed eqResolve lean_a21 lean_s38
have lean_s48 : (Eq xuscore1dollarskuscore0 xI) := by andElim lean_s47, 0
let lean_s49 := by timed And.intro lean_s46 lean_s48
have lean_s50 : (And (Eq I1 (Rat.ofInt 2)) (And (Eq I1uscore1dollarskuscore0 (Rat.ofInt 2)) (Eq xuscore1dollarskuscore0 xI))) := by timed And.intro lean_s44 lean_s49
have lean_s51 : (Eq xuscore1dollarskuscore0 xI) := by andElim lean_s50, 2
have lean_s52 : (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xI)) := by timed congr lean_s42 lean_s51
let lean_s53 := by timed flipCongrArg lean_s52 [HAdd.hAdd]
have lean_s54 : (Eq xI xI) := by timed rfl
have lean_s55 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xI) xI)) := by timed congr lean_s53 lean_s54
let lean_s56 := by timed flipCongrArg lean_s55 [GE.ge]
have lean_s57 : (Eq (Int.ofNat 0) (Int.ofNat 0)) := by timed rfl
have lean_s58 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xI) xI) (Int.ofNat 0))) := by timed congr lean_s56 lean_s57
have lean_s59 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xI) xI) (Int.ofNat 0)))) := by timed flipCongrArg lean_s58 [Not]
let lean_s60 := by timed flipCongrArg lean_r12 [GE.ge]
have lean_s61 : (Eq (Int.ofNat 0) (Int.ofNat 0)) := by timed rfl
have lean_s62 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xI) xI) (Int.ofNat 0)) (binrel% GE.ge (Rat.ofInt 0) (Int.ofNat 0))) := by timed congr lean_s60 lean_s61
have lean_s63 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xI) xI) (Int.ofNat 0)) True) := by timed Eq.trans lean_s62 lean_r10
have lean_s64 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xI) xI) (Int.ofNat 0))) (Not True)) := by timed flipCongrArg lean_s63 [Not]
have lean_s65 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xI) xI) (Int.ofNat 0))) False) := by timed Eq.trans lean_s64 lean_r7
have lean_s66 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) xuscore1dollarskuscore0) xI) (Int.ofNat 0))) False) := by timed Eq.trans lean_s59 lean_s65
exact (show False from by timed eqResolve lean_s40 lean_s66)


