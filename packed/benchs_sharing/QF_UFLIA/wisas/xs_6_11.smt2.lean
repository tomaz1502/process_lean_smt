open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {distance : Int}
variable {fmt0 : Int}
variable {fmtx5flength : Int}
variable {x : Int}
variable {xx5fcount : (Int -> Int)}
variable {adrx5flo : Int}
variable {x : Int}
variable {fmt1 : Int}
variable {s : Int}
variable {adrx5fmedlo : Int}
variable {adrx5fmedhi : Int}
variable {arg0 : Int}
variable {format : (Int -> Int)}
variable {fmt0 : Int}
variable {sx5fcount : (Int -> Int)}
variable {adrx5fhi : Int}
variable {sx5fcount : (Int -> Int)}
variable {arg0 : Int}
variable {fmtx5flength : Int}
variable {distance : Int}
variable {adrx5flo : Int}
variable {adrx5fmedhi : Int}
variable {adrx5fhi : Int}
variable {s : Int}
variable {arg1 : Int}
variable {arg1 : Int}
variable {format : (Int -> Int)}
variable {percent : Int}
variable {adrx5fmedlo : Int}
variable {xx5fcount : (Int -> Int)}
variable {fmt1 : Int}
variable {percent : Int}

theorem th0 :
  let let1 := (Int.ofNat 2)
  let let2 := (sx5fcount let1)
  let let3 := (Eq let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HAdd.hAdd let5 let2)
  let let7 := (Eq let4 let6)
  let let8 := (Int.ofNat 4)
  let let9 := (Eq fmt1 let8)
  let let10 := (Int.ofNat 3)
  let let11 := (Neg.neg let1)
  let let12 := (binrel% HAdd.hAdd let11 fmt1)
  let let13 := (xx5fcount let12)
  let let14 := (sx5fcount let12)
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% GE.ge let15 let10)
  let let17 := (And let16 let9)
  let let18 := (xx5fcount let1)
  let let19 := (xx5fcount let4)
  let let20 := (Eq let19 let18)
  let let21 := (And let20 let17)
  let let22 := (Int.ofNat 0)
  let let23 := (xx5fcount let22)
  let let24 := (Eq let23 let19)
  let let25 := (And let24 let21)
  let let26 := (sx5fcount let4)
  let let27 := (Eq let26 let6)
  let let28 := (sx5fcount let22)
  let let29 := (Eq let28 let26)
  let let30 := (And let29 (And let27 let25))
  let let31 := (Eq let23 let22)
  let let32 := (And let31 let30)
  let let33 := (Eq let28 let4)
  let let34 := (And let33 let32)
  let let35 := (Not let34)
  let let36 := (Implies let34 False)
  let let37 := (Eq fmt1 let10)
  let let38 := (And let16 let37)
  let let39 := (And let24 let38)
  let let40 := (And let29 let39)
  let let41 := (And let31 let40)
  let let42 := (Eq let28 let22)
  let let43 := (And let42 let41)
  let let44 := (Not let43)
  let let45 := (Implies let43 False)
  let let46 := (binrel% HAdd.hAdd let5 let26)
  let let47 := (Eq let28 let46)
  let let48 := (And let42 (And let31 (And let47 let39)))
  let let49 := (Not let48)
  let let50 := (Implies let48 False)
  let let51 := (Eq let26 let4)
  let let52 := (Eq let22 let46)
  let let53 := (format let10)
  let let54 := (Eq s let53)
  let let55 := (Eq let53 s)
  let let56 := (Int.ofNat 5)
  let let57 := (binrel% HAdd.hAdd let56 fmt0)
  let let58 := (binrel% HAdd.hAdd fmt0 let56)
  let let59 := (Eq let26 let2)
  let let60 := (Eq let2 let26)
  let let61 := (Rat.ofInt let14)
  let let62 := (Rat.ofInt 1)
  let let63 := (binrel% HMul.hMul let62 let14)
  let let64 := (sx5fcount let10)
  let let65 := (Eq let2 let64)
  let let66 := (Eq let64 let2)
  let let67 := (Eq let19 let4)
  let let68 := (binrel% HAdd.hAdd let5 let19)
  let let69 := (Eq let22 let68)
  let let70 := (format let4)
  let let71 := (Eq x let70)
  let let72 := (Eq let70 x)
  let let73 := (format let22)
  let let74 := (Eq s let73)
  let let75 := (Eq let73 s)
  let let76 := (Eq let23 let68)
  let let77 := (binrel% HAdd.hAdd let4 let23)
  let let78 := (Eq let19 let77)
  let let79 := (format let1)
  let let80 := (Eq x let79)
  let let81 := (Eq let79 x)
  let let82 := (Int.ofNat 11)
  let let83 := (Neg.neg let82)
  let let84 := (Eq let83 let83)
  let let85 := (Eq fmt1 let22)
  let let86 := (Eq let22 fmt1)
  let let87 := (Int.ofNat 255)
  let let88 := (Eq let70 let87)
  let let89 := (Int.ofNat 6)
  let let90 := (Eq let70 let89)
  let let91 := (Eq let70 let56)
  let let92 := (Eq let70 let8)
  let let93 := (Eq let70 let10)
  let let94 := (Or let93 (Or let92 (Or let91 (Or let90 let88))))
  let let95 := (Eq let70 s)
  let let96 := (Eq let70 percent)
  let let97 := (Or let96 (Or let95 (Or let72 let94)))
  let let98 := (Or (Or (Or (Or (Or (Or (Or let96 let95) let72) let93) let92) let91) let90) let88)
  let let99 := (binrel% HAdd.hAdd let4 let19)
  let let100 := (binrel% HAdd.hAdd let19 let4)
  let let101 := (xx5fcount let10)
  let let102 := (Eq let18 (binrel% HAdd.hAdd let5 let101))
  let let103 := (binrel% HAdd.hAdd let4 let18)
  let let104 := (Eq let101 let103)
  let let105 := (xx5fcount let8)
  let let106 := (Eq let101 (binrel% HAdd.hAdd let5 let105))
  let let107 := (binrel% HAdd.hAdd let4 let101)
  let let108 := (Eq let105 let107)
  let let109 := (Neg.neg let8)
  let let110 := (binrel% HMul.hMul let109 let13)
  let let111 := (binrel% HMul.hMul let109 let14)
  let let112 := (binrel% HAdd.hAdd let111 let110)
  let let113 := (binrel% HAdd.hAdd let82 let112)
  let let114 := (binrel% HMul.hMul let8 let13)
  let let115 := (binrel% HMul.hMul let8 let14)
  let let116 := (binrel% HAdd.hAdd let115 let114)
  let let117 := (binrel% HAdd.hAdd let83 let116)
  let let118 := (binrel% HMul.hMul let5 let117)
  let let119 := (Int.ofNat 115)
  let let120 := (Eq let53 let119)
  let let121 := (Int.ofNat 37)
  let let122 := (Eq let79 let121)
  let let123 := (And let122 let120)
  let let124 := (Not let123)
  let let125 := (Not let124)
  let let126 := (Eq let123 let125)
  let let127 := (Eq let125 let123)
  let let128 := (sx5fcount let8)
  let let129 := (binrel% HAdd.hAdd let4 let128)
  let let130 := (binrel% HAdd.hAdd let128 let4)
  let let131 := (binrel% HMul.hMul let5 let4)
  let let132 := (binrel% HAdd.hAdd fmtx5flength let131)
  let let133 := (binrel% HSub.hSub fmtx5flength let4)
  let let134 := (Eq let70 let119)
  let let135 := (Eq let119 let70)
  let let136 := (format let89)
  let let137 := (Eq s let136)
  let let138 := (Eq let136 s)
  let let139 := (Neg.neg (Rat.ofInt 3))
  let let140 := (Rat.ofInt 0)
  let let141 := (binrel% HAdd.hAdd let140 let139)
  let let142 := (binrel% HAdd.hAdd let140 let141)
  let let143 := (format let56)
  let let144 := (Eq percent let143)
  let let145 := (Eq let143 percent)
  let let146 := (binrel% HMul.hMul let5 fmt0)
  let let147 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let146 fmt1))
  let let148 := (binrel% HAdd.hAdd let12 let146)
  let let149 := (format let8)
  let let150 := (Eq s let149)
  let let151 := (Eq let149 s)
  let let152 := (format fmt1)
  let let153 := (Eq percent let152)
  let let154 := (Eq let152 percent)
  let let155 := (Int.ofNat 120)
  let let156 := (Eq let149 let155)
  let let157 := (Eq let155 let149)
  let let158 := (binrel% HAdd.hAdd let4 fmt1)
  let let159 := (binrel% HAdd.hAdd fmt1 let4)
  let let160 := (binrel% HAdd.hAdd let4 let64)
  let let161 := (binrel% HAdd.hAdd let64 let4)
  let let162 := (format let158)
  let let163 := (Eq s let162)
  let let164 := (Eq let162 s)
  let let165 := (binrel% HAdd.hAdd let1 arg1)
  let let166 := (binrel% HAdd.hAdd arg1 let1)
  let let167 := (binrel% HAdd.hAdd fmt0 let1)
  let let168 := (Eq arg1 let167)
  let let169 := (binrel% HAdd.hAdd fmt0 let4)
  let let170 := (Eq arg1 let169)
  let let171 := (binrel% HAdd.hAdd fmt0 let22)
  let let172 := (Eq arg1 let171)
  let let173 := (Or let172 (Or let170 let168))
  let let174 := (Or (Or let172 let170) let168)
  let let175 := (Eq let155 let121)
  let let176 := (Eq let175 False)
  let let177 := (sx5fcount let56)
  let let178 := (Eq let128 (binrel% HAdd.hAdd let5 let177))
  let let179 := (Eq let177 let129)
  let let180 := (binrel% HMul.hMul let62 let22)
  let let181 := (format let165)
  let let182 := (Eq adrx5fmedhi let181)
  let let183 := (Eq let181 adrx5fmedhi)
  let let184 := (binrel% HAdd.hAdd let10 arg1)
  let let185 := (format let184)
  let let186 := (Eq adrx5fhi let185)
  let let187 := (Eq let185 adrx5fhi)
  let let188 := (Rat.ofInt 2)
  let let189 := (binrel% HMul.hMul let62 let1)
  let let190 := (format arg1)
  let let191 := (Eq adrx5flo let190)
  let let192 := (Eq let190 adrx5flo)
  let let193 := (Not (binrel% GE.ge let15 let8))
  let let194 := (binrel% HAdd.hAdd (Int.ofNat 17) let112)
  let let195 := (binrel% GE.ge let194 let56)
  let let196 := (Eq let56 let56)
  let let197 := (binrel% HAdd.hAdd let4 arg1)
  let let198 := (format let197)
  let let199 := (Eq adrx5fmedlo let198)
  let let200 := (Eq let198 adrx5fmedlo)
  let let201 := (Eq let136 let155)
  let let202 := (Eq let155 let136)
  let let203 := (Neg.neg let62)
  let let204 := (binrel% HMul.hMul let203 let10)
  let let205 := (Eq x let143)
  let let206 := (Eq let143 x)
  let let207 := (binrel% HAdd.hAdd arg1 let10)
  let let208 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let114 let22)))
  let let209 := (xx5fcount let56)
  let let210 := (Eq let105 let209)
  let let211 := (Eq let209 let105)
  let let212 := (Eq let105 (binrel% HAdd.hAdd let5 let209))
  let let213 := (binrel% HAdd.hAdd let4 let105)
  let let214 := (Eq let209 let213)
  let let215 := (binrel% GE.ge let117 let22)
  let let216 := (binrel% HAdd.hAdd let188 let141)
  let let217 := (Eq percent let70)
  let let218 := (Eq let9 let9)
  let let219 := (Eq let143 let119)
  let let220 := (Eq let119 let143)
  let let221 := (Eq fmt0 fmt1)
  let let222 := (Eq fmt1 fmt0)
  let let223 := (Eq s let79)
  let let224 := (Eq let79 s)
  let let225 := (Eq let79 let155)
  let let226 := (Eq let155 let79)
  let let227 := (Eq let8 let8)
  let let228 := (binrel% HAdd.hAdd let4 let22)
  let let229 := (Eq let10 let10)
  let let230 := (binrel% GE.ge fmt1 let1)
  let let231 := (Not let230)
  let let232 := (binrel% HMul.hMul let5 fmt1)
  let let233 := (binrel% GE.ge let232 let5)
  let let234 := (Eq x let53)
  let let235 := (Eq let53 x)
  let let236 := (Eq let82 let82)
  let let237 := (Eq let117 let22)
  let let238 := (Eq let53 let87)
  let let239 := (Eq let53 let89)
  let let240 := (Eq let53 let56)
  let let241 := (Eq let53 let8)
  let let242 := (Eq let53 let10)
  let let243 := (Or let242 (Or let241 (Or let240 (Or let239 let238))))
  let let244 := (Eq let53 percent)
  let let245 := (Or let244 (Or let55 (Or let235 let243)))
  let let246 := (Or (Or (Or (Or (Or (Or (Or let244 let55) let235) let242) let241) let240) let239) let238)
  let let247 := (Eq let53 let121)
  let let248 := (Eq let121 let53)
  let let249 := (binrel% GE.ge fmt1 let56)
  let let250 := (Not let249)
  let let251 := (binrel% HAdd.hAdd let89 let232)
  let let252 := (binrel% GE.ge let251 let1)
  let let253 := (Eq x let136)
  let let254 := (Eq let136 x)
  let let255 := (Eq fmt1 let1)
  let let256 := (And let16 let255)
  let let257 := (Eq let23 let4)
  let let258 := (And let42 (And let257 let256))
  let let259 := (Not let258)
  let let260 := (Implies let258 False)
  let let261 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let22 fmt1))
  let let262 := (Not let16)
  let let263 := (binrel% GE.ge let113 let4)
  let let264 := (binrel% LT.lt let203 let22)
  let let265 := (Eq let152 let121)
  let let266 := (Eq let121 let152)
  let let267 := (binrel% HAdd.hAdd arg1 let4)
  let let268 := (Eq let89 let89)
  let let269 := (Eq let149 let121)
  let let270 := (Eq let121 let149)
  let let271 := (Eq let143 let121)
  let let272 := (Eq let121 let143)
  let let273 := (binrel% HMul.hMul let62 let4)
  let let274 := (binrel% HMul.hMul let5 let13)
  let let275 := (Eq let14 (binrel% HAdd.hAdd let10 let274))
  let let276 := (Eq let117 let4)
  let let277 := (binrel% HMul.hMul let5 let82)
  let let278 := (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 8)) let116)
  let let279 := (format let278)
  let let280 := (Eq let279 let89)
  let let281 := (Eq let89 let279)
  let let282 := (binrel% HAdd.hAdd let18 let4)
  let let283 := (Eq percent let79)
  let let284 := (Eq let79 percent)
  let let285 := (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 9)) let116)
  let let286 := (format let285)
  let let287 := (Eq let286 let56)
  let let288 := (Eq let56 let286)
  let let289 := (binrel% HAdd.hAdd let105 let4)
  let let290 := (Eq let73 let121)
  let let291 := (Eq let121 let73)
  let let292 := (Eq let22 let22)
  let let293 := (Eq x let149)
  let let294 := (Eq let149 x)
  let let295 := (Eq let53 let155)
  let let296 := (Eq let155 let53)
  let let297 := (Eq let18 let101)
  let let298 := (Eq let101 let18)
  let let299 := (binrel% HMul.hMul let5 let8)
  let let300 := (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let188 let139))
  let let301 := (binrel% HMul.hMul let5 let22)
  let let302 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let114 let301)))
  let let303 := (binrel% HAdd.hAdd let117 let301)
  let let304 := (Eq let73 let155)
  let let305 := (Eq let155 let73)
  let let306 := (Eq let73 let119)
  let let307 := (Eq let119 let73)
  let let308 := (Eq percent let73)
  let let309 := (Eq let73 percent)
  let let310 := (Eq let73 let87)
  let let311 := (Eq let73 let89)
  let let312 := (Eq let73 let56)
  let let313 := (Eq let73 let8)
  let let314 := (Eq let73 let10)
  let let315 := (Or let314 (Or let313 (Or let312 (Or let311 let310))))
  let let316 := (Eq let73 x)
  let let317 := (Or let309 (Or let75 (Or let316 let315)))
  let let318 := (Or (Or (Or (Or (Or (Or (Or let309 let75) let316) let314) let313) let312) let311) let310)
  let let319 := (Eq let79 let119)
  let let320 := (Eq let119 let79)
  let let321 := (binrel% HAdd.hAdd let5 let18)
  let let322 := (Eq let19 let321)
  let let323 := (And let29 (And let59 (And let24 (And let322 let17))))
  let let324 := (And let31 let323)
  let let325 := (And let42 let324)
  let let326 := (Not let325)
  let let327 := (Implies let325 False)
  let let328 := (binrel% HAdd.hAdd let1 let117)
  let let329 := (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 10)) let116)
  let let330 := (format let329)
  let let331 := (Eq let330 let8)
  let let332 := (Eq let8 let330)
  let let333 := (binrel% HAdd.hAdd let109 fmt1)
  let let334 := (Eq let22 let333)
  let let335 := (binrel% HAdd.hAdd let10 let117)
  let let336 := (Eq let335 let278)
  let let337 := (And let42 let32)
  let let338 := (Not let337)
  let let339 := (Implies let337 False)
  let let340 := (Eq let119 let53)
  let let341 := (Eq s let143)
  let let342 := (Eq let143 s)
  let let343 := (Eq let2 (binrel% HAdd.hAdd let5 let64))
  let let344 := (binrel% HAdd.hAdd let4 let2)
  let let345 := (Eq let64 let344)
  let let346 := (Eq let18 let4)
  let let347 := (Eq let22 let321)
  let let348 := (Eq let143 let155)
  let let349 := (Eq let155 let143)
  let let350 := (Eq let18 let1)
  let let351 := (Eq let4 let321)
  let let352 := (binrel% HAdd.hAdd let23 let4)
  let let353 := (binrel% HAdd.hAdd fmt0 (binrel% HAdd.hAdd let232 fmtx5flength))
  let let354 := (binrel% GE.ge let353 let1)
  let let355 := (Not let354)
  let let356 := (Not let355)
  let let357 := (binrel% HAdd.hAdd (Neg.neg let56) fmt1)
  let let358 := (Eq fmt0 let357)
  let let359 := (Eq fmt1 let57)
  let let360 := (Eq let136 let119)
  let let361 := (Eq let119 let136)
  let let362 := (binrel% HAdd.hAdd let2 let4)
  let let363 := (Eq let162 let119)
  let let364 := (Eq let119 let162)
  let let365 := (Not let231)
  let let366 := (binrel% HAdd.hAdd let10 fmt0)
  let let367 := (binrel% HAdd.hAdd fmt0 let10)
  let let368 := (And let33 let324)
  let let369 := (Not let368)
  let let370 := (Implies let368 False)
  let let371 := (Eq let149 let119)
  let let372 := (Eq let119 let149)
  let let373 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let114 let112)))
  let let374 := (Or False (Or let275 False))
  let let375 := (binrel% HAdd.hAdd fmt1 let11)
  let let376 := (binrel% HAdd.hAdd let1 let22)
  let let377 := (format let207)
  let let378 := (Eq let377 adrx5fhi)
  let let379 := (format let166)
  let let380 := (Eq let379 adrx5fmedhi)
  let let381 := (format let267)
  let let382 := (Eq let381 adrx5fmedlo)
  let let383 := (format let159)
  let let384 := (Eq let383 s)
  let let385 := (Not let154)
  let let386 := (And let385 (And let384 (And let192 (And let382 (And let380 let378)))))
  let let387 := (And (And (And (And (And let385 let384) let192) let382) let380) let378)
  let let388 := (And let59 let25)
  let let389 := (And let29 let388)
  let let390 := (And let31 let389)
  let let391 := (And let33 let390)
  let let392 := (Not let391)
  let let393 := (Implies let391 False)
  let let394 := (Eq let18 let99)
  let let395 := (binrel% HAdd.hAdd (Neg.neg let10) fmt1)
  let let396 := (Eq let22 let395)
  let let397 := (Eq let22 let12)
  let let398 := (Eq fmt1 let56)
  let let399 := (Eq let22 let357)
  let let400 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let113 let82))
  let let401 := (Eq let1 let12)
  let let402 := (binrel% HAdd.hAdd let8 fmt0)
  let let403 := (binrel% HAdd.hAdd fmt0 let8)
  let let404 := (And let31 let256)
  let let405 := (And let42 let404)
  let let406 := (Not let405)
  let let407 := (Implies let405 False)
  let let408 := (Eq let64 let128)
  let let409 := (Eq let128 let64)
  let let410 := (binrel% HAdd.hAdd let22 let83)
  let let411 := (binrel% HAdd.hAdd let101 let4)
  let let412 := (binrel% LT.lt fmt1 let56)
  let let413 := (Eq let117 let1)
  let let414 := (Eq let123 let123)
  let let415 := (Not let9)
  let let416 := (Not let415)
  let let417 := (Eq let416 let9)
  let let418 := (binrel% HAdd.hAdd let22 let232)
  let let419 := (binrel% HAdd.hAdd let5 fmt1)
  let let420 := (Eq fmt0 let419)
  let let421 := (binrel% HAdd.hAdd let4 fmt0)
  let let422 := (Eq fmt1 let421)
  let let423 := (binrel% HAdd.hAdd let4 let26)
  let let424 := (Eq let2 let423)
  let let425 := (binrel% HAdd.hAdd let26 let4)
  let let426 := (And let271 let201)
  let let427 := (Not let426)
  let let428 := (Implies let427 let210)
  let let429 := (Implies let426 let212)
  let let430 := (Eq let101 let105)
  let let431 := (And let269 let348)
  let let432 := (Not let431)
  let let433 := (Implies let432 let430)
  let let434 := (Implies let431 let106)
  let let435 := (And let247 let156)
  let let436 := (Not let435)
  let let437 := (Implies let436 let297)
  let let438 := (Implies let435 let102)
  let let439 := (And let122 let295)
  let let440 := (Not let439)
  let let441 := (Implies let440 let20)
  let let442 := (Implies let439 let322)
  let let443 := (Eq let70 let121)
  let let444 := (And let443 let225)
  let let445 := (Not let444)
  let let446 := (Implies let445 let24)
  let let447 := (Implies let444 let76)
  let let448 := (Eq let70 let155)
  let let449 := (And let290 let448)
  let let450 := (Not let449)
  let let451 := (Implies let450 let31)
  let let452 := (Implies let449 let257)
  let let453 := (Eq let128 let177)
  let let454 := (And let271 let360)
  let let455 := (Not let454)
  let let456 := (Implies let455 let453)
  let let457 := (Implies let454 let178)
  let let458 := (And let269 let219)
  let let459 := (Not let458)
  let let460 := (Implies let459 let408)
  let let461 := (Eq let64 (binrel% HAdd.hAdd let5 let128))
  let let462 := (Implies let458 let461)
  let let463 := (And let247 let371)
  let let464 := (Not let463)
  let let465 := (Implies let464 let65)
  let let466 := (Implies let463 let343)
  let let467 := (Implies let124 let59)
  let let468 := (Implies let123 let27)
  let let469 := (And let443 let319)
  let let470 := (Not let469)
  let let471 := (Implies let470 let29)
  let let472 := (Implies let469 let47)
  let let473 := (And let290 let134)
  let let474 := (Not let473)
  let let475 := (Implies let474 let42)
  let let476 := (Implies let473 let33)
  let let477 := (Eq let143 let87)
  let let478 := (Eq let143 let89)
  let let479 := (Eq let143 let56)
  let let480 := (Eq let143 let8)
  let let481 := (Eq let143 let10)
  let let482 := (Or let481 (Or let480 (Or let479 (Or let478 let477))))
  let let483 := (Or let271 (Or let219 (Or let348 let482)))
  let let484 := (Eq let149 let87)
  let let485 := (Eq let149 let89)
  let let486 := (Eq let149 let56)
  let let487 := (Eq let149 let8)
  let let488 := (Eq let149 let10)
  let let489 := (Or let488 (Or let487 (Or let486 (Or let485 let484))))
  let let490 := (Or let269 (Or let371 (Or let156 let489)))
  let let491 := (Or let247 (Or let120 (Or let295 let243)))
  let let492 := (Eq let79 let87)
  let let493 := (Eq let79 let89)
  let let494 := (Eq let79 let56)
  let let495 := (Eq let79 let8)
  let let496 := (Eq let79 let10)
  let let497 := (Or let496 (Or let495 (Or let494 (Or let493 let492))))
  let let498 := (Or let122 (Or let319 (Or let225 let497)))
  let let499 := (Or let443 (Or let134 (Or let448 let94)))
  let let500 := (Or let290 (Or let306 (Or let304 let315)))
  let let501 := (Eq fmt1 let4)
  let let502 := (Or let85 (Or let501 (Or let255 (Or let37 (Or let9 let398)))))
  let let503 := (And let502 (And let275 (And let500 (And let499 (And let498 (And let491 (And let490 (And let483 (And let476 (And let475 (And let472 (And let471 (And let468 (And let467 (And let466 (And let465 (And let462 (And let460 (And let457 (And let456 (And let452 (And let451 (And let447 (And let446 (And let442 (And let441 (And let438 (And let437 (And let434 (And let433 (And let429 let428)))))))))))))))))))))))))))))))
  let let504 := (And let16 (And let250 (And let230 (And let193 let503))))
  let let505 := (And True (And True (And True (And True (And True (And True (And True (And True (And True (And True (And True (And let16 (And let250 (And let230 (And let16 (And let193 (And True let503)))))))))))))))))
  let let506 := (Eq let26 let28)
  let let507 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let301 fmt1))
  let let508 := (xx5fcount let507)
  let let509 := (binrel% HMul.hMul let109 let508)
  let let510 := (sx5fcount let507)
  let let511 := (binrel% HMul.hMul let109 let510)
  let let512 := (binrel% HAdd.hAdd let511 let509)
  let let513 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let114 let512)))
  let let514 := (binrel% HAdd.hAdd let117 let512)
  let let515 := (Eq fmt0 let395)
  let let516 := (Eq fmt1 let366)
  let let517 := (Eq let119 let121)
  let let518 := (Not let517)
  let let519 := (Eq let517 False)
  let let520 := (binrel% HAdd.hAdd let4 let28)
  let let521 := (Eq let26 let520)
  let let522 := (binrel% HAdd.hAdd let28 let4)
  let let523 := (Eq s let70)
  let let524 := (Or let145 (Or let342 (Or let206 let482)))
  let let525 := (Or (Or (Or (Or (Or (Or (Or let145 let342) let206) let481) let480) let479) let478) let477)
  let let526 := (Eq let149 percent)
  let let527 := (Or let526 (Or let151 (Or let294 let489)))
  let let528 := (Or (Or (Or (Or (Or (Or (Or let526 let151) let294) let488) let487) let486) let485) let484)
  let let529 := (Or let284 (Or let224 (Or let81 let497)))
  let let530 := (Or (Or (Or (Or (Or (Or (Or let284 let224) let81) let496) let495) let494) let493) let492)
  let let531 := (Eq x let73)
  let let532 := (Eq let22 let419)
  let let533 := (Eq fmt0 let333)
  let let534 := (Eq fmt1 let402)
  let let535 := (Eq fmt0 let12)
  let let536 := (binrel% HAdd.hAdd let1 fmt0)
  let let537 := (Eq fmt1 let536)
  let let538 := (format let117)
  let let539 := (Eq let538 let10)
  let let540 := (Eq let10 let538)
  let let541 := (Not let445)
  let let542 := (Eq let444 let541)
  let let543 := (Eq let541 let444)
  let let544 := (Not let262)
  let let545 := (xx5fcount let147)
  let let546 := (binrel% HMul.hMul let109 let545)
  let let547 := (sx5fcount let147)
  let let548 := (binrel% HMul.hMul let109 let547)
  let let549 := (binrel% HAdd.hAdd arg1 (binrel% HAdd.hAdd let548 let546))
  let let550 := (Eq arg0 let549)
  let let551 := (binrel% HMul.hMul let8 let545)
  let let552 := (binrel% HMul.hMul let8 let547)
  let let553 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let552 let551))
  let let554 := (Eq arg1 let553)
  let let555 := (Eq let121 let79)
  let let556 := (binrel% HMul.hMul let5 let1)
  let let557 := (And let42 (And let31 (And let29 (And let76 let38))))
  let let558 := (Not let557)
  let let559 := (Implies let557 False)
  let let560 := (binrel% HAdd.hAdd fmt1 let556)
  let let561 := (binrel% HSub.hSub fmt1 let1)
  let let562 := (binrel% HAdd.hAdd let561 let146)
  let let563 := (binrel% HSub.hSub let561 fmt0)
  let let564 := (Eq let121 let70)
  let let565 := (xx5fcount let563)
  let let566 := (binrel% HMul.hMul let8 let565)
  let let567 := (sx5fcount let563)
  let let568 := (binrel% HMul.hMul let8 let567)
  let let569 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let568 let566))
  let let570 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd arg0 let568) let566)
  let let571 := (Eq let439 let439)
  let let572 := (Eq let255 let255)
  let let573 := (Eq percent let149)
  let let574 := (binrel% HAdd.hAdd distance fmtx5flength)
  let let575 := (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd arg0 let574))
  let let576 := (binrel% HAdd.hAdd let109 fmtx5flength)
  let let577 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd distance let576))
  let let578 := (binrel% HAdd.hAdd fmtx5flength let109)
  let let579 := (binrel% HAdd.hAdd fmtx5flength let299)
  let let580 := (binrel% HSub.hSub fmtx5flength let8)
  let let581 := (Eq let155 let155)
  let let582 := (Eq percent let53)
  let let583 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd distance let580))
  let let584 := (Eq let119 let119)
  let let585 := (binrel% GE.ge arg1 let583)
  let let586 := (Not let585)
  let let587 := (binrel% LT.lt arg1 let583)
  let let588 := (Eq let121 let121)
  let let589 := (binrel% HMul.hMul let5 arg1)
  let let590 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let589 distance))
  let let591 := (binrel% GE.ge let590 let4)
  let let592 := (Not let591)
  let let593 := (binrel% GE.ge arg1 (binrel% HAdd.hAdd arg0 distance))
  let let594 := (Not False)
  let let595 := (binrel% LE.le fmt1 let169)
  let let596 := (Not let595)
  let let597 := (binrel% GT.gt fmt1 let169)
  let let598 := (Eq let19 let23)
  let let599 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd fmt0 fmtx5flength))
  let let600 := (binrel% GE.ge fmt1 let599)
  let let601 := (binrel% HAdd.hAdd let5 fmtx5flength)
  let let602 := (binrel% HAdd.hAdd fmtx5flength let5)
  let let603 := (Eq let119 let155)
  let let604 := (Not let603)
  let let605 := (Eq let603 False)
  let let606 := (binrel% HAdd.hAdd fmt0 let133)
  let let607 := (binrel% GE.ge fmt1 let606)
  let let608 := (Not let607)
  let let609 := (binrel% LT.lt fmt1 let606)
  let let610 := (binrel% HAdd.hAdd arg1 let146)
  let let611 := (binrel% GE.ge let610 let22)
  let let612 := (binrel% GE.ge arg1 fmt0)
  let let613 := (Not let474)
  let let614 := (Eq let473 let613)
  let let615 := (Eq let613 let473)
  let let616 := (Eq let177 let128)
  let let617 := (binrel% HMul.hMul let5 distance)
  let let618 := (binrel% HAdd.hAdd fmt0 let617)
  let let619 := (binrel% HSub.hSub fmt0 distance)
  let let620 := (binrel% HAdd.hAdd fmt0 let601)
  let let621 := (Not let175)
  let let622 := (And let145 let254)
  let let623 := (Not let622)
  let let624 := (Implies let623 let211)
  let let625 := (Eq let209 let289)
  let let626 := (Implies let622 let625)
  let let627 := (And let626 let624)
  let let628 := (Eq let105 let101)
  let let629 := (And let526 let206)
  let let630 := (Not let629)
  let let631 := (Implies let630 let628)
  let let632 := (Eq let105 let411)
  let let633 := (Implies let629 let632)
  let let634 := (And let244 let294)
  let let635 := (Not let634)
  let let636 := (Implies let635 let298)
  let let637 := (Eq let101 let282)
  let let638 := (Implies let634 let637)
  let let639 := (Eq let18 let19)
  let let640 := (And let284 let235)
  let let641 := (Not let640)
  let let642 := (Implies let641 let639)
  let let643 := (Eq let18 let100)
  let let644 := (Implies let640 let643)
  let let645 := (And let96 let81)
  let let646 := (Not let645)
  let let647 := (Implies let646 let598)
  let let648 := (Eq let19 let352)
  let let649 := (Implies let645 let648)
  let let650 := (And let309 let72)
  let let651 := (Not let650)
  let let652 := (Implies let651 let31)
  let let653 := (Implies let650 let257)
  let let654 := (And let145 let138)
  let let655 := (Not let654)
  let let656 := (Implies let655 let616)
  let let657 := (Eq let177 let130)
  let let658 := (Implies let654 let657)
  let let659 := (And let526 let342)
  let let660 := (Not let659)
  let let661 := (Implies let660 let409)
  let let662 := (Eq let128 let161)
  let let663 := (Implies let659 let662)
  let let664 := (And let244 let151)
  let let665 := (Not let664)
  let let666 := (Implies let665 let66)
  let let667 := (Eq let64 let362)
  let let668 := (Implies let664 let667)
  let let669 := (And let284 let55)
  let let670 := (Not let669)
  let let671 := (Implies let670 let60)
  let let672 := (Eq let2 let425)
  let let673 := (Implies let669 let672)
  let let674 := (And let96 let224)
  let let675 := (Not let674)
  let let676 := (Implies let675 let506)
  let let677 := (Eq let26 let522)
  let let678 := (Implies let674 let677)
  let let679 := (And let309 let95)
  let let680 := (Not let679)
  let let681 := (Implies let680 let42)
  let let682 := (Implies let679 let33)
  let let683 := (Eq fmt1 let58)
  let let684 := (Eq fmt1 let403)
  let let685 := (Eq fmt1 let367)
  let let686 := (Eq fmt1 let167)
  let let687 := (Eq fmt1 let169)
  let let688 := (Eq fmt1 let171)
  let let689 := (Or (Or (Or (Or (Or let688 let687) let686) let685) let684) let683)
  let let690 := (Eq arg1 let570)
  let let691 := (Eq arg0 let619)
  let let692 := (Eq fmt0 let22)
  let let693 := (Eq x let155)
  let let694 := (Eq s let119)
  let let695 := (Eq percent let121)
  let let696 := (Eq adrx5fhi let89)
  let let697 := (Eq adrx5fmedhi let56)
  let let698 := (Eq adrx5fmedlo let8)
  let let699 := (Eq adrx5flo let10)
  let let700 := (Eq fmtx5flength let89)
  let let701 := (Eq distance let82)
  let let702 := (And let701 (And let700 (And let699 (And let698 (And let697 (And let696 (And let695 (And let694 (And let693 (And let692 (And let691 (And let612 (And let609 (And let597 (And let593 (And let587 (And let690 (And let689 (And let174 (And let318 (And let98 (And let530 (And let246 (And let528 (And let525 (And let682 (And let681 (And let678 (And let676 (And let673 (And let671 (And let668 (And let666 (And let663 (And let661 (And let658 (And let656 (And let653 (And let652 (And let649 (And let647 (And let644 (And let642 (And let638 (And let636 (And let633 (And let631 let627)))))))))))))))))))))))))))))))))))))))))))))))
  let let703 := (And (And (And (And (And (And (And (And (And (And (And let701 let700) let699) let698) let697) let696) (And (And let695 let694) let693)) (And (And (And (And (And (And (And let692 let691) let612) let609) let597) let593) let587) let690)) (And let689 let174)) (And (And (And (And (And let318 let98) let530) let246) let528) let525)) (And (And (And (And (And (And let682 let681) (And let678 let676)) (And let673 let671)) (And let668 let666)) (And let663 let661)) (And let658 let656))) (And (And (And (And (And (And let653 let652) (And let649 let647)) (And let644 let642)) (And let638 let636)) (And let633 let631)) let627))
  let let704 := (And let33 let41)
  let let705 := (Not let704)
  let let706 := (Implies let704 False)
  let let707 := (Eq arg1 let117)
  let let708 := (binrel% HAdd.hAdd arg1 let112)
  let let709 := (Eq let83 let708)
  let let710 := (Rat.ofInt let13)
  let let711 := (binrel% HMul.hMul let62 let13)
  let let712 := (Not let450)
  let let713 := (Eq let449 let712)
  let let714 := (Eq let712 let449)
  let let715 := (Eq let473 let473)
  let let716 := (Eq let128 let160)
  let let717 := (Not let470)
  let let718 := (Eq let717 let469)
  let let719 := (binrel% HAdd.hAdd let4 let117)
  let let720 := (Eq let719 let329)
  let let721 := (Eq let444 let444)
  let let722 := (Not let440)
  let let723 := (Eq let722 let439)
  let let724 := (Not let255)
  let let725 := (Not let724)
  let let726 := (Eq let725 let255)
  let let727 := (Eq let439 let722)
  let let728 := (binrel% HAdd.hAdd let82 let89)
  let let729 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let113 let728))
  let let730 := (Eq let255 let725)
  let let731 := (And let42 (And let257 let30))
  let let732 := (Not let731)
  let let733 := (Implies let731 False)
  let let734 := (binrel% LE.le let140 let203)
  let let735 := (binrel% HAdd.hAdd let62 let139)
  let let736 := (binrel% HAdd.hAdd let62 let735)
  let let737 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let5 let14) let274))
  let let738 := (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let710 let737))
  let let739 := (binrel% HMul.hMul let203 let15)
  let let740 := (binrel% GT.gt let62 let22)
  let let741 := (Eq let2 let4)
  let let742 := (Eq let22 let6)
  let let743 := (Eq let328 let285)
  let let744 := (Eq let469 let717)
  let let745 := (Neg.neg let188)
  let let746 := (binrel% HAdd.hAdd let140 let735)
  let let747 := (Or let688 (Or let687 (Or let686 (Or let685 (Or let684 let683)))))
  let let748 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let589 let574))
  let let749 := (binrel% GE.ge let748 let56)
  let let750 := (Not let749)
  let let751 := (binrel% GE.ge arg1 let575)
  let let752 := (And let42 let390)
  let let753 := (Not let752)
  let let754 := (Implies let752 False)
  let let755 := (binrel% LE.le let140 let139)
  let let756 := (Eq let449 let449)
  let let757 := (And let42 (And let257 let389))
  let let758 := (Not let757)
  let let759 := (Implies let757 False)
  let let760 := (Eq let469 let469)
  let let761 := (binrel% LE.le let140 let745)
  let let762 := (binrel% HAdd.hAdd let62 let141)
  let let763 := (And let42 (And let257 let323))
  let let764 := (Not let763)
  let let765 := (Implies let763 False)
  let let766 := (Eq let9 let416)
  let let767 := (And let33 let404)
  let let768 := (Not let767)
  let let769 := (Implies let767 False)
  let let770 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let232 let89))
  let let771 := (Eq let249 let249)
  let let772 := (Not let250)
  let let773 := (Eq let772 let249)
  let let774 := (Eq let155 let70)
  let let775 := (Not let750)
  let let776 := (Eq let249 let772)
  let let777 := (binrel% HAdd.hAdd fmt0 let232)
  let let778 := (binrel% GE.ge let777 let5)
  let let779 := (binrel% LE.le fmt1 let421)
  let let780 := (And let42 (And let257 let40))
  let let781 := (Not let780)
  let let782 := (Implies let780 False)
  let let783 := (Eq let4 let12)
  let let784 := (And let42 (And let31 (And let29 (And let59 (And let76 let21)))))
  let let785 := (Not let784)
  let let786 := (Implies let784 False)
  let let787 := (And let42 (And let31 (And let47 let388)))
  let let788 := (Not let787)
  let let789 := (Implies let787 False)
  let let790 := (Implies let703 let387)
  let let791 := (Not let790)
  let let792 := (Not let265)
  let let793 := (And let792 (And let363 (And let539 (And let331 (And let287 let280)))))
  let let794 := (Implies let504 let793)
  let let795 := (Not let794)
  let let796 := (Not let153)
  let let797 := (And let796 (And let163 (And let191 (And let199 (And let182 let186)))))
  let let798 := (And let144 let253)
  let let799 := (Not let798)
  let let800 := (Implies let799 let210)
  let let801 := (Implies let798 let212)
  let let802 := (And let573 let205)
  let let803 := (Not let802)
  let let804 := (Implies let803 let430)
  let let805 := (Implies let802 let106)
  let let806 := (And let582 let293)
  let let807 := (Not let806)
  let let808 := (Implies let807 let297)
  let let809 := (Implies let806 let102)
  let let810 := (And let283 let234)
  let let811 := (Not let810)
  let let812 := (Implies let811 let20)
  let let813 := (Implies let810 let322)
  let let814 := (And let217 let80)
  let let815 := (Not let814)
  let let816 := (Implies let815 let24)
  let let817 := (Implies let814 let76)
  let let818 := (And let308 let71)
  let let819 := (Not let818)
  let let820 := (Implies let819 let31)
  let let821 := (Implies let818 let257)
  let let822 := (And let144 let137)
  let let823 := (Not let822)
  let let824 := (Implies let823 let453)
  let let825 := (Implies let822 let178)
  let let826 := (And let573 let341)
  let let827 := (Not let826)
  let let828 := (Implies let827 let408)
  let let829 := (Implies let826 let461)
  let let830 := (And let582 let150)
  let let831 := (Not let830)
  let let832 := (Implies let831 let65)
  let let833 := (Implies let830 let343)
  let let834 := (And let283 let54)
  let let835 := (Not let834)
  let let836 := (Implies let835 let59)
  let let837 := (Implies let834 let27)
  let let838 := (And let217 let223)
  let let839 := (Not let838)
  let let840 := (Implies let839 let29)
  let let841 := (Implies let838 let47)
  let let842 := (And let308 let523)
  let let843 := (Not let842)
  let let844 := (Implies let843 let42)
  let let845 := (Implies let842 let33)
  let let846 := (Or let144 (Or let341 (Or let205 let482)))
  let let847 := (Or let573 (Or let150 (Or let293 let489)))
  let let848 := (Or let582 (Or let54 (Or let234 let243)))
  let let849 := (Or let283 (Or let223 (Or let80 let497)))
  let let850 := (Or let217 (Or let523 (Or let71 let94)))
  let let851 := (Or let308 (Or let74 (Or let531 let315)))
  let let852 := (Eq arg1 let536)
  let let853 := (Eq arg1 let421)
  let let854 := (Eq arg1 fmt0)
  let let855 := (Or let854 (Or let853 let852))
  let let856 := (Or let221 (Or let420 (Or let535 (Or let515 (Or let533 let358)))))
  let let857 := (Not let778)
  let let858 := (Eq arg0 let618)
  let let859 := (And let701 (And let700 (And let699 (And let698 (And let697 (And let696 (And let695 (And let694 (And let693 (And let692 (And let858 (And let611 (And let354 (And let857 (And let592 (And let749 (And let550 (And let856 (And let855 (And let851 (And let850 (And let849 (And let848 (And let847 (And let846 (And let845 (And let844 (And let841 (And let840 (And let837 (And let836 (And let833 (And let832 (And let829 (And let828 (And let825 (And let824 (And let821 (And let820 (And let817 (And let816 (And let813 (And let812 (And let809 (And let808 (And let805 (And let804 (And let801 let800))))))))))))))))))))))))))))))))))))))))))))))))
  let let860 := (Implies let859 let797)
  let let861 := (Not let860)
  let let862 := (format let335)
  let let863 := (Eq let89 let862)
  let let864 := (format let328)
  let let865 := (Eq let56 let864)
  let let866 := (format let719)
  let let867 := (Eq let8 let866)
  let let868 := (Not let266)
  let let869 := (And let868 (And let364 (And let540 (And let867 (And let865 let863)))))
  let let870 := (And let272 let202)
  let let871 := (Not let870)
  let let872 := (Implies let871 let210)
  let let873 := (Implies let870 let212)
  let let874 := (And let270 let349)
  let let875 := (Not let874)
  let let876 := (Implies let875 let430)
  let let877 := (Implies let874 let106)
  let let878 := (And let248 let157)
  let let879 := (Not let878)
  let let880 := (Implies let879 let297)
  let let881 := (Implies let878 let102)
  let let882 := (And let555 let296)
  let let883 := (Not let882)
  let let884 := (Implies let883 let20)
  let let885 := (Implies let882 let322)
  let let886 := (And let564 let226)
  let let887 := (Not let886)
  let let888 := (Implies let887 let24)
  let let889 := (Implies let886 let76)
  let let890 := (And let291 let774)
  let let891 := (Not let890)
  let let892 := (Implies let891 let31)
  let let893 := (Implies let890 let257)
  let let894 := (And let272 let361)
  let let895 := (Not let894)
  let let896 := (Implies let895 let453)
  let let897 := (Implies let894 let178)
  let let898 := (And let270 let220)
  let let899 := (Not let898)
  let let900 := (Implies let899 let408)
  let let901 := (Implies let898 let461)
  let let902 := (And let248 let372)
  let let903 := (Not let902)
  let let904 := (Implies let903 let65)
  let let905 := (Implies let902 let343)
  let let906 := (And let555 let340)
  let let907 := (Not let906)
  let let908 := (Implies let907 let59)
  let let909 := (Implies let906 let27)
  let let910 := (And let564 let320)
  let let911 := (Not let910)
  let let912 := (Implies let911 let29)
  let let913 := (Implies let910 let47)
  let let914 := (And let291 let135)
  let let915 := (Not let914)
  let let916 := (Implies let915 let42)
  let let917 := (Implies let914 let33)
  let let918 := (Or let272 (Or let220 (Or let349 let482)))
  let let919 := (Or let270 (Or let372 (Or let157 let489)))
  let let920 := (Or let248 (Or let340 (Or let296 let243)))
  let let921 := (Or let555 (Or let320 (Or let226 let497)))
  let let922 := (Or let564 (Or let135 (Or let774 let94)))
  let let923 := (Or let291 (Or let307 (Or let305 let315)))
  let let924 := (Eq let117 let376)
  let let925 := (Eq let117 let228)
  let let926 := (Or let237 (Or let925 let924))
  let let927 := (Or let86 (Or let532 (Or let397 (Or let396 (Or let334 let399)))))
  let let928 := (Eq let83 let514)
  let let929 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let118 let728))
  let let930 := (binrel% GE.ge let929 let56)
  let let931 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let118 let82))
  let let932 := (binrel% GE.ge let931 let4)
  let let933 := (Not let932)
  let let934 := (binrel% GE.ge let418 let5)
  let let935 := (Not let934)
  let let936 := (binrel% GE.ge let770 let1)
  let let937 := (binrel% GE.ge let303 let22)
  let let938 := (binrel% HAdd.hAdd let22 let277)
  let let939 := (Eq let83 let938)
  let let940 := (And let236 (And let268 (And let229 (And let227 (And let196 (And let268 (And let588 (And let584 (And let581 (And let292 (And let939 (And let937 (And let936 (And let935 (And let933 (And let930 (And let928 (And let927 (And let926 (And let923 (And let922 (And let921 (And let920 (And let919 (And let918 (And let917 (And let916 (And let913 (And let912 (And let909 (And let908 (And let905 (And let904 (And let901 (And let900 (And let897 (And let896 (And let893 (And let892 (And let889 (And let888 (And let885 (And let884 (And let881 (And let880 (And let877 (And let876 (And let873 let872))))))))))))))))))))))))))))))))))))))))))))))))
  let let941 := (Implies let940 let869)
  let let942 := (Not let941)
  let let943 := (Eq And And)
  let let944 := (Eq let210 let210)
  let let945 := (Eq let212 let212)
  let let946 := (Eq let430 let430)
  let let947 := (Eq let106 let106)
  let let948 := (Eq let297 let297)
  let let949 := (Eq let102 let102)
  let let950 := (Eq let20 let20)
  let let951 := (Eq let322 let322)
  let let952 := (Eq let24 let24)
  let let953 := (Eq let76 let76)
  let let954 := (Eq let31 let31)
  let let955 := (Eq let257 let257)
  let let956 := (Eq let453 let453)
  let let957 := (Eq let178 let178)
  let let958 := (Eq let408 let408)
  let let959 := (Eq let461 let461)
  let let960 := (Eq let65 let65)
  let let961 := (Eq let343 let343)
  let let962 := (Eq let59 let59)
  let let963 := (Eq let27 let27)
  let let964 := (Eq let29 let29)
  let let965 := (Eq let47 let47)
  let let966 := (Eq let42 let42)
  let let967 := (Eq let33 let33)
  let let968 := (Eq let477 let477)
  let let969 := (Eq let478 let478)
  let let970 := (Eq Or Or)
  let let971 := (Eq let479 let479)
  let let972 := (Eq let480 let480)
  let let973 := (Eq let481 let481)
  let let974 := (Eq let484 let484)
  let let975 := (Eq let485 let485)
  let let976 := (Eq let486 let486)
  let let977 := (Eq let487 let487)
  let let978 := (Eq let488 let488)
  let let979 := (Eq let238 let238)
  let let980 := (Eq let239 let239)
  let let981 := (Eq let240 let240)
  let let982 := (Eq let241 let241)
  let let983 := (Eq let242 let242)
  let let984 := (Eq let492 let492)
  let let985 := (Eq let493 let493)
  let let986 := (Eq let494 let494)
  let let987 := (Eq let495 let495)
  let let988 := (Eq let496 let496)
  let let989 := (Eq let88 let88)
  let let990 := (Eq let90 let90)
  let let991 := (Eq let91 let91)
  let let992 := (Eq let92 let92)
  let let993 := (Eq let93 let93)
  let let994 := (Eq let310 let310)
  let let995 := (Eq let311 let311)
  let let996 := (Eq let312 let312)
  let let997 := (Eq let313 let313)
  let let998 := (Eq let314 let314)
  let let999 := (Eq fmt1 fmt1)
  let let1000 := (Eq let11 let11)
  let let1001 := (Eq let109 let109)
  let let1002 := (Eq let4 let4)
  let let1003 := (Eq let5 let5)
  let let1004 := (Eq let1 let1)
  let let1005 := (And let692 (And let693 (And let694 (And let695 (And let696 (And let697 (And let698 (And let699 (And let700 let701)))))))))
  let let1006 := (Eq arg0 let83)
  let let1007 := (And let1006 let1005)
  let let1008 := (Eq arg1 arg1)
  let let1009 := (Eq arg0 arg0)
  let let1010 := (Eq let583 let575)
  let let1011 := (Eq arg0 let938)
  let let1012 := (Eq let618 let938)
  let let1013 := (Eq let617 let277)
  let let1014 := (binrel% HAdd.hAdd arg1 let512)
  let let1015 := (Eq let83 let1014)
  let let1016 := (Eq let546 let509)
  let let1017 := (Eq let545 let508)
  let let1018 := (Eq let147 let507)
  let let1019 := (Eq let146 let301)
  let let1020 := (Eq let548 let511)
  let let1021 := (Eq let547 let510)
  let let1022 := (Or let450 let450)
  let let1023 := (Not let448)
  let let1024 := (Not let257)
  let let1025 := (Not let134)
  let let1026 := (Or let1025 let1023)
  let let1027 := (Implies let134 let1023)
  let let1028 := (Not let443)
  let let1029 := (Or let1023 let1028)
  let let1030 := (Implies let448 let1028)
  let let1031 := (Eq let443 False)
  let let1032 := (Or let473 let42)
  let let1033 := (Or let613 let42)
  let let1034 := (Not let42)
  let let1035 := (Or let469 let29)
  let let1036 := (Or let717 let29)
  let let1037 := (Or let444 let24)
  let let1038 := (Or let541 let24)
  let let1039 := (Not let24)
  let let1040 := (Or let1024 let1039)
  let let1041 := (Not let29)
  let let1042 := (Or let1034 (Or let1041 let1040))
  let let1043 := (Or let415 let1042)
  let let1044 := (Or let124 let124)
  let let1045 := (Not let295)
  let let1046 := (Or (Not let120) let1045)
  let let1047 := (Implies let120 let1045)
  let let1048 := (Or let439 let20)
  let let1049 := (Or let722 let20)
  let let1050 := (Not let20)
  let let1051 := (Or let1039 let1050)
  let let1052 := (Or let1024 let1051)
  let let1053 := (Not let27)
  let let1054 := (Or let262 let415)
  let let1055 := (Or let1050 let1054)
  let let1056 := (Or let1039 let1055)
  let let1057 := (Or let1041 (Or let1053 let1056))
  let let1058 := (Eq let4 let14)
  let let1059 := (Eq let4 let13)
  let let1060 := (And let16 (And let1059 let1058))
  let let1061 := (Implies let731 let1060)
  let let1062 := (Eq let1060 False)
  let let1063 := (Or (Not let1058) False)
  let let1064 := (Not let1059)
  let let1065 := (Eq let14 let4)
  let let1066 := (Not let1065)
  let let1067 := (Or let1066 False)
  let let1068 := (binrel% HAdd.hAdd let273 let204)
  let let1069 := (binrel% HAdd.hAdd let273 let1068)
  let let1070 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let711 let739))
  let let1071 := (binrel% LE.le let1070 let1069)
  let let1072 := (binrel% LE.le let739 let204)
  let let1073 := (And let264 let16)
  let let1074 := (Implies let1073 let1072)
  let let1075 := (Eq let711 let273)
  let let1076 := (Eq let13 let4)
  let let1077 := (And let740 let1076)
  let let1078 := (Implies let1077 let1075)
  let let1079 := (Eq let63 let273)
  let let1080 := (And let740 let1065)
  let let1081 := (Implies let1080 let1079)
  let let1082 := (Or let262 (Or let415 let1060))
  let let1083 := (Eq let4 let2)
  let let1084 := (And let401 let1083)
  let let1085 := (Implies let1084 let1058)
  let let1086 := (Not let401)
  let let1087 := (Or let1086 (Or (Not let1083) let1058))
  let let1088 := (Eq let2 let14)
  let let1089 := (Eq let12 let1)
  let let1090 := (Implies let742 let1083)
  let let1091 := (Or (Not let742) let1083)
  let let1092 := (And let29 let42)
  let let1093 := (And let27 let1092)
  let let1094 := (Implies let1093 let742)
  let let1095 := (Or let1053 (Or let1041 (Or let1034 let742)))
  let let1096 := (Eq let6 let26)
  let let1097 := (Eq let22 let28)
  let let1098 := (Eq let9 let401)
  let let1099 := (And let24 let257)
  let let1100 := (And let401 (And let20 let1099))
  let let1101 := (Implies let1100 let1059)
  let let1102 := (Or let1024 let1059)
  let let1103 := (Or let1039 let1102)
  let let1104 := (Or let1086 (Or let1050 let1103))
  let let1105 := (Eq let18 let13)
  let let1106 := (Eq let4 let23)
  let let1107 := (Or let123 let59)
  let let1108 := (Or let125 let59)
  let let1109 := (Not let59)
  let let1110 := (Or let1041 (Or let1109 let1051))
  let let1111 := (Or let415 let1110)
  let let1112 := (Or let415 (Or let1034 let1110))
  let let1113 := (Not let31)
  let let1114 := (Or let1113 let1051)
  let let1115 := (Or let1109 let1114)
  let let1116 := (Or let1041 let1115)
  let let1117 := (Or let1109 let1056)
  let let1118 := (Or let1041 let1117)
  let let1119 := (Or let1113 let1118)
  let let1120 := (Eq let22 let14)
  let let1121 := (Eq let22 let13)
  let let1122 := (And let16 (And let1121 let1120))
  let let1123 := (Implies let752 let1122)
  let let1124 := (Eq let1122 False)
  let let1125 := (Or (Not let1120) False)
  let let1126 := (Not let1121)
  let let1127 := (Eq let14 let22)
  let let1128 := (Not let1127)
  let let1129 := (Or let1128 False)
  let let1130 := (binrel% HAdd.hAdd let180 let204)
  let let1131 := (binrel% HAdd.hAdd let180 let1130)
  let let1132 := (binrel% LE.le let1070 let1131)
  let let1133 := (Eq let711 let180)
  let let1134 := (Eq let13 let22)
  let let1135 := (And let740 let1134)
  let let1136 := (Implies let1135 let1133)
  let let1137 := (Eq let63 let180)
  let let1138 := (And let740 let1127)
  let let1139 := (Implies let1138 let1137)
  let let1140 := (And let401 (And let59 let1092))
  let let1141 := (Implies let1140 let1120)
  let let1142 := (Or let1034 let1120)
  let let1143 := (Or let1041 let1142)
  let let1144 := (Or let1086 (Or let1109 let1143))
  let let1145 := (And let24 let31)
  let let1146 := (And let401 (And let20 let1145))
  let let1147 := (Implies let1146 let1121)
  let let1148 := (Or let1113 let1121)
  let let1149 := (Or let1039 let1148)
  let let1150 := (Or let1086 (Or let1050 let1149))
  let let1151 := (Eq let22 let23)
  let let1152 := (Or let449 let31)
  let let1153 := (Or let712 let31)
  let let1154 := (And let16 (And let1059 let1120))
  let let1155 := (Implies let757 let1154)
  let let1156 := (Eq let1154 False)
  let let1157 := (binrel% HAdd.hAdd let180 let1068)
  let let1158 := (binrel% LE.le let1070 let1157)
  let let1159 := (Or let262 (Or let415 let1154))
  let let1160 := (Or let1050 let1159)
  let let1161 := (Not let33)
  let let1162 := (And let16 (And let1121 let1058))
  let let1163 := (Implies let391 let1162)
  let let1164 := (Eq let1162 False)
  let let1165 := (binrel% HAdd.hAdd let273 let1130)
  let let1166 := (binrel% LE.le let1070 let1165)
  let let1167 := (Or let1039 (Or let1050 (Or let262 (Or let415 let1162))))
  let let1168 := (Or let1109 let1167)
  let let1169 := (And let29 let33)
  let let1170 := (And let401 (And let59 let1169))
  let let1171 := (Implies let1170 let1058)
  let let1172 := (Or let1161 let1058)
  let let1173 := (Or let1041 let1172)
  let let1174 := (Or let1086 (Or let1109 let1173))
  let let1175 := (Eq let4 let28)
  let let1176 := (Not let322)
  let let1177 := (Or let1039 let1176)
  let let1178 := (Or let1041 (Or let1109 (Or let1039 (Or let1176 let1054))))
  let let1179 := (Eq let1 let13)
  let let1180 := (And let16 (And let1179 let1120))
  let let1181 := (Implies let763 let1180)
  let let1182 := (binrel% HAdd.hAdd let180 (binrel% HAdd.hAdd let189 let204))
  let let1183 := (binrel% LE.le let1070 let1182)
  let let1184 := (Eq let711 let189)
  let let1185 := (Eq let13 let1)
  let let1186 := (And let740 let1185)
  let let1187 := (Eq let1 let18)
  let let1188 := (And let401 let1187)
  let let1189 := (And let322 let1099)
  let let1190 := (Eq let321 let19)
  let let1191 := (binrel% GE.ge fmt1 let10)
  let let1192 := (Or let724 let1113)
  let let1193 := (Or let262 let724)
  let let1194 := (Or let1113 let1193)
  let let1195 := (Implies let405 let1122)
  let let1196 := (And let397 let42)
  let let1197 := (Implies let1196 let1120)
  let let1198 := (Not let397)
  let let1199 := (Or let1198 let1142)
  let let1200 := (Eq let28 let14)
  let let1201 := (Eq let12 let22)
  let let1202 := (Eq let255 let397)
  let let1203 := (And let397 let31)
  let let1204 := (Implies let1203 let1121)
  let let1205 := (Or let1198 let1148)
  let let1206 := (Eq let23 let13)
  let let1207 := (Implies let767 let1162)
  let let1208 := (And let397 let33)
  let let1209 := (Implies let258 let1154)
  let let1210 := (And let397 let257)
  let let1211 := (Or let231 (Or let255 let1191))
  let let1212 := (Or let231 (Or let725 let1191))
  let let1213 := (And let230 let724)
  let let1214 := (Implies let1213 let1191)
  let let1215 := (Not let1191)
  let let1216 := (Or let1215 let37)
  let let1217 := (Or let249 (Or let9 let1216))
  let let1218 := (Or let772 (Or let416 let1216))
  let let1219 := (And let250 (And let415 let1191))
  let let1220 := (Eq let10 fmt1)
  let let1221 := (And let1191 (And let250 let415))
  let let1222 := (Not let37)
  let let1223 := (Or let262 let1222)
  let let1224 := (Or let1039 let1223)
  let let1225 := (Or let1041 let1224)
  let let1226 := (Implies let780 let1154)
  let let1227 := (Or let262 (Or let1222 let1154))
  let let1228 := (And let783 let1092)
  let let1229 := (Implies let1228 let1120)
  let let1230 := (Not let783)
  let let1231 := (Or let1230 let1143)
  let let1232 := (Eq let26 let14)
  let let1233 := (Eq let12 let4)
  let let1234 := (Eq let37 let783)
  let let1235 := (And let783 let1099)
  let let1236 := (Eq let19 let13)
  let let1237 := (Or let415 let1034)
  let let1238 := (Or let1034 let1041)
  let let1239 := (Or let415 let1238)
  let let1240 := (Or let415 (Or let1034 (Or let1041 let1039)))
  let let1241 := (Or let1041 (Or let1109 (Or let1113 let1177)))
  let let1242 := (Or let1113 let1178)
  let let1243 := (Implies let325 let1154)
  let let1244 := (Eq let4 let18)
  let let1245 := (And let401 let1244)
  let let1246 := (Implies let1245 let1059)
  let let1247 := (Or let1086 (Or (Not let1244) let1059))
  let let1248 := (Implies let347 let1244)
  let let1249 := (Or (Not let347) let1244)
  let let1250 := (And let322 let1145)
  let let1251 := (Implies let1250 let347)
  let let1252 := (Or let1176 (Or let1039 (Or let1113 let347)))
  let let1253 := (Or let1041 let1051)
  let let1254 := (Or let1041 (Or let1053 let1114))
  let let1255 := (Or let1113 let1057)
  let let1256 := (Implies let337 let1162)
  let let1257 := (Not let225)
  let let1258 := (Not let122)
  let let1259 := (Or let1257 let1258)
  let let1260 := (Implies let225 let1258)
  let let1261 := (Eq let122 False)
  let let1262 := (Not let76)
  let let1263 := (Implies let784 let1154)
  let let1264 := (Eq let4 let19)
  let let1265 := (And let401 (And let20 let1264))
  let let1266 := (Or (Not let1264) let1059)
  let let1267 := (Implies let69 let1264)
  let let1268 := (Or (Not let69) let1264)
  let let1269 := (And let76 let31)
  let let1270 := (Implies let1269 let69)
  let let1271 := (Or let1262 (Or let1113 let69))
  let let1272 := (Or let1034 let470)
  let let1273 := (Not let319)
  let let1274 := (Or let1273 let470)
  let let1275 := (Or let1273 let1257)
  let let1276 := (Implies let319 let1257)
  let let1277 := (Or let1273 let1258)
  let let1278 := (Implies let319 let1258)
  let let1279 := (Or let122 let225)
  let let1280 := (Not let47)
  let let1281 := (Implies let787 let1162)
  let let1282 := (Eq let4 let26)
  let let1283 := (And let401 (And let59 let1282))
  let let1284 := (Or (Not let1282) let1058)
  let let1285 := (Implies let52 let1282)
  let let1286 := (Or (Not let52) let1282)
  let let1287 := (And let47 let42)
  let let1288 := (Implies let1287 let52)
  let let1289 := (Or let1280 (Or let1034 let52))
  let let1290 := (Or let470 let1034)
  let let1291 := (Or let1113 let1039)
  let let1292 := (Implies let48 let1162)
  let let1293 := (Or let1039 (Or let262 (Or let1222 let1162)))
  let let1294 := (And let783 let1282)
  let let1295 := (And let783 let1145)
  let let1296 := (Implies let1295 let1121)
  let let1297 := (Or let1230 let1149)
  let let1298 := (Or let1222 let1238)
  let let1299 := (Or let1041 let1291)
  let let1300 := (Or let1113 let1225)
  let let1301 := (Implies let43 let1122)
  let let1302 := (Implies let557 let1154)
  let let1303 := (And let783 let1264)
  let let1304 := (Or let1025 let1028)
  let let1305 := (Implies let134 let1028)
  let let1306 := (Or let415 let1109)
  let let1307 := (Implies let368 let1060)
  let let1308 := (Eq let1 let14)
  let let1309 := (And let16 (And let1121 let1308))
  let let1310 := (Implies let34 let1309)
  let let1311 := (Eq let14 let1)
  let let1312 := (Not let1311)
  let let1313 := (binrel% HAdd.hAdd let189 let1130)
  let let1314 := (binrel% LE.le let1070 let1313)
  let let1315 := (Eq let63 let189)
  let let1316 := (And let740 let1311)
  let let1317 := (Eq let1 let2)
  let let1318 := (And let401 let1317)
  let let1319 := (And let27 let1169)
  let let1320 := (Implies let704 let1162)
  let let1321 := (And let783 let1169)
(Eq let7 let3) → (Eq let36 let35) → (Eq let45 let44) → (Eq let50 let49) → (Eq let52 let51) → (Eq let55 let54) → (Eq let58 let57) → (Eq let60 let59) → (Eq let63 let61) → (Eq let66 let65) → (Eq let69 let67) → (Eq let72 let71) → (Eq let75 let74) → (Eq let78 let76) → (Eq let81 let80) → (Eq let84 True) → (Eq let86 let85) → (Eq let98 let97) → (Eq let100 let99) → (Eq let104 let102) → (Eq let108 let106) → (Eq let118 let113) → (Eq let127 let126) → (Eq let130 let129) → (Eq let133 let132) → (Eq let135 let134) → (Eq let138 let137) → (Eq let142 let139) → (Eq let145 let144) → (Eq let148 let147) → (Eq let151 let150) → (Eq let154 let153) → (Eq let157 let156) → (Eq let159 let158) → (Eq let161 let160) → (Eq let164 let163) → (Eq let166 let165) → (Eq let174 let173) → let176 → (Eq let179 let178) → (Eq let180 let140) → (Eq let183 let182) → (Eq let187 let186) → (Eq let189 let188) → (Eq let192 let191) → (Eq let195 let193) → (Eq let196 True) → (Eq let200 let199) → (Eq let202 let201) → (Eq let204 let139) → (Eq let206 let205) → (Eq let207 let184) → (Eq let131 let5) → (Eq let208 let117) → (Eq let211 let210) → (Eq let214 let212) → (Eq let215 let16) → (Eq let216 let203) → (Eq let96 let217) → (Eq let218 True) → (Eq let220 let219) → (Eq let222 let221) → (Eq let224 let223) → (Eq let226 let225) → (Eq let227 True) → (Eq let228 let4) → (Eq let229 True) → (Eq let233 let231) → (Eq let235 let234) → (Eq let236 True) → (Eq let237 False) → (Eq let246 let245) → (Eq let248 let247) → (Eq let252 let250) → (Eq let254 let253) → (Eq let260 let259) → (Eq let261 let12) → (Eq let263 let262) → (Eq let264 True) → (Eq let266 let265) → (Eq let267 let197) → (Eq let268 True) → (Eq let270 let269) → (Eq let272 let271) → (Eq let273 let62) → (Eq let276 let275) → (Eq let277 let83) → (Eq let281 let280) → (Eq let282 let103) → (Eq let284 let283) → (Eq let288 let287) → (Eq let289 let213) → (Eq let291 let290) → (Eq let292 True) → (Eq let294 let293) → (Eq let296 let295) → (Eq let298 let297) → (Eq let299 let109) → (Eq let300 let203) → (Eq let303 let302) → (Eq let305 let304) → (Eq let307 let306) → (Eq let309 let308) → (Eq let318 let317) → (Eq let320 let319) → (Eq let327 let326) → (Eq let328 let328) → (Eq let332 let331) → (Eq let334 let9) → let336 → (Eq let339 let338) → (Eq let340 let120) → (Eq let335 let335) → (Eq let342 let341) → (Eq let345 let343) → (Eq let347 let346) → (Eq let349 let348) → (Eq let351 let350) → (Eq let352 let77) → (Eq let356 let354) → (Eq let359 let358) → (Eq let361 let360) → (Eq let362 let344) → (Eq let364 let363) → (Eq let365 let230) → (Eq let367 let366) → (Eq let370 let369) → (Eq let372 let371) → (Eq let373 let83) → (Eq let374 let275) → (Eq let375 let12) → (Eq let376 let1) → (Eq let387 let386) → (Eq let393 let392) → (Eq let394 let322) → (Eq let396 let37) → (Eq let397 let255) → (Eq let301 let22) → (Eq let399 let398) → (Eq let400 let113) → (Eq let401 let9) → (Eq let403 let402) → (Eq let407 let406) → (Eq let409 let408) → (Eq let171 fmt0) → (Eq let410 let83) → (Eq let411 let107) → (Eq let412 let250) → (Eq let413 False) → (Eq let414 True) → let417 → (Eq let418 let232) → (Eq let422 let420) → (Eq let424 let27) → (Eq let425 let423) → (Eq let505 let504) → (Eq let506 let29) → (Eq let514 let513) → (Eq let516 let515) → (Eq let519 let518) → (Eq let521 let47) → (Eq let522 let520) → (Eq let95 let523) → (Eq let525 let524) → (Eq let528 let527) → (Eq let530 let529) → (Eq let316 let531) → (Eq let532 let501) → (Eq let169 let421) → (Eq let534 let533) → (Eq let537 let535) → (Eq let540 let539) → (Eq let543 let542) → (Eq let544 let16) → (Eq let554 let550) → (Eq let555 let122) → (Eq let556 let11) → (Eq let559 let558) → (Eq let561 let560) → (Eq let563 let562) → (Eq let564 let443) → (Eq let570 let569) → (Eq let571 True) → (Eq let572 True) → (Eq let526 let573) → (Eq let577 let575) → (Eq let578 let576) → (Eq let580 let579) → (Eq let581 True) → (Eq let244 let582) → (Eq let583 let583) → (Eq let584 True) → (Eq let587 let586) → (Eq let588 True) → (Eq let593 let592) → (Eq let594 True) → (Eq let597 let596) → (Eq let598 let24) → (Eq let600 let355) → (Eq let602 let601) → (Eq let605 let604) → (Eq let609 let608) → (Eq let612 let611) → (Eq let615 let614) → (Eq let616 let453) → (Eq let619 let618) → (Eq let620 let599) → (Eq let176 let621) → (Eq let703 let702) → (Eq let706 let705) → (Eq let709 let707) → (Eq let711 let710) → let605 → (Eq let714 let713) → (Eq let715 True) → let615 → (Eq let716 let461) → let718 → let720 → (Eq let721 True) → (Eq let719 let719) → let543 → let723 → let726 → (Eq let723 let727) → (Eq let729 let194) → (Eq let726 let730) → (Eq let733 let732) → (Eq let734 False) → (Eq let736 let203) → (Eq let738 let140) → (Eq let739 let737) → (Eq let740 True) → let519 → (Eq let742 let741) → let743 → (Eq let718 let744) → (Eq let746 let745) → (Eq let689 let747) → let127 → (Eq let628 let430) → (Eq let751 let750) → (Eq let754 let753) → (Eq let755 False) → (Eq let756 True) → let714 → (Eq let759 let758) → (Eq let760 True) → (Eq let761 False) → (Eq let762 let745) → (Eq let765 let764) → (Eq let417 let766) → (Eq let769 let768) → (Eq let770 let251) → (Eq let771 True) → let773 → (Eq let774 let448) → (Eq let775 let749) → (Eq let773 let776) → (Eq let639 let20) → (Eq let779 let778) → (Eq let782 let781) → (Eq let783 let37) → (Eq let786 let785) → (Eq let167 let536) → (Eq let789 let788) → let791 → False :=
  let let1 := (Int.ofNat 2)
  let let2 := (sx5fcount let1)
  let let3 := (Eq let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HAdd.hAdd let5 let2)
  let let7 := (Eq let4 let6)
  let let8 := (Int.ofNat 4)
  let let9 := (Eq fmt1 let8)
  let let10 := (Int.ofNat 3)
  let let11 := (Neg.neg let1)
  let let12 := (binrel% HAdd.hAdd let11 fmt1)
  let let13 := (xx5fcount let12)
  let let14 := (sx5fcount let12)
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% GE.ge let15 let10)
  let let17 := (And let16 let9)
  let let18 := (xx5fcount let1)
  let let19 := (xx5fcount let4)
  let let20 := (Eq let19 let18)
  let let21 := (And let20 let17)
  let let22 := (Int.ofNat 0)
  let let23 := (xx5fcount let22)
  let let24 := (Eq let23 let19)
  let let25 := (And let24 let21)
  let let26 := (sx5fcount let4)
  let let27 := (Eq let26 let6)
  let let28 := (sx5fcount let22)
  let let29 := (Eq let28 let26)
  let let30 := (And let29 (And let27 let25))
  let let31 := (Eq let23 let22)
  let let32 := (And let31 let30)
  let let33 := (Eq let28 let4)
  let let34 := (And let33 let32)
  let let35 := (Not let34)
  let let36 := (Implies let34 False)
  let let37 := (Eq fmt1 let10)
  let let38 := (And let16 let37)
  let let39 := (And let24 let38)
  let let40 := (And let29 let39)
  let let41 := (And let31 let40)
  let let42 := (Eq let28 let22)
  let let43 := (And let42 let41)
  let let44 := (Not let43)
  let let45 := (Implies let43 False)
  let let46 := (binrel% HAdd.hAdd let5 let26)
  let let47 := (Eq let28 let46)
  let let48 := (And let42 (And let31 (And let47 let39)))
  let let49 := (Not let48)
  let let50 := (Implies let48 False)
  let let51 := (Eq let26 let4)
  let let52 := (Eq let22 let46)
  let let53 := (format let10)
  let let54 := (Eq s let53)
  let let55 := (Eq let53 s)
  let let56 := (Int.ofNat 5)
  let let57 := (binrel% HAdd.hAdd let56 fmt0)
  let let58 := (binrel% HAdd.hAdd fmt0 let56)
  let let59 := (Eq let26 let2)
  let let60 := (Eq let2 let26)
  let let61 := (Rat.ofInt let14)
  let let62 := (Rat.ofInt 1)
  let let63 := (binrel% HMul.hMul let62 let14)
  let let64 := (sx5fcount let10)
  let let65 := (Eq let2 let64)
  let let66 := (Eq let64 let2)
  let let67 := (Eq let19 let4)
  let let68 := (binrel% HAdd.hAdd let5 let19)
  let let69 := (Eq let22 let68)
  let let70 := (format let4)
  let let71 := (Eq x let70)
  let let72 := (Eq let70 x)
  let let73 := (format let22)
  let let74 := (Eq s let73)
  let let75 := (Eq let73 s)
  let let76 := (Eq let23 let68)
  let let77 := (binrel% HAdd.hAdd let4 let23)
  let let78 := (Eq let19 let77)
  let let79 := (format let1)
  let let80 := (Eq x let79)
  let let81 := (Eq let79 x)
  let let82 := (Int.ofNat 11)
  let let83 := (Neg.neg let82)
  let let84 := (Eq let83 let83)
  let let85 := (Eq fmt1 let22)
  let let86 := (Eq let22 fmt1)
  let let87 := (Int.ofNat 255)
  let let88 := (Eq let70 let87)
  let let89 := (Int.ofNat 6)
  let let90 := (Eq let70 let89)
  let let91 := (Eq let70 let56)
  let let92 := (Eq let70 let8)
  let let93 := (Eq let70 let10)
  let let94 := (Or let93 (Or let92 (Or let91 (Or let90 let88))))
  let let95 := (Eq let70 s)
  let let96 := (Eq let70 percent)
  let let97 := (Or let96 (Or let95 (Or let72 let94)))
  let let98 := (Or (Or (Or (Or (Or (Or (Or let96 let95) let72) let93) let92) let91) let90) let88)
  let let99 := (binrel% HAdd.hAdd let4 let19)
  let let100 := (binrel% HAdd.hAdd let19 let4)
  let let101 := (xx5fcount let10)
  let let102 := (Eq let18 (binrel% HAdd.hAdd let5 let101))
  let let103 := (binrel% HAdd.hAdd let4 let18)
  let let104 := (Eq let101 let103)
  let let105 := (xx5fcount let8)
  let let106 := (Eq let101 (binrel% HAdd.hAdd let5 let105))
  let let107 := (binrel% HAdd.hAdd let4 let101)
  let let108 := (Eq let105 let107)
  let let109 := (Neg.neg let8)
  let let110 := (binrel% HMul.hMul let109 let13)
  let let111 := (binrel% HMul.hMul let109 let14)
  let let112 := (binrel% HAdd.hAdd let111 let110)
  let let113 := (binrel% HAdd.hAdd let82 let112)
  let let114 := (binrel% HMul.hMul let8 let13)
  let let115 := (binrel% HMul.hMul let8 let14)
  let let116 := (binrel% HAdd.hAdd let115 let114)
  let let117 := (binrel% HAdd.hAdd let83 let116)
  let let118 := (binrel% HMul.hMul let5 let117)
  let let119 := (Int.ofNat 115)
  let let120 := (Eq let53 let119)
  let let121 := (Int.ofNat 37)
  let let122 := (Eq let79 let121)
  let let123 := (And let122 let120)
  let let124 := (Not let123)
  let let125 := (Not let124)
  let let126 := (Eq let123 let125)
  let let127 := (Eq let125 let123)
  let let128 := (sx5fcount let8)
  let let129 := (binrel% HAdd.hAdd let4 let128)
  let let130 := (binrel% HAdd.hAdd let128 let4)
  let let131 := (binrel% HMul.hMul let5 let4)
  let let132 := (binrel% HAdd.hAdd fmtx5flength let131)
  let let133 := (binrel% HSub.hSub fmtx5flength let4)
  let let134 := (Eq let70 let119)
  let let135 := (Eq let119 let70)
  let let136 := (format let89)
  let let137 := (Eq s let136)
  let let138 := (Eq let136 s)
  let let139 := (Neg.neg (Rat.ofInt 3))
  let let140 := (Rat.ofInt 0)
  let let141 := (binrel% HAdd.hAdd let140 let139)
  let let142 := (binrel% HAdd.hAdd let140 let141)
  let let143 := (format let56)
  let let144 := (Eq percent let143)
  let let145 := (Eq let143 percent)
  let let146 := (binrel% HMul.hMul let5 fmt0)
  let let147 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let146 fmt1))
  let let148 := (binrel% HAdd.hAdd let12 let146)
  let let149 := (format let8)
  let let150 := (Eq s let149)
  let let151 := (Eq let149 s)
  let let152 := (format fmt1)
  let let153 := (Eq percent let152)
  let let154 := (Eq let152 percent)
  let let155 := (Int.ofNat 120)
  let let156 := (Eq let149 let155)
  let let157 := (Eq let155 let149)
  let let158 := (binrel% HAdd.hAdd let4 fmt1)
  let let159 := (binrel% HAdd.hAdd fmt1 let4)
  let let160 := (binrel% HAdd.hAdd let4 let64)
  let let161 := (binrel% HAdd.hAdd let64 let4)
  let let162 := (format let158)
  let let163 := (Eq s let162)
  let let164 := (Eq let162 s)
  let let165 := (binrel% HAdd.hAdd let1 arg1)
  let let166 := (binrel% HAdd.hAdd arg1 let1)
  let let167 := (binrel% HAdd.hAdd fmt0 let1)
  let let168 := (Eq arg1 let167)
  let let169 := (binrel% HAdd.hAdd fmt0 let4)
  let let170 := (Eq arg1 let169)
  let let171 := (binrel% HAdd.hAdd fmt0 let22)
  let let172 := (Eq arg1 let171)
  let let173 := (Or let172 (Or let170 let168))
  let let174 := (Or (Or let172 let170) let168)
  let let175 := (Eq let155 let121)
  let let176 := (Eq let175 False)
  let let177 := (sx5fcount let56)
  let let178 := (Eq let128 (binrel% HAdd.hAdd let5 let177))
  let let179 := (Eq let177 let129)
  let let180 := (binrel% HMul.hMul let62 let22)
  let let181 := (format let165)
  let let182 := (Eq adrx5fmedhi let181)
  let let183 := (Eq let181 adrx5fmedhi)
  let let184 := (binrel% HAdd.hAdd let10 arg1)
  let let185 := (format let184)
  let let186 := (Eq adrx5fhi let185)
  let let187 := (Eq let185 adrx5fhi)
  let let188 := (Rat.ofInt 2)
  let let189 := (binrel% HMul.hMul let62 let1)
  let let190 := (format arg1)
  let let191 := (Eq adrx5flo let190)
  let let192 := (Eq let190 adrx5flo)
  let let193 := (Not (binrel% GE.ge let15 let8))
  let let194 := (binrel% HAdd.hAdd (Int.ofNat 17) let112)
  let let195 := (binrel% GE.ge let194 let56)
  let let196 := (Eq let56 let56)
  let let197 := (binrel% HAdd.hAdd let4 arg1)
  let let198 := (format let197)
  let let199 := (Eq adrx5fmedlo let198)
  let let200 := (Eq let198 adrx5fmedlo)
  let let201 := (Eq let136 let155)
  let let202 := (Eq let155 let136)
  let let203 := (Neg.neg let62)
  let let204 := (binrel% HMul.hMul let203 let10)
  let let205 := (Eq x let143)
  let let206 := (Eq let143 x)
  let let207 := (binrel% HAdd.hAdd arg1 let10)
  let let208 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let114 let22)))
  let let209 := (xx5fcount let56)
  let let210 := (Eq let105 let209)
  let let211 := (Eq let209 let105)
  let let212 := (Eq let105 (binrel% HAdd.hAdd let5 let209))
  let let213 := (binrel% HAdd.hAdd let4 let105)
  let let214 := (Eq let209 let213)
  let let215 := (binrel% GE.ge let117 let22)
  let let216 := (binrel% HAdd.hAdd let188 let141)
  let let217 := (Eq percent let70)
  let let218 := (Eq let9 let9)
  let let219 := (Eq let143 let119)
  let let220 := (Eq let119 let143)
  let let221 := (Eq fmt0 fmt1)
  let let222 := (Eq fmt1 fmt0)
  let let223 := (Eq s let79)
  let let224 := (Eq let79 s)
  let let225 := (Eq let79 let155)
  let let226 := (Eq let155 let79)
  let let227 := (Eq let8 let8)
  let let228 := (binrel% HAdd.hAdd let4 let22)
  let let229 := (Eq let10 let10)
  let let230 := (binrel% GE.ge fmt1 let1)
  let let231 := (Not let230)
  let let232 := (binrel% HMul.hMul let5 fmt1)
  let let233 := (binrel% GE.ge let232 let5)
  let let234 := (Eq x let53)
  let let235 := (Eq let53 x)
  let let236 := (Eq let82 let82)
  let let237 := (Eq let117 let22)
  let let238 := (Eq let53 let87)
  let let239 := (Eq let53 let89)
  let let240 := (Eq let53 let56)
  let let241 := (Eq let53 let8)
  let let242 := (Eq let53 let10)
  let let243 := (Or let242 (Or let241 (Or let240 (Or let239 let238))))
  let let244 := (Eq let53 percent)
  let let245 := (Or let244 (Or let55 (Or let235 let243)))
  let let246 := (Or (Or (Or (Or (Or (Or (Or let244 let55) let235) let242) let241) let240) let239) let238)
  let let247 := (Eq let53 let121)
  let let248 := (Eq let121 let53)
  let let249 := (binrel% GE.ge fmt1 let56)
  let let250 := (Not let249)
  let let251 := (binrel% HAdd.hAdd let89 let232)
  let let252 := (binrel% GE.ge let251 let1)
  let let253 := (Eq x let136)
  let let254 := (Eq let136 x)
  let let255 := (Eq fmt1 let1)
  let let256 := (And let16 let255)
  let let257 := (Eq let23 let4)
  let let258 := (And let42 (And let257 let256))
  let let259 := (Not let258)
  let let260 := (Implies let258 False)
  let let261 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let22 fmt1))
  let let262 := (Not let16)
  let let263 := (binrel% GE.ge let113 let4)
  let let264 := (binrel% LT.lt let203 let22)
  let let265 := (Eq let152 let121)
  let let266 := (Eq let121 let152)
  let let267 := (binrel% HAdd.hAdd arg1 let4)
  let let268 := (Eq let89 let89)
  let let269 := (Eq let149 let121)
  let let270 := (Eq let121 let149)
  let let271 := (Eq let143 let121)
  let let272 := (Eq let121 let143)
  let let273 := (binrel% HMul.hMul let62 let4)
  let let274 := (binrel% HMul.hMul let5 let13)
  let let275 := (Eq let14 (binrel% HAdd.hAdd let10 let274))
  let let276 := (Eq let117 let4)
  let let277 := (binrel% HMul.hMul let5 let82)
  let let278 := (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 8)) let116)
  let let279 := (format let278)
  let let280 := (Eq let279 let89)
  let let281 := (Eq let89 let279)
  let let282 := (binrel% HAdd.hAdd let18 let4)
  let let283 := (Eq percent let79)
  let let284 := (Eq let79 percent)
  let let285 := (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 9)) let116)
  let let286 := (format let285)
  let let287 := (Eq let286 let56)
  let let288 := (Eq let56 let286)
  let let289 := (binrel% HAdd.hAdd let105 let4)
  let let290 := (Eq let73 let121)
  let let291 := (Eq let121 let73)
  let let292 := (Eq let22 let22)
  let let293 := (Eq x let149)
  let let294 := (Eq let149 x)
  let let295 := (Eq let53 let155)
  let let296 := (Eq let155 let53)
  let let297 := (Eq let18 let101)
  let let298 := (Eq let101 let18)
  let let299 := (binrel% HMul.hMul let5 let8)
  let let300 := (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let188 let139))
  let let301 := (binrel% HMul.hMul let5 let22)
  let let302 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let114 let301)))
  let let303 := (binrel% HAdd.hAdd let117 let301)
  let let304 := (Eq let73 let155)
  let let305 := (Eq let155 let73)
  let let306 := (Eq let73 let119)
  let let307 := (Eq let119 let73)
  let let308 := (Eq percent let73)
  let let309 := (Eq let73 percent)
  let let310 := (Eq let73 let87)
  let let311 := (Eq let73 let89)
  let let312 := (Eq let73 let56)
  let let313 := (Eq let73 let8)
  let let314 := (Eq let73 let10)
  let let315 := (Or let314 (Or let313 (Or let312 (Or let311 let310))))
  let let316 := (Eq let73 x)
  let let317 := (Or let309 (Or let75 (Or let316 let315)))
  let let318 := (Or (Or (Or (Or (Or (Or (Or let309 let75) let316) let314) let313) let312) let311) let310)
  let let319 := (Eq let79 let119)
  let let320 := (Eq let119 let79)
  let let321 := (binrel% HAdd.hAdd let5 let18)
  let let322 := (Eq let19 let321)
  let let323 := (And let29 (And let59 (And let24 (And let322 let17))))
  let let324 := (And let31 let323)
  let let325 := (And let42 let324)
  let let326 := (Not let325)
  let let327 := (Implies let325 False)
  let let328 := (binrel% HAdd.hAdd let1 let117)
  let let329 := (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 10)) let116)
  let let330 := (format let329)
  let let331 := (Eq let330 let8)
  let let332 := (Eq let8 let330)
  let let333 := (binrel% HAdd.hAdd let109 fmt1)
  let let334 := (Eq let22 let333)
  let let335 := (binrel% HAdd.hAdd let10 let117)
  let let336 := (Eq let335 let278)
  let let337 := (And let42 let32)
  let let338 := (Not let337)
  let let339 := (Implies let337 False)
  let let340 := (Eq let119 let53)
  let let341 := (Eq s let143)
  let let342 := (Eq let143 s)
  let let343 := (Eq let2 (binrel% HAdd.hAdd let5 let64))
  let let344 := (binrel% HAdd.hAdd let4 let2)
  let let345 := (Eq let64 let344)
  let let346 := (Eq let18 let4)
  let let347 := (Eq let22 let321)
  let let348 := (Eq let143 let155)
  let let349 := (Eq let155 let143)
  let let350 := (Eq let18 let1)
  let let351 := (Eq let4 let321)
  let let352 := (binrel% HAdd.hAdd let23 let4)
  let let353 := (binrel% HAdd.hAdd fmt0 (binrel% HAdd.hAdd let232 fmtx5flength))
  let let354 := (binrel% GE.ge let353 let1)
  let let355 := (Not let354)
  let let356 := (Not let355)
  let let357 := (binrel% HAdd.hAdd (Neg.neg let56) fmt1)
  let let358 := (Eq fmt0 let357)
  let let359 := (Eq fmt1 let57)
  let let360 := (Eq let136 let119)
  let let361 := (Eq let119 let136)
  let let362 := (binrel% HAdd.hAdd let2 let4)
  let let363 := (Eq let162 let119)
  let let364 := (Eq let119 let162)
  let let365 := (Not let231)
  let let366 := (binrel% HAdd.hAdd let10 fmt0)
  let let367 := (binrel% HAdd.hAdd fmt0 let10)
  let let368 := (And let33 let324)
  let let369 := (Not let368)
  let let370 := (Implies let368 False)
  let let371 := (Eq let149 let119)
  let let372 := (Eq let119 let149)
  let let373 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let114 let112)))
  let let374 := (Or False (Or let275 False))
  let let375 := (binrel% HAdd.hAdd fmt1 let11)
  let let376 := (binrel% HAdd.hAdd let1 let22)
  let let377 := (format let207)
  let let378 := (Eq let377 adrx5fhi)
  let let379 := (format let166)
  let let380 := (Eq let379 adrx5fmedhi)
  let let381 := (format let267)
  let let382 := (Eq let381 adrx5fmedlo)
  let let383 := (format let159)
  let let384 := (Eq let383 s)
  let let385 := (Not let154)
  let let386 := (And let385 (And let384 (And let192 (And let382 (And let380 let378)))))
  let let387 := (And (And (And (And (And let385 let384) let192) let382) let380) let378)
  let let388 := (And let59 let25)
  let let389 := (And let29 let388)
  let let390 := (And let31 let389)
  let let391 := (And let33 let390)
  let let392 := (Not let391)
  let let393 := (Implies let391 False)
  let let394 := (Eq let18 let99)
  let let395 := (binrel% HAdd.hAdd (Neg.neg let10) fmt1)
  let let396 := (Eq let22 let395)
  let let397 := (Eq let22 let12)
  let let398 := (Eq fmt1 let56)
  let let399 := (Eq let22 let357)
  let let400 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let113 let82))
  let let401 := (Eq let1 let12)
  let let402 := (binrel% HAdd.hAdd let8 fmt0)
  let let403 := (binrel% HAdd.hAdd fmt0 let8)
  let let404 := (And let31 let256)
  let let405 := (And let42 let404)
  let let406 := (Not let405)
  let let407 := (Implies let405 False)
  let let408 := (Eq let64 let128)
  let let409 := (Eq let128 let64)
  let let410 := (binrel% HAdd.hAdd let22 let83)
  let let411 := (binrel% HAdd.hAdd let101 let4)
  let let412 := (binrel% LT.lt fmt1 let56)
  let let413 := (Eq let117 let1)
  let let414 := (Eq let123 let123)
  let let415 := (Not let9)
  let let416 := (Not let415)
  let let417 := (Eq let416 let9)
  let let418 := (binrel% HAdd.hAdd let22 let232)
  let let419 := (binrel% HAdd.hAdd let5 fmt1)
  let let420 := (Eq fmt0 let419)
  let let421 := (binrel% HAdd.hAdd let4 fmt0)
  let let422 := (Eq fmt1 let421)
  let let423 := (binrel% HAdd.hAdd let4 let26)
  let let424 := (Eq let2 let423)
  let let425 := (binrel% HAdd.hAdd let26 let4)
  let let426 := (And let271 let201)
  let let427 := (Not let426)
  let let428 := (Implies let427 let210)
  let let429 := (Implies let426 let212)
  let let430 := (Eq let101 let105)
  let let431 := (And let269 let348)
  let let432 := (Not let431)
  let let433 := (Implies let432 let430)
  let let434 := (Implies let431 let106)
  let let435 := (And let247 let156)
  let let436 := (Not let435)
  let let437 := (Implies let436 let297)
  let let438 := (Implies let435 let102)
  let let439 := (And let122 let295)
  let let440 := (Not let439)
  let let441 := (Implies let440 let20)
  let let442 := (Implies let439 let322)
  let let443 := (Eq let70 let121)
  let let444 := (And let443 let225)
  let let445 := (Not let444)
  let let446 := (Implies let445 let24)
  let let447 := (Implies let444 let76)
  let let448 := (Eq let70 let155)
  let let449 := (And let290 let448)
  let let450 := (Not let449)
  let let451 := (Implies let450 let31)
  let let452 := (Implies let449 let257)
  let let453 := (Eq let128 let177)
  let let454 := (And let271 let360)
  let let455 := (Not let454)
  let let456 := (Implies let455 let453)
  let let457 := (Implies let454 let178)
  let let458 := (And let269 let219)
  let let459 := (Not let458)
  let let460 := (Implies let459 let408)
  let let461 := (Eq let64 (binrel% HAdd.hAdd let5 let128))
  let let462 := (Implies let458 let461)
  let let463 := (And let247 let371)
  let let464 := (Not let463)
  let let465 := (Implies let464 let65)
  let let466 := (Implies let463 let343)
  let let467 := (Implies let124 let59)
  let let468 := (Implies let123 let27)
  let let469 := (And let443 let319)
  let let470 := (Not let469)
  let let471 := (Implies let470 let29)
  let let472 := (Implies let469 let47)
  let let473 := (And let290 let134)
  let let474 := (Not let473)
  let let475 := (Implies let474 let42)
  let let476 := (Implies let473 let33)
  let let477 := (Eq let143 let87)
  let let478 := (Eq let143 let89)
  let let479 := (Eq let143 let56)
  let let480 := (Eq let143 let8)
  let let481 := (Eq let143 let10)
  let let482 := (Or let481 (Or let480 (Or let479 (Or let478 let477))))
  let let483 := (Or let271 (Or let219 (Or let348 let482)))
  let let484 := (Eq let149 let87)
  let let485 := (Eq let149 let89)
  let let486 := (Eq let149 let56)
  let let487 := (Eq let149 let8)
  let let488 := (Eq let149 let10)
  let let489 := (Or let488 (Or let487 (Or let486 (Or let485 let484))))
  let let490 := (Or let269 (Or let371 (Or let156 let489)))
  let let491 := (Or let247 (Or let120 (Or let295 let243)))
  let let492 := (Eq let79 let87)
  let let493 := (Eq let79 let89)
  let let494 := (Eq let79 let56)
  let let495 := (Eq let79 let8)
  let let496 := (Eq let79 let10)
  let let497 := (Or let496 (Or let495 (Or let494 (Or let493 let492))))
  let let498 := (Or let122 (Or let319 (Or let225 let497)))
  let let499 := (Or let443 (Or let134 (Or let448 let94)))
  let let500 := (Or let290 (Or let306 (Or let304 let315)))
  let let501 := (Eq fmt1 let4)
  let let502 := (Or let85 (Or let501 (Or let255 (Or let37 (Or let9 let398)))))
  let let503 := (And let502 (And let275 (And let500 (And let499 (And let498 (And let491 (And let490 (And let483 (And let476 (And let475 (And let472 (And let471 (And let468 (And let467 (And let466 (And let465 (And let462 (And let460 (And let457 (And let456 (And let452 (And let451 (And let447 (And let446 (And let442 (And let441 (And let438 (And let437 (And let434 (And let433 (And let429 let428)))))))))))))))))))))))))))))))
  let let504 := (And let16 (And let250 (And let230 (And let193 let503))))
  let let505 := (And True (And True (And True (And True (And True (And True (And True (And True (And True (And True (And True (And let16 (And let250 (And let230 (And let16 (And let193 (And True let503)))))))))))))))))
  let let506 := (Eq let26 let28)
  let let507 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let301 fmt1))
  let let508 := (xx5fcount let507)
  let let509 := (binrel% HMul.hMul let109 let508)
  let let510 := (sx5fcount let507)
  let let511 := (binrel% HMul.hMul let109 let510)
  let let512 := (binrel% HAdd.hAdd let511 let509)
  let let513 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let114 let512)))
  let let514 := (binrel% HAdd.hAdd let117 let512)
  let let515 := (Eq fmt0 let395)
  let let516 := (Eq fmt1 let366)
  let let517 := (Eq let119 let121)
  let let518 := (Not let517)
  let let519 := (Eq let517 False)
  let let520 := (binrel% HAdd.hAdd let4 let28)
  let let521 := (Eq let26 let520)
  let let522 := (binrel% HAdd.hAdd let28 let4)
  let let523 := (Eq s let70)
  let let524 := (Or let145 (Or let342 (Or let206 let482)))
  let let525 := (Or (Or (Or (Or (Or (Or (Or let145 let342) let206) let481) let480) let479) let478) let477)
  let let526 := (Eq let149 percent)
  let let527 := (Or let526 (Or let151 (Or let294 let489)))
  let let528 := (Or (Or (Or (Or (Or (Or (Or let526 let151) let294) let488) let487) let486) let485) let484)
  let let529 := (Or let284 (Or let224 (Or let81 let497)))
  let let530 := (Or (Or (Or (Or (Or (Or (Or let284 let224) let81) let496) let495) let494) let493) let492)
  let let531 := (Eq x let73)
  let let532 := (Eq let22 let419)
  let let533 := (Eq fmt0 let333)
  let let534 := (Eq fmt1 let402)
  let let535 := (Eq fmt0 let12)
  let let536 := (binrel% HAdd.hAdd let1 fmt0)
  let let537 := (Eq fmt1 let536)
  let let538 := (format let117)
  let let539 := (Eq let538 let10)
  let let540 := (Eq let10 let538)
  let let541 := (Not let445)
  let let542 := (Eq let444 let541)
  let let543 := (Eq let541 let444)
  let let544 := (Not let262)
  let let545 := (xx5fcount let147)
  let let546 := (binrel% HMul.hMul let109 let545)
  let let547 := (sx5fcount let147)
  let let548 := (binrel% HMul.hMul let109 let547)
  let let549 := (binrel% HAdd.hAdd arg1 (binrel% HAdd.hAdd let548 let546))
  let let550 := (Eq arg0 let549)
  let let551 := (binrel% HMul.hMul let8 let545)
  let let552 := (binrel% HMul.hMul let8 let547)
  let let553 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let552 let551))
  let let554 := (Eq arg1 let553)
  let let555 := (Eq let121 let79)
  let let556 := (binrel% HMul.hMul let5 let1)
  let let557 := (And let42 (And let31 (And let29 (And let76 let38))))
  let let558 := (Not let557)
  let let559 := (Implies let557 False)
  let let560 := (binrel% HAdd.hAdd fmt1 let556)
  let let561 := (binrel% HSub.hSub fmt1 let1)
  let let562 := (binrel% HAdd.hAdd let561 let146)
  let let563 := (binrel% HSub.hSub let561 fmt0)
  let let564 := (Eq let121 let70)
  let let565 := (xx5fcount let563)
  let let566 := (binrel% HMul.hMul let8 let565)
  let let567 := (sx5fcount let563)
  let let568 := (binrel% HMul.hMul let8 let567)
  let let569 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let568 let566))
  let let570 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd arg0 let568) let566)
  let let571 := (Eq let439 let439)
  let let572 := (Eq let255 let255)
  let let573 := (Eq percent let149)
  let let574 := (binrel% HAdd.hAdd distance fmtx5flength)
  let let575 := (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd arg0 let574))
  let let576 := (binrel% HAdd.hAdd let109 fmtx5flength)
  let let577 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd distance let576))
  let let578 := (binrel% HAdd.hAdd fmtx5flength let109)
  let let579 := (binrel% HAdd.hAdd fmtx5flength let299)
  let let580 := (binrel% HSub.hSub fmtx5flength let8)
  let let581 := (Eq let155 let155)
  let let582 := (Eq percent let53)
  let let583 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd distance let580))
  let let584 := (Eq let119 let119)
  let let585 := (binrel% GE.ge arg1 let583)
  let let586 := (Not let585)
  let let587 := (binrel% LT.lt arg1 let583)
  let let588 := (Eq let121 let121)
  let let589 := (binrel% HMul.hMul let5 arg1)
  let let590 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let589 distance))
  let let591 := (binrel% GE.ge let590 let4)
  let let592 := (Not let591)
  let let593 := (binrel% GE.ge arg1 (binrel% HAdd.hAdd arg0 distance))
  let let594 := (Not False)
  let let595 := (binrel% LE.le fmt1 let169)
  let let596 := (Not let595)
  let let597 := (binrel% GT.gt fmt1 let169)
  let let598 := (Eq let19 let23)
  let let599 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd fmt0 fmtx5flength))
  let let600 := (binrel% GE.ge fmt1 let599)
  let let601 := (binrel% HAdd.hAdd let5 fmtx5flength)
  let let602 := (binrel% HAdd.hAdd fmtx5flength let5)
  let let603 := (Eq let119 let155)
  let let604 := (Not let603)
  let let605 := (Eq let603 False)
  let let606 := (binrel% HAdd.hAdd fmt0 let133)
  let let607 := (binrel% GE.ge fmt1 let606)
  let let608 := (Not let607)
  let let609 := (binrel% LT.lt fmt1 let606)
  let let610 := (binrel% HAdd.hAdd arg1 let146)
  let let611 := (binrel% GE.ge let610 let22)
  let let612 := (binrel% GE.ge arg1 fmt0)
  let let613 := (Not let474)
  let let614 := (Eq let473 let613)
  let let615 := (Eq let613 let473)
  let let616 := (Eq let177 let128)
  let let617 := (binrel% HMul.hMul let5 distance)
  let let618 := (binrel% HAdd.hAdd fmt0 let617)
  let let619 := (binrel% HSub.hSub fmt0 distance)
  let let620 := (binrel% HAdd.hAdd fmt0 let601)
  let let621 := (Not let175)
  let let622 := (And let145 let254)
  let let623 := (Not let622)
  let let624 := (Implies let623 let211)
  let let625 := (Eq let209 let289)
  let let626 := (Implies let622 let625)
  let let627 := (And let626 let624)
  let let628 := (Eq let105 let101)
  let let629 := (And let526 let206)
  let let630 := (Not let629)
  let let631 := (Implies let630 let628)
  let let632 := (Eq let105 let411)
  let let633 := (Implies let629 let632)
  let let634 := (And let244 let294)
  let let635 := (Not let634)
  let let636 := (Implies let635 let298)
  let let637 := (Eq let101 let282)
  let let638 := (Implies let634 let637)
  let let639 := (Eq let18 let19)
  let let640 := (And let284 let235)
  let let641 := (Not let640)
  let let642 := (Implies let641 let639)
  let let643 := (Eq let18 let100)
  let let644 := (Implies let640 let643)
  let let645 := (And let96 let81)
  let let646 := (Not let645)
  let let647 := (Implies let646 let598)
  let let648 := (Eq let19 let352)
  let let649 := (Implies let645 let648)
  let let650 := (And let309 let72)
  let let651 := (Not let650)
  let let652 := (Implies let651 let31)
  let let653 := (Implies let650 let257)
  let let654 := (And let145 let138)
  let let655 := (Not let654)
  let let656 := (Implies let655 let616)
  let let657 := (Eq let177 let130)
  let let658 := (Implies let654 let657)
  let let659 := (And let526 let342)
  let let660 := (Not let659)
  let let661 := (Implies let660 let409)
  let let662 := (Eq let128 let161)
  let let663 := (Implies let659 let662)
  let let664 := (And let244 let151)
  let let665 := (Not let664)
  let let666 := (Implies let665 let66)
  let let667 := (Eq let64 let362)
  let let668 := (Implies let664 let667)
  let let669 := (And let284 let55)
  let let670 := (Not let669)
  let let671 := (Implies let670 let60)
  let let672 := (Eq let2 let425)
  let let673 := (Implies let669 let672)
  let let674 := (And let96 let224)
  let let675 := (Not let674)
  let let676 := (Implies let675 let506)
  let let677 := (Eq let26 let522)
  let let678 := (Implies let674 let677)
  let let679 := (And let309 let95)
  let let680 := (Not let679)
  let let681 := (Implies let680 let42)
  let let682 := (Implies let679 let33)
  let let683 := (Eq fmt1 let58)
  let let684 := (Eq fmt1 let403)
  let let685 := (Eq fmt1 let367)
  let let686 := (Eq fmt1 let167)
  let let687 := (Eq fmt1 let169)
  let let688 := (Eq fmt1 let171)
  let let689 := (Or (Or (Or (Or (Or let688 let687) let686) let685) let684) let683)
  let let690 := (Eq arg1 let570)
  let let691 := (Eq arg0 let619)
  let let692 := (Eq fmt0 let22)
  let let693 := (Eq x let155)
  let let694 := (Eq s let119)
  let let695 := (Eq percent let121)
  let let696 := (Eq adrx5fhi let89)
  let let697 := (Eq adrx5fmedhi let56)
  let let698 := (Eq adrx5fmedlo let8)
  let let699 := (Eq adrx5flo let10)
  let let700 := (Eq fmtx5flength let89)
  let let701 := (Eq distance let82)
  let let702 := (And let701 (And let700 (And let699 (And let698 (And let697 (And let696 (And let695 (And let694 (And let693 (And let692 (And let691 (And let612 (And let609 (And let597 (And let593 (And let587 (And let690 (And let689 (And let174 (And let318 (And let98 (And let530 (And let246 (And let528 (And let525 (And let682 (And let681 (And let678 (And let676 (And let673 (And let671 (And let668 (And let666 (And let663 (And let661 (And let658 (And let656 (And let653 (And let652 (And let649 (And let647 (And let644 (And let642 (And let638 (And let636 (And let633 (And let631 let627)))))))))))))))))))))))))))))))))))))))))))))))
  let let703 := (And (And (And (And (And (And (And (And (And (And (And let701 let700) let699) let698) let697) let696) (And (And let695 let694) let693)) (And (And (And (And (And (And (And let692 let691) let612) let609) let597) let593) let587) let690)) (And let689 let174)) (And (And (And (And (And let318 let98) let530) let246) let528) let525)) (And (And (And (And (And (And let682 let681) (And let678 let676)) (And let673 let671)) (And let668 let666)) (And let663 let661)) (And let658 let656))) (And (And (And (And (And (And let653 let652) (And let649 let647)) (And let644 let642)) (And let638 let636)) (And let633 let631)) let627))
  let let704 := (And let33 let41)
  let let705 := (Not let704)
  let let706 := (Implies let704 False)
  let let707 := (Eq arg1 let117)
  let let708 := (binrel% HAdd.hAdd arg1 let112)
  let let709 := (Eq let83 let708)
  let let710 := (Rat.ofInt let13)
  let let711 := (binrel% HMul.hMul let62 let13)
  let let712 := (Not let450)
  let let713 := (Eq let449 let712)
  let let714 := (Eq let712 let449)
  let let715 := (Eq let473 let473)
  let let716 := (Eq let128 let160)
  let let717 := (Not let470)
  let let718 := (Eq let717 let469)
  let let719 := (binrel% HAdd.hAdd let4 let117)
  let let720 := (Eq let719 let329)
  let let721 := (Eq let444 let444)
  let let722 := (Not let440)
  let let723 := (Eq let722 let439)
  let let724 := (Not let255)
  let let725 := (Not let724)
  let let726 := (Eq let725 let255)
  let let727 := (Eq let439 let722)
  let let728 := (binrel% HAdd.hAdd let82 let89)
  let let729 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let113 let728))
  let let730 := (Eq let255 let725)
  let let731 := (And let42 (And let257 let30))
  let let732 := (Not let731)
  let let733 := (Implies let731 False)
  let let734 := (binrel% LE.le let140 let203)
  let let735 := (binrel% HAdd.hAdd let62 let139)
  let let736 := (binrel% HAdd.hAdd let62 let735)
  let let737 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let5 let14) let274))
  let let738 := (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let710 let737))
  let let739 := (binrel% HMul.hMul let203 let15)
  let let740 := (binrel% GT.gt let62 let22)
  let let741 := (Eq let2 let4)
  let let742 := (Eq let22 let6)
  let let743 := (Eq let328 let285)
  let let744 := (Eq let469 let717)
  let let745 := (Neg.neg let188)
  let let746 := (binrel% HAdd.hAdd let140 let735)
  let let747 := (Or let688 (Or let687 (Or let686 (Or let685 (Or let684 let683)))))
  let let748 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let589 let574))
  let let749 := (binrel% GE.ge let748 let56)
  let let750 := (Not let749)
  let let751 := (binrel% GE.ge arg1 let575)
  let let752 := (And let42 let390)
  let let753 := (Not let752)
  let let754 := (Implies let752 False)
  let let755 := (binrel% LE.le let140 let139)
  let let756 := (Eq let449 let449)
  let let757 := (And let42 (And let257 let389))
  let let758 := (Not let757)
  let let759 := (Implies let757 False)
  let let760 := (Eq let469 let469)
  let let761 := (binrel% LE.le let140 let745)
  let let762 := (binrel% HAdd.hAdd let62 let141)
  let let763 := (And let42 (And let257 let323))
  let let764 := (Not let763)
  let let765 := (Implies let763 False)
  let let766 := (Eq let9 let416)
  let let767 := (And let33 let404)
  let let768 := (Not let767)
  let let769 := (Implies let767 False)
  let let770 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let232 let89))
  let let771 := (Eq let249 let249)
  let let772 := (Not let250)
  let let773 := (Eq let772 let249)
  let let774 := (Eq let155 let70)
  let let775 := (Not let750)
  let let776 := (Eq let249 let772)
  let let777 := (binrel% HAdd.hAdd fmt0 let232)
  let let778 := (binrel% GE.ge let777 let5)
  let let779 := (binrel% LE.le fmt1 let421)
  let let780 := (And let42 (And let257 let40))
  let let781 := (Not let780)
  let let782 := (Implies let780 False)
  let let783 := (Eq let4 let12)
  let let784 := (And let42 (And let31 (And let29 (And let59 (And let76 let21)))))
  let let785 := (Not let784)
  let let786 := (Implies let784 False)
  let let787 := (And let42 (And let31 (And let47 let388)))
  let let788 := (Not let787)
  let let789 := (Implies let787 False)
  let let790 := (Implies let703 let387)
  let let791 := (Not let790)
  let let792 := (Not let265)
  let let793 := (And let792 (And let363 (And let539 (And let331 (And let287 let280)))))
  let let794 := (Implies let504 let793)
  let let795 := (Not let794)
  let let796 := (Not let153)
  let let797 := (And let796 (And let163 (And let191 (And let199 (And let182 let186)))))
  let let798 := (And let144 let253)
  let let799 := (Not let798)
  let let800 := (Implies let799 let210)
  let let801 := (Implies let798 let212)
  let let802 := (And let573 let205)
  let let803 := (Not let802)
  let let804 := (Implies let803 let430)
  let let805 := (Implies let802 let106)
  let let806 := (And let582 let293)
  let let807 := (Not let806)
  let let808 := (Implies let807 let297)
  let let809 := (Implies let806 let102)
  let let810 := (And let283 let234)
  let let811 := (Not let810)
  let let812 := (Implies let811 let20)
  let let813 := (Implies let810 let322)
  let let814 := (And let217 let80)
  let let815 := (Not let814)
  let let816 := (Implies let815 let24)
  let let817 := (Implies let814 let76)
  let let818 := (And let308 let71)
  let let819 := (Not let818)
  let let820 := (Implies let819 let31)
  let let821 := (Implies let818 let257)
  let let822 := (And let144 let137)
  let let823 := (Not let822)
  let let824 := (Implies let823 let453)
  let let825 := (Implies let822 let178)
  let let826 := (And let573 let341)
  let let827 := (Not let826)
  let let828 := (Implies let827 let408)
  let let829 := (Implies let826 let461)
  let let830 := (And let582 let150)
  let let831 := (Not let830)
  let let832 := (Implies let831 let65)
  let let833 := (Implies let830 let343)
  let let834 := (And let283 let54)
  let let835 := (Not let834)
  let let836 := (Implies let835 let59)
  let let837 := (Implies let834 let27)
  let let838 := (And let217 let223)
  let let839 := (Not let838)
  let let840 := (Implies let839 let29)
  let let841 := (Implies let838 let47)
  let let842 := (And let308 let523)
  let let843 := (Not let842)
  let let844 := (Implies let843 let42)
  let let845 := (Implies let842 let33)
  let let846 := (Or let144 (Or let341 (Or let205 let482)))
  let let847 := (Or let573 (Or let150 (Or let293 let489)))
  let let848 := (Or let582 (Or let54 (Or let234 let243)))
  let let849 := (Or let283 (Or let223 (Or let80 let497)))
  let let850 := (Or let217 (Or let523 (Or let71 let94)))
  let let851 := (Or let308 (Or let74 (Or let531 let315)))
  let let852 := (Eq arg1 let536)
  let let853 := (Eq arg1 let421)
  let let854 := (Eq arg1 fmt0)
  let let855 := (Or let854 (Or let853 let852))
  let let856 := (Or let221 (Or let420 (Or let535 (Or let515 (Or let533 let358)))))
  let let857 := (Not let778)
  let let858 := (Eq arg0 let618)
  let let859 := (And let701 (And let700 (And let699 (And let698 (And let697 (And let696 (And let695 (And let694 (And let693 (And let692 (And let858 (And let611 (And let354 (And let857 (And let592 (And let749 (And let550 (And let856 (And let855 (And let851 (And let850 (And let849 (And let848 (And let847 (And let846 (And let845 (And let844 (And let841 (And let840 (And let837 (And let836 (And let833 (And let832 (And let829 (And let828 (And let825 (And let824 (And let821 (And let820 (And let817 (And let816 (And let813 (And let812 (And let809 (And let808 (And let805 (And let804 (And let801 let800))))))))))))))))))))))))))))))))))))))))))))))))
  let let860 := (Implies let859 let797)
  let let861 := (Not let860)
  let let862 := (format let335)
  let let863 := (Eq let89 let862)
  let let864 := (format let328)
  let let865 := (Eq let56 let864)
  let let866 := (format let719)
  let let867 := (Eq let8 let866)
  let let868 := (Not let266)
  let let869 := (And let868 (And let364 (And let540 (And let867 (And let865 let863)))))
  let let870 := (And let272 let202)
  let let871 := (Not let870)
  let let872 := (Implies let871 let210)
  let let873 := (Implies let870 let212)
  let let874 := (And let270 let349)
  let let875 := (Not let874)
  let let876 := (Implies let875 let430)
  let let877 := (Implies let874 let106)
  let let878 := (And let248 let157)
  let let879 := (Not let878)
  let let880 := (Implies let879 let297)
  let let881 := (Implies let878 let102)
  let let882 := (And let555 let296)
  let let883 := (Not let882)
  let let884 := (Implies let883 let20)
  let let885 := (Implies let882 let322)
  let let886 := (And let564 let226)
  let let887 := (Not let886)
  let let888 := (Implies let887 let24)
  let let889 := (Implies let886 let76)
  let let890 := (And let291 let774)
  let let891 := (Not let890)
  let let892 := (Implies let891 let31)
  let let893 := (Implies let890 let257)
  let let894 := (And let272 let361)
  let let895 := (Not let894)
  let let896 := (Implies let895 let453)
  let let897 := (Implies let894 let178)
  let let898 := (And let270 let220)
  let let899 := (Not let898)
  let let900 := (Implies let899 let408)
  let let901 := (Implies let898 let461)
  let let902 := (And let248 let372)
  let let903 := (Not let902)
  let let904 := (Implies let903 let65)
  let let905 := (Implies let902 let343)
  let let906 := (And let555 let340)
  let let907 := (Not let906)
  let let908 := (Implies let907 let59)
  let let909 := (Implies let906 let27)
  let let910 := (And let564 let320)
  let let911 := (Not let910)
  let let912 := (Implies let911 let29)
  let let913 := (Implies let910 let47)
  let let914 := (And let291 let135)
  let let915 := (Not let914)
  let let916 := (Implies let915 let42)
  let let917 := (Implies let914 let33)
  let let918 := (Or let272 (Or let220 (Or let349 let482)))
  let let919 := (Or let270 (Or let372 (Or let157 let489)))
  let let920 := (Or let248 (Or let340 (Or let296 let243)))
  let let921 := (Or let555 (Or let320 (Or let226 let497)))
  let let922 := (Or let564 (Or let135 (Or let774 let94)))
  let let923 := (Or let291 (Or let307 (Or let305 let315)))
  let let924 := (Eq let117 let376)
  let let925 := (Eq let117 let228)
  let let926 := (Or let237 (Or let925 let924))
  let let927 := (Or let86 (Or let532 (Or let397 (Or let396 (Or let334 let399)))))
  let let928 := (Eq let83 let514)
  let let929 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let118 let728))
  let let930 := (binrel% GE.ge let929 let56)
  let let931 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let118 let82))
  let let932 := (binrel% GE.ge let931 let4)
  let let933 := (Not let932)
  let let934 := (binrel% GE.ge let418 let5)
  let let935 := (Not let934)
  let let936 := (binrel% GE.ge let770 let1)
  let let937 := (binrel% GE.ge let303 let22)
  let let938 := (binrel% HAdd.hAdd let22 let277)
  let let939 := (Eq let83 let938)
  let let940 := (And let236 (And let268 (And let229 (And let227 (And let196 (And let268 (And let588 (And let584 (And let581 (And let292 (And let939 (And let937 (And let936 (And let935 (And let933 (And let930 (And let928 (And let927 (And let926 (And let923 (And let922 (And let921 (And let920 (And let919 (And let918 (And let917 (And let916 (And let913 (And let912 (And let909 (And let908 (And let905 (And let904 (And let901 (And let900 (And let897 (And let896 (And let893 (And let892 (And let889 (And let888 (And let885 (And let884 (And let881 (And let880 (And let877 (And let876 (And let873 let872))))))))))))))))))))))))))))))))))))))))))))))))
  let let941 := (Implies let940 let869)
  let let942 := (Not let941)
  let let943 := (Eq And And)
  let let944 := (Eq let210 let210)
  let let945 := (Eq let212 let212)
  let let946 := (Eq let430 let430)
  let let947 := (Eq let106 let106)
  let let948 := (Eq let297 let297)
  let let949 := (Eq let102 let102)
  let let950 := (Eq let20 let20)
  let let951 := (Eq let322 let322)
  let let952 := (Eq let24 let24)
  let let953 := (Eq let76 let76)
  let let954 := (Eq let31 let31)
  let let955 := (Eq let257 let257)
  let let956 := (Eq let453 let453)
  let let957 := (Eq let178 let178)
  let let958 := (Eq let408 let408)
  let let959 := (Eq let461 let461)
  let let960 := (Eq let65 let65)
  let let961 := (Eq let343 let343)
  let let962 := (Eq let59 let59)
  let let963 := (Eq let27 let27)
  let let964 := (Eq let29 let29)
  let let965 := (Eq let47 let47)
  let let966 := (Eq let42 let42)
  let let967 := (Eq let33 let33)
  let let968 := (Eq let477 let477)
  let let969 := (Eq let478 let478)
  let let970 := (Eq Or Or)
  let let971 := (Eq let479 let479)
  let let972 := (Eq let480 let480)
  let let973 := (Eq let481 let481)
  let let974 := (Eq let484 let484)
  let let975 := (Eq let485 let485)
  let let976 := (Eq let486 let486)
  let let977 := (Eq let487 let487)
  let let978 := (Eq let488 let488)
  let let979 := (Eq let238 let238)
  let let980 := (Eq let239 let239)
  let let981 := (Eq let240 let240)
  let let982 := (Eq let241 let241)
  let let983 := (Eq let242 let242)
  let let984 := (Eq let492 let492)
  let let985 := (Eq let493 let493)
  let let986 := (Eq let494 let494)
  let let987 := (Eq let495 let495)
  let let988 := (Eq let496 let496)
  let let989 := (Eq let88 let88)
  let let990 := (Eq let90 let90)
  let let991 := (Eq let91 let91)
  let let992 := (Eq let92 let92)
  let let993 := (Eq let93 let93)
  let let994 := (Eq let310 let310)
  let let995 := (Eq let311 let311)
  let let996 := (Eq let312 let312)
  let let997 := (Eq let313 let313)
  let let998 := (Eq let314 let314)
  let let999 := (Eq fmt1 fmt1)
  let let1000 := (Eq let11 let11)
  let let1001 := (Eq let109 let109)
  let let1002 := (Eq let4 let4)
  let let1003 := (Eq let5 let5)
  let let1004 := (Eq let1 let1)
  let let1005 := (And let692 (And let693 (And let694 (And let695 (And let696 (And let697 (And let698 (And let699 (And let700 let701)))))))))
  let let1006 := (Eq arg0 let83)
  let let1007 := (And let1006 let1005)
  let let1008 := (Eq arg1 arg1)
  let let1009 := (Eq arg0 arg0)
  let let1010 := (Eq let583 let575)
  let let1011 := (Eq arg0 let938)
  let let1012 := (Eq let618 let938)
  let let1013 := (Eq let617 let277)
  let let1014 := (binrel% HAdd.hAdd arg1 let512)
  let let1015 := (Eq let83 let1014)
  let let1016 := (Eq let546 let509)
  let let1017 := (Eq let545 let508)
  let let1018 := (Eq let147 let507)
  let let1019 := (Eq let146 let301)
  let let1020 := (Eq let548 let511)
  let let1021 := (Eq let547 let510)
  let let1022 := (Or let450 let450)
  let let1023 := (Not let448)
  let let1024 := (Not let257)
  let let1025 := (Not let134)
  let let1026 := (Or let1025 let1023)
  let let1027 := (Implies let134 let1023)
  let let1028 := (Not let443)
  let let1029 := (Or let1023 let1028)
  let let1030 := (Implies let448 let1028)
  let let1031 := (Eq let443 False)
  let let1032 := (Or let473 let42)
  let let1033 := (Or let613 let42)
  let let1034 := (Not let42)
  let let1035 := (Or let469 let29)
  let let1036 := (Or let717 let29)
  let let1037 := (Or let444 let24)
  let let1038 := (Or let541 let24)
  let let1039 := (Not let24)
  let let1040 := (Or let1024 let1039)
  let let1041 := (Not let29)
  let let1042 := (Or let1034 (Or let1041 let1040))
  let let1043 := (Or let415 let1042)
  let let1044 := (Or let124 let124)
  let let1045 := (Not let295)
  let let1046 := (Or (Not let120) let1045)
  let let1047 := (Implies let120 let1045)
  let let1048 := (Or let439 let20)
  let let1049 := (Or let722 let20)
  let let1050 := (Not let20)
  let let1051 := (Or let1039 let1050)
  let let1052 := (Or let1024 let1051)
  let let1053 := (Not let27)
  let let1054 := (Or let262 let415)
  let let1055 := (Or let1050 let1054)
  let let1056 := (Or let1039 let1055)
  let let1057 := (Or let1041 (Or let1053 let1056))
  let let1058 := (Eq let4 let14)
  let let1059 := (Eq let4 let13)
  let let1060 := (And let16 (And let1059 let1058))
  let let1061 := (Implies let731 let1060)
  let let1062 := (Eq let1060 False)
  let let1063 := (Or (Not let1058) False)
  let let1064 := (Not let1059)
  let let1065 := (Eq let14 let4)
  let let1066 := (Not let1065)
  let let1067 := (Or let1066 False)
  let let1068 := (binrel% HAdd.hAdd let273 let204)
  let let1069 := (binrel% HAdd.hAdd let273 let1068)
  let let1070 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let711 let739))
  let let1071 := (binrel% LE.le let1070 let1069)
  let let1072 := (binrel% LE.le let739 let204)
  let let1073 := (And let264 let16)
  let let1074 := (Implies let1073 let1072)
  let let1075 := (Eq let711 let273)
  let let1076 := (Eq let13 let4)
  let let1077 := (And let740 let1076)
  let let1078 := (Implies let1077 let1075)
  let let1079 := (Eq let63 let273)
  let let1080 := (And let740 let1065)
  let let1081 := (Implies let1080 let1079)
  let let1082 := (Or let262 (Or let415 let1060))
  let let1083 := (Eq let4 let2)
  let let1084 := (And let401 let1083)
  let let1085 := (Implies let1084 let1058)
  let let1086 := (Not let401)
  let let1087 := (Or let1086 (Or (Not let1083) let1058))
  let let1088 := (Eq let2 let14)
  let let1089 := (Eq let12 let1)
  let let1090 := (Implies let742 let1083)
  let let1091 := (Or (Not let742) let1083)
  let let1092 := (And let29 let42)
  let let1093 := (And let27 let1092)
  let let1094 := (Implies let1093 let742)
  let let1095 := (Or let1053 (Or let1041 (Or let1034 let742)))
  let let1096 := (Eq let6 let26)
  let let1097 := (Eq let22 let28)
  let let1098 := (Eq let9 let401)
  let let1099 := (And let24 let257)
  let let1100 := (And let401 (And let20 let1099))
  let let1101 := (Implies let1100 let1059)
  let let1102 := (Or let1024 let1059)
  let let1103 := (Or let1039 let1102)
  let let1104 := (Or let1086 (Or let1050 let1103))
  let let1105 := (Eq let18 let13)
  let let1106 := (Eq let4 let23)
  let let1107 := (Or let123 let59)
  let let1108 := (Or let125 let59)
  let let1109 := (Not let59)
  let let1110 := (Or let1041 (Or let1109 let1051))
  let let1111 := (Or let415 let1110)
  let let1112 := (Or let415 (Or let1034 let1110))
  let let1113 := (Not let31)
  let let1114 := (Or let1113 let1051)
  let let1115 := (Or let1109 let1114)
  let let1116 := (Or let1041 let1115)
  let let1117 := (Or let1109 let1056)
  let let1118 := (Or let1041 let1117)
  let let1119 := (Or let1113 let1118)
  let let1120 := (Eq let22 let14)
  let let1121 := (Eq let22 let13)
  let let1122 := (And let16 (And let1121 let1120))
  let let1123 := (Implies let752 let1122)
  let let1124 := (Eq let1122 False)
  let let1125 := (Or (Not let1120) False)
  let let1126 := (Not let1121)
  let let1127 := (Eq let14 let22)
  let let1128 := (Not let1127)
  let let1129 := (Or let1128 False)
  let let1130 := (binrel% HAdd.hAdd let180 let204)
  let let1131 := (binrel% HAdd.hAdd let180 let1130)
  let let1132 := (binrel% LE.le let1070 let1131)
  let let1133 := (Eq let711 let180)
  let let1134 := (Eq let13 let22)
  let let1135 := (And let740 let1134)
  let let1136 := (Implies let1135 let1133)
  let let1137 := (Eq let63 let180)
  let let1138 := (And let740 let1127)
  let let1139 := (Implies let1138 let1137)
  let let1140 := (And let401 (And let59 let1092))
  let let1141 := (Implies let1140 let1120)
  let let1142 := (Or let1034 let1120)
  let let1143 := (Or let1041 let1142)
  let let1144 := (Or let1086 (Or let1109 let1143))
  let let1145 := (And let24 let31)
  let let1146 := (And let401 (And let20 let1145))
  let let1147 := (Implies let1146 let1121)
  let let1148 := (Or let1113 let1121)
  let let1149 := (Or let1039 let1148)
  let let1150 := (Or let1086 (Or let1050 let1149))
  let let1151 := (Eq let22 let23)
  let let1152 := (Or let449 let31)
  let let1153 := (Or let712 let31)
  let let1154 := (And let16 (And let1059 let1120))
  let let1155 := (Implies let757 let1154)
  let let1156 := (Eq let1154 False)
  let let1157 := (binrel% HAdd.hAdd let180 let1068)
  let let1158 := (binrel% LE.le let1070 let1157)
  let let1159 := (Or let262 (Or let415 let1154))
  let let1160 := (Or let1050 let1159)
  let let1161 := (Not let33)
  let let1162 := (And let16 (And let1121 let1058))
  let let1163 := (Implies let391 let1162)
  let let1164 := (Eq let1162 False)
  let let1165 := (binrel% HAdd.hAdd let273 let1130)
  let let1166 := (binrel% LE.le let1070 let1165)
  let let1167 := (Or let1039 (Or let1050 (Or let262 (Or let415 let1162))))
  let let1168 := (Or let1109 let1167)
  let let1169 := (And let29 let33)
  let let1170 := (And let401 (And let59 let1169))
  let let1171 := (Implies let1170 let1058)
  let let1172 := (Or let1161 let1058)
  let let1173 := (Or let1041 let1172)
  let let1174 := (Or let1086 (Or let1109 let1173))
  let let1175 := (Eq let4 let28)
  let let1176 := (Not let322)
  let let1177 := (Or let1039 let1176)
  let let1178 := (Or let1041 (Or let1109 (Or let1039 (Or let1176 let1054))))
  let let1179 := (Eq let1 let13)
  let let1180 := (And let16 (And let1179 let1120))
  let let1181 := (Implies let763 let1180)
  let let1182 := (binrel% HAdd.hAdd let180 (binrel% HAdd.hAdd let189 let204))
  let let1183 := (binrel% LE.le let1070 let1182)
  let let1184 := (Eq let711 let189)
  let let1185 := (Eq let13 let1)
  let let1186 := (And let740 let1185)
  let let1187 := (Eq let1 let18)
  let let1188 := (And let401 let1187)
  let let1189 := (And let322 let1099)
  let let1190 := (Eq let321 let19)
  let let1191 := (binrel% GE.ge fmt1 let10)
  let let1192 := (Or let724 let1113)
  let let1193 := (Or let262 let724)
  let let1194 := (Or let1113 let1193)
  let let1195 := (Implies let405 let1122)
  let let1196 := (And let397 let42)
  let let1197 := (Implies let1196 let1120)
  let let1198 := (Not let397)
  let let1199 := (Or let1198 let1142)
  let let1200 := (Eq let28 let14)
  let let1201 := (Eq let12 let22)
  let let1202 := (Eq let255 let397)
  let let1203 := (And let397 let31)
  let let1204 := (Implies let1203 let1121)
  let let1205 := (Or let1198 let1148)
  let let1206 := (Eq let23 let13)
  let let1207 := (Implies let767 let1162)
  let let1208 := (And let397 let33)
  let let1209 := (Implies let258 let1154)
  let let1210 := (And let397 let257)
  let let1211 := (Or let231 (Or let255 let1191))
  let let1212 := (Or let231 (Or let725 let1191))
  let let1213 := (And let230 let724)
  let let1214 := (Implies let1213 let1191)
  let let1215 := (Not let1191)
  let let1216 := (Or let1215 let37)
  let let1217 := (Or let249 (Or let9 let1216))
  let let1218 := (Or let772 (Or let416 let1216))
  let let1219 := (And let250 (And let415 let1191))
  let let1220 := (Eq let10 fmt1)
  let let1221 := (And let1191 (And let250 let415))
  let let1222 := (Not let37)
  let let1223 := (Or let262 let1222)
  let let1224 := (Or let1039 let1223)
  let let1225 := (Or let1041 let1224)
  let let1226 := (Implies let780 let1154)
  let let1227 := (Or let262 (Or let1222 let1154))
  let let1228 := (And let783 let1092)
  let let1229 := (Implies let1228 let1120)
  let let1230 := (Not let783)
  let let1231 := (Or let1230 let1143)
  let let1232 := (Eq let26 let14)
  let let1233 := (Eq let12 let4)
  let let1234 := (Eq let37 let783)
  let let1235 := (And let783 let1099)
  let let1236 := (Eq let19 let13)
  let let1237 := (Or let415 let1034)
  let let1238 := (Or let1034 let1041)
  let let1239 := (Or let415 let1238)
  let let1240 := (Or let415 (Or let1034 (Or let1041 let1039)))
  let let1241 := (Or let1041 (Or let1109 (Or let1113 let1177)))
  let let1242 := (Or let1113 let1178)
  let let1243 := (Implies let325 let1154)
  let let1244 := (Eq let4 let18)
  let let1245 := (And let401 let1244)
  let let1246 := (Implies let1245 let1059)
  let let1247 := (Or let1086 (Or (Not let1244) let1059))
  let let1248 := (Implies let347 let1244)
  let let1249 := (Or (Not let347) let1244)
  let let1250 := (And let322 let1145)
  let let1251 := (Implies let1250 let347)
  let let1252 := (Or let1176 (Or let1039 (Or let1113 let347)))
  let let1253 := (Or let1041 let1051)
  let let1254 := (Or let1041 (Or let1053 let1114))
  let let1255 := (Or let1113 let1057)
  let let1256 := (Implies let337 let1162)
  let let1257 := (Not let225)
  let let1258 := (Not let122)
  let let1259 := (Or let1257 let1258)
  let let1260 := (Implies let225 let1258)
  let let1261 := (Eq let122 False)
  let let1262 := (Not let76)
  let let1263 := (Implies let784 let1154)
  let let1264 := (Eq let4 let19)
  let let1265 := (And let401 (And let20 let1264))
  let let1266 := (Or (Not let1264) let1059)
  let let1267 := (Implies let69 let1264)
  let let1268 := (Or (Not let69) let1264)
  let let1269 := (And let76 let31)
  let let1270 := (Implies let1269 let69)
  let let1271 := (Or let1262 (Or let1113 let69))
  let let1272 := (Or let1034 let470)
  let let1273 := (Not let319)
  let let1274 := (Or let1273 let470)
  let let1275 := (Or let1273 let1257)
  let let1276 := (Implies let319 let1257)
  let let1277 := (Or let1273 let1258)
  let let1278 := (Implies let319 let1258)
  let let1279 := (Or let122 let225)
  let let1280 := (Not let47)
  let let1281 := (Implies let787 let1162)
  let let1282 := (Eq let4 let26)
  let let1283 := (And let401 (And let59 let1282))
  let let1284 := (Or (Not let1282) let1058)
  let let1285 := (Implies let52 let1282)
  let let1286 := (Or (Not let52) let1282)
  let let1287 := (And let47 let42)
  let let1288 := (Implies let1287 let52)
  let let1289 := (Or let1280 (Or let1034 let52))
  let let1290 := (Or let470 let1034)
  let let1291 := (Or let1113 let1039)
  let let1292 := (Implies let48 let1162)
  let let1293 := (Or let1039 (Or let262 (Or let1222 let1162)))
  let let1294 := (And let783 let1282)
  let let1295 := (And let783 let1145)
  let let1296 := (Implies let1295 let1121)
  let let1297 := (Or let1230 let1149)
  let let1298 := (Or let1222 let1238)
  let let1299 := (Or let1041 let1291)
  let let1300 := (Or let1113 let1225)
  let let1301 := (Implies let43 let1122)
  let let1302 := (Implies let557 let1154)
  let let1303 := (And let783 let1264)
  let let1304 := (Or let1025 let1028)
  let let1305 := (Implies let134 let1028)
  let let1306 := (Or let415 let1109)
  let let1307 := (Implies let368 let1060)
  let let1308 := (Eq let1 let14)
  let let1309 := (And let16 (And let1121 let1308))
  let let1310 := (Implies let34 let1309)
  let let1311 := (Eq let14 let1)
  let let1312 := (Not let1311)
  let let1313 := (binrel% HAdd.hAdd let189 let1130)
  let let1314 := (binrel% LE.le let1070 let1313)
  let let1315 := (Eq let63 let189)
  let let1316 := (And let740 let1311)
  let let1317 := (Eq let1 let2)
  let let1318 := (And let401 let1317)
  let let1319 := (And let27 let1169)
  let let1320 := (Implies let704 let1162)
  let let1321 := (And let783 let1169)
fun lean_r0 : (Eq let7 let3) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let36 let35) => -- THEORY_REWRITE_BOOL
fun lean_r2 : (Eq let45 let44) => -- THEORY_REWRITE_BOOL
fun lean_r3 : (Eq let50 let49) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let58 let57) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let60 let59) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let63 let61) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let66 let65) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let69 let67) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let72 let71) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let75 let74) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let78 let76) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let81 let80) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let84 True) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let86 let85) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let98 let97) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let100 let99) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let104 let102) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let108 let106) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let118 let113) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let127 let126) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let130 let129) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let133 let132) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let135 let134) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let138 let137) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let142 let139) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let145 let144) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let148 let147) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let151 let150) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let154 let153) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let157 let156) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let159 let158) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let161 let160) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let164 let163) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let166 let165) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let174 let173) => -- THEORY_REWRITE_BOOL
fun lean_r38 : let176 => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let179 let178) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let180 let140) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let183 let182) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let187 let186) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let189 let188) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let192 let191) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let195 let193) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let196 True) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let200 let199) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let202 let201) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let204 let139) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let206 let205) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let207 let184) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let131 let5) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let208 let117) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let211 let210) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let214 let212) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let215 let16) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let216 let203) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let96 let217) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let218 True) => -- THEORY_REWRITE_BOOL
fun lean_r60 : (Eq let220 let219) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let222 let221) => -- THEORY_REWRITE_ARITH
fun lean_r62 : (Eq let224 let223) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let226 let225) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq let227 True) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let228 let4) => -- THEORY_REWRITE_ARITH
fun lean_r66 : (Eq let229 True) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq let233 let231) => -- THEORY_REWRITE_ARITH
fun lean_r68 : (Eq let235 let234) => -- THEORY_REWRITE_ARITH
fun lean_r69 : (Eq let236 True) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq let237 False) => -- THEORY_REWRITE_ARITH
fun lean_r71 : (Eq let246 let245) => -- THEORY_REWRITE_BOOL
fun lean_r72 : (Eq let248 let247) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let252 let250) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let254 let253) => -- THEORY_REWRITE_ARITH
fun lean_r75 : (Eq let260 let259) => -- THEORY_REWRITE_BOOL
fun lean_r76 : (Eq let261 let12) => -- THEORY_REWRITE_ARITH
fun lean_r77 : (Eq let263 let262) => -- THEORY_REWRITE_ARITH
fun lean_r78 : (Eq let264 True) => -- EVALUATE
fun lean_r79 : (Eq let266 let265) => -- THEORY_REWRITE_ARITH
fun lean_r80 : (Eq let267 let197) => -- THEORY_REWRITE_ARITH
fun lean_r81 : (Eq let268 True) => -- THEORY_REWRITE_ARITH
fun lean_r82 : (Eq let270 let269) => -- THEORY_REWRITE_ARITH
fun lean_r83 : (Eq let272 let271) => -- THEORY_REWRITE_ARITH
fun lean_r84 : (Eq let273 let62) => -- THEORY_REWRITE_ARITH
fun lean_r85 : (Eq let276 let275) => -- THEORY_REWRITE_ARITH
fun lean_r86 : (Eq let277 let83) => -- THEORY_REWRITE_ARITH
fun lean_r87 : (Eq let281 let280) => -- THEORY_REWRITE_ARITH
fun lean_r88 : (Eq let282 let103) => -- THEORY_REWRITE_ARITH
fun lean_r89 : (Eq let284 let283) => -- THEORY_REWRITE_ARITH
fun lean_r90 : (Eq let288 let287) => -- THEORY_REWRITE_ARITH
fun lean_r91 : (Eq let289 let213) => -- THEORY_REWRITE_ARITH
fun lean_r92 : (Eq let291 let290) => -- THEORY_REWRITE_ARITH
fun lean_r93 : (Eq let292 True) => -- THEORY_REWRITE_ARITH
fun lean_r94 : (Eq let294 let293) => -- THEORY_REWRITE_ARITH
fun lean_r95 : (Eq let296 let295) => -- THEORY_REWRITE_ARITH
fun lean_r96 : (Eq let298 let297) => -- THEORY_REWRITE_ARITH
fun lean_r97 : (Eq let299 let109) => -- THEORY_REWRITE_ARITH
fun lean_r98 : (Eq let300 let203) => -- THEORY_REWRITE_ARITH
fun lean_r99 : (Eq let303 let302) => -- THEORY_REWRITE_ARITH
fun lean_r100 : (Eq let305 let304) => -- THEORY_REWRITE_ARITH
fun lean_r101 : (Eq let307 let306) => -- THEORY_REWRITE_ARITH
fun lean_r102 : (Eq let309 let308) => -- THEORY_REWRITE_ARITH
fun lean_r103 : (Eq let318 let317) => -- THEORY_REWRITE_BOOL
fun lean_r104 : (Eq let320 let319) => -- THEORY_REWRITE_ARITH
fun lean_r105 : (Eq let327 let326) => -- THEORY_REWRITE_BOOL
fun lean_r106 : (Eq let328 let328) => -- THEORY_REWRITE_ARITH
fun lean_r107 : (Eq let332 let331) => -- THEORY_REWRITE_ARITH
fun lean_r108 : (Eq let334 let9) => -- THEORY_REWRITE_ARITH
fun lean_r109 : let336 => -- THEORY_REWRITE_ARITH
fun lean_r110 : (Eq let339 let338) => -- THEORY_REWRITE_BOOL
fun lean_r111 : (Eq let340 let120) => -- THEORY_REWRITE_ARITH
fun lean_r112 : (Eq let335 let335) => -- THEORY_REWRITE_ARITH
fun lean_r113 : (Eq let342 let341) => -- THEORY_REWRITE_ARITH
fun lean_r114 : (Eq let345 let343) => -- THEORY_REWRITE_ARITH
fun lean_r115 : (Eq let347 let346) => -- THEORY_REWRITE_ARITH
fun lean_r116 : (Eq let349 let348) => -- THEORY_REWRITE_ARITH
fun lean_r117 : (Eq let351 let350) => -- THEORY_REWRITE_ARITH
fun lean_r118 : (Eq let352 let77) => -- THEORY_REWRITE_ARITH
fun lean_r119 : (Eq let356 let354) => -- THEORY_REWRITE_BOOL
fun lean_r120 : (Eq let359 let358) => -- THEORY_REWRITE_ARITH
fun lean_r121 : (Eq let361 let360) => -- THEORY_REWRITE_ARITH
fun lean_r122 : (Eq let362 let344) => -- THEORY_REWRITE_ARITH
fun lean_r123 : (Eq let364 let363) => -- THEORY_REWRITE_ARITH
fun lean_r124 : (Eq let365 let230) => -- THEORY_REWRITE_BOOL
fun lean_r125 : (Eq let367 let366) => -- THEORY_REWRITE_ARITH
fun lean_r126 : (Eq let370 let369) => -- THEORY_REWRITE_BOOL
fun lean_r127 : (Eq let372 let371) => -- THEORY_REWRITE_ARITH
fun lean_r128 : (Eq let373 let83) => -- THEORY_REWRITE_ARITH
fun lean_r129 : (Eq let374 let275) => -- THEORY_REWRITE_BOOL
fun lean_r130 : (Eq let375 let12) => -- THEORY_REWRITE_ARITH
fun lean_r131 : (Eq let376 let1) => -- THEORY_REWRITE_ARITH
fun lean_r132 : (Eq let387 let386) => -- THEORY_REWRITE_BOOL
fun lean_r133 : (Eq let393 let392) => -- THEORY_REWRITE_BOOL
fun lean_r134 : (Eq let394 let322) => -- THEORY_REWRITE_ARITH
fun lean_r135 : (Eq let396 let37) => -- THEORY_REWRITE_ARITH
fun lean_r136 : (Eq let397 let255) => -- THEORY_REWRITE_ARITH
fun lean_r137 : (Eq let301 let22) => -- THEORY_REWRITE_ARITH
fun lean_r138 : (Eq let399 let398) => -- THEORY_REWRITE_ARITH
fun lean_r139 : (Eq let400 let113) => -- THEORY_REWRITE_ARITH
fun lean_r140 : (Eq let401 let9) => -- THEORY_REWRITE_ARITH
fun lean_r141 : (Eq let403 let402) => -- THEORY_REWRITE_ARITH
fun lean_r142 : (Eq let407 let406) => -- THEORY_REWRITE_BOOL
fun lean_r143 : (Eq let409 let408) => -- THEORY_REWRITE_ARITH
fun lean_r144 : (Eq let171 fmt0) => -- THEORY_REWRITE_ARITH
fun lean_r145 : (Eq let410 let83) => -- THEORY_REWRITE_ARITH
fun lean_r146 : (Eq let411 let107) => -- THEORY_REWRITE_ARITH
fun lean_r147 : (Eq let412 let250) => -- THEORY_REWRITE_ARITH
fun lean_r148 : (Eq let413 False) => -- THEORY_REWRITE_ARITH
fun lean_r149 : (Eq let414 True) => -- THEORY_REWRITE_BOOL
fun lean_r150 : let417 => -- THEORY_REWRITE_BOOL
fun lean_r151 : (Eq let418 let232) => -- THEORY_REWRITE_ARITH
fun lean_r152 : (Eq let422 let420) => -- THEORY_REWRITE_ARITH
fun lean_r153 : (Eq let424 let27) => -- THEORY_REWRITE_ARITH
fun lean_r154 : (Eq let425 let423) => -- THEORY_REWRITE_ARITH
fun lean_r155 : (Eq let505 let504) => -- THEORY_REWRITE_BOOL
fun lean_r156 : (Eq let506 let29) => -- THEORY_REWRITE_ARITH
fun lean_r157 : (Eq let514 let513) => -- THEORY_REWRITE_ARITH
fun lean_r158 : (Eq let516 let515) => -- THEORY_REWRITE_ARITH
fun lean_r159 : (Eq let519 let518) => -- THEORY_REWRITE_BOOL
fun lean_r160 : (Eq let521 let47) => -- THEORY_REWRITE_ARITH
fun lean_r161 : (Eq let522 let520) => -- THEORY_REWRITE_ARITH
fun lean_r162 : (Eq let95 let523) => -- THEORY_REWRITE_ARITH
fun lean_r163 : (Eq let525 let524) => -- THEORY_REWRITE_BOOL
fun lean_r164 : (Eq let528 let527) => -- THEORY_REWRITE_BOOL
fun lean_r165 : (Eq let530 let529) => -- THEORY_REWRITE_BOOL
fun lean_r166 : (Eq let316 let531) => -- THEORY_REWRITE_ARITH
fun lean_r167 : (Eq let532 let501) => -- THEORY_REWRITE_ARITH
fun lean_r168 : (Eq let169 let421) => -- THEORY_REWRITE_ARITH
fun lean_r169 : (Eq let534 let533) => -- THEORY_REWRITE_ARITH
fun lean_r170 : (Eq let537 let535) => -- THEORY_REWRITE_ARITH
fun lean_r171 : (Eq let540 let539) => -- THEORY_REWRITE_ARITH
fun lean_r172 : (Eq let543 let542) => -- THEORY_REWRITE_BOOL
fun lean_r173 : (Eq let544 let16) => -- THEORY_REWRITE_BOOL
fun lean_r174 : (Eq let554 let550) => -- THEORY_REWRITE_ARITH
fun lean_r175 : (Eq let555 let122) => -- THEORY_REWRITE_ARITH
fun lean_r176 : (Eq let556 let11) => -- THEORY_REWRITE_ARITH
fun lean_r177 : (Eq let559 let558) => -- THEORY_REWRITE_BOOL
fun lean_r178 : (Eq let561 let560) => -- THEORY_REWRITE_ARITH
fun lean_r179 : (Eq let563 let562) => -- THEORY_REWRITE_ARITH
fun lean_r180 : (Eq let564 let443) => -- THEORY_REWRITE_ARITH
fun lean_r181 : (Eq let570 let569) => -- THEORY_REWRITE_ARITH
fun lean_r182 : (Eq let571 True) => -- THEORY_REWRITE_BOOL
fun lean_r183 : (Eq let572 True) => -- THEORY_REWRITE_BOOL
fun lean_r184 : (Eq let526 let573) => -- THEORY_REWRITE_ARITH
fun lean_r185 : (Eq let577 let575) => -- THEORY_REWRITE_ARITH
fun lean_r186 : (Eq let578 let576) => -- THEORY_REWRITE_ARITH
fun lean_r187 : (Eq let580 let579) => -- THEORY_REWRITE_ARITH
fun lean_r188 : (Eq let581 True) => -- THEORY_REWRITE_ARITH
fun lean_r189 : (Eq let244 let582) => -- THEORY_REWRITE_ARITH
fun lean_r190 : (Eq let583 let583) => -- THEORY_REWRITE_ARITH
fun lean_r191 : (Eq let584 True) => -- THEORY_REWRITE_ARITH
fun lean_r192 : (Eq let587 let586) => -- THEORY_REWRITE_ARITH
fun lean_r193 : (Eq let588 True) => -- THEORY_REWRITE_ARITH
fun lean_r194 : (Eq let593 let592) => -- THEORY_REWRITE_ARITH
fun lean_r195 : (Eq let594 True) => -- THEORY_REWRITE_BOOL
fun lean_r196 : (Eq let597 let596) => -- THEORY_REWRITE_ARITH
fun lean_r197 : (Eq let598 let24) => -- THEORY_REWRITE_ARITH
fun lean_r198 : (Eq let600 let355) => -- THEORY_REWRITE_ARITH
fun lean_r199 : (Eq let602 let601) => -- THEORY_REWRITE_ARITH
fun lean_r200 : (Eq let605 let604) => -- THEORY_REWRITE_BOOL
fun lean_r201 : (Eq let609 let608) => -- THEORY_REWRITE_ARITH
fun lean_r202 : (Eq let612 let611) => -- THEORY_REWRITE_ARITH
fun lean_r203 : (Eq let615 let614) => -- THEORY_REWRITE_BOOL
fun lean_r204 : (Eq let616 let453) => -- THEORY_REWRITE_ARITH
fun lean_r205 : (Eq let619 let618) => -- THEORY_REWRITE_ARITH
fun lean_r206 : (Eq let620 let599) => -- THEORY_REWRITE_ARITH
fun lean_r207 : (Eq let176 let621) => -- THEORY_REWRITE_BOOL
fun lean_r208 : (Eq let703 let702) => -- THEORY_REWRITE_BOOL
fun lean_r209 : (Eq let706 let705) => -- THEORY_REWRITE_BOOL
fun lean_r210 : (Eq let709 let707) => -- THEORY_REWRITE_ARITH
fun lean_r211 : (Eq let711 let710) => -- THEORY_REWRITE_ARITH
fun lean_r212 : let605 => -- THEORY_REWRITE_ARITH
fun lean_r213 : (Eq let714 let713) => -- THEORY_REWRITE_BOOL
fun lean_r214 : (Eq let715 True) => -- THEORY_REWRITE_BOOL
fun lean_r215 : let615 => -- THEORY_REWRITE_BOOL
fun lean_r216 : (Eq let716 let461) => -- THEORY_REWRITE_ARITH
fun lean_r217 : let718 => -- THEORY_REWRITE_BOOL
fun lean_r218 : let720 => -- THEORY_REWRITE_ARITH
fun lean_r219 : (Eq let721 True) => -- THEORY_REWRITE_BOOL
fun lean_r220 : (Eq let719 let719) => -- THEORY_REWRITE_ARITH
fun lean_r221 : let543 => -- THEORY_REWRITE_BOOL
fun lean_r222 : let723 => -- THEORY_REWRITE_BOOL
fun lean_r223 : let726 => -- THEORY_REWRITE_BOOL
fun lean_r224 : (Eq let723 let727) => -- THEORY_REWRITE_BOOL
fun lean_r225 : (Eq let729 let194) => -- THEORY_REWRITE_ARITH
fun lean_r226 : (Eq let726 let730) => -- THEORY_REWRITE_BOOL
fun lean_r227 : (Eq let733 let732) => -- THEORY_REWRITE_BOOL
fun lean_r228 : (Eq let734 False) => -- THEORY_REWRITE_ARITH
fun lean_r229 : (Eq let736 let203) => -- THEORY_REWRITE_ARITH
fun lean_r230 : (Eq let738 let140) => -- THEORY_REWRITE_ARITH
fun lean_r231 : (Eq let739 let737) => -- THEORY_REWRITE_ARITH
fun lean_r232 : (Eq let740 True) => -- EVALUATE
fun lean_r233 : let519 => -- THEORY_REWRITE_ARITH
fun lean_r234 : (Eq let742 let741) => -- THEORY_REWRITE_ARITH
fun lean_r235 : let743 => -- THEORY_REWRITE_ARITH
fun lean_r236 : (Eq let718 let744) => -- THEORY_REWRITE_BOOL
fun lean_r237 : (Eq let746 let745) => -- THEORY_REWRITE_ARITH
fun lean_r238 : (Eq let689 let747) => -- THEORY_REWRITE_BOOL
fun lean_r239 : let127 => -- THEORY_REWRITE_BOOL
fun lean_r240 : (Eq let628 let430) => -- THEORY_REWRITE_ARITH
fun lean_r241 : (Eq let751 let750) => -- THEORY_REWRITE_ARITH
fun lean_r242 : (Eq let754 let753) => -- THEORY_REWRITE_BOOL
fun lean_r243 : (Eq let755 False) => -- THEORY_REWRITE_ARITH
fun lean_r244 : (Eq let756 True) => -- THEORY_REWRITE_BOOL
fun lean_r245 : let714 => -- THEORY_REWRITE_BOOL
fun lean_r246 : (Eq let759 let758) => -- THEORY_REWRITE_BOOL
fun lean_r247 : (Eq let760 True) => -- THEORY_REWRITE_BOOL
fun lean_r248 : (Eq let761 False) => -- THEORY_REWRITE_ARITH
fun lean_r249 : (Eq let762 let745) => -- THEORY_REWRITE_ARITH
fun lean_r250 : (Eq let765 let764) => -- THEORY_REWRITE_BOOL
fun lean_r251 : (Eq let417 let766) => -- THEORY_REWRITE_BOOL
fun lean_r252 : (Eq let769 let768) => -- THEORY_REWRITE_BOOL
fun lean_r253 : (Eq let770 let251) => -- THEORY_REWRITE_ARITH
fun lean_r254 : (Eq let771 True) => -- THEORY_REWRITE_BOOL
fun lean_r255 : let773 => -- THEORY_REWRITE_BOOL
fun lean_r256 : (Eq let774 let448) => -- THEORY_REWRITE_ARITH
fun lean_r257 : (Eq let775 let749) => -- THEORY_REWRITE_BOOL
fun lean_r258 : (Eq let773 let776) => -- THEORY_REWRITE_BOOL
fun lean_r259 : (Eq let639 let20) => -- THEORY_REWRITE_ARITH
fun lean_r260 : (Eq let779 let778) => -- THEORY_REWRITE_ARITH
fun lean_r261 : (Eq let782 let781) => -- THEORY_REWRITE_BOOL
fun lean_r262 : (Eq let783 let37) => -- THEORY_REWRITE_ARITH
fun lean_r263 : (Eq let786 let785) => -- THEORY_REWRITE_BOOL
fun lean_r264 : (Eq let167 let536) => -- THEORY_REWRITE_ARITH
fun lean_r265 : (Eq let789 let788) => -- THEORY_REWRITE_BOOL
fun lean_a266 : let791 => by
have lean_s0 : (Or let1161 (Or let1113 (Or let1041 let1293))) :=
  (scope (fun lean_a267 : let33 =>
    (scope (fun lean_a268 : let31 =>
      (scope (fun lean_a269 : let29 =>
        (scope (fun lean_a270 : let24 =>
          (scope (fun lean_a271 : let16 =>
            (scope (fun lean_a272 : let37 =>
              have lean_s0 : let1234 := by timed Eq.symm lean_r262
              have lean_s1 : let783 := by timed eqResolve lean_a272 lean_s0
              let lean_s2 := by timed And.intro lean_a270 lean_a268
              have lean_s3 : let1295 := by timed And.intro lean_s1 lean_s2
              have lean_s4 : let1297 :=
                (scope (fun lean_a273 : let783 =>
                  (scope (fun lean_a274 : let24 =>
                    (scope (fun lean_a275 : let31 =>
                      have lean_s4 : let1151 := by timed Eq.symm lean_a275
                      have lean_s5 : let598 := by timed Eq.symm lean_a274
                      have lean_s6 : let24 := by timed Eq.symm lean_s5
                      let lean_s7 := by timed Eq.trans lean_s4 lean_s6
                      have lean_s8 : let1233 := by timed Eq.symm lean_a273
                      have lean_s9 : let783 := by timed Eq.symm lean_s8
                      have lean_s10 : let1236 := by timed flipCongrArg lean_s9 [xx5fcount]
                      have lean_s11 : let1121 := by timed Eq.trans lean_s7 lean_s10
                      show let1121 from lean_s11
                ))))))
              have lean_s5 : let1296 := by liftOrNToImp lean_s4, 3
              have lean_s6 : let1121 := by timed modusPonens lean_s3 lean_s5
              let lean_s7 := by timed And.intro lean_a269 lean_a267
              have lean_s8 : let1321 := by timed And.intro lean_s1 lean_s7
              have lean_s9 : (Or let1230 let1173) :=
                (scope (fun lean_a274 : let783 =>
                  (scope (fun lean_a275 : let29 =>
                    (scope (fun lean_a276 : let33 =>
                      have lean_s9 : let1175 := by timed Eq.symm lean_a276
                      have lean_s10 : let506 := by timed Eq.symm lean_a275
                      have lean_s11 : let29 := by timed Eq.symm lean_s10
                      let lean_s12 := by timed Eq.trans lean_s9 lean_s11
                      have lean_s13 : let1233 := by timed Eq.symm lean_a274
                      have lean_s14 : let783 := by timed Eq.symm lean_s13
                      have lean_s15 : let1232 := by timed flipCongrArg lean_s14 [sx5fcount]
                      have lean_s16 : let1058 := by timed Eq.trans lean_s12 lean_s15
                      show let1058 from lean_s16
                ))))))
              have lean_s10 : (Implies let1321 let1058) := by liftOrNToImp lean_s9, 3
              have lean_s11 : let1058 := by timed modusPonens lean_s8 lean_s10
              let lean_s12 := by timed And.intro lean_s6 lean_s11
              have lean_s13 : let1162 := by timed And.intro lean_a271 lean_s12
              show let1162 from lean_s13
  ))))))))))))
have lean_s1 : let1320 := by liftOrNToImp lean_s0, 6
have lean_s2 : (Eq let704 let704) := by timed rfl
let lean_s3 := by timed flipCongrArg lean_s2 [Implies]
have lean_s4 : (Or let262 (Or let1126 let1063)) :=
  (scope (fun lean_a274 : let16 =>
    (scope (fun lean_a275 : let1121 =>
      (scope (fun lean_a276 : let1058 =>
        have lean_s4 : let1065 := by timed Eq.symm lean_a276
        have lean_s5 : let1067 :=
          (scope (fun lean_a276 : let1065 =>
            have lean_s5 : let740 := by timed trueElim lean_r232
            have lean_s6 : let1080 := by timed And.intro lean_s5 lean_a276
            have lean_s7 : let1081 := by arithMulPos [let14, let4, let62], 4
            have lean_s8 : let1079 := by timed modusPonens lean_s6 lean_s7
            have lean_s9 : let1134 := by timed Eq.symm lean_a275
            have lean_s10 : let1135 := by timed And.intro lean_s5 lean_s9
            have lean_s11 : let1136 := by arithMulPos [let13, let22, let62], 4
            have lean_s12 : let1133 := by timed modusPonens lean_s10 lean_s11
            have lean_s13 : let264 := by timed trueElim lean_r78
            have lean_s14 : let1073 := by timed And.intro lean_s13 lean_a274
            have lean_s15 : let1074 := by arithMulNeg [let15, let10, let203], 3
            have lean_s16 : let1072 := by timed modusPonens lean_s14 lean_s15
            have lean_s17 : let1166 := by sumBounds [lean_s8, lean_s12, lean_s16]
            let lean_s18 := by timed congrHAdd lean_r211 lean_r231
            have lean_s19 : (Eq let1070 let738) := by timed congrHAdd lean_r8 lean_s18
            have lean_s20 : (Eq let1070 let140) := by timed Eq.trans lean_s19 lean_r230
            let lean_s21 := by timed flipCongrArg lean_s20 [LE.le]
            let lean_s22 := by timed congrHAdd lean_r40 lean_r49
            have lean_s23 : (Eq let1165 let762) := by timed congrHAdd lean_r84 lean_s22
            have lean_s24 : (Eq let1165 let745) := by timed Eq.trans lean_s23 lean_r249
            have lean_s25 : (Eq let1166 let761) := by timed congr lean_s21 lean_s24
            have lean_s26 : (Eq let1166 False) := by timed Eq.trans lean_s25 lean_r248
            show False from by timed eqResolve lean_s17 lean_s26
          ))
        have lean_s6 : let1066 := by liftOrNToNeg lean_s5
        show False from by timed contradiction lean_s4 lean_s6
  ))))))
have lean_s5 : (Not let1162) := by liftOrNToNeg lean_s4
have lean_s6 : let1164 := by timed falseIntro lean_s5
have lean_s7 : (Eq let1320 let706) := by timed congr lean_s3 lean_s6
have lean_s8 : (Eq let1320 let705) := by timed Eq.trans lean_s7 lean_r209
have lean_s9 : let705 := by timed eqResolve lean_s1 lean_s8
have lean_s10 : (Or let1161 let1300) := by timed flipNotAnd lean_s9 [let33, let31, let29, let24, let16, let37]
have lean_s11 : (Or let262 (Or let1222 (Or let1161 let1299))) := by permutateOr lean_s10, [4, 5, 0, 2, 1, 3], (- 1)
have lean_s12 : (Or let1219 (Or let772 (Or let416 let1215))) := by timed cnfAndNeg [let250, let415, let1191]
have lean_s13 : let1218 :=
  (scope (fun lean_a277 : let250 =>
    (scope (fun lean_a278 : let415 =>
      (scope (fun lean_a279 : let1191 =>
        let lean_s13 := by timed And.intro lean_a277 lean_a278
        have lean_s14 : let1221 := by timed And.intro lean_a279 lean_s13
        have lean_s15 : (Or let1215 (Or let772 (Or let416 let1220))) :=
          (scope (fun lean_a280 : let1191 =>
            (scope (fun lean_a281 : let250 =>
              (scope (fun lean_a282 : let415 =>
                have lean_s15 : (Eq let250 let412) := by timed Eq.symm lean_r147
                have lean_s16 : let412 := by timed eqResolve lean_a281 lean_s15
                have lean_s17 : (binrel% LE.le fmt1 let8) := by intTightUb lean_s16
                have lean_s18 : (binrel% LT.lt fmt1 let8) := by trichotomy lean_s17, lean_a282
                have lean_s19 : (binrel% LE.le fmt1 let10) := by intTightUb lean_s18
                have lean_s20 : let37 := by trichotomy lean_a280, lean_s19
                have lean_s21 : let1220 := by timed Eq.symm lean_s20
                show let1220 from lean_s21
          ))))))
        have lean_s16 : (Implies let1221 let1220) := by liftOrNToImp lean_s15, 3
        have lean_s17 : let1220 := by timed modusPonens lean_s14 lean_s16
        have lean_s18 : (Or (Not let1220) let37) :=
          (scope (fun lean_a280 : let1220 =>
            have lean_s18 : let37 := by timed Eq.symm lean_a280
            show let37 from lean_s18
          ))
        have lean_s19 : (Implies let1220 let37) := by liftOrNToImp lean_s18, 1
        have lean_s20 : let37 := by timed modusPonens lean_s17 lean_s19
        show let37 from lean_s20
  ))))))
have lean_s14 : (Implies let1219 let37) := by liftOrNToImp lean_s13, 3
have lean_s15 : (Or (Not let1219) let37) := by timed impliesElim lean_s14
have lean_s16 : let1218 := by R1 lean_s12, lean_s15, let1219, [(- 1), (- 1)]
have lean_s17 : let970 := by timed rfl
have lean_s18 : let771 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let776 let771) := by timed congr lean_s19 lean_r255
have lean_s21 : (Eq let776 True) := by timed Eq.trans lean_s20 lean_r254
have lean_s22 : (Eq let773 True) := by timed Eq.trans lean_r258 lean_s21
have lean_s23 : let773 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : let218 := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq let766 let218) := by timed congr lean_s26 lean_r150
have lean_s28 : (Eq let766 True) := by timed Eq.trans lean_s27 lean_r59
have lean_s29 : (Eq let417 True) := by timed Eq.trans lean_r251 lean_s28
have lean_s30 : let417 := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s17 lean_s30
have lean_s32 : (Eq let1215 let1215) := by timed rfl
let lean_s33 := by timed congr lean_s17 lean_s32
have lean_s34 : (Eq let37 let37) := by timed rfl
let lean_s35 := by timed congr lean_s33 lean_s34
let lean_s36 := by timed congr lean_s31 lean_s35
have lean_s37 : (Eq let1218 let1217) := by timed congr lean_s24 lean_s36
have lean_s38 : let1217 := by timed eqResolve lean_s16 lean_s37
have lean_s39 : (Or let249 (Or let37 (Or let9 let1215))) := by permutateOr lean_s38, [0, 3, 1, 2], (- 1)
have lean_s40 : (Or let1161 (Or let1113 (Or let1041 (Or let1053 (Or let1039 (Or let1050 (Or let262 (Or let415 let1309)))))))) :=
  (scope (fun lean_a281 : let33 =>
    (scope (fun lean_a282 : let31 =>
      (scope (fun lean_a283 : let29 =>
        (scope (fun lean_a284 : let27 =>
          (scope (fun lean_a285 : let24 =>
            (scope (fun lean_a286 : let20 =>
              (scope (fun lean_a287 : let16 =>
                (scope (fun lean_a288 : let9 =>
                  have lean_s40 : let1098 := by timed Eq.symm lean_r140
                  have lean_s41 : let401 := by timed eqResolve lean_a288 lean_s40
                  let lean_s42 := by timed And.intro lean_a285 lean_a282
                  let lean_s43 := by timed And.intro lean_a286 lean_s42
                  have lean_s44 : let1146 := by timed And.intro lean_s41 lean_s43
                  have lean_s45 : let1150 :=
                    (scope (fun lean_a284 : let401 =>
                      (scope (fun lean_a285 : let20 =>
                        (scope (fun lean_a286 : let24 =>
                          (scope (fun lean_a287 : let31 =>
                            have lean_s45 : let1151 := by timed Eq.symm lean_a287
                            have lean_s46 : let598 := by timed Eq.symm lean_a286
                            have lean_s47 : let24 := by timed Eq.symm lean_s46
                            let lean_s48 := by timed Eq.trans lean_s45 lean_s47
                            have lean_s49 : let639 := by timed Eq.symm lean_a285
                            have lean_s50 : let20 := by timed Eq.symm lean_s49
                            let lean_s51 := by timed Eq.trans lean_s48 lean_s50
                            have lean_s52 : let1089 := by timed Eq.symm lean_a284
                            have lean_s53 : let401 := by timed Eq.symm lean_s52
                            have lean_s54 : let1105 := by timed flipCongrArg lean_s53 [xx5fcount]
                            have lean_s55 : let1121 := by timed Eq.trans lean_s51 lean_s54
                            show let1121 from lean_s55
                    ))))))))
                  have lean_s46 : let1147 := by liftOrNToImp lean_s45, 4
                  have lean_s47 : let1121 := by timed modusPonens lean_s44 lean_s46
                  let lean_s48 := by timed And.intro lean_a283 lean_a281
                  have lean_s49 : let1319 := by timed And.intro lean_a284 lean_s48
                  have lean_s50 : (Or let1053 (Or let1041 (Or let1161 let7))) :=
                    (scope (fun lean_a285 : let27 =>
                      (scope (fun lean_a286 : let29 =>
                        (scope (fun lean_a287 : let33 =>
                          have lean_s50 : let1175 := by timed Eq.symm lean_a287
                          have lean_s51 : let506 := by timed Eq.symm lean_a286
                          have lean_s52 : let29 := by timed Eq.symm lean_s51
                          let lean_s53 := by timed Eq.trans lean_s50 lean_s52
                          have lean_s54 : let1096 := by timed Eq.symm lean_a285
                          have lean_s55 : let27 := by timed Eq.symm lean_s54
                          have lean_s56 : let7 := by timed Eq.trans lean_s53 lean_s55
                          show let7 from lean_s56
                    ))))))
                  have lean_s51 : (Implies let1319 let7) := by liftOrNToImp lean_s50, 3
                  have lean_s52 : let7 := by timed modusPonens lean_s49 lean_s51
                  have lean_s53 : (Or (Not let7) let1317) :=
                    (scope (fun lean_a285 : let7 =>
                      have lean_s53 : let3 := by timed eqResolve lean_a285 lean_r0
                      have lean_s54 : let1317 := by timed Eq.symm lean_s53
                      show let1317 from lean_s54
                    ))
                  have lean_s54 : (Implies let7 let1317) := by liftOrNToImp lean_s53, 1
                  have lean_s55 : let1317 := by timed modusPonens lean_s52 lean_s54
                  have lean_s56 : let1318 := by timed And.intro lean_s41 lean_s55
                  have lean_s57 : (Or let1086 (Or (Not let1317) let1308)) :=
                    (scope (fun lean_a286 : let401 =>
                      (scope (fun lean_a287 : let1317 =>
                        have lean_s57 : let3 := by timed Eq.symm lean_a287
                        have lean_s58 : let1317 := by timed Eq.symm lean_s57
                        have lean_s59 : let1089 := by timed Eq.symm lean_a286
                        have lean_s60 : let401 := by timed Eq.symm lean_s59
                        have lean_s61 : let1088 := by timed flipCongrArg lean_s60 [sx5fcount]
                        have lean_s62 : let1308 := by timed Eq.trans lean_s58 lean_s61
                        show let1308 from lean_s62
                    ))))
                  have lean_s58 : (Implies let1318 let1308) := by liftOrNToImp lean_s57, 2
                  have lean_s59 : let1308 := by timed modusPonens lean_s56 lean_s58
                  let lean_s60 := by timed And.intro lean_s47 lean_s59
                  have lean_s61 : let1309 := by timed And.intro lean_a287 lean_s60
                  show let1309 from lean_s61
  ))))))))))))))))
have lean_s41 : let1310 := by liftOrNToImp lean_s40, 8
have lean_s42 : (Eq let34 let34) := by timed rfl
let lean_s43 := by timed flipCongrArg lean_s42 [Implies]
have lean_s44 : (Or let262 (Or let1126 (Or (Not let1308) False))) :=
  (scope (fun lean_a287 : let16 =>
    (scope (fun lean_a288 : let1121 =>
      (scope (fun lean_a289 : let1308 =>
        have lean_s44 : let1311 := by timed Eq.symm lean_a289
        have lean_s45 : (Or let1312 False) :=
          (scope (fun lean_a288 : let1311 =>
            have lean_s45 : let740 := by timed trueElim lean_r232
            have lean_s46 : let1316 := by timed And.intro lean_s45 lean_a288
            have lean_s47 : (Implies let1316 let1315) := by arithMulPos [let14, let1, let62], 4
            have lean_s48 : let1315 := by timed modusPonens lean_s46 lean_s47
            have lean_s49 : let1134 := by timed Eq.symm lean_a288
            have lean_s50 : let1135 := by timed And.intro lean_s45 lean_s49
            have lean_s51 : let1136 := by arithMulPos [let13, let22, let62], 4
            have lean_s52 : let1133 := by timed modusPonens lean_s50 lean_s51
            have lean_s53 : let264 := by timed trueElim lean_r78
            have lean_s54 : let1073 := by timed And.intro lean_s53 lean_a287
            have lean_s55 : let1074 := by arithMulNeg [let15, let10, let203], 3
            have lean_s56 : let1072 := by timed modusPonens lean_s54 lean_s55
            have lean_s57 : let1314 := by sumBounds [lean_s48, lean_s52, lean_s56]
            let lean_s58 := by timed congrHAdd lean_r211 lean_r231
            have lean_s59 : (Eq let1070 let738) := by timed congrHAdd lean_r8 lean_s58
            have lean_s60 : (Eq let1070 let140) := by timed Eq.trans lean_s59 lean_r230
            let lean_s61 := by timed flipCongrArg lean_s60 [LE.le]
            let lean_s62 := by timed congrHAdd lean_r40 lean_r49
            have lean_s63 : (Eq let1313 let216) := by timed congrHAdd lean_r43 lean_s62
            have lean_s64 : (Eq let1313 let203) := by timed Eq.trans lean_s63 lean_r57
            have lean_s65 : (Eq let1314 let734) := by timed congr lean_s61 lean_s64
            have lean_s66 : (Eq let1314 False) := by timed Eq.trans lean_s65 lean_r228
            show False from by timed eqResolve lean_s57 lean_s66
          ))
        have lean_s46 : let1312 := by liftOrNToNeg lean_s45
        show False from by timed contradiction lean_s44 lean_s46
  ))))))
have lean_s45 : (Not let1309) := by liftOrNToNeg lean_s44
have lean_s46 : (Eq let1309 False) := by timed falseIntro lean_s45
have lean_s47 : (Eq let1310 let36) := by timed congr lean_s43 lean_s46
have lean_s48 : (Eq let1310 let35) := by timed Eq.trans lean_s47 lean_r1
have lean_s49 : let35 := by timed eqResolve lean_s41 lean_s48
have lean_s50 : (Or let1161 let1255) := by timed flipNotAnd lean_s49 [let33, let31, let29, let27, let24, let20, let16, let9]
have lean_s51 : (Or let262 (Or let415 (Or let1161 let1254))) := by permutateOr lean_s50, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
have lean_s52 : let943 := by timed rfl
have lean_s53 : (Eq let701 let701) := by timed rfl
let lean_s54 := by timed congr lean_s52 lean_s53
have lean_s55 : (Eq let700 let700) := by timed rfl
let lean_s56 := by timed congr lean_s52 lean_s55
have lean_s57 : (Eq let699 let699) := by timed rfl
let lean_s58 := by timed congr lean_s52 lean_s57
have lean_s59 : (Eq let698 let698) := by timed rfl
let lean_s60 := by timed congr lean_s52 lean_s59
have lean_s61 : (Eq let697 let697) := by timed rfl
let lean_s62 := by timed congr lean_s52 lean_s61
have lean_s63 : (Eq let696 let696) := by timed rfl
let lean_s64 := by timed congr lean_s52 lean_s63
have lean_s65 : (Eq let695 let695) := by timed rfl
let lean_s66 := by timed congr lean_s52 lean_s65
have lean_s67 : (Eq let694 let694) := by timed rfl
let lean_s68 := by timed congr lean_s52 lean_s67
have lean_s69 : (Eq let693 let693) := by timed rfl
let lean_s70 := by timed congr lean_s52 lean_s69
have lean_s71 : (Eq let692 let692) := by timed rfl
let lean_s72 := by timed congr lean_s52 lean_s71
have lean_s73 : let1009 := by timed rfl
let lean_s74 := by timed flipCongrArg lean_s73 [Eq]
have lean_s75 : (Eq let691 let858) := by timed congr lean_s74 lean_r205
let lean_s76 := by timed congr lean_s52 lean_s75
let lean_s77 := by timed congr lean_s52 lean_r202
have lean_s78 : let999 := by timed rfl
let lean_s79 := by timed flipCongrArg lean_s78 [GE.ge]
have lean_s80 : (Eq fmt0 fmt0) := by timed rfl
let lean_s81 := by timed flipCongrArg lean_s80 [HAdd.hAdd]
have lean_s82 : (Eq fmtx5flength fmtx5flength) := by timed rfl
let lean_s83 := by timed flipCongrArg lean_s82 [HAdd.hAdd]
have lean_s84 : (Eq let132 let602) := by timed congr lean_s83 lean_r52
have lean_s85 : (Eq let132 let601) := by timed Eq.trans lean_s84 lean_r199
have lean_s86 : (Eq let133 let601) := by timed Eq.trans lean_r24 lean_s85
have lean_s87 : (Eq let606 let620) := by timed congr lean_s81 lean_s86
have lean_s88 : (Eq let606 let599) := by timed Eq.trans lean_s87 lean_r206
have lean_s89 : (Eq let607 let600) := by timed congr lean_s79 lean_s88
have lean_s90 : (Eq let607 let355) := by timed Eq.trans lean_s89 lean_r198
have lean_s91 : (Eq let608 let356) := by timed flipCongrArg lean_s90 [Not]
have lean_s92 : (Eq let608 let354) := by timed Eq.trans lean_s91 lean_r119
have lean_s93 : (Eq let609 let354) := by timed Eq.trans lean_r201 lean_s92
let lean_s94 := by timed congr lean_s52 lean_s93
let lean_s95 := by timed flipCongrArg lean_s78 [LE.le]
have lean_s96 : (Eq let595 let779) := by timed congr lean_s95 lean_r168
have lean_s97 : (Eq let595 let778) := by timed Eq.trans lean_s96 lean_r260
have lean_s98 : (Eq let596 let857) := by timed flipCongrArg lean_s97 [Not]
have lean_s99 : (Eq let597 let857) := by timed Eq.trans lean_r196 lean_s98
let lean_s100 := by timed congr lean_s52 lean_s99
let lean_s101 := by timed congr lean_s52 lean_r194
have lean_s102 : let1008 := by timed rfl
let lean_s103 := by timed flipCongrArg lean_s102 [GE.ge]
have lean_s104 : (Eq distance distance) := by timed rfl
let lean_s105 := by timed flipCongrArg lean_s82 [HAdd.hAdd]
have lean_s106 : (Eq let579 let578) := by timed congr lean_s105 lean_r97
have lean_s107 : (Eq let579 let576) := by timed Eq.trans lean_s106 lean_r186
have lean_s108 : (Eq let580 let576) := by timed Eq.trans lean_r187 lean_s107
let lean_s109 := by timed congrHAdd lean_s104 lean_s108
have lean_s110 : (Eq let583 let577) := by timed congrHAdd lean_s73 lean_s109
have lean_s111 : let1010 := by timed Eq.trans lean_s110 lean_r185
have lean_s112 : let1010 := by timed Eq.trans lean_r190 lean_s111
have lean_s113 : (Eq let585 let751) := by timed congr lean_s103 lean_s112
have lean_s114 : (Eq let585 let750) := by timed Eq.trans lean_s113 lean_r241
have lean_s115 : (Eq let586 let775) := by timed flipCongrArg lean_s114 [Not]
have lean_s116 : (Eq let586 let749) := by timed Eq.trans lean_s115 lean_r257
have lean_s117 : (Eq let587 let749) := by timed Eq.trans lean_r192 lean_s116
let lean_s118 := by timed congr lean_s52 lean_s117
let lean_s119 := by timed flipCongrArg lean_s102 [Eq]
have lean_s120 : let227 := by timed rfl
let lean_s121 := by timed flipCongrArg lean_s120 [HMul.hMul]
let lean_s122 := by timed flipCongrArg lean_s78 [HAdd.hAdd]
have lean_s123 : (Eq let560 let375) := by timed congr lean_s122 lean_r176
have lean_s124 : (Eq let560 let12) := by timed Eq.trans lean_s123 lean_r130
have lean_s125 : (Eq let561 let12) := by timed Eq.trans lean_r178 lean_s124
let lean_s126 := by timed flipCongrArg lean_s125 [HAdd.hAdd]
have lean_s127 : (Eq let146 let146) := by timed rfl
have lean_s128 : (Eq let562 let148) := by timed congr lean_s126 lean_s127
have lean_s129 : (Eq let562 let147) := by timed Eq.trans lean_s128 lean_r29
have lean_s130 : (Eq let563 let147) := by timed Eq.trans lean_r179 lean_s129
have lean_s131 : (Eq let567 let547) := by timed flipCongrArg lean_s130 [sx5fcount]
have lean_s132 : (Eq let568 let552) := by timed congr lean_s121 lean_s131
let lean_s133 := by timed flipCongrArg lean_s120 [HMul.hMul]
have lean_s134 : (Eq let565 let545) := by timed flipCongrArg lean_s130 [xx5fcount]
have lean_s135 : (Eq let566 let551) := by timed congr lean_s133 lean_s134
let lean_s136 := by timed congrHAdd lean_s132 lean_s135
have lean_s137 : (Eq let569 let553) := by timed congrHAdd lean_s73 lean_s136
have lean_s138 : (Eq let570 let553) := by timed Eq.trans lean_r181 lean_s137
have lean_s139 : (Eq let690 let554) := by timed congr lean_s119 lean_s138
have lean_s140 : (Eq let690 let550) := by timed Eq.trans lean_s139 lean_r174
let lean_s141 := by timed congr lean_s52 lean_s140
have lean_s142 : let970 := by timed rfl
let lean_s143 := by timed flipCongrArg lean_s78 [Eq]
have lean_s144 : (Eq let688 let222) := by timed congr lean_s143 lean_r144
have lean_s145 : (Eq let688 let221) := by timed Eq.trans lean_s144 lean_r61
let lean_s146 := by timed congr lean_s142 lean_s145
let lean_s147 := by timed flipCongrArg lean_s78 [Eq]
have lean_s148 : (Eq let687 let422) := by timed congr lean_s147 lean_r168
have lean_s149 : (Eq let687 let420) := by timed Eq.trans lean_s148 lean_r152
let lean_s150 := by timed congr lean_s142 lean_s149
let lean_s151 := by timed flipCongrArg lean_s78 [Eq]
have lean_s152 : (Eq let686 let537) := by timed congr lean_s151 lean_r264
have lean_s153 : (Eq let686 let535) := by timed Eq.trans lean_s152 lean_r170
let lean_s154 := by timed congr lean_s142 lean_s153
let lean_s155 := by timed flipCongrArg lean_s78 [Eq]
have lean_s156 : (Eq let685 let516) := by timed congr lean_s155 lean_r125
have lean_s157 : (Eq let685 let515) := by timed Eq.trans lean_s156 lean_r158
let lean_s158 := by timed congr lean_s142 lean_s157
let lean_s159 := by timed flipCongrArg lean_s78 [Eq]
have lean_s160 : (Eq let684 let534) := by timed congr lean_s159 lean_r141
have lean_s161 : (Eq let684 let533) := by timed Eq.trans lean_s160 lean_r169
let lean_s162 := by timed congr lean_s142 lean_s161
let lean_s163 := by timed flipCongrArg lean_s78 [Eq]
have lean_s164 : (Eq let683 let359) := by timed congr lean_s163 lean_r6
have lean_s165 : (Eq let683 let358) := by timed Eq.trans lean_s164 lean_r120
let lean_s166 := by timed congr lean_s162 lean_s165
let lean_s167 := by timed congr lean_s158 lean_s166
let lean_s168 := by timed congr lean_s154 lean_s167
let lean_s169 := by timed congr lean_s150 lean_s168
have lean_s170 : (Eq let747 let856) := by timed congr lean_s146 lean_s169
have lean_s171 : (Eq let689 let856) := by timed Eq.trans lean_r238 lean_s170
let lean_s172 := by timed congr lean_s52 lean_s171
have lean_s173 : let970 := by timed rfl
let lean_s174 := by timed flipCongrArg lean_s102 [Eq]
have lean_s175 : (Eq let172 let854) := by timed congr lean_s174 lean_r144
let lean_s176 := by timed congr lean_s173 lean_s175
let lean_s177 := by timed flipCongrArg lean_s102 [Eq]
have lean_s178 : (Eq let170 let853) := by timed congr lean_s177 lean_r168
let lean_s179 := by timed congr lean_s173 lean_s178
let lean_s180 := by timed flipCongrArg lean_s102 [Eq]
have lean_s181 : (Eq let168 let852) := by timed congr lean_s180 lean_r264
let lean_s182 := by timed congr lean_s179 lean_s181
have lean_s183 : (Eq let173 let855) := by timed congr lean_s176 lean_s182
have lean_s184 : (Eq let174 let855) := by timed Eq.trans lean_r37 lean_s183
let lean_s185 := by timed congr lean_s52 lean_s184
have lean_s186 : let970 := by timed rfl
let lean_s187 := by timed congr lean_s186 lean_r102
let lean_s188 := by timed congr lean_s186 lean_r12
let lean_s189 := by timed congr lean_s186 lean_r166
have lean_s190 : let998 := by timed rfl
let lean_s191 := by timed congr lean_s186 lean_s190
have lean_s192 : let997 := by timed rfl
let lean_s193 := by timed congr lean_s186 lean_s192
have lean_s194 : let996 := by timed rfl
let lean_s195 := by timed congr lean_s186 lean_s194
have lean_s196 : let995 := by timed rfl
let lean_s197 := by timed congr lean_s186 lean_s196
have lean_s198 : let994 := by timed rfl
let lean_s199 := by timed congr lean_s197 lean_s198
let lean_s200 := by timed congr lean_s195 lean_s199
let lean_s201 := by timed congr lean_s193 lean_s200
let lean_s202 := by timed congr lean_s191 lean_s201
let lean_s203 := by timed congr lean_s189 lean_s202
let lean_s204 := by timed congr lean_s188 lean_s203
have lean_s205 : (Eq let317 let851) := by timed congr lean_s187 lean_s204
have lean_s206 : (Eq let318 let851) := by timed Eq.trans lean_r103 lean_s205
let lean_s207 := by timed congr lean_s52 lean_s206
have lean_s208 : let970 := by timed rfl
let lean_s209 := by timed congr lean_s208 lean_r58
let lean_s210 := by timed congr lean_s208 lean_r162
let lean_s211 := by timed congr lean_s208 lean_r11
have lean_s212 : let993 := by timed rfl
let lean_s213 := by timed congr lean_s208 lean_s212
have lean_s214 : let992 := by timed rfl
let lean_s215 := by timed congr lean_s208 lean_s214
have lean_s216 : let991 := by timed rfl
let lean_s217 := by timed congr lean_s208 lean_s216
have lean_s218 : let990 := by timed rfl
let lean_s219 := by timed congr lean_s208 lean_s218
have lean_s220 : let989 := by timed rfl
let lean_s221 := by timed congr lean_s219 lean_s220
let lean_s222 := by timed congr lean_s217 lean_s221
let lean_s223 := by timed congr lean_s215 lean_s222
let lean_s224 := by timed congr lean_s213 lean_s223
let lean_s225 := by timed congr lean_s211 lean_s224
let lean_s226 := by timed congr lean_s210 lean_s225
have lean_s227 : (Eq let97 let850) := by timed congr lean_s209 lean_s226
have lean_s228 : (Eq let98 let850) := by timed Eq.trans lean_r17 lean_s227
let lean_s229 := by timed congr lean_s52 lean_s228
have lean_s230 : let970 := by timed rfl
let lean_s231 := by timed congr lean_s230 lean_r89
let lean_s232 := by timed congr lean_s230 lean_r62
let lean_s233 := by timed congr lean_s230 lean_r14
have lean_s234 : let988 := by timed rfl
let lean_s235 := by timed congr lean_s230 lean_s234
have lean_s236 : let987 := by timed rfl
let lean_s237 := by timed congr lean_s230 lean_s236
have lean_s238 : let986 := by timed rfl
let lean_s239 := by timed congr lean_s230 lean_s238
have lean_s240 : let985 := by timed rfl
let lean_s241 := by timed congr lean_s230 lean_s240
have lean_s242 : let984 := by timed rfl
let lean_s243 := by timed congr lean_s241 lean_s242
let lean_s244 := by timed congr lean_s239 lean_s243
let lean_s245 := by timed congr lean_s237 lean_s244
let lean_s246 := by timed congr lean_s235 lean_s245
let lean_s247 := by timed congr lean_s233 lean_s246
let lean_s248 := by timed congr lean_s232 lean_s247
have lean_s249 : (Eq let529 let849) := by timed congr lean_s231 lean_s248
have lean_s250 : (Eq let530 let849) := by timed Eq.trans lean_r165 lean_s249
let lean_s251 := by timed congr lean_s52 lean_s250
have lean_s252 : let970 := by timed rfl
let lean_s253 := by timed congr lean_s252 lean_r189
let lean_s254 := by timed congr lean_s252 lean_r5
let lean_s255 := by timed congr lean_s252 lean_r68
have lean_s256 : let983 := by timed rfl
let lean_s257 := by timed congr lean_s252 lean_s256
have lean_s258 : let982 := by timed rfl
let lean_s259 := by timed congr lean_s252 lean_s258
have lean_s260 : let981 := by timed rfl
let lean_s261 := by timed congr lean_s252 lean_s260
have lean_s262 : let980 := by timed rfl
let lean_s263 := by timed congr lean_s252 lean_s262
have lean_s264 : let979 := by timed rfl
let lean_s265 := by timed congr lean_s263 lean_s264
let lean_s266 := by timed congr lean_s261 lean_s265
let lean_s267 := by timed congr lean_s259 lean_s266
let lean_s268 := by timed congr lean_s257 lean_s267
let lean_s269 := by timed congr lean_s255 lean_s268
let lean_s270 := by timed congr lean_s254 lean_s269
have lean_s271 : (Eq let245 let848) := by timed congr lean_s253 lean_s270
have lean_s272 : (Eq let246 let848) := by timed Eq.trans lean_r71 lean_s271
let lean_s273 := by timed congr lean_s52 lean_s272
have lean_s274 : let970 := by timed rfl
let lean_s275 := by timed congr lean_s274 lean_r184
let lean_s276 := by timed congr lean_s274 lean_r30
let lean_s277 := by timed congr lean_s274 lean_r94
have lean_s278 : let978 := by timed rfl
let lean_s279 := by timed congr lean_s274 lean_s278
have lean_s280 : let977 := by timed rfl
let lean_s281 := by timed congr lean_s274 lean_s280
have lean_s282 : let976 := by timed rfl
let lean_s283 := by timed congr lean_s274 lean_s282
have lean_s284 : let975 := by timed rfl
let lean_s285 := by timed congr lean_s274 lean_s284
have lean_s286 : let974 := by timed rfl
let lean_s287 := by timed congr lean_s285 lean_s286
let lean_s288 := by timed congr lean_s283 lean_s287
let lean_s289 := by timed congr lean_s281 lean_s288
let lean_s290 := by timed congr lean_s279 lean_s289
let lean_s291 := by timed congr lean_s277 lean_s290
let lean_s292 := by timed congr lean_s276 lean_s291
have lean_s293 : (Eq let527 let847) := by timed congr lean_s275 lean_s292
have lean_s294 : (Eq let528 let847) := by timed Eq.trans lean_r164 lean_s293
let lean_s295 := by timed congr lean_s52 lean_s294
have lean_s296 : let970 := by timed rfl
let lean_s297 := by timed congr lean_s296 lean_r28
let lean_s298 := by timed congr lean_s296 lean_r113
let lean_s299 := by timed congr lean_s296 lean_r50
have lean_s300 : let973 := by timed rfl
let lean_s301 := by timed congr lean_s296 lean_s300
have lean_s302 : let972 := by timed rfl
let lean_s303 := by timed congr lean_s296 lean_s302
have lean_s304 : let971 := by timed rfl
let lean_s305 := by timed congr lean_s296 lean_s304
have lean_s306 : let969 := by timed rfl
let lean_s307 := by timed congr lean_s296 lean_s306
have lean_s308 : let968 := by timed rfl
let lean_s309 := by timed congr lean_s307 lean_s308
let lean_s310 := by timed congr lean_s305 lean_s309
let lean_s311 := by timed congr lean_s303 lean_s310
let lean_s312 := by timed congr lean_s301 lean_s311
let lean_s313 := by timed congr lean_s299 lean_s312
let lean_s314 := by timed congr lean_s298 lean_s313
have lean_s315 : (Eq let524 let846) := by timed congr lean_s297 lean_s314
have lean_s316 : (Eq let525 let846) := by timed Eq.trans lean_r163 lean_s315
let lean_s317 := by timed congr lean_s52 lean_s316
let lean_s318 := by timed flipCongrArg lean_r102 [And]
have lean_s319 : (Eq let679 let842) := by timed congr lean_s318 lean_r162
let lean_s320 := by timed flipCongrArg lean_s319 [Implies]
have lean_s321 : let967 := by timed rfl
have lean_s322 : (Eq let682 let845) := by timed congr lean_s320 lean_s321
let lean_s323 := by timed congr lean_s52 lean_s322
have lean_s324 : (Eq let680 let843) := by timed flipCongrArg lean_s319 [Not]
let lean_s325 := by timed flipCongrArg lean_s324 [Implies]
have lean_s326 : let966 := by timed rfl
have lean_s327 : (Eq let681 let844) := by timed congr lean_s325 lean_s326
let lean_s328 := by timed congr lean_s52 lean_s327
let lean_s329 := by timed flipCongrArg lean_r58 [And]
have lean_s330 : (Eq let674 let838) := by timed congr lean_s329 lean_r62
let lean_s331 := by timed flipCongrArg lean_s330 [Implies]
have lean_s332 : (Eq let26 let26) := by timed rfl
let lean_s333 := by timed flipCongrArg lean_s332 [Eq]
have lean_s334 : (Eq let677 let521) := by timed congr lean_s333 lean_r161
have lean_s335 : (Eq let677 let47) := by timed Eq.trans lean_s334 lean_r160
have lean_s336 : (Eq let678 let841) := by timed congr lean_s331 lean_s335
let lean_s337 := by timed congr lean_s52 lean_s336
have lean_s338 : (Eq let675 let839) := by timed flipCongrArg lean_s330 [Not]
let lean_s339 := by timed flipCongrArg lean_s338 [Implies]
have lean_s340 : (Eq let676 let840) := by timed congr lean_s339 lean_r156
let lean_s341 := by timed congr lean_s52 lean_s340
let lean_s342 := by timed flipCongrArg lean_r89 [And]
have lean_s343 : (Eq let669 let834) := by timed congr lean_s342 lean_r5
let lean_s344 := by timed flipCongrArg lean_s343 [Implies]
have lean_s345 : (Eq let2 let2) := by timed rfl
let lean_s346 := by timed flipCongrArg lean_s345 [Eq]
have lean_s347 : (Eq let672 let424) := by timed congr lean_s346 lean_r154
have lean_s348 : (Eq let672 let27) := by timed Eq.trans lean_s347 lean_r153
have lean_s349 : (Eq let673 let837) := by timed congr lean_s344 lean_s348
let lean_s350 := by timed congr lean_s52 lean_s349
have lean_s351 : (Eq let670 let835) := by timed flipCongrArg lean_s343 [Not]
let lean_s352 := by timed flipCongrArg lean_s351 [Implies]
have lean_s353 : (Eq let671 let836) := by timed congr lean_s352 lean_r7
let lean_s354 := by timed congr lean_s52 lean_s353
let lean_s355 := by timed flipCongrArg lean_r189 [And]
have lean_s356 : (Eq let664 let830) := by timed congr lean_s355 lean_r30
let lean_s357 := by timed flipCongrArg lean_s356 [Implies]
have lean_s358 : (Eq let64 let64) := by timed rfl
let lean_s359 := by timed flipCongrArg lean_s358 [Eq]
have lean_s360 : (Eq let667 let345) := by timed congr lean_s359 lean_r122
have lean_s361 : (Eq let667 let343) := by timed Eq.trans lean_s360 lean_r114
have lean_s362 : (Eq let668 let833) := by timed congr lean_s357 lean_s361
let lean_s363 := by timed congr lean_s52 lean_s362
have lean_s364 : (Eq let665 let831) := by timed flipCongrArg lean_s356 [Not]
let lean_s365 := by timed flipCongrArg lean_s364 [Implies]
have lean_s366 : (Eq let666 let832) := by timed congr lean_s365 lean_r9
let lean_s367 := by timed congr lean_s52 lean_s366
let lean_s368 := by timed flipCongrArg lean_r184 [And]
have lean_s369 : (Eq let659 let826) := by timed congr lean_s368 lean_r113
let lean_s370 := by timed flipCongrArg lean_s369 [Implies]
have lean_s371 : (Eq let128 let128) := by timed rfl
let lean_s372 := by timed flipCongrArg lean_s371 [Eq]
have lean_s373 : (Eq let662 let716) := by timed congr lean_s372 lean_r34
have lean_s374 : (Eq let662 let461) := by timed Eq.trans lean_s373 lean_r216
have lean_s375 : (Eq let663 let829) := by timed congr lean_s370 lean_s374
let lean_s376 := by timed congr lean_s52 lean_s375
have lean_s377 : (Eq let660 let827) := by timed flipCongrArg lean_s369 [Not]
let lean_s378 := by timed flipCongrArg lean_s377 [Implies]
have lean_s379 : (Eq let661 let828) := by timed congr lean_s378 lean_r143
let lean_s380 := by timed congr lean_s52 lean_s379
let lean_s381 := by timed flipCongrArg lean_r28 [And]
have lean_s382 : (Eq let654 let822) := by timed congr lean_s381 lean_r26
let lean_s383 := by timed flipCongrArg lean_s382 [Implies]
have lean_s384 : (Eq let177 let177) := by timed rfl
let lean_s385 := by timed flipCongrArg lean_s384 [Eq]
have lean_s386 : (Eq let657 let179) := by timed congr lean_s385 lean_r23
have lean_s387 : (Eq let657 let178) := by timed Eq.trans lean_s386 lean_r39
have lean_s388 : (Eq let658 let825) := by timed congr lean_s383 lean_s387
let lean_s389 := by timed congr lean_s52 lean_s388
have lean_s390 : (Eq let655 let823) := by timed flipCongrArg lean_s382 [Not]
let lean_s391 := by timed flipCongrArg lean_s390 [Implies]
have lean_s392 : (Eq let656 let824) := by timed congr lean_s391 lean_r204
let lean_s393 := by timed congr lean_s52 lean_s392
let lean_s394 := by timed flipCongrArg lean_r102 [And]
have lean_s395 : (Eq let650 let818) := by timed congr lean_s394 lean_r11
let lean_s396 := by timed flipCongrArg lean_s395 [Implies]
have lean_s397 : let955 := by timed rfl
have lean_s398 : (Eq let653 let821) := by timed congr lean_s396 lean_s397
let lean_s399 := by timed congr lean_s52 lean_s398
have lean_s400 : (Eq let651 let819) := by timed flipCongrArg lean_s395 [Not]
let lean_s401 := by timed flipCongrArg lean_s400 [Implies]
have lean_s402 : let954 := by timed rfl
have lean_s403 : (Eq let652 let820) := by timed congr lean_s401 lean_s402
let lean_s404 := by timed congr lean_s52 lean_s403
let lean_s405 := by timed flipCongrArg lean_r58 [And]
have lean_s406 : (Eq let645 let814) := by timed congr lean_s405 lean_r14
let lean_s407 := by timed flipCongrArg lean_s406 [Implies]
have lean_s408 : (Eq let19 let19) := by timed rfl
let lean_s409 := by timed flipCongrArg lean_s408 [Eq]
have lean_s410 : (Eq let648 let78) := by timed congr lean_s409 lean_r118
have lean_s411 : (Eq let648 let76) := by timed Eq.trans lean_s410 lean_r13
have lean_s412 : (Eq let649 let817) := by timed congr lean_s407 lean_s411
let lean_s413 := by timed congr lean_s52 lean_s412
have lean_s414 : (Eq let646 let815) := by timed flipCongrArg lean_s406 [Not]
let lean_s415 := by timed flipCongrArg lean_s414 [Implies]
have lean_s416 : (Eq let647 let816) := by timed congr lean_s415 lean_r197
let lean_s417 := by timed congr lean_s52 lean_s416
let lean_s418 := by timed flipCongrArg lean_r89 [And]
have lean_s419 : (Eq let640 let810) := by timed congr lean_s418 lean_r68
let lean_s420 := by timed flipCongrArg lean_s419 [Implies]
have lean_s421 : (Eq let18 let18) := by timed rfl
let lean_s422 := by timed flipCongrArg lean_s421 [Eq]
have lean_s423 : (Eq let643 let394) := by timed congr lean_s422 lean_r18
have lean_s424 : (Eq let643 let322) := by timed Eq.trans lean_s423 lean_r134
have lean_s425 : (Eq let644 let813) := by timed congr lean_s420 lean_s424
let lean_s426 := by timed congr lean_s52 lean_s425
have lean_s427 : (Eq let641 let811) := by timed flipCongrArg lean_s419 [Not]
let lean_s428 := by timed flipCongrArg lean_s427 [Implies]
have lean_s429 : (Eq let642 let812) := by timed congr lean_s428 lean_r259
let lean_s430 := by timed congr lean_s52 lean_s429
let lean_s431 := by timed flipCongrArg lean_r189 [And]
have lean_s432 : (Eq let634 let806) := by timed congr lean_s431 lean_r94
let lean_s433 := by timed flipCongrArg lean_s432 [Implies]
have lean_s434 : (Eq let101 let101) := by timed rfl
let lean_s435 := by timed flipCongrArg lean_s434 [Eq]
have lean_s436 : (Eq let637 let104) := by timed congr lean_s435 lean_r88
have lean_s437 : (Eq let637 let102) := by timed Eq.trans lean_s436 lean_r19
have lean_s438 : (Eq let638 let809) := by timed congr lean_s433 lean_s437
let lean_s439 := by timed congr lean_s52 lean_s438
have lean_s440 : (Eq let635 let807) := by timed flipCongrArg lean_s432 [Not]
let lean_s441 := by timed flipCongrArg lean_s440 [Implies]
have lean_s442 : (Eq let636 let808) := by timed congr lean_s441 lean_r96
let lean_s443 := by timed congr lean_s52 lean_s442
let lean_s444 := by timed flipCongrArg lean_r184 [And]
have lean_s445 : (Eq let629 let802) := by timed congr lean_s444 lean_r50
let lean_s446 := by timed flipCongrArg lean_s445 [Implies]
have lean_s447 : (Eq let105 let105) := by timed rfl
let lean_s448 := by timed flipCongrArg lean_s447 [Eq]
have lean_s449 : (Eq let632 let108) := by timed congr lean_s448 lean_r146
have lean_s450 : (Eq let632 let106) := by timed Eq.trans lean_s449 lean_r20
have lean_s451 : (Eq let633 let805) := by timed congr lean_s446 lean_s450
let lean_s452 := by timed congr lean_s52 lean_s451
have lean_s453 : (Eq let630 let803) := by timed flipCongrArg lean_s445 [Not]
let lean_s454 := by timed flipCongrArg lean_s453 [Implies]
have lean_s455 : (Eq let631 let804) := by timed congr lean_s454 lean_r240
let lean_s456 := by timed congr lean_s52 lean_s455
let lean_s457 := by timed flipCongrArg lean_r28 [And]
have lean_s458 : (Eq let622 let798) := by timed congr lean_s457 lean_r74
let lean_s459 := by timed flipCongrArg lean_s458 [Implies]
have lean_s460 : (Eq let209 let209) := by timed rfl
let lean_s461 := by timed flipCongrArg lean_s460 [Eq]
have lean_s462 : (Eq let625 let214) := by timed congr lean_s461 lean_r91
have lean_s463 : (Eq let625 let212) := by timed Eq.trans lean_s462 lean_r55
have lean_s464 : (Eq let626 let801) := by timed congr lean_s459 lean_s463
let lean_s465 := by timed congr lean_s52 lean_s464
have lean_s466 : (Eq let623 let799) := by timed flipCongrArg lean_s458 [Not]
let lean_s467 := by timed flipCongrArg lean_s466 [Implies]
have lean_s468 : (Eq let624 let800) := by timed congr lean_s467 lean_r54
let lean_s469 := by timed congr lean_s465 lean_s468
let lean_s470 := by timed congr lean_s456 lean_s469
let lean_s471 := by timed congr lean_s452 lean_s470
let lean_s472 := by timed congr lean_s443 lean_s471
let lean_s473 := by timed congr lean_s439 lean_s472
let lean_s474 := by timed congr lean_s430 lean_s473
let lean_s475 := by timed congr lean_s426 lean_s474
let lean_s476 := by timed congr lean_s417 lean_s475
let lean_s477 := by timed congr lean_s413 lean_s476
let lean_s478 := by timed congr lean_s404 lean_s477
let lean_s479 := by timed congr lean_s399 lean_s478
let lean_s480 := by timed congr lean_s393 lean_s479
let lean_s481 := by timed congr lean_s389 lean_s480
let lean_s482 := by timed congr lean_s380 lean_s481
let lean_s483 := by timed congr lean_s376 lean_s482
let lean_s484 := by timed congr lean_s367 lean_s483
let lean_s485 := by timed congr lean_s363 lean_s484
let lean_s486 := by timed congr lean_s354 lean_s485
let lean_s487 := by timed congr lean_s350 lean_s486
let lean_s488 := by timed congr lean_s341 lean_s487
let lean_s489 := by timed congr lean_s337 lean_s488
let lean_s490 := by timed congr lean_s328 lean_s489
let lean_s491 := by timed congr lean_s323 lean_s490
let lean_s492 := by timed congr lean_s317 lean_s491
let lean_s493 := by timed congr lean_s295 lean_s492
let lean_s494 := by timed congr lean_s273 lean_s493
let lean_s495 := by timed congr lean_s251 lean_s494
let lean_s496 := by timed congr lean_s229 lean_s495
let lean_s497 := by timed congr lean_s207 lean_s496
let lean_s498 := by timed congr lean_s185 lean_s497
let lean_s499 := by timed congr lean_s172 lean_s498
let lean_s500 := by timed congr lean_s141 lean_s499
let lean_s501 := by timed congr lean_s118 lean_s500
let lean_s502 := by timed congr lean_s101 lean_s501
let lean_s503 := by timed congr lean_s100 lean_s502
let lean_s504 := by timed congr lean_s94 lean_s503
let lean_s505 := by timed congr lean_s77 lean_s504
let lean_s506 := by timed congr lean_s76 lean_s505
let lean_s507 := by timed congr lean_s72 lean_s506
let lean_s508 := by timed congr lean_s70 lean_s507
let lean_s509 := by timed congr lean_s68 lean_s508
let lean_s510 := by timed congr lean_s66 lean_s509
let lean_s511 := by timed congr lean_s64 lean_s510
let lean_s512 := by timed congr lean_s62 lean_s511
let lean_s513 := by timed congr lean_s60 lean_s512
let lean_s514 := by timed congr lean_s58 lean_s513
let lean_s515 := by timed congr lean_s56 lean_s514
have lean_s516 : (Eq let702 let859) := by timed congr lean_s54 lean_s515
have lean_s517 : (Eq let703 let859) := by timed Eq.trans lean_r208 lean_s516
let lean_s518 := by timed flipCongrArg lean_s517 [Implies]
have lean_s519 : let943 := by timed rfl
have lean_s520 : (Eq let385 let796) := by timed flipCongrArg lean_r31 [Not]
let lean_s521 := by timed congr lean_s519 lean_s520
have lean_s522 : (Eq let383 let162) := by timed flipCongrArg lean_r33 [format]
let lean_s523 := by timed flipCongrArg lean_s522 [Eq]
have lean_s524 : (Eq s s) := by timed rfl
have lean_s525 : (Eq let384 let164) := by timed congr lean_s523 lean_s524
have lean_s526 : (Eq let384 let163) := by timed Eq.trans lean_s525 lean_r35
let lean_s527 := by timed congr lean_s519 lean_s526
let lean_s528 := by timed congr lean_s519 lean_r44
have lean_s529 : (Eq let381 let198) := by timed flipCongrArg lean_r80 [format]
let lean_s530 := by timed flipCongrArg lean_s529 [Eq]
have lean_s531 : (Eq adrx5fmedlo adrx5fmedlo) := by timed rfl
have lean_s532 : (Eq let382 let200) := by timed congr lean_s530 lean_s531
have lean_s533 : (Eq let382 let199) := by timed Eq.trans lean_s532 lean_r47
let lean_s534 := by timed congr lean_s519 lean_s533
have lean_s535 : (Eq let379 let181) := by timed flipCongrArg lean_r36 [format]
let lean_s536 := by timed flipCongrArg lean_s535 [Eq]
have lean_s537 : (Eq adrx5fmedhi adrx5fmedhi) := by timed rfl
have lean_s538 : (Eq let380 let183) := by timed congr lean_s536 lean_s537
have lean_s539 : (Eq let380 let182) := by timed Eq.trans lean_s538 lean_r41
let lean_s540 := by timed congr lean_s519 lean_s539
have lean_s541 : (Eq let377 let185) := by timed flipCongrArg lean_r51 [format]
let lean_s542 := by timed flipCongrArg lean_s541 [Eq]
have lean_s543 : (Eq adrx5fhi adrx5fhi) := by timed rfl
have lean_s544 : (Eq let378 let187) := by timed congr lean_s542 lean_s543
have lean_s545 : (Eq let378 let186) := by timed Eq.trans lean_s544 lean_r42
let lean_s546 := by timed congr lean_s540 lean_s545
let lean_s547 := by timed congr lean_s534 lean_s546
let lean_s548 := by timed congr lean_s528 lean_s547
let lean_s549 := by timed congr lean_s527 lean_s548
have lean_s550 : (Eq let386 let797) := by timed congr lean_s521 lean_s549
have lean_s551 : (Eq let387 let797) := by timed Eq.trans lean_r132 lean_s550
have lean_s552 : (Eq let790 let860) := by timed congr lean_s518 lean_s551
have lean_s553 : (Eq let791 let861) := by timed flipCongrArg lean_s552 [Not]
have lean_s554 : let943 := by timed rfl
have lean_s555 : let861 := by timed eqResolve lean_a266 lean_s553
have lean_s556 : let859 := by timed notImplies1 lean_s555
have lean_s557 : let550 := by andElim lean_s556, 16
have lean_s558 : let859 := by timed notImplies1 lean_s555
have lean_s559 : let858 := by andElim lean_s558, 10
have lean_s560 : let1009 := by timed rfl
let lean_s561 := by timed flipCongrArg lean_s560 [Eq]
have lean_s562 : let859 := by timed notImplies1 lean_s555
have lean_s563 : let692 := by andElim lean_s562, 9
have lean_s564 : let859 := by timed notImplies1 lean_s555
have lean_s565 : let693 := by andElim lean_s564, 8
have lean_s566 : let859 := by timed notImplies1 lean_s555
have lean_s567 : let694 := by andElim lean_s566, 7
have lean_s568 : let859 := by timed notImplies1 lean_s555
have lean_s569 : let695 := by andElim lean_s568, 6
have lean_s570 : let859 := by timed notImplies1 lean_s555
have lean_s571 : let696 := by andElim lean_s570, 5
have lean_s572 : let859 := by timed notImplies1 lean_s555
have lean_s573 : let697 := by andElim lean_s572, 4
have lean_s574 : let859 := by timed notImplies1 lean_s555
have lean_s575 : let698 := by andElim lean_s574, 3
have lean_s576 : let859 := by timed notImplies1 lean_s555
have lean_s577 : let699 := by andElim lean_s576, 2
have lean_s578 : let859 := by timed notImplies1 lean_s555
have lean_s579 : let700 := by andElim lean_s578, 1
have lean_s580 : let859 := by timed notImplies1 lean_s555
have lean_s581 : let701 := by andElim lean_s580, 0
let lean_s582 := by timed And.intro lean_s579 lean_s581
let lean_s583 := by timed And.intro lean_s577 lean_s582
let lean_s584 := by timed And.intro lean_s575 lean_s583
let lean_s585 := by timed And.intro lean_s573 lean_s584
let lean_s586 := by timed And.intro lean_s571 lean_s585
let lean_s587 := by timed And.intro lean_s569 lean_s586
let lean_s588 := by timed And.intro lean_s567 lean_s587
let lean_s589 := by timed And.intro lean_s565 lean_s588
have lean_s590 : let1005 := by timed And.intro lean_s563 lean_s589
have lean_s591 : let692 := by andElim lean_s590, 0
let lean_s592 := by timed flipCongrArg lean_s591 [HAdd.hAdd]
have lean_s593 : let1003 := by timed rfl
let lean_s594 := by timed flipCongrArg lean_s593 [HMul.hMul]
have lean_s595 : let701 := by andElim lean_s590, 9
have lean_s596 : let1013 := by timed congr lean_s594 lean_s595
have lean_s597 : let1012 := by timed congr lean_s592 lean_s596
have lean_s598 : (Eq let858 let1011) := by timed congr lean_s561 lean_s597
let lean_s599 := by timed flipCongrArg lean_s73 [Eq]
have lean_s600 : let292 := by timed rfl
let lean_s601 := by timed flipCongrArg lean_s600 [HAdd.hAdd]
have lean_s602 : (Eq let938 let410) := by timed congr lean_s601 lean_r86
have lean_s603 : (Eq let938 let83) := by timed Eq.trans lean_s602 lean_r145
have lean_s604 : (Eq let1011 let1006) := by timed congr lean_s599 lean_s603
have lean_s605 : (Eq let858 let1006) := by timed Eq.trans lean_s598 lean_s604
have lean_s606 : let1006 := by timed eqResolve lean_s559 lean_s605
let lean_s607 := by timed And.intro lean_s579 lean_s581
let lean_s608 := by timed And.intro lean_s577 lean_s607
let lean_s609 := by timed And.intro lean_s575 lean_s608
let lean_s610 := by timed And.intro lean_s573 lean_s609
let lean_s611 := by timed And.intro lean_s571 lean_s610
let lean_s612 := by timed And.intro lean_s569 lean_s611
let lean_s613 := by timed And.intro lean_s567 lean_s612
let lean_s614 := by timed And.intro lean_s565 lean_s613
let lean_s615 := by timed And.intro lean_s563 lean_s614
have lean_s616 : let1007 := by timed And.intro lean_s606 lean_s615
have lean_s617 : let1006 := by andElim lean_s616, 0
let lean_s618 := by timed flipCongrArg lean_s617 [Eq]
have lean_s619 : let1008 := by timed rfl
have lean_s620 : let1001 := by timed rfl
let lean_s621 := by timed flipCongrArg lean_s620 [HMul.hMul]
have lean_s622 : let1000 := by timed rfl
have lean_s623 : let1003 := by timed rfl
let lean_s624 := by timed flipCongrArg lean_s623 [HMul.hMul]
have lean_s625 : let692 := by andElim lean_s616, 1
have lean_s626 : let1019 := by timed congr lean_s624 lean_s625
have lean_s627 : let999 := by timed rfl
let lean_s628 := by timed congrHAdd lean_s626 lean_s627
have lean_s629 : let1018 := by timed congrHAdd lean_s622 lean_s628
have lean_s630 : let1021 := by timed flipCongrArg lean_s629 [sx5fcount]
have lean_s631 : let1020 := by timed congr lean_s621 lean_s630
let lean_s632 := by timed flipCongrArg lean_s620 [HMul.hMul]
have lean_s633 : let1017 := by timed flipCongrArg lean_s629 [xx5fcount]
have lean_s634 : let1016 := by timed congr lean_s632 lean_s633
let lean_s635 := by timed congrHAdd lean_s631 lean_s634
have lean_s636 : (Eq let549 let1014) := by timed congrHAdd lean_s619 lean_s635
have lean_s637 : (Eq let550 let1015) := by timed congr lean_s618 lean_s636
have lean_s638 : let84 := by timed rfl
let lean_s639 := by timed flipCongrArg lean_s638 [Eq]
have lean_s640 : let1001 := by timed rfl
let lean_s641 := by timed flipCongrArg lean_s640 [HMul.hMul]
have lean_s642 : let1000 := by timed rfl
let lean_s643 := by timed congrHAdd lean_r137 lean_s78
have lean_s644 : (Eq let507 let261) := by timed congrHAdd lean_s642 lean_s643
have lean_s645 : (Eq let507 let12) := by timed Eq.trans lean_s644 lean_r76
have lean_s646 : (Eq let510 let14) := by timed flipCongrArg lean_s645 [sx5fcount]
have lean_s647 : (Eq let511 let111) := by timed congr lean_s641 lean_s646
let lean_s648 := by timed flipCongrArg lean_s640 [HMul.hMul]
have lean_s649 : (Eq let508 let13) := by timed flipCongrArg lean_s645 [xx5fcount]
have lean_s650 : (Eq let509 let110) := by timed congr lean_s648 lean_s649
let lean_s651 := by timed congrHAdd lean_s647 lean_s650
have lean_s652 : (Eq let1014 let708) := by timed congrHAdd lean_s102 lean_s651
have lean_s653 : (Eq let1015 let709) := by timed congr lean_s639 lean_s652
have lean_s654 : (Eq let1015 let707) := by timed Eq.trans lean_s653 lean_r210
have lean_s655 : (Eq let550 let707) := by timed Eq.trans lean_s637 lean_s654
have lean_s656 : let707 := by timed eqResolve lean_s557 lean_s655
let lean_s657 := by timed And.intro lean_s579 lean_s581
let lean_s658 := by timed And.intro lean_s577 lean_s657
let lean_s659 := by timed And.intro lean_s575 lean_s658
let lean_s660 := by timed And.intro lean_s573 lean_s659
let lean_s661 := by timed And.intro lean_s571 lean_s660
let lean_s662 := by timed And.intro lean_s569 lean_s661
let lean_s663 := by timed And.intro lean_s567 lean_s662
let lean_s664 := by timed And.intro lean_s565 lean_s663
let lean_s665 := by timed And.intro lean_s563 lean_s664
let lean_s666 := by timed And.intro lean_s606 lean_s665
have lean_s667 : (And let707 let1007) := by timed And.intro lean_s656 lean_s666
have lean_s668 : let701 := by andElim lean_s667, 11
let lean_s669 := by timed flipCongrArg lean_s668 [Eq]
have lean_s670 : let236 := by timed rfl
have lean_s671 : (Eq let701 let236) := by timed congr lean_s669 lean_s670
let lean_s672 := by timed congr lean_s554 lean_s671
have lean_s673 : let700 := by andElim lean_s667, 10
let lean_s674 := by timed flipCongrArg lean_s673 [Eq]
have lean_s675 : let268 := by timed rfl
have lean_s676 : (Eq let700 let268) := by timed congr lean_s674 lean_s675
let lean_s677 := by timed congr lean_s554 lean_s676
have lean_s678 : let699 := by andElim lean_s667, 9
let lean_s679 := by timed flipCongrArg lean_s678 [Eq]
have lean_s680 : let229 := by timed rfl
have lean_s681 : (Eq let699 let229) := by timed congr lean_s679 lean_s680
let lean_s682 := by timed congr lean_s554 lean_s681
have lean_s683 : let698 := by andElim lean_s667, 8
let lean_s684 := by timed flipCongrArg lean_s683 [Eq]
have lean_s685 : let227 := by timed rfl
have lean_s686 : (Eq let698 let227) := by timed congr lean_s684 lean_s685
let lean_s687 := by timed congr lean_s554 lean_s686
have lean_s688 : let697 := by andElim lean_s667, 7
let lean_s689 := by timed flipCongrArg lean_s688 [Eq]
have lean_s690 : let196 := by timed rfl
have lean_s691 : (Eq let697 let196) := by timed congr lean_s689 lean_s690
let lean_s692 := by timed congr lean_s554 lean_s691
have lean_s693 : let696 := by andElim lean_s667, 6
let lean_s694 := by timed flipCongrArg lean_s693 [Eq]
have lean_s695 : (Eq let696 let268) := by timed congr lean_s694 lean_s675
let lean_s696 := by timed congr lean_s554 lean_s695
have lean_s697 : let695 := by andElim lean_s667, 5
let lean_s698 := by timed flipCongrArg lean_s697 [Eq]
have lean_s699 : let588 := by timed rfl
have lean_s700 : (Eq let695 let588) := by timed congr lean_s698 lean_s699
let lean_s701 := by timed congr lean_s554 lean_s700
have lean_s702 : let694 := by andElim lean_s667, 4
let lean_s703 := by timed flipCongrArg lean_s702 [Eq]
have lean_s704 : let584 := by timed rfl
have lean_s705 : (Eq let694 let584) := by timed congr lean_s703 lean_s704
let lean_s706 := by timed congr lean_s554 lean_s705
have lean_s707 : let693 := by andElim lean_s667, 3
let lean_s708 := by timed flipCongrArg lean_s707 [Eq]
have lean_s709 : let581 := by timed rfl
have lean_s710 : (Eq let693 let581) := by timed congr lean_s708 lean_s709
let lean_s711 := by timed congr lean_s554 lean_s710
have lean_s712 : let692 := by andElim lean_s667, 2
let lean_s713 := by timed flipCongrArg lean_s712 [Eq]
have lean_s714 : let292 := by timed rfl
have lean_s715 : (Eq let692 let292) := by timed congr lean_s713 lean_s714
let lean_s716 := by timed congr lean_s554 lean_s715
have lean_s717 : let1006 := by andElim lean_s667, 1
let lean_s718 := by timed flipCongrArg lean_s717 [Eq]
let lean_s719 := by timed flipCongrArg lean_s712 [HAdd.hAdd]
have lean_s720 : let1003 := by timed rfl
let lean_s721 := by timed flipCongrArg lean_s720 [HMul.hMul]
have lean_s722 : let1013 := by timed congr lean_s721 lean_s668
have lean_s723 : let1012 := by timed congr lean_s719 lean_s722
have lean_s724 : (Eq let858 let939) := by timed congr lean_s718 lean_s723
let lean_s725 := by timed congr lean_s554 lean_s724
have lean_s726 : let707 := by andElim lean_s667, 0
let lean_s727 := by timed flipCongrArg lean_s726 [HAdd.hAdd]
let lean_s728 := by timed flipCongrArg lean_s720 [HMul.hMul]
have lean_s729 : let1019 := by timed congr lean_s728 lean_s712
have lean_s730 : (Eq let610 let303) := by timed congr lean_s727 lean_s729
let lean_s731 := by timed flipCongrArg lean_s730 [GE.ge]
have lean_s732 : (Eq let611 let937) := by timed congr lean_s731 lean_s714
let lean_s733 := by timed congr lean_s554 lean_s732
have lean_s734 : (Eq let232 let232) := by timed rfl
let lean_s735 := by timed congrHAdd lean_s734 lean_s673
have lean_s736 : (Eq let353 let770) := by timed congrHAdd lean_s712 lean_s735
let lean_s737 := by timed flipCongrArg lean_s736 [GE.ge]
have lean_s738 : let1004 := by timed rfl
have lean_s739 : (Eq let354 let936) := by timed congr lean_s737 lean_s738
let lean_s740 := by timed congr lean_s554 lean_s739
let lean_s741 := by timed flipCongrArg lean_s712 [HAdd.hAdd]
have lean_s742 : (Eq let777 let418) := by timed congr lean_s741 lean_s734
let lean_s743 := by timed flipCongrArg lean_s742 [GE.ge]
have lean_s744 : (Eq let778 let934) := by timed congr lean_s743 lean_s720
have lean_s745 : (Eq let857 let935) := by timed flipCongrArg lean_s744 [Not]
let lean_s746 := by timed congr lean_s554 lean_s745
let lean_s747 := by timed flipCongrArg lean_s720 [HMul.hMul]
have lean_s748 : (Eq let589 let118) := by timed congr lean_s747 lean_s726
let lean_s749 := by timed congrHAdd lean_s748 lean_s668
have lean_s750 : (Eq let590 let931) := by timed congrHAdd lean_s717 lean_s749
let lean_s751 := by timed flipCongrArg lean_s750 [GE.ge]
have lean_s752 : let1002 := by timed rfl
have lean_s753 : (Eq let591 let932) := by timed congr lean_s751 lean_s752
have lean_s754 : (Eq let592 let933) := by timed flipCongrArg lean_s753 [Not]
let lean_s755 := by timed congr lean_s554 lean_s754
let lean_s756 := by timed congrHAdd lean_s668 lean_s673
let lean_s757 := by timed congrHAdd lean_s748 lean_s756
have lean_s758 : (Eq let748 let929) := by timed congrHAdd lean_s717 lean_s757
let lean_s759 := by timed flipCongrArg lean_s758 [GE.ge]
have lean_s760 : (Eq let749 let930) := by timed congr lean_s759 lean_s690
let lean_s761 := by timed congr lean_s554 lean_s760
let lean_s762 := by timed flipCongrArg lean_s717 [Eq]
have lean_s763 : let1001 := by timed rfl
let lean_s764 := by timed flipCongrArg lean_s763 [HMul.hMul]
have lean_s765 : let1000 := by timed rfl
have lean_s766 : let999 := by timed rfl
let lean_s767 := by timed congrHAdd lean_s729 lean_s766
have lean_s768 : let1018 := by timed congrHAdd lean_s765 lean_s767
have lean_s769 : let1021 := by timed flipCongrArg lean_s768 [sx5fcount]
have lean_s770 : let1020 := by timed congr lean_s764 lean_s769
let lean_s771 := by timed flipCongrArg lean_s763 [HMul.hMul]
have lean_s772 : let1017 := by timed flipCongrArg lean_s768 [xx5fcount]
have lean_s773 : let1016 := by timed congr lean_s771 lean_s772
let lean_s774 := by timed congrHAdd lean_s770 lean_s773
have lean_s775 : (Eq let549 let514) := by timed congrHAdd lean_s726 lean_s774
have lean_s776 : (Eq let550 let928) := by timed congr lean_s762 lean_s775
let lean_s777 := by timed congr lean_s554 lean_s776
have lean_s778 : let970 := by timed rfl
let lean_s779 := by timed flipCongrArg lean_s712 [Eq]
have lean_s780 : (Eq let221 let86) := by timed congr lean_s779 lean_s766
let lean_s781 := by timed congr lean_s778 lean_s780
let lean_s782 := by timed flipCongrArg lean_s712 [Eq]
have lean_s783 : (Eq let419 let419) := by timed rfl
have lean_s784 : (Eq let420 let532) := by timed congr lean_s782 lean_s783
let lean_s785 := by timed congr lean_s778 lean_s784
let lean_s786 := by timed flipCongrArg lean_s712 [Eq]
have lean_s787 : (Eq let12 let12) := by timed rfl
have lean_s788 : (Eq let535 let397) := by timed congr lean_s786 lean_s787
let lean_s789 := by timed congr lean_s778 lean_s788
let lean_s790 := by timed flipCongrArg lean_s712 [Eq]
have lean_s791 : (Eq let395 let395) := by timed rfl
have lean_s792 : (Eq let515 let396) := by timed congr lean_s790 lean_s791
let lean_s793 := by timed congr lean_s778 lean_s792
let lean_s794 := by timed flipCongrArg lean_s712 [Eq]
have lean_s795 : (Eq let333 let333) := by timed rfl
have lean_s796 : (Eq let533 let334) := by timed congr lean_s794 lean_s795
let lean_s797 := by timed congr lean_s778 lean_s796
let lean_s798 := by timed flipCongrArg lean_s712 [Eq]
have lean_s799 : (Eq let357 let357) := by timed rfl
have lean_s800 : (Eq let358 let399) := by timed congr lean_s798 lean_s799
let lean_s801 := by timed congr lean_s797 lean_s800
let lean_s802 := by timed congr lean_s793 lean_s801
let lean_s803 := by timed congr lean_s789 lean_s802
let lean_s804 := by timed congr lean_s785 lean_s803
have lean_s805 : (Eq let856 let927) := by timed congr lean_s781 lean_s804
let lean_s806 := by timed congr lean_s554 lean_s805
have lean_s807 : let970 := by timed rfl
let lean_s808 := by timed flipCongrArg lean_s726 [Eq]
have lean_s809 : (Eq let854 let237) := by timed congr lean_s808 lean_s712
let lean_s810 := by timed congr lean_s807 lean_s809
let lean_s811 := by timed flipCongrArg lean_s726 [Eq]
let lean_s812 := by timed flipCongrArg lean_s752 [HAdd.hAdd]
have lean_s813 : (Eq let421 let228) := by timed congr lean_s812 lean_s712
have lean_s814 : (Eq let853 let925) := by timed congr lean_s811 lean_s813
let lean_s815 := by timed congr lean_s807 lean_s814
let lean_s816 := by timed flipCongrArg lean_s726 [Eq]
let lean_s817 := by timed flipCongrArg lean_s738 [HAdd.hAdd]
have lean_s818 : (Eq let536 let376) := by timed congr lean_s817 lean_s712
have lean_s819 : (Eq let852 let924) := by timed congr lean_s816 lean_s818
let lean_s820 := by timed congr lean_s815 lean_s819
have lean_s821 : (Eq let855 let926) := by timed congr lean_s810 lean_s820
let lean_s822 := by timed congr lean_s554 lean_s821
have lean_s823 : let970 := by timed rfl
let lean_s824 := by timed flipCongrArg lean_s697 [Eq]
have lean_s825 : (Eq let73 let73) := by timed rfl
have lean_s826 : (Eq let308 let291) := by timed congr lean_s824 lean_s825
let lean_s827 := by timed congr lean_s823 lean_s826
let lean_s828 := by timed flipCongrArg lean_s702 [Eq]
have lean_s829 : (Eq let74 let307) := by timed congr lean_s828 lean_s825
let lean_s830 := by timed congr lean_s823 lean_s829
let lean_s831 := by timed flipCongrArg lean_s707 [Eq]
have lean_s832 : (Eq let531 let305) := by timed congr lean_s831 lean_s825
let lean_s833 := by timed congr lean_s823 lean_s832
have lean_s834 : let998 := by timed rfl
let lean_s835 := by timed congr lean_s823 lean_s834
have lean_s836 : let997 := by timed rfl
let lean_s837 := by timed congr lean_s823 lean_s836
have lean_s838 : let996 := by timed rfl
let lean_s839 := by timed congr lean_s823 lean_s838
have lean_s840 : let995 := by timed rfl
let lean_s841 := by timed congr lean_s823 lean_s840
have lean_s842 : let994 := by timed rfl
let lean_s843 := by timed congr lean_s841 lean_s842
let lean_s844 := by timed congr lean_s839 lean_s843
let lean_s845 := by timed congr lean_s837 lean_s844
let lean_s846 := by timed congr lean_s835 lean_s845
let lean_s847 := by timed congr lean_s833 lean_s846
let lean_s848 := by timed congr lean_s830 lean_s847
have lean_s849 : (Eq let851 let923) := by timed congr lean_s827 lean_s848
let lean_s850 := by timed congr lean_s554 lean_s849
have lean_s851 : let970 := by timed rfl
let lean_s852 := by timed flipCongrArg lean_s697 [Eq]
have lean_s853 : (Eq let70 let70) := by timed rfl
have lean_s854 : (Eq let217 let564) := by timed congr lean_s852 lean_s853
let lean_s855 := by timed congr lean_s851 lean_s854
let lean_s856 := by timed flipCongrArg lean_s702 [Eq]
have lean_s857 : (Eq let523 let135) := by timed congr lean_s856 lean_s853
let lean_s858 := by timed congr lean_s851 lean_s857
let lean_s859 := by timed flipCongrArg lean_s707 [Eq]
have lean_s860 : (Eq let71 let774) := by timed congr lean_s859 lean_s853
let lean_s861 := by timed congr lean_s851 lean_s860
have lean_s862 : let993 := by timed rfl
let lean_s863 := by timed congr lean_s851 lean_s862
have lean_s864 : let992 := by timed rfl
let lean_s865 := by timed congr lean_s851 lean_s864
have lean_s866 : let991 := by timed rfl
let lean_s867 := by timed congr lean_s851 lean_s866
have lean_s868 : let990 := by timed rfl
let lean_s869 := by timed congr lean_s851 lean_s868
have lean_s870 : let989 := by timed rfl
let lean_s871 := by timed congr lean_s869 lean_s870
let lean_s872 := by timed congr lean_s867 lean_s871
let lean_s873 := by timed congr lean_s865 lean_s872
let lean_s874 := by timed congr lean_s863 lean_s873
let lean_s875 := by timed congr lean_s861 lean_s874
let lean_s876 := by timed congr lean_s858 lean_s875
have lean_s877 : (Eq let850 let922) := by timed congr lean_s855 lean_s876
let lean_s878 := by timed congr lean_s554 lean_s877
have lean_s879 : let970 := by timed rfl
let lean_s880 := by timed flipCongrArg lean_s697 [Eq]
have lean_s881 : (Eq let79 let79) := by timed rfl
have lean_s882 : (Eq let283 let555) := by timed congr lean_s880 lean_s881
let lean_s883 := by timed congr lean_s879 lean_s882
let lean_s884 := by timed flipCongrArg lean_s702 [Eq]
have lean_s885 : (Eq let223 let320) := by timed congr lean_s884 lean_s881
let lean_s886 := by timed congr lean_s879 lean_s885
let lean_s887 := by timed flipCongrArg lean_s707 [Eq]
have lean_s888 : (Eq let80 let226) := by timed congr lean_s887 lean_s881
let lean_s889 := by timed congr lean_s879 lean_s888
have lean_s890 : let988 := by timed rfl
let lean_s891 := by timed congr lean_s879 lean_s890
have lean_s892 : let987 := by timed rfl
let lean_s893 := by timed congr lean_s879 lean_s892
have lean_s894 : let986 := by timed rfl
let lean_s895 := by timed congr lean_s879 lean_s894
have lean_s896 : let985 := by timed rfl
let lean_s897 := by timed congr lean_s879 lean_s896
have lean_s898 : let984 := by timed rfl
let lean_s899 := by timed congr lean_s897 lean_s898
let lean_s900 := by timed congr lean_s895 lean_s899
let lean_s901 := by timed congr lean_s893 lean_s900
let lean_s902 := by timed congr lean_s891 lean_s901
let lean_s903 := by timed congr lean_s889 lean_s902
let lean_s904 := by timed congr lean_s886 lean_s903
have lean_s905 : (Eq let849 let921) := by timed congr lean_s883 lean_s904
let lean_s906 := by timed congr lean_s554 lean_s905
have lean_s907 : let970 := by timed rfl
let lean_s908 := by timed flipCongrArg lean_s697 [Eq]
have lean_s909 : (Eq let53 let53) := by timed rfl
have lean_s910 : (Eq let582 let248) := by timed congr lean_s908 lean_s909
let lean_s911 := by timed congr lean_s907 lean_s910
let lean_s912 := by timed flipCongrArg lean_s702 [Eq]
have lean_s913 : (Eq let54 let340) := by timed congr lean_s912 lean_s909
let lean_s914 := by timed congr lean_s907 lean_s913
let lean_s915 := by timed flipCongrArg lean_s707 [Eq]
have lean_s916 : (Eq let234 let296) := by timed congr lean_s915 lean_s909
let lean_s917 := by timed congr lean_s907 lean_s916
have lean_s918 : let983 := by timed rfl
let lean_s919 := by timed congr lean_s907 lean_s918
have lean_s920 : let982 := by timed rfl
let lean_s921 := by timed congr lean_s907 lean_s920
have lean_s922 : let981 := by timed rfl
let lean_s923 := by timed congr lean_s907 lean_s922
have lean_s924 : let980 := by timed rfl
let lean_s925 := by timed congr lean_s907 lean_s924
have lean_s926 : let979 := by timed rfl
let lean_s927 := by timed congr lean_s925 lean_s926
let lean_s928 := by timed congr lean_s923 lean_s927
let lean_s929 := by timed congr lean_s921 lean_s928
let lean_s930 := by timed congr lean_s919 lean_s929
let lean_s931 := by timed congr lean_s917 lean_s930
let lean_s932 := by timed congr lean_s914 lean_s931
have lean_s933 : (Eq let848 let920) := by timed congr lean_s911 lean_s932
let lean_s934 := by timed congr lean_s554 lean_s933
have lean_s935 : let970 := by timed rfl
let lean_s936 := by timed flipCongrArg lean_s697 [Eq]
have lean_s937 : (Eq let149 let149) := by timed rfl
have lean_s938 : (Eq let573 let270) := by timed congr lean_s936 lean_s937
let lean_s939 := by timed congr lean_s935 lean_s938
let lean_s940 := by timed flipCongrArg lean_s702 [Eq]
have lean_s941 : (Eq let150 let372) := by timed congr lean_s940 lean_s937
let lean_s942 := by timed congr lean_s935 lean_s941
let lean_s943 := by timed flipCongrArg lean_s707 [Eq]
have lean_s944 : (Eq let293 let157) := by timed congr lean_s943 lean_s937
let lean_s945 := by timed congr lean_s935 lean_s944
have lean_s946 : let978 := by timed rfl
let lean_s947 := by timed congr lean_s935 lean_s946
have lean_s948 : let977 := by timed rfl
let lean_s949 := by timed congr lean_s935 lean_s948
have lean_s950 : let976 := by timed rfl
let lean_s951 := by timed congr lean_s935 lean_s950
have lean_s952 : let975 := by timed rfl
let lean_s953 := by timed congr lean_s935 lean_s952
have lean_s954 : let974 := by timed rfl
let lean_s955 := by timed congr lean_s953 lean_s954
let lean_s956 := by timed congr lean_s951 lean_s955
let lean_s957 := by timed congr lean_s949 lean_s956
let lean_s958 := by timed congr lean_s947 lean_s957
let lean_s959 := by timed congr lean_s945 lean_s958
let lean_s960 := by timed congr lean_s942 lean_s959
have lean_s961 : (Eq let847 let919) := by timed congr lean_s939 lean_s960
let lean_s962 := by timed congr lean_s554 lean_s961
have lean_s963 : let970 := by timed rfl
let lean_s964 := by timed flipCongrArg lean_s697 [Eq]
have lean_s965 : (Eq let143 let143) := by timed rfl
have lean_s966 : (Eq let144 let272) := by timed congr lean_s964 lean_s965
let lean_s967 := by timed congr lean_s963 lean_s966
let lean_s968 := by timed flipCongrArg lean_s702 [Eq]
have lean_s969 : (Eq let341 let220) := by timed congr lean_s968 lean_s965
let lean_s970 := by timed congr lean_s963 lean_s969
let lean_s971 := by timed flipCongrArg lean_s707 [Eq]
have lean_s972 : (Eq let205 let349) := by timed congr lean_s971 lean_s965
let lean_s973 := by timed congr lean_s963 lean_s972
have lean_s974 : let973 := by timed rfl
let lean_s975 := by timed congr lean_s963 lean_s974
have lean_s976 : let972 := by timed rfl
let lean_s977 := by timed congr lean_s963 lean_s976
have lean_s978 : let971 := by timed rfl
let lean_s979 := by timed congr lean_s963 lean_s978
have lean_s980 : let969 := by timed rfl
let lean_s981 := by timed congr lean_s963 lean_s980
have lean_s982 : let968 := by timed rfl
let lean_s983 := by timed congr lean_s981 lean_s982
let lean_s984 := by timed congr lean_s979 lean_s983
let lean_s985 := by timed congr lean_s977 lean_s984
let lean_s986 := by timed congr lean_s975 lean_s985
let lean_s987 := by timed congr lean_s973 lean_s986
let lean_s988 := by timed congr lean_s970 lean_s987
have lean_s989 : (Eq let846 let918) := by timed congr lean_s967 lean_s988
let lean_s990 := by timed congr lean_s554 lean_s989
let lean_s991 := by timed flipCongrArg lean_s826 [And]
have lean_s992 : (Eq let842 let914) := by timed congr lean_s991 lean_s857
let lean_s993 := by timed flipCongrArg lean_s992 [Implies]
have lean_s994 : let967 := by timed rfl
have lean_s995 : (Eq let845 let917) := by timed congr lean_s993 lean_s994
let lean_s996 := by timed congr lean_s554 lean_s995
have lean_s997 : (Eq let843 let915) := by timed flipCongrArg lean_s992 [Not]
let lean_s998 := by timed flipCongrArg lean_s997 [Implies]
have lean_s999 : let966 := by timed rfl
have lean_s1000 : (Eq let844 let916) := by timed congr lean_s998 lean_s999
let lean_s1001 := by timed congr lean_s554 lean_s1000
let lean_s1002 := by timed flipCongrArg lean_s854 [And]
have lean_s1003 : (Eq let838 let910) := by timed congr lean_s1002 lean_s885
let lean_s1004 := by timed flipCongrArg lean_s1003 [Implies]
have lean_s1005 : let965 := by timed rfl
have lean_s1006 : (Eq let841 let913) := by timed congr lean_s1004 lean_s1005
let lean_s1007 := by timed congr lean_s554 lean_s1006
have lean_s1008 : (Eq let839 let911) := by timed flipCongrArg lean_s1003 [Not]
let lean_s1009 := by timed flipCongrArg lean_s1008 [Implies]
have lean_s1010 : let964 := by timed rfl
have lean_s1011 : (Eq let840 let912) := by timed congr lean_s1009 lean_s1010
let lean_s1012 := by timed congr lean_s554 lean_s1011
let lean_s1013 := by timed flipCongrArg lean_s882 [And]
have lean_s1014 : (Eq let834 let906) := by timed congr lean_s1013 lean_s913
let lean_s1015 := by timed flipCongrArg lean_s1014 [Implies]
have lean_s1016 : let963 := by timed rfl
have lean_s1017 : (Eq let837 let909) := by timed congr lean_s1015 lean_s1016
let lean_s1018 := by timed congr lean_s554 lean_s1017
have lean_s1019 : (Eq let835 let907) := by timed flipCongrArg lean_s1014 [Not]
let lean_s1020 := by timed flipCongrArg lean_s1019 [Implies]
have lean_s1021 : let962 := by timed rfl
have lean_s1022 : (Eq let836 let908) := by timed congr lean_s1020 lean_s1021
let lean_s1023 := by timed congr lean_s554 lean_s1022
let lean_s1024 := by timed flipCongrArg lean_s910 [And]
have lean_s1025 : (Eq let830 let902) := by timed congr lean_s1024 lean_s941
let lean_s1026 := by timed flipCongrArg lean_s1025 [Implies]
have lean_s1027 : let961 := by timed rfl
have lean_s1028 : (Eq let833 let905) := by timed congr lean_s1026 lean_s1027
let lean_s1029 := by timed congr lean_s554 lean_s1028
have lean_s1030 : (Eq let831 let903) := by timed flipCongrArg lean_s1025 [Not]
let lean_s1031 := by timed flipCongrArg lean_s1030 [Implies]
have lean_s1032 : let960 := by timed rfl
have lean_s1033 : (Eq let832 let904) := by timed congr lean_s1031 lean_s1032
let lean_s1034 := by timed congr lean_s554 lean_s1033
let lean_s1035 := by timed flipCongrArg lean_s938 [And]
have lean_s1036 : (Eq let826 let898) := by timed congr lean_s1035 lean_s969
let lean_s1037 := by timed flipCongrArg lean_s1036 [Implies]
have lean_s1038 : let959 := by timed rfl
have lean_s1039 : (Eq let829 let901) := by timed congr lean_s1037 lean_s1038
let lean_s1040 := by timed congr lean_s554 lean_s1039
have lean_s1041 : (Eq let827 let899) := by timed flipCongrArg lean_s1036 [Not]
let lean_s1042 := by timed flipCongrArg lean_s1041 [Implies]
have lean_s1043 : let958 := by timed rfl
have lean_s1044 : (Eq let828 let900) := by timed congr lean_s1042 lean_s1043
let lean_s1045 := by timed congr lean_s554 lean_s1044
let lean_s1046 := by timed flipCongrArg lean_s966 [And]
let lean_s1047 := by timed flipCongrArg lean_s702 [Eq]
have lean_s1048 : (Eq let136 let136) := by timed rfl
have lean_s1049 : (Eq let137 let361) := by timed congr lean_s1047 lean_s1048
have lean_s1050 : (Eq let822 let894) := by timed congr lean_s1046 lean_s1049
let lean_s1051 := by timed flipCongrArg lean_s1050 [Implies]
have lean_s1052 : let957 := by timed rfl
have lean_s1053 : (Eq let825 let897) := by timed congr lean_s1051 lean_s1052
let lean_s1054 := by timed congr lean_s554 lean_s1053
have lean_s1055 : (Eq let823 let895) := by timed flipCongrArg lean_s1050 [Not]
let lean_s1056 := by timed flipCongrArg lean_s1055 [Implies]
have lean_s1057 : let956 := by timed rfl
have lean_s1058 : (Eq let824 let896) := by timed congr lean_s1056 lean_s1057
let lean_s1059 := by timed congr lean_s554 lean_s1058
let lean_s1060 := by timed flipCongrArg lean_s826 [And]
have lean_s1061 : (Eq let818 let890) := by timed congr lean_s1060 lean_s860
let lean_s1062 := by timed flipCongrArg lean_s1061 [Implies]
have lean_s1063 : let955 := by timed rfl
have lean_s1064 : (Eq let821 let893) := by timed congr lean_s1062 lean_s1063
let lean_s1065 := by timed congr lean_s554 lean_s1064
have lean_s1066 : (Eq let819 let891) := by timed flipCongrArg lean_s1061 [Not]
let lean_s1067 := by timed flipCongrArg lean_s1066 [Implies]
have lean_s1068 : let954 := by timed rfl
have lean_s1069 : (Eq let820 let892) := by timed congr lean_s1067 lean_s1068
let lean_s1070 := by timed congr lean_s554 lean_s1069
let lean_s1071 := by timed flipCongrArg lean_s854 [And]
have lean_s1072 : (Eq let814 let886) := by timed congr lean_s1071 lean_s888
let lean_s1073 := by timed flipCongrArg lean_s1072 [Implies]
have lean_s1074 : let953 := by timed rfl
have lean_s1075 : (Eq let817 let889) := by timed congr lean_s1073 lean_s1074
let lean_s1076 := by timed congr lean_s554 lean_s1075
have lean_s1077 : (Eq let815 let887) := by timed flipCongrArg lean_s1072 [Not]
let lean_s1078 := by timed flipCongrArg lean_s1077 [Implies]
have lean_s1079 : let952 := by timed rfl
have lean_s1080 : (Eq let816 let888) := by timed congr lean_s1078 lean_s1079
let lean_s1081 := by timed congr lean_s554 lean_s1080
let lean_s1082 := by timed flipCongrArg lean_s882 [And]
have lean_s1083 : (Eq let810 let882) := by timed congr lean_s1082 lean_s916
let lean_s1084 := by timed flipCongrArg lean_s1083 [Implies]
have lean_s1085 : let951 := by timed rfl
have lean_s1086 : (Eq let813 let885) := by timed congr lean_s1084 lean_s1085
let lean_s1087 := by timed congr lean_s554 lean_s1086
have lean_s1088 : (Eq let811 let883) := by timed flipCongrArg lean_s1083 [Not]
let lean_s1089 := by timed flipCongrArg lean_s1088 [Implies]
have lean_s1090 : let950 := by timed rfl
have lean_s1091 : (Eq let812 let884) := by timed congr lean_s1089 lean_s1090
let lean_s1092 := by timed congr lean_s554 lean_s1091
let lean_s1093 := by timed flipCongrArg lean_s910 [And]
have lean_s1094 : (Eq let806 let878) := by timed congr lean_s1093 lean_s944
let lean_s1095 := by timed flipCongrArg lean_s1094 [Implies]
have lean_s1096 : let949 := by timed rfl
have lean_s1097 : (Eq let809 let881) := by timed congr lean_s1095 lean_s1096
let lean_s1098 := by timed congr lean_s554 lean_s1097
have lean_s1099 : (Eq let807 let879) := by timed flipCongrArg lean_s1094 [Not]
let lean_s1100 := by timed flipCongrArg lean_s1099 [Implies]
have lean_s1101 : let948 := by timed rfl
have lean_s1102 : (Eq let808 let880) := by timed congr lean_s1100 lean_s1101
let lean_s1103 := by timed congr lean_s554 lean_s1102
let lean_s1104 := by timed flipCongrArg lean_s938 [And]
have lean_s1105 : (Eq let802 let874) := by timed congr lean_s1104 lean_s972
let lean_s1106 := by timed flipCongrArg lean_s1105 [Implies]
have lean_s1107 : let947 := by timed rfl
have lean_s1108 : (Eq let805 let877) := by timed congr lean_s1106 lean_s1107
let lean_s1109 := by timed congr lean_s554 lean_s1108
have lean_s1110 : (Eq let803 let875) := by timed flipCongrArg lean_s1105 [Not]
let lean_s1111 := by timed flipCongrArg lean_s1110 [Implies]
have lean_s1112 : let946 := by timed rfl
have lean_s1113 : (Eq let804 let876) := by timed congr lean_s1111 lean_s1112
let lean_s1114 := by timed congr lean_s554 lean_s1113
let lean_s1115 := by timed flipCongrArg lean_s966 [And]
let lean_s1116 := by timed flipCongrArg lean_s707 [Eq]
have lean_s1117 : (Eq let253 let202) := by timed congr lean_s1116 lean_s1048
have lean_s1118 : (Eq let798 let870) := by timed congr lean_s1115 lean_s1117
let lean_s1119 := by timed flipCongrArg lean_s1118 [Implies]
have lean_s1120 : let945 := by timed rfl
have lean_s1121 : (Eq let801 let873) := by timed congr lean_s1119 lean_s1120
let lean_s1122 := by timed congr lean_s554 lean_s1121
have lean_s1123 : (Eq let799 let871) := by timed flipCongrArg lean_s1118 [Not]
let lean_s1124 := by timed flipCongrArg lean_s1123 [Implies]
have lean_s1125 : let944 := by timed rfl
have lean_s1126 : (Eq let800 let872) := by timed congr lean_s1124 lean_s1125
let lean_s1127 := by timed congr lean_s1122 lean_s1126
let lean_s1128 := by timed congr lean_s1114 lean_s1127
let lean_s1129 := by timed congr lean_s1109 lean_s1128
let lean_s1130 := by timed congr lean_s1103 lean_s1129
let lean_s1131 := by timed congr lean_s1098 lean_s1130
let lean_s1132 := by timed congr lean_s1092 lean_s1131
let lean_s1133 := by timed congr lean_s1087 lean_s1132
let lean_s1134 := by timed congr lean_s1081 lean_s1133
let lean_s1135 := by timed congr lean_s1076 lean_s1134
let lean_s1136 := by timed congr lean_s1070 lean_s1135
let lean_s1137 := by timed congr lean_s1065 lean_s1136
let lean_s1138 := by timed congr lean_s1059 lean_s1137
let lean_s1139 := by timed congr lean_s1054 lean_s1138
let lean_s1140 := by timed congr lean_s1045 lean_s1139
let lean_s1141 := by timed congr lean_s1040 lean_s1140
let lean_s1142 := by timed congr lean_s1034 lean_s1141
let lean_s1143 := by timed congr lean_s1029 lean_s1142
let lean_s1144 := by timed congr lean_s1023 lean_s1143
let lean_s1145 := by timed congr lean_s1018 lean_s1144
let lean_s1146 := by timed congr lean_s1012 lean_s1145
let lean_s1147 := by timed congr lean_s1007 lean_s1146
let lean_s1148 := by timed congr lean_s1001 lean_s1147
let lean_s1149 := by timed congr lean_s996 lean_s1148
let lean_s1150 := by timed congr lean_s990 lean_s1149
let lean_s1151 := by timed congr lean_s962 lean_s1150
let lean_s1152 := by timed congr lean_s934 lean_s1151
let lean_s1153 := by timed congr lean_s906 lean_s1152
let lean_s1154 := by timed congr lean_s878 lean_s1153
let lean_s1155 := by timed congr lean_s850 lean_s1154
let lean_s1156 := by timed congr lean_s822 lean_s1155
let lean_s1157 := by timed congr lean_s806 lean_s1156
let lean_s1158 := by timed congr lean_s777 lean_s1157
let lean_s1159 := by timed congr lean_s761 lean_s1158
let lean_s1160 := by timed congr lean_s755 lean_s1159
let lean_s1161 := by timed congr lean_s746 lean_s1160
let lean_s1162 := by timed congr lean_s740 lean_s1161
let lean_s1163 := by timed congr lean_s733 lean_s1162
let lean_s1164 := by timed congr lean_s725 lean_s1163
let lean_s1165 := by timed congr lean_s716 lean_s1164
let lean_s1166 := by timed congr lean_s711 lean_s1165
let lean_s1167 := by timed congr lean_s706 lean_s1166
let lean_s1168 := by timed congr lean_s701 lean_s1167
let lean_s1169 := by timed congr lean_s696 lean_s1168
let lean_s1170 := by timed congr lean_s692 lean_s1169
let lean_s1171 := by timed congr lean_s687 lean_s1170
let lean_s1172 := by timed congr lean_s682 lean_s1171
let lean_s1173 := by timed congr lean_s677 lean_s1172
have lean_s1174 : (Eq let859 let940) := by timed congr lean_s672 lean_s1173
let lean_s1175 := by timed flipCongrArg lean_s1174 [Implies]
have lean_s1176 : let943 := by timed rfl
let lean_s1177 := by timed flipCongrArg lean_s697 [Eq]
have lean_s1178 : (Eq let152 let152) := by timed rfl
have lean_s1179 : (Eq let153 let266) := by timed congr lean_s1177 lean_s1178
have lean_s1180 : (Eq let796 let868) := by timed flipCongrArg lean_s1179 [Not]
let lean_s1181 := by timed congr lean_s1176 lean_s1180
let lean_s1182 := by timed flipCongrArg lean_s702 [Eq]
have lean_s1183 : (Eq let162 let162) := by timed rfl
have lean_s1184 : (Eq let163 let364) := by timed congr lean_s1182 lean_s1183
let lean_s1185 := by timed congr lean_s1176 lean_s1184
let lean_s1186 := by timed flipCongrArg lean_s678 [Eq]
have lean_s1187 : (Eq let190 let538) := by timed flipCongrArg lean_s726 [format]
have lean_s1188 : (Eq let191 let540) := by timed congr lean_s1186 lean_s1187
let lean_s1189 := by timed congr lean_s1176 lean_s1188
let lean_s1190 := by timed flipCongrArg lean_s683 [Eq]
let lean_s1191 := by timed flipCongrArg lean_s752 [HAdd.hAdd]
have lean_s1192 : (Eq let197 let719) := by timed congr lean_s1191 lean_s726
have lean_s1193 : (Eq let198 let866) := by timed flipCongrArg lean_s1192 [format]
have lean_s1194 : (Eq let199 let867) := by timed congr lean_s1190 lean_s1193
let lean_s1195 := by timed congr lean_s1176 lean_s1194
let lean_s1196 := by timed flipCongrArg lean_s688 [Eq]
let lean_s1197 := by timed flipCongrArg lean_s738 [HAdd.hAdd]
have lean_s1198 : (Eq let165 let328) := by timed congr lean_s1197 lean_s726
have lean_s1199 : (Eq let181 let864) := by timed flipCongrArg lean_s1198 [format]
have lean_s1200 : (Eq let182 let865) := by timed congr lean_s1196 lean_s1199
let lean_s1201 := by timed congr lean_s1176 lean_s1200
let lean_s1202 := by timed flipCongrArg lean_s693 [Eq]
let lean_s1203 := by timed flipCongrArg lean_s680 [HAdd.hAdd]
have lean_s1204 : (Eq let184 let335) := by timed congr lean_s1203 lean_s726
have lean_s1205 : (Eq let185 let862) := by timed flipCongrArg lean_s1204 [format]
have lean_s1206 : (Eq let186 let863) := by timed congr lean_s1202 lean_s1205
let lean_s1207 := by timed congr lean_s1201 lean_s1206
let lean_s1208 := by timed congr lean_s1195 lean_s1207
let lean_s1209 := by timed congr lean_s1189 lean_s1208
let lean_s1210 := by timed congr lean_s1185 lean_s1209
have lean_s1211 : (Eq let797 let869) := by timed congr lean_s1181 lean_s1210
have lean_s1212 : (Eq let860 let941) := by timed congr lean_s1175 lean_s1211
have lean_s1213 : (Eq let861 let942) := by timed flipCongrArg lean_s1212 [Not]
have lean_s1214 : let943 := by timed rfl
let lean_s1215 := by timed congr lean_s1214 lean_r69
let lean_s1216 := by timed congr lean_s1214 lean_r81
let lean_s1217 := by timed congr lean_s1214 lean_r66
let lean_s1218 := by timed congr lean_s1214 lean_r64
let lean_s1219 := by timed congr lean_s1214 lean_r46
let lean_s1220 := by timed congr lean_s1214 lean_r81
let lean_s1221 := by timed congr lean_s1214 lean_r193
let lean_s1222 := by timed congr lean_s1214 lean_r191
let lean_s1223 := by timed congr lean_s1214 lean_r188
let lean_s1224 := by timed congr lean_s1214 lean_r93
let lean_s1225 := by timed flipCongrArg lean_s638 [Eq]
have lean_s1226 : (Eq let939 let84) := by timed congr lean_s1225 lean_s603
have lean_s1227 : (Eq let939 True) := by timed Eq.trans lean_s1226 lean_r15
let lean_s1228 := by timed congr lean_s1214 lean_s1227
have lean_s1229 : (Eq let115 let115) := by timed rfl
have lean_s1230 : (Eq let114 let114) := by timed rfl
let lean_s1231 := by timed congrHAdd lean_s1230 lean_r137
let lean_s1232 := by timed congrHAdd lean_s1229 lean_s1231
have lean_s1233 : (Eq let302 let208) := by timed congrHAdd lean_s638 lean_s1232
have lean_s1234 : (Eq let302 let117) := by timed Eq.trans lean_s1233 lean_r53
have lean_s1235 : (Eq let303 let117) := by timed Eq.trans lean_r99 lean_s1234
let lean_s1236 := by timed flipCongrArg lean_s1235 [GE.ge]
have lean_s1237 : (Eq let937 let215) := by timed congr lean_s1236 lean_s600
have lean_s1238 : (Eq let937 let16) := by timed Eq.trans lean_s1237 lean_r56
let lean_s1239 := by timed congr lean_s1214 lean_s1238
let lean_s1240 := by timed flipCongrArg lean_r253 [GE.ge]
have lean_s1241 : let1004 := by timed rfl
have lean_s1242 : (Eq let936 let252) := by timed congr lean_s1240 lean_s1241
have lean_s1243 : (Eq let936 let250) := by timed Eq.trans lean_s1242 lean_r73
let lean_s1244 := by timed congr lean_s1214 lean_s1243
let lean_s1245 := by timed flipCongrArg lean_r151 [GE.ge]
have lean_s1246 : let1003 := by timed rfl
have lean_s1247 : (Eq let934 let233) := by timed congr lean_s1245 lean_s1246
have lean_s1248 : (Eq let934 let231) := by timed Eq.trans lean_s1247 lean_r67
have lean_s1249 : (Eq let935 let365) := by timed flipCongrArg lean_s1248 [Not]
have lean_s1250 : (Eq let935 let230) := by timed Eq.trans lean_s1249 lean_r124
let lean_s1251 := by timed congr lean_s1214 lean_s1250
have lean_s1252 : let236 := by timed rfl
let lean_s1253 := by timed congrHAdd lean_r21 lean_s1252
have lean_s1254 : (Eq let931 let400) := by timed congrHAdd lean_s638 lean_s1253
have lean_s1255 : (Eq let931 let113) := by timed Eq.trans lean_s1254 lean_r139
let lean_s1256 := by timed flipCongrArg lean_s1255 [GE.ge]
have lean_s1257 : let1002 := by timed rfl
have lean_s1258 : (Eq let932 let263) := by timed congr lean_s1256 lean_s1257
have lean_s1259 : (Eq let932 let262) := by timed Eq.trans lean_s1258 lean_r77
have lean_s1260 : (Eq let933 let544) := by timed flipCongrArg lean_s1259 [Not]
have lean_s1261 : (Eq let933 let16) := by timed Eq.trans lean_s1260 lean_r173
let lean_s1262 := by timed congr lean_s1214 lean_s1261
have lean_s1263 : let268 := by timed rfl
let lean_s1264 := by timed congrHAdd lean_s1252 lean_s1263
let lean_s1265 := by timed congrHAdd lean_r21 lean_s1264
have lean_s1266 : (Eq let929 let729) := by timed congrHAdd lean_s638 lean_s1265
have lean_s1267 : (Eq let929 let194) := by timed Eq.trans lean_s1266 lean_r225
let lean_s1268 := by timed flipCongrArg lean_s1267 [GE.ge]
have lean_s1269 : let196 := by timed rfl
have lean_s1270 : (Eq let930 let195) := by timed congr lean_s1268 lean_s1269
have lean_s1271 : (Eq let930 let193) := by timed Eq.trans lean_s1270 lean_r45
let lean_s1272 := by timed congr lean_s1214 lean_s1271
let lean_s1273 := by timed flipCongrArg lean_s638 [Eq]
let lean_s1274 := by timed congrHAdd lean_s647 lean_s650
let lean_s1275 := by timed congrHAdd lean_s1230 lean_s1274
let lean_s1276 := by timed congrHAdd lean_s1229 lean_s1275
have lean_s1277 : (Eq let513 let373) := by timed congrHAdd lean_s638 lean_s1276
have lean_s1278 : (Eq let513 let83) := by timed Eq.trans lean_s1277 lean_r128
have lean_s1279 : (Eq let514 let83) := by timed Eq.trans lean_r157 lean_s1278
have lean_s1280 : (Eq let928 let84) := by timed congr lean_s1273 lean_s1279
have lean_s1281 : (Eq let928 True) := by timed Eq.trans lean_s1280 lean_r15
let lean_s1282 := by timed congr lean_s1214 lean_s1281
have lean_s1283 : let970 := by timed rfl
let lean_s1284 := by timed congr lean_s1283 lean_r16
let lean_s1285 := by timed congr lean_s1283 lean_r167
let lean_s1286 := by timed congr lean_s1283 lean_r136
let lean_s1287 := by timed congr lean_s1283 lean_r135
let lean_s1288 := by timed congr lean_s1283 lean_r108
let lean_s1289 := by timed congr lean_s1288 lean_r138
let lean_s1290 := by timed congr lean_s1287 lean_s1289
let lean_s1291 := by timed congr lean_s1286 lean_s1290
let lean_s1292 := by timed congr lean_s1285 lean_s1291
have lean_s1293 : (Eq let927 let502) := by timed congr lean_s1284 lean_s1292
let lean_s1294 := by timed congr lean_s1214 lean_s1293
have lean_s1295 : let970 := by timed rfl
let lean_s1296 := by timed congr lean_s1295 lean_r70
have lean_s1297 : (Eq let117 let117) := by timed rfl
let lean_s1298 := by timed flipCongrArg lean_s1297 [Eq]
have lean_s1299 : (Eq let925 let276) := by timed congr lean_s1298 lean_r65
have lean_s1300 : (Eq let925 let275) := by timed Eq.trans lean_s1299 lean_r85
let lean_s1301 := by timed congr lean_s1295 lean_s1300
let lean_s1302 := by timed flipCongrArg lean_s1297 [Eq]
have lean_s1303 : (Eq let924 let413) := by timed congr lean_s1302 lean_r131
have lean_s1304 : (Eq let924 False) := by timed Eq.trans lean_s1303 lean_r148
let lean_s1305 := by timed congr lean_s1301 lean_s1304
have lean_s1306 : (Eq let926 let374) := by timed congr lean_s1296 lean_s1305
have lean_s1307 : (Eq let926 let275) := by timed Eq.trans lean_s1306 lean_r129
let lean_s1308 := by timed congr lean_s1214 lean_s1307
have lean_s1309 : let970 := by timed rfl
let lean_s1310 := by timed congr lean_s1309 lean_r92
let lean_s1311 := by timed congr lean_s1309 lean_r101
let lean_s1312 := by timed congr lean_s1309 lean_r100
let lean_s1313 := by timed congr lean_s1309 lean_s190
let lean_s1314 := by timed congr lean_s1309 lean_s192
let lean_s1315 := by timed congr lean_s1309 lean_s194
let lean_s1316 := by timed congr lean_s1309 lean_s196
let lean_s1317 := by timed congr lean_s1316 lean_s198
let lean_s1318 := by timed congr lean_s1315 lean_s1317
let lean_s1319 := by timed congr lean_s1314 lean_s1318
let lean_s1320 := by timed congr lean_s1313 lean_s1319
let lean_s1321 := by timed congr lean_s1312 lean_s1320
let lean_s1322 := by timed congr lean_s1311 lean_s1321
have lean_s1323 : (Eq let923 let500) := by timed congr lean_s1310 lean_s1322
let lean_s1324 := by timed congr lean_s1214 lean_s1323
have lean_s1325 : let970 := by timed rfl
let lean_s1326 := by timed congr lean_s1325 lean_r180
let lean_s1327 := by timed congr lean_s1325 lean_r25
let lean_s1328 := by timed congr lean_s1325 lean_r256
let lean_s1329 := by timed congr lean_s1325 lean_s212
let lean_s1330 := by timed congr lean_s1325 lean_s214
let lean_s1331 := by timed congr lean_s1325 lean_s216
let lean_s1332 := by timed congr lean_s1325 lean_s218
let lean_s1333 := by timed congr lean_s1332 lean_s220
let lean_s1334 := by timed congr lean_s1331 lean_s1333
let lean_s1335 := by timed congr lean_s1330 lean_s1334
let lean_s1336 := by timed congr lean_s1329 lean_s1335
let lean_s1337 := by timed congr lean_s1328 lean_s1336
let lean_s1338 := by timed congr lean_s1327 lean_s1337
have lean_s1339 : (Eq let922 let499) := by timed congr lean_s1326 lean_s1338
let lean_s1340 := by timed congr lean_s1214 lean_s1339
have lean_s1341 : let970 := by timed rfl
let lean_s1342 := by timed congr lean_s1341 lean_r175
let lean_s1343 := by timed congr lean_s1341 lean_r104
let lean_s1344 := by timed congr lean_s1341 lean_r63
let lean_s1345 := by timed congr lean_s1341 lean_s234
let lean_s1346 := by timed congr lean_s1341 lean_s236
let lean_s1347 := by timed congr lean_s1341 lean_s238
let lean_s1348 := by timed congr lean_s1341 lean_s240
let lean_s1349 := by timed congr lean_s1348 lean_s242
let lean_s1350 := by timed congr lean_s1347 lean_s1349
let lean_s1351 := by timed congr lean_s1346 lean_s1350
let lean_s1352 := by timed congr lean_s1345 lean_s1351
let lean_s1353 := by timed congr lean_s1344 lean_s1352
let lean_s1354 := by timed congr lean_s1343 lean_s1353
have lean_s1355 : (Eq let921 let498) := by timed congr lean_s1342 lean_s1354
let lean_s1356 := by timed congr lean_s1214 lean_s1355
have lean_s1357 : let970 := by timed rfl
let lean_s1358 := by timed congr lean_s1357 lean_r72
let lean_s1359 := by timed congr lean_s1357 lean_r111
let lean_s1360 := by timed congr lean_s1357 lean_r95
let lean_s1361 := by timed congr lean_s1357 lean_s256
let lean_s1362 := by timed congr lean_s1357 lean_s258
let lean_s1363 := by timed congr lean_s1357 lean_s260
let lean_s1364 := by timed congr lean_s1357 lean_s262
let lean_s1365 := by timed congr lean_s1364 lean_s264
let lean_s1366 := by timed congr lean_s1363 lean_s1365
let lean_s1367 := by timed congr lean_s1362 lean_s1366
let lean_s1368 := by timed congr lean_s1361 lean_s1367
let lean_s1369 := by timed congr lean_s1360 lean_s1368
let lean_s1370 := by timed congr lean_s1359 lean_s1369
have lean_s1371 : (Eq let920 let491) := by timed congr lean_s1358 lean_s1370
let lean_s1372 := by timed congr lean_s1214 lean_s1371
have lean_s1373 : let970 := by timed rfl
let lean_s1374 := by timed congr lean_s1373 lean_r82
let lean_s1375 := by timed congr lean_s1373 lean_r127
let lean_s1376 := by timed congr lean_s1373 lean_r32
let lean_s1377 := by timed congr lean_s1373 lean_s278
let lean_s1378 := by timed congr lean_s1373 lean_s280
let lean_s1379 := by timed congr lean_s1373 lean_s282
let lean_s1380 := by timed congr lean_s1373 lean_s284
let lean_s1381 := by timed congr lean_s1380 lean_s286
let lean_s1382 := by timed congr lean_s1379 lean_s1381
let lean_s1383 := by timed congr lean_s1378 lean_s1382
let lean_s1384 := by timed congr lean_s1377 lean_s1383
let lean_s1385 := by timed congr lean_s1376 lean_s1384
let lean_s1386 := by timed congr lean_s1375 lean_s1385
have lean_s1387 : (Eq let919 let490) := by timed congr lean_s1374 lean_s1386
let lean_s1388 := by timed congr lean_s1214 lean_s1387
have lean_s1389 : let970 := by timed rfl
let lean_s1390 := by timed congr lean_s1389 lean_r83
let lean_s1391 := by timed congr lean_s1389 lean_r60
let lean_s1392 := by timed congr lean_s1389 lean_r116
let lean_s1393 := by timed congr lean_s1389 lean_s300
let lean_s1394 := by timed congr lean_s1389 lean_s302
let lean_s1395 := by timed congr lean_s1389 lean_s304
let lean_s1396 := by timed congr lean_s1389 lean_s306
let lean_s1397 := by timed congr lean_s1396 lean_s308
let lean_s1398 := by timed congr lean_s1395 lean_s1397
let lean_s1399 := by timed congr lean_s1394 lean_s1398
let lean_s1400 := by timed congr lean_s1393 lean_s1399
let lean_s1401 := by timed congr lean_s1392 lean_s1400
let lean_s1402 := by timed congr lean_s1391 lean_s1401
have lean_s1403 : (Eq let918 let483) := by timed congr lean_s1390 lean_s1402
let lean_s1404 := by timed congr lean_s1214 lean_s1403
let lean_s1405 := by timed flipCongrArg lean_r92 [And]
have lean_s1406 : (Eq let914 let473) := by timed congr lean_s1405 lean_r25
let lean_s1407 := by timed flipCongrArg lean_s1406 [Implies]
have lean_s1408 : (Eq let917 let476) := by timed congr lean_s1407 lean_s321
let lean_s1409 := by timed congr lean_s1214 lean_s1408
have lean_s1410 : (Eq let915 let474) := by timed flipCongrArg lean_s1406 [Not]
let lean_s1411 := by timed flipCongrArg lean_s1410 [Implies]
have lean_s1412 : (Eq let916 let475) := by timed congr lean_s1411 lean_s326
let lean_s1413 := by timed congr lean_s1214 lean_s1412
let lean_s1414 := by timed flipCongrArg lean_r180 [And]
have lean_s1415 : (Eq let910 let469) := by timed congr lean_s1414 lean_r104
let lean_s1416 := by timed flipCongrArg lean_s1415 [Implies]
have lean_s1417 : let965 := by timed rfl
have lean_s1418 : (Eq let913 let472) := by timed congr lean_s1416 lean_s1417
let lean_s1419 := by timed congr lean_s1214 lean_s1418
have lean_s1420 : (Eq let911 let470) := by timed flipCongrArg lean_s1415 [Not]
let lean_s1421 := by timed flipCongrArg lean_s1420 [Implies]
have lean_s1422 : let964 := by timed rfl
have lean_s1423 : (Eq let912 let471) := by timed congr lean_s1421 lean_s1422
let lean_s1424 := by timed congr lean_s1214 lean_s1423
let lean_s1425 := by timed flipCongrArg lean_r175 [And]
have lean_s1426 : (Eq let906 let123) := by timed congr lean_s1425 lean_r111
let lean_s1427 := by timed flipCongrArg lean_s1426 [Implies]
have lean_s1428 : let963 := by timed rfl
have lean_s1429 : (Eq let909 let468) := by timed congr lean_s1427 lean_s1428
let lean_s1430 := by timed congr lean_s1214 lean_s1429
have lean_s1431 : (Eq let907 let124) := by timed flipCongrArg lean_s1426 [Not]
let lean_s1432 := by timed flipCongrArg lean_s1431 [Implies]
have lean_s1433 : let962 := by timed rfl
have lean_s1434 : (Eq let908 let467) := by timed congr lean_s1432 lean_s1433
let lean_s1435 := by timed congr lean_s1214 lean_s1434
let lean_s1436 := by timed flipCongrArg lean_r72 [And]
have lean_s1437 : (Eq let902 let463) := by timed congr lean_s1436 lean_r127
let lean_s1438 := by timed flipCongrArg lean_s1437 [Implies]
have lean_s1439 : let961 := by timed rfl
have lean_s1440 : (Eq let905 let466) := by timed congr lean_s1438 lean_s1439
let lean_s1441 := by timed congr lean_s1214 lean_s1440
have lean_s1442 : (Eq let903 let464) := by timed flipCongrArg lean_s1437 [Not]
let lean_s1443 := by timed flipCongrArg lean_s1442 [Implies]
have lean_s1444 : let960 := by timed rfl
have lean_s1445 : (Eq let904 let465) := by timed congr lean_s1443 lean_s1444
let lean_s1446 := by timed congr lean_s1214 lean_s1445
let lean_s1447 := by timed flipCongrArg lean_r82 [And]
have lean_s1448 : (Eq let898 let458) := by timed congr lean_s1447 lean_r60
let lean_s1449 := by timed flipCongrArg lean_s1448 [Implies]
have lean_s1450 : let959 := by timed rfl
have lean_s1451 : (Eq let901 let462) := by timed congr lean_s1449 lean_s1450
let lean_s1452 := by timed congr lean_s1214 lean_s1451
have lean_s1453 : (Eq let899 let459) := by timed flipCongrArg lean_s1448 [Not]
let lean_s1454 := by timed flipCongrArg lean_s1453 [Implies]
have lean_s1455 : let958 := by timed rfl
have lean_s1456 : (Eq let900 let460) := by timed congr lean_s1454 lean_s1455
let lean_s1457 := by timed congr lean_s1214 lean_s1456
let lean_s1458 := by timed flipCongrArg lean_r83 [And]
have lean_s1459 : (Eq let894 let454) := by timed congr lean_s1458 lean_r121
let lean_s1460 := by timed flipCongrArg lean_s1459 [Implies]
have lean_s1461 : let957 := by timed rfl
have lean_s1462 : (Eq let897 let457) := by timed congr lean_s1460 lean_s1461
let lean_s1463 := by timed congr lean_s1214 lean_s1462
have lean_s1464 : (Eq let895 let455) := by timed flipCongrArg lean_s1459 [Not]
let lean_s1465 := by timed flipCongrArg lean_s1464 [Implies]
have lean_s1466 : let956 := by timed rfl
have lean_s1467 : (Eq let896 let456) := by timed congr lean_s1465 lean_s1466
let lean_s1468 := by timed congr lean_s1214 lean_s1467
let lean_s1469 := by timed flipCongrArg lean_r92 [And]
have lean_s1470 : (Eq let890 let449) := by timed congr lean_s1469 lean_r256
let lean_s1471 := by timed flipCongrArg lean_s1470 [Implies]
have lean_s1472 : (Eq let893 let452) := by timed congr lean_s1471 lean_s397
let lean_s1473 := by timed congr lean_s1214 lean_s1472
have lean_s1474 : (Eq let891 let450) := by timed flipCongrArg lean_s1470 [Not]
let lean_s1475 := by timed flipCongrArg lean_s1474 [Implies]
have lean_s1476 : (Eq let892 let451) := by timed congr lean_s1475 lean_s402
let lean_s1477 := by timed congr lean_s1214 lean_s1476
let lean_s1478 := by timed flipCongrArg lean_r180 [And]
have lean_s1479 : (Eq let886 let444) := by timed congr lean_s1478 lean_r63
let lean_s1480 := by timed flipCongrArg lean_s1479 [Implies]
have lean_s1481 : let953 := by timed rfl
have lean_s1482 : (Eq let889 let447) := by timed congr lean_s1480 lean_s1481
let lean_s1483 := by timed congr lean_s1214 lean_s1482
have lean_s1484 : (Eq let887 let445) := by timed flipCongrArg lean_s1479 [Not]
let lean_s1485 := by timed flipCongrArg lean_s1484 [Implies]
have lean_s1486 : let952 := by timed rfl
have lean_s1487 : (Eq let888 let446) := by timed congr lean_s1485 lean_s1486
let lean_s1488 := by timed congr lean_s1214 lean_s1487
let lean_s1489 := by timed flipCongrArg lean_r175 [And]
have lean_s1490 : (Eq let882 let439) := by timed congr lean_s1489 lean_r95
let lean_s1491 := by timed flipCongrArg lean_s1490 [Implies]
have lean_s1492 : let951 := by timed rfl
have lean_s1493 : (Eq let885 let442) := by timed congr lean_s1491 lean_s1492
let lean_s1494 := by timed congr lean_s1214 lean_s1493
have lean_s1495 : (Eq let883 let440) := by timed flipCongrArg lean_s1490 [Not]
let lean_s1496 := by timed flipCongrArg lean_s1495 [Implies]
have lean_s1497 : let950 := by timed rfl
have lean_s1498 : (Eq let884 let441) := by timed congr lean_s1496 lean_s1497
let lean_s1499 := by timed congr lean_s1214 lean_s1498
let lean_s1500 := by timed flipCongrArg lean_r72 [And]
have lean_s1501 : (Eq let878 let435) := by timed congr lean_s1500 lean_r32
let lean_s1502 := by timed flipCongrArg lean_s1501 [Implies]
have lean_s1503 : let949 := by timed rfl
have lean_s1504 : (Eq let881 let438) := by timed congr lean_s1502 lean_s1503
let lean_s1505 := by timed congr lean_s1214 lean_s1504
have lean_s1506 : (Eq let879 let436) := by timed flipCongrArg lean_s1501 [Not]
let lean_s1507 := by timed flipCongrArg lean_s1506 [Implies]
have lean_s1508 : let948 := by timed rfl
have lean_s1509 : (Eq let880 let437) := by timed congr lean_s1507 lean_s1508
let lean_s1510 := by timed congr lean_s1214 lean_s1509
let lean_s1511 := by timed flipCongrArg lean_r82 [And]
have lean_s1512 : (Eq let874 let431) := by timed congr lean_s1511 lean_r116
let lean_s1513 := by timed flipCongrArg lean_s1512 [Implies]
have lean_s1514 : let947 := by timed rfl
have lean_s1515 : (Eq let877 let434) := by timed congr lean_s1513 lean_s1514
let lean_s1516 := by timed congr lean_s1214 lean_s1515
have lean_s1517 : (Eq let875 let432) := by timed flipCongrArg lean_s1512 [Not]
let lean_s1518 := by timed flipCongrArg lean_s1517 [Implies]
have lean_s1519 : let946 := by timed rfl
have lean_s1520 : (Eq let876 let433) := by timed congr lean_s1518 lean_s1519
let lean_s1521 := by timed congr lean_s1214 lean_s1520
let lean_s1522 := by timed flipCongrArg lean_r83 [And]
have lean_s1523 : (Eq let870 let426) := by timed congr lean_s1522 lean_r48
let lean_s1524 := by timed flipCongrArg lean_s1523 [Implies]
have lean_s1525 : let945 := by timed rfl
have lean_s1526 : (Eq let873 let429) := by timed congr lean_s1524 lean_s1525
let lean_s1527 := by timed congr lean_s1214 lean_s1526
have lean_s1528 : (Eq let871 let427) := by timed flipCongrArg lean_s1523 [Not]
let lean_s1529 := by timed flipCongrArg lean_s1528 [Implies]
have lean_s1530 : let944 := by timed rfl
have lean_s1531 : (Eq let872 let428) := by timed congr lean_s1529 lean_s1530
let lean_s1532 := by timed congr lean_s1527 lean_s1531
let lean_s1533 := by timed congr lean_s1521 lean_s1532
let lean_s1534 := by timed congr lean_s1516 lean_s1533
let lean_s1535 := by timed congr lean_s1510 lean_s1534
let lean_s1536 := by timed congr lean_s1505 lean_s1535
let lean_s1537 := by timed congr lean_s1499 lean_s1536
let lean_s1538 := by timed congr lean_s1494 lean_s1537
let lean_s1539 := by timed congr lean_s1488 lean_s1538
let lean_s1540 := by timed congr lean_s1483 lean_s1539
let lean_s1541 := by timed congr lean_s1477 lean_s1540
let lean_s1542 := by timed congr lean_s1473 lean_s1541
let lean_s1543 := by timed congr lean_s1468 lean_s1542
let lean_s1544 := by timed congr lean_s1463 lean_s1543
let lean_s1545 := by timed congr lean_s1457 lean_s1544
let lean_s1546 := by timed congr lean_s1452 lean_s1545
let lean_s1547 := by timed congr lean_s1446 lean_s1546
let lean_s1548 := by timed congr lean_s1441 lean_s1547
let lean_s1549 := by timed congr lean_s1435 lean_s1548
let lean_s1550 := by timed congr lean_s1430 lean_s1549
let lean_s1551 := by timed congr lean_s1424 lean_s1550
let lean_s1552 := by timed congr lean_s1419 lean_s1551
let lean_s1553 := by timed congr lean_s1413 lean_s1552
let lean_s1554 := by timed congr lean_s1409 lean_s1553
let lean_s1555 := by timed congr lean_s1404 lean_s1554
let lean_s1556 := by timed congr lean_s1388 lean_s1555
let lean_s1557 := by timed congr lean_s1372 lean_s1556
let lean_s1558 := by timed congr lean_s1356 lean_s1557
let lean_s1559 := by timed congr lean_s1340 lean_s1558
let lean_s1560 := by timed congr lean_s1324 lean_s1559
let lean_s1561 := by timed congr lean_s1308 lean_s1560
let lean_s1562 := by timed congr lean_s1294 lean_s1561
let lean_s1563 := by timed congr lean_s1282 lean_s1562
let lean_s1564 := by timed congr lean_s1272 lean_s1563
let lean_s1565 := by timed congr lean_s1262 lean_s1564
let lean_s1566 := by timed congr lean_s1251 lean_s1565
let lean_s1567 := by timed congr lean_s1244 lean_s1566
let lean_s1568 := by timed congr lean_s1239 lean_s1567
let lean_s1569 := by timed congr lean_s1228 lean_s1568
let lean_s1570 := by timed congr lean_s1224 lean_s1569
let lean_s1571 := by timed congr lean_s1223 lean_s1570
let lean_s1572 := by timed congr lean_s1222 lean_s1571
let lean_s1573 := by timed congr lean_s1221 lean_s1572
let lean_s1574 := by timed congr lean_s1220 lean_s1573
let lean_s1575 := by timed congr lean_s1219 lean_s1574
let lean_s1576 := by timed congr lean_s1218 lean_s1575
let lean_s1577 := by timed congr lean_s1217 lean_s1576
let lean_s1578 := by timed congr lean_s1216 lean_s1577
have lean_s1579 : (Eq let940 let505) := by timed congr lean_s1215 lean_s1578
have lean_s1580 : (Eq let940 let504) := by timed Eq.trans lean_s1579 lean_r155
let lean_s1581 := by timed flipCongrArg lean_s1580 [Implies]
have lean_s1582 : let943 := by timed rfl
have lean_s1583 : (Eq let868 let792) := by timed flipCongrArg lean_r79 [Not]
let lean_s1584 := by timed congr lean_s1582 lean_s1583
let lean_s1585 := by timed congr lean_s1582 lean_r123
let lean_s1586 := by timed congr lean_s1582 lean_r171
let lean_s1587 := by timed flipCongrArg lean_s120 [Eq]
have lean_s1588 : let720 := by timed Eq.trans lean_r220 lean_r218
have lean_s1589 : (Eq let866 let330) := by timed flipCongrArg lean_s1588 [format]
have lean_s1590 : (Eq let867 let332) := by timed congr lean_s1587 lean_s1589
have lean_s1591 : (Eq let867 let331) := by timed Eq.trans lean_s1590 lean_r107
let lean_s1592 := by timed congr lean_s1582 lean_s1591
let lean_s1593 := by timed flipCongrArg lean_s1269 [Eq]
have lean_s1594 : let743 := by timed Eq.trans lean_r106 lean_r235
have lean_s1595 : (Eq let864 let286) := by timed flipCongrArg lean_s1594 [format]
have lean_s1596 : (Eq let865 let288) := by timed congr lean_s1593 lean_s1595
have lean_s1597 : (Eq let865 let287) := by timed Eq.trans lean_s1596 lean_r90
let lean_s1598 := by timed congr lean_s1582 lean_s1597
let lean_s1599 := by timed flipCongrArg lean_s1263 [Eq]
have lean_s1600 : let336 := by timed Eq.trans lean_r112 lean_r109
have lean_s1601 : (Eq let862 let279) := by timed flipCongrArg lean_s1600 [format]
have lean_s1602 : (Eq let863 let281) := by timed congr lean_s1599 lean_s1601
have lean_s1603 : (Eq let863 let280) := by timed Eq.trans lean_s1602 lean_r87
let lean_s1604 := by timed congr lean_s1598 lean_s1603
let lean_s1605 := by timed congr lean_s1592 lean_s1604
let lean_s1606 := by timed congr lean_s1586 lean_s1605
let lean_s1607 := by timed congr lean_s1585 lean_s1606
have lean_s1608 : (Eq let869 let793) := by timed congr lean_s1584 lean_s1607
have lean_s1609 : (Eq let941 let794) := by timed congr lean_s1581 lean_s1608
have lean_s1610 : (Eq let942 let795) := by timed flipCongrArg lean_s1609 [Not]
have lean_s1611 : (Eq let861 let795) := by timed Eq.trans lean_s1213 lean_s1610
have lean_s1612 : (Eq let791 let795) := by timed Eq.trans lean_s553 lean_s1611
have lean_s1613 : let795 := by timed eqResolve lean_a266 lean_s1612
have lean_s1614 : let504 := by timed notImplies1 lean_s1613
have lean_s1615 : let446 := by andElim lean_s1614, 27
have lean_s1616 : let1038 := by timed impliesElim lean_s1615
have lean_s1617 : let721 := by timed rfl
let lean_s1618 := by timed flipCongrArg lean_s1617 [Eq]
have lean_s1619 : (Eq let542 let721) := by timed congr lean_s1618 lean_r221
have lean_s1620 : (Eq let542 True) := by timed Eq.trans lean_s1619 lean_r219
have lean_s1621 : (Eq let543 True) := by timed Eq.trans lean_r172 lean_s1620
have lean_s1622 : let543 := by timed trueElim lean_s1621
let lean_s1623 := by timed flipCongrArg lean_s1622 [Or]
have lean_s1624 : let952 := by timed rfl
have lean_s1625 : (Eq let1038 let1037) := by timed congr lean_s1623 lean_s1624
have lean_s1626 : let1037 := by timed eqResolve lean_s1616 lean_s1625
have lean_s1627 : (Or let24 let444) := by permutateOr lean_s1626, [1, 0], (- 1)
have lean_s1628 : (Or let445 let443) := by timed @cnfAndPos [let443, let225] 0
have lean_s1629 : (Or let443 let445) := by permutateOr lean_s1628, [1, 0], (- 1)
have lean_s1630 : let1304 :=
  (scope (fun lean_a289 : let134 =>
    have lean_s1630 : let1304 :=
      (scope (fun lean_a290 : let134 =>
        have lean_s1630 : let135 := by timed Eq.symm lean_a290
        have lean_s1631 : let134 := by timed Eq.symm lean_s1630
        let lean_s1632 := by timed flipCongrArg lean_s1631 [Eq]
        have lean_s1633 : let588 := by timed rfl
        have lean_s1634 : (Eq let443 let517) := by timed congr lean_s1632 lean_s1633
        have lean_s1635 : (Eq let518 let594) := by timed flipCongrArg lean_r233 [Not]
        have lean_s1636 : (Eq let518 True) := by timed Eq.trans lean_s1635 lean_r195
        have lean_s1637 : (Eq let519 True) := by timed Eq.trans lean_r159 lean_s1636
        have lean_s1638 : let519 := by timed trueElim lean_s1637
        have lean_s1639 : let1031 := by timed Eq.trans lean_s1634 lean_s1638
        have lean_s1640 : let1028 := by timed falseElim lean_s1639
        show let1028 from lean_s1640
      ))
    have lean_s1631 : let1305 := by liftOrNToImp lean_s1630, 1
    have lean_s1632 : let1028 := by timed modusPonens lean_a289 lean_s1631
    show let1028 from lean_s1632
  ))
have lean_s1631 : let1305 := by liftOrNToImp lean_s1630, 1
have lean_s1632 : let1304 := by timed impliesElim lean_s1631
have lean_s1633 : (Or let1028 let1025) := by permutateOr lean_s1632, [1, 0], (- 1)
have lean_s1634 : (Or let474 let134) := by timed @cnfAndPos [let290, let134] 1
have lean_s1635 : (Or let134 let474) := by permutateOr lean_s1634, [1, 0], (- 1)
have lean_s1636 : let475 := by andElim lean_s1614, 13
have lean_s1637 : let1033 := by timed impliesElim lean_s1636
have lean_s1638 : let715 := by timed rfl
let lean_s1639 := by timed flipCongrArg lean_s1638 [Eq]
have lean_s1640 : (Eq let614 let715) := by timed congr lean_s1639 lean_r215
have lean_s1641 : (Eq let614 True) := by timed Eq.trans lean_s1640 lean_r214
have lean_s1642 : (Eq let615 True) := by timed Eq.trans lean_r203 lean_s1641
have lean_s1643 : let615 := by timed trueElim lean_s1642
let lean_s1644 := by timed flipCongrArg lean_s1643 [Or]
have lean_s1645 : let966 := by timed rfl
have lean_s1646 : (Eq let1033 let1032) := by timed congr lean_s1644 lean_s1645
have lean_s1647 : let1032 := by timed eqResolve lean_s1637 lean_s1646
have lean_s1648 : (Or let42 let473) := by permutateOr lean_s1647, [1, 0], (- 1)
have lean_s1649 : (Or let1034 (Or let1113 (Or let1041 (Or let1262 let1227)))) :=
  (scope (fun lean_a290 : let42 =>
    (scope (fun lean_a291 : let31 =>
      (scope (fun lean_a292 : let29 =>
        (scope (fun lean_a293 : let76 =>
          (scope (fun lean_a294 : let16 =>
            (scope (fun lean_a295 : let37 =>
              have lean_s1649 : let1234 := by timed Eq.symm lean_r262
              have lean_s1650 : let783 := by timed eqResolve lean_a295 lean_s1649
              have lean_s1651 : let1269 := by timed And.intro lean_a293 lean_a291
              have lean_s1652 : let1271 :=
                (scope (fun lean_a292 : let76 =>
                  (scope (fun lean_a293 : let31 =>
                    have lean_s1652 : let1151 := by timed Eq.symm lean_a293
                    have lean_s1653 : (Eq let68 let23) := by timed Eq.symm lean_a292
                    have lean_s1654 : let76 := by timed Eq.symm lean_s1653
                    have lean_s1655 : let69 := by timed Eq.trans lean_s1652 lean_s1654
                    show let69 from lean_s1655
                ))))
              have lean_s1653 : let1270 := by liftOrNToImp lean_s1652, 2
              have lean_s1654 : let69 := by timed modusPonens lean_s1651 lean_s1653
              have lean_s1655 : let1268 :=
                (scope (fun lean_a292 : let69 =>
                  have lean_s1655 : let67 := by timed eqResolve lean_a292 lean_r10
                  have lean_s1656 : let1264 := by timed Eq.symm lean_s1655
                  show let1264 from lean_s1656
                ))
              have lean_s1656 : let1267 := by liftOrNToImp lean_s1655, 1
              have lean_s1657 : let1264 := by timed modusPonens lean_s1654 lean_s1656
              have lean_s1658 : let1303 := by timed And.intro lean_s1650 lean_s1657
              have lean_s1659 : (Or let1230 let1266) :=
                (scope (fun lean_a293 : let783 =>
                  (scope (fun lean_a294 : let1264 =>
                    have lean_s1659 : let67 := by timed Eq.symm lean_a294
                    have lean_s1660 : let1264 := by timed Eq.symm lean_s1659
                    have lean_s1661 : let1233 := by timed Eq.symm lean_a293
                    have lean_s1662 : let783 := by timed Eq.symm lean_s1661
                    have lean_s1663 : let1236 := by timed flipCongrArg lean_s1662 [xx5fcount]
                    have lean_s1664 : let1059 := by timed Eq.trans lean_s1660 lean_s1663
                    show let1059 from lean_s1664
                ))))
              have lean_s1660 : (Implies let1303 let1059) := by liftOrNToImp lean_s1659, 2
              have lean_s1661 : let1059 := by timed modusPonens lean_s1658 lean_s1660
              let lean_s1662 := by timed And.intro lean_a292 lean_a290
              have lean_s1663 : let1228 := by timed And.intro lean_s1650 lean_s1662
              have lean_s1664 : let1231 :=
                (scope (fun lean_a294 : let783 =>
                  (scope (fun lean_a295 : let29 =>
                    (scope (fun lean_a296 : let42 =>
                      have lean_s1664 : let1097 := by timed Eq.symm lean_a296
                      have lean_s1665 : let506 := by timed Eq.symm lean_a295
                      have lean_s1666 : let29 := by timed Eq.symm lean_s1665
                      let lean_s1667 := by timed Eq.trans lean_s1664 lean_s1666
                      have lean_s1668 : let1233 := by timed Eq.symm lean_a294
                      have lean_s1669 : let783 := by timed Eq.symm lean_s1668
                      have lean_s1670 : let1232 := by timed flipCongrArg lean_s1669 [sx5fcount]
                      have lean_s1671 : let1120 := by timed Eq.trans lean_s1667 lean_s1670
                      show let1120 from lean_s1671
                ))))))
              have lean_s1665 : let1229 := by liftOrNToImp lean_s1664, 3
              have lean_s1666 : let1120 := by timed modusPonens lean_s1663 lean_s1665
              let lean_s1667 := by timed And.intro lean_s1661 lean_s1666
              have lean_s1668 : let1154 := by timed And.intro lean_a294 lean_s1667
              show let1154 from lean_s1668
  ))))))))))))
have lean_s1650 : let1302 := by liftOrNToImp lean_s1649, 6
have lean_s1651 : (Eq let557 let557) := by timed rfl
let lean_s1652 := by timed flipCongrArg lean_s1651 [Implies]
have lean_s1653 : (Or let262 (Or let1064 let1125)) :=
  (scope (fun lean_a294 : let16 =>
    (scope (fun lean_a295 : let1059 =>
      (scope (fun lean_a296 : let1120 =>
        have lean_s1653 : let1127 := by timed Eq.symm lean_a296
        have lean_s1654 : let1129 :=
          (scope (fun lean_a296 : let1127 =>
            have lean_s1654 : let740 := by timed trueElim lean_r232
            have lean_s1655 : let1138 := by timed And.intro lean_s1654 lean_a296
            have lean_s1656 : let1139 := by arithMulPos [let14, let22, let62], 4
            have lean_s1657 : let1137 := by timed modusPonens lean_s1655 lean_s1656
            have lean_s1658 : let1076 := by timed Eq.symm lean_a295
            have lean_s1659 : let1077 := by timed And.intro lean_s1654 lean_s1658
            have lean_s1660 : let1078 := by arithMulPos [let13, let4, let62], 4
            have lean_s1661 : let1075 := by timed modusPonens lean_s1659 lean_s1660
            have lean_s1662 : let264 := by timed trueElim lean_r78
            have lean_s1663 : let1073 := by timed And.intro lean_s1662 lean_a294
            have lean_s1664 : let1074 := by arithMulNeg [let15, let10, let203], 3
            have lean_s1665 : let1072 := by timed modusPonens lean_s1663 lean_s1664
            have lean_s1666 : let1158 := by sumBounds [lean_s1657, lean_s1661, lean_s1665]
            let lean_s1667 := by timed congrHAdd lean_r211 lean_r231
            have lean_s1668 : (Eq let1070 let738) := by timed congrHAdd lean_r8 lean_s1667
            have lean_s1669 : (Eq let1070 let140) := by timed Eq.trans lean_s1668 lean_r230
            let lean_s1670 := by timed flipCongrArg lean_s1669 [LE.le]
            let lean_s1671 := by timed congrHAdd lean_r84 lean_r49
            have lean_s1672 : (Eq let1157 let746) := by timed congrHAdd lean_r40 lean_s1671
            have lean_s1673 : (Eq let1157 let745) := by timed Eq.trans lean_s1672 lean_r237
            have lean_s1674 : (Eq let1158 let761) := by timed congr lean_s1670 lean_s1673
            have lean_s1675 : (Eq let1158 False) := by timed Eq.trans lean_s1674 lean_r248
            show False from by timed eqResolve lean_s1666 lean_s1675
          ))
        have lean_s1655 : let1128 := by liftOrNToNeg lean_s1654
        show False from by timed contradiction lean_s1653 lean_s1655
  ))))))
have lean_s1654 : (Not let1154) := by liftOrNToNeg lean_s1653
have lean_s1655 : let1156 := by timed falseIntro lean_s1654
have lean_s1656 : (Eq let1302 let559) := by timed congr lean_s1652 lean_s1655
have lean_s1657 : (Eq let1302 let558) := by timed Eq.trans lean_s1656 lean_r177
have lean_s1658 : let558 := by timed eqResolve lean_s1650 lean_s1657
have lean_s1659 : (Or let1034 (Or let1113 (Or let1041 (Or let1262 let1223)))) := by timed flipNotAnd lean_s1658 [let42, let31, let29, let76, let16, let37]
have lean_s1660 : (Or let262 (Or let1222 (Or let1034 (Or let1041 (Or let1113 let1262))))) := by permutateOr lean_s1659, [4, 5, 0, 2, 1, 3], (- 1)
have lean_s1661 : let451 := by andElim lean_s1614, 25
have lean_s1662 : let1153 := by timed impliesElim lean_s1661
have lean_s1663 : let756 := by timed rfl
let lean_s1664 := by timed flipCongrArg lean_s1663 [Eq]
have lean_s1665 : (Eq let713 let756) := by timed congr lean_s1664 lean_r245
have lean_s1666 : (Eq let713 True) := by timed Eq.trans lean_s1665 lean_r244
have lean_s1667 : (Eq let714 True) := by timed Eq.trans lean_r213 lean_s1666
have lean_s1668 : let714 := by timed trueElim lean_s1667
let lean_s1669 := by timed flipCongrArg lean_s1668 [Or]
have lean_s1670 : let954 := by timed rfl
have lean_s1671 : (Eq let1153 let1152) := by timed congr lean_s1669 lean_s1670
have lean_s1672 : let1152 := by timed eqResolve lean_s1662 lean_s1671
have lean_s1673 : (Or let31 let449) := by permutateOr lean_s1672, [1, 0], (- 1)
have lean_s1674 : (Or let1034 (Or let1024 (Or let1041 (Or let1039 let1227)))) :=
  (scope (fun lean_a297 : let42 =>
    (scope (fun lean_a298 : let257 =>
      (scope (fun lean_a299 : let29 =>
        (scope (fun lean_a300 : let24 =>
          (scope (fun lean_a301 : let16 =>
            (scope (fun lean_a302 : let37 =>
              have lean_s1674 : let1234 := by timed Eq.symm lean_r262
              have lean_s1675 : let783 := by timed eqResolve lean_a302 lean_s1674
              let lean_s1676 := by timed And.intro lean_a300 lean_a298
              have lean_s1677 : let1235 := by timed And.intro lean_s1675 lean_s1676
              have lean_s1678 : (Or let1230 let1103) :=
                (scope (fun lean_a298 : let783 =>
                  (scope (fun lean_a299 : let24 =>
                    (scope (fun lean_a300 : let257 =>
                      have lean_s1678 : let1106 := by timed Eq.symm lean_a300
                      have lean_s1679 : let598 := by timed Eq.symm lean_a299
                      have lean_s1680 : let24 := by timed Eq.symm lean_s1679
                      let lean_s1681 := by timed Eq.trans lean_s1678 lean_s1680
                      have lean_s1682 : let1233 := by timed Eq.symm lean_a298
                      have lean_s1683 : let783 := by timed Eq.symm lean_s1682
                      have lean_s1684 : let1236 := by timed flipCongrArg lean_s1683 [xx5fcount]
                      have lean_s1685 : let1059 := by timed Eq.trans lean_s1681 lean_s1684
                      show let1059 from lean_s1685
                ))))))
              have lean_s1679 : (Implies let1235 let1059) := by liftOrNToImp lean_s1678, 3
              have lean_s1680 : let1059 := by timed modusPonens lean_s1677 lean_s1679
              let lean_s1681 := by timed And.intro lean_a299 lean_a297
              have lean_s1682 : let1228 := by timed And.intro lean_s1675 lean_s1681
              have lean_s1683 : let1231 :=
                (scope (fun lean_a298 : let783 =>
                  (scope (fun lean_a299 : let29 =>
                    (scope (fun lean_a300 : let42 =>
                      have lean_s1683 : let1097 := by timed Eq.symm lean_a300
                      have lean_s1684 : let506 := by timed Eq.symm lean_a299
                      have lean_s1685 : let29 := by timed Eq.symm lean_s1684
                      let lean_s1686 := by timed Eq.trans lean_s1683 lean_s1685
                      have lean_s1687 : let1233 := by timed Eq.symm lean_a298
                      have lean_s1688 : let783 := by timed Eq.symm lean_s1687
                      have lean_s1689 : let1232 := by timed flipCongrArg lean_s1688 [sx5fcount]
                      have lean_s1690 : let1120 := by timed Eq.trans lean_s1686 lean_s1689
                      show let1120 from lean_s1690
                ))))))
              have lean_s1684 : let1229 := by liftOrNToImp lean_s1683, 3
              have lean_s1685 : let1120 := by timed modusPonens lean_s1682 lean_s1684
              let lean_s1686 := by timed And.intro lean_s1680 lean_s1685
              have lean_s1687 : let1154 := by timed And.intro lean_a301 lean_s1686
              show let1154 from lean_s1687
  ))))))))))))
have lean_s1675 : let1226 := by liftOrNToImp lean_s1674, 6
have lean_s1676 : (Eq let780 let780) := by timed rfl
let lean_s1677 := by timed flipCongrArg lean_s1676 [Implies]
have lean_s1678 : let1156 := by timed falseIntro lean_s1654
have lean_s1679 : (Eq let1226 let782) := by timed congr lean_s1677 lean_s1678
have lean_s1680 : (Eq let1226 let781) := by timed Eq.trans lean_s1679 lean_r261
have lean_s1681 : let781 := by timed eqResolve lean_s1675 lean_s1680
have lean_s1682 : (Or let1034 (Or let1024 let1225)) := by timed flipNotAnd lean_s1681 [let42, let257, let29, let24, let16, let37]
have lean_s1683 : (Or let262 (Or let1222 let1042)) := by permutateOr lean_s1682, [4, 5, 0, 2, 1, 3], (- 1)
have lean_s1684 : let16 := by andElim lean_s1614, 0
let lean_s1685 := by R2 lean_s1683, lean_s1684, let16, [(- 1), 0]
let lean_s1686 := by R2 lean_s1685, lean_s39, let37, [(- 1), (- 1)]
have lean_s1687 : (Or let1213 (Or let231 let725)) := by timed cnfAndNeg [let230, let724]
have lean_s1688 : let1212 :=
  (scope (fun lean_a298 : let230 =>
    (scope (fun lean_a299 : let724 =>
      have lean_s1688 : let1213 := by timed And.intro lean_a298 lean_a299
      have lean_s1689 : let1212 :=
        (scope (fun lean_a300 : let230 =>
          (scope (fun lean_a301 : let724 =>
            have lean_s1689 : (binrel% GT.gt fmt1 let1) := by trichotomy lean_a300, lean_a301
            have lean_s1690 : let1191 := by intTightLb lean_s1689
            show let1191 from lean_s1690
        ))))
      have lean_s1690 : let1214 := by liftOrNToImp lean_s1689, 2
      have lean_s1691 : let1191 := by timed modusPonens lean_s1688 lean_s1690
      show let1191 from lean_s1691
  ))))
have lean_s1689 : let1214 := by liftOrNToImp lean_s1688, 2
have lean_s1690 : (Or (Not let1213) let1191) := by timed impliesElim lean_s1689
have lean_s1691 : let1212 := by R1 lean_s1687, lean_s1690, let1213, [(- 1), (- 1)]
have lean_s1692 : let970 := by timed rfl
have lean_s1693 : (Eq let231 let231) := by timed rfl
let lean_s1694 := by timed congr lean_s1692 lean_s1693
have lean_s1695 : let572 := by timed rfl
let lean_s1696 := by timed flipCongrArg lean_s1695 [Eq]
have lean_s1697 : (Eq let730 let572) := by timed congr lean_s1696 lean_r223
have lean_s1698 : (Eq let730 True) := by timed Eq.trans lean_s1697 lean_r183
have lean_s1699 : (Eq let726 True) := by timed Eq.trans lean_r226 lean_s1698
have lean_s1700 : let726 := by timed trueElim lean_s1699
let lean_s1701 := by timed congr lean_s1692 lean_s1700
have lean_s1702 : (Eq let1191 let1191) := by timed rfl
let lean_s1703 := by timed congr lean_s1701 lean_s1702
have lean_s1704 : (Eq let1212 let1211) := by timed congr lean_s1694 lean_s1703
have lean_s1705 : let1211 := by timed eqResolve lean_s1691 lean_s1704
have lean_s1706 : (Or let1034 (Or let1024 (Or let262 (Or let724 let1154)))) :=
  (scope (fun lean_a300 : let42 =>
    (scope (fun lean_a301 : let257 =>
      (scope (fun lean_a302 : let16 =>
        (scope (fun lean_a303 : let255 =>
          have lean_s1706 : let1202 := by timed Eq.symm lean_r136
          have lean_s1707 : let397 := by timed eqResolve lean_a303 lean_s1706
          have lean_s1708 : let1210 := by timed And.intro lean_s1707 lean_a301
          have lean_s1709 : (Or let1198 let1102) :=
            (scope (fun lean_a301 : let397 =>
              (scope (fun lean_a302 : let257 =>
                have lean_s1709 : let1106 := by timed Eq.symm lean_a302
                have lean_s1710 : let1201 := by timed Eq.symm lean_a301
                have lean_s1711 : let397 := by timed Eq.symm lean_s1710
                have lean_s1712 : let1206 := by timed flipCongrArg lean_s1711 [xx5fcount]
                have lean_s1713 : let1059 := by timed Eq.trans lean_s1709 lean_s1712
                show let1059 from lean_s1713
            ))))
          have lean_s1710 : (Implies let1210 let1059) := by liftOrNToImp lean_s1709, 2
          have lean_s1711 : let1059 := by timed modusPonens lean_s1708 lean_s1710
          have lean_s1712 : let1196 := by timed And.intro lean_s1707 lean_a300
          have lean_s1713 : let1199 :=
            (scope (fun lean_a302 : let397 =>
              (scope (fun lean_a303 : let42 =>
                have lean_s1713 : let1097 := by timed Eq.symm lean_a303
                have lean_s1714 : let1201 := by timed Eq.symm lean_a302
                have lean_s1715 : let397 := by timed Eq.symm lean_s1714
                have lean_s1716 : let1200 := by timed flipCongrArg lean_s1715 [sx5fcount]
                have lean_s1717 : let1120 := by timed Eq.trans lean_s1713 lean_s1716
                show let1120 from lean_s1717
            ))))
          have lean_s1714 : let1197 := by liftOrNToImp lean_s1713, 2
          have lean_s1715 : let1120 := by timed modusPonens lean_s1712 lean_s1714
          let lean_s1716 := by timed And.intro lean_s1711 lean_s1715
          have lean_s1717 : let1154 := by timed And.intro lean_a302 lean_s1716
          show let1154 from lean_s1717
  ))))))))
have lean_s1707 : let1209 := by liftOrNToImp lean_s1706, 4
have lean_s1708 : (Eq let258 let258) := by timed rfl
let lean_s1709 := by timed flipCongrArg lean_s1708 [Implies]
have lean_s1710 : let1156 := by timed falseIntro lean_s1654
have lean_s1711 : (Eq let1209 let260) := by timed congr lean_s1709 lean_s1710
have lean_s1712 : (Eq let1209 let259) := by timed Eq.trans lean_s1711 lean_r75
have lean_s1713 : let259 := by timed eqResolve lean_s1707 lean_s1712
have lean_s1714 : (Or let1034 (Or let1024 let1193)) := by timed flipNotAnd lean_s1713 [let42, let257, let16, let255]
have lean_s1715 : (Or let262 (Or let724 (Or let1034 let1024))) := by permutateOr lean_s1714, [2, 3, 0, 1], (- 1)
let lean_s1716 := by R2 lean_s1715, lean_s1684, let16, [(- 1), 0]
let lean_s1717 := by R2 lean_s1716, lean_s1648, let42, [(- 1), (- 1)]
let lean_s1718 := by R1 lean_s1717, lean_s1635, let473, [(- 1), (- 1)]
have lean_s1719 : let1026 :=
  (scope (fun lean_a302 : let134 =>
    have lean_s1719 : let1026 :=
      (scope (fun lean_a302 : let134 =>
        have lean_s1719 : let135 := by timed Eq.symm lean_a302
        have lean_s1720 : let134 := by timed Eq.symm lean_s1719
        let lean_s1721 := by timed flipCongrArg lean_s1720 [Eq]
        have lean_s1722 : let581 := by timed rfl
        have lean_s1723 : (Eq let448 let603) := by timed congr lean_s1721 lean_s1722
        have lean_s1724 : (Eq let604 let594) := by timed flipCongrArg lean_r212 [Not]
        have lean_s1725 : (Eq let604 True) := by timed Eq.trans lean_s1724 lean_r195
        have lean_s1726 : (Eq let605 True) := by timed Eq.trans lean_r200 lean_s1725
        have lean_s1727 : let605 := by timed trueElim lean_s1726
        have lean_s1728 : (Eq let448 False) := by timed Eq.trans lean_s1723 lean_s1727
        have lean_s1729 : let1023 := by timed falseElim lean_s1728
        show let1023 from lean_s1729
      ))
    have lean_s1720 : let1027 := by liftOrNToImp lean_s1719, 1
    have lean_s1721 : let1023 := by timed modusPonens lean_a302 lean_s1720
    show let1023 from lean_s1721
  ))
have lean_s1720 : let1027 := by liftOrNToImp lean_s1719, 1
have lean_s1721 : let1026 := by timed impliesElim lean_s1720
let lean_s1722 := by R1 lean_s1718, lean_s1721, let134, [(- 1), (- 1)]
have lean_s1723 : let452 := by andElim lean_s1614, 24
have lean_s1724 : (Or let450 let257) := by timed impliesElim lean_s1723
have lean_s1725 : (Or let257 let450) := by permutateOr lean_s1724, [1, 0], (- 1)
let lean_s1726 := by R2 lean_s1722, lean_s1725, let257, [(- 1), (- 1)]
have lean_s1727 : (Or let450 let448) := by timed @cnfAndPos [let290, let448] 1
have lean_s1728 : (Or let448 let450) := by permutateOr lean_s1727, [1, 0], (- 1)
have lean_s1729 : (Or let724 let1022) := by R2 lean_s1726, lean_s1728, let448, [(- 1), (- 1)]
have lean_s1730 : (Or let724 let450) := by factor lean_s1729, (- 1)
let lean_s1731 := by R2 lean_s1730, lean_s1673, let449, [(- 1), (- 1)]
have lean_s1732 : (Or let1161 (Or let1113 (Or let262 (Or let724 let1162)))) :=
  (scope (fun lean_a302 : let33 =>
    (scope (fun lean_a303 : let31 =>
      (scope (fun lean_a304 : let16 =>
        (scope (fun lean_a305 : let255 =>
          have lean_s1732 : let1202 := by timed Eq.symm lean_r136
          have lean_s1733 : let397 := by timed eqResolve lean_a305 lean_s1732
          have lean_s1734 : let1203 := by timed And.intro lean_s1733 lean_a303
          have lean_s1735 : let1205 :=
            (scope (fun lean_a302 : let397 =>
              (scope (fun lean_a303 : let31 =>
                have lean_s1735 : let1151 := by timed Eq.symm lean_a303
                have lean_s1736 : let1201 := by timed Eq.symm lean_a302
                have lean_s1737 : let397 := by timed Eq.symm lean_s1736
                have lean_s1738 : let1206 := by timed flipCongrArg lean_s1737 [xx5fcount]
                have lean_s1739 : let1121 := by timed Eq.trans lean_s1735 lean_s1738
                show let1121 from lean_s1739
            ))))
          have lean_s1736 : let1204 := by liftOrNToImp lean_s1735, 2
          have lean_s1737 : let1121 := by timed modusPonens lean_s1734 lean_s1736
          have lean_s1738 : let1208 := by timed And.intro lean_s1733 lean_a302
          have lean_s1739 : (Or let1198 let1172) :=
            (scope (fun lean_a302 : let397 =>
              (scope (fun lean_a303 : let33 =>
                have lean_s1739 : let1175 := by timed Eq.symm lean_a303
                have lean_s1740 : let1201 := by timed Eq.symm lean_a302
                have lean_s1741 : let397 := by timed Eq.symm lean_s1740
                have lean_s1742 : let1200 := by timed flipCongrArg lean_s1741 [sx5fcount]
                have lean_s1743 : let1058 := by timed Eq.trans lean_s1739 lean_s1742
                show let1058 from lean_s1743
            ))))
          have lean_s1740 : (Implies let1208 let1058) := by liftOrNToImp lean_s1739, 2
          have lean_s1741 : let1058 := by timed modusPonens lean_s1738 lean_s1740
          let lean_s1742 := by timed And.intro lean_s1737 lean_s1741
          have lean_s1743 : let1162 := by timed And.intro lean_a304 lean_s1742
          show let1162 from lean_s1743
  ))))))))
have lean_s1733 : let1207 := by liftOrNToImp lean_s1732, 4
have lean_s1734 : (Eq let767 let767) := by timed rfl
let lean_s1735 := by timed flipCongrArg lean_s1734 [Implies]
have lean_s1736 : let1164 := by timed falseIntro lean_s5
have lean_s1737 : (Eq let1207 let769) := by timed congr lean_s1735 lean_s1736
have lean_s1738 : (Eq let1207 let768) := by timed Eq.trans lean_s1737 lean_r252
have lean_s1739 : let768 := by timed eqResolve lean_s1733 lean_s1738
have lean_s1740 : (Or let1161 let1194) := by timed flipNotAnd lean_s1739 [let33, let31, let16, let255]
have lean_s1741 : (Or let262 (Or let724 (Or let1161 let1113))) := by permutateOr lean_s1740, [2, 3, 0, 1], (- 1)
let lean_s1742 := by R2 lean_s1741, lean_s1684, let16, [(- 1), 0]
have lean_s1743 : let476 := by andElim lean_s1614, 12
have lean_s1744 : (Or let474 let33) := by timed impliesElim lean_s1743
have lean_s1745 : (Or let33 let474) := by permutateOr lean_s1744, [1, 0], (- 1)
let lean_s1746 := by R2 lean_s1742, lean_s1745, let33, [(- 1), (- 1)]
let lean_s1747 := by R2 lean_s1746, lean_s1648, let473, [(- 1), (- 1)]
have lean_s1748 : (Or let1034 (Or let1113 (Or let262 (Or let724 let1122)))) :=
  (scope (fun lean_a302 : let42 =>
    (scope (fun lean_a303 : let31 =>
      (scope (fun lean_a304 : let16 =>
        (scope (fun lean_a305 : let255 =>
          have lean_s1748 : let1202 := by timed Eq.symm lean_r136
          have lean_s1749 : let397 := by timed eqResolve lean_a305 lean_s1748
          have lean_s1750 : let1203 := by timed And.intro lean_s1749 lean_a303
          have lean_s1751 : let1205 :=
            (scope (fun lean_a302 : let397 =>
              (scope (fun lean_a303 : let31 =>
                have lean_s1751 : let1151 := by timed Eq.symm lean_a303
                have lean_s1752 : let1201 := by timed Eq.symm lean_a302
                have lean_s1753 : let397 := by timed Eq.symm lean_s1752
                have lean_s1754 : let1206 := by timed flipCongrArg lean_s1753 [xx5fcount]
                have lean_s1755 : let1121 := by timed Eq.trans lean_s1751 lean_s1754
                show let1121 from lean_s1755
            ))))
          have lean_s1752 : let1204 := by liftOrNToImp lean_s1751, 2
          have lean_s1753 : let1121 := by timed modusPonens lean_s1750 lean_s1752
          have lean_s1754 : let1196 := by timed And.intro lean_s1749 lean_a302
          have lean_s1755 : let1199 :=
            (scope (fun lean_a302 : let397 =>
              (scope (fun lean_a303 : let42 =>
                have lean_s1755 : let1097 := by timed Eq.symm lean_a303
                have lean_s1756 : let1201 := by timed Eq.symm lean_a302
                have lean_s1757 : let397 := by timed Eq.symm lean_s1756
                have lean_s1758 : let1200 := by timed flipCongrArg lean_s1757 [sx5fcount]
                have lean_s1759 : let1120 := by timed Eq.trans lean_s1755 lean_s1758
                show let1120 from lean_s1759
            ))))
          have lean_s1756 : let1197 := by liftOrNToImp lean_s1755, 2
          have lean_s1757 : let1120 := by timed modusPonens lean_s1754 lean_s1756
          let lean_s1758 := by timed And.intro lean_s1753 lean_s1757
          have lean_s1759 : let1122 := by timed And.intro lean_a304 lean_s1758
          show let1122 from lean_s1759
  ))))))))
have lean_s1749 : let1195 := by liftOrNToImp lean_s1748, 4
have lean_s1750 : (Eq let405 let405) := by timed rfl
let lean_s1751 := by timed flipCongrArg lean_s1750 [Implies]
have lean_s1752 : (Or let262 (Or let1126 let1125)) :=
  (scope (fun lean_a302 : let16 =>
    (scope (fun lean_a303 : let1121 =>
      (scope (fun lean_a304 : let1120 =>
        have lean_s1752 : let1127 := by timed Eq.symm lean_a304
        have lean_s1753 : let1129 :=
          (scope (fun lean_a302 : let1127 =>
            have lean_s1753 : let740 := by timed trueElim lean_r232
            have lean_s1754 : let1138 := by timed And.intro lean_s1753 lean_a302
            have lean_s1755 : let1139 := by arithMulPos [let14, let22, let62], 4
            have lean_s1756 : let1137 := by timed modusPonens lean_s1754 lean_s1755
            have lean_s1757 : let1134 := by timed Eq.symm lean_a303
            have lean_s1758 : let1135 := by timed And.intro lean_s1753 lean_s1757
            have lean_s1759 : let1136 := by arithMulPos [let13, let22, let62], 4
            have lean_s1760 : let1133 := by timed modusPonens lean_s1758 lean_s1759
            have lean_s1761 : let264 := by timed trueElim lean_r78
            have lean_s1762 : let1073 := by timed And.intro lean_s1761 lean_a302
            have lean_s1763 : let1074 := by arithMulNeg [let15, let10, let203], 3
            have lean_s1764 : let1072 := by timed modusPonens lean_s1762 lean_s1763
            have lean_s1765 : let1132 := by sumBounds [lean_s1756, lean_s1760, lean_s1764]
            let lean_s1766 := by timed congrHAdd lean_r211 lean_r231
            have lean_s1767 : (Eq let1070 let738) := by timed congrHAdd lean_r8 lean_s1766
            have lean_s1768 : (Eq let1070 let140) := by timed Eq.trans lean_s1767 lean_r230
            let lean_s1769 := by timed flipCongrArg lean_s1768 [LE.le]
            let lean_s1770 := by timed congrHAdd lean_r40 lean_r49
            have lean_s1771 : (Eq let1131 let142) := by timed congrHAdd lean_r40 lean_s1770
            have lean_s1772 : (Eq let1131 let139) := by timed Eq.trans lean_s1771 lean_r27
            have lean_s1773 : (Eq let1132 let755) := by timed congr lean_s1769 lean_s1772
            have lean_s1774 : (Eq let1132 False) := by timed Eq.trans lean_s1773 lean_r243
            show False from by timed eqResolve lean_s1765 lean_s1774
          ))
        have lean_s1754 : let1128 := by liftOrNToNeg lean_s1753
        show False from by timed contradiction lean_s1752 lean_s1754
  ))))))
have lean_s1753 : (Not let1122) := by liftOrNToNeg lean_s1752
have lean_s1754 : let1124 := by timed falseIntro lean_s1753
have lean_s1755 : (Eq let1195 let407) := by timed congr lean_s1751 lean_s1754
have lean_s1756 : (Eq let1195 let406) := by timed Eq.trans lean_s1755 lean_r142
have lean_s1757 : let406 := by timed eqResolve lean_s1749 lean_s1756
have lean_s1758 : (Or let1034 let1194) := by timed flipNotAnd lean_s1757 [let42, let31, let16, let255]
have lean_s1759 : (Or let262 (Or let724 (Or let1034 let1113))) := by permutateOr lean_s1758, [2, 3, 0, 1], (- 1)
let lean_s1760 := by R1 lean_s1747, lean_s1759, let42, [(- 1), (- 1)]
have lean_s1761 : (Or let724 (Or let1113 let1192)) := by R2 lean_s1760, lean_s1684, let16, [(- 1), 0]
have lean_s1762 : let1192 := by factor lean_s1761, (- 1)
have lean_s1763 : (Or let724 let724) := by R1 lean_s1731, lean_s1762, let31, [(- 1), (- 1)]
have lean_s1764 : let724 := by factor lean_s1763, 1
let lean_s1765 := by R1 lean_s1705, lean_s1764, let255, [(- 1), 0]
have lean_s1766 : let230 := by andElim lean_s1614, 2
have lean_s1767 : let1191 := by R2 lean_s1765, lean_s1766, let230, [(- 1), 0]
let lean_s1768 := by R2 lean_s1686, lean_s1767, let1191, [(- 1), 0]
have lean_s1769 : let250 := by andElim lean_s1614, 1
let lean_s1770 := by R1 lean_s1768, lean_s1769, let249, [(- 1), 0]
have lean_s1771 : (Or let1034 (Or let1024 (Or let1041 (Or let1109 (Or let1039 (Or let1176 (Or let262 (Or let415 let1180)))))))) :=
  (scope (fun lean_a302 : let42 =>
    (scope (fun lean_a303 : let257 =>
      (scope (fun lean_a304 : let29 =>
        (scope (fun lean_a305 : let59 =>
          (scope (fun lean_a306 : let24 =>
            (scope (fun lean_a307 : let322 =>
              (scope (fun lean_a308 : let16 =>
                (scope (fun lean_a309 : let9 =>
                  have lean_s1771 : let1098 := by timed Eq.symm lean_r140
                  have lean_s1772 : let401 := by timed eqResolve lean_a309 lean_s1771
                  let lean_s1773 := by timed And.intro lean_a306 lean_a303
                  have lean_s1774 : let1189 := by timed And.intro lean_a307 lean_s1773
                  have lean_s1775 : (Or let1176 (Or let1039 (Or let1024 let351))) :=
                    (scope (fun lean_a304 : let322 =>
                      (scope (fun lean_a305 : let24 =>
                        (scope (fun lean_a306 : let257 =>
                          have lean_s1775 : let1106 := by timed Eq.symm lean_a306
                          have lean_s1776 : let598 := by timed Eq.symm lean_a305
                          have lean_s1777 : let24 := by timed Eq.symm lean_s1776
                          let lean_s1778 := by timed Eq.trans lean_s1775 lean_s1777
                          have lean_s1779 : let1190 := by timed Eq.symm lean_a304
                          have lean_s1780 : let322 := by timed Eq.symm lean_s1779
                          have lean_s1781 : let351 := by timed Eq.trans lean_s1778 lean_s1780
                          show let351 from lean_s1781
                    ))))))
                  have lean_s1776 : (Implies let1189 let351) := by liftOrNToImp lean_s1775, 3
                  have lean_s1777 : let351 := by timed modusPonens lean_s1774 lean_s1776
                  have lean_s1778 : (Or (Not let351) let1187) :=
                    (scope (fun lean_a304 : let351 =>
                      have lean_s1778 : let350 := by timed eqResolve lean_a304 lean_r117
                      have lean_s1779 : let1187 := by timed Eq.symm lean_s1778
                      show let1187 from lean_s1779
                    ))
                  have lean_s1779 : (Implies let351 let1187) := by liftOrNToImp lean_s1778, 1
                  have lean_s1780 : let1187 := by timed modusPonens lean_s1777 lean_s1779
                  have lean_s1781 : let1188 := by timed And.intro lean_s1772 lean_s1780
                  have lean_s1782 : (Or let1086 (Or (Not let1187) let1179)) :=
                    (scope (fun lean_a305 : let401 =>
                      (scope (fun lean_a306 : let1187 =>
                        have lean_s1782 : let350 := by timed Eq.symm lean_a306
                        have lean_s1783 : let1187 := by timed Eq.symm lean_s1782
                        have lean_s1784 : let1089 := by timed Eq.symm lean_a305
                        have lean_s1785 : let401 := by timed Eq.symm lean_s1784
                        have lean_s1786 : let1105 := by timed flipCongrArg lean_s1785 [xx5fcount]
                        have lean_s1787 : let1179 := by timed Eq.trans lean_s1783 lean_s1786
                        show let1179 from lean_s1787
                    ))))
                  have lean_s1783 : (Implies let1188 let1179) := by liftOrNToImp lean_s1782, 2
                  have lean_s1784 : let1179 := by timed modusPonens lean_s1781 lean_s1783
                  let lean_s1785 := by timed And.intro lean_a304 lean_a302
                  let lean_s1786 := by timed And.intro lean_a305 lean_s1785
                  have lean_s1787 : let1140 := by timed And.intro lean_s1772 lean_s1786
                  have lean_s1788 : let1144 :=
                    (scope (fun lean_a306 : let401 =>
                      (scope (fun lean_a307 : let59 =>
                        (scope (fun lean_a308 : let29 =>
                          (scope (fun lean_a309 : let42 =>
                            have lean_s1788 : let1097 := by timed Eq.symm lean_a309
                            have lean_s1789 : let506 := by timed Eq.symm lean_a308
                            have lean_s1790 : let29 := by timed Eq.symm lean_s1789
                            let lean_s1791 := by timed Eq.trans lean_s1788 lean_s1790
                            have lean_s1792 : let60 := by timed Eq.symm lean_a307
                            have lean_s1793 : let59 := by timed Eq.symm lean_s1792
                            let lean_s1794 := by timed Eq.trans lean_s1791 lean_s1793
                            have lean_s1795 : let1089 := by timed Eq.symm lean_a306
                            have lean_s1796 : let401 := by timed Eq.symm lean_s1795
                            have lean_s1797 : let1088 := by timed flipCongrArg lean_s1796 [sx5fcount]
                            have lean_s1798 : let1120 := by timed Eq.trans lean_s1794 lean_s1797
                            show let1120 from lean_s1798
                    ))))))))
                  have lean_s1789 : let1141 := by liftOrNToImp lean_s1788, 4
                  have lean_s1790 : let1120 := by timed modusPonens lean_s1787 lean_s1789
                  let lean_s1791 := by timed And.intro lean_s1784 lean_s1790
                  have lean_s1792 : let1180 := by timed And.intro lean_a308 lean_s1791
                  show let1180 from lean_s1792
  ))))))))))))))))
have lean_s1772 : let1181 := by liftOrNToImp lean_s1771, 8
have lean_s1773 : (Eq let763 let763) := by timed rfl
let lean_s1774 := by timed flipCongrArg lean_s1773 [Implies]
have lean_s1775 : (Or let262 (Or (Not let1179) let1125)) :=
  (scope (fun lean_a306 : let16 =>
    (scope (fun lean_a307 : let1179 =>
      (scope (fun lean_a308 : let1120 =>
        have lean_s1775 : let1127 := by timed Eq.symm lean_a308
        have lean_s1776 : let1129 :=
          (scope (fun lean_a307 : let1127 =>
            have lean_s1776 : let740 := by timed trueElim lean_r232
            have lean_s1777 : let1138 := by timed And.intro lean_s1776 lean_a307
            have lean_s1778 : let1139 := by arithMulPos [let14, let22, let62], 4
            have lean_s1779 : let1137 := by timed modusPonens lean_s1777 lean_s1778
            have lean_s1780 : let1185 := by timed Eq.symm lean_a307
            have lean_s1781 : let1186 := by timed And.intro lean_s1776 lean_s1780
            have lean_s1782 : (Implies let1186 let1184) := by arithMulPos [let13, let1, let62], 4
            have lean_s1783 : let1184 := by timed modusPonens lean_s1781 lean_s1782
            have lean_s1784 : let264 := by timed trueElim lean_r78
            have lean_s1785 : let1073 := by timed And.intro lean_s1784 lean_a306
            have lean_s1786 : let1074 := by arithMulNeg [let15, let10, let203], 3
            have lean_s1787 : let1072 := by timed modusPonens lean_s1785 lean_s1786
            have lean_s1788 : let1183 := by sumBounds [lean_s1779, lean_s1783, lean_s1787]
            let lean_s1789 := by timed congrHAdd lean_r211 lean_r231
            have lean_s1790 : (Eq let1070 let738) := by timed congrHAdd lean_r8 lean_s1789
            have lean_s1791 : (Eq let1070 let140) := by timed Eq.trans lean_s1790 lean_r230
            let lean_s1792 := by timed flipCongrArg lean_s1791 [LE.le]
            let lean_s1793 := by timed congrHAdd lean_r43 lean_r49
            have lean_s1794 : (Eq let1182 let300) := by timed congrHAdd lean_r40 lean_s1793
            have lean_s1795 : (Eq let1182 let203) := by timed Eq.trans lean_s1794 lean_r98
            have lean_s1796 : (Eq let1183 let734) := by timed congr lean_s1792 lean_s1795
            have lean_s1797 : (Eq let1183 False) := by timed Eq.trans lean_s1796 lean_r228
            show False from by timed eqResolve lean_s1788 lean_s1797
          ))
        have lean_s1777 : let1128 := by liftOrNToNeg lean_s1776
        show False from by timed contradiction lean_s1775 lean_s1777
  ))))))
have lean_s1776 : (Not let1180) := by liftOrNToNeg lean_s1775
have lean_s1777 : (Eq let1180 False) := by timed falseIntro lean_s1776
have lean_s1778 : (Eq let1181 let765) := by timed congr lean_s1774 lean_s1777
have lean_s1779 : (Eq let1181 let764) := by timed Eq.trans lean_s1778 lean_r250
have lean_s1780 : let764 := by timed eqResolve lean_s1772 lean_s1779
have lean_s1781 : (Or let1034 (Or let1024 let1178)) := by timed flipNotAnd lean_s1780 [let42, let257, let29, let59, let24, let322, let16, let9]
have lean_s1782 : (Or let262 (Or let415 (Or let1034 (Or let1041 (Or let1109 (Or let1024 let1177)))))) := by permutateOr lean_s1781, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s1783 := by R2 lean_s1782, lean_s1684, let16, [(- 1), 0]
have lean_s1784 : let442 := by andElim lean_s1614, 28
have lean_s1785 : (Or let440 let322) := by timed impliesElim lean_s1784
have lean_s1786 : (Or let322 let440) := by permutateOr lean_s1785, [1, 0], (- 1)
let lean_s1787 := by R2 lean_s1783, lean_s1786, let322, [(- 1), (- 1)]
have lean_s1788 : let441 := by andElim lean_s1614, 29
have lean_s1789 : let1049 := by timed impliesElim lean_s1788
have lean_s1790 : let571 := by timed rfl
let lean_s1791 := by timed flipCongrArg lean_s1790 [Eq]
have lean_s1792 : (Eq let727 let571) := by timed congr lean_s1791 lean_r222
have lean_s1793 : (Eq let727 True) := by timed Eq.trans lean_s1792 lean_r182
have lean_s1794 : (Eq let723 True) := by timed Eq.trans lean_r224 lean_s1793
have lean_s1795 : let723 := by timed trueElim lean_s1794
let lean_s1796 := by timed flipCongrArg lean_s1795 [Or]
have lean_s1797 : let950 := by timed rfl
have lean_s1798 : (Eq let1049 let1048) := by timed congr lean_s1796 lean_s1797
have lean_s1799 : let1048 := by timed eqResolve lean_s1789 lean_s1798
have lean_s1800 : (Or let20 let439) := by permutateOr lean_s1799, [1, 0], (- 1)
let lean_s1801 := by R2 lean_s1787, lean_s1800, let439, [(- 1), (- 1)]
have lean_s1802 : (Or let1161 (Or let1113 (Or let1041 let1168))) :=
  (scope (fun lean_a307 : let33 =>
    (scope (fun lean_a308 : let31 =>
      (scope (fun lean_a309 : let29 =>
        (scope (fun lean_a310 : let59 =>
          (scope (fun lean_a311 : let24 =>
            (scope (fun lean_a312 : let20 =>
              (scope (fun lean_a313 : let16 =>
                (scope (fun lean_a314 : let9 =>
                  have lean_s1802 : let1098 := by timed Eq.symm lean_r140
                  have lean_s1803 : let401 := by timed eqResolve lean_a314 lean_s1802
                  let lean_s1804 := by timed And.intro lean_a311 lean_a308
                  let lean_s1805 := by timed And.intro lean_a312 lean_s1804
                  have lean_s1806 : let1146 := by timed And.intro lean_s1803 lean_s1805
                  have lean_s1807 : let1150 :=
                    (scope (fun lean_a307 : let401 =>
                      (scope (fun lean_a308 : let20 =>
                        (scope (fun lean_a309 : let24 =>
                          (scope (fun lean_a310 : let31 =>
                            have lean_s1807 : let1151 := by timed Eq.symm lean_a310
                            have lean_s1808 : let598 := by timed Eq.symm lean_a309
                            have lean_s1809 : let24 := by timed Eq.symm lean_s1808
                            let lean_s1810 := by timed Eq.trans lean_s1807 lean_s1809
                            have lean_s1811 : let639 := by timed Eq.symm lean_a308
                            have lean_s1812 : let20 := by timed Eq.symm lean_s1811
                            let lean_s1813 := by timed Eq.trans lean_s1810 lean_s1812
                            have lean_s1814 : let1089 := by timed Eq.symm lean_a307
                            have lean_s1815 : let401 := by timed Eq.symm lean_s1814
                            have lean_s1816 : let1105 := by timed flipCongrArg lean_s1815 [xx5fcount]
                            have lean_s1817 : let1121 := by timed Eq.trans lean_s1813 lean_s1816
                            show let1121 from lean_s1817
                    ))))))))
                  have lean_s1808 : let1147 := by liftOrNToImp lean_s1807, 4
                  have lean_s1809 : let1121 := by timed modusPonens lean_s1806 lean_s1808
                  let lean_s1810 := by timed And.intro lean_a309 lean_a307
                  let lean_s1811 := by timed And.intro lean_a310 lean_s1810
                  have lean_s1812 : let1170 := by timed And.intro lean_s1803 lean_s1811
                  have lean_s1813 : let1174 :=
                    (scope (fun lean_a307 : let401 =>
                      (scope (fun lean_a308 : let59 =>
                        (scope (fun lean_a309 : let29 =>
                          (scope (fun lean_a310 : let33 =>
                            have lean_s1813 : let1175 := by timed Eq.symm lean_a310
                            have lean_s1814 : let506 := by timed Eq.symm lean_a309
                            have lean_s1815 : let29 := by timed Eq.symm lean_s1814
                            let lean_s1816 := by timed Eq.trans lean_s1813 lean_s1815
                            have lean_s1817 : let60 := by timed Eq.symm lean_a308
                            have lean_s1818 : let59 := by timed Eq.symm lean_s1817
                            let lean_s1819 := by timed Eq.trans lean_s1816 lean_s1818
                            have lean_s1820 : let1089 := by timed Eq.symm lean_a307
                            have lean_s1821 : let401 := by timed Eq.symm lean_s1820
                            have lean_s1822 : let1088 := by timed flipCongrArg lean_s1821 [sx5fcount]
                            have lean_s1823 : let1058 := by timed Eq.trans lean_s1819 lean_s1822
                            show let1058 from lean_s1823
                    ))))))))
                  have lean_s1814 : let1171 := by liftOrNToImp lean_s1813, 4
                  have lean_s1815 : let1058 := by timed modusPonens lean_s1812 lean_s1814
                  let lean_s1816 := by timed And.intro lean_s1809 lean_s1815
                  have lean_s1817 : let1162 := by timed And.intro lean_a313 lean_s1816
                  show let1162 from lean_s1817
  ))))))))))))))))
have lean_s1803 : let1163 := by liftOrNToImp lean_s1802, 8
have lean_s1804 : (Eq let391 let391) := by timed rfl
let lean_s1805 := by timed flipCongrArg lean_s1804 [Implies]
have lean_s1806 : let1164 := by timed falseIntro lean_s5
have lean_s1807 : (Eq let1163 let393) := by timed congr lean_s1805 lean_s1806
have lean_s1808 : (Eq let1163 let392) := by timed Eq.trans lean_s1807 lean_r133
have lean_s1809 : let392 := by timed eqResolve lean_s1803 lean_s1808
have lean_s1810 : (Or let1161 let1119) := by timed flipNotAnd lean_s1809 [let33, let31, let29, let59, let24, let20, let16, let9]
have lean_s1811 : (Or let262 (Or let415 (Or let1161 let1116))) := by permutateOr lean_s1810, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s1812 := by R2 lean_s1811, lean_s1684, let16, [(- 1), 0]
let lean_s1813 := by R2 lean_s1812, lean_s1673, let31, [(- 1), (- 1)]
let lean_s1814 := by R1 lean_s1813, lean_s1728, let449, [(- 1), (- 1)]
let lean_s1815 := by R1 lean_s1814, lean_s1721, let448, [(- 1), (- 1)]
let lean_s1816 := by R2 lean_s1815, lean_s1745, let33, [(- 1), (- 1)]
have lean_s1817 : (Or let415 (Or let1041 (Or let1109 (Or let1039 (Or let1050 (Or let474 let474)))))) := by R2 lean_s1816, lean_s1635, let134, [(- 1), (- 1)]
have lean_s1818 : (Or let415 (Or let1041 (Or let1109 (Or let1039 (Or let1050 let474))))) := by factor lean_s1817, (- 1)
let lean_s1819 := by R2 lean_s1818, lean_s1648, let473, [(- 1), (- 1)]
have lean_s1820 : (Or let1034 (Or let1024 (Or let1041 (Or let1109 (Or let1039 let1160))))) :=
  (scope (fun lean_a307 : let42 =>
    (scope (fun lean_a308 : let257 =>
      (scope (fun lean_a309 : let29 =>
        (scope (fun lean_a310 : let59 =>
          (scope (fun lean_a311 : let24 =>
            (scope (fun lean_a312 : let20 =>
              (scope (fun lean_a313 : let16 =>
                (scope (fun lean_a314 : let9 =>
                  have lean_s1820 : let1098 := by timed Eq.symm lean_r140
                  have lean_s1821 : let401 := by timed eqResolve lean_a314 lean_s1820
                  let lean_s1822 := by timed And.intro lean_a311 lean_a308
                  let lean_s1823 := by timed And.intro lean_a312 lean_s1822
                  have lean_s1824 : let1100 := by timed And.intro lean_s1821 lean_s1823
                  have lean_s1825 : let1104 :=
                    (scope (fun lean_a307 : let401 =>
                      (scope (fun lean_a308 : let20 =>
                        (scope (fun lean_a309 : let24 =>
                          (scope (fun lean_a310 : let257 =>
                            have lean_s1825 : let1106 := by timed Eq.symm lean_a310
                            have lean_s1826 : let598 := by timed Eq.symm lean_a309
                            have lean_s1827 : let24 := by timed Eq.symm lean_s1826
                            let lean_s1828 := by timed Eq.trans lean_s1825 lean_s1827
                            have lean_s1829 : let639 := by timed Eq.symm lean_a308
                            have lean_s1830 : let20 := by timed Eq.symm lean_s1829
                            let lean_s1831 := by timed Eq.trans lean_s1828 lean_s1830
                            have lean_s1832 : let1089 := by timed Eq.symm lean_a307
                            have lean_s1833 : let401 := by timed Eq.symm lean_s1832
                            have lean_s1834 : let1105 := by timed flipCongrArg lean_s1833 [xx5fcount]
                            have lean_s1835 : let1059 := by timed Eq.trans lean_s1831 lean_s1834
                            show let1059 from lean_s1835
                    ))))))))
                  have lean_s1826 : let1101 := by liftOrNToImp lean_s1825, 4
                  have lean_s1827 : let1059 := by timed modusPonens lean_s1824 lean_s1826
                  let lean_s1828 := by timed And.intro lean_a309 lean_a307
                  let lean_s1829 := by timed And.intro lean_a310 lean_s1828
                  have lean_s1830 : let1140 := by timed And.intro lean_s1821 lean_s1829
                  have lean_s1831 : let1144 :=
                    (scope (fun lean_a307 : let401 =>
                      (scope (fun lean_a308 : let59 =>
                        (scope (fun lean_a309 : let29 =>
                          (scope (fun lean_a310 : let42 =>
                            have lean_s1831 : let1097 := by timed Eq.symm lean_a310
                            have lean_s1832 : let506 := by timed Eq.symm lean_a309
                            have lean_s1833 : let29 := by timed Eq.symm lean_s1832
                            let lean_s1834 := by timed Eq.trans lean_s1831 lean_s1833
                            have lean_s1835 : let60 := by timed Eq.symm lean_a308
                            have lean_s1836 : let59 := by timed Eq.symm lean_s1835
                            let lean_s1837 := by timed Eq.trans lean_s1834 lean_s1836
                            have lean_s1838 : let1089 := by timed Eq.symm lean_a307
                            have lean_s1839 : let401 := by timed Eq.symm lean_s1838
                            have lean_s1840 : let1088 := by timed flipCongrArg lean_s1839 [sx5fcount]
                            have lean_s1841 : let1120 := by timed Eq.trans lean_s1837 lean_s1840
                            show let1120 from lean_s1841
                    ))))))))
                  have lean_s1832 : let1141 := by liftOrNToImp lean_s1831, 4
                  have lean_s1833 : let1120 := by timed modusPonens lean_s1830 lean_s1832
                  let lean_s1834 := by timed And.intro lean_s1827 lean_s1833
                  have lean_s1835 : let1154 := by timed And.intro lean_a313 lean_s1834
                  show let1154 from lean_s1835
  ))))))))))))))))
have lean_s1821 : let1155 := by liftOrNToImp lean_s1820, 8
have lean_s1822 : (Eq let757 let757) := by timed rfl
let lean_s1823 := by timed flipCongrArg lean_s1822 [Implies]
have lean_s1824 : let1156 := by timed falseIntro lean_s1654
have lean_s1825 : (Eq let1155 let759) := by timed congr lean_s1823 lean_s1824
have lean_s1826 : (Eq let1155 let758) := by timed Eq.trans lean_s1825 lean_r246
have lean_s1827 : let758 := by timed eqResolve lean_s1821 lean_s1826
have lean_s1828 : (Or let1034 (Or let1024 let1118)) := by timed flipNotAnd lean_s1827 [let42, let257, let29, let59, let24, let20, let16, let9]
have lean_s1829 : (Or let262 (Or let415 (Or let1034 (Or let1041 (Or let1109 let1052))))) := by permutateOr lean_s1828, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s1830 := by R2 lean_s1829, lean_s1684, let16, [(- 1), 0]
let lean_s1831 := by R2 lean_s1830, lean_s1725, let257, [(- 1), (- 1)]
let lean_s1832 := by R2 lean_s1831, lean_s1673, let449, [(- 1), (- 1)]
have lean_s1833 : (Or let1034 (Or let1113 (Or let1041 (Or let1109 (Or let1039 (Or let1050 (Or let262 (Or let415 let1122)))))))) :=
  (scope (fun lean_a307 : let42 =>
    (scope (fun lean_a308 : let31 =>
      (scope (fun lean_a309 : let29 =>
        (scope (fun lean_a310 : let59 =>
          (scope (fun lean_a311 : let24 =>
            (scope (fun lean_a312 : let20 =>
              (scope (fun lean_a313 : let16 =>
                (scope (fun lean_a314 : let9 =>
                  have lean_s1833 : let1098 := by timed Eq.symm lean_r140
                  have lean_s1834 : let401 := by timed eqResolve lean_a314 lean_s1833
                  let lean_s1835 := by timed And.intro lean_a311 lean_a308
                  let lean_s1836 := by timed And.intro lean_a312 lean_s1835
                  have lean_s1837 : let1146 := by timed And.intro lean_s1834 lean_s1836
                  have lean_s1838 : let1150 :=
                    (scope (fun lean_a307 : let401 =>
                      (scope (fun lean_a308 : let20 =>
                        (scope (fun lean_a309 : let24 =>
                          (scope (fun lean_a310 : let31 =>
                            have lean_s1838 : let1151 := by timed Eq.symm lean_a310
                            have lean_s1839 : let598 := by timed Eq.symm lean_a309
                            have lean_s1840 : let24 := by timed Eq.symm lean_s1839
                            let lean_s1841 := by timed Eq.trans lean_s1838 lean_s1840
                            have lean_s1842 : let639 := by timed Eq.symm lean_a308
                            have lean_s1843 : let20 := by timed Eq.symm lean_s1842
                            let lean_s1844 := by timed Eq.trans lean_s1841 lean_s1843
                            have lean_s1845 : let1089 := by timed Eq.symm lean_a307
                            have lean_s1846 : let401 := by timed Eq.symm lean_s1845
                            have lean_s1847 : let1105 := by timed flipCongrArg lean_s1846 [xx5fcount]
                            have lean_s1848 : let1121 := by timed Eq.trans lean_s1844 lean_s1847
                            show let1121 from lean_s1848
                    ))))))))
                  have lean_s1839 : let1147 := by liftOrNToImp lean_s1838, 4
                  have lean_s1840 : let1121 := by timed modusPonens lean_s1837 lean_s1839
                  let lean_s1841 := by timed And.intro lean_a309 lean_a307
                  let lean_s1842 := by timed And.intro lean_a310 lean_s1841
                  have lean_s1843 : let1140 := by timed And.intro lean_s1834 lean_s1842
                  have lean_s1844 : let1144 :=
                    (scope (fun lean_a307 : let401 =>
                      (scope (fun lean_a308 : let59 =>
                        (scope (fun lean_a309 : let29 =>
                          (scope (fun lean_a310 : let42 =>
                            have lean_s1844 : let1097 := by timed Eq.symm lean_a310
                            have lean_s1845 : let506 := by timed Eq.symm lean_a309
                            have lean_s1846 : let29 := by timed Eq.symm lean_s1845
                            let lean_s1847 := by timed Eq.trans lean_s1844 lean_s1846
                            have lean_s1848 : let60 := by timed Eq.symm lean_a308
                            have lean_s1849 : let59 := by timed Eq.symm lean_s1848
                            let lean_s1850 := by timed Eq.trans lean_s1847 lean_s1849
                            have lean_s1851 : let1089 := by timed Eq.symm lean_a307
                            have lean_s1852 : let401 := by timed Eq.symm lean_s1851
                            have lean_s1853 : let1088 := by timed flipCongrArg lean_s1852 [sx5fcount]
                            have lean_s1854 : let1120 := by timed Eq.trans lean_s1850 lean_s1853
                            show let1120 from lean_s1854
                    ))))))))
                  have lean_s1845 : let1141 := by liftOrNToImp lean_s1844, 4
                  have lean_s1846 : let1120 := by timed modusPonens lean_s1843 lean_s1845
                  let lean_s1847 := by timed And.intro lean_s1840 lean_s1846
                  have lean_s1848 : let1122 := by timed And.intro lean_a313 lean_s1847
                  show let1122 from lean_s1848
  ))))))))))))))))
have lean_s1834 : let1123 := by liftOrNToImp lean_s1833, 8
have lean_s1835 : (Eq let752 let752) := by timed rfl
let lean_s1836 := by timed flipCongrArg lean_s1835 [Implies]
have lean_s1837 : let1124 := by timed falseIntro lean_s1753
have lean_s1838 : (Eq let1123 let754) := by timed congr lean_s1836 lean_s1837
have lean_s1839 : (Eq let1123 let753) := by timed Eq.trans lean_s1838 lean_r242
have lean_s1840 : let753 := by timed eqResolve lean_s1834 lean_s1839
have lean_s1841 : (Or let1034 let1119) := by timed flipNotAnd lean_s1840 [let42, let31, let29, let59, let24, let20, let16, let9]
have lean_s1842 : (Or let262 (Or let415 (Or let1034 let1116))) := by permutateOr lean_s1841, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s1843 := by R1 lean_s1832, lean_s1842, let31, [(- 1), (- 1)]
have lean_s1844 : (Or let415 (Or let1034 (Or let1041 (Or let1109 (Or let1039 (Or let1050 let1112)))))) := by R2 lean_s1843, lean_s1684, let16, [(- 1), 0]
have lean_s1845 : let1112 := by factor lean_s1844, (- 1)
have lean_s1846 : (Or let415 (Or let1041 (Or let1109 (Or let1039 (Or let1050 let1111))))) := by R1 lean_s1819, lean_s1845, let42, [(- 1), (- 1)]
have lean_s1847 : let1111 := by factor lean_s1846, (- 1)
have lean_s1848 : (Or let415 (Or let1034 (Or let1041 (Or let1109 (Or let1024 (Or let1039 (Or let415 (Or let1041 (Or let1109 let1039))))))))) := by R1 lean_s1801, lean_s1847, let20, [(- 1), (- 1)]
have lean_s1849 : (Or let415 (Or let1034 (Or let1041 (Or let1109 let1040)))) := by factor lean_s1848, (- 1)
have lean_s1850 : let467 := by andElim lean_s1614, 17
have lean_s1851 : let1108 := by timed impliesElim lean_s1850
have lean_s1852 : let414 := by timed rfl
let lean_s1853 := by timed flipCongrArg lean_s1852 [Eq]
have lean_s1854 : (Eq let126 let414) := by timed congr lean_s1853 lean_r239
have lean_s1855 : (Eq let126 True) := by timed Eq.trans lean_s1854 lean_r149
have lean_s1856 : (Eq let127 True) := by timed Eq.trans lean_r22 lean_s1855
have lean_s1857 : let127 := by timed trueElim lean_s1856
let lean_s1858 := by timed flipCongrArg lean_s1857 [Or]
have lean_s1859 : let962 := by timed rfl
have lean_s1860 : (Eq let1108 let1107) := by timed congr lean_s1858 lean_s1859
have lean_s1861 : let1107 := by timed eqResolve lean_s1851 lean_s1860
have lean_s1862 : (Or let59 let123) := by permutateOr lean_s1861, [1, 0], (- 1)
let lean_s1863 := by R2 lean_s1849, lean_s1862, let59, [(- 1), (- 1)]
have lean_s1864 : (Or let1034 (Or let1024 (Or let1041 (Or let1053 (Or let1039 (Or let1050 let1082)))))) :=
  (scope (fun lean_a307 : let42 =>
    (scope (fun lean_a308 : let257 =>
      (scope (fun lean_a309 : let29 =>
        (scope (fun lean_a310 : let27 =>
          (scope (fun lean_a311 : let24 =>
            (scope (fun lean_a312 : let20 =>
              (scope (fun lean_a313 : let16 =>
                (scope (fun lean_a314 : let9 =>
                  have lean_s1864 : let1098 := by timed Eq.symm lean_r140
                  have lean_s1865 : let401 := by timed eqResolve lean_a314 lean_s1864
                  let lean_s1866 := by timed And.intro lean_a311 lean_a308
                  let lean_s1867 := by timed And.intro lean_a312 lean_s1866
                  have lean_s1868 : let1100 := by timed And.intro lean_s1865 lean_s1867
                  have lean_s1869 : let1104 :=
                    (scope (fun lean_a307 : let401 =>
                      (scope (fun lean_a308 : let20 =>
                        (scope (fun lean_a309 : let24 =>
                          (scope (fun lean_a310 : let257 =>
                            have lean_s1869 : let1106 := by timed Eq.symm lean_a310
                            have lean_s1870 : let598 := by timed Eq.symm lean_a309
                            have lean_s1871 : let24 := by timed Eq.symm lean_s1870
                            let lean_s1872 := by timed Eq.trans lean_s1869 lean_s1871
                            have lean_s1873 : let639 := by timed Eq.symm lean_a308
                            have lean_s1874 : let20 := by timed Eq.symm lean_s1873
                            let lean_s1875 := by timed Eq.trans lean_s1872 lean_s1874
                            have lean_s1876 : let1089 := by timed Eq.symm lean_a307
                            have lean_s1877 : let401 := by timed Eq.symm lean_s1876
                            have lean_s1878 : let1105 := by timed flipCongrArg lean_s1877 [xx5fcount]
                            have lean_s1879 : let1059 := by timed Eq.trans lean_s1875 lean_s1878
                            show let1059 from lean_s1879
                    ))))))))
                  have lean_s1870 : let1101 := by liftOrNToImp lean_s1869, 4
                  have lean_s1871 : let1059 := by timed modusPonens lean_s1868 lean_s1870
                  let lean_s1872 := by timed And.intro lean_a309 lean_a307
                  have lean_s1873 : let1093 := by timed And.intro lean_a310 lean_s1872
                  have lean_s1874 : let1095 :=
                    (scope (fun lean_a307 : let27 =>
                      (scope (fun lean_a308 : let29 =>
                        (scope (fun lean_a309 : let42 =>
                          have lean_s1874 : let1097 := by timed Eq.symm lean_a309
                          have lean_s1875 : let506 := by timed Eq.symm lean_a308
                          have lean_s1876 : let29 := by timed Eq.symm lean_s1875
                          let lean_s1877 := by timed Eq.trans lean_s1874 lean_s1876
                          have lean_s1878 : let1096 := by timed Eq.symm lean_a307
                          have lean_s1879 : let27 := by timed Eq.symm lean_s1878
                          have lean_s1880 : let742 := by timed Eq.trans lean_s1877 lean_s1879
                          show let742 from lean_s1880
                    ))))))
                  have lean_s1875 : let1094 := by liftOrNToImp lean_s1874, 3
                  have lean_s1876 : let742 := by timed modusPonens lean_s1873 lean_s1875
                  have lean_s1877 : let1091 :=
                    (scope (fun lean_a307 : let742 =>
                      have lean_s1877 : let741 := by timed eqResolve lean_a307 lean_r234
                      have lean_s1878 : let1083 := by timed Eq.symm lean_s1877
                      show let1083 from lean_s1878
                    ))
                  have lean_s1878 : let1090 := by liftOrNToImp lean_s1877, 1
                  have lean_s1879 : let1083 := by timed modusPonens lean_s1876 lean_s1878
                  have lean_s1880 : let1084 := by timed And.intro lean_s1865 lean_s1879
                  have lean_s1881 : let1087 :=
                    (scope (fun lean_a308 : let401 =>
                      (scope (fun lean_a309 : let1083 =>
                        have lean_s1881 : let741 := by timed Eq.symm lean_a309
                        have lean_s1882 : let1083 := by timed Eq.symm lean_s1881
                        have lean_s1883 : let1089 := by timed Eq.symm lean_a308
                        have lean_s1884 : let401 := by timed Eq.symm lean_s1883
                        have lean_s1885 : let1088 := by timed flipCongrArg lean_s1884 [sx5fcount]
                        have lean_s1886 : let1058 := by timed Eq.trans lean_s1882 lean_s1885
                        show let1058 from lean_s1886
                    ))))
                  have lean_s1882 : let1085 := by liftOrNToImp lean_s1881, 2
                  have lean_s1883 : let1058 := by timed modusPonens lean_s1880 lean_s1882
                  let lean_s1884 := by timed And.intro lean_s1871 lean_s1883
                  have lean_s1885 : let1060 := by timed And.intro lean_a313 lean_s1884
                  show let1060 from lean_s1885
  ))))))))))))))))
have lean_s1865 : let1061 := by liftOrNToImp lean_s1864, 8
have lean_s1866 : (Eq let731 let731) := by timed rfl
let lean_s1867 := by timed flipCongrArg lean_s1866 [Implies]
have lean_s1868 : (Or let262 (Or let1064 let1063)) :=
  (scope (fun lean_a309 : let16 =>
    (scope (fun lean_a310 : let1059 =>
      (scope (fun lean_a311 : let1058 =>
        have lean_s1868 : let1065 := by timed Eq.symm lean_a311
        have lean_s1869 : let1067 :=
          (scope (fun lean_a309 : let1065 =>
            have lean_s1869 : let740 := by timed trueElim lean_r232
            have lean_s1870 : let1080 := by timed And.intro lean_s1869 lean_a309
            have lean_s1871 : let1081 := by arithMulPos [let14, let4, let62], 4
            have lean_s1872 : let1079 := by timed modusPonens lean_s1870 lean_s1871
            have lean_s1873 : let1076 := by timed Eq.symm lean_a310
            have lean_s1874 : let1077 := by timed And.intro lean_s1869 lean_s1873
            have lean_s1875 : let1078 := by arithMulPos [let13, let4, let62], 4
            have lean_s1876 : let1075 := by timed modusPonens lean_s1874 lean_s1875
            have lean_s1877 : let264 := by timed trueElim lean_r78
            have lean_s1878 : let1073 := by timed And.intro lean_s1877 lean_a309
            have lean_s1879 : let1074 := by arithMulNeg [let15, let10, let203], 3
            have lean_s1880 : let1072 := by timed modusPonens lean_s1878 lean_s1879
            have lean_s1881 : let1071 := by sumBounds [lean_s1872, lean_s1876, lean_s1880]
            let lean_s1882 := by timed congrHAdd lean_r211 lean_r231
            have lean_s1883 : (Eq let1070 let738) := by timed congrHAdd lean_r8 lean_s1882
            have lean_s1884 : (Eq let1070 let140) := by timed Eq.trans lean_s1883 lean_r230
            let lean_s1885 := by timed flipCongrArg lean_s1884 [LE.le]
            let lean_s1886 := by timed congrHAdd lean_r84 lean_r49
            have lean_s1887 : (Eq let1069 let736) := by timed congrHAdd lean_r84 lean_s1886
            have lean_s1888 : (Eq let1069 let203) := by timed Eq.trans lean_s1887 lean_r229
            have lean_s1889 : (Eq let1071 let734) := by timed congr lean_s1885 lean_s1888
            have lean_s1890 : (Eq let1071 False) := by timed Eq.trans lean_s1889 lean_r228
            show False from by timed eqResolve lean_s1881 lean_s1890
          ))
        have lean_s1870 : let1066 := by liftOrNToNeg lean_s1869
        show False from by timed contradiction lean_s1868 lean_s1870
  ))))))
have lean_s1869 : (Not let1060) := by liftOrNToNeg lean_s1868
have lean_s1870 : let1062 := by timed falseIntro lean_s1869
have lean_s1871 : (Eq let1061 let733) := by timed congr lean_s1867 lean_s1870
have lean_s1872 : (Eq let1061 let732) := by timed Eq.trans lean_s1871 lean_r227
have lean_s1873 : let732 := by timed eqResolve lean_s1865 lean_s1872
have lean_s1874 : (Or let1034 (Or let1024 let1057)) := by timed flipNotAnd lean_s1873 [let42, let257, let29, let27, let24, let20, let16, let9]
have lean_s1875 : (Or let262 (Or let415 (Or let1034 (Or let1041 (Or let1053 let1052))))) := by permutateOr lean_s1874, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s1876 := by R2 lean_s1875, lean_s1684, let16, [(- 1), 0]
let lean_s1877 := by R2 lean_s1876, lean_s1800, let20, [(- 1), (- 1)]
have lean_s1878 : (Or let440 let295) := by timed @cnfAndPos [let122, let295] 1
have lean_s1879 : (Or let295 let440) := by permutateOr lean_s1878, [1, 0], (- 1)
let lean_s1880 := by R1 lean_s1877, lean_s1879, let439, [(- 1), (- 1)]
have lean_s1881 : let1046 :=
  (scope (fun lean_a309 : let120 =>
    have lean_s1881 : let1046 :=
      (scope (fun lean_a310 : let120 =>
        have lean_s1881 : let340 := by timed Eq.symm lean_a310
        have lean_s1882 : let120 := by timed Eq.symm lean_s1881
        let lean_s1883 := by timed flipCongrArg lean_s1882 [Eq]
        have lean_s1884 : let581 := by timed rfl
        have lean_s1885 : (Eq let295 let603) := by timed congr lean_s1883 lean_s1884
        have lean_s1886 : (Eq let604 let594) := by timed flipCongrArg lean_r212 [Not]
        have lean_s1887 : (Eq let604 True) := by timed Eq.trans lean_s1886 lean_r195
        have lean_s1888 : (Eq let605 True) := by timed Eq.trans lean_r200 lean_s1887
        have lean_s1889 : let605 := by timed trueElim lean_s1888
        have lean_s1890 : (Eq let295 False) := by timed Eq.trans lean_s1885 lean_s1889
        have lean_s1891 : let1045 := by timed falseElim lean_s1890
        show let1045 from lean_s1891
      ))
    have lean_s1882 : let1047 := by liftOrNToImp lean_s1881, 1
    have lean_s1883 : let1045 := by timed modusPonens lean_a309 lean_s1882
    show let1045 from lean_s1883
  ))
have lean_s1882 : let1047 := by liftOrNToImp lean_s1881, 1
have lean_s1883 : let1046 := by timed impliesElim lean_s1882
let lean_s1884 := by R1 lean_s1880, lean_s1883, let295, [(- 1), (- 1)]
have lean_s1885 : let468 := by andElim lean_s1614, 16
have lean_s1886 : (Or let124 let27) := by timed impliesElim lean_s1885
have lean_s1887 : (Or let27 let124) := by permutateOr lean_s1886, [1, 0], (- 1)
let lean_s1888 := by R2 lean_s1884, lean_s1887, let27, [(- 1), (- 1)]
have lean_s1889 : (Or let124 let120) := by timed @cnfAndPos [let122, let120] 1
have lean_s1890 : (Or let120 let124) := by permutateOr lean_s1889, [1, 0], (- 1)
have lean_s1891 : (Or let415 (Or let1034 (Or let1041 (Or let1024 (Or let1039 let1044))))) := by R2 lean_s1888, lean_s1890, let120, [(- 1), (- 1)]
have lean_s1892 : (Or let415 (Or let1034 (Or let1041 (Or let1024 (Or let1039 let124))))) := by factor lean_s1891, (- 1)
have lean_s1893 : (Or let124 let1043) := by permutateOr lean_s1892, [5, 0, 1, 2, 3, 4], (- 1)
have lean_s1894 : (Or let415 (Or let1034 (Or let1041 (Or let1024 (Or let1039 let1043))))) := by R1 lean_s1863, lean_s1893, let123, [(- 1), (- 1)]
have lean_s1895 : let1043 := by factor lean_s1894, (- 1)
have lean_s1896 : (Or let1034 (Or let1041 (Or let1024 (Or let1039 let1042)))) := by R1 lean_s1770, lean_s1895, let9, [(- 1), (- 1)]
have lean_s1897 : let1042 := by factor lean_s1896, (- 1)
let lean_s1898 := by R2 lean_s1897, lean_s1627, let24, [(- 1), (- 1)]
have lean_s1899 : let471 := by andElim lean_s1614, 15
have lean_s1900 : let1036 := by timed impliesElim lean_s1899
have lean_s1901 : let760 := by timed rfl
let lean_s1902 := by timed flipCongrArg lean_s1901 [Eq]
have lean_s1903 : (Eq let744 let760) := by timed congr lean_s1902 lean_r217
have lean_s1904 : (Eq let744 True) := by timed Eq.trans lean_s1903 lean_r247
have lean_s1905 : (Eq let718 True) := by timed Eq.trans lean_r236 lean_s1904
have lean_s1906 : let718 := by timed trueElim lean_s1905
let lean_s1907 := by timed flipCongrArg lean_s1906 [Or]
have lean_s1908 : let964 := by timed rfl
have lean_s1909 : (Eq let1036 let1035) := by timed congr lean_s1907 lean_s1908
have lean_s1910 : let1035 := by timed eqResolve lean_s1900 lean_s1909
have lean_s1911 : (Or let29 let469) := by permutateOr lean_s1910, [1, 0], (- 1)
let lean_s1912 := by R2 lean_s1898, lean_s1911, let29, [(- 1), (- 1)]
let lean_s1913 := by R1 lean_s1912, lean_s1629, let444, [(- 1), (- 1)]
have lean_s1914 : (Or let470 let443) := by timed @cnfAndPos [let443, let319] 0
have lean_s1915 : (Or let443 let470) := by permutateOr lean_s1914, [1, 0], (- 1)
have lean_s1916 : (Or let1034 (Or let1024 (Or let443 let443))) := by R1 lean_s1913, lean_s1915, let469, [(- 1), (- 1)]
have lean_s1917 : (Or let1034 (Or let1024 let443)) := by factor lean_s1916, (- 1)
let lean_s1918 := by R2 lean_s1917, lean_s1648, let42, [(- 1), (- 1)]
let lean_s1919 := by R1 lean_s1918, lean_s1635, let473, [(- 1), (- 1)]
have lean_s1920 : let1029 :=
  (scope (fun lean_a310 : let448 =>
    have lean_s1920 : let1029 :=
      (scope (fun lean_a311 : let448 =>
        have lean_s1920 : let774 := by timed Eq.symm lean_a311
        have lean_s1921 : let448 := by timed Eq.symm lean_s1920
        let lean_s1922 := by timed flipCongrArg lean_s1921 [Eq]
        have lean_s1923 : let588 := by timed rfl
        have lean_s1924 : (Eq let443 let175) := by timed congr lean_s1922 lean_s1923
        have lean_s1925 : (Eq let621 let594) := by timed flipCongrArg lean_r38 [Not]
        have lean_s1926 : (Eq let621 True) := by timed Eq.trans lean_s1925 lean_r195
        have lean_s1927 : (Eq let176 True) := by timed Eq.trans lean_r207 lean_s1926
        have lean_s1928 : let176 := by timed trueElim lean_s1927
        have lean_s1929 : let1031 := by timed Eq.trans lean_s1924 lean_s1928
        have lean_s1930 : let1028 := by timed falseElim lean_s1929
        show let1028 from lean_s1930
      ))
    have lean_s1921 : let1030 := by liftOrNToImp lean_s1920, 1
    have lean_s1922 : let1028 := by timed modusPonens lean_a310 lean_s1921
    show let1028 from lean_s1922
  ))
have lean_s1921 : let1030 := by liftOrNToImp lean_s1920, 1
have lean_s1922 : let1029 := by timed impliesElim lean_s1921
have lean_s1923 : (Or let1028 let1023) := by permutateOr lean_s1922, [1, 0], (- 1)
let lean_s1924 := by R1 lean_s1919, lean_s1923, let443, [(- 1), (- 1)]
have lean_s1925 : (Or let1024 (Or let1023 let1023)) := by R1 lean_s1924, lean_s1721, let134, [(- 1), (- 1)]
have lean_s1926 : (Or let1024 let1023) := by factor lean_s1925, (- 1)
let lean_s1927 := by R2 lean_s1926, lean_s1728, let448, [(- 1), (- 1)]
have lean_s1928 : let1022 := by R2 lean_s1927, lean_s1725, let257, [(- 1), (- 1)]
have lean_s1929 : let450 := by factor lean_s1928, 1
have lean_s1930 : let31 := by R1 lean_s1673, lean_s1929, let449, [(- 1), 0]
let lean_s1931 := by R2 lean_s1660, lean_s1930, let31, [(- 1), 0]
let lean_s1932 := by R2 lean_s1931, lean_s1684, let16, [(- 1), 0]
have lean_s1933 : let447 := by andElim lean_s1614, 26
have lean_s1934 : (Or let445 let76) := by timed impliesElim lean_s1933
have lean_s1935 : (Or let76 let445) := by permutateOr lean_s1934, [1, 0], (- 1)
let lean_s1936 := by R2 lean_s1932, lean_s1935, let76, [(- 1), (- 1)]
let lean_s1937 := by R2 lean_s1936, lean_s1627, let444, [(- 1), (- 1)]
have lean_s1938 : (Or let1034 (Or let1113 (Or let1041 (Or let1039 (Or let262 (Or let1222 let1122)))))) :=
  (scope (fun lean_a311 : let42 =>
    (scope (fun lean_a312 : let31 =>
      (scope (fun lean_a313 : let29 =>
        (scope (fun lean_a314 : let24 =>
          (scope (fun lean_a315 : let16 =>
            (scope (fun lean_a316 : let37 =>
              have lean_s1938 : let1234 := by timed Eq.symm lean_r262
              have lean_s1939 : let783 := by timed eqResolve lean_a316 lean_s1938
              let lean_s1940 := by timed And.intro lean_a314 lean_a312
              have lean_s1941 : let1295 := by timed And.intro lean_s1939 lean_s1940
              have lean_s1942 : let1297 :=
                (scope (fun lean_a311 : let783 =>
                  (scope (fun lean_a312 : let24 =>
                    (scope (fun lean_a313 : let31 =>
                      have lean_s1942 : let1151 := by timed Eq.symm lean_a313
                      have lean_s1943 : let598 := by timed Eq.symm lean_a312
                      have lean_s1944 : let24 := by timed Eq.symm lean_s1943
                      let lean_s1945 := by timed Eq.trans lean_s1942 lean_s1944
                      have lean_s1946 : let1233 := by timed Eq.symm lean_a311
                      have lean_s1947 : let783 := by timed Eq.symm lean_s1946
                      have lean_s1948 : let1236 := by timed flipCongrArg lean_s1947 [xx5fcount]
                      have lean_s1949 : let1121 := by timed Eq.trans lean_s1945 lean_s1948
                      show let1121 from lean_s1949
                ))))))
              have lean_s1943 : let1296 := by liftOrNToImp lean_s1942, 3
              have lean_s1944 : let1121 := by timed modusPonens lean_s1941 lean_s1943
              let lean_s1945 := by timed And.intro lean_a313 lean_a311
              have lean_s1946 : let1228 := by timed And.intro lean_s1939 lean_s1945
              have lean_s1947 : let1231 :=
                (scope (fun lean_a311 : let783 =>
                  (scope (fun lean_a312 : let29 =>
                    (scope (fun lean_a313 : let42 =>
                      have lean_s1947 : let1097 := by timed Eq.symm lean_a313
                      have lean_s1948 : let506 := by timed Eq.symm lean_a312
                      have lean_s1949 : let29 := by timed Eq.symm lean_s1948
                      let lean_s1950 := by timed Eq.trans lean_s1947 lean_s1949
                      have lean_s1951 : let1233 := by timed Eq.symm lean_a311
                      have lean_s1952 : let783 := by timed Eq.symm lean_s1951
                      have lean_s1953 : let1232 := by timed flipCongrArg lean_s1952 [sx5fcount]
                      have lean_s1954 : let1120 := by timed Eq.trans lean_s1950 lean_s1953
                      show let1120 from lean_s1954
                ))))))
              have lean_s1948 : let1229 := by liftOrNToImp lean_s1947, 3
              have lean_s1949 : let1120 := by timed modusPonens lean_s1946 lean_s1948
              let lean_s1950 := by timed And.intro lean_s1944 lean_s1949
              have lean_s1951 : let1122 := by timed And.intro lean_a315 lean_s1950
              show let1122 from lean_s1951
  ))))))))))))
have lean_s1939 : let1301 := by liftOrNToImp lean_s1938, 6
have lean_s1940 : (Eq let43 let43) := by timed rfl
let lean_s1941 := by timed flipCongrArg lean_s1940 [Implies]
have lean_s1942 : let1124 := by timed falseIntro lean_s1753
have lean_s1943 : (Eq let1301 let45) := by timed congr lean_s1941 lean_s1942
have lean_s1944 : (Eq let1301 let44) := by timed Eq.trans lean_s1943 lean_r2
have lean_s1945 : let44 := by timed eqResolve lean_s1939 lean_s1944
have lean_s1946 : (Or let1034 let1300) := by timed flipNotAnd lean_s1945 [let42, let31, let29, let24, let16, let37]
have lean_s1947 : (Or let262 (Or let1222 (Or let1034 let1299))) := by permutateOr lean_s1946, [4, 5, 0, 2, 1, 3], (- 1)
let lean_s1948 := by R1 lean_s1937, lean_s1947, let24, [(- 1), (- 1)]
let lean_s1949 := by R2 lean_s1948, lean_s1930, let31, [(- 1), 0]
have lean_s1950 : (Or let1222 (Or let1034 (Or let1041 let1298))) := by R2 lean_s1949, lean_s1684, let16, [(- 1), 0]
have lean_s1951 : let1298 := by factor lean_s1950, (- 1)
let lean_s1952 := by R2 lean_s1951, lean_s1911, let29, [(- 1), (- 1)]
have lean_s1953 : (Or let1034 (Or let1113 (Or let1280 let1293))) :=
  (scope (fun lean_a311 : let42 =>
    (scope (fun lean_a312 : let31 =>
      (scope (fun lean_a313 : let47 =>
        (scope (fun lean_a314 : let24 =>
          (scope (fun lean_a315 : let16 =>
            (scope (fun lean_a316 : let37 =>
              have lean_s1953 : let1234 := by timed Eq.symm lean_r262
              have lean_s1954 : let783 := by timed eqResolve lean_a316 lean_s1953
              let lean_s1955 := by timed And.intro lean_a314 lean_a312
              have lean_s1956 : let1295 := by timed And.intro lean_s1954 lean_s1955
              have lean_s1957 : let1297 :=
                (scope (fun lean_a312 : let783 =>
                  (scope (fun lean_a313 : let24 =>
                    (scope (fun lean_a314 : let31 =>
                      have lean_s1957 : let1151 := by timed Eq.symm lean_a314
                      have lean_s1958 : let598 := by timed Eq.symm lean_a313
                      have lean_s1959 : let24 := by timed Eq.symm lean_s1958
                      let lean_s1960 := by timed Eq.trans lean_s1957 lean_s1959
                      have lean_s1961 : let1233 := by timed Eq.symm lean_a312
                      have lean_s1962 : let783 := by timed Eq.symm lean_s1961
                      have lean_s1963 : let1236 := by timed flipCongrArg lean_s1962 [xx5fcount]
                      have lean_s1964 : let1121 := by timed Eq.trans lean_s1960 lean_s1963
                      show let1121 from lean_s1964
                ))))))
              have lean_s1958 : let1296 := by liftOrNToImp lean_s1957, 3
              have lean_s1959 : let1121 := by timed modusPonens lean_s1956 lean_s1958
              have lean_s1960 : let1287 := by timed And.intro lean_a313 lean_a311
              have lean_s1961 : let1289 :=
                (scope (fun lean_a312 : let47 =>
                  (scope (fun lean_a313 : let42 =>
                    have lean_s1961 : let1097 := by timed Eq.symm lean_a313
                    have lean_s1962 : (Eq let46 let28) := by timed Eq.symm lean_a312
                    have lean_s1963 : let47 := by timed Eq.symm lean_s1962
                    have lean_s1964 : let52 := by timed Eq.trans lean_s1961 lean_s1963
                    show let52 from lean_s1964
                ))))
              have lean_s1962 : let1288 := by liftOrNToImp lean_s1961, 2
              have lean_s1963 : let52 := by timed modusPonens lean_s1960 lean_s1962
              have lean_s1964 : let1286 :=
                (scope (fun lean_a312 : let52 =>
                  have lean_s1964 : let51 := by timed eqResolve lean_a312 lean_r4
                  have lean_s1965 : let1282 := by timed Eq.symm lean_s1964
                  show let1282 from lean_s1965
                ))
              have lean_s1965 : let1285 := by liftOrNToImp lean_s1964, 1
              have lean_s1966 : let1282 := by timed modusPonens lean_s1963 lean_s1965
              have lean_s1967 : let1294 := by timed And.intro lean_s1954 lean_s1966
              have lean_s1968 : (Or let1230 let1284) :=
                (scope (fun lean_a313 : let783 =>
                  (scope (fun lean_a314 : let1282 =>
                    have lean_s1968 : let51 := by timed Eq.symm lean_a314
                    have lean_s1969 : let1282 := by timed Eq.symm lean_s1968
                    have lean_s1970 : let1233 := by timed Eq.symm lean_a313
                    have lean_s1971 : let783 := by timed Eq.symm lean_s1970
                    have lean_s1972 : let1232 := by timed flipCongrArg lean_s1971 [sx5fcount]
                    have lean_s1973 : let1058 := by timed Eq.trans lean_s1969 lean_s1972
                    show let1058 from lean_s1973
                ))))
              have lean_s1969 : (Implies let1294 let1058) := by liftOrNToImp lean_s1968, 2
              have lean_s1970 : let1058 := by timed modusPonens lean_s1967 lean_s1969
              let lean_s1971 := by timed And.intro lean_s1959 lean_s1970
              have lean_s1972 : let1162 := by timed And.intro lean_a315 lean_s1971
              show let1162 from lean_s1972
  ))))))))))))
have lean_s1954 : let1292 := by liftOrNToImp lean_s1953, 6
have lean_s1955 : (Eq let48 let48) := by timed rfl
let lean_s1956 := by timed flipCongrArg lean_s1955 [Implies]
have lean_s1957 : let1164 := by timed falseIntro lean_s5
have lean_s1958 : (Eq let1292 let50) := by timed congr lean_s1956 lean_s1957
have lean_s1959 : (Eq let1292 let49) := by timed Eq.trans lean_s1958 lean_r3
have lean_s1960 : let49 := by timed eqResolve lean_s1954 lean_s1959
have lean_s1961 : (Or let1034 (Or let1113 (Or let1280 let1224))) := by timed flipNotAnd lean_s1960 [let42, let31, let47, let24, let16, let37]
have lean_s1962 : (Or let262 (Or let1222 (Or let1034 (Or let1280 let1291)))) := by permutateOr lean_s1961, [4, 5, 0, 2, 1, 3], (- 1)
let lean_s1963 := by R2 lean_s1962, lean_s1930, let31, [(- 1), 0]
let lean_s1964 := by R2 lean_s1963, lean_s1684, let16, [(- 1), 0]
let lean_s1965 := by R2 lean_s1964, lean_s1627, let24, [(- 1), (- 1)]
have lean_s1966 : (Or let445 let225) := by timed @cnfAndPos [let443, let225] 1
have lean_s1967 : (Or let225 let445) := by permutateOr lean_s1966, [1, 0], (- 1)
let lean_s1968 := by R1 lean_s1965, lean_s1967, let444, [(- 1), (- 1)]
have lean_s1969 : let1275 :=
  (scope (fun lean_a314 : let319 =>
    have lean_s1969 : let1275 :=
      (scope (fun lean_a315 : let319 =>
        have lean_s1969 : let320 := by timed Eq.symm lean_a315
        have lean_s1970 : let319 := by timed Eq.symm lean_s1969
        let lean_s1971 := by timed flipCongrArg lean_s1970 [Eq]
        have lean_s1972 : let581 := by timed rfl
        have lean_s1973 : (Eq let225 let603) := by timed congr lean_s1971 lean_s1972
        have lean_s1974 : (Eq let604 let594) := by timed flipCongrArg lean_r212 [Not]
        have lean_s1975 : (Eq let604 True) := by timed Eq.trans lean_s1974 lean_r195
        have lean_s1976 : (Eq let605 True) := by timed Eq.trans lean_r200 lean_s1975
        have lean_s1977 : let605 := by timed trueElim lean_s1976
        have lean_s1978 : (Eq let225 False) := by timed Eq.trans lean_s1973 lean_s1977
        have lean_s1979 : let1257 := by timed falseElim lean_s1978
        show let1257 from lean_s1979
      ))
    have lean_s1970 : let1276 := by liftOrNToImp lean_s1969, 1
    have lean_s1971 : let1257 := by timed modusPonens lean_a314 lean_s1970
    show let1257 from lean_s1971
  ))
have lean_s1970 : let1276 := by liftOrNToImp lean_s1969, 1
have lean_s1971 : let1275 := by timed impliesElim lean_s1970
let lean_s1972 := by R1 lean_s1968, lean_s1971, let225, [(- 1), (- 1)]
have lean_s1973 : let472 := by andElim lean_s1614, 14
have lean_s1974 : (Or let470 let47) := by timed impliesElim lean_s1973
have lean_s1975 : (Or let47 let470) := by permutateOr lean_s1974, [1, 0], (- 1)
let lean_s1976 := by R2 lean_s1972, lean_s1975, let47, [(- 1), (- 1)]
have lean_s1977 : (Or let470 let319) := by timed @cnfAndPos [let443, let319] 1
have lean_s1978 : (Or let319 let470) := by permutateOr lean_s1977, [1, 0], (- 1)
let lean_s1979 := by R2 lean_s1976, lean_s1978, let319, [(- 1), (- 1)]
let lean_s1980 := by R2 lean_s1979, lean_s39, let37, [(- 1), (- 1)]
let lean_s1981 := by R1 lean_s1980, lean_s1769, let249, [(- 1), 0]
let lean_s1982 := by R2 lean_s1981, lean_s1767, let1191, [(- 1), 0]
have lean_s1983 : (Or let1034 (Or let1113 (Or let1280 let1168))) :=
  (scope (fun lean_a315 : let42 =>
    (scope (fun lean_a316 : let31 =>
      (scope (fun lean_a317 : let47 =>
        (scope (fun lean_a318 : let59 =>
          (scope (fun lean_a319 : let24 =>
            (scope (fun lean_a320 : let20 =>
              (scope (fun lean_a321 : let16 =>
                (scope (fun lean_a322 : let9 =>
                  have lean_s1983 : let1098 := by timed Eq.symm lean_r140
                  have lean_s1984 : let401 := by timed eqResolve lean_a322 lean_s1983
                  let lean_s1985 := by timed And.intro lean_a319 lean_a316
                  let lean_s1986 := by timed And.intro lean_a320 lean_s1985
                  have lean_s1987 : let1146 := by timed And.intro lean_s1984 lean_s1986
                  have lean_s1988 : let1150 :=
                    (scope (fun lean_a315 : let401 =>
                      (scope (fun lean_a316 : let20 =>
                        (scope (fun lean_a317 : let24 =>
                          (scope (fun lean_a318 : let31 =>
                            have lean_s1988 : let1151 := by timed Eq.symm lean_a318
                            have lean_s1989 : let598 := by timed Eq.symm lean_a317
                            have lean_s1990 : let24 := by timed Eq.symm lean_s1989
                            let lean_s1991 := by timed Eq.trans lean_s1988 lean_s1990
                            have lean_s1992 : let639 := by timed Eq.symm lean_a316
                            have lean_s1993 : let20 := by timed Eq.symm lean_s1992
                            let lean_s1994 := by timed Eq.trans lean_s1991 lean_s1993
                            have lean_s1995 : let1089 := by timed Eq.symm lean_a315
                            have lean_s1996 : let401 := by timed Eq.symm lean_s1995
                            have lean_s1997 : let1105 := by timed flipCongrArg lean_s1996 [xx5fcount]
                            have lean_s1998 : let1121 := by timed Eq.trans lean_s1994 lean_s1997
                            show let1121 from lean_s1998
                    ))))))))
                  have lean_s1989 : let1147 := by liftOrNToImp lean_s1988, 4
                  have lean_s1990 : let1121 := by timed modusPonens lean_s1987 lean_s1989
                  have lean_s1991 : let1287 := by timed And.intro lean_a317 lean_a315
                  have lean_s1992 : let1289 :=
                    (scope (fun lean_a315 : let47 =>
                      (scope (fun lean_a316 : let42 =>
                        have lean_s1992 : let1097 := by timed Eq.symm lean_a316
                        have lean_s1993 : (Eq let46 let28) := by timed Eq.symm lean_a315
                        have lean_s1994 : let47 := by timed Eq.symm lean_s1993
                        have lean_s1995 : let52 := by timed Eq.trans lean_s1992 lean_s1994
                        show let52 from lean_s1995
                    ))))
                  have lean_s1993 : let1288 := by liftOrNToImp lean_s1992, 2
                  have lean_s1994 : let52 := by timed modusPonens lean_s1991 lean_s1993
                  have lean_s1995 : let1286 :=
                    (scope (fun lean_a315 : let52 =>
                      have lean_s1995 : let51 := by timed eqResolve lean_a315 lean_r4
                      have lean_s1996 : let1282 := by timed Eq.symm lean_s1995
                      show let1282 from lean_s1996
                    ))
                  have lean_s1996 : let1285 := by liftOrNToImp lean_s1995, 1
                  have lean_s1997 : let1282 := by timed modusPonens lean_s1994 lean_s1996
                  let lean_s1998 := by timed And.intro lean_a318 lean_s1997
                  have lean_s1999 : let1283 := by timed And.intro lean_s1984 lean_s1998
                  have lean_s2000 : (Or let1086 (Or let1109 let1284)) :=
                    (scope (fun lean_a315 : let401 =>
                      (scope (fun lean_a316 : let59 =>
                        (scope (fun lean_a317 : let1282 =>
                          have lean_s2000 : let51 := by timed Eq.symm lean_a317
                          have lean_s2001 : let1282 := by timed Eq.symm lean_s2000
                          have lean_s2002 : let60 := by timed Eq.symm lean_a316
                          have lean_s2003 : let59 := by timed Eq.symm lean_s2002
                          let lean_s2004 := by timed Eq.trans lean_s2001 lean_s2003
                          have lean_s2005 : let1089 := by timed Eq.symm lean_a315
                          have lean_s2006 : let401 := by timed Eq.symm lean_s2005
                          have lean_s2007 : let1088 := by timed flipCongrArg lean_s2006 [sx5fcount]
                          have lean_s2008 : let1058 := by timed Eq.trans lean_s2004 lean_s2007
                          show let1058 from lean_s2008
                    ))))))
                  have lean_s2001 : (Implies let1283 let1058) := by liftOrNToImp lean_s2000, 3
                  have lean_s2002 : let1058 := by timed modusPonens lean_s1999 lean_s2001
                  let lean_s2003 := by timed And.intro lean_s1990 lean_s2002
                  have lean_s2004 : let1162 := by timed And.intro lean_a321 lean_s2003
                  show let1162 from lean_s2004
  ))))))))))))))))
have lean_s1984 : let1281 := by liftOrNToImp lean_s1983, 8
have lean_s1985 : (Eq let787 let787) := by timed rfl
let lean_s1986 := by timed flipCongrArg lean_s1985 [Implies]
have lean_s1987 : let1164 := by timed falseIntro lean_s5
have lean_s1988 : (Eq let1281 let789) := by timed congr lean_s1986 lean_s1987
have lean_s1989 : (Eq let1281 let788) := by timed Eq.trans lean_s1988 lean_r265
have lean_s1990 : let788 := by timed eqResolve lean_s1984 lean_s1989
have lean_s1991 : (Or let1034 (Or let1113 (Or let1280 let1117))) := by timed flipNotAnd lean_s1990 [let42, let31, let47, let59, let24, let20, let16, let9]
have lean_s1992 : (Or let262 (Or let415 (Or let1034 (Or let1280 let1115)))) := by permutateOr lean_s1991, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s1993 := by R2 lean_s1992, lean_s1930, let31, [(- 1), 0]
let lean_s1994 := by R2 lean_s1993, lean_s1684, let16, [(- 1), 0]
let lean_s1995 := by R2 lean_s1994, lean_s1800, let20, [(- 1), (- 1)]
let lean_s1996 := by R2 lean_s1995, lean_s1862, let59, [(- 1), (- 1)]
let lean_s1997 := by R2 lean_s1996, lean_s1627, let24, [(- 1), (- 1)]
have lean_s1998 : (Or let440 let122) := by timed @cnfAndPos [let122, let295] 0
have lean_s1999 : (Or let122 let440) := by permutateOr lean_s1998, [1, 0], (- 1)
let lean_s2000 := by R1 lean_s1997, lean_s1999, let439, [(- 1), (- 1)]
have lean_s2001 : (Or let124 let122) := by timed @cnfAndPos [let122, let120] 0
have lean_s2002 : (Or let122 let124) := by permutateOr lean_s2001, [1, 0], (- 1)
let lean_s2003 := by R1 lean_s2000, lean_s2002, let123, [(- 1), (- 1)]
have lean_s2004 : (Or let415 (Or let1034 (Or let1280 (Or let122 let1279)))) := by R1 lean_s2003, lean_s1967, let444, [(- 1), (- 1)]
have lean_s2005 : (Or let415 (Or let1034 (Or let1280 let1279))) := by factor lean_s2004, (- 1)
have lean_s2006 : let1277 :=
  (scope (fun lean_a315 : let319 =>
    have lean_s2006 : let1277 :=
      (scope (fun lean_a315 : let319 =>
        have lean_s2006 : let320 := by timed Eq.symm lean_a315
        have lean_s2007 : let319 := by timed Eq.symm lean_s2006
        let lean_s2008 := by timed flipCongrArg lean_s2007 [Eq]
        have lean_s2009 : let588 := by timed rfl
        have lean_s2010 : (Eq let122 let517) := by timed congr lean_s2008 lean_s2009
        have lean_s2011 : (Eq let518 let594) := by timed flipCongrArg lean_r233 [Not]
        have lean_s2012 : (Eq let518 True) := by timed Eq.trans lean_s2011 lean_r195
        have lean_s2013 : (Eq let519 True) := by timed Eq.trans lean_r159 lean_s2012
        have lean_s2014 : let519 := by timed trueElim lean_s2013
        have lean_s2015 : let1261 := by timed Eq.trans lean_s2010 lean_s2014
        have lean_s2016 : let1258 := by timed falseElim lean_s2015
        show let1258 from lean_s2016
      ))
    have lean_s2007 : let1278 := by liftOrNToImp lean_s2006, 1
    have lean_s2008 : let1258 := by timed modusPonens lean_a315 lean_s2007
    show let1258 from lean_s2008
  ))
have lean_s2007 : let1278 := by liftOrNToImp lean_s2006, 1
have lean_s2008 : let1277 := by timed impliesElim lean_s2007
have lean_s2009 : (Or let1258 let1273) := by permutateOr lean_s2008, [1, 0], (- 1)
let lean_s2010 := by R1 lean_s2005, lean_s2009, let122, [(- 1), (- 1)]
let lean_s2011 := by R1 lean_s2010, lean_s1971, let225, [(- 1), (- 1)]
have lean_s2012 : (Or let415 (Or let1034 (Or let1273 let1274))) := by R2 lean_s2011, lean_s1975, let47, [(- 1), (- 1)]
have lean_s2013 : (Or let415 (Or let1034 let1274)) := by factor lean_s2012, (- 1)
have lean_s2014 : (Or let415 (Or let1034 (Or let470 let470))) := by R2 lean_s2013, lean_s1978, let319, [(- 1), (- 1)]
have lean_s2015 : (Or let415 let1272) := by factor lean_s2014, (- 1)
let lean_s2016 := by R2 lean_s2015, lean_s1911, let469, [(- 1), (- 1)]
have lean_s2017 : (Or let1034 (Or let1113 (Or let1041 (Or let1109 (Or let1262 let1160))))) :=
  (scope (fun lean_a315 : let42 =>
    (scope (fun lean_a316 : let31 =>
      (scope (fun lean_a317 : let29 =>
        (scope (fun lean_a318 : let59 =>
          (scope (fun lean_a319 : let76 =>
            (scope (fun lean_a320 : let20 =>
              (scope (fun lean_a321 : let16 =>
                (scope (fun lean_a322 : let9 =>
                  have lean_s2017 : let1098 := by timed Eq.symm lean_r140
                  have lean_s2018 : let401 := by timed eqResolve lean_a322 lean_s2017
                  have lean_s2019 : let1269 := by timed And.intro lean_a319 lean_a316
                  have lean_s2020 : let1271 :=
                    (scope (fun lean_a315 : let76 =>
                      (scope (fun lean_a316 : let31 =>
                        have lean_s2020 : let1151 := by timed Eq.symm lean_a316
                        have lean_s2021 : (Eq let68 let23) := by timed Eq.symm lean_a315
                        have lean_s2022 : let76 := by timed Eq.symm lean_s2021
                        have lean_s2023 : let69 := by timed Eq.trans lean_s2020 lean_s2022
                        show let69 from lean_s2023
                    ))))
                  have lean_s2021 : let1270 := by liftOrNToImp lean_s2020, 2
                  have lean_s2022 : let69 := by timed modusPonens lean_s2019 lean_s2021
                  have lean_s2023 : let1268 :=
                    (scope (fun lean_a315 : let69 =>
                      have lean_s2023 : let67 := by timed eqResolve lean_a315 lean_r10
                      have lean_s2024 : let1264 := by timed Eq.symm lean_s2023
                      show let1264 from lean_s2024
                    ))
                  have lean_s2024 : let1267 := by liftOrNToImp lean_s2023, 1
                  have lean_s2025 : let1264 := by timed modusPonens lean_s2022 lean_s2024
                  let lean_s2026 := by timed And.intro lean_a320 lean_s2025
                  have lean_s2027 : let1265 := by timed And.intro lean_s2018 lean_s2026
                  have lean_s2028 : (Or let1086 (Or let1050 let1266)) :=
                    (scope (fun lean_a315 : let401 =>
                      (scope (fun lean_a316 : let20 =>
                        (scope (fun lean_a317 : let1264 =>
                          have lean_s2028 : let67 := by timed Eq.symm lean_a317
                          have lean_s2029 : let1264 := by timed Eq.symm lean_s2028
                          have lean_s2030 : let639 := by timed Eq.symm lean_a316
                          have lean_s2031 : let20 := by timed Eq.symm lean_s2030
                          let lean_s2032 := by timed Eq.trans lean_s2029 lean_s2031
                          have lean_s2033 : let1089 := by timed Eq.symm lean_a315
                          have lean_s2034 : let401 := by timed Eq.symm lean_s2033
                          have lean_s2035 : let1105 := by timed flipCongrArg lean_s2034 [xx5fcount]
                          have lean_s2036 : let1059 := by timed Eq.trans lean_s2032 lean_s2035
                          show let1059 from lean_s2036
                    ))))))
                  have lean_s2029 : (Implies let1265 let1059) := by liftOrNToImp lean_s2028, 3
                  have lean_s2030 : let1059 := by timed modusPonens lean_s2027 lean_s2029
                  let lean_s2031 := by timed And.intro lean_a317 lean_a315
                  let lean_s2032 := by timed And.intro lean_a318 lean_s2031
                  have lean_s2033 : let1140 := by timed And.intro lean_s2018 lean_s2032
                  have lean_s2034 : let1144 :=
                    (scope (fun lean_a315 : let401 =>
                      (scope (fun lean_a316 : let59 =>
                        (scope (fun lean_a317 : let29 =>
                          (scope (fun lean_a318 : let42 =>
                            have lean_s2034 : let1097 := by timed Eq.symm lean_a318
                            have lean_s2035 : let506 := by timed Eq.symm lean_a317
                            have lean_s2036 : let29 := by timed Eq.symm lean_s2035
                            let lean_s2037 := by timed Eq.trans lean_s2034 lean_s2036
                            have lean_s2038 : let60 := by timed Eq.symm lean_a316
                            have lean_s2039 : let59 := by timed Eq.symm lean_s2038
                            let lean_s2040 := by timed Eq.trans lean_s2037 lean_s2039
                            have lean_s2041 : let1089 := by timed Eq.symm lean_a315
                            have lean_s2042 : let401 := by timed Eq.symm lean_s2041
                            have lean_s2043 : let1088 := by timed flipCongrArg lean_s2042 [sx5fcount]
                            have lean_s2044 : let1120 := by timed Eq.trans lean_s2040 lean_s2043
                            show let1120 from lean_s2044
                    ))))))))
                  have lean_s2035 : let1141 := by liftOrNToImp lean_s2034, 4
                  have lean_s2036 : let1120 := by timed modusPonens lean_s2033 lean_s2035
                  let lean_s2037 := by timed And.intro lean_s2030 lean_s2036
                  have lean_s2038 : let1154 := by timed And.intro lean_a321 lean_s2037
                  show let1154 from lean_s2038
  ))))))))))))))))
have lean_s2018 : let1263 := by liftOrNToImp lean_s2017, 8
have lean_s2019 : (Eq let784 let784) := by timed rfl
let lean_s2020 := by timed flipCongrArg lean_s2019 [Implies]
have lean_s2021 : let1156 := by timed falseIntro lean_s1654
have lean_s2022 : (Eq let1263 let786) := by timed congr lean_s2020 lean_s2021
have lean_s2023 : (Eq let1263 let785) := by timed Eq.trans lean_s2022 lean_r263
have lean_s2024 : let785 := by timed eqResolve lean_s2018 lean_s2023
have lean_s2025 : (Or let1034 (Or let1113 (Or let1041 (Or let1109 (Or let1262 let1055))))) := by timed flipNotAnd lean_s2024 [let42, let31, let29, let59, let76, let20, let16, let9]
have lean_s2026 : (Or let262 (Or let415 (Or let1034 (Or let1041 (Or let1109 (Or let1113 (Or let1262 let1050))))))) := by permutateOr lean_s2025, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s2027 := by R2 lean_s2026, lean_s1930, let31, [(- 1), 0]
let lean_s2028 := by R2 lean_s2027, lean_s1684, let16, [(- 1), 0]
let lean_s2029 := by R2 lean_s2028, lean_s1800, let20, [(- 1), (- 1)]
let lean_s2030 := by R2 lean_s2029, lean_s1862, let59, [(- 1), (- 1)]
let lean_s2031 := by R1 lean_s2030, lean_s1999, let439, [(- 1), (- 1)]
have lean_s2032 : (Or let415 (Or let1034 (Or let1041 (Or let1262 (Or let122 let122))))) := by R1 lean_s2031, lean_s2002, let123, [(- 1), (- 1)]
have lean_s2033 : (Or let415 (Or let1034 (Or let1041 (Or let1262 let122)))) := by factor lean_s2032, (- 1)
have lean_s2034 : let1259 :=
  (scope (fun lean_a315 : let225 =>
    have lean_s2034 : let1259 :=
      (scope (fun lean_a316 : let225 =>
        have lean_s2034 : let226 := by timed Eq.symm lean_a316
        have lean_s2035 : let225 := by timed Eq.symm lean_s2034
        let lean_s2036 := by timed flipCongrArg lean_s2035 [Eq]
        have lean_s2037 : let588 := by timed rfl
        have lean_s2038 : (Eq let122 let175) := by timed congr lean_s2036 lean_s2037
        have lean_s2039 : (Eq let621 let594) := by timed flipCongrArg lean_r38 [Not]
        have lean_s2040 : (Eq let621 True) := by timed Eq.trans lean_s2039 lean_r195
        have lean_s2041 : (Eq let176 True) := by timed Eq.trans lean_r207 lean_s2040
        have lean_s2042 : let176 := by timed trueElim lean_s2041
        have lean_s2043 : let1261 := by timed Eq.trans lean_s2038 lean_s2042
        have lean_s2044 : let1258 := by timed falseElim lean_s2043
        show let1258 from lean_s2044
      ))
    have lean_s2035 : let1260 := by liftOrNToImp lean_s2034, 1
    have lean_s2036 : let1258 := by timed modusPonens lean_a315 lean_s2035
    show let1258 from lean_s2036
  ))
have lean_s2035 : let1260 := by liftOrNToImp lean_s2034, 1
have lean_s2036 : let1259 := by timed impliesElim lean_s2035
have lean_s2037 : (Or let1258 let1257) := by permutateOr lean_s2036, [1, 0], (- 1)
let lean_s2038 := by R1 lean_s2033, lean_s2037, let122, [(- 1), (- 1)]
let lean_s2039 := by R2 lean_s2038, lean_s1935, let76, [(- 1), (- 1)]
have lean_s2040 : (Or let415 (Or let1034 (Or let1041 (Or let445 let445)))) := by R2 lean_s2039, lean_s1967, let225, [(- 1), (- 1)]
have lean_s2041 : (Or let415 (Or let1034 (Or let1041 let445))) := by factor lean_s2040, (- 1)
let lean_s2042 := by R2 lean_s2041, lean_s1627, let444, [(- 1), (- 1)]
have lean_s2043 : (Or let1034 (Or let1113 (Or let1041 (Or let1053 let1167)))) :=
  (scope (fun lean_a316 : let42 =>
    (scope (fun lean_a317 : let31 =>
      (scope (fun lean_a318 : let29 =>
        (scope (fun lean_a319 : let27 =>
          (scope (fun lean_a320 : let24 =>
            (scope (fun lean_a321 : let20 =>
              (scope (fun lean_a322 : let16 =>
                (scope (fun lean_a323 : let9 =>
                  have lean_s2043 : let1098 := by timed Eq.symm lean_r140
                  have lean_s2044 : let401 := by timed eqResolve lean_a323 lean_s2043
                  let lean_s2045 := by timed And.intro lean_a320 lean_a317
                  let lean_s2046 := by timed And.intro lean_a321 lean_s2045
                  have lean_s2047 : let1146 := by timed And.intro lean_s2044 lean_s2046
                  have lean_s2048 : let1150 :=
                    (scope (fun lean_a316 : let401 =>
                      (scope (fun lean_a317 : let20 =>
                        (scope (fun lean_a318 : let24 =>
                          (scope (fun lean_a319 : let31 =>
                            have lean_s2048 : let1151 := by timed Eq.symm lean_a319
                            have lean_s2049 : let598 := by timed Eq.symm lean_a318
                            have lean_s2050 : let24 := by timed Eq.symm lean_s2049
                            let lean_s2051 := by timed Eq.trans lean_s2048 lean_s2050
                            have lean_s2052 : let639 := by timed Eq.symm lean_a317
                            have lean_s2053 : let20 := by timed Eq.symm lean_s2052
                            let lean_s2054 := by timed Eq.trans lean_s2051 lean_s2053
                            have lean_s2055 : let1089 := by timed Eq.symm lean_a316
                            have lean_s2056 : let401 := by timed Eq.symm lean_s2055
                            have lean_s2057 : let1105 := by timed flipCongrArg lean_s2056 [xx5fcount]
                            have lean_s2058 : let1121 := by timed Eq.trans lean_s2054 lean_s2057
                            show let1121 from lean_s2058
                    ))))))))
                  have lean_s2049 : let1147 := by liftOrNToImp lean_s2048, 4
                  have lean_s2050 : let1121 := by timed modusPonens lean_s2047 lean_s2049
                  let lean_s2051 := by timed And.intro lean_a318 lean_a316
                  have lean_s2052 : let1093 := by timed And.intro lean_a319 lean_s2051
                  have lean_s2053 : let1095 :=
                    (scope (fun lean_a316 : let27 =>
                      (scope (fun lean_a317 : let29 =>
                        (scope (fun lean_a318 : let42 =>
                          have lean_s2053 : let1097 := by timed Eq.symm lean_a318
                          have lean_s2054 : let506 := by timed Eq.symm lean_a317
                          have lean_s2055 : let29 := by timed Eq.symm lean_s2054
                          let lean_s2056 := by timed Eq.trans lean_s2053 lean_s2055
                          have lean_s2057 : let1096 := by timed Eq.symm lean_a316
                          have lean_s2058 : let27 := by timed Eq.symm lean_s2057
                          have lean_s2059 : let742 := by timed Eq.trans lean_s2056 lean_s2058
                          show let742 from lean_s2059
                    ))))))
                  have lean_s2054 : let1094 := by liftOrNToImp lean_s2053, 3
                  have lean_s2055 : let742 := by timed modusPonens lean_s2052 lean_s2054
                  have lean_s2056 : let1091 :=
                    (scope (fun lean_a316 : let742 =>
                      have lean_s2056 : let741 := by timed eqResolve lean_a316 lean_r234
                      have lean_s2057 : let1083 := by timed Eq.symm lean_s2056
                      show let1083 from lean_s2057
                    ))
                  have lean_s2057 : let1090 := by liftOrNToImp lean_s2056, 1
                  have lean_s2058 : let1083 := by timed modusPonens lean_s2055 lean_s2057
                  have lean_s2059 : let1084 := by timed And.intro lean_s2044 lean_s2058
                  have lean_s2060 : let1087 :=
                    (scope (fun lean_a316 : let401 =>
                      (scope (fun lean_a317 : let1083 =>
                        have lean_s2060 : let741 := by timed Eq.symm lean_a317
                        have lean_s2061 : let1083 := by timed Eq.symm lean_s2060
                        have lean_s2062 : let1089 := by timed Eq.symm lean_a316
                        have lean_s2063 : let401 := by timed Eq.symm lean_s2062
                        have lean_s2064 : let1088 := by timed flipCongrArg lean_s2063 [sx5fcount]
                        have lean_s2065 : let1058 := by timed Eq.trans lean_s2061 lean_s2064
                        show let1058 from lean_s2065
                    ))))
                  have lean_s2061 : let1085 := by liftOrNToImp lean_s2060, 2
                  have lean_s2062 : let1058 := by timed modusPonens lean_s2059 lean_s2061
                  let lean_s2063 := by timed And.intro lean_s2050 lean_s2062
                  have lean_s2064 : let1162 := by timed And.intro lean_a322 lean_s2063
                  show let1162 from lean_s2064
  ))))))))))))))))
have lean_s2044 : let1256 := by liftOrNToImp lean_s2043, 8
have lean_s2045 : (Eq let337 let337) := by timed rfl
let lean_s2046 := by timed flipCongrArg lean_s2045 [Implies]
have lean_s2047 : let1164 := by timed falseIntro lean_s5
have lean_s2048 : (Eq let1256 let339) := by timed congr lean_s2046 lean_s2047
have lean_s2049 : (Eq let1256 let338) := by timed Eq.trans lean_s2048 lean_r110
have lean_s2050 : let338 := by timed eqResolve lean_s2044 lean_s2049
have lean_s2051 : (Or let1034 let1255) := by timed flipNotAnd lean_s2050 [let42, let31, let29, let27, let24, let20, let16, let9]
have lean_s2052 : (Or let262 (Or let415 (Or let1034 let1254))) := by permutateOr lean_s2051, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s2053 := by R2 lean_s2052, lean_s1930, let31, [(- 1), 0]
let lean_s2054 := by R2 lean_s2053, lean_s1684, let16, [(- 1), 0]
let lean_s2055 := by R2 lean_s2054, lean_s1887, let27, [(- 1), (- 1)]
let lean_s2056 := by R2 lean_s2055, lean_s1862, let123, [(- 1), (- 1)]
have lean_s2057 : (Or let415 (Or let1034 (Or let1041 (Or let1039 (Or let1050 (Or let415 let1253)))))) := by R1 lean_s2056, lean_s1847, let59, [(- 1), (- 1)]
have lean_s2058 : (Or let415 (Or let1034 let1253)) := by factor lean_s2057, (- 1)
let lean_s2059 := by R2 lean_s2058, lean_s1800, let20, [(- 1), (- 1)]
have lean_s2060 : (Or let1034 (Or let1113 (Or let1041 (Or let1109 (Or let1039 (Or let1176 let1159)))))) :=
  (scope (fun lean_a316 : let42 =>
    (scope (fun lean_a317 : let31 =>
      (scope (fun lean_a318 : let29 =>
        (scope (fun lean_a319 : let59 =>
          (scope (fun lean_a320 : let24 =>
            (scope (fun lean_a321 : let322 =>
              (scope (fun lean_a322 : let16 =>
                (scope (fun lean_a323 : let9 =>
                  have lean_s2060 : let1098 := by timed Eq.symm lean_r140
                  have lean_s2061 : let401 := by timed eqResolve lean_a323 lean_s2060
                  let lean_s2062 := by timed And.intro lean_a320 lean_a317
                  have lean_s2063 : let1250 := by timed And.intro lean_a321 lean_s2062
                  have lean_s2064 : let1252 :=
                    (scope (fun lean_a316 : let322 =>
                      (scope (fun lean_a317 : let24 =>
                        (scope (fun lean_a318 : let31 =>
                          have lean_s2064 : let1151 := by timed Eq.symm lean_a318
                          have lean_s2065 : let598 := by timed Eq.symm lean_a317
                          have lean_s2066 : let24 := by timed Eq.symm lean_s2065
                          let lean_s2067 := by timed Eq.trans lean_s2064 lean_s2066
                          have lean_s2068 : let1190 := by timed Eq.symm lean_a316
                          have lean_s2069 : let322 := by timed Eq.symm lean_s2068
                          have lean_s2070 : let347 := by timed Eq.trans lean_s2067 lean_s2069
                          show let347 from lean_s2070
                    ))))))
                  have lean_s2065 : let1251 := by liftOrNToImp lean_s2064, 3
                  have lean_s2066 : let347 := by timed modusPonens lean_s2063 lean_s2065
                  have lean_s2067 : let1249 :=
                    (scope (fun lean_a316 : let347 =>
                      have lean_s2067 : let346 := by timed eqResolve lean_a316 lean_r115
                      have lean_s2068 : let1244 := by timed Eq.symm lean_s2067
                      show let1244 from lean_s2068
                    ))
                  have lean_s2068 : let1248 := by liftOrNToImp lean_s2067, 1
                  have lean_s2069 : let1244 := by timed modusPonens lean_s2066 lean_s2068
                  have lean_s2070 : let1245 := by timed And.intro lean_s2061 lean_s2069
                  have lean_s2071 : let1247 :=
                    (scope (fun lean_a317 : let401 =>
                      (scope (fun lean_a318 : let1244 =>
                        have lean_s2071 : let346 := by timed Eq.symm lean_a318
                        have lean_s2072 : let1244 := by timed Eq.symm lean_s2071
                        have lean_s2073 : let1089 := by timed Eq.symm lean_a317
                        have lean_s2074 : let401 := by timed Eq.symm lean_s2073
                        have lean_s2075 : let1105 := by timed flipCongrArg lean_s2074 [xx5fcount]
                        have lean_s2076 : let1059 := by timed Eq.trans lean_s2072 lean_s2075
                        show let1059 from lean_s2076
                    ))))
                  have lean_s2072 : let1246 := by liftOrNToImp lean_s2071, 2
                  have lean_s2073 : let1059 := by timed modusPonens lean_s2070 lean_s2072
                  let lean_s2074 := by timed And.intro lean_a318 lean_a316
                  let lean_s2075 := by timed And.intro lean_a319 lean_s2074
                  have lean_s2076 : let1140 := by timed And.intro lean_s2061 lean_s2075
                  have lean_s2077 : let1144 :=
                    (scope (fun lean_a318 : let401 =>
                      (scope (fun lean_a319 : let59 =>
                        (scope (fun lean_a320 : let29 =>
                          (scope (fun lean_a321 : let42 =>
                            have lean_s2077 : let1097 := by timed Eq.symm lean_a321
                            have lean_s2078 : let506 := by timed Eq.symm lean_a320
                            have lean_s2079 : let29 := by timed Eq.symm lean_s2078
                            let lean_s2080 := by timed Eq.trans lean_s2077 lean_s2079
                            have lean_s2081 : let60 := by timed Eq.symm lean_a319
                            have lean_s2082 : let59 := by timed Eq.symm lean_s2081
                            let lean_s2083 := by timed Eq.trans lean_s2080 lean_s2082
                            have lean_s2084 : let1089 := by timed Eq.symm lean_a318
                            have lean_s2085 : let401 := by timed Eq.symm lean_s2084
                            have lean_s2086 : let1088 := by timed flipCongrArg lean_s2085 [sx5fcount]
                            have lean_s2087 : let1120 := by timed Eq.trans lean_s2083 lean_s2086
                            show let1120 from lean_s2087
                    ))))))))
                  have lean_s2078 : let1141 := by liftOrNToImp lean_s2077, 4
                  have lean_s2079 : let1120 := by timed modusPonens lean_s2076 lean_s2078
                  let lean_s2080 := by timed And.intro lean_s2073 lean_s2079
                  have lean_s2081 : let1154 := by timed And.intro lean_a322 lean_s2080
                  show let1154 from lean_s2081
  ))))))))))))))))
have lean_s2061 : let1243 := by liftOrNToImp lean_s2060, 8
have lean_s2062 : (Eq let325 let325) := by timed rfl
let lean_s2063 := by timed flipCongrArg lean_s2062 [Implies]
have lean_s2064 : let1156 := by timed falseIntro lean_s1654
have lean_s2065 : (Eq let1243 let327) := by timed congr lean_s2063 lean_s2064
have lean_s2066 : (Eq let1243 let326) := by timed Eq.trans lean_s2065 lean_r105
have lean_s2067 : let326 := by timed eqResolve lean_s2061 lean_s2066
have lean_s2068 : (Or let1034 let1242) := by timed flipNotAnd lean_s2067 [let42, let31, let29, let59, let24, let322, let16, let9]
have lean_s2069 : (Or let262 (Or let415 (Or let1034 let1241))) := by permutateOr lean_s2068, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s2070 := by R2 lean_s2069, lean_s1930, let31, [(- 1), 0]
let lean_s2071 := by R2 lean_s2070, lean_s1684, let16, [(- 1), 0]
let lean_s2072 := by R2 lean_s2071, lean_s1862, let59, [(- 1), (- 1)]
let lean_s2073 := by R1 lean_s2072, lean_s1890, let123, [(- 1), (- 1)]
let lean_s2074 := by R1 lean_s2073, lean_s1883, let120, [(- 1), (- 1)]
let lean_s2075 := by R2 lean_s2074, lean_s1786, let322, [(- 1), (- 1)]
have lean_s2076 : (Or let415 (Or let1034 (Or let1041 (Or let1039 (Or let440 let440))))) := by R2 lean_s2075, lean_s1879, let295, [(- 1), (- 1)]
have lean_s2077 : (Or let415 (Or let1034 (Or let1041 (Or let1039 let440)))) := by factor lean_s2076, (- 1)
have lean_s2078 : (Or let440 let1240) := by permutateOr lean_s2077, [4, 0, 1, 2, 3], (- 1)
have lean_s2079 : (Or let415 (Or let1034 (Or let1041 (Or let1039 let1240)))) := by R1 lean_s2059, lean_s2078, let439, [(- 1), (- 1)]
have lean_s2080 : let1240 := by factor lean_s2079, (- 1)
have lean_s2081 : (Or let415 (Or let1034 (Or let1041 let1239))) := by R1 lean_s2042, lean_s2080, let24, [(- 1), (- 1)]
have lean_s2082 : let1239 := by factor lean_s2081, (- 1)
have lean_s2083 : (Or let415 (Or let1034 let1237)) := by R1 lean_s2016, lean_s2082, let29, [(- 1), (- 1)]
have lean_s2084 : let1237 := by factor lean_s2083, (- 1)
have lean_s2085 : (Or let1034 (Or let470 let1290)) := by R1 lean_s1982, lean_s2084, let9, [(- 1), (- 1)]
have lean_s2086 : let1272 := by factor lean_s2085, 3
have lean_s2087 : let1290 := by permutateOr lean_s2086, [1, 0], (- 1)
let lean_s2088 := by R1 lean_s1952, lean_s2087, let469, [(- 1), (- 1)]
let lean_s2089 := by R2 lean_s2088, lean_s39, let37, [(- 1), (- 1)]
let lean_s2090 := by R2 lean_s2089, lean_s1767, let1191, [(- 1), 0]
let lean_s2091 := by R1 lean_s2090, lean_s1769, let249, [(- 1), 0]
have lean_s2092 : (Or let1034 (Or let1034 let1034)) := by R1 lean_s2091, lean_s2084, let9, [(- 1), (- 1)]
have lean_s2093 : let1034 := by factor lean_s2092, 2
have lean_s2094 : let473 := by R1 lean_s1648, lean_s2093, let42, [(- 1), 0]
have lean_s2095 : let134 := by R2 lean_s1635, lean_s2094, let473, [(- 1), 0]
have lean_s2096 : let1028 := by R2 lean_s1633, lean_s2095, let134, [(- 1), 0]
have lean_s2097 : let445 := by R1 lean_s1629, lean_s2096, let443, [(- 1), 0]
have lean_s2098 : let24 := by R1 lean_s1627, lean_s2097, let444, [(- 1), 0]
let lean_s2099 := by R2 lean_s51, lean_s2098, let24, [(- 1), 0]
have lean_s2100 : let470 := by R1 lean_s1915, lean_s2096, let443, [(- 1), 0]
have lean_s2101 : let29 := by R1 lean_s1911, lean_s2100, let469, [(- 1), 0]
let lean_s2102 := by R2 lean_s2099, lean_s2101, let29, [(- 1), 0]
have lean_s2103 : let33 := by R2 lean_s1745, lean_s2094, let473, [(- 1), 0]
let lean_s2104 := by R2 lean_s2102, lean_s2103, let33, [(- 1), 0]
let lean_s2105 := by R2 lean_s2104, lean_s1930, let31, [(- 1), 0]
let lean_s2106 := by R2 lean_s2105, lean_s1684, let16, [(- 1), 0]
let lean_s2107 := by R2 lean_s2106, lean_s1800, let20, [(- 1), (- 1)]
let lean_s2108 := by R1 lean_s2107, lean_s1879, let439, [(- 1), (- 1)]
let lean_s2109 := by R1 lean_s2108, lean_s1883, let295, [(- 1), (- 1)]
let lean_s2110 := by R2 lean_s2109, lean_s1887, let27, [(- 1), (- 1)]
have lean_s2111 : (Or let415 let1044) := by R2 lean_s2110, lean_s1890, let120, [(- 1), (- 1)]
have lean_s2112 : (Or let415 let124) := by factor lean_s2111, (- 1)
let lean_s2113 := by R2 lean_s2112, lean_s1862, let123, [(- 1), (- 1)]
have lean_s2114 : (Or let1161 (Or let1113 (Or let1041 (Or let1109 (Or let1039 (Or let1176 let1082)))))) :=
  (scope (fun lean_a318 : let33 =>
    (scope (fun lean_a319 : let31 =>
      (scope (fun lean_a320 : let29 =>
        (scope (fun lean_a321 : let59 =>
          (scope (fun lean_a322 : let24 =>
            (scope (fun lean_a323 : let322 =>
              (scope (fun lean_a324 : let16 =>
                (scope (fun lean_a325 : let9 =>
                  have lean_s2114 : let1098 := by timed Eq.symm lean_r140
                  have lean_s2115 : let401 := by timed eqResolve lean_a325 lean_s2114
                  let lean_s2116 := by timed And.intro lean_a322 lean_a319
                  have lean_s2117 : let1250 := by timed And.intro lean_a323 lean_s2116
                  have lean_s2118 : let1252 :=
                    (scope (fun lean_a318 : let322 =>
                      (scope (fun lean_a319 : let24 =>
                        (scope (fun lean_a320 : let31 =>
                          have lean_s2118 : let1151 := by timed Eq.symm lean_a320
                          have lean_s2119 : let598 := by timed Eq.symm lean_a319
                          have lean_s2120 : let24 := by timed Eq.symm lean_s2119
                          let lean_s2121 := by timed Eq.trans lean_s2118 lean_s2120
                          have lean_s2122 : let1190 := by timed Eq.symm lean_a318
                          have lean_s2123 : let322 := by timed Eq.symm lean_s2122
                          have lean_s2124 : let347 := by timed Eq.trans lean_s2121 lean_s2123
                          show let347 from lean_s2124
                    ))))))
                  have lean_s2119 : let1251 := by liftOrNToImp lean_s2118, 3
                  have lean_s2120 : let347 := by timed modusPonens lean_s2117 lean_s2119
                  have lean_s2121 : let1249 :=
                    (scope (fun lean_a318 : let347 =>
                      have lean_s2121 : let346 := by timed eqResolve lean_a318 lean_r115
                      have lean_s2122 : let1244 := by timed Eq.symm lean_s2121
                      show let1244 from lean_s2122
                    ))
                  have lean_s2122 : let1248 := by liftOrNToImp lean_s2121, 1
                  have lean_s2123 : let1244 := by timed modusPonens lean_s2120 lean_s2122
                  have lean_s2124 : let1245 := by timed And.intro lean_s2115 lean_s2123
                  have lean_s2125 : let1247 :=
                    (scope (fun lean_a318 : let401 =>
                      (scope (fun lean_a319 : let1244 =>
                        have lean_s2125 : let346 := by timed Eq.symm lean_a319
                        have lean_s2126 : let1244 := by timed Eq.symm lean_s2125
                        have lean_s2127 : let1089 := by timed Eq.symm lean_a318
                        have lean_s2128 : let401 := by timed Eq.symm lean_s2127
                        have lean_s2129 : let1105 := by timed flipCongrArg lean_s2128 [xx5fcount]
                        have lean_s2130 : let1059 := by timed Eq.trans lean_s2126 lean_s2129
                        show let1059 from lean_s2130
                    ))))
                  have lean_s2126 : let1246 := by liftOrNToImp lean_s2125, 2
                  have lean_s2127 : let1059 := by timed modusPonens lean_s2124 lean_s2126
                  let lean_s2128 := by timed And.intro lean_a320 lean_a318
                  let lean_s2129 := by timed And.intro lean_a321 lean_s2128
                  have lean_s2130 : let1170 := by timed And.intro lean_s2115 lean_s2129
                  have lean_s2131 : let1174 :=
                    (scope (fun lean_a318 : let401 =>
                      (scope (fun lean_a319 : let59 =>
                        (scope (fun lean_a320 : let29 =>
                          (scope (fun lean_a321 : let33 =>
                            have lean_s2131 : let1175 := by timed Eq.symm lean_a321
                            have lean_s2132 : let506 := by timed Eq.symm lean_a320
                            have lean_s2133 : let29 := by timed Eq.symm lean_s2132
                            let lean_s2134 := by timed Eq.trans lean_s2131 lean_s2133
                            have lean_s2135 : let60 := by timed Eq.symm lean_a319
                            have lean_s2136 : let59 := by timed Eq.symm lean_s2135
                            let lean_s2137 := by timed Eq.trans lean_s2134 lean_s2136
                            have lean_s2138 : let1089 := by timed Eq.symm lean_a318
                            have lean_s2139 : let401 := by timed Eq.symm lean_s2138
                            have lean_s2140 : let1088 := by timed flipCongrArg lean_s2139 [sx5fcount]
                            have lean_s2141 : let1058 := by timed Eq.trans lean_s2137 lean_s2140
                            show let1058 from lean_s2141
                    ))))))))
                  have lean_s2132 : let1171 := by liftOrNToImp lean_s2131, 4
                  have lean_s2133 : let1058 := by timed modusPonens lean_s2130 lean_s2132
                  let lean_s2134 := by timed And.intro lean_s2127 lean_s2133
                  have lean_s2135 : let1060 := by timed And.intro lean_a324 lean_s2134
                  show let1060 from lean_s2135
  ))))))))))))))))
have lean_s2115 : let1307 := by liftOrNToImp lean_s2114, 8
have lean_s2116 : (Eq let368 let368) := by timed rfl
let lean_s2117 := by timed flipCongrArg lean_s2116 [Implies]
have lean_s2118 : let1062 := by timed falseIntro lean_s1869
have lean_s2119 : (Eq let1307 let370) := by timed congr lean_s2117 lean_s2118
have lean_s2120 : (Eq let1307 let369) := by timed Eq.trans lean_s2119 lean_r126
have lean_s2121 : let369 := by timed eqResolve lean_s2115 lean_s2120
have lean_s2122 : (Or let1161 let1242) := by timed flipNotAnd lean_s2121 [let33, let31, let29, let59, let24, let322, let16, let9]
have lean_s2123 : (Or let262 (Or let415 (Or let1161 let1241))) := by permutateOr lean_s2122, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s2124 := by R2 lean_s2123, lean_s2098, let24, [(- 1), 0]
let lean_s2125 := by R2 lean_s2124, lean_s2101, let29, [(- 1), 0]
let lean_s2126 := by R2 lean_s2125, lean_s2103, let33, [(- 1), 0]
let lean_s2127 := by R2 lean_s2126, lean_s1930, let31, [(- 1), 0]
let lean_s2128 := by R2 lean_s2127, lean_s1684, let16, [(- 1), 0]
let lean_s2129 := by R2 lean_s2128, lean_s1786, let322, [(- 1), (- 1)]
let lean_s2130 := by R2 lean_s2129, lean_s1800, let439, [(- 1), (- 1)]
let lean_s2131 := by R1 lean_s2130, lean_s1811, let20, [(- 1), (- 1)]
let lean_s2132 := by R2 lean_s2131, lean_s1930, let31, [(- 1), 0]
let lean_s2133 := by R2 lean_s2132, lean_s2103, let33, [(- 1), 0]
let lean_s2134 := by R2 lean_s2133, lean_s2098, let24, [(- 1), 0]
let lean_s2135 := by R2 lean_s2134, lean_s2101, let29, [(- 1), 0]
have lean_s2136 : (Or let415 (Or let1109 let1306)) := by R2 lean_s2135, lean_s1684, let16, [(- 1), 0]
have lean_s2137 : let1306 := by factor lean_s2136, (- 1)
have lean_s2138 : (Or let415 let415) := by R1 lean_s2113, lean_s2137, let59, [(- 1), (- 1)]
have lean_s2139 : let415 := by factor lean_s2138, 1
let lean_s2140 := by R1 lean_s39, lean_s2139, let9, [(- 1), 0]
let lean_s2141 := by R2 lean_s2140, lean_s1767, let1191, [(- 1), 0]
have lean_s2142 : let37 := by R1 lean_s2141, lean_s1769, let249, [(- 1), 0]
let lean_s2143 := by R2 lean_s11, lean_s2142, let37, [(- 1), 0]
let lean_s2144 := by R2 lean_s2143, lean_s2098, let24, [(- 1), 0]
let lean_s2145 := by R2 lean_s2144, lean_s2101, let29, [(- 1), 0]
let lean_s2146 := by R2 lean_s2145, lean_s2103, let33, [(- 1), 0]
let lean_s2147 := by R2 lean_s2146, lean_s1930, let31, [(- 1), 0]
exact (show False from by R2 lean_s2147, lean_s1684, let16, [0, 0])


