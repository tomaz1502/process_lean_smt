open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {distance : Int}
variable {fmtx5flength : Int}
variable {arg0 : Int}
variable {adrx5fmedlo : Int}
variable {xx5fcount : (Int -> Int)}
variable {xx5fcount : (Int -> Int)}
variable {fmt0 : Int}
variable {fmt1 : Int}
variable {s : Int}
variable {adrx5flo : Int}
variable {adrx5fmedhi : Int}
variable {format : (Int -> Int)}
variable {sx5fcount : (Int -> Int)}
variable {x : Int}
variable {sx5fcount : (Int -> Int)}
variable {arg1 : Int}
variable {adrx5fhi : Int}
variable {percent : Int}
variable {adrx5fmedhi : Int}
variable {arg0 : Int}
variable {percent : Int}
variable {fmtx5flength : Int}
variable {distance : Int}
variable {adrx5fmedlo : Int}
variable {format : (Int -> Int)}
variable {adrx5fhi : Int}
variable {s : Int}
variable {fmt0 : Int}
variable {arg1 : Int}
variable {adrx5flo : Int}
variable {x : Int}
variable {fmt1 : Int}

theorem th0 :
  let let1 := (Rat.ofInt 2)
  let let2 := (Neg.neg let1)
  let let3 := (Neg.neg (Rat.ofInt 4))
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% HAdd.hAdd let4 let3)
  let let6 := (binrel% HAdd.hAdd let1 let5)
  let let7 := (Int.ofNat 4)
  let let8 := (Eq fmt1 let7)
  let let9 := (Int.ofNat 2)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% HAdd.hAdd let10 fmt1)
  let let12 := (xx5fcount let11)
  let let13 := (sx5fcount let11)
  let let14 := (binrel% HAdd.hAdd let13 let12)
  let let15 := (binrel% GE.ge let14 let7)
  let let16 := (And let15 let8)
  let let17 := (xx5fcount let9)
  let let18 := (Int.ofNat 1)
  let let19 := (xx5fcount let18)
  let let20 := (Eq let19 let17)
  let let21 := (And let20 let16)
  let let22 := (Int.ofNat 0)
  let let23 := (xx5fcount let22)
  let let24 := (Eq let23 let19)
  let let25 := (And let24 let21)
  let let26 := (sx5fcount let9)
  let let27 := (Neg.neg let18)
  let let28 := (binrel% HAdd.hAdd let27 let26)
  let let29 := (sx5fcount let18)
  let let30 := (Eq let29 let28)
  let let31 := (sx5fcount let22)
  let let32 := (Eq let31 let29)
  let let33 := (And let32 (And let30 let25))
  let let34 := (Eq let23 let22)
  let let35 := (And let34 let33)
  let let36 := (Eq let31 let18)
  let let37 := (And let36 let35)
  let let38 := (Not let37)
  let let39 := (Implies let37 False)
  let let40 := (binrel% HAdd.hAdd let27 let17)
  let let41 := (Eq let19 let40)
  let let42 := (Eq let29 let26)
  let let43 := (And let32 (And let42 (And let24 (And let41 let16))))
  let let44 := (And let34 let43)
  let let45 := (And let36 let44)
  let let46 := (Not let45)
  let let47 := (Implies let45 False)
  let let48 := (Int.ofNat 3)
  let let49 := (Eq fmt1 let48)
  let let50 := (And let15 let49)
  let let51 := (And let24 let50)
  let let52 := (binrel% HAdd.hAdd let27 let29)
  let let53 := (Eq let31 let52)
  let let54 := (Eq let31 let22)
  let let55 := (And let54 (And let34 (And let53 let51)))
  let let56 := (Not let55)
  let let57 := (Implies let55 False)
  let let58 := (Eq let29 let18)
  let let59 := (Eq let22 let52)
  let let60 := (format let48)
  let let61 := (Eq s let60)
  let let62 := (Eq let60 s)
  let let63 := (Eq let26 let29)
  let let64 := (Rat.ofInt let12)
  let let65 := (Rat.ofInt 1)
  let let66 := (binrel% HMul.hMul let65 let12)
  let let67 := (sx5fcount let48)
  let let68 := (Eq let26 let67)
  let let69 := (Eq let67 let26)
  let let70 := (format let18)
  let let71 := (Eq x let70)
  let let72 := (Eq let70 x)
  let let73 := (format let22)
  let let74 := (Eq s let73)
  let let75 := (Eq let73 s)
  let let76 := (binrel% HAdd.hAdd let27 let19)
  let let77 := (Eq let23 let76)
  let let78 := (binrel% HAdd.hAdd let18 let23)
  let let79 := (Eq let19 let78)
  let let80 := (format let9)
  let let81 := (Eq x let80)
  let let82 := (Eq let80 x)
  let let83 := (Int.ofNat 16)
  let let84 := (Neg.neg let83)
  let let85 := (Eq let84 let84)
  let let86 := (Eq fmt1 let22)
  let let87 := (Eq let22 fmt1)
  let let88 := (Int.ofNat 255)
  let let89 := (Eq let70 let88)
  let let90 := (Int.ofNat 6)
  let let91 := (Eq let70 let90)
  let let92 := (Int.ofNat 5)
  let let93 := (Eq let70 let92)
  let let94 := (Eq let70 let7)
  let let95 := (Eq let70 let48)
  let let96 := (Or let95 (Or let94 (Or let93 (Or let91 let89))))
  let let97 := (Eq let70 s)
  let let98 := (Eq let70 percent)
  let let99 := (Or let98 (Or let97 (Or let72 let96)))
  let let100 := (Or (Or (Or (Or (Or (Or (Or let98 let97) let72) let95) let94) let93) let91) let89)
  let let101 := (binrel% HAdd.hAdd let18 let19)
  let let102 := (binrel% HAdd.hAdd let19 let18)
  let let103 := (xx5fcount let48)
  let let104 := (Eq let17 (binrel% HAdd.hAdd let27 let103))
  let let105 := (binrel% HAdd.hAdd let18 let17)
  let let106 := (Eq let103 let105)
  let let107 := (xx5fcount let7)
  let let108 := (Eq let103 (binrel% HAdd.hAdd let27 let107))
  let let109 := (binrel% HAdd.hAdd let18 let103)
  let let110 := (Eq let107 let109)
  let let111 := (Neg.neg let7)
  let let112 := (binrel% HMul.hMul let111 let12)
  let let113 := (binrel% HMul.hMul let111 let13)
  let let114 := (binrel% HAdd.hAdd let113 let112)
  let let115 := (binrel% HAdd.hAdd let83 let114)
  let let116 := (binrel% HMul.hMul let7 let12)
  let let117 := (binrel% HMul.hMul let7 let13)
  let let118 := (binrel% HAdd.hAdd let117 let116)
  let let119 := (binrel% HAdd.hAdd let84 let118)
  let let120 := (binrel% HMul.hMul let27 let119)
  let let121 := (Int.ofNat 115)
  let let122 := (Eq let60 let121)
  let let123 := (Int.ofNat 37)
  let let124 := (Eq let80 let123)
  let let125 := (And let124 let122)
  let let126 := (Not let125)
  let let127 := (Not let126)
  let let128 := (Eq let127 let125)
  let let129 := (sx5fcount let7)
  let let130 := (binrel% HAdd.hAdd let18 let129)
  let let131 := (binrel% HAdd.hAdd let129 let18)
  let let132 := (binrel% HMul.hMul let27 let18)
  let let133 := (binrel% HAdd.hAdd fmtx5flength let132)
  let let134 := (binrel% HSub.hSub fmtx5flength let18)
  let let135 := (Eq let70 let121)
  let let136 := (Eq let121 let70)
  let let137 := (format let90)
  let let138 := (Eq s let137)
  let let139 := (Eq let137 s)
  let let140 := (format let92)
  let let141 := (Eq percent let140)
  let let142 := (Eq let140 percent)
  let let143 := (binrel% HMul.hMul let27 fmt0)
  let let144 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let143 fmt1))
  let let145 := (binrel% HAdd.hAdd let11 let143)
  let let146 := (Eq let9 let11)
  let let147 := (format let7)
  let let148 := (Eq s let147)
  let let149 := (Eq let147 s)
  let let150 := (format fmt1)
  let let151 := (Eq percent let150)
  let let152 := (Eq let150 percent)
  let let153 := (Int.ofNat 120)
  let let154 := (Eq let147 let153)
  let let155 := (Eq let153 let147)
  let let156 := (And let32 let51)
  let let157 := (Eq let23 let18)
  let let158 := (And let54 (And let157 let156))
  let let159 := (Not let158)
  let let160 := (Implies let158 False)
  let let161 := (binrel% HAdd.hAdd let18 fmt1)
  let let162 := (binrel% HAdd.hAdd fmt1 let18)
  let let163 := (binrel% HAdd.hAdd let18 let67)
  let let164 := (binrel% HAdd.hAdd let67 let18)
  let let165 := (format let161)
  let let166 := (Eq s let165)
  let let167 := (Eq let165 s)
  let let168 := (binrel% HAdd.hAdd let9 arg1)
  let let169 := (binrel% HAdd.hAdd arg1 let9)
  let let170 := (binrel% HAdd.hAdd fmt0 let9)
  let let171 := (Eq arg1 let170)
  let let172 := (binrel% HAdd.hAdd fmt0 let18)
  let let173 := (Eq arg1 let172)
  let let174 := (binrel% HAdd.hAdd fmt0 let22)
  let let175 := (Eq arg1 let174)
  let let176 := (Or let175 (Or let173 let171))
  let let177 := (Or (Or let175 let173) let171)
  let let178 := (Eq let153 let123)
  let let179 := (Eq let178 False)
  let let180 := (sx5fcount let92)
  let let181 := (Eq let129 (binrel% HAdd.hAdd let27 let180))
  let let182 := (Eq let180 let130)
  let let183 := (binrel% HAdd.hAdd let9 fmt0)
  let let184 := (format let168)
  let let185 := (Eq adrx5fmedhi let184)
  let let186 := (Eq let184 adrx5fmedhi)
  let let187 := (binrel% HAdd.hAdd let48 arg1)
  let let188 := (format let187)
  let let189 := (Eq adrx5fhi let188)
  let let190 := (Eq let188 adrx5fhi)
  let let191 := (format arg1)
  let let192 := (Eq adrx5flo let191)
  let let193 := (Eq let191 adrx5flo)
  let let194 := (Not (binrel% GE.ge let14 let92))
  let let195 := (binrel% HAdd.hAdd (Int.ofNat 22) let114)
  let let196 := (binrel% GE.ge let195 let92)
  let let197 := (Eq let92 let92)
  let let198 := (binrel% HAdd.hAdd let18 arg1)
  let let199 := (format let198)
  let let200 := (Eq adrx5fmedlo let199)
  let let201 := (Eq let199 adrx5fmedlo)
  let let202 := (Eq let137 let153)
  let let203 := (Eq let153 let137)
  let let204 := (Eq x let140)
  let let205 := (Eq let140 x)
  let let206 := (binrel% HAdd.hAdd arg1 let48)
  let let207 := (xx5fcount let92)
  let let208 := (Eq let107 let207)
  let let209 := (Eq let207 let107)
  let let210 := (Eq let107 (binrel% HAdd.hAdd let27 let207))
  let let211 := (binrel% HAdd.hAdd let18 let107)
  let let212 := (Eq let207 let211)
  let let213 := (binrel% GE.ge let119 let22)
  let let214 := (Eq fmt1 let9)
  let let215 := (And let15 let214)
  let let216 := (And let34 let215)
  let let217 := (And let36 let216)
  let let218 := (Not let217)
  let let219 := (Implies let217 False)
  let let220 := (Eq percent let70)
  let let221 := (binrel% HMul.hMul let27 fmt1)
  let let222 := (binrel% HAdd.hAdd let90 let221)
  let let223 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let221 let90))
  let let224 := (Eq let140 let121)
  let let225 := (Eq let121 let140)
  let let226 := (Eq fmt0 fmt1)
  let let227 := (Eq fmt1 fmt0)
  let let228 := (Eq s let80)
  let let229 := (Eq let80 s)
  let let230 := (Eq let80 let153)
  let let231 := (Eq let153 let80)
  let let232 := (Eq let7 let7)
  let let233 := (Eq let48 let48)
  let let234 := (binrel% GE.ge fmt1 let9)
  let let235 := (Not let234)
  let let236 := (binrel% GE.ge let221 let27)
  let let237 := (Eq x let60)
  let let238 := (Eq let60 x)
  let let239 := (Eq let83 let83)
  let let240 := (binrel% HMul.hMul let27 let12)
  let let241 := (Eq let13 (binrel% HAdd.hAdd let7 let240))
  let let242 := (Eq let119 let22)
  let let243 := (Eq let60 let88)
  let let244 := (Eq let60 let90)
  let let245 := (Eq let60 let92)
  let let246 := (Eq let60 let7)
  let let247 := (Eq let60 let48)
  let let248 := (Or let247 (Or let246 (Or let245 (Or let244 let243))))
  let let249 := (Eq let60 percent)
  let let250 := (Or let249 (Or let62 (Or let238 let248)))
  let let251 := (Or (Or (Or (Or (Or (Or (Or let249 let62) let238) let247) let246) let245) let244) let243)
  let let252 := (Eq let60 let123)
  let let253 := (Eq let123 let60)
  let let254 := (format let206)
  let let255 := (Eq let254 adrx5fhi)
  let let256 := (format let169)
  let let257 := (Eq let256 adrx5fmedhi)
  let let258 := (binrel% HAdd.hAdd arg1 let18)
  let let259 := (format let258)
  let let260 := (Eq let259 adrx5fmedlo)
  let let261 := (format let162)
  let let262 := (Eq let261 s)
  let let263 := (Not let152)
  let let264 := (And let263 (And let262 (And let193 (And let260 (And let257 let255)))))
  let let265 := (And (And (And (And (And let263 let262) let193) let260) let257) let255)
  let let266 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let22 fmt1))
  let let267 := (And let34 let156)
  let let268 := (And let54 let267)
  let let269 := (Not let268)
  let let270 := (Implies let268 False)
  let let271 := (Not let15)
  let let272 := (binrel% GE.ge let115 let18)
  let let273 := (Eq let150 let123)
  let let274 := (Eq let123 let150)
  let let275 := (binrel% HMul.hMul let65 let18)
  let let276 := (Eq let90 let90)
  let let277 := (Eq let17 let18)
  let let278 := (Eq let22 let40)
  let let279 := (Eq let147 let123)
  let let280 := (Eq let123 let147)
  let let281 := (Eq let17 let9)
  let let282 := (Eq let18 let40)
  let let283 := (Eq let140 let123)
  let let284 := (Eq let123 let140)
  let let285 := (Neg.neg let65)
  let let286 := (binrel% HMul.hMul let285 let7)
  let let287 := (binrel% HAdd.hAdd let22 let84)
  let let288 := (binrel% HAdd.hAdd let103 let18)
  let let289 := (Eq let119 let18)
  let let290 := (Eq let26 let9)
  let let291 := (Eq let18 let28)
  let let292 := (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 13)) let118)
  let let293 := (format let292)
  let let294 := (Eq let293 let90)
  let let295 := (Eq let90 let293)
  let let296 := (Not let214)
  let let297 := (Not let296)
  let let298 := (Eq let214 let297)
  let let299 := (Eq let297 let214)
  let let300 := (binrel% HAdd.hAdd let17 let18)
  let let301 := (Eq percent let80)
  let let302 := (Eq let80 percent)
  let let303 := (And let36 let267)
  let let304 := (Not let303)
  let let305 := (Implies let303 False)
  let let306 := (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 14)) let118)
  let let307 := (format let306)
  let let308 := (Eq let307 let92)
  let let309 := (Eq let92 let307)
  let let310 := (Eq let22 let22)
  let let311 := (Eq x let147)
  let let312 := (Eq let147 x)
  let let313 := (Eq let60 let153)
  let let314 := (Eq let153 let60)
  let let315 := (Eq let26 (binrel% HAdd.hAdd let27 let67))
  let let316 := (binrel% HAdd.hAdd let18 let26)
  let let317 := (Eq let67 let316)
  let let318 := (Eq let17 let103)
  let let319 := (Eq let103 let17)
  let let320 := (binrel% HMul.hMul let27 let7)
  let let321 := (And let54 let35)
  let let322 := (Not let321)
  let let323 := (Implies let321 False)
  let let324 := (binrel% HMul.hMul let27 let22)
  let let325 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let116 let324)))
  let let326 := (binrel% HAdd.hAdd let119 let324)
  let let327 := (Eq let73 let153)
  let let328 := (Eq let153 let73)
  let let329 := (Eq let73 let121)
  let let330 := (Eq let121 let73)
  let let331 := (Eq percent let73)
  let let332 := (Eq let73 percent)
  let let333 := (Eq let73 let88)
  let let334 := (Eq let73 let90)
  let let335 := (Eq let73 let92)
  let let336 := (Eq let73 let7)
  let let337 := (Eq let73 let48)
  let let338 := (Or let337 (Or let336 (Or let335 (Or let334 let333))))
  let let339 := (Eq let73 x)
  let let340 := (Or let332 (Or let75 (Or let339 let338)))
  let let341 := (Or (Or (Or (Or (Or (Or (Or let332 let75) let339) let337) let336) let335) let334) let333)
  let let342 := (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 15)) let118)
  let let343 := (format let342)
  let let344 := (Eq let343 let7)
  let let345 := (Eq let7 let343)
  let let346 := (binrel% HAdd.hAdd let111 fmt1)
  let let347 := (Eq let22 let346)
  let let348 := (binrel% HAdd.hAdd let48 let119)
  let let349 := (Eq let348 let292)
  let let350 := (Eq let121 let60)
  let let351 := (Eq s let140)
  let let352 := (Eq let140 s)
  let let353 := (Eq let140 let153)
  let let354 := (Eq let153 let140)
  let let355 := (binrel% HAdd.hAdd let23 let18)
  let let356 := (binrel% HAdd.hAdd fmt0 (binrel% HAdd.hAdd let221 fmtx5flength))
  let let357 := (binrel% GE.ge let356 let9)
  let let358 := (Not let357)
  let let359 := (Not let358)
  let let360 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let1 let3))
  let let361 := (binrel% HAdd.hAdd (Neg.neg let92) fmt1)
  let let362 := (Eq fmt0 let361)
  let let363 := (binrel% HAdd.hAdd let92 fmt0)
  let let364 := (Eq fmt1 let363)
  let let365 := (Eq let137 let121)
  let let366 := (Eq let121 let137)
  let let367 := (binrel% HAdd.hAdd let26 let18)
  let let368 := (Eq let165 let121)
  let let369 := (Eq let121 let165)
  let let370 := (Not let235)
  let let371 := (binrel% HAdd.hAdd let48 fmt0)
  let let372 := (binrel% HAdd.hAdd fmt0 let48)
  let let373 := (binrel% GE.ge fmt1 let92)
  let let374 := (Not let373)
  let let375 := (binrel% LT.lt fmt1 let92)
  let let376 := (Eq let147 let121)
  let let377 := (Eq let121 let147)
  let let378 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let116 let114)))
  let let379 := (Or let241 (Or False False))
  let let380 := (binrel% HAdd.hAdd fmt1 let10)
  let let381 := (binrel% HAdd.hAdd let9 let22)
  let let382 := (Eq let17 let101)
  let let383 := (binrel% HAdd.hAdd (Neg.neg let48) fmt1)
  let let384 := (Eq let22 let383)
  let let385 := (Eq let22 let11)
  let let386 := (Eq fmt1 let92)
  let let387 := (Eq let22 let361)
  let let388 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let115 let83))
  let let389 := (binrel% HAdd.hAdd let7 fmt0)
  let let390 := (binrel% HAdd.hAdd fmt0 let7)
  let let391 := (Eq let67 let129)
  let let392 := (Eq let129 let67)
  let let393 := (binrel% LE.le let4 let2)
  let let394 := (Eq let119 let9)
  let let395 := (Eq let8 let8)
  let let396 := (binrel% HAdd.hAdd let22 let221)
  let let397 := (binrel% HAdd.hAdd let27 fmt1)
  let let398 := (Eq fmt0 let397)
  let let399 := (binrel% HAdd.hAdd let18 fmt0)
  let let400 := (Eq fmt1 let399)
  let let401 := (binrel% HAdd.hAdd let18 let29)
  let let402 := (Eq let26 let401)
  let let403 := (binrel% HAdd.hAdd let29 let18)
  let let404 := (And let283 let202)
  let let405 := (Not let404)
  let let406 := (Implies let405 let208)
  let let407 := (Implies let404 let210)
  let let408 := (Eq let103 let107)
  let let409 := (And let279 let353)
  let let410 := (Not let409)
  let let411 := (Implies let410 let408)
  let let412 := (Implies let409 let108)
  let let413 := (And let252 let154)
  let let414 := (Not let413)
  let let415 := (Implies let414 let318)
  let let416 := (Implies let413 let104)
  let let417 := (And let124 let313)
  let let418 := (Not let417)
  let let419 := (Implies let418 let20)
  let let420 := (Implies let417 let41)
  let let421 := (Eq let70 let123)
  let let422 := (And let421 let230)
  let let423 := (Not let422)
  let let424 := (Implies let423 let24)
  let let425 := (Implies let422 let77)
  let let426 := (Eq let70 let153)
  let let427 := (Eq let73 let123)
  let let428 := (And let427 let426)
  let let429 := (Not let428)
  let let430 := (Implies let429 let34)
  let let431 := (Implies let428 let157)
  let let432 := (Eq let129 let180)
  let let433 := (And let283 let365)
  let let434 := (Not let433)
  let let435 := (Implies let434 let432)
  let let436 := (Implies let433 let181)
  let let437 := (And let279 let224)
  let let438 := (Not let437)
  let let439 := (Implies let438 let391)
  let let440 := (Eq let67 (binrel% HAdd.hAdd let27 let129))
  let let441 := (Implies let437 let440)
  let let442 := (And let252 let376)
  let let443 := (Not let442)
  let let444 := (Implies let443 let68)
  let let445 := (Implies let442 let315)
  let let446 := (Implies let126 let42)
  let let447 := (Implies let125 let30)
  let let448 := (Eq let80 let121)
  let let449 := (And let421 let448)
  let let450 := (Not let449)
  let let451 := (Implies let450 let32)
  let let452 := (Implies let449 let53)
  let let453 := (And let427 let135)
  let let454 := (Not let453)
  let let455 := (Implies let454 let54)
  let let456 := (Implies let453 let36)
  let let457 := (Eq let140 let88)
  let let458 := (Eq let140 let90)
  let let459 := (Eq let140 let92)
  let let460 := (Eq let140 let7)
  let let461 := (Eq let140 let48)
  let let462 := (Or let461 (Or let460 (Or let459 (Or let458 let457))))
  let let463 := (Or let283 (Or let224 (Or let353 let462)))
  let let464 := (Eq let147 let88)
  let let465 := (Eq let147 let90)
  let let466 := (Eq let147 let92)
  let let467 := (Eq let147 let7)
  let let468 := (Eq let147 let48)
  let let469 := (Or let468 (Or let467 (Or let466 (Or let465 let464))))
  let let470 := (Or let279 (Or let376 (Or let154 let469)))
  let let471 := (Or let252 (Or let122 (Or let313 let248)))
  let let472 := (Eq let80 let88)
  let let473 := (Eq let80 let90)
  let let474 := (Eq let80 let92)
  let let475 := (Eq let80 let7)
  let let476 := (Eq let80 let48)
  let let477 := (Or let476 (Or let475 (Or let474 (Or let473 let472))))
  let let478 := (Or let124 (Or let448 (Or let230 let477)))
  let let479 := (Or let421 (Or let135 (Or let426 let96)))
  let let480 := (Or let427 (Or let329 (Or let327 let338)))
  let let481 := (Eq fmt1 let18)
  let let482 := (Or let86 (Or let481 (Or let214 (Or let49 (Or let8 let386)))))
  let let483 := (And let482 (And let241 (And let480 (And let479 (And let478 (And let471 (And let470 (And let463 (And let456 (And let455 (And let452 (And let451 (And let447 (And let446 (And let445 (And let444 (And let441 (And let439 (And let436 (And let435 (And let431 (And let430 (And let425 (And let424 (And let420 (And let419 (And let416 (And let415 (And let412 (And let411 (And let407 let406)))))))))))))))))))))))))))))))
  let let484 := (And let15 (And let374 (And let234 (And let194 let483))))
  let let485 := (And True (And True (And True (And True (And True (And True (And True (And True (And True (And True (And True (And let15 (And let374 (And let234 (And let15 (And let194 (And True let483)))))))))))))))))
  let let486 := (Eq let29 let31)
  let let487 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let324 fmt1))
  let let488 := (xx5fcount let487)
  let let489 := (binrel% HMul.hMul let111 let488)
  let let490 := (sx5fcount let487)
  let let491 := (binrel% HMul.hMul let111 let490)
  let let492 := (binrel% HAdd.hAdd let491 let489)
  let let493 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let116 let492)))
  let let494 := (binrel% HAdd.hAdd let119 let492)
  let let495 := (Eq fmt0 let383)
  let let496 := (Eq fmt1 let371)
  let let497 := (Eq let449 let449)
  let let498 := (binrel% GT.gt let65 let22)
  let let499 := (Eq let121 let123)
  let let500 := (Eq let499 False)
  let let501 := (binrel% HAdd.hAdd let18 let31)
  let let502 := (Eq let29 let501)
  let let503 := (binrel% HAdd.hAdd let31 let18)
  let let504 := (Eq s let70)
  let let505 := (Or let142 (Or let352 (Or let205 let462)))
  let let506 := (Or (Or (Or (Or (Or (Or (Or let142 let352) let205) let461) let460) let459) let458) let457)
  let let507 := (Eq let147 percent)
  let let508 := (Or let507 (Or let149 (Or let312 let469)))
  let let509 := (Or (Or (Or (Or (Or (Or (Or let507 let149) let312) let468) let467) let466) let465) let464)
  let let510 := (Or let302 (Or let229 (Or let82 let477)))
  let let511 := (Or (Or (Or (Or (Or (Or (Or let302 let229) let82) let476) let475) let474) let473) let472)
  let let512 := (Eq x let73)
  let let513 := (Eq let22 let397)
  let let514 := (And let54 (And let34 (And let32 (And let42 (And let77 let21)))))
  let let515 := (Not let514)
  let let516 := (Implies let514 False)
  let let517 := (Eq fmt0 let346)
  let let518 := (Eq fmt1 let389)
  let let519 := (Eq fmt0 let11)
  let let520 := (Eq fmt1 let183)
  let let521 := (format let119)
  let let522 := (Eq let521 let48)
  let let523 := (Eq let48 let521)
  let let524 := (Not let423)
  let let525 := (Eq let422 let524)
  let let526 := (Eq let524 let422)
  let let527 := (Not let271)
  let let528 := (xx5fcount let144)
  let let529 := (binrel% HMul.hMul let111 let528)
  let let530 := (sx5fcount let144)
  let let531 := (binrel% HMul.hMul let111 let530)
  let let532 := (binrel% HAdd.hAdd arg1 (binrel% HAdd.hAdd let531 let529))
  let let533 := (Eq arg0 let532)
  let let534 := (binrel% HMul.hMul let7 let528)
  let let535 := (binrel% HMul.hMul let7 let530)
  let let536 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let535 let534))
  let let537 := (Eq arg1 let536)
  let let538 := (Eq let123 let80)
  let let539 := (binrel% HMul.hMul let27 let9)
  let let540 := (binrel% HAdd.hAdd fmt0 let92)
  let let541 := (And let54 (And let157 let215))
  let let542 := (Not let541)
  let let543 := (Implies let541 False)
  let let544 := (binrel% HAdd.hAdd fmt1 let539)
  let let545 := (binrel% HSub.hSub fmt1 let9)
  let let546 := (And let54 (And let34 (And let32 (And let77 let50))))
  let let547 := (Not let546)
  let let548 := (Implies let546 False)
  let let549 := (binrel% HAdd.hAdd let545 let143)
  let let550 := (binrel% HSub.hSub let545 fmt0)
  let let551 := (Eq let123 let70)
  let let552 := (xx5fcount let550)
  let let553 := (binrel% HMul.hMul let7 let552)
  let let554 := (sx5fcount let550)
  let let555 := (binrel% HMul.hMul let7 let554)
  let let556 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let555 let553))
  let let557 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd arg0 let555) let553)
  let let558 := (Eq let107 let103)
  let let559 := (binrel% HAdd.hAdd distance fmtx5flength)
  let let560 := (binrel% HMul.hMul let27 arg1)
  let let561 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let560 let559))
  let let562 := (binrel% GE.ge let561 let92)
  let let563 := (Not let562)
  let let564 := (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd arg0 let559))
  let let565 := (binrel% GE.ge arg1 let564)
  let let566 := (Eq let417 let417)
  let let567 := (Eq percent let147)
  let let568 := (binrel% HAdd.hAdd let111 fmtx5flength)
  let let569 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd distance let568))
  let let570 := (binrel% HAdd.hAdd fmtx5flength let111)
  let let571 := (binrel% HAdd.hAdd fmtx5flength let320)
  let let572 := (binrel% HSub.hSub fmtx5flength let7)
  let let573 := (Eq let153 let153)
  let let574 := (Eq percent let60)
  let let575 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd distance let572))
  let let576 := (Eq let121 let121)
  let let577 := (binrel% GE.ge arg1 let575)
  let let578 := (Not let577)
  let let579 := (binrel% LT.lt arg1 let575)
  let let580 := (Eq let123 let123)
  let let581 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let560 distance))
  let let582 := (binrel% GE.ge let581 let18)
  let let583 := (Not let582)
  let let584 := (binrel% GE.ge arg1 (binrel% HAdd.hAdd arg0 distance))
  let let585 := (Eq let17 let19)
  let let586 := (binrel% HAdd.hAdd fmt0 let221)
  let let587 := (binrel% GE.ge let586 let27)
  let let588 := (binrel% LE.le fmt1 let399)
  let let589 := (Not False)
  let let590 := (binrel% LE.le fmt1 let172)
  let let591 := (Not let590)
  let let592 := (binrel% GT.gt fmt1 let172)
  let let593 := (Eq let19 let23)
  let let594 := (Eq let18 let11)
  let let595 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd fmt0 fmtx5flength))
  let let596 := (binrel% GE.ge fmt1 let595)
  let let597 := (binrel% HAdd.hAdd let27 fmtx5flength)
  let let598 := (binrel% HAdd.hAdd fmtx5flength let27)
  let let599 := (Eq let121 let153)
  let let600 := (Not let599)
  let let601 := (Eq let599 False)
  let let602 := (binrel% HAdd.hAdd fmt0 let134)
  let let603 := (binrel% GE.ge fmt1 let602)
  let let604 := (Not let603)
  let let605 := (binrel% LT.lt fmt1 let602)
  let let606 := (binrel% HAdd.hAdd arg1 let143)
  let let607 := (binrel% GE.ge let606 let22)
  let let608 := (binrel% GE.ge arg1 fmt0)
  let let609 := (Not let454)
  let let610 := (Eq let453 let609)
  let let611 := (Eq let609 let453)
  let let612 := (Eq let180 let129)
  let let613 := (binrel% HMul.hMul let27 distance)
  let let614 := (binrel% HAdd.hAdd fmt0 let613)
  let let615 := (binrel% HSub.hSub fmt0 distance)
  let let616 := (binrel% HAdd.hAdd fmt0 let597)
  let let617 := (Not let178)
  let let618 := (Eq let137 x)
  let let619 := (And let142 let618)
  let let620 := (Not let619)
  let let621 := (Implies let620 let209)
  let let622 := (binrel% HAdd.hAdd let107 let18)
  let let623 := (Eq let207 let622)
  let let624 := (Implies let619 let623)
  let let625 := (And let624 let621)
  let let626 := (And let507 let205)
  let let627 := (Not let626)
  let let628 := (Implies let627 let558)
  let let629 := (Eq let107 let288)
  let let630 := (Implies let626 let629)
  let let631 := (And let249 let312)
  let let632 := (Not let631)
  let let633 := (Implies let632 let319)
  let let634 := (Eq let103 let300)
  let let635 := (Implies let631 let634)
  let let636 := (And let302 let238)
  let let637 := (Not let636)
  let let638 := (Implies let637 let585)
  let let639 := (Eq let17 let102)
  let let640 := (Implies let636 let639)
  let let641 := (And let98 let82)
  let let642 := (Not let641)
  let let643 := (Implies let642 let593)
  let let644 := (Eq let19 let355)
  let let645 := (Implies let641 let644)
  let let646 := (And let332 let72)
  let let647 := (Not let646)
  let let648 := (Implies let647 let34)
  let let649 := (Implies let646 let157)
  let let650 := (And let142 let139)
  let let651 := (Not let650)
  let let652 := (Implies let651 let612)
  let let653 := (Eq let180 let131)
  let let654 := (Implies let650 let653)
  let let655 := (And let507 let352)
  let let656 := (Not let655)
  let let657 := (Implies let656 let392)
  let let658 := (Eq let129 let164)
  let let659 := (Implies let655 let658)
  let let660 := (And let249 let149)
  let let661 := (Not let660)
  let let662 := (Implies let661 let69)
  let let663 := (Eq let67 let367)
  let let664 := (Implies let660 let663)
  let let665 := (And let302 let62)
  let let666 := (Not let665)
  let let667 := (Implies let666 let63)
  let let668 := (Eq let26 let403)
  let let669 := (Implies let665 let668)
  let let670 := (And let98 let229)
  let let671 := (Not let670)
  let let672 := (Implies let671 let486)
  let let673 := (Eq let29 let503)
  let let674 := (Implies let670 let673)
  let let675 := (And let332 let97)
  let let676 := (Not let675)
  let let677 := (Implies let676 let54)
  let let678 := (Implies let675 let36)
  let let679 := (Eq fmt1 let540)
  let let680 := (Eq fmt1 let390)
  let let681 := (Eq fmt1 let372)
  let let682 := (Eq fmt1 let170)
  let let683 := (Eq fmt1 let172)
  let let684 := (Eq fmt1 let174)
  let let685 := (Or (Or (Or (Or (Or let684 let683) let682) let681) let680) let679)
  let let686 := (Eq arg1 let557)
  let let687 := (Eq arg0 let615)
  let let688 := (Eq fmt0 let22)
  let let689 := (Eq x let153)
  let let690 := (Eq s let121)
  let let691 := (Eq percent let123)
  let let692 := (Eq adrx5fhi let90)
  let let693 := (Eq adrx5fmedhi let92)
  let let694 := (Eq adrx5fmedlo let7)
  let let695 := (Eq adrx5flo let48)
  let let696 := (Eq fmtx5flength let90)
  let let697 := (Eq distance let83)
  let let698 := (And let697 (And let696 (And let695 (And let694 (And let693 (And let692 (And let691 (And let690 (And let689 (And let688 (And let687 (And let608 (And let605 (And let592 (And let584 (And let579 (And let686 (And let685 (And let177 (And let341 (And let100 (And let511 (And let251 (And let509 (And let506 (And let678 (And let677 (And let674 (And let672 (And let669 (And let667 (And let664 (And let662 (And let659 (And let657 (And let654 (And let652 (And let649 (And let648 (And let645 (And let643 (And let640 (And let638 (And let635 (And let633 (And let630 (And let628 let625)))))))))))))))))))))))))))))))))))))))))))))))
  let let699 := (And (And (And (And (And (And (And (And (And (And (And let697 let696) let695) let694) let693) let692) (And (And let691 let690) let689)) (And (And (And (And (And (And (And let688 let687) let608) let605) let592) let584) let579) let686)) (And let685 let177)) (And (And (And (And (And let341 let100) let511) let251) let509) let506)) (And (And (And (And (And (And let678 let677) (And let674 let672)) (And let669 let667)) (And let664 let662)) (And let659 let657)) (And let654 let652))) (And (And (And (And (And (And let649 let648) (And let645 let643)) (And let640 let638)) (And let635 let633)) (And let630 let628)) let625))
  let let700 := (Eq arg1 let119)
  let let701 := (binrel% HAdd.hAdd arg1 let114)
  let let702 := (Eq let84 let701)
  let let703 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let27 let13) let240))
  let let704 := (binrel% HMul.hMul let285 let14)
  let let705 := (Not let429)
  let let706 := (Eq let705 let428)
  let let707 := (Eq let453 let453)
  let let708 := (Rat.ofInt let13)
  let let709 := (binrel% HAdd.hAdd let708 (binrel% HAdd.hAdd let64 let703))
  let let710 := (Eq let428 let705)
  let let711 := (Not let499)
  let let712 := (binrel% HAdd.hAdd let9 let119)
  let let713 := (Eq let712 let306)
  let let714 := (Not let450)
  let let715 := (Eq let449 let714)
  let let716 := (Eq let714 let449)
  let let717 := (binrel% HAdd.hAdd let18 let119)
  let let718 := (Eq let717 let342)
  let let719 := (Eq let422 let422)
  let let720 := (Not let418)
  let let721 := (Eq let720 let417)
  let let722 := (Eq let214 let214)
  let let723 := (Eq let417 let720)
  let let724 := (binrel% HAdd.hAdd let83 let90)
  let let725 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let115 let724))
  let let726 := (And let54 (And let157 let33))
  let let727 := (Not let726)
  let let728 := (Implies let726 False)
  let let729 := (binrel% HAdd.hAdd let18 let22)
  let let730 := (binrel% HAdd.hAdd let65 let3)
  let let731 := (binrel% HAdd.hAdd let65 let730)
  let let732 := (binrel% HMul.hMul let65 let13)
  let let733 := (binrel% LT.lt let285 let22)
  let let734 := (Eq let26 let18)
  let let735 := (Eq let22 let28)
  let let736 := (Neg.neg (Rat.ofInt 3))
  let let737 := (binrel% HAdd.hAdd let4 let730)
  let let738 := (Or let684 (Or let683 (Or let682 (Or let681 (Or let680 let679)))))
  let let739 := (Eq let125 let125)
  let let740 := (Eq let125 let127)
  let let741 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let116 let22)))
  let let742 := (And let42 let25)
  let let743 := (And let32 let742)
  let let744 := (And let34 let743)
  let let745 := (And let54 let744)
  let let746 := (Not let745)
  let let747 := (Implies let745 False)
  let let748 := (binrel% HMul.hMul let27 let83)
  let let749 := (binrel% LE.le let4 let3)
  let let750 := (binrel% HAdd.hAdd let4 let5)
  let let751 := (Eq let121 let80)
  let let752 := (binrel% HMul.hMul let65 let22)
  let let753 := (Eq let428 let428)
  let let754 := (And let54 (And let157 let743))
  let let755 := (Not let754)
  let let756 := (Implies let754 False)
  let let757 := (Eq let129 let163)
  let let758 := (binrel% LE.le let4 let736)
  let let759 := (And let36 let744)
  let let760 := (Not let759)
  let let761 := (Implies let759 False)
  let let762 := (binrel% HAdd.hAdd let65 let5)
  let let763 := (And let54 (And let157 let43))
  let let764 := (Not let763)
  let let765 := (Implies let763 False)
  let let766 := (binrel% GE.ge let222 let9)
  let let767 := (Eq x let137)
  let let768 := (Not let8)
  let let769 := (Not let768)
  let let770 := (Eq let8 let769)
  let let771 := (Eq let769 let8)
  let let772 := (binrel% HMul.hMul let65 let9)
  let let773 := (And let54 let216)
  let let774 := (Not let773)
  let let775 := (Implies let773 False)
  let let776 := (Eq let373 let373)
  let let777 := (Eq let153 let70)
  let let778 := (Not let563)
  let let779 := (Not let374)
  let let780 := (Eq let779 let373)
  let let781 := (Eq let123 let73)
  let let782 := (Eq let373 let779)
  let let783 := (And let54 let44)
  let let784 := (Not let783)
  let let785 := (Implies let783 False)
  let let786 := (Eq let19 let18)
  let let787 := (Eq let22 let76)
  let let788 := (And let54 (And let34 (And let53 let742)))
  let let789 := (Not let788)
  let let790 := (Implies let788 False)
  let let791 := (Implies let699 let265)
  let let792 := (Not let791)
  let let793 := (Not let273)
  let let794 := (And let793 (And let368 (And let522 (And let344 (And let308 let294)))))
  let let795 := (Implies let484 let794)
  let let796 := (Not let795)
  let let797 := (Not let151)
  let let798 := (And let797 (And let166 (And let192 (And let200 (And let185 let189)))))
  let let799 := (And let141 let767)
  let let800 := (Not let799)
  let let801 := (Implies let800 let208)
  let let802 := (Implies let799 let210)
  let let803 := (And let567 let204)
  let let804 := (Not let803)
  let let805 := (Implies let804 let408)
  let let806 := (Implies let803 let108)
  let let807 := (And let574 let311)
  let let808 := (Not let807)
  let let809 := (Implies let808 let318)
  let let810 := (Implies let807 let104)
  let let811 := (And let301 let237)
  let let812 := (Not let811)
  let let813 := (Implies let812 let20)
  let let814 := (Implies let811 let41)
  let let815 := (And let220 let81)
  let let816 := (Not let815)
  let let817 := (Implies let816 let24)
  let let818 := (Implies let815 let77)
  let let819 := (And let331 let71)
  let let820 := (Not let819)
  let let821 := (Implies let820 let34)
  let let822 := (Implies let819 let157)
  let let823 := (And let141 let138)
  let let824 := (Not let823)
  let let825 := (Implies let824 let432)
  let let826 := (Implies let823 let181)
  let let827 := (And let567 let351)
  let let828 := (Not let827)
  let let829 := (Implies let828 let391)
  let let830 := (Implies let827 let440)
  let let831 := (And let574 let148)
  let let832 := (Not let831)
  let let833 := (Implies let832 let68)
  let let834 := (Implies let831 let315)
  let let835 := (And let301 let61)
  let let836 := (Not let835)
  let let837 := (Implies let836 let42)
  let let838 := (Implies let835 let30)
  let let839 := (And let220 let228)
  let let840 := (Not let839)
  let let841 := (Implies let840 let32)
  let let842 := (Implies let839 let53)
  let let843 := (And let331 let504)
  let let844 := (Not let843)
  let let845 := (Implies let844 let54)
  let let846 := (Implies let843 let36)
  let let847 := (Or let141 (Or let351 (Or let204 let462)))
  let let848 := (Or let567 (Or let148 (Or let311 let469)))
  let let849 := (Or let574 (Or let61 (Or let237 let248)))
  let let850 := (Or let301 (Or let228 (Or let81 let477)))
  let let851 := (Or let220 (Or let504 (Or let71 let96)))
  let let852 := (Or let331 (Or let74 (Or let512 let338)))
  let let853 := (Eq arg1 let183)
  let let854 := (Eq arg1 let399)
  let let855 := (Eq arg1 fmt0)
  let let856 := (Or let855 (Or let854 let853))
  let let857 := (Or let226 (Or let398 (Or let519 (Or let495 (Or let517 let362)))))
  let let858 := (Not let587)
  let let859 := (Eq arg0 let614)
  let let860 := (And let697 (And let696 (And let695 (And let694 (And let693 (And let692 (And let691 (And let690 (And let689 (And let688 (And let859 (And let607 (And let357 (And let858 (And let583 (And let562 (And let533 (And let857 (And let856 (And let852 (And let851 (And let850 (And let849 (And let848 (And let847 (And let846 (And let845 (And let842 (And let841 (And let838 (And let837 (And let834 (And let833 (And let830 (And let829 (And let826 (And let825 (And let822 (And let821 (And let818 (And let817 (And let814 (And let813 (And let810 (And let809 (And let806 (And let805 (And let802 let801))))))))))))))))))))))))))))))))))))))))))))))))
  let let861 := (Implies let860 let798)
  let let862 := (Not let861)
  let let863 := (format let348)
  let let864 := (Eq let90 let863)
  let let865 := (format let712)
  let let866 := (Eq let92 let865)
  let let867 := (format let717)
  let let868 := (Eq let7 let867)
  let let869 := (Not let274)
  let let870 := (And let869 (And let369 (And let523 (And let868 (And let866 let864)))))
  let let871 := (And let284 let203)
  let let872 := (Not let871)
  let let873 := (Implies let872 let208)
  let let874 := (Implies let871 let210)
  let let875 := (And let280 let354)
  let let876 := (Not let875)
  let let877 := (Implies let876 let408)
  let let878 := (Implies let875 let108)
  let let879 := (And let253 let155)
  let let880 := (Not let879)
  let let881 := (Implies let880 let318)
  let let882 := (Implies let879 let104)
  let let883 := (And let538 let314)
  let let884 := (Not let883)
  let let885 := (Implies let884 let20)
  let let886 := (Implies let883 let41)
  let let887 := (And let551 let231)
  let let888 := (Not let887)
  let let889 := (Implies let888 let24)
  let let890 := (Implies let887 let77)
  let let891 := (And let781 let777)
  let let892 := (Not let891)
  let let893 := (Implies let892 let34)
  let let894 := (Implies let891 let157)
  let let895 := (And let284 let366)
  let let896 := (Not let895)
  let let897 := (Implies let896 let432)
  let let898 := (Implies let895 let181)
  let let899 := (And let280 let225)
  let let900 := (Not let899)
  let let901 := (Implies let900 let391)
  let let902 := (Implies let899 let440)
  let let903 := (And let253 let377)
  let let904 := (Not let903)
  let let905 := (Implies let904 let68)
  let let906 := (Implies let903 let315)
  let let907 := (And let538 let350)
  let let908 := (Not let907)
  let let909 := (Implies let908 let42)
  let let910 := (Implies let907 let30)
  let let911 := (And let551 let751)
  let let912 := (Not let911)
  let let913 := (Implies let912 let32)
  let let914 := (Implies let911 let53)
  let let915 := (And let781 let136)
  let let916 := (Not let915)
  let let917 := (Implies let916 let54)
  let let918 := (Implies let915 let36)
  let let919 := (Or let284 (Or let225 (Or let354 let462)))
  let let920 := (Or let280 (Or let377 (Or let155 let469)))
  let let921 := (Or let253 (Or let350 (Or let314 let248)))
  let let922 := (Or let538 (Or let751 (Or let231 let477)))
  let let923 := (Or let551 (Or let136 (Or let777 let96)))
  let let924 := (Or let781 (Or let330 (Or let328 let338)))
  let let925 := (Eq let119 let381)
  let let926 := (Eq let119 let729)
  let let927 := (Or let242 (Or let926 let925))
  let let928 := (Or let87 (Or let513 (Or let385 (Or let384 (Or let347 let387)))))
  let let929 := (Eq let84 let494)
  let let930 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let120 let724))
  let let931 := (binrel% GE.ge let930 let92)
  let let932 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let120 let83))
  let let933 := (binrel% GE.ge let932 let18)
  let let934 := (Not let933)
  let let935 := (binrel% GE.ge let396 let27)
  let let936 := (Not let935)
  let let937 := (binrel% GE.ge let223 let9)
  let let938 := (binrel% GE.ge let326 let22)
  let let939 := (binrel% HAdd.hAdd let22 let748)
  let let940 := (Eq let84 let939)
  let let941 := (And let239 (And let276 (And let233 (And let232 (And let197 (And let276 (And let580 (And let576 (And let573 (And let310 (And let940 (And let938 (And let937 (And let936 (And let934 (And let931 (And let929 (And let928 (And let927 (And let924 (And let923 (And let922 (And let921 (And let920 (And let919 (And let918 (And let917 (And let914 (And let913 (And let910 (And let909 (And let906 (And let905 (And let902 (And let901 (And let898 (And let897 (And let894 (And let893 (And let890 (And let889 (And let886 (And let885 (And let882 (And let881 (And let878 (And let877 (And let874 let873))))))))))))))))))))))))))))))))))))))))))))))))
  let let942 := (Implies let941 let870)
  let let943 := (Not let942)
  let let944 := (Eq And And)
  let let945 := (Eq let208 let208)
  let let946 := (Eq let210 let210)
  let let947 := (Eq let408 let408)
  let let948 := (Eq let108 let108)
  let let949 := (Eq let318 let318)
  let let950 := (Eq let104 let104)
  let let951 := (Eq let20 let20)
  let let952 := (Eq let41 let41)
  let let953 := (Eq let24 let24)
  let let954 := (Eq let77 let77)
  let let955 := (Eq let34 let34)
  let let956 := (Eq let157 let157)
  let let957 := (Eq let432 let432)
  let let958 := (Eq let181 let181)
  let let959 := (Eq let391 let391)
  let let960 := (Eq let440 let440)
  let let961 := (Eq let68 let68)
  let let962 := (Eq let315 let315)
  let let963 := (Eq let42 let42)
  let let964 := (Eq let30 let30)
  let let965 := (Eq let32 let32)
  let let966 := (Eq let53 let53)
  let let967 := (Eq let54 let54)
  let let968 := (Eq let36 let36)
  let let969 := (Eq let457 let457)
  let let970 := (Eq let458 let458)
  let let971 := (Eq Or Or)
  let let972 := (Eq let459 let459)
  let let973 := (Eq let460 let460)
  let let974 := (Eq let461 let461)
  let let975 := (Eq let464 let464)
  let let976 := (Eq let465 let465)
  let let977 := (Eq let466 let466)
  let let978 := (Eq let467 let467)
  let let979 := (Eq let468 let468)
  let let980 := (Eq let243 let243)
  let let981 := (Eq let244 let244)
  let let982 := (Eq let245 let245)
  let let983 := (Eq let246 let246)
  let let984 := (Eq let247 let247)
  let let985 := (Eq let472 let472)
  let let986 := (Eq let473 let473)
  let let987 := (Eq let474 let474)
  let let988 := (Eq let475 let475)
  let let989 := (Eq let476 let476)
  let let990 := (Eq let89 let89)
  let let991 := (Eq let91 let91)
  let let992 := (Eq let93 let93)
  let let993 := (Eq let94 let94)
  let let994 := (Eq let95 let95)
  let let995 := (Eq let333 let333)
  let let996 := (Eq let334 let334)
  let let997 := (Eq let335 let335)
  let let998 := (Eq let336 let336)
  let let999 := (Eq let337 let337)
  let let1000 := (Eq fmt1 fmt1)
  let let1001 := (Eq let10 let10)
  let let1002 := (Eq let111 let111)
  let let1003 := (Eq let18 let18)
  let let1004 := (Eq let27 let27)
  let let1005 := (Eq let9 let9)
  let let1006 := (And let688 (And let689 (And let690 (And let691 (And let692 (And let693 (And let694 (And let695 (And let696 let697)))))))))
  let let1007 := (Eq arg0 let84)
  let let1008 := (And let1007 let1006)
  let let1009 := (Eq arg1 arg1)
  let let1010 := (Eq arg0 arg0)
  let let1011 := (Eq let575 let564)
  let let1012 := (Eq arg0 let939)
  let let1013 := (Eq let614 let939)
  let let1014 := (Eq let613 let748)
  let let1015 := (binrel% HAdd.hAdd arg1 let492)
  let let1016 := (Eq let84 let1015)
  let let1017 := (Eq let529 let489)
  let let1018 := (Eq let528 let488)
  let let1019 := (Eq let144 let487)
  let let1020 := (Eq let143 let324)
  let let1021 := (Eq let531 let491)
  let let1022 := (Eq let530 let490)
  let let1023 := (Or let429 let429)
  let let1024 := (Not let426)
  let let1025 := (Not let157)
  let let1026 := (Not let135)
  let let1027 := (Or let1026 let1024)
  let let1028 := (Implies let135 let1024)
  let let1029 := (Not let421)
  let let1030 := (Or let1024 let1029)
  let let1031 := (Implies let426 let1029)
  let let1032 := (Eq let421 False)
  let let1033 := (Or let453 let54)
  let let1034 := (Or let609 let54)
  let let1035 := (Not let54)
  let let1036 := (Or let449 let32)
  let let1037 := (Or let714 let32)
  let let1038 := (Or let422 let24)
  let let1039 := (Or let524 let24)
  let let1040 := (Not let24)
  let let1041 := (Or let1025 let1040)
  let let1042 := (Not let32)
  let let1043 := (Or let1035 (Or let1042 let1041))
  let let1044 := (Or let768 let1043)
  let let1045 := (Or let126 let126)
  let let1046 := (Not let313)
  let let1047 := (Or (Not let122) let1046)
  let let1048 := (Implies let122 let1046)
  let let1049 := (Or let417 let20)
  let let1050 := (Or let720 let20)
  let let1051 := (Not let20)
  let let1052 := (Or let1040 let1051)
  let let1053 := (Or let1025 let1052)
  let let1054 := (Not let30)
  let let1055 := (Or let271 let768)
  let let1056 := (Or let1051 let1055)
  let let1057 := (Or let1040 let1056)
  let let1058 := (Or let1042 (Or let1054 let1057))
  let let1059 := (Eq let18 let13)
  let let1060 := (Eq let18 let12)
  let let1061 := (And let15 (And let1060 let1059))
  let let1062 := (Implies let726 let1061)
  let let1063 := (Eq let1061 False)
  let let1064 := (Or (Not let1059) False)
  let let1065 := (Not let1060)
  let let1066 := (Eq let13 let18)
  let let1067 := (Not let1066)
  let let1068 := (Or let1067 False)
  let let1069 := (binrel% HAdd.hAdd let275 let286)
  let let1070 := (binrel% HAdd.hAdd let275 let1069)
  let let1071 := (binrel% HAdd.hAdd let732 (binrel% HAdd.hAdd let66 let704))
  let let1072 := (binrel% LE.le let1071 let1070)
  let let1073 := (binrel% LE.le let704 let286)
  let let1074 := (And let733 let15)
  let let1075 := (Implies let1074 let1073)
  let let1076 := (Eq let66 let275)
  let let1077 := (Eq let12 let18)
  let let1078 := (And let498 let1077)
  let let1079 := (Implies let1078 let1076)
  let let1080 := (Eq let732 let275)
  let let1081 := (And let498 let1066)
  let let1082 := (Implies let1081 let1080)
  let let1083 := (Or let271 (Or let768 let1061))
  let let1084 := (Eq let18 let26)
  let let1085 := (And let146 let1084)
  let let1086 := (Implies let1085 let1059)
  let let1087 := (Not let146)
  let let1088 := (Or let1087 (Or (Not let1084) let1059))
  let let1089 := (Eq let26 let13)
  let let1090 := (Eq let11 let9)
  let let1091 := (Implies let735 let1084)
  let let1092 := (Or (Not let735) let1084)
  let let1093 := (And let32 let54)
  let let1094 := (And let30 let1093)
  let let1095 := (Implies let1094 let735)
  let let1096 := (Or let1054 (Or let1042 (Or let1035 let735)))
  let let1097 := (Eq let28 let29)
  let let1098 := (Eq let22 let31)
  let let1099 := (Eq let8 let146)
  let let1100 := (And let24 let157)
  let let1101 := (And let146 (And let20 let1100))
  let let1102 := (Implies let1101 let1060)
  let let1103 := (Or let1025 let1060)
  let let1104 := (Or let1040 let1103)
  let let1105 := (Or let1087 (Or let1051 let1104))
  let let1106 := (Eq let17 let12)
  let let1107 := (Eq let18 let23)
  let let1108 := (Or let125 let42)
  let let1109 := (Or let127 let42)
  let let1110 := (Not let42)
  let let1111 := (Or let1042 (Or let1110 let1052))
  let let1112 := (Or let768 let1111)
  let let1113 := (Or let768 (Or let1035 let1111))
  let let1114 := (Not let34)
  let let1115 := (Or let1114 let1052)
  let let1116 := (Or let1110 let1115)
  let let1117 := (Or let1042 let1116)
  let let1118 := (Or let1110 let1057)
  let let1119 := (Or let1042 let1118)
  let let1120 := (Or let1114 let1119)
  let let1121 := (Eq let22 let13)
  let let1122 := (Eq let22 let12)
  let let1123 := (And let15 (And let1122 let1121))
  let let1124 := (Implies let745 let1123)
  let let1125 := (Eq let1123 False)
  let let1126 := (Or (Not let1121) False)
  let let1127 := (Not let1122)
  let let1128 := (Eq let13 let22)
  let let1129 := (Not let1128)
  let let1130 := (Or let1129 False)
  let let1131 := (binrel% HAdd.hAdd let752 let286)
  let let1132 := (binrel% HAdd.hAdd let752 let1131)
  let let1133 := (binrel% LE.le let1071 let1132)
  let let1134 := (Eq let66 let752)
  let let1135 := (Eq let12 let22)
  let let1136 := (And let498 let1135)
  let let1137 := (Implies let1136 let1134)
  let let1138 := (Eq let732 let752)
  let let1139 := (And let498 let1128)
  let let1140 := (Implies let1139 let1138)
  let let1141 := (And let146 (And let42 let1093))
  let let1142 := (Implies let1141 let1121)
  let let1143 := (Or let1035 let1121)
  let let1144 := (Or let1042 let1143)
  let let1145 := (Or let1087 (Or let1110 let1144))
  let let1146 := (And let24 let34)
  let let1147 := (And let146 (And let20 let1146))
  let let1148 := (Implies let1147 let1122)
  let let1149 := (Or let1114 let1122)
  let let1150 := (Or let1040 let1149)
  let let1151 := (Or let1087 (Or let1051 let1150))
  let let1152 := (Eq let22 let23)
  let let1153 := (Or let428 let34)
  let let1154 := (Or let705 let34)
  let let1155 := (And let15 (And let1060 let1121))
  let let1156 := (Implies let754 let1155)
  let let1157 := (Eq let1155 False)
  let let1158 := (binrel% HAdd.hAdd let752 let1069)
  let let1159 := (binrel% LE.le let1071 let1158)
  let let1160 := (Or let271 (Or let768 let1155))
  let let1161 := (Or let1051 let1160)
  let let1162 := (Not let36)
  let let1163 := (And let15 (And let1122 let1059))
  let let1164 := (Implies let759 let1163)
  let let1165 := (Eq let1163 False)
  let let1166 := (binrel% HAdd.hAdd let275 let1131)
  let let1167 := (binrel% LE.le let1071 let1166)
  let let1168 := (Or let1040 (Or let1051 (Or let271 (Or let768 let1163))))
  let let1169 := (Or let1110 let1168)
  let let1170 := (And let32 let36)
  let let1171 := (And let146 (And let42 let1170))
  let let1172 := (Implies let1171 let1059)
  let let1173 := (Or let1162 let1059)
  let let1174 := (Or let1042 let1173)
  let let1175 := (Or let1087 (Or let1110 let1174))
  let let1176 := (Eq let18 let31)
  let let1177 := (Not let41)
  let let1178 := (Or let1040 let1177)
  let let1179 := (Or let1042 (Or let1110 (Or let1040 (Or let1177 let1055))))
  let let1180 := (Eq let9 let12)
  let let1181 := (And let15 (And let1180 let1121))
  let let1182 := (Implies let763 let1181)
  let let1183 := (binrel% HAdd.hAdd let752 (binrel% HAdd.hAdd let772 let286))
  let let1184 := (binrel% LE.le let1071 let1183)
  let let1185 := (Eq let66 let772)
  let let1186 := (Eq let12 let9)
  let let1187 := (And let498 let1186)
  let let1188 := (Eq let9 let17)
  let let1189 := (And let146 let1188)
  let let1190 := (And let41 let1100)
  let let1191 := (Eq let40 let19)
  let let1192 := (binrel% GE.ge fmt1 let48)
  let let1193 := (Or let296 let1114)
  let let1194 := (Or let271 let296)
  let let1195 := (Or let1114 let1194)
  let let1196 := (Implies let773 let1123)
  let let1197 := (And let385 let54)
  let let1198 := (Implies let1197 let1121)
  let let1199 := (Not let385)
  let let1200 := (Or let1199 let1143)
  let let1201 := (Eq let31 let13)
  let let1202 := (Eq let11 let22)
  let let1203 := (Eq let214 let385)
  let let1204 := (And let385 let34)
  let let1205 := (Implies let1204 let1122)
  let let1206 := (Or let1199 let1149)
  let let1207 := (Eq let23 let12)
  let let1208 := (Implies let217 let1163)
  let let1209 := (And let385 let36)
  let let1210 := (Implies let541 let1155)
  let let1211 := (And let385 let157)
  let let1212 := (Or let235 (Or let214 let1192))
  let let1213 := (Or let235 (Or let297 let1192))
  let let1214 := (And let234 let296)
  let let1215 := (Implies let1214 let1192)
  let let1216 := (Not let1192)
  let let1217 := (Or let1216 let49)
  let let1218 := (Or let373 (Or let8 let1217))
  let let1219 := (Or let779 (Or let769 let1217))
  let let1220 := (And let374 (And let768 let1192))
  let let1221 := (Eq let48 fmt1)
  let let1222 := (And let1192 (And let374 let768))
  let let1223 := (Not let49)
  let let1224 := (Or let271 let1223)
  let let1225 := (Or let1040 let1224)
  let let1226 := (Or let1042 let1225)
  let let1227 := (Implies let158 let1155)
  let let1228 := (Or let271 (Or let1223 let1155))
  let let1229 := (And let594 let1093)
  let let1230 := (Implies let1229 let1121)
  let let1231 := (Not let594)
  let let1232 := (Or let1231 let1144)
  let let1233 := (Eq let29 let13)
  let let1234 := (Eq let11 let18)
  let let1235 := (Eq let49 let594)
  let let1236 := (And let594 let1100)
  let let1237 := (Eq let19 let12)
  let let1238 := (Or let768 let1035)
  let let1239 := (Or let1035 let1042)
  let let1240 := (Or let768 let1239)
  let let1241 := (Or let768 (Or let1035 (Or let1042 let1040)))
  let let1242 := (Or let1042 (Or let1110 (Or let1114 let1178)))
  let let1243 := (Or let1114 let1179)
  let let1244 := (Implies let783 let1155)
  let let1245 := (Eq let18 let17)
  let let1246 := (And let146 let1245)
  let let1247 := (Implies let1246 let1060)
  let let1248 := (Or let1087 (Or (Not let1245) let1060))
  let let1249 := (Implies let278 let1245)
  let let1250 := (Or (Not let278) let1245)
  let let1251 := (And let41 let1146)
  let let1252 := (Implies let1251 let278)
  let let1253 := (Or let1177 (Or let1040 (Or let1114 let278)))
  let let1254 := (Or let1042 let1052)
  let let1255 := (Or let1042 (Or let1054 let1115))
  let let1256 := (Or let1114 let1058)
  let let1257 := (Implies let321 let1163)
  let let1258 := (Not let230)
  let let1259 := (Not let124)
  let let1260 := (Or let1258 let1259)
  let let1261 := (Implies let230 let1259)
  let let1262 := (Eq let124 False)
  let let1263 := (Not let77)
  let let1264 := (Implies let514 let1155)
  let let1265 := (Eq let18 let19)
  let let1266 := (And let146 (And let20 let1265))
  let let1267 := (Or (Not let1265) let1060)
  let let1268 := (Implies let787 let1265)
  let let1269 := (Or (Not let787) let1265)
  let let1270 := (And let77 let34)
  let let1271 := (Implies let1270 let787)
  let let1272 := (Or let1263 (Or let1114 let787))
  let let1273 := (Or let1035 let450)
  let let1274 := (Not let448)
  let let1275 := (Or let1274 let450)
  let let1276 := (Or let1274 let1258)
  let let1277 := (Implies let448 let1258)
  let let1278 := (Or let1274 let1259)
  let let1279 := (Implies let448 let1259)
  let let1280 := (Or let124 let230)
  let let1281 := (Not let53)
  let let1282 := (Implies let788 let1163)
  let let1283 := (Eq let18 let29)
  let let1284 := (And let146 (And let42 let1283))
  let let1285 := (Or (Not let1283) let1059)
  let let1286 := (Implies let59 let1283)
  let let1287 := (Or (Not let59) let1283)
  let let1288 := (And let53 let54)
  let let1289 := (Implies let1288 let59)
  let let1290 := (Or let1281 (Or let1035 let59))
  let let1291 := (Or let450 let1035)
  let let1292 := (Or let1114 let1040)
  let let1293 := (Implies let55 let1163)
  let let1294 := (Or let1040 (Or let271 (Or let1223 let1163)))
  let let1295 := (And let594 let1283)
  let let1296 := (And let594 let1146)
  let let1297 := (Implies let1296 let1122)
  let let1298 := (Or let1231 let1150)
  let let1299 := (Or let1223 let1239)
  let let1300 := (Or let1042 let1292)
  let let1301 := (Or let1114 let1226)
  let let1302 := (Implies let268 let1123)
  let let1303 := (Implies let546 let1155)
  let let1304 := (And let594 let1265)
  let let1305 := (Or let1026 let1029)
  let let1306 := (Implies let135 let1029)
  let let1307 := (Or let768 let1110)
  let let1308 := (Implies let45 let1061)
  let let1309 := (Eq let9 let13)
  let let1310 := (And let15 (And let1122 let1309))
  let let1311 := (Implies let37 let1310)
  let let1312 := (Eq let13 let9)
  let let1313 := (Not let1312)
  let let1314 := (binrel% HAdd.hAdd let772 let1131)
  let let1315 := (binrel% LE.le let1071 let1314)
  let let1316 := (Eq let732 let772)
  let let1317 := (And let498 let1312)
  let let1318 := (Eq let9 let26)
  let let1319 := (And let146 let1318)
  let let1320 := (And let30 let1170)
  let let1321 := (Implies let303 let1163)
  let let1322 := (And let594 let1170)
(Eq let6 let2) → (Eq let39 let38) → (Eq let47 let46) → (Eq let57 let56) → (Eq let59 let58) → (Eq let62 let61) → (Eq let63 let42) → (Eq let66 let64) → (Eq let69 let68) → (Eq let72 let71) → (Eq let75 let74) → (Eq let79 let77) → (Eq let82 let81) → (Eq let85 True) → (Eq let87 let86) → (Eq let100 let99) → (Eq let102 let101) → (Eq let106 let104) → (Eq let110 let108) → (Eq let120 let115) → let128 → (Eq let131 let130) → (Eq let134 let133) → (Eq let136 let135) → (Eq let139 let138) → (Eq let142 let141) → (Eq let145 let144) → (Eq let146 let8) → (Eq let149 let148) → (Eq let152 let151) → (Eq let155 let154) → (Eq let160 let159) → (Eq let162 let161) → (Eq let164 let163) → (Eq let167 let166) → (Eq let169 let168) → (Eq let177 let176) → let179 → (Eq let182 let181) → (Eq let170 let183) → (Eq let186 let185) → (Eq let190 let189) → (Eq let193 let192) → (Eq let196 let194) → (Eq let197 True) → (Eq let201 let200) → (Eq let203 let202) → (Eq let205 let204) → (Eq let206 let187) → (Eq let132 let27) → (Eq let209 let208) → (Eq let212 let210) → (Eq let213 let15) → (Eq let219 let218) → (Eq let98 let220) → (Eq let223 let222) → (Eq let225 let224) → (Eq let227 let226) → (Eq let229 let228) → (Eq let231 let230) → (Eq let232 True) → (Eq let233 True) → (Eq let236 let235) → (Eq let238 let237) → (Eq let239 True) → (Eq let242 let241) → (Eq let251 let250) → (Eq let253 let252) → (Eq let265 let264) → (Eq let266 let11) → (Eq let270 let269) → (Eq let272 let271) → (Eq let274 let273) → (Eq let258 let198) → (Eq let275 let65) → (Eq let276 True) → (Eq let278 let277) → (Eq let280 let279) → (Eq let282 let281) → (Eq let284 let283) → (Eq let286 let3) → (Eq let287 let84) → (Eq let288 let109) → (Eq let289 False) → (Eq let291 let290) → (Eq let295 let294) → (Eq let299 let298) → (Eq let300 let105) → (Eq let302 let301) → (Eq let305 let304) → (Eq let309 let308) → (Eq let310 True) → (Eq let312 let311) → (Eq let314 let313) → (Eq let317 let315) → (Eq let319 let318) → (Eq let320 let111) → (Eq let323 let322) → (Eq let326 let325) → (Eq let328 let327) → (Eq let330 let329) → (Eq let332 let331) → (Eq let341 let340) → (Eq let345 let344) → (Eq let347 let8) → let349 → (Eq let350 let122) → (Eq let348 let348) → (Eq let352 let351) → (Eq let354 let353) → (Eq let355 let78) → (Eq let359 let357) → (Eq let360 let2) → (Eq let364 let362) → (Eq let366 let365) → (Eq let367 let316) → (Eq let369 let368) → (Eq let370 let234) → (Eq let372 let371) → (Eq let375 let374) → (Eq let377 let376) → (Eq let378 let84) → (Eq let379 let241) → (Eq let380 let11) → (Eq let381 let9) → (Eq let382 let41) → (Eq let384 let49) → (Eq let385 let214) → (Eq let324 let22) → (Eq let387 let386) → (Eq let388 let115) → (Eq let390 let389) → (Eq let392 let391) → (Eq let174 fmt0) → (Eq let393 False) → (Eq let394 False) → (Eq let395 True) → (Eq let396 let221) → (Eq let400 let398) → (Eq let402 let30) → (Eq let403 let401) → (Eq let485 let484) → (Eq let486 let32) → (Eq let494 let493) → (Eq let496 let495) → (Eq let497 True) → (Eq let498 True) → let500 → (Eq let502 let53) → (Eq let503 let501) → (Eq let97 let504) → (Eq let506 let505) → (Eq let509 let508) → (Eq let511 let510) → (Eq let339 let512) → (Eq let513 let481) → (Eq let172 let399) → (Eq let516 let515) → (Eq let518 let517) → (Eq let520 let519) → (Eq let523 let522) → (Eq let526 let525) → (Eq let527 let15) → (Eq let537 let533) → (Eq let538 let124) → (Eq let539 let10) → (Eq let540 let363) → (Eq let543 let542) → (Eq let545 let544) → (Eq let548 let547) → (Eq let550 let549) → (Eq let551 let421) → (Eq let557 let556) → (Eq let558 let408) → (Eq let565 let563) → (Eq let566 True) → (Eq let507 let567) → (Eq let569 let564) → (Eq let570 let568) → (Eq let572 let571) → (Eq let573 True) → (Eq let249 let574) → (Eq let575 let575) → (Eq let576 True) → (Eq let579 let578) → (Eq let580 True) → (Eq let584 let583) → (Eq let585 let20) → (Eq let588 let587) → (Eq let589 True) → (Eq let592 let591) → (Eq let593 let24) → (Eq let594 let49) → (Eq let596 let358) → (Eq let598 let597) → (Eq let601 let600) → (Eq let605 let604) → (Eq let608 let607) → (Eq let611 let610) → (Eq let612 let432) → (Eq let615 let614) → (Eq let616 let595) → (Eq let179 let617) → (Eq let699 let698) → (Eq let702 let700) → (Eq let704 let703) → let601 → let706 → (Eq let707 True) → (Eq let709 let4) → (Eq let706 let710) → let611 → (Eq let500 let711) → let713 → (Eq let716 let715) → let718 → (Eq let719 True) → (Eq let717 let717) → let526 → let721 → (Eq let722 True) → (Eq let721 let723) → (Eq let725 let195) → let299 → (Eq let728 let727) → (Eq let729 let18) → (Eq let731 let2) → (Eq let732 let708) → (Eq let733 True) → (Eq let735 let734) → (Eq let712 let712) → (Eq let737 let736) → (Eq let685 let738) → (Eq let739 True) → (Eq let128 let740) → (Eq let741 let119) → (Eq let747 let746) → (Eq let748 let84) → (Eq let749 False) → (Eq let750 let3) → (Eq let751 let448) → (Eq let752 let4) → (Eq let753 True) → (Eq let756 let755) → (Eq let757 let440) → let716 → (Eq let758 False) → (Eq let761 let760) → (Eq let762 let736) → (Eq let765 let764) → (Eq let766 let374) → (Eq let618 let767) → (Eq let771 let770) → (Eq let772 let1) → (Eq let775 let774) → let771 → (Eq let776 True) → (Eq let777 let426) → (Eq let778 let562) → let780 → (Eq let622 let211) → (Eq let781 let427) → (Eq let780 let782) → (Eq let785 let784) → (Eq let787 let786) → (Eq let790 let789) → let792 → False :=
  let let1 := (Rat.ofInt 2)
  let let2 := (Neg.neg let1)
  let let3 := (Neg.neg (Rat.ofInt 4))
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% HAdd.hAdd let4 let3)
  let let6 := (binrel% HAdd.hAdd let1 let5)
  let let7 := (Int.ofNat 4)
  let let8 := (Eq fmt1 let7)
  let let9 := (Int.ofNat 2)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% HAdd.hAdd let10 fmt1)
  let let12 := (xx5fcount let11)
  let let13 := (sx5fcount let11)
  let let14 := (binrel% HAdd.hAdd let13 let12)
  let let15 := (binrel% GE.ge let14 let7)
  let let16 := (And let15 let8)
  let let17 := (xx5fcount let9)
  let let18 := (Int.ofNat 1)
  let let19 := (xx5fcount let18)
  let let20 := (Eq let19 let17)
  let let21 := (And let20 let16)
  let let22 := (Int.ofNat 0)
  let let23 := (xx5fcount let22)
  let let24 := (Eq let23 let19)
  let let25 := (And let24 let21)
  let let26 := (sx5fcount let9)
  let let27 := (Neg.neg let18)
  let let28 := (binrel% HAdd.hAdd let27 let26)
  let let29 := (sx5fcount let18)
  let let30 := (Eq let29 let28)
  let let31 := (sx5fcount let22)
  let let32 := (Eq let31 let29)
  let let33 := (And let32 (And let30 let25))
  let let34 := (Eq let23 let22)
  let let35 := (And let34 let33)
  let let36 := (Eq let31 let18)
  let let37 := (And let36 let35)
  let let38 := (Not let37)
  let let39 := (Implies let37 False)
  let let40 := (binrel% HAdd.hAdd let27 let17)
  let let41 := (Eq let19 let40)
  let let42 := (Eq let29 let26)
  let let43 := (And let32 (And let42 (And let24 (And let41 let16))))
  let let44 := (And let34 let43)
  let let45 := (And let36 let44)
  let let46 := (Not let45)
  let let47 := (Implies let45 False)
  let let48 := (Int.ofNat 3)
  let let49 := (Eq fmt1 let48)
  let let50 := (And let15 let49)
  let let51 := (And let24 let50)
  let let52 := (binrel% HAdd.hAdd let27 let29)
  let let53 := (Eq let31 let52)
  let let54 := (Eq let31 let22)
  let let55 := (And let54 (And let34 (And let53 let51)))
  let let56 := (Not let55)
  let let57 := (Implies let55 False)
  let let58 := (Eq let29 let18)
  let let59 := (Eq let22 let52)
  let let60 := (format let48)
  let let61 := (Eq s let60)
  let let62 := (Eq let60 s)
  let let63 := (Eq let26 let29)
  let let64 := (Rat.ofInt let12)
  let let65 := (Rat.ofInt 1)
  let let66 := (binrel% HMul.hMul let65 let12)
  let let67 := (sx5fcount let48)
  let let68 := (Eq let26 let67)
  let let69 := (Eq let67 let26)
  let let70 := (format let18)
  let let71 := (Eq x let70)
  let let72 := (Eq let70 x)
  let let73 := (format let22)
  let let74 := (Eq s let73)
  let let75 := (Eq let73 s)
  let let76 := (binrel% HAdd.hAdd let27 let19)
  let let77 := (Eq let23 let76)
  let let78 := (binrel% HAdd.hAdd let18 let23)
  let let79 := (Eq let19 let78)
  let let80 := (format let9)
  let let81 := (Eq x let80)
  let let82 := (Eq let80 x)
  let let83 := (Int.ofNat 16)
  let let84 := (Neg.neg let83)
  let let85 := (Eq let84 let84)
  let let86 := (Eq fmt1 let22)
  let let87 := (Eq let22 fmt1)
  let let88 := (Int.ofNat 255)
  let let89 := (Eq let70 let88)
  let let90 := (Int.ofNat 6)
  let let91 := (Eq let70 let90)
  let let92 := (Int.ofNat 5)
  let let93 := (Eq let70 let92)
  let let94 := (Eq let70 let7)
  let let95 := (Eq let70 let48)
  let let96 := (Or let95 (Or let94 (Or let93 (Or let91 let89))))
  let let97 := (Eq let70 s)
  let let98 := (Eq let70 percent)
  let let99 := (Or let98 (Or let97 (Or let72 let96)))
  let let100 := (Or (Or (Or (Or (Or (Or (Or let98 let97) let72) let95) let94) let93) let91) let89)
  let let101 := (binrel% HAdd.hAdd let18 let19)
  let let102 := (binrel% HAdd.hAdd let19 let18)
  let let103 := (xx5fcount let48)
  let let104 := (Eq let17 (binrel% HAdd.hAdd let27 let103))
  let let105 := (binrel% HAdd.hAdd let18 let17)
  let let106 := (Eq let103 let105)
  let let107 := (xx5fcount let7)
  let let108 := (Eq let103 (binrel% HAdd.hAdd let27 let107))
  let let109 := (binrel% HAdd.hAdd let18 let103)
  let let110 := (Eq let107 let109)
  let let111 := (Neg.neg let7)
  let let112 := (binrel% HMul.hMul let111 let12)
  let let113 := (binrel% HMul.hMul let111 let13)
  let let114 := (binrel% HAdd.hAdd let113 let112)
  let let115 := (binrel% HAdd.hAdd let83 let114)
  let let116 := (binrel% HMul.hMul let7 let12)
  let let117 := (binrel% HMul.hMul let7 let13)
  let let118 := (binrel% HAdd.hAdd let117 let116)
  let let119 := (binrel% HAdd.hAdd let84 let118)
  let let120 := (binrel% HMul.hMul let27 let119)
  let let121 := (Int.ofNat 115)
  let let122 := (Eq let60 let121)
  let let123 := (Int.ofNat 37)
  let let124 := (Eq let80 let123)
  let let125 := (And let124 let122)
  let let126 := (Not let125)
  let let127 := (Not let126)
  let let128 := (Eq let127 let125)
  let let129 := (sx5fcount let7)
  let let130 := (binrel% HAdd.hAdd let18 let129)
  let let131 := (binrel% HAdd.hAdd let129 let18)
  let let132 := (binrel% HMul.hMul let27 let18)
  let let133 := (binrel% HAdd.hAdd fmtx5flength let132)
  let let134 := (binrel% HSub.hSub fmtx5flength let18)
  let let135 := (Eq let70 let121)
  let let136 := (Eq let121 let70)
  let let137 := (format let90)
  let let138 := (Eq s let137)
  let let139 := (Eq let137 s)
  let let140 := (format let92)
  let let141 := (Eq percent let140)
  let let142 := (Eq let140 percent)
  let let143 := (binrel% HMul.hMul let27 fmt0)
  let let144 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let143 fmt1))
  let let145 := (binrel% HAdd.hAdd let11 let143)
  let let146 := (Eq let9 let11)
  let let147 := (format let7)
  let let148 := (Eq s let147)
  let let149 := (Eq let147 s)
  let let150 := (format fmt1)
  let let151 := (Eq percent let150)
  let let152 := (Eq let150 percent)
  let let153 := (Int.ofNat 120)
  let let154 := (Eq let147 let153)
  let let155 := (Eq let153 let147)
  let let156 := (And let32 let51)
  let let157 := (Eq let23 let18)
  let let158 := (And let54 (And let157 let156))
  let let159 := (Not let158)
  let let160 := (Implies let158 False)
  let let161 := (binrel% HAdd.hAdd let18 fmt1)
  let let162 := (binrel% HAdd.hAdd fmt1 let18)
  let let163 := (binrel% HAdd.hAdd let18 let67)
  let let164 := (binrel% HAdd.hAdd let67 let18)
  let let165 := (format let161)
  let let166 := (Eq s let165)
  let let167 := (Eq let165 s)
  let let168 := (binrel% HAdd.hAdd let9 arg1)
  let let169 := (binrel% HAdd.hAdd arg1 let9)
  let let170 := (binrel% HAdd.hAdd fmt0 let9)
  let let171 := (Eq arg1 let170)
  let let172 := (binrel% HAdd.hAdd fmt0 let18)
  let let173 := (Eq arg1 let172)
  let let174 := (binrel% HAdd.hAdd fmt0 let22)
  let let175 := (Eq arg1 let174)
  let let176 := (Or let175 (Or let173 let171))
  let let177 := (Or (Or let175 let173) let171)
  let let178 := (Eq let153 let123)
  let let179 := (Eq let178 False)
  let let180 := (sx5fcount let92)
  let let181 := (Eq let129 (binrel% HAdd.hAdd let27 let180))
  let let182 := (Eq let180 let130)
  let let183 := (binrel% HAdd.hAdd let9 fmt0)
  let let184 := (format let168)
  let let185 := (Eq adrx5fmedhi let184)
  let let186 := (Eq let184 adrx5fmedhi)
  let let187 := (binrel% HAdd.hAdd let48 arg1)
  let let188 := (format let187)
  let let189 := (Eq adrx5fhi let188)
  let let190 := (Eq let188 adrx5fhi)
  let let191 := (format arg1)
  let let192 := (Eq adrx5flo let191)
  let let193 := (Eq let191 adrx5flo)
  let let194 := (Not (binrel% GE.ge let14 let92))
  let let195 := (binrel% HAdd.hAdd (Int.ofNat 22) let114)
  let let196 := (binrel% GE.ge let195 let92)
  let let197 := (Eq let92 let92)
  let let198 := (binrel% HAdd.hAdd let18 arg1)
  let let199 := (format let198)
  let let200 := (Eq adrx5fmedlo let199)
  let let201 := (Eq let199 adrx5fmedlo)
  let let202 := (Eq let137 let153)
  let let203 := (Eq let153 let137)
  let let204 := (Eq x let140)
  let let205 := (Eq let140 x)
  let let206 := (binrel% HAdd.hAdd arg1 let48)
  let let207 := (xx5fcount let92)
  let let208 := (Eq let107 let207)
  let let209 := (Eq let207 let107)
  let let210 := (Eq let107 (binrel% HAdd.hAdd let27 let207))
  let let211 := (binrel% HAdd.hAdd let18 let107)
  let let212 := (Eq let207 let211)
  let let213 := (binrel% GE.ge let119 let22)
  let let214 := (Eq fmt1 let9)
  let let215 := (And let15 let214)
  let let216 := (And let34 let215)
  let let217 := (And let36 let216)
  let let218 := (Not let217)
  let let219 := (Implies let217 False)
  let let220 := (Eq percent let70)
  let let221 := (binrel% HMul.hMul let27 fmt1)
  let let222 := (binrel% HAdd.hAdd let90 let221)
  let let223 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let221 let90))
  let let224 := (Eq let140 let121)
  let let225 := (Eq let121 let140)
  let let226 := (Eq fmt0 fmt1)
  let let227 := (Eq fmt1 fmt0)
  let let228 := (Eq s let80)
  let let229 := (Eq let80 s)
  let let230 := (Eq let80 let153)
  let let231 := (Eq let153 let80)
  let let232 := (Eq let7 let7)
  let let233 := (Eq let48 let48)
  let let234 := (binrel% GE.ge fmt1 let9)
  let let235 := (Not let234)
  let let236 := (binrel% GE.ge let221 let27)
  let let237 := (Eq x let60)
  let let238 := (Eq let60 x)
  let let239 := (Eq let83 let83)
  let let240 := (binrel% HMul.hMul let27 let12)
  let let241 := (Eq let13 (binrel% HAdd.hAdd let7 let240))
  let let242 := (Eq let119 let22)
  let let243 := (Eq let60 let88)
  let let244 := (Eq let60 let90)
  let let245 := (Eq let60 let92)
  let let246 := (Eq let60 let7)
  let let247 := (Eq let60 let48)
  let let248 := (Or let247 (Or let246 (Or let245 (Or let244 let243))))
  let let249 := (Eq let60 percent)
  let let250 := (Or let249 (Or let62 (Or let238 let248)))
  let let251 := (Or (Or (Or (Or (Or (Or (Or let249 let62) let238) let247) let246) let245) let244) let243)
  let let252 := (Eq let60 let123)
  let let253 := (Eq let123 let60)
  let let254 := (format let206)
  let let255 := (Eq let254 adrx5fhi)
  let let256 := (format let169)
  let let257 := (Eq let256 adrx5fmedhi)
  let let258 := (binrel% HAdd.hAdd arg1 let18)
  let let259 := (format let258)
  let let260 := (Eq let259 adrx5fmedlo)
  let let261 := (format let162)
  let let262 := (Eq let261 s)
  let let263 := (Not let152)
  let let264 := (And let263 (And let262 (And let193 (And let260 (And let257 let255)))))
  let let265 := (And (And (And (And (And let263 let262) let193) let260) let257) let255)
  let let266 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let22 fmt1))
  let let267 := (And let34 let156)
  let let268 := (And let54 let267)
  let let269 := (Not let268)
  let let270 := (Implies let268 False)
  let let271 := (Not let15)
  let let272 := (binrel% GE.ge let115 let18)
  let let273 := (Eq let150 let123)
  let let274 := (Eq let123 let150)
  let let275 := (binrel% HMul.hMul let65 let18)
  let let276 := (Eq let90 let90)
  let let277 := (Eq let17 let18)
  let let278 := (Eq let22 let40)
  let let279 := (Eq let147 let123)
  let let280 := (Eq let123 let147)
  let let281 := (Eq let17 let9)
  let let282 := (Eq let18 let40)
  let let283 := (Eq let140 let123)
  let let284 := (Eq let123 let140)
  let let285 := (Neg.neg let65)
  let let286 := (binrel% HMul.hMul let285 let7)
  let let287 := (binrel% HAdd.hAdd let22 let84)
  let let288 := (binrel% HAdd.hAdd let103 let18)
  let let289 := (Eq let119 let18)
  let let290 := (Eq let26 let9)
  let let291 := (Eq let18 let28)
  let let292 := (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 13)) let118)
  let let293 := (format let292)
  let let294 := (Eq let293 let90)
  let let295 := (Eq let90 let293)
  let let296 := (Not let214)
  let let297 := (Not let296)
  let let298 := (Eq let214 let297)
  let let299 := (Eq let297 let214)
  let let300 := (binrel% HAdd.hAdd let17 let18)
  let let301 := (Eq percent let80)
  let let302 := (Eq let80 percent)
  let let303 := (And let36 let267)
  let let304 := (Not let303)
  let let305 := (Implies let303 False)
  let let306 := (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 14)) let118)
  let let307 := (format let306)
  let let308 := (Eq let307 let92)
  let let309 := (Eq let92 let307)
  let let310 := (Eq let22 let22)
  let let311 := (Eq x let147)
  let let312 := (Eq let147 x)
  let let313 := (Eq let60 let153)
  let let314 := (Eq let153 let60)
  let let315 := (Eq let26 (binrel% HAdd.hAdd let27 let67))
  let let316 := (binrel% HAdd.hAdd let18 let26)
  let let317 := (Eq let67 let316)
  let let318 := (Eq let17 let103)
  let let319 := (Eq let103 let17)
  let let320 := (binrel% HMul.hMul let27 let7)
  let let321 := (And let54 let35)
  let let322 := (Not let321)
  let let323 := (Implies let321 False)
  let let324 := (binrel% HMul.hMul let27 let22)
  let let325 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let116 let324)))
  let let326 := (binrel% HAdd.hAdd let119 let324)
  let let327 := (Eq let73 let153)
  let let328 := (Eq let153 let73)
  let let329 := (Eq let73 let121)
  let let330 := (Eq let121 let73)
  let let331 := (Eq percent let73)
  let let332 := (Eq let73 percent)
  let let333 := (Eq let73 let88)
  let let334 := (Eq let73 let90)
  let let335 := (Eq let73 let92)
  let let336 := (Eq let73 let7)
  let let337 := (Eq let73 let48)
  let let338 := (Or let337 (Or let336 (Or let335 (Or let334 let333))))
  let let339 := (Eq let73 x)
  let let340 := (Or let332 (Or let75 (Or let339 let338)))
  let let341 := (Or (Or (Or (Or (Or (Or (Or let332 let75) let339) let337) let336) let335) let334) let333)
  let let342 := (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 15)) let118)
  let let343 := (format let342)
  let let344 := (Eq let343 let7)
  let let345 := (Eq let7 let343)
  let let346 := (binrel% HAdd.hAdd let111 fmt1)
  let let347 := (Eq let22 let346)
  let let348 := (binrel% HAdd.hAdd let48 let119)
  let let349 := (Eq let348 let292)
  let let350 := (Eq let121 let60)
  let let351 := (Eq s let140)
  let let352 := (Eq let140 s)
  let let353 := (Eq let140 let153)
  let let354 := (Eq let153 let140)
  let let355 := (binrel% HAdd.hAdd let23 let18)
  let let356 := (binrel% HAdd.hAdd fmt0 (binrel% HAdd.hAdd let221 fmtx5flength))
  let let357 := (binrel% GE.ge let356 let9)
  let let358 := (Not let357)
  let let359 := (Not let358)
  let let360 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let1 let3))
  let let361 := (binrel% HAdd.hAdd (Neg.neg let92) fmt1)
  let let362 := (Eq fmt0 let361)
  let let363 := (binrel% HAdd.hAdd let92 fmt0)
  let let364 := (Eq fmt1 let363)
  let let365 := (Eq let137 let121)
  let let366 := (Eq let121 let137)
  let let367 := (binrel% HAdd.hAdd let26 let18)
  let let368 := (Eq let165 let121)
  let let369 := (Eq let121 let165)
  let let370 := (Not let235)
  let let371 := (binrel% HAdd.hAdd let48 fmt0)
  let let372 := (binrel% HAdd.hAdd fmt0 let48)
  let let373 := (binrel% GE.ge fmt1 let92)
  let let374 := (Not let373)
  let let375 := (binrel% LT.lt fmt1 let92)
  let let376 := (Eq let147 let121)
  let let377 := (Eq let121 let147)
  let let378 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let116 let114)))
  let let379 := (Or let241 (Or False False))
  let let380 := (binrel% HAdd.hAdd fmt1 let10)
  let let381 := (binrel% HAdd.hAdd let9 let22)
  let let382 := (Eq let17 let101)
  let let383 := (binrel% HAdd.hAdd (Neg.neg let48) fmt1)
  let let384 := (Eq let22 let383)
  let let385 := (Eq let22 let11)
  let let386 := (Eq fmt1 let92)
  let let387 := (Eq let22 let361)
  let let388 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let115 let83))
  let let389 := (binrel% HAdd.hAdd let7 fmt0)
  let let390 := (binrel% HAdd.hAdd fmt0 let7)
  let let391 := (Eq let67 let129)
  let let392 := (Eq let129 let67)
  let let393 := (binrel% LE.le let4 let2)
  let let394 := (Eq let119 let9)
  let let395 := (Eq let8 let8)
  let let396 := (binrel% HAdd.hAdd let22 let221)
  let let397 := (binrel% HAdd.hAdd let27 fmt1)
  let let398 := (Eq fmt0 let397)
  let let399 := (binrel% HAdd.hAdd let18 fmt0)
  let let400 := (Eq fmt1 let399)
  let let401 := (binrel% HAdd.hAdd let18 let29)
  let let402 := (Eq let26 let401)
  let let403 := (binrel% HAdd.hAdd let29 let18)
  let let404 := (And let283 let202)
  let let405 := (Not let404)
  let let406 := (Implies let405 let208)
  let let407 := (Implies let404 let210)
  let let408 := (Eq let103 let107)
  let let409 := (And let279 let353)
  let let410 := (Not let409)
  let let411 := (Implies let410 let408)
  let let412 := (Implies let409 let108)
  let let413 := (And let252 let154)
  let let414 := (Not let413)
  let let415 := (Implies let414 let318)
  let let416 := (Implies let413 let104)
  let let417 := (And let124 let313)
  let let418 := (Not let417)
  let let419 := (Implies let418 let20)
  let let420 := (Implies let417 let41)
  let let421 := (Eq let70 let123)
  let let422 := (And let421 let230)
  let let423 := (Not let422)
  let let424 := (Implies let423 let24)
  let let425 := (Implies let422 let77)
  let let426 := (Eq let70 let153)
  let let427 := (Eq let73 let123)
  let let428 := (And let427 let426)
  let let429 := (Not let428)
  let let430 := (Implies let429 let34)
  let let431 := (Implies let428 let157)
  let let432 := (Eq let129 let180)
  let let433 := (And let283 let365)
  let let434 := (Not let433)
  let let435 := (Implies let434 let432)
  let let436 := (Implies let433 let181)
  let let437 := (And let279 let224)
  let let438 := (Not let437)
  let let439 := (Implies let438 let391)
  let let440 := (Eq let67 (binrel% HAdd.hAdd let27 let129))
  let let441 := (Implies let437 let440)
  let let442 := (And let252 let376)
  let let443 := (Not let442)
  let let444 := (Implies let443 let68)
  let let445 := (Implies let442 let315)
  let let446 := (Implies let126 let42)
  let let447 := (Implies let125 let30)
  let let448 := (Eq let80 let121)
  let let449 := (And let421 let448)
  let let450 := (Not let449)
  let let451 := (Implies let450 let32)
  let let452 := (Implies let449 let53)
  let let453 := (And let427 let135)
  let let454 := (Not let453)
  let let455 := (Implies let454 let54)
  let let456 := (Implies let453 let36)
  let let457 := (Eq let140 let88)
  let let458 := (Eq let140 let90)
  let let459 := (Eq let140 let92)
  let let460 := (Eq let140 let7)
  let let461 := (Eq let140 let48)
  let let462 := (Or let461 (Or let460 (Or let459 (Or let458 let457))))
  let let463 := (Or let283 (Or let224 (Or let353 let462)))
  let let464 := (Eq let147 let88)
  let let465 := (Eq let147 let90)
  let let466 := (Eq let147 let92)
  let let467 := (Eq let147 let7)
  let let468 := (Eq let147 let48)
  let let469 := (Or let468 (Or let467 (Or let466 (Or let465 let464))))
  let let470 := (Or let279 (Or let376 (Or let154 let469)))
  let let471 := (Or let252 (Or let122 (Or let313 let248)))
  let let472 := (Eq let80 let88)
  let let473 := (Eq let80 let90)
  let let474 := (Eq let80 let92)
  let let475 := (Eq let80 let7)
  let let476 := (Eq let80 let48)
  let let477 := (Or let476 (Or let475 (Or let474 (Or let473 let472))))
  let let478 := (Or let124 (Or let448 (Or let230 let477)))
  let let479 := (Or let421 (Or let135 (Or let426 let96)))
  let let480 := (Or let427 (Or let329 (Or let327 let338)))
  let let481 := (Eq fmt1 let18)
  let let482 := (Or let86 (Or let481 (Or let214 (Or let49 (Or let8 let386)))))
  let let483 := (And let482 (And let241 (And let480 (And let479 (And let478 (And let471 (And let470 (And let463 (And let456 (And let455 (And let452 (And let451 (And let447 (And let446 (And let445 (And let444 (And let441 (And let439 (And let436 (And let435 (And let431 (And let430 (And let425 (And let424 (And let420 (And let419 (And let416 (And let415 (And let412 (And let411 (And let407 let406)))))))))))))))))))))))))))))))
  let let484 := (And let15 (And let374 (And let234 (And let194 let483))))
  let let485 := (And True (And True (And True (And True (And True (And True (And True (And True (And True (And True (And True (And let15 (And let374 (And let234 (And let15 (And let194 (And True let483)))))))))))))))))
  let let486 := (Eq let29 let31)
  let let487 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let324 fmt1))
  let let488 := (xx5fcount let487)
  let let489 := (binrel% HMul.hMul let111 let488)
  let let490 := (sx5fcount let487)
  let let491 := (binrel% HMul.hMul let111 let490)
  let let492 := (binrel% HAdd.hAdd let491 let489)
  let let493 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let116 let492)))
  let let494 := (binrel% HAdd.hAdd let119 let492)
  let let495 := (Eq fmt0 let383)
  let let496 := (Eq fmt1 let371)
  let let497 := (Eq let449 let449)
  let let498 := (binrel% GT.gt let65 let22)
  let let499 := (Eq let121 let123)
  let let500 := (Eq let499 False)
  let let501 := (binrel% HAdd.hAdd let18 let31)
  let let502 := (Eq let29 let501)
  let let503 := (binrel% HAdd.hAdd let31 let18)
  let let504 := (Eq s let70)
  let let505 := (Or let142 (Or let352 (Or let205 let462)))
  let let506 := (Or (Or (Or (Or (Or (Or (Or let142 let352) let205) let461) let460) let459) let458) let457)
  let let507 := (Eq let147 percent)
  let let508 := (Or let507 (Or let149 (Or let312 let469)))
  let let509 := (Or (Or (Or (Or (Or (Or (Or let507 let149) let312) let468) let467) let466) let465) let464)
  let let510 := (Or let302 (Or let229 (Or let82 let477)))
  let let511 := (Or (Or (Or (Or (Or (Or (Or let302 let229) let82) let476) let475) let474) let473) let472)
  let let512 := (Eq x let73)
  let let513 := (Eq let22 let397)
  let let514 := (And let54 (And let34 (And let32 (And let42 (And let77 let21)))))
  let let515 := (Not let514)
  let let516 := (Implies let514 False)
  let let517 := (Eq fmt0 let346)
  let let518 := (Eq fmt1 let389)
  let let519 := (Eq fmt0 let11)
  let let520 := (Eq fmt1 let183)
  let let521 := (format let119)
  let let522 := (Eq let521 let48)
  let let523 := (Eq let48 let521)
  let let524 := (Not let423)
  let let525 := (Eq let422 let524)
  let let526 := (Eq let524 let422)
  let let527 := (Not let271)
  let let528 := (xx5fcount let144)
  let let529 := (binrel% HMul.hMul let111 let528)
  let let530 := (sx5fcount let144)
  let let531 := (binrel% HMul.hMul let111 let530)
  let let532 := (binrel% HAdd.hAdd arg1 (binrel% HAdd.hAdd let531 let529))
  let let533 := (Eq arg0 let532)
  let let534 := (binrel% HMul.hMul let7 let528)
  let let535 := (binrel% HMul.hMul let7 let530)
  let let536 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let535 let534))
  let let537 := (Eq arg1 let536)
  let let538 := (Eq let123 let80)
  let let539 := (binrel% HMul.hMul let27 let9)
  let let540 := (binrel% HAdd.hAdd fmt0 let92)
  let let541 := (And let54 (And let157 let215))
  let let542 := (Not let541)
  let let543 := (Implies let541 False)
  let let544 := (binrel% HAdd.hAdd fmt1 let539)
  let let545 := (binrel% HSub.hSub fmt1 let9)
  let let546 := (And let54 (And let34 (And let32 (And let77 let50))))
  let let547 := (Not let546)
  let let548 := (Implies let546 False)
  let let549 := (binrel% HAdd.hAdd let545 let143)
  let let550 := (binrel% HSub.hSub let545 fmt0)
  let let551 := (Eq let123 let70)
  let let552 := (xx5fcount let550)
  let let553 := (binrel% HMul.hMul let7 let552)
  let let554 := (sx5fcount let550)
  let let555 := (binrel% HMul.hMul let7 let554)
  let let556 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let555 let553))
  let let557 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd arg0 let555) let553)
  let let558 := (Eq let107 let103)
  let let559 := (binrel% HAdd.hAdd distance fmtx5flength)
  let let560 := (binrel% HMul.hMul let27 arg1)
  let let561 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let560 let559))
  let let562 := (binrel% GE.ge let561 let92)
  let let563 := (Not let562)
  let let564 := (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd arg0 let559))
  let let565 := (binrel% GE.ge arg1 let564)
  let let566 := (Eq let417 let417)
  let let567 := (Eq percent let147)
  let let568 := (binrel% HAdd.hAdd let111 fmtx5flength)
  let let569 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd distance let568))
  let let570 := (binrel% HAdd.hAdd fmtx5flength let111)
  let let571 := (binrel% HAdd.hAdd fmtx5flength let320)
  let let572 := (binrel% HSub.hSub fmtx5flength let7)
  let let573 := (Eq let153 let153)
  let let574 := (Eq percent let60)
  let let575 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd distance let572))
  let let576 := (Eq let121 let121)
  let let577 := (binrel% GE.ge arg1 let575)
  let let578 := (Not let577)
  let let579 := (binrel% LT.lt arg1 let575)
  let let580 := (Eq let123 let123)
  let let581 := (binrel% HAdd.hAdd arg0 (binrel% HAdd.hAdd let560 distance))
  let let582 := (binrel% GE.ge let581 let18)
  let let583 := (Not let582)
  let let584 := (binrel% GE.ge arg1 (binrel% HAdd.hAdd arg0 distance))
  let let585 := (Eq let17 let19)
  let let586 := (binrel% HAdd.hAdd fmt0 let221)
  let let587 := (binrel% GE.ge let586 let27)
  let let588 := (binrel% LE.le fmt1 let399)
  let let589 := (Not False)
  let let590 := (binrel% LE.le fmt1 let172)
  let let591 := (Not let590)
  let let592 := (binrel% GT.gt fmt1 let172)
  let let593 := (Eq let19 let23)
  let let594 := (Eq let18 let11)
  let let595 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd fmt0 fmtx5flength))
  let let596 := (binrel% GE.ge fmt1 let595)
  let let597 := (binrel% HAdd.hAdd let27 fmtx5flength)
  let let598 := (binrel% HAdd.hAdd fmtx5flength let27)
  let let599 := (Eq let121 let153)
  let let600 := (Not let599)
  let let601 := (Eq let599 False)
  let let602 := (binrel% HAdd.hAdd fmt0 let134)
  let let603 := (binrel% GE.ge fmt1 let602)
  let let604 := (Not let603)
  let let605 := (binrel% LT.lt fmt1 let602)
  let let606 := (binrel% HAdd.hAdd arg1 let143)
  let let607 := (binrel% GE.ge let606 let22)
  let let608 := (binrel% GE.ge arg1 fmt0)
  let let609 := (Not let454)
  let let610 := (Eq let453 let609)
  let let611 := (Eq let609 let453)
  let let612 := (Eq let180 let129)
  let let613 := (binrel% HMul.hMul let27 distance)
  let let614 := (binrel% HAdd.hAdd fmt0 let613)
  let let615 := (binrel% HSub.hSub fmt0 distance)
  let let616 := (binrel% HAdd.hAdd fmt0 let597)
  let let617 := (Not let178)
  let let618 := (Eq let137 x)
  let let619 := (And let142 let618)
  let let620 := (Not let619)
  let let621 := (Implies let620 let209)
  let let622 := (binrel% HAdd.hAdd let107 let18)
  let let623 := (Eq let207 let622)
  let let624 := (Implies let619 let623)
  let let625 := (And let624 let621)
  let let626 := (And let507 let205)
  let let627 := (Not let626)
  let let628 := (Implies let627 let558)
  let let629 := (Eq let107 let288)
  let let630 := (Implies let626 let629)
  let let631 := (And let249 let312)
  let let632 := (Not let631)
  let let633 := (Implies let632 let319)
  let let634 := (Eq let103 let300)
  let let635 := (Implies let631 let634)
  let let636 := (And let302 let238)
  let let637 := (Not let636)
  let let638 := (Implies let637 let585)
  let let639 := (Eq let17 let102)
  let let640 := (Implies let636 let639)
  let let641 := (And let98 let82)
  let let642 := (Not let641)
  let let643 := (Implies let642 let593)
  let let644 := (Eq let19 let355)
  let let645 := (Implies let641 let644)
  let let646 := (And let332 let72)
  let let647 := (Not let646)
  let let648 := (Implies let647 let34)
  let let649 := (Implies let646 let157)
  let let650 := (And let142 let139)
  let let651 := (Not let650)
  let let652 := (Implies let651 let612)
  let let653 := (Eq let180 let131)
  let let654 := (Implies let650 let653)
  let let655 := (And let507 let352)
  let let656 := (Not let655)
  let let657 := (Implies let656 let392)
  let let658 := (Eq let129 let164)
  let let659 := (Implies let655 let658)
  let let660 := (And let249 let149)
  let let661 := (Not let660)
  let let662 := (Implies let661 let69)
  let let663 := (Eq let67 let367)
  let let664 := (Implies let660 let663)
  let let665 := (And let302 let62)
  let let666 := (Not let665)
  let let667 := (Implies let666 let63)
  let let668 := (Eq let26 let403)
  let let669 := (Implies let665 let668)
  let let670 := (And let98 let229)
  let let671 := (Not let670)
  let let672 := (Implies let671 let486)
  let let673 := (Eq let29 let503)
  let let674 := (Implies let670 let673)
  let let675 := (And let332 let97)
  let let676 := (Not let675)
  let let677 := (Implies let676 let54)
  let let678 := (Implies let675 let36)
  let let679 := (Eq fmt1 let540)
  let let680 := (Eq fmt1 let390)
  let let681 := (Eq fmt1 let372)
  let let682 := (Eq fmt1 let170)
  let let683 := (Eq fmt1 let172)
  let let684 := (Eq fmt1 let174)
  let let685 := (Or (Or (Or (Or (Or let684 let683) let682) let681) let680) let679)
  let let686 := (Eq arg1 let557)
  let let687 := (Eq arg0 let615)
  let let688 := (Eq fmt0 let22)
  let let689 := (Eq x let153)
  let let690 := (Eq s let121)
  let let691 := (Eq percent let123)
  let let692 := (Eq adrx5fhi let90)
  let let693 := (Eq adrx5fmedhi let92)
  let let694 := (Eq adrx5fmedlo let7)
  let let695 := (Eq adrx5flo let48)
  let let696 := (Eq fmtx5flength let90)
  let let697 := (Eq distance let83)
  let let698 := (And let697 (And let696 (And let695 (And let694 (And let693 (And let692 (And let691 (And let690 (And let689 (And let688 (And let687 (And let608 (And let605 (And let592 (And let584 (And let579 (And let686 (And let685 (And let177 (And let341 (And let100 (And let511 (And let251 (And let509 (And let506 (And let678 (And let677 (And let674 (And let672 (And let669 (And let667 (And let664 (And let662 (And let659 (And let657 (And let654 (And let652 (And let649 (And let648 (And let645 (And let643 (And let640 (And let638 (And let635 (And let633 (And let630 (And let628 let625)))))))))))))))))))))))))))))))))))))))))))))))
  let let699 := (And (And (And (And (And (And (And (And (And (And (And let697 let696) let695) let694) let693) let692) (And (And let691 let690) let689)) (And (And (And (And (And (And (And let688 let687) let608) let605) let592) let584) let579) let686)) (And let685 let177)) (And (And (And (And (And let341 let100) let511) let251) let509) let506)) (And (And (And (And (And (And let678 let677) (And let674 let672)) (And let669 let667)) (And let664 let662)) (And let659 let657)) (And let654 let652))) (And (And (And (And (And (And let649 let648) (And let645 let643)) (And let640 let638)) (And let635 let633)) (And let630 let628)) let625))
  let let700 := (Eq arg1 let119)
  let let701 := (binrel% HAdd.hAdd arg1 let114)
  let let702 := (Eq let84 let701)
  let let703 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let27 let13) let240))
  let let704 := (binrel% HMul.hMul let285 let14)
  let let705 := (Not let429)
  let let706 := (Eq let705 let428)
  let let707 := (Eq let453 let453)
  let let708 := (Rat.ofInt let13)
  let let709 := (binrel% HAdd.hAdd let708 (binrel% HAdd.hAdd let64 let703))
  let let710 := (Eq let428 let705)
  let let711 := (Not let499)
  let let712 := (binrel% HAdd.hAdd let9 let119)
  let let713 := (Eq let712 let306)
  let let714 := (Not let450)
  let let715 := (Eq let449 let714)
  let let716 := (Eq let714 let449)
  let let717 := (binrel% HAdd.hAdd let18 let119)
  let let718 := (Eq let717 let342)
  let let719 := (Eq let422 let422)
  let let720 := (Not let418)
  let let721 := (Eq let720 let417)
  let let722 := (Eq let214 let214)
  let let723 := (Eq let417 let720)
  let let724 := (binrel% HAdd.hAdd let83 let90)
  let let725 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let115 let724))
  let let726 := (And let54 (And let157 let33))
  let let727 := (Not let726)
  let let728 := (Implies let726 False)
  let let729 := (binrel% HAdd.hAdd let18 let22)
  let let730 := (binrel% HAdd.hAdd let65 let3)
  let let731 := (binrel% HAdd.hAdd let65 let730)
  let let732 := (binrel% HMul.hMul let65 let13)
  let let733 := (binrel% LT.lt let285 let22)
  let let734 := (Eq let26 let18)
  let let735 := (Eq let22 let28)
  let let736 := (Neg.neg (Rat.ofInt 3))
  let let737 := (binrel% HAdd.hAdd let4 let730)
  let let738 := (Or let684 (Or let683 (Or let682 (Or let681 (Or let680 let679)))))
  let let739 := (Eq let125 let125)
  let let740 := (Eq let125 let127)
  let let741 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let116 let22)))
  let let742 := (And let42 let25)
  let let743 := (And let32 let742)
  let let744 := (And let34 let743)
  let let745 := (And let54 let744)
  let let746 := (Not let745)
  let let747 := (Implies let745 False)
  let let748 := (binrel% HMul.hMul let27 let83)
  let let749 := (binrel% LE.le let4 let3)
  let let750 := (binrel% HAdd.hAdd let4 let5)
  let let751 := (Eq let121 let80)
  let let752 := (binrel% HMul.hMul let65 let22)
  let let753 := (Eq let428 let428)
  let let754 := (And let54 (And let157 let743))
  let let755 := (Not let754)
  let let756 := (Implies let754 False)
  let let757 := (Eq let129 let163)
  let let758 := (binrel% LE.le let4 let736)
  let let759 := (And let36 let744)
  let let760 := (Not let759)
  let let761 := (Implies let759 False)
  let let762 := (binrel% HAdd.hAdd let65 let5)
  let let763 := (And let54 (And let157 let43))
  let let764 := (Not let763)
  let let765 := (Implies let763 False)
  let let766 := (binrel% GE.ge let222 let9)
  let let767 := (Eq x let137)
  let let768 := (Not let8)
  let let769 := (Not let768)
  let let770 := (Eq let8 let769)
  let let771 := (Eq let769 let8)
  let let772 := (binrel% HMul.hMul let65 let9)
  let let773 := (And let54 let216)
  let let774 := (Not let773)
  let let775 := (Implies let773 False)
  let let776 := (Eq let373 let373)
  let let777 := (Eq let153 let70)
  let let778 := (Not let563)
  let let779 := (Not let374)
  let let780 := (Eq let779 let373)
  let let781 := (Eq let123 let73)
  let let782 := (Eq let373 let779)
  let let783 := (And let54 let44)
  let let784 := (Not let783)
  let let785 := (Implies let783 False)
  let let786 := (Eq let19 let18)
  let let787 := (Eq let22 let76)
  let let788 := (And let54 (And let34 (And let53 let742)))
  let let789 := (Not let788)
  let let790 := (Implies let788 False)
  let let791 := (Implies let699 let265)
  let let792 := (Not let791)
  let let793 := (Not let273)
  let let794 := (And let793 (And let368 (And let522 (And let344 (And let308 let294)))))
  let let795 := (Implies let484 let794)
  let let796 := (Not let795)
  let let797 := (Not let151)
  let let798 := (And let797 (And let166 (And let192 (And let200 (And let185 let189)))))
  let let799 := (And let141 let767)
  let let800 := (Not let799)
  let let801 := (Implies let800 let208)
  let let802 := (Implies let799 let210)
  let let803 := (And let567 let204)
  let let804 := (Not let803)
  let let805 := (Implies let804 let408)
  let let806 := (Implies let803 let108)
  let let807 := (And let574 let311)
  let let808 := (Not let807)
  let let809 := (Implies let808 let318)
  let let810 := (Implies let807 let104)
  let let811 := (And let301 let237)
  let let812 := (Not let811)
  let let813 := (Implies let812 let20)
  let let814 := (Implies let811 let41)
  let let815 := (And let220 let81)
  let let816 := (Not let815)
  let let817 := (Implies let816 let24)
  let let818 := (Implies let815 let77)
  let let819 := (And let331 let71)
  let let820 := (Not let819)
  let let821 := (Implies let820 let34)
  let let822 := (Implies let819 let157)
  let let823 := (And let141 let138)
  let let824 := (Not let823)
  let let825 := (Implies let824 let432)
  let let826 := (Implies let823 let181)
  let let827 := (And let567 let351)
  let let828 := (Not let827)
  let let829 := (Implies let828 let391)
  let let830 := (Implies let827 let440)
  let let831 := (And let574 let148)
  let let832 := (Not let831)
  let let833 := (Implies let832 let68)
  let let834 := (Implies let831 let315)
  let let835 := (And let301 let61)
  let let836 := (Not let835)
  let let837 := (Implies let836 let42)
  let let838 := (Implies let835 let30)
  let let839 := (And let220 let228)
  let let840 := (Not let839)
  let let841 := (Implies let840 let32)
  let let842 := (Implies let839 let53)
  let let843 := (And let331 let504)
  let let844 := (Not let843)
  let let845 := (Implies let844 let54)
  let let846 := (Implies let843 let36)
  let let847 := (Or let141 (Or let351 (Or let204 let462)))
  let let848 := (Or let567 (Or let148 (Or let311 let469)))
  let let849 := (Or let574 (Or let61 (Or let237 let248)))
  let let850 := (Or let301 (Or let228 (Or let81 let477)))
  let let851 := (Or let220 (Or let504 (Or let71 let96)))
  let let852 := (Or let331 (Or let74 (Or let512 let338)))
  let let853 := (Eq arg1 let183)
  let let854 := (Eq arg1 let399)
  let let855 := (Eq arg1 fmt0)
  let let856 := (Or let855 (Or let854 let853))
  let let857 := (Or let226 (Or let398 (Or let519 (Or let495 (Or let517 let362)))))
  let let858 := (Not let587)
  let let859 := (Eq arg0 let614)
  let let860 := (And let697 (And let696 (And let695 (And let694 (And let693 (And let692 (And let691 (And let690 (And let689 (And let688 (And let859 (And let607 (And let357 (And let858 (And let583 (And let562 (And let533 (And let857 (And let856 (And let852 (And let851 (And let850 (And let849 (And let848 (And let847 (And let846 (And let845 (And let842 (And let841 (And let838 (And let837 (And let834 (And let833 (And let830 (And let829 (And let826 (And let825 (And let822 (And let821 (And let818 (And let817 (And let814 (And let813 (And let810 (And let809 (And let806 (And let805 (And let802 let801))))))))))))))))))))))))))))))))))))))))))))))))
  let let861 := (Implies let860 let798)
  let let862 := (Not let861)
  let let863 := (format let348)
  let let864 := (Eq let90 let863)
  let let865 := (format let712)
  let let866 := (Eq let92 let865)
  let let867 := (format let717)
  let let868 := (Eq let7 let867)
  let let869 := (Not let274)
  let let870 := (And let869 (And let369 (And let523 (And let868 (And let866 let864)))))
  let let871 := (And let284 let203)
  let let872 := (Not let871)
  let let873 := (Implies let872 let208)
  let let874 := (Implies let871 let210)
  let let875 := (And let280 let354)
  let let876 := (Not let875)
  let let877 := (Implies let876 let408)
  let let878 := (Implies let875 let108)
  let let879 := (And let253 let155)
  let let880 := (Not let879)
  let let881 := (Implies let880 let318)
  let let882 := (Implies let879 let104)
  let let883 := (And let538 let314)
  let let884 := (Not let883)
  let let885 := (Implies let884 let20)
  let let886 := (Implies let883 let41)
  let let887 := (And let551 let231)
  let let888 := (Not let887)
  let let889 := (Implies let888 let24)
  let let890 := (Implies let887 let77)
  let let891 := (And let781 let777)
  let let892 := (Not let891)
  let let893 := (Implies let892 let34)
  let let894 := (Implies let891 let157)
  let let895 := (And let284 let366)
  let let896 := (Not let895)
  let let897 := (Implies let896 let432)
  let let898 := (Implies let895 let181)
  let let899 := (And let280 let225)
  let let900 := (Not let899)
  let let901 := (Implies let900 let391)
  let let902 := (Implies let899 let440)
  let let903 := (And let253 let377)
  let let904 := (Not let903)
  let let905 := (Implies let904 let68)
  let let906 := (Implies let903 let315)
  let let907 := (And let538 let350)
  let let908 := (Not let907)
  let let909 := (Implies let908 let42)
  let let910 := (Implies let907 let30)
  let let911 := (And let551 let751)
  let let912 := (Not let911)
  let let913 := (Implies let912 let32)
  let let914 := (Implies let911 let53)
  let let915 := (And let781 let136)
  let let916 := (Not let915)
  let let917 := (Implies let916 let54)
  let let918 := (Implies let915 let36)
  let let919 := (Or let284 (Or let225 (Or let354 let462)))
  let let920 := (Or let280 (Or let377 (Or let155 let469)))
  let let921 := (Or let253 (Or let350 (Or let314 let248)))
  let let922 := (Or let538 (Or let751 (Or let231 let477)))
  let let923 := (Or let551 (Or let136 (Or let777 let96)))
  let let924 := (Or let781 (Or let330 (Or let328 let338)))
  let let925 := (Eq let119 let381)
  let let926 := (Eq let119 let729)
  let let927 := (Or let242 (Or let926 let925))
  let let928 := (Or let87 (Or let513 (Or let385 (Or let384 (Or let347 let387)))))
  let let929 := (Eq let84 let494)
  let let930 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let120 let724))
  let let931 := (binrel% GE.ge let930 let92)
  let let932 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let120 let83))
  let let933 := (binrel% GE.ge let932 let18)
  let let934 := (Not let933)
  let let935 := (binrel% GE.ge let396 let27)
  let let936 := (Not let935)
  let let937 := (binrel% GE.ge let223 let9)
  let let938 := (binrel% GE.ge let326 let22)
  let let939 := (binrel% HAdd.hAdd let22 let748)
  let let940 := (Eq let84 let939)
  let let941 := (And let239 (And let276 (And let233 (And let232 (And let197 (And let276 (And let580 (And let576 (And let573 (And let310 (And let940 (And let938 (And let937 (And let936 (And let934 (And let931 (And let929 (And let928 (And let927 (And let924 (And let923 (And let922 (And let921 (And let920 (And let919 (And let918 (And let917 (And let914 (And let913 (And let910 (And let909 (And let906 (And let905 (And let902 (And let901 (And let898 (And let897 (And let894 (And let893 (And let890 (And let889 (And let886 (And let885 (And let882 (And let881 (And let878 (And let877 (And let874 let873))))))))))))))))))))))))))))))))))))))))))))))))
  let let942 := (Implies let941 let870)
  let let943 := (Not let942)
  let let944 := (Eq And And)
  let let945 := (Eq let208 let208)
  let let946 := (Eq let210 let210)
  let let947 := (Eq let408 let408)
  let let948 := (Eq let108 let108)
  let let949 := (Eq let318 let318)
  let let950 := (Eq let104 let104)
  let let951 := (Eq let20 let20)
  let let952 := (Eq let41 let41)
  let let953 := (Eq let24 let24)
  let let954 := (Eq let77 let77)
  let let955 := (Eq let34 let34)
  let let956 := (Eq let157 let157)
  let let957 := (Eq let432 let432)
  let let958 := (Eq let181 let181)
  let let959 := (Eq let391 let391)
  let let960 := (Eq let440 let440)
  let let961 := (Eq let68 let68)
  let let962 := (Eq let315 let315)
  let let963 := (Eq let42 let42)
  let let964 := (Eq let30 let30)
  let let965 := (Eq let32 let32)
  let let966 := (Eq let53 let53)
  let let967 := (Eq let54 let54)
  let let968 := (Eq let36 let36)
  let let969 := (Eq let457 let457)
  let let970 := (Eq let458 let458)
  let let971 := (Eq Or Or)
  let let972 := (Eq let459 let459)
  let let973 := (Eq let460 let460)
  let let974 := (Eq let461 let461)
  let let975 := (Eq let464 let464)
  let let976 := (Eq let465 let465)
  let let977 := (Eq let466 let466)
  let let978 := (Eq let467 let467)
  let let979 := (Eq let468 let468)
  let let980 := (Eq let243 let243)
  let let981 := (Eq let244 let244)
  let let982 := (Eq let245 let245)
  let let983 := (Eq let246 let246)
  let let984 := (Eq let247 let247)
  let let985 := (Eq let472 let472)
  let let986 := (Eq let473 let473)
  let let987 := (Eq let474 let474)
  let let988 := (Eq let475 let475)
  let let989 := (Eq let476 let476)
  let let990 := (Eq let89 let89)
  let let991 := (Eq let91 let91)
  let let992 := (Eq let93 let93)
  let let993 := (Eq let94 let94)
  let let994 := (Eq let95 let95)
  let let995 := (Eq let333 let333)
  let let996 := (Eq let334 let334)
  let let997 := (Eq let335 let335)
  let let998 := (Eq let336 let336)
  let let999 := (Eq let337 let337)
  let let1000 := (Eq fmt1 fmt1)
  let let1001 := (Eq let10 let10)
  let let1002 := (Eq let111 let111)
  let let1003 := (Eq let18 let18)
  let let1004 := (Eq let27 let27)
  let let1005 := (Eq let9 let9)
  let let1006 := (And let688 (And let689 (And let690 (And let691 (And let692 (And let693 (And let694 (And let695 (And let696 let697)))))))))
  let let1007 := (Eq arg0 let84)
  let let1008 := (And let1007 let1006)
  let let1009 := (Eq arg1 arg1)
  let let1010 := (Eq arg0 arg0)
  let let1011 := (Eq let575 let564)
  let let1012 := (Eq arg0 let939)
  let let1013 := (Eq let614 let939)
  let let1014 := (Eq let613 let748)
  let let1015 := (binrel% HAdd.hAdd arg1 let492)
  let let1016 := (Eq let84 let1015)
  let let1017 := (Eq let529 let489)
  let let1018 := (Eq let528 let488)
  let let1019 := (Eq let144 let487)
  let let1020 := (Eq let143 let324)
  let let1021 := (Eq let531 let491)
  let let1022 := (Eq let530 let490)
  let let1023 := (Or let429 let429)
  let let1024 := (Not let426)
  let let1025 := (Not let157)
  let let1026 := (Not let135)
  let let1027 := (Or let1026 let1024)
  let let1028 := (Implies let135 let1024)
  let let1029 := (Not let421)
  let let1030 := (Or let1024 let1029)
  let let1031 := (Implies let426 let1029)
  let let1032 := (Eq let421 False)
  let let1033 := (Or let453 let54)
  let let1034 := (Or let609 let54)
  let let1035 := (Not let54)
  let let1036 := (Or let449 let32)
  let let1037 := (Or let714 let32)
  let let1038 := (Or let422 let24)
  let let1039 := (Or let524 let24)
  let let1040 := (Not let24)
  let let1041 := (Or let1025 let1040)
  let let1042 := (Not let32)
  let let1043 := (Or let1035 (Or let1042 let1041))
  let let1044 := (Or let768 let1043)
  let let1045 := (Or let126 let126)
  let let1046 := (Not let313)
  let let1047 := (Or (Not let122) let1046)
  let let1048 := (Implies let122 let1046)
  let let1049 := (Or let417 let20)
  let let1050 := (Or let720 let20)
  let let1051 := (Not let20)
  let let1052 := (Or let1040 let1051)
  let let1053 := (Or let1025 let1052)
  let let1054 := (Not let30)
  let let1055 := (Or let271 let768)
  let let1056 := (Or let1051 let1055)
  let let1057 := (Or let1040 let1056)
  let let1058 := (Or let1042 (Or let1054 let1057))
  let let1059 := (Eq let18 let13)
  let let1060 := (Eq let18 let12)
  let let1061 := (And let15 (And let1060 let1059))
  let let1062 := (Implies let726 let1061)
  let let1063 := (Eq let1061 False)
  let let1064 := (Or (Not let1059) False)
  let let1065 := (Not let1060)
  let let1066 := (Eq let13 let18)
  let let1067 := (Not let1066)
  let let1068 := (Or let1067 False)
  let let1069 := (binrel% HAdd.hAdd let275 let286)
  let let1070 := (binrel% HAdd.hAdd let275 let1069)
  let let1071 := (binrel% HAdd.hAdd let732 (binrel% HAdd.hAdd let66 let704))
  let let1072 := (binrel% LE.le let1071 let1070)
  let let1073 := (binrel% LE.le let704 let286)
  let let1074 := (And let733 let15)
  let let1075 := (Implies let1074 let1073)
  let let1076 := (Eq let66 let275)
  let let1077 := (Eq let12 let18)
  let let1078 := (And let498 let1077)
  let let1079 := (Implies let1078 let1076)
  let let1080 := (Eq let732 let275)
  let let1081 := (And let498 let1066)
  let let1082 := (Implies let1081 let1080)
  let let1083 := (Or let271 (Or let768 let1061))
  let let1084 := (Eq let18 let26)
  let let1085 := (And let146 let1084)
  let let1086 := (Implies let1085 let1059)
  let let1087 := (Not let146)
  let let1088 := (Or let1087 (Or (Not let1084) let1059))
  let let1089 := (Eq let26 let13)
  let let1090 := (Eq let11 let9)
  let let1091 := (Implies let735 let1084)
  let let1092 := (Or (Not let735) let1084)
  let let1093 := (And let32 let54)
  let let1094 := (And let30 let1093)
  let let1095 := (Implies let1094 let735)
  let let1096 := (Or let1054 (Or let1042 (Or let1035 let735)))
  let let1097 := (Eq let28 let29)
  let let1098 := (Eq let22 let31)
  let let1099 := (Eq let8 let146)
  let let1100 := (And let24 let157)
  let let1101 := (And let146 (And let20 let1100))
  let let1102 := (Implies let1101 let1060)
  let let1103 := (Or let1025 let1060)
  let let1104 := (Or let1040 let1103)
  let let1105 := (Or let1087 (Or let1051 let1104))
  let let1106 := (Eq let17 let12)
  let let1107 := (Eq let18 let23)
  let let1108 := (Or let125 let42)
  let let1109 := (Or let127 let42)
  let let1110 := (Not let42)
  let let1111 := (Or let1042 (Or let1110 let1052))
  let let1112 := (Or let768 let1111)
  let let1113 := (Or let768 (Or let1035 let1111))
  let let1114 := (Not let34)
  let let1115 := (Or let1114 let1052)
  let let1116 := (Or let1110 let1115)
  let let1117 := (Or let1042 let1116)
  let let1118 := (Or let1110 let1057)
  let let1119 := (Or let1042 let1118)
  let let1120 := (Or let1114 let1119)
  let let1121 := (Eq let22 let13)
  let let1122 := (Eq let22 let12)
  let let1123 := (And let15 (And let1122 let1121))
  let let1124 := (Implies let745 let1123)
  let let1125 := (Eq let1123 False)
  let let1126 := (Or (Not let1121) False)
  let let1127 := (Not let1122)
  let let1128 := (Eq let13 let22)
  let let1129 := (Not let1128)
  let let1130 := (Or let1129 False)
  let let1131 := (binrel% HAdd.hAdd let752 let286)
  let let1132 := (binrel% HAdd.hAdd let752 let1131)
  let let1133 := (binrel% LE.le let1071 let1132)
  let let1134 := (Eq let66 let752)
  let let1135 := (Eq let12 let22)
  let let1136 := (And let498 let1135)
  let let1137 := (Implies let1136 let1134)
  let let1138 := (Eq let732 let752)
  let let1139 := (And let498 let1128)
  let let1140 := (Implies let1139 let1138)
  let let1141 := (And let146 (And let42 let1093))
  let let1142 := (Implies let1141 let1121)
  let let1143 := (Or let1035 let1121)
  let let1144 := (Or let1042 let1143)
  let let1145 := (Or let1087 (Or let1110 let1144))
  let let1146 := (And let24 let34)
  let let1147 := (And let146 (And let20 let1146))
  let let1148 := (Implies let1147 let1122)
  let let1149 := (Or let1114 let1122)
  let let1150 := (Or let1040 let1149)
  let let1151 := (Or let1087 (Or let1051 let1150))
  let let1152 := (Eq let22 let23)
  let let1153 := (Or let428 let34)
  let let1154 := (Or let705 let34)
  let let1155 := (And let15 (And let1060 let1121))
  let let1156 := (Implies let754 let1155)
  let let1157 := (Eq let1155 False)
  let let1158 := (binrel% HAdd.hAdd let752 let1069)
  let let1159 := (binrel% LE.le let1071 let1158)
  let let1160 := (Or let271 (Or let768 let1155))
  let let1161 := (Or let1051 let1160)
  let let1162 := (Not let36)
  let let1163 := (And let15 (And let1122 let1059))
  let let1164 := (Implies let759 let1163)
  let let1165 := (Eq let1163 False)
  let let1166 := (binrel% HAdd.hAdd let275 let1131)
  let let1167 := (binrel% LE.le let1071 let1166)
  let let1168 := (Or let1040 (Or let1051 (Or let271 (Or let768 let1163))))
  let let1169 := (Or let1110 let1168)
  let let1170 := (And let32 let36)
  let let1171 := (And let146 (And let42 let1170))
  let let1172 := (Implies let1171 let1059)
  let let1173 := (Or let1162 let1059)
  let let1174 := (Or let1042 let1173)
  let let1175 := (Or let1087 (Or let1110 let1174))
  let let1176 := (Eq let18 let31)
  let let1177 := (Not let41)
  let let1178 := (Or let1040 let1177)
  let let1179 := (Or let1042 (Or let1110 (Or let1040 (Or let1177 let1055))))
  let let1180 := (Eq let9 let12)
  let let1181 := (And let15 (And let1180 let1121))
  let let1182 := (Implies let763 let1181)
  let let1183 := (binrel% HAdd.hAdd let752 (binrel% HAdd.hAdd let772 let286))
  let let1184 := (binrel% LE.le let1071 let1183)
  let let1185 := (Eq let66 let772)
  let let1186 := (Eq let12 let9)
  let let1187 := (And let498 let1186)
  let let1188 := (Eq let9 let17)
  let let1189 := (And let146 let1188)
  let let1190 := (And let41 let1100)
  let let1191 := (Eq let40 let19)
  let let1192 := (binrel% GE.ge fmt1 let48)
  let let1193 := (Or let296 let1114)
  let let1194 := (Or let271 let296)
  let let1195 := (Or let1114 let1194)
  let let1196 := (Implies let773 let1123)
  let let1197 := (And let385 let54)
  let let1198 := (Implies let1197 let1121)
  let let1199 := (Not let385)
  let let1200 := (Or let1199 let1143)
  let let1201 := (Eq let31 let13)
  let let1202 := (Eq let11 let22)
  let let1203 := (Eq let214 let385)
  let let1204 := (And let385 let34)
  let let1205 := (Implies let1204 let1122)
  let let1206 := (Or let1199 let1149)
  let let1207 := (Eq let23 let12)
  let let1208 := (Implies let217 let1163)
  let let1209 := (And let385 let36)
  let let1210 := (Implies let541 let1155)
  let let1211 := (And let385 let157)
  let let1212 := (Or let235 (Or let214 let1192))
  let let1213 := (Or let235 (Or let297 let1192))
  let let1214 := (And let234 let296)
  let let1215 := (Implies let1214 let1192)
  let let1216 := (Not let1192)
  let let1217 := (Or let1216 let49)
  let let1218 := (Or let373 (Or let8 let1217))
  let let1219 := (Or let779 (Or let769 let1217))
  let let1220 := (And let374 (And let768 let1192))
  let let1221 := (Eq let48 fmt1)
  let let1222 := (And let1192 (And let374 let768))
  let let1223 := (Not let49)
  let let1224 := (Or let271 let1223)
  let let1225 := (Or let1040 let1224)
  let let1226 := (Or let1042 let1225)
  let let1227 := (Implies let158 let1155)
  let let1228 := (Or let271 (Or let1223 let1155))
  let let1229 := (And let594 let1093)
  let let1230 := (Implies let1229 let1121)
  let let1231 := (Not let594)
  let let1232 := (Or let1231 let1144)
  let let1233 := (Eq let29 let13)
  let let1234 := (Eq let11 let18)
  let let1235 := (Eq let49 let594)
  let let1236 := (And let594 let1100)
  let let1237 := (Eq let19 let12)
  let let1238 := (Or let768 let1035)
  let let1239 := (Or let1035 let1042)
  let let1240 := (Or let768 let1239)
  let let1241 := (Or let768 (Or let1035 (Or let1042 let1040)))
  let let1242 := (Or let1042 (Or let1110 (Or let1114 let1178)))
  let let1243 := (Or let1114 let1179)
  let let1244 := (Implies let783 let1155)
  let let1245 := (Eq let18 let17)
  let let1246 := (And let146 let1245)
  let let1247 := (Implies let1246 let1060)
  let let1248 := (Or let1087 (Or (Not let1245) let1060))
  let let1249 := (Implies let278 let1245)
  let let1250 := (Or (Not let278) let1245)
  let let1251 := (And let41 let1146)
  let let1252 := (Implies let1251 let278)
  let let1253 := (Or let1177 (Or let1040 (Or let1114 let278)))
  let let1254 := (Or let1042 let1052)
  let let1255 := (Or let1042 (Or let1054 let1115))
  let let1256 := (Or let1114 let1058)
  let let1257 := (Implies let321 let1163)
  let let1258 := (Not let230)
  let let1259 := (Not let124)
  let let1260 := (Or let1258 let1259)
  let let1261 := (Implies let230 let1259)
  let let1262 := (Eq let124 False)
  let let1263 := (Not let77)
  let let1264 := (Implies let514 let1155)
  let let1265 := (Eq let18 let19)
  let let1266 := (And let146 (And let20 let1265))
  let let1267 := (Or (Not let1265) let1060)
  let let1268 := (Implies let787 let1265)
  let let1269 := (Or (Not let787) let1265)
  let let1270 := (And let77 let34)
  let let1271 := (Implies let1270 let787)
  let let1272 := (Or let1263 (Or let1114 let787))
  let let1273 := (Or let1035 let450)
  let let1274 := (Not let448)
  let let1275 := (Or let1274 let450)
  let let1276 := (Or let1274 let1258)
  let let1277 := (Implies let448 let1258)
  let let1278 := (Or let1274 let1259)
  let let1279 := (Implies let448 let1259)
  let let1280 := (Or let124 let230)
  let let1281 := (Not let53)
  let let1282 := (Implies let788 let1163)
  let let1283 := (Eq let18 let29)
  let let1284 := (And let146 (And let42 let1283))
  let let1285 := (Or (Not let1283) let1059)
  let let1286 := (Implies let59 let1283)
  let let1287 := (Or (Not let59) let1283)
  let let1288 := (And let53 let54)
  let let1289 := (Implies let1288 let59)
  let let1290 := (Or let1281 (Or let1035 let59))
  let let1291 := (Or let450 let1035)
  let let1292 := (Or let1114 let1040)
  let let1293 := (Implies let55 let1163)
  let let1294 := (Or let1040 (Or let271 (Or let1223 let1163)))
  let let1295 := (And let594 let1283)
  let let1296 := (And let594 let1146)
  let let1297 := (Implies let1296 let1122)
  let let1298 := (Or let1231 let1150)
  let let1299 := (Or let1223 let1239)
  let let1300 := (Or let1042 let1292)
  let let1301 := (Or let1114 let1226)
  let let1302 := (Implies let268 let1123)
  let let1303 := (Implies let546 let1155)
  let let1304 := (And let594 let1265)
  let let1305 := (Or let1026 let1029)
  let let1306 := (Implies let135 let1029)
  let let1307 := (Or let768 let1110)
  let let1308 := (Implies let45 let1061)
  let let1309 := (Eq let9 let13)
  let let1310 := (And let15 (And let1122 let1309))
  let let1311 := (Implies let37 let1310)
  let let1312 := (Eq let13 let9)
  let let1313 := (Not let1312)
  let let1314 := (binrel% HAdd.hAdd let772 let1131)
  let let1315 := (binrel% LE.le let1071 let1314)
  let let1316 := (Eq let732 let772)
  let let1317 := (And let498 let1312)
  let let1318 := (Eq let9 let26)
  let let1319 := (And let146 let1318)
  let let1320 := (And let30 let1170)
  let let1321 := (Implies let303 let1163)
  let let1322 := (And let594 let1170)
fun lean_r0 : (Eq let6 let2) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let39 let38) => -- THEORY_REWRITE_BOOL
fun lean_r2 : (Eq let47 let46) => -- THEORY_REWRITE_BOOL
fun lean_r3 : (Eq let57 let56) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq let59 let58) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let62 let61) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let63 let42) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let66 let64) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let69 let68) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let72 let71) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let75 let74) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let79 let77) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let82 let81) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let85 True) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let87 let86) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let100 let99) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let102 let101) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let106 let104) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let110 let108) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let120 let115) => -- THEORY_REWRITE_ARITH
fun lean_r20 : let128 => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let131 let130) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let134 let133) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let136 let135) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let139 let138) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let142 let141) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let145 let144) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let146 let8) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let149 let148) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let152 let151) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let155 let154) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let160 let159) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let162 let161) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let164 let163) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let167 let166) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let169 let168) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let177 let176) => -- THEORY_REWRITE_BOOL
fun lean_r37 : let179 => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let182 let181) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let170 let183) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let186 let185) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let190 let189) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let193 let192) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let196 let194) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let197 True) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let201 let200) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let203 let202) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let205 let204) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let206 let187) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let132 let27) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let209 let208) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let212 let210) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let213 let15) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let219 let218) => -- THEORY_REWRITE_BOOL
fun lean_r54 : (Eq let98 let220) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let223 let222) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let225 let224) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let227 let226) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let229 let228) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let231 let230) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let232 True) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let233 True) => -- THEORY_REWRITE_ARITH
fun lean_r62 : (Eq let236 let235) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let238 let237) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq let239 True) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let242 let241) => -- THEORY_REWRITE_ARITH
fun lean_r66 : (Eq let251 let250) => -- THEORY_REWRITE_BOOL
fun lean_r67 : (Eq let253 let252) => -- THEORY_REWRITE_ARITH
fun lean_r68 : (Eq let265 let264) => -- THEORY_REWRITE_BOOL
fun lean_r69 : (Eq let266 let11) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq let270 let269) => -- THEORY_REWRITE_BOOL
fun lean_r71 : (Eq let272 let271) => -- THEORY_REWRITE_ARITH
fun lean_r72 : (Eq let274 let273) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let258 let198) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let275 let65) => -- THEORY_REWRITE_ARITH
fun lean_r75 : (Eq let276 True) => -- THEORY_REWRITE_ARITH
fun lean_r76 : (Eq let278 let277) => -- THEORY_REWRITE_ARITH
fun lean_r77 : (Eq let280 let279) => -- THEORY_REWRITE_ARITH
fun lean_r78 : (Eq let282 let281) => -- THEORY_REWRITE_ARITH
fun lean_r79 : (Eq let284 let283) => -- THEORY_REWRITE_ARITH
fun lean_r80 : (Eq let286 let3) => -- THEORY_REWRITE_ARITH
fun lean_r81 : (Eq let287 let84) => -- THEORY_REWRITE_ARITH
fun lean_r82 : (Eq let288 let109) => -- THEORY_REWRITE_ARITH
fun lean_r83 : (Eq let289 False) => -- THEORY_REWRITE_ARITH
fun lean_r84 : (Eq let291 let290) => -- THEORY_REWRITE_ARITH
fun lean_r85 : (Eq let295 let294) => -- THEORY_REWRITE_ARITH
fun lean_r86 : (Eq let299 let298) => -- THEORY_REWRITE_BOOL
fun lean_r87 : (Eq let300 let105) => -- THEORY_REWRITE_ARITH
fun lean_r88 : (Eq let302 let301) => -- THEORY_REWRITE_ARITH
fun lean_r89 : (Eq let305 let304) => -- THEORY_REWRITE_BOOL
fun lean_r90 : (Eq let309 let308) => -- THEORY_REWRITE_ARITH
fun lean_r91 : (Eq let310 True) => -- THEORY_REWRITE_ARITH
fun lean_r92 : (Eq let312 let311) => -- THEORY_REWRITE_ARITH
fun lean_r93 : (Eq let314 let313) => -- THEORY_REWRITE_ARITH
fun lean_r94 : (Eq let317 let315) => -- THEORY_REWRITE_ARITH
fun lean_r95 : (Eq let319 let318) => -- THEORY_REWRITE_ARITH
fun lean_r96 : (Eq let320 let111) => -- THEORY_REWRITE_ARITH
fun lean_r97 : (Eq let323 let322) => -- THEORY_REWRITE_BOOL
fun lean_r98 : (Eq let326 let325) => -- THEORY_REWRITE_ARITH
fun lean_r99 : (Eq let328 let327) => -- THEORY_REWRITE_ARITH
fun lean_r100 : (Eq let330 let329) => -- THEORY_REWRITE_ARITH
fun lean_r101 : (Eq let332 let331) => -- THEORY_REWRITE_ARITH
fun lean_r102 : (Eq let341 let340) => -- THEORY_REWRITE_BOOL
fun lean_r103 : (Eq let345 let344) => -- THEORY_REWRITE_ARITH
fun lean_r104 : (Eq let347 let8) => -- THEORY_REWRITE_ARITH
fun lean_r105 : let349 => -- THEORY_REWRITE_ARITH
fun lean_r106 : (Eq let350 let122) => -- THEORY_REWRITE_ARITH
fun lean_r107 : (Eq let348 let348) => -- THEORY_REWRITE_ARITH
fun lean_r108 : (Eq let352 let351) => -- THEORY_REWRITE_ARITH
fun lean_r109 : (Eq let354 let353) => -- THEORY_REWRITE_ARITH
fun lean_r110 : (Eq let355 let78) => -- THEORY_REWRITE_ARITH
fun lean_r111 : (Eq let359 let357) => -- THEORY_REWRITE_BOOL
fun lean_r112 : (Eq let360 let2) => -- THEORY_REWRITE_ARITH
fun lean_r113 : (Eq let364 let362) => -- THEORY_REWRITE_ARITH
fun lean_r114 : (Eq let366 let365) => -- THEORY_REWRITE_ARITH
fun lean_r115 : (Eq let367 let316) => -- THEORY_REWRITE_ARITH
fun lean_r116 : (Eq let369 let368) => -- THEORY_REWRITE_ARITH
fun lean_r117 : (Eq let370 let234) => -- THEORY_REWRITE_BOOL
fun lean_r118 : (Eq let372 let371) => -- THEORY_REWRITE_ARITH
fun lean_r119 : (Eq let375 let374) => -- THEORY_REWRITE_ARITH
fun lean_r120 : (Eq let377 let376) => -- THEORY_REWRITE_ARITH
fun lean_r121 : (Eq let378 let84) => -- THEORY_REWRITE_ARITH
fun lean_r122 : (Eq let379 let241) => -- THEORY_REWRITE_BOOL
fun lean_r123 : (Eq let380 let11) => -- THEORY_REWRITE_ARITH
fun lean_r124 : (Eq let381 let9) => -- THEORY_REWRITE_ARITH
fun lean_r125 : (Eq let382 let41) => -- THEORY_REWRITE_ARITH
fun lean_r126 : (Eq let384 let49) => -- THEORY_REWRITE_ARITH
fun lean_r127 : (Eq let385 let214) => -- THEORY_REWRITE_ARITH
fun lean_r128 : (Eq let324 let22) => -- THEORY_REWRITE_ARITH
fun lean_r129 : (Eq let387 let386) => -- THEORY_REWRITE_ARITH
fun lean_r130 : (Eq let388 let115) => -- THEORY_REWRITE_ARITH
fun lean_r131 : (Eq let390 let389) => -- THEORY_REWRITE_ARITH
fun lean_r132 : (Eq let392 let391) => -- THEORY_REWRITE_ARITH
fun lean_r133 : (Eq let174 fmt0) => -- THEORY_REWRITE_ARITH
fun lean_r134 : (Eq let393 False) => -- THEORY_REWRITE_ARITH
fun lean_r135 : (Eq let394 False) => -- THEORY_REWRITE_ARITH
fun lean_r136 : (Eq let395 True) => -- THEORY_REWRITE_BOOL
fun lean_r137 : (Eq let396 let221) => -- THEORY_REWRITE_ARITH
fun lean_r138 : (Eq let400 let398) => -- THEORY_REWRITE_ARITH
fun lean_r139 : (Eq let402 let30) => -- THEORY_REWRITE_ARITH
fun lean_r140 : (Eq let403 let401) => -- THEORY_REWRITE_ARITH
fun lean_r141 : (Eq let485 let484) => -- THEORY_REWRITE_BOOL
fun lean_r142 : (Eq let486 let32) => -- THEORY_REWRITE_ARITH
fun lean_r143 : (Eq let494 let493) => -- THEORY_REWRITE_ARITH
fun lean_r144 : (Eq let496 let495) => -- THEORY_REWRITE_ARITH
fun lean_r145 : (Eq let497 True) => -- THEORY_REWRITE_BOOL
fun lean_r146 : (Eq let498 True) => -- EVALUATE
fun lean_r147 : let500 => -- THEORY_REWRITE_ARITH
fun lean_r148 : (Eq let502 let53) => -- THEORY_REWRITE_ARITH
fun lean_r149 : (Eq let503 let501) => -- THEORY_REWRITE_ARITH
fun lean_r150 : (Eq let97 let504) => -- THEORY_REWRITE_ARITH
fun lean_r151 : (Eq let506 let505) => -- THEORY_REWRITE_BOOL
fun lean_r152 : (Eq let509 let508) => -- THEORY_REWRITE_BOOL
fun lean_r153 : (Eq let511 let510) => -- THEORY_REWRITE_BOOL
fun lean_r154 : (Eq let339 let512) => -- THEORY_REWRITE_ARITH
fun lean_r155 : (Eq let513 let481) => -- THEORY_REWRITE_ARITH
fun lean_r156 : (Eq let172 let399) => -- THEORY_REWRITE_ARITH
fun lean_r157 : (Eq let516 let515) => -- THEORY_REWRITE_BOOL
fun lean_r158 : (Eq let518 let517) => -- THEORY_REWRITE_ARITH
fun lean_r159 : (Eq let520 let519) => -- THEORY_REWRITE_ARITH
fun lean_r160 : (Eq let523 let522) => -- THEORY_REWRITE_ARITH
fun lean_r161 : (Eq let526 let525) => -- THEORY_REWRITE_BOOL
fun lean_r162 : (Eq let527 let15) => -- THEORY_REWRITE_BOOL
fun lean_r163 : (Eq let537 let533) => -- THEORY_REWRITE_ARITH
fun lean_r164 : (Eq let538 let124) => -- THEORY_REWRITE_ARITH
fun lean_r165 : (Eq let539 let10) => -- THEORY_REWRITE_ARITH
fun lean_r166 : (Eq let540 let363) => -- THEORY_REWRITE_ARITH
fun lean_r167 : (Eq let543 let542) => -- THEORY_REWRITE_BOOL
fun lean_r168 : (Eq let545 let544) => -- THEORY_REWRITE_ARITH
fun lean_r169 : (Eq let548 let547) => -- THEORY_REWRITE_BOOL
fun lean_r170 : (Eq let550 let549) => -- THEORY_REWRITE_ARITH
fun lean_r171 : (Eq let551 let421) => -- THEORY_REWRITE_ARITH
fun lean_r172 : (Eq let557 let556) => -- THEORY_REWRITE_ARITH
fun lean_r173 : (Eq let558 let408) => -- THEORY_REWRITE_ARITH
fun lean_r174 : (Eq let565 let563) => -- THEORY_REWRITE_ARITH
fun lean_r175 : (Eq let566 True) => -- THEORY_REWRITE_BOOL
fun lean_r176 : (Eq let507 let567) => -- THEORY_REWRITE_ARITH
fun lean_r177 : (Eq let569 let564) => -- THEORY_REWRITE_ARITH
fun lean_r178 : (Eq let570 let568) => -- THEORY_REWRITE_ARITH
fun lean_r179 : (Eq let572 let571) => -- THEORY_REWRITE_ARITH
fun lean_r180 : (Eq let573 True) => -- THEORY_REWRITE_ARITH
fun lean_r181 : (Eq let249 let574) => -- THEORY_REWRITE_ARITH
fun lean_r182 : (Eq let575 let575) => -- THEORY_REWRITE_ARITH
fun lean_r183 : (Eq let576 True) => -- THEORY_REWRITE_ARITH
fun lean_r184 : (Eq let579 let578) => -- THEORY_REWRITE_ARITH
fun lean_r185 : (Eq let580 True) => -- THEORY_REWRITE_ARITH
fun lean_r186 : (Eq let584 let583) => -- THEORY_REWRITE_ARITH
fun lean_r187 : (Eq let585 let20) => -- THEORY_REWRITE_ARITH
fun lean_r188 : (Eq let588 let587) => -- THEORY_REWRITE_ARITH
fun lean_r189 : (Eq let589 True) => -- THEORY_REWRITE_BOOL
fun lean_r190 : (Eq let592 let591) => -- THEORY_REWRITE_ARITH
fun lean_r191 : (Eq let593 let24) => -- THEORY_REWRITE_ARITH
fun lean_r192 : (Eq let594 let49) => -- THEORY_REWRITE_ARITH
fun lean_r193 : (Eq let596 let358) => -- THEORY_REWRITE_ARITH
fun lean_r194 : (Eq let598 let597) => -- THEORY_REWRITE_ARITH
fun lean_r195 : (Eq let601 let600) => -- THEORY_REWRITE_BOOL
fun lean_r196 : (Eq let605 let604) => -- THEORY_REWRITE_ARITH
fun lean_r197 : (Eq let608 let607) => -- THEORY_REWRITE_ARITH
fun lean_r198 : (Eq let611 let610) => -- THEORY_REWRITE_BOOL
fun lean_r199 : (Eq let612 let432) => -- THEORY_REWRITE_ARITH
fun lean_r200 : (Eq let615 let614) => -- THEORY_REWRITE_ARITH
fun lean_r201 : (Eq let616 let595) => -- THEORY_REWRITE_ARITH
fun lean_r202 : (Eq let179 let617) => -- THEORY_REWRITE_BOOL
fun lean_r203 : (Eq let699 let698) => -- THEORY_REWRITE_BOOL
fun lean_r204 : (Eq let702 let700) => -- THEORY_REWRITE_ARITH
fun lean_r205 : (Eq let704 let703) => -- THEORY_REWRITE_ARITH
fun lean_r206 : let601 => -- THEORY_REWRITE_ARITH
fun lean_r207 : let706 => -- THEORY_REWRITE_BOOL
fun lean_r208 : (Eq let707 True) => -- THEORY_REWRITE_BOOL
fun lean_r209 : (Eq let709 let4) => -- THEORY_REWRITE_ARITH
fun lean_r210 : (Eq let706 let710) => -- THEORY_REWRITE_BOOL
fun lean_r211 : let611 => -- THEORY_REWRITE_BOOL
fun lean_r212 : (Eq let500 let711) => -- THEORY_REWRITE_BOOL
fun lean_r213 : let713 => -- THEORY_REWRITE_ARITH
fun lean_r214 : (Eq let716 let715) => -- THEORY_REWRITE_BOOL
fun lean_r215 : let718 => -- THEORY_REWRITE_ARITH
fun lean_r216 : (Eq let719 True) => -- THEORY_REWRITE_BOOL
fun lean_r217 : (Eq let717 let717) => -- THEORY_REWRITE_ARITH
fun lean_r218 : let526 => -- THEORY_REWRITE_BOOL
fun lean_r219 : let721 => -- THEORY_REWRITE_BOOL
fun lean_r220 : (Eq let722 True) => -- THEORY_REWRITE_BOOL
fun lean_r221 : (Eq let721 let723) => -- THEORY_REWRITE_BOOL
fun lean_r222 : (Eq let725 let195) => -- THEORY_REWRITE_ARITH
fun lean_r223 : let299 => -- THEORY_REWRITE_BOOL
fun lean_r224 : (Eq let728 let727) => -- THEORY_REWRITE_BOOL
fun lean_r225 : (Eq let729 let18) => -- THEORY_REWRITE_ARITH
fun lean_r226 : (Eq let731 let2) => -- THEORY_REWRITE_ARITH
fun lean_r227 : (Eq let732 let708) => -- THEORY_REWRITE_ARITH
fun lean_r228 : (Eq let733 True) => -- EVALUATE
fun lean_r229 : (Eq let735 let734) => -- THEORY_REWRITE_ARITH
fun lean_r230 : (Eq let712 let712) => -- THEORY_REWRITE_ARITH
fun lean_r231 : (Eq let737 let736) => -- THEORY_REWRITE_ARITH
fun lean_r232 : (Eq let685 let738) => -- THEORY_REWRITE_BOOL
fun lean_r233 : (Eq let739 True) => -- THEORY_REWRITE_BOOL
fun lean_r234 : (Eq let128 let740) => -- THEORY_REWRITE_BOOL
fun lean_r235 : (Eq let741 let119) => -- THEORY_REWRITE_ARITH
fun lean_r236 : (Eq let747 let746) => -- THEORY_REWRITE_BOOL
fun lean_r237 : (Eq let748 let84) => -- THEORY_REWRITE_ARITH
fun lean_r238 : (Eq let749 False) => -- THEORY_REWRITE_ARITH
fun lean_r239 : (Eq let750 let3) => -- THEORY_REWRITE_ARITH
fun lean_r240 : (Eq let751 let448) => -- THEORY_REWRITE_ARITH
fun lean_r241 : (Eq let752 let4) => -- THEORY_REWRITE_ARITH
fun lean_r242 : (Eq let753 True) => -- THEORY_REWRITE_BOOL
fun lean_r243 : (Eq let756 let755) => -- THEORY_REWRITE_BOOL
fun lean_r244 : (Eq let757 let440) => -- THEORY_REWRITE_ARITH
fun lean_r245 : let716 => -- THEORY_REWRITE_BOOL
fun lean_r246 : (Eq let758 False) => -- THEORY_REWRITE_ARITH
fun lean_r247 : (Eq let761 let760) => -- THEORY_REWRITE_BOOL
fun lean_r248 : (Eq let762 let736) => -- THEORY_REWRITE_ARITH
fun lean_r249 : (Eq let765 let764) => -- THEORY_REWRITE_BOOL
fun lean_r250 : (Eq let766 let374) => -- THEORY_REWRITE_ARITH
fun lean_r251 : (Eq let618 let767) => -- THEORY_REWRITE_ARITH
fun lean_r252 : (Eq let771 let770) => -- THEORY_REWRITE_BOOL
fun lean_r253 : (Eq let772 let1) => -- THEORY_REWRITE_ARITH
fun lean_r254 : (Eq let775 let774) => -- THEORY_REWRITE_BOOL
fun lean_r255 : let771 => -- THEORY_REWRITE_BOOL
fun lean_r256 : (Eq let776 True) => -- THEORY_REWRITE_BOOL
fun lean_r257 : (Eq let777 let426) => -- THEORY_REWRITE_ARITH
fun lean_r258 : (Eq let778 let562) => -- THEORY_REWRITE_BOOL
fun lean_r259 : let780 => -- THEORY_REWRITE_BOOL
fun lean_r260 : (Eq let622 let211) => -- THEORY_REWRITE_ARITH
fun lean_r261 : (Eq let781 let427) => -- THEORY_REWRITE_ARITH
fun lean_r262 : (Eq let780 let782) => -- THEORY_REWRITE_BOOL
fun lean_r263 : (Eq let785 let784) => -- THEORY_REWRITE_BOOL
fun lean_r264 : (Eq let787 let786) => -- THEORY_REWRITE_ARITH
fun lean_r265 : (Eq let790 let789) => -- THEORY_REWRITE_BOOL
fun lean_a266 : let792 => by
have lean_s0 : (Or let1162 (Or let1114 (Or let1042 let1294))) :=
  (scope (fun lean_a267 : let36 =>
    (scope (fun lean_a268 : let34 =>
      (scope (fun lean_a269 : let32 =>
        (scope (fun lean_a270 : let24 =>
          (scope (fun lean_a271 : let15 =>
            (scope (fun lean_a272 : let49 =>
              have lean_s0 : let1235 := by timed Eq.symm lean_r192
              have lean_s1 : let594 := by timed eqResolve lean_a272 lean_s0
              let lean_s2 := by timed And.intro lean_a270 lean_a268
              have lean_s3 : let1296 := by timed And.intro lean_s1 lean_s2
              have lean_s4 : let1298 :=
                (scope (fun lean_a273 : let594 =>
                  (scope (fun lean_a274 : let24 =>
                    (scope (fun lean_a275 : let34 =>
                      have lean_s4 : let1152 := by timed Eq.symm lean_a275
                      have lean_s5 : let593 := by timed Eq.symm lean_a274
                      have lean_s6 : let24 := by timed Eq.symm lean_s5
                      let lean_s7 := by timed Eq.trans lean_s4 lean_s6
                      have lean_s8 : let1234 := by timed Eq.symm lean_a273
                      have lean_s9 : let594 := by timed Eq.symm lean_s8
                      have lean_s10 : let1237 := by timed flipCongrArg lean_s9 [xx5fcount]
                      have lean_s11 : let1122 := by timed Eq.trans lean_s7 lean_s10
                      show let1122 from lean_s11
                ))))))
              have lean_s5 : let1297 := by liftOrNToImp lean_s4, 3
              have lean_s6 : let1122 := by timed modusPonens lean_s3 lean_s5
              let lean_s7 := by timed And.intro lean_a269 lean_a267
              have lean_s8 : let1322 := by timed And.intro lean_s1 lean_s7
              have lean_s9 : (Or let1231 let1174) :=
                (scope (fun lean_a274 : let594 =>
                  (scope (fun lean_a275 : let32 =>
                    (scope (fun lean_a276 : let36 =>
                      have lean_s9 : let1176 := by timed Eq.symm lean_a276
                      have lean_s10 : let486 := by timed Eq.symm lean_a275
                      have lean_s11 : let32 := by timed Eq.symm lean_s10
                      let lean_s12 := by timed Eq.trans lean_s9 lean_s11
                      have lean_s13 : let1234 := by timed Eq.symm lean_a274
                      have lean_s14 : let594 := by timed Eq.symm lean_s13
                      have lean_s15 : let1233 := by timed flipCongrArg lean_s14 [sx5fcount]
                      have lean_s16 : let1059 := by timed Eq.trans lean_s12 lean_s15
                      show let1059 from lean_s16
                ))))))
              have lean_s10 : (Implies let1322 let1059) := by liftOrNToImp lean_s9, 3
              have lean_s11 : let1059 := by timed modusPonens lean_s8 lean_s10
              let lean_s12 := by timed And.intro lean_s6 lean_s11
              have lean_s13 : let1163 := by timed And.intro lean_a271 lean_s12
              show let1163 from lean_s13
  ))))))))))))
have lean_s1 : let1321 := by liftOrNToImp lean_s0, 6
have lean_s2 : (Eq let303 let303) := by timed rfl
let lean_s3 := by timed flipCongrArg lean_s2 [Implies]
have lean_s4 : (Or let271 (Or let1127 let1064)) :=
  (scope (fun lean_a274 : let15 =>
    (scope (fun lean_a275 : let1122 =>
      (scope (fun lean_a276 : let1059 =>
        have lean_s4 : let1066 := by timed Eq.symm lean_a276
        have lean_s5 : let1068 :=
          (scope (fun lean_a276 : let1066 =>
            have lean_s5 : let498 := by timed trueElim lean_r146
            have lean_s6 : let1081 := by timed And.intro lean_s5 lean_a276
            have lean_s7 : let1082 := by arithMulPos [let13, let18, let65], 4
            have lean_s8 : let1080 := by timed modusPonens lean_s6 lean_s7
            have lean_s9 : let1135 := by timed Eq.symm lean_a275
            have lean_s10 : let1136 := by timed And.intro lean_s5 lean_s9
            have lean_s11 : let1137 := by arithMulPos [let12, let22, let65], 4
            have lean_s12 : let1134 := by timed modusPonens lean_s10 lean_s11
            have lean_s13 : let733 := by timed trueElim lean_r228
            have lean_s14 : let1074 := by timed And.intro lean_s13 lean_a274
            have lean_s15 : let1075 := by arithMulNeg [let14, let7, let285], 3
            have lean_s16 : let1073 := by timed modusPonens lean_s14 lean_s15
            have lean_s17 : let1167 := by sumBounds [lean_s8, lean_s12, lean_s16]
            let lean_s18 := by timed congrHAdd lean_r7 lean_r205
            have lean_s19 : (Eq let1071 let709) := by timed congrHAdd lean_r227 lean_s18
            have lean_s20 : (Eq let1071 let4) := by timed Eq.trans lean_s19 lean_r209
            let lean_s21 := by timed flipCongrArg lean_s20 [LE.le]
            let lean_s22 := by timed congrHAdd lean_r241 lean_r80
            have lean_s23 : (Eq let1166 let762) := by timed congrHAdd lean_r74 lean_s22
            have lean_s24 : (Eq let1166 let736) := by timed Eq.trans lean_s23 lean_r248
            have lean_s25 : (Eq let1167 let758) := by timed congr lean_s21 lean_s24
            have lean_s26 : (Eq let1167 False) := by timed Eq.trans lean_s25 lean_r246
            show False from by timed eqResolve lean_s17 lean_s26
          ))
        have lean_s6 : let1067 := by liftOrNToNeg lean_s5
        show False from by timed contradiction lean_s4 lean_s6
  ))))))
have lean_s5 : (Not let1163) := by liftOrNToNeg lean_s4
have lean_s6 : let1165 := by timed falseIntro lean_s5
have lean_s7 : (Eq let1321 let305) := by timed congr lean_s3 lean_s6
have lean_s8 : (Eq let1321 let304) := by timed Eq.trans lean_s7 lean_r89
have lean_s9 : let304 := by timed eqResolve lean_s1 lean_s8
have lean_s10 : (Or let1162 let1301) := by timed flipNotAnd lean_s9 [let36, let34, let32, let24, let15, let49]
have lean_s11 : (Or let271 (Or let1223 (Or let1162 let1300))) := by permutateOr lean_s10, [4, 5, 0, 2, 1, 3], (- 1)
have lean_s12 : (Or let1220 (Or let779 (Or let769 let1216))) := by timed cnfAndNeg [let374, let768, let1192]
have lean_s13 : let1219 :=
  (scope (fun lean_a277 : let374 =>
    (scope (fun lean_a278 : let768 =>
      (scope (fun lean_a279 : let1192 =>
        let lean_s13 := by timed And.intro lean_a277 lean_a278
        have lean_s14 : let1222 := by timed And.intro lean_a279 lean_s13
        have lean_s15 : (Or let1216 (Or let779 (Or let769 let1221))) :=
          (scope (fun lean_a280 : let1192 =>
            (scope (fun lean_a281 : let374 =>
              (scope (fun lean_a282 : let768 =>
                have lean_s15 : (Eq let374 let375) := by timed Eq.symm lean_r119
                have lean_s16 : let375 := by timed eqResolve lean_a281 lean_s15
                have lean_s17 : (binrel% LE.le fmt1 let7) := by intTightUb lean_s16
                have lean_s18 : (binrel% LT.lt fmt1 let7) := by trichotomy lean_s17, lean_a282
                have lean_s19 : (binrel% LE.le fmt1 let48) := by intTightUb lean_s18
                have lean_s20 : let49 := by trichotomy lean_a280, lean_s19
                have lean_s21 : let1221 := by timed Eq.symm lean_s20
                show let1221 from lean_s21
          ))))))
        have lean_s16 : (Implies let1222 let1221) := by liftOrNToImp lean_s15, 3
        have lean_s17 : let1221 := by timed modusPonens lean_s14 lean_s16
        have lean_s18 : (Or (Not let1221) let49) :=
          (scope (fun lean_a280 : let1221 =>
            have lean_s18 : let49 := by timed Eq.symm lean_a280
            show let49 from lean_s18
          ))
        have lean_s19 : (Implies let1221 let49) := by liftOrNToImp lean_s18, 1
        have lean_s20 : let49 := by timed modusPonens lean_s17 lean_s19
        show let49 from lean_s20
  ))))))
have lean_s14 : (Implies let1220 let49) := by liftOrNToImp lean_s13, 3
have lean_s15 : (Or (Not let1220) let49) := by timed impliesElim lean_s14
have lean_s16 : let1219 := by R1 lean_s12, lean_s15, let1220, [(- 1), (- 1)]
have lean_s17 : let971 := by timed rfl
have lean_s18 : let776 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let782 let776) := by timed congr lean_s19 lean_r259
have lean_s21 : (Eq let782 True) := by timed Eq.trans lean_s20 lean_r256
have lean_s22 : (Eq let780 True) := by timed Eq.trans lean_r262 lean_s21
have lean_s23 : let780 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : let395 := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq let770 let395) := by timed congr lean_s26 lean_r255
have lean_s28 : (Eq let770 True) := by timed Eq.trans lean_s27 lean_r136
have lean_s29 : (Eq let771 True) := by timed Eq.trans lean_r252 lean_s28
have lean_s30 : let771 := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s17 lean_s30
have lean_s32 : (Eq let1216 let1216) := by timed rfl
let lean_s33 := by timed congr lean_s17 lean_s32
have lean_s34 : (Eq let49 let49) := by timed rfl
let lean_s35 := by timed congr lean_s33 lean_s34
let lean_s36 := by timed congr lean_s31 lean_s35
have lean_s37 : (Eq let1219 let1218) := by timed congr lean_s24 lean_s36
have lean_s38 : let1218 := by timed eqResolve lean_s16 lean_s37
have lean_s39 : (Or let373 (Or let49 (Or let8 let1216))) := by permutateOr lean_s38, [0, 3, 1, 2], (- 1)
have lean_s40 : (Or let1162 (Or let1114 (Or let1042 (Or let1054 (Or let1040 (Or let1051 (Or let271 (Or let768 let1310)))))))) :=
  (scope (fun lean_a281 : let36 =>
    (scope (fun lean_a282 : let34 =>
      (scope (fun lean_a283 : let32 =>
        (scope (fun lean_a284 : let30 =>
          (scope (fun lean_a285 : let24 =>
            (scope (fun lean_a286 : let20 =>
              (scope (fun lean_a287 : let15 =>
                (scope (fun lean_a288 : let8 =>
                  have lean_s40 : let1099 := by timed Eq.symm lean_r27
                  have lean_s41 : let146 := by timed eqResolve lean_a288 lean_s40
                  let lean_s42 := by timed And.intro lean_a285 lean_a282
                  let lean_s43 := by timed And.intro lean_a286 lean_s42
                  have lean_s44 : let1147 := by timed And.intro lean_s41 lean_s43
                  have lean_s45 : let1151 :=
                    (scope (fun lean_a284 : let146 =>
                      (scope (fun lean_a285 : let20 =>
                        (scope (fun lean_a286 : let24 =>
                          (scope (fun lean_a287 : let34 =>
                            have lean_s45 : let1152 := by timed Eq.symm lean_a287
                            have lean_s46 : let593 := by timed Eq.symm lean_a286
                            have lean_s47 : let24 := by timed Eq.symm lean_s46
                            let lean_s48 := by timed Eq.trans lean_s45 lean_s47
                            have lean_s49 : let585 := by timed Eq.symm lean_a285
                            have lean_s50 : let20 := by timed Eq.symm lean_s49
                            let lean_s51 := by timed Eq.trans lean_s48 lean_s50
                            have lean_s52 : let1090 := by timed Eq.symm lean_a284
                            have lean_s53 : let146 := by timed Eq.symm lean_s52
                            have lean_s54 : let1106 := by timed flipCongrArg lean_s53 [xx5fcount]
                            have lean_s55 : let1122 := by timed Eq.trans lean_s51 lean_s54
                            show let1122 from lean_s55
                    ))))))))
                  have lean_s46 : let1148 := by liftOrNToImp lean_s45, 4
                  have lean_s47 : let1122 := by timed modusPonens lean_s44 lean_s46
                  let lean_s48 := by timed And.intro lean_a283 lean_a281
                  have lean_s49 : let1320 := by timed And.intro lean_a284 lean_s48
                  have lean_s50 : (Or let1054 (Or let1042 (Or let1162 let291))) :=
                    (scope (fun lean_a285 : let30 =>
                      (scope (fun lean_a286 : let32 =>
                        (scope (fun lean_a287 : let36 =>
                          have lean_s50 : let1176 := by timed Eq.symm lean_a287
                          have lean_s51 : let486 := by timed Eq.symm lean_a286
                          have lean_s52 : let32 := by timed Eq.symm lean_s51
                          let lean_s53 := by timed Eq.trans lean_s50 lean_s52
                          have lean_s54 : let1097 := by timed Eq.symm lean_a285
                          have lean_s55 : let30 := by timed Eq.symm lean_s54
                          have lean_s56 : let291 := by timed Eq.trans lean_s53 lean_s55
                          show let291 from lean_s56
                    ))))))
                  have lean_s51 : (Implies let1320 let291) := by liftOrNToImp lean_s50, 3
                  have lean_s52 : let291 := by timed modusPonens lean_s49 lean_s51
                  have lean_s53 : (Or (Not let291) let1318) :=
                    (scope (fun lean_a285 : let291 =>
                      have lean_s53 : let290 := by timed eqResolve lean_a285 lean_r84
                      have lean_s54 : let1318 := by timed Eq.symm lean_s53
                      show let1318 from lean_s54
                    ))
                  have lean_s54 : (Implies let291 let1318) := by liftOrNToImp lean_s53, 1
                  have lean_s55 : let1318 := by timed modusPonens lean_s52 lean_s54
                  have lean_s56 : let1319 := by timed And.intro lean_s41 lean_s55
                  have lean_s57 : (Or let1087 (Or (Not let1318) let1309)) :=
                    (scope (fun lean_a286 : let146 =>
                      (scope (fun lean_a287 : let1318 =>
                        have lean_s57 : let290 := by timed Eq.symm lean_a287
                        have lean_s58 : let1318 := by timed Eq.symm lean_s57
                        have lean_s59 : let1090 := by timed Eq.symm lean_a286
                        have lean_s60 : let146 := by timed Eq.symm lean_s59
                        have lean_s61 : let1089 := by timed flipCongrArg lean_s60 [sx5fcount]
                        have lean_s62 : let1309 := by timed Eq.trans lean_s58 lean_s61
                        show let1309 from lean_s62
                    ))))
                  have lean_s58 : (Implies let1319 let1309) := by liftOrNToImp lean_s57, 2
                  have lean_s59 : let1309 := by timed modusPonens lean_s56 lean_s58
                  let lean_s60 := by timed And.intro lean_s47 lean_s59
                  have lean_s61 : let1310 := by timed And.intro lean_a287 lean_s60
                  show let1310 from lean_s61
  ))))))))))))))))
have lean_s41 : let1311 := by liftOrNToImp lean_s40, 8
have lean_s42 : (Eq let37 let37) := by timed rfl
let lean_s43 := by timed flipCongrArg lean_s42 [Implies]
have lean_s44 : (Or let271 (Or let1127 (Or (Not let1309) False))) :=
  (scope (fun lean_a287 : let15 =>
    (scope (fun lean_a288 : let1122 =>
      (scope (fun lean_a289 : let1309 =>
        have lean_s44 : let1312 := by timed Eq.symm lean_a289
        have lean_s45 : (Or let1313 False) :=
          (scope (fun lean_a288 : let1312 =>
            have lean_s45 : let498 := by timed trueElim lean_r146
            have lean_s46 : let1317 := by timed And.intro lean_s45 lean_a288
            have lean_s47 : (Implies let1317 let1316) := by arithMulPos [let13, let9, let65], 4
            have lean_s48 : let1316 := by timed modusPonens lean_s46 lean_s47
            have lean_s49 : let1135 := by timed Eq.symm lean_a288
            have lean_s50 : let1136 := by timed And.intro lean_s45 lean_s49
            have lean_s51 : let1137 := by arithMulPos [let12, let22, let65], 4
            have lean_s52 : let1134 := by timed modusPonens lean_s50 lean_s51
            have lean_s53 : let733 := by timed trueElim lean_r228
            have lean_s54 : let1074 := by timed And.intro lean_s53 lean_a287
            have lean_s55 : let1075 := by arithMulNeg [let14, let7, let285], 3
            have lean_s56 : let1073 := by timed modusPonens lean_s54 lean_s55
            have lean_s57 : let1315 := by sumBounds [lean_s48, lean_s52, lean_s56]
            let lean_s58 := by timed congrHAdd lean_r7 lean_r205
            have lean_s59 : (Eq let1071 let709) := by timed congrHAdd lean_r227 lean_s58
            have lean_s60 : (Eq let1071 let4) := by timed Eq.trans lean_s59 lean_r209
            let lean_s61 := by timed flipCongrArg lean_s60 [LE.le]
            let lean_s62 := by timed congrHAdd lean_r241 lean_r80
            have lean_s63 : (Eq let1314 let6) := by timed congrHAdd lean_r253 lean_s62
            have lean_s64 : (Eq let1314 let2) := by timed Eq.trans lean_s63 lean_r0
            have lean_s65 : (Eq let1315 let393) := by timed congr lean_s61 lean_s64
            have lean_s66 : (Eq let1315 False) := by timed Eq.trans lean_s65 lean_r134
            show False from by timed eqResolve lean_s57 lean_s66
          ))
        have lean_s46 : let1313 := by liftOrNToNeg lean_s45
        show False from by timed contradiction lean_s44 lean_s46
  ))))))
have lean_s45 : (Not let1310) := by liftOrNToNeg lean_s44
have lean_s46 : (Eq let1310 False) := by timed falseIntro lean_s45
have lean_s47 : (Eq let1311 let39) := by timed congr lean_s43 lean_s46
have lean_s48 : (Eq let1311 let38) := by timed Eq.trans lean_s47 lean_r1
have lean_s49 : let38 := by timed eqResolve lean_s41 lean_s48
have lean_s50 : (Or let1162 let1256) := by timed flipNotAnd lean_s49 [let36, let34, let32, let30, let24, let20, let15, let8]
have lean_s51 : (Or let271 (Or let768 (Or let1162 let1255))) := by permutateOr lean_s50, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
have lean_s52 : let944 := by timed rfl
have lean_s53 : (Eq let697 let697) := by timed rfl
let lean_s54 := by timed congr lean_s52 lean_s53
have lean_s55 : (Eq let696 let696) := by timed rfl
let lean_s56 := by timed congr lean_s52 lean_s55
have lean_s57 : (Eq let695 let695) := by timed rfl
let lean_s58 := by timed congr lean_s52 lean_s57
have lean_s59 : (Eq let694 let694) := by timed rfl
let lean_s60 := by timed congr lean_s52 lean_s59
have lean_s61 : (Eq let693 let693) := by timed rfl
let lean_s62 := by timed congr lean_s52 lean_s61
have lean_s63 : (Eq let692 let692) := by timed rfl
let lean_s64 := by timed congr lean_s52 lean_s63
have lean_s65 : (Eq let691 let691) := by timed rfl
let lean_s66 := by timed congr lean_s52 lean_s65
have lean_s67 : (Eq let690 let690) := by timed rfl
let lean_s68 := by timed congr lean_s52 lean_s67
have lean_s69 : (Eq let689 let689) := by timed rfl
let lean_s70 := by timed congr lean_s52 lean_s69
have lean_s71 : (Eq let688 let688) := by timed rfl
let lean_s72 := by timed congr lean_s52 lean_s71
have lean_s73 : let1010 := by timed rfl
let lean_s74 := by timed flipCongrArg lean_s73 [Eq]
have lean_s75 : (Eq let687 let859) := by timed congr lean_s74 lean_r200
let lean_s76 := by timed congr lean_s52 lean_s75
let lean_s77 := by timed congr lean_s52 lean_r197
have lean_s78 : let1000 := by timed rfl
let lean_s79 := by timed flipCongrArg lean_s78 [GE.ge]
have lean_s80 : (Eq fmt0 fmt0) := by timed rfl
let lean_s81 := by timed flipCongrArg lean_s80 [HAdd.hAdd]
have lean_s82 : (Eq fmtx5flength fmtx5flength) := by timed rfl
let lean_s83 := by timed flipCongrArg lean_s82 [HAdd.hAdd]
have lean_s84 : (Eq let133 let598) := by timed congr lean_s83 lean_r49
have lean_s85 : (Eq let133 let597) := by timed Eq.trans lean_s84 lean_r194
have lean_s86 : (Eq let134 let597) := by timed Eq.trans lean_r22 lean_s85
have lean_s87 : (Eq let602 let616) := by timed congr lean_s81 lean_s86
have lean_s88 : (Eq let602 let595) := by timed Eq.trans lean_s87 lean_r201
have lean_s89 : (Eq let603 let596) := by timed congr lean_s79 lean_s88
have lean_s90 : (Eq let603 let358) := by timed Eq.trans lean_s89 lean_r193
have lean_s91 : (Eq let604 let359) := by timed flipCongrArg lean_s90 [Not]
have lean_s92 : (Eq let604 let357) := by timed Eq.trans lean_s91 lean_r111
have lean_s93 : (Eq let605 let357) := by timed Eq.trans lean_r196 lean_s92
let lean_s94 := by timed congr lean_s52 lean_s93
let lean_s95 := by timed flipCongrArg lean_s78 [LE.le]
have lean_s96 : (Eq let590 let588) := by timed congr lean_s95 lean_r156
have lean_s97 : (Eq let590 let587) := by timed Eq.trans lean_s96 lean_r188
have lean_s98 : (Eq let591 let858) := by timed flipCongrArg lean_s97 [Not]
have lean_s99 : (Eq let592 let858) := by timed Eq.trans lean_r190 lean_s98
let lean_s100 := by timed congr lean_s52 lean_s99
let lean_s101 := by timed congr lean_s52 lean_r186
have lean_s102 : let1009 := by timed rfl
let lean_s103 := by timed flipCongrArg lean_s102 [GE.ge]
have lean_s104 : (Eq distance distance) := by timed rfl
let lean_s105 := by timed flipCongrArg lean_s82 [HAdd.hAdd]
have lean_s106 : (Eq let571 let570) := by timed congr lean_s105 lean_r96
have lean_s107 : (Eq let571 let568) := by timed Eq.trans lean_s106 lean_r178
have lean_s108 : (Eq let572 let568) := by timed Eq.trans lean_r179 lean_s107
let lean_s109 := by timed congrHAdd lean_s104 lean_s108
have lean_s110 : (Eq let575 let569) := by timed congrHAdd lean_s73 lean_s109
have lean_s111 : let1011 := by timed Eq.trans lean_s110 lean_r177
have lean_s112 : let1011 := by timed Eq.trans lean_r182 lean_s111
have lean_s113 : (Eq let577 let565) := by timed congr lean_s103 lean_s112
have lean_s114 : (Eq let577 let563) := by timed Eq.trans lean_s113 lean_r174
have lean_s115 : (Eq let578 let778) := by timed flipCongrArg lean_s114 [Not]
have lean_s116 : (Eq let578 let562) := by timed Eq.trans lean_s115 lean_r258
have lean_s117 : (Eq let579 let562) := by timed Eq.trans lean_r184 lean_s116
let lean_s118 := by timed congr lean_s52 lean_s117
let lean_s119 := by timed flipCongrArg lean_s102 [Eq]
have lean_s120 : let232 := by timed rfl
let lean_s121 := by timed flipCongrArg lean_s120 [HMul.hMul]
let lean_s122 := by timed flipCongrArg lean_s78 [HAdd.hAdd]
have lean_s123 : (Eq let544 let380) := by timed congr lean_s122 lean_r165
have lean_s124 : (Eq let544 let11) := by timed Eq.trans lean_s123 lean_r123
have lean_s125 : (Eq let545 let11) := by timed Eq.trans lean_r168 lean_s124
let lean_s126 := by timed flipCongrArg lean_s125 [HAdd.hAdd]
have lean_s127 : (Eq let143 let143) := by timed rfl
have lean_s128 : (Eq let549 let145) := by timed congr lean_s126 lean_s127
have lean_s129 : (Eq let549 let144) := by timed Eq.trans lean_s128 lean_r26
have lean_s130 : (Eq let550 let144) := by timed Eq.trans lean_r170 lean_s129
have lean_s131 : (Eq let554 let530) := by timed flipCongrArg lean_s130 [sx5fcount]
have lean_s132 : (Eq let555 let535) := by timed congr lean_s121 lean_s131
let lean_s133 := by timed flipCongrArg lean_s120 [HMul.hMul]
have lean_s134 : (Eq let552 let528) := by timed flipCongrArg lean_s130 [xx5fcount]
have lean_s135 : (Eq let553 let534) := by timed congr lean_s133 lean_s134
let lean_s136 := by timed congrHAdd lean_s132 lean_s135
have lean_s137 : (Eq let556 let536) := by timed congrHAdd lean_s73 lean_s136
have lean_s138 : (Eq let557 let536) := by timed Eq.trans lean_r172 lean_s137
have lean_s139 : (Eq let686 let537) := by timed congr lean_s119 lean_s138
have lean_s140 : (Eq let686 let533) := by timed Eq.trans lean_s139 lean_r163
let lean_s141 := by timed congr lean_s52 lean_s140
have lean_s142 : let971 := by timed rfl
let lean_s143 := by timed flipCongrArg lean_s78 [Eq]
have lean_s144 : (Eq let684 let227) := by timed congr lean_s143 lean_r133
have lean_s145 : (Eq let684 let226) := by timed Eq.trans lean_s144 lean_r57
let lean_s146 := by timed congr lean_s142 lean_s145
let lean_s147 := by timed flipCongrArg lean_s78 [Eq]
have lean_s148 : (Eq let683 let400) := by timed congr lean_s147 lean_r156
have lean_s149 : (Eq let683 let398) := by timed Eq.trans lean_s148 lean_r138
let lean_s150 := by timed congr lean_s142 lean_s149
let lean_s151 := by timed flipCongrArg lean_s78 [Eq]
have lean_s152 : (Eq let682 let520) := by timed congr lean_s151 lean_r39
have lean_s153 : (Eq let682 let519) := by timed Eq.trans lean_s152 lean_r159
let lean_s154 := by timed congr lean_s142 lean_s153
let lean_s155 := by timed flipCongrArg lean_s78 [Eq]
have lean_s156 : (Eq let681 let496) := by timed congr lean_s155 lean_r118
have lean_s157 : (Eq let681 let495) := by timed Eq.trans lean_s156 lean_r144
let lean_s158 := by timed congr lean_s142 lean_s157
let lean_s159 := by timed flipCongrArg lean_s78 [Eq]
have lean_s160 : (Eq let680 let518) := by timed congr lean_s159 lean_r131
have lean_s161 : (Eq let680 let517) := by timed Eq.trans lean_s160 lean_r158
let lean_s162 := by timed congr lean_s142 lean_s161
let lean_s163 := by timed flipCongrArg lean_s78 [Eq]
have lean_s164 : (Eq let679 let364) := by timed congr lean_s163 lean_r166
have lean_s165 : (Eq let679 let362) := by timed Eq.trans lean_s164 lean_r113
let lean_s166 := by timed congr lean_s162 lean_s165
let lean_s167 := by timed congr lean_s158 lean_s166
let lean_s168 := by timed congr lean_s154 lean_s167
let lean_s169 := by timed congr lean_s150 lean_s168
have lean_s170 : (Eq let738 let857) := by timed congr lean_s146 lean_s169
have lean_s171 : (Eq let685 let857) := by timed Eq.trans lean_r232 lean_s170
let lean_s172 := by timed congr lean_s52 lean_s171
have lean_s173 : let971 := by timed rfl
let lean_s174 := by timed flipCongrArg lean_s102 [Eq]
have lean_s175 : (Eq let175 let855) := by timed congr lean_s174 lean_r133
let lean_s176 := by timed congr lean_s173 lean_s175
let lean_s177 := by timed flipCongrArg lean_s102 [Eq]
have lean_s178 : (Eq let173 let854) := by timed congr lean_s177 lean_r156
let lean_s179 := by timed congr lean_s173 lean_s178
let lean_s180 := by timed flipCongrArg lean_s102 [Eq]
have lean_s181 : (Eq let171 let853) := by timed congr lean_s180 lean_r39
let lean_s182 := by timed congr lean_s179 lean_s181
have lean_s183 : (Eq let176 let856) := by timed congr lean_s176 lean_s182
have lean_s184 : (Eq let177 let856) := by timed Eq.trans lean_r36 lean_s183
let lean_s185 := by timed congr lean_s52 lean_s184
have lean_s186 : let971 := by timed rfl
let lean_s187 := by timed congr lean_s186 lean_r101
let lean_s188 := by timed congr lean_s186 lean_r10
let lean_s189 := by timed congr lean_s186 lean_r154
have lean_s190 : let999 := by timed rfl
let lean_s191 := by timed congr lean_s186 lean_s190
have lean_s192 : let998 := by timed rfl
let lean_s193 := by timed congr lean_s186 lean_s192
have lean_s194 : let997 := by timed rfl
let lean_s195 := by timed congr lean_s186 lean_s194
have lean_s196 : let996 := by timed rfl
let lean_s197 := by timed congr lean_s186 lean_s196
have lean_s198 : let995 := by timed rfl
let lean_s199 := by timed congr lean_s197 lean_s198
let lean_s200 := by timed congr lean_s195 lean_s199
let lean_s201 := by timed congr lean_s193 lean_s200
let lean_s202 := by timed congr lean_s191 lean_s201
let lean_s203 := by timed congr lean_s189 lean_s202
let lean_s204 := by timed congr lean_s188 lean_s203
have lean_s205 : (Eq let340 let852) := by timed congr lean_s187 lean_s204
have lean_s206 : (Eq let341 let852) := by timed Eq.trans lean_r102 lean_s205
let lean_s207 := by timed congr lean_s52 lean_s206
have lean_s208 : let971 := by timed rfl
let lean_s209 := by timed congr lean_s208 lean_r54
let lean_s210 := by timed congr lean_s208 lean_r150
let lean_s211 := by timed congr lean_s208 lean_r9
have lean_s212 : let994 := by timed rfl
let lean_s213 := by timed congr lean_s208 lean_s212
have lean_s214 : let993 := by timed rfl
let lean_s215 := by timed congr lean_s208 lean_s214
have lean_s216 : let992 := by timed rfl
let lean_s217 := by timed congr lean_s208 lean_s216
have lean_s218 : let991 := by timed rfl
let lean_s219 := by timed congr lean_s208 lean_s218
have lean_s220 : let990 := by timed rfl
let lean_s221 := by timed congr lean_s219 lean_s220
let lean_s222 := by timed congr lean_s217 lean_s221
let lean_s223 := by timed congr lean_s215 lean_s222
let lean_s224 := by timed congr lean_s213 lean_s223
let lean_s225 := by timed congr lean_s211 lean_s224
let lean_s226 := by timed congr lean_s210 lean_s225
have lean_s227 : (Eq let99 let851) := by timed congr lean_s209 lean_s226
have lean_s228 : (Eq let100 let851) := by timed Eq.trans lean_r15 lean_s227
let lean_s229 := by timed congr lean_s52 lean_s228
have lean_s230 : let971 := by timed rfl
let lean_s231 := by timed congr lean_s230 lean_r88
let lean_s232 := by timed congr lean_s230 lean_r58
let lean_s233 := by timed congr lean_s230 lean_r12
have lean_s234 : let989 := by timed rfl
let lean_s235 := by timed congr lean_s230 lean_s234
have lean_s236 : let988 := by timed rfl
let lean_s237 := by timed congr lean_s230 lean_s236
have lean_s238 : let987 := by timed rfl
let lean_s239 := by timed congr lean_s230 lean_s238
have lean_s240 : let986 := by timed rfl
let lean_s241 := by timed congr lean_s230 lean_s240
have lean_s242 : let985 := by timed rfl
let lean_s243 := by timed congr lean_s241 lean_s242
let lean_s244 := by timed congr lean_s239 lean_s243
let lean_s245 := by timed congr lean_s237 lean_s244
let lean_s246 := by timed congr lean_s235 lean_s245
let lean_s247 := by timed congr lean_s233 lean_s246
let lean_s248 := by timed congr lean_s232 lean_s247
have lean_s249 : (Eq let510 let850) := by timed congr lean_s231 lean_s248
have lean_s250 : (Eq let511 let850) := by timed Eq.trans lean_r153 lean_s249
let lean_s251 := by timed congr lean_s52 lean_s250
have lean_s252 : let971 := by timed rfl
let lean_s253 := by timed congr lean_s252 lean_r181
let lean_s254 := by timed congr lean_s252 lean_r5
let lean_s255 := by timed congr lean_s252 lean_r63
have lean_s256 : let984 := by timed rfl
let lean_s257 := by timed congr lean_s252 lean_s256
have lean_s258 : let983 := by timed rfl
let lean_s259 := by timed congr lean_s252 lean_s258
have lean_s260 : let982 := by timed rfl
let lean_s261 := by timed congr lean_s252 lean_s260
have lean_s262 : let981 := by timed rfl
let lean_s263 := by timed congr lean_s252 lean_s262
have lean_s264 : let980 := by timed rfl
let lean_s265 := by timed congr lean_s263 lean_s264
let lean_s266 := by timed congr lean_s261 lean_s265
let lean_s267 := by timed congr lean_s259 lean_s266
let lean_s268 := by timed congr lean_s257 lean_s267
let lean_s269 := by timed congr lean_s255 lean_s268
let lean_s270 := by timed congr lean_s254 lean_s269
have lean_s271 : (Eq let250 let849) := by timed congr lean_s253 lean_s270
have lean_s272 : (Eq let251 let849) := by timed Eq.trans lean_r66 lean_s271
let lean_s273 := by timed congr lean_s52 lean_s272
have lean_s274 : let971 := by timed rfl
let lean_s275 := by timed congr lean_s274 lean_r176
let lean_s276 := by timed congr lean_s274 lean_r28
let lean_s277 := by timed congr lean_s274 lean_r92
have lean_s278 : let979 := by timed rfl
let lean_s279 := by timed congr lean_s274 lean_s278
have lean_s280 : let978 := by timed rfl
let lean_s281 := by timed congr lean_s274 lean_s280
have lean_s282 : let977 := by timed rfl
let lean_s283 := by timed congr lean_s274 lean_s282
have lean_s284 : let976 := by timed rfl
let lean_s285 := by timed congr lean_s274 lean_s284
have lean_s286 : let975 := by timed rfl
let lean_s287 := by timed congr lean_s285 lean_s286
let lean_s288 := by timed congr lean_s283 lean_s287
let lean_s289 := by timed congr lean_s281 lean_s288
let lean_s290 := by timed congr lean_s279 lean_s289
let lean_s291 := by timed congr lean_s277 lean_s290
let lean_s292 := by timed congr lean_s276 lean_s291
have lean_s293 : (Eq let508 let848) := by timed congr lean_s275 lean_s292
have lean_s294 : (Eq let509 let848) := by timed Eq.trans lean_r152 lean_s293
let lean_s295 := by timed congr lean_s52 lean_s294
have lean_s296 : let971 := by timed rfl
let lean_s297 := by timed congr lean_s296 lean_r25
let lean_s298 := by timed congr lean_s296 lean_r108
let lean_s299 := by timed congr lean_s296 lean_r47
have lean_s300 : let974 := by timed rfl
let lean_s301 := by timed congr lean_s296 lean_s300
have lean_s302 : let973 := by timed rfl
let lean_s303 := by timed congr lean_s296 lean_s302
have lean_s304 : let972 := by timed rfl
let lean_s305 := by timed congr lean_s296 lean_s304
have lean_s306 : let970 := by timed rfl
let lean_s307 := by timed congr lean_s296 lean_s306
have lean_s308 : let969 := by timed rfl
let lean_s309 := by timed congr lean_s307 lean_s308
let lean_s310 := by timed congr lean_s305 lean_s309
let lean_s311 := by timed congr lean_s303 lean_s310
let lean_s312 := by timed congr lean_s301 lean_s311
let lean_s313 := by timed congr lean_s299 lean_s312
let lean_s314 := by timed congr lean_s298 lean_s313
have lean_s315 : (Eq let505 let847) := by timed congr lean_s297 lean_s314
have lean_s316 : (Eq let506 let847) := by timed Eq.trans lean_r151 lean_s315
let lean_s317 := by timed congr lean_s52 lean_s316
let lean_s318 := by timed flipCongrArg lean_r101 [And]
have lean_s319 : (Eq let675 let843) := by timed congr lean_s318 lean_r150
let lean_s320 := by timed flipCongrArg lean_s319 [Implies]
have lean_s321 : let968 := by timed rfl
have lean_s322 : (Eq let678 let846) := by timed congr lean_s320 lean_s321
let lean_s323 := by timed congr lean_s52 lean_s322
have lean_s324 : (Eq let676 let844) := by timed flipCongrArg lean_s319 [Not]
let lean_s325 := by timed flipCongrArg lean_s324 [Implies]
have lean_s326 : let967 := by timed rfl
have lean_s327 : (Eq let677 let845) := by timed congr lean_s325 lean_s326
let lean_s328 := by timed congr lean_s52 lean_s327
let lean_s329 := by timed flipCongrArg lean_r54 [And]
have lean_s330 : (Eq let670 let839) := by timed congr lean_s329 lean_r58
let lean_s331 := by timed flipCongrArg lean_s330 [Implies]
have lean_s332 : (Eq let29 let29) := by timed rfl
let lean_s333 := by timed flipCongrArg lean_s332 [Eq]
have lean_s334 : (Eq let673 let502) := by timed congr lean_s333 lean_r149
have lean_s335 : (Eq let673 let53) := by timed Eq.trans lean_s334 lean_r148
have lean_s336 : (Eq let674 let842) := by timed congr lean_s331 lean_s335
let lean_s337 := by timed congr lean_s52 lean_s336
have lean_s338 : (Eq let671 let840) := by timed flipCongrArg lean_s330 [Not]
let lean_s339 := by timed flipCongrArg lean_s338 [Implies]
have lean_s340 : (Eq let672 let841) := by timed congr lean_s339 lean_r142
let lean_s341 := by timed congr lean_s52 lean_s340
let lean_s342 := by timed flipCongrArg lean_r88 [And]
have lean_s343 : (Eq let665 let835) := by timed congr lean_s342 lean_r5
let lean_s344 := by timed flipCongrArg lean_s343 [Implies]
have lean_s345 : (Eq let26 let26) := by timed rfl
let lean_s346 := by timed flipCongrArg lean_s345 [Eq]
have lean_s347 : (Eq let668 let402) := by timed congr lean_s346 lean_r140
have lean_s348 : (Eq let668 let30) := by timed Eq.trans lean_s347 lean_r139
have lean_s349 : (Eq let669 let838) := by timed congr lean_s344 lean_s348
let lean_s350 := by timed congr lean_s52 lean_s349
have lean_s351 : (Eq let666 let836) := by timed flipCongrArg lean_s343 [Not]
let lean_s352 := by timed flipCongrArg lean_s351 [Implies]
have lean_s353 : (Eq let667 let837) := by timed congr lean_s352 lean_r6
let lean_s354 := by timed congr lean_s52 lean_s353
let lean_s355 := by timed flipCongrArg lean_r181 [And]
have lean_s356 : (Eq let660 let831) := by timed congr lean_s355 lean_r28
let lean_s357 := by timed flipCongrArg lean_s356 [Implies]
have lean_s358 : (Eq let67 let67) := by timed rfl
let lean_s359 := by timed flipCongrArg lean_s358 [Eq]
have lean_s360 : (Eq let663 let317) := by timed congr lean_s359 lean_r115
have lean_s361 : (Eq let663 let315) := by timed Eq.trans lean_s360 lean_r94
have lean_s362 : (Eq let664 let834) := by timed congr lean_s357 lean_s361
let lean_s363 := by timed congr lean_s52 lean_s362
have lean_s364 : (Eq let661 let832) := by timed flipCongrArg lean_s356 [Not]
let lean_s365 := by timed flipCongrArg lean_s364 [Implies]
have lean_s366 : (Eq let662 let833) := by timed congr lean_s365 lean_r8
let lean_s367 := by timed congr lean_s52 lean_s366
let lean_s368 := by timed flipCongrArg lean_r176 [And]
have lean_s369 : (Eq let655 let827) := by timed congr lean_s368 lean_r108
let lean_s370 := by timed flipCongrArg lean_s369 [Implies]
have lean_s371 : (Eq let129 let129) := by timed rfl
let lean_s372 := by timed flipCongrArg lean_s371 [Eq]
have lean_s373 : (Eq let658 let757) := by timed congr lean_s372 lean_r33
have lean_s374 : (Eq let658 let440) := by timed Eq.trans lean_s373 lean_r244
have lean_s375 : (Eq let659 let830) := by timed congr lean_s370 lean_s374
let lean_s376 := by timed congr lean_s52 lean_s375
have lean_s377 : (Eq let656 let828) := by timed flipCongrArg lean_s369 [Not]
let lean_s378 := by timed flipCongrArg lean_s377 [Implies]
have lean_s379 : (Eq let657 let829) := by timed congr lean_s378 lean_r132
let lean_s380 := by timed congr lean_s52 lean_s379
let lean_s381 := by timed flipCongrArg lean_r25 [And]
have lean_s382 : (Eq let650 let823) := by timed congr lean_s381 lean_r24
let lean_s383 := by timed flipCongrArg lean_s382 [Implies]
have lean_s384 : (Eq let180 let180) := by timed rfl
let lean_s385 := by timed flipCongrArg lean_s384 [Eq]
have lean_s386 : (Eq let653 let182) := by timed congr lean_s385 lean_r21
have lean_s387 : (Eq let653 let181) := by timed Eq.trans lean_s386 lean_r38
have lean_s388 : (Eq let654 let826) := by timed congr lean_s383 lean_s387
let lean_s389 := by timed congr lean_s52 lean_s388
have lean_s390 : (Eq let651 let824) := by timed flipCongrArg lean_s382 [Not]
let lean_s391 := by timed flipCongrArg lean_s390 [Implies]
have lean_s392 : (Eq let652 let825) := by timed congr lean_s391 lean_r199
let lean_s393 := by timed congr lean_s52 lean_s392
let lean_s394 := by timed flipCongrArg lean_r101 [And]
have lean_s395 : (Eq let646 let819) := by timed congr lean_s394 lean_r9
let lean_s396 := by timed flipCongrArg lean_s395 [Implies]
have lean_s397 : let956 := by timed rfl
have lean_s398 : (Eq let649 let822) := by timed congr lean_s396 lean_s397
let lean_s399 := by timed congr lean_s52 lean_s398
have lean_s400 : (Eq let647 let820) := by timed flipCongrArg lean_s395 [Not]
let lean_s401 := by timed flipCongrArg lean_s400 [Implies]
have lean_s402 : let955 := by timed rfl
have lean_s403 : (Eq let648 let821) := by timed congr lean_s401 lean_s402
let lean_s404 := by timed congr lean_s52 lean_s403
let lean_s405 := by timed flipCongrArg lean_r54 [And]
have lean_s406 : (Eq let641 let815) := by timed congr lean_s405 lean_r12
let lean_s407 := by timed flipCongrArg lean_s406 [Implies]
have lean_s408 : (Eq let19 let19) := by timed rfl
let lean_s409 := by timed flipCongrArg lean_s408 [Eq]
have lean_s410 : (Eq let644 let79) := by timed congr lean_s409 lean_r110
have lean_s411 : (Eq let644 let77) := by timed Eq.trans lean_s410 lean_r11
have lean_s412 : (Eq let645 let818) := by timed congr lean_s407 lean_s411
let lean_s413 := by timed congr lean_s52 lean_s412
have lean_s414 : (Eq let642 let816) := by timed flipCongrArg lean_s406 [Not]
let lean_s415 := by timed flipCongrArg lean_s414 [Implies]
have lean_s416 : (Eq let643 let817) := by timed congr lean_s415 lean_r191
let lean_s417 := by timed congr lean_s52 lean_s416
let lean_s418 := by timed flipCongrArg lean_r88 [And]
have lean_s419 : (Eq let636 let811) := by timed congr lean_s418 lean_r63
let lean_s420 := by timed flipCongrArg lean_s419 [Implies]
have lean_s421 : (Eq let17 let17) := by timed rfl
let lean_s422 := by timed flipCongrArg lean_s421 [Eq]
have lean_s423 : (Eq let639 let382) := by timed congr lean_s422 lean_r16
have lean_s424 : (Eq let639 let41) := by timed Eq.trans lean_s423 lean_r125
have lean_s425 : (Eq let640 let814) := by timed congr lean_s420 lean_s424
let lean_s426 := by timed congr lean_s52 lean_s425
have lean_s427 : (Eq let637 let812) := by timed flipCongrArg lean_s419 [Not]
let lean_s428 := by timed flipCongrArg lean_s427 [Implies]
have lean_s429 : (Eq let638 let813) := by timed congr lean_s428 lean_r187
let lean_s430 := by timed congr lean_s52 lean_s429
let lean_s431 := by timed flipCongrArg lean_r181 [And]
have lean_s432 : (Eq let631 let807) := by timed congr lean_s431 lean_r92
let lean_s433 := by timed flipCongrArg lean_s432 [Implies]
have lean_s434 : (Eq let103 let103) := by timed rfl
let lean_s435 := by timed flipCongrArg lean_s434 [Eq]
have lean_s436 : (Eq let634 let106) := by timed congr lean_s435 lean_r87
have lean_s437 : (Eq let634 let104) := by timed Eq.trans lean_s436 lean_r17
have lean_s438 : (Eq let635 let810) := by timed congr lean_s433 lean_s437
let lean_s439 := by timed congr lean_s52 lean_s438
have lean_s440 : (Eq let632 let808) := by timed flipCongrArg lean_s432 [Not]
let lean_s441 := by timed flipCongrArg lean_s440 [Implies]
have lean_s442 : (Eq let633 let809) := by timed congr lean_s441 lean_r95
let lean_s443 := by timed congr lean_s52 lean_s442
let lean_s444 := by timed flipCongrArg lean_r176 [And]
have lean_s445 : (Eq let626 let803) := by timed congr lean_s444 lean_r47
let lean_s446 := by timed flipCongrArg lean_s445 [Implies]
have lean_s447 : (Eq let107 let107) := by timed rfl
let lean_s448 := by timed flipCongrArg lean_s447 [Eq]
have lean_s449 : (Eq let629 let110) := by timed congr lean_s448 lean_r82
have lean_s450 : (Eq let629 let108) := by timed Eq.trans lean_s449 lean_r18
have lean_s451 : (Eq let630 let806) := by timed congr lean_s446 lean_s450
let lean_s452 := by timed congr lean_s52 lean_s451
have lean_s453 : (Eq let627 let804) := by timed flipCongrArg lean_s445 [Not]
let lean_s454 := by timed flipCongrArg lean_s453 [Implies]
have lean_s455 : (Eq let628 let805) := by timed congr lean_s454 lean_r173
let lean_s456 := by timed congr lean_s52 lean_s455
let lean_s457 := by timed flipCongrArg lean_r25 [And]
have lean_s458 : (Eq let619 let799) := by timed congr lean_s457 lean_r251
let lean_s459 := by timed flipCongrArg lean_s458 [Implies]
have lean_s460 : (Eq let207 let207) := by timed rfl
let lean_s461 := by timed flipCongrArg lean_s460 [Eq]
have lean_s462 : (Eq let623 let212) := by timed congr lean_s461 lean_r260
have lean_s463 : (Eq let623 let210) := by timed Eq.trans lean_s462 lean_r51
have lean_s464 : (Eq let624 let802) := by timed congr lean_s459 lean_s463
let lean_s465 := by timed congr lean_s52 lean_s464
have lean_s466 : (Eq let620 let800) := by timed flipCongrArg lean_s458 [Not]
let lean_s467 := by timed flipCongrArg lean_s466 [Implies]
have lean_s468 : (Eq let621 let801) := by timed congr lean_s467 lean_r50
let lean_s469 := by timed congr lean_s465 lean_s468
let lean_s470 := by timed congr lean_s456 lean_s469
let lean_s471 := by timed congr lean_s452 lean_s470
let lean_s472 := by timed congr lean_s443 lean_s471
let lean_s473 := by timed congr lean_s439 lean_s472
let lean_s474 := by timed congr lean_s430 lean_s473
let lean_s475 := by timed congr lean_s426 lean_s474
let lean_s476 := by timed congr lean_s417 lean_s475
let lean_s477 := by timed congr lean_s413 lean_s476
let lean_s478 := by timed congr lean_s404 lean_s477
let lean_s479 := by timed congr lean_s399 lean_s478
let lean_s480 := by timed congr lean_s393 lean_s479
let lean_s481 := by timed congr lean_s389 lean_s480
let lean_s482 := by timed congr lean_s380 lean_s481
let lean_s483 := by timed congr lean_s376 lean_s482
let lean_s484 := by timed congr lean_s367 lean_s483
let lean_s485 := by timed congr lean_s363 lean_s484
let lean_s486 := by timed congr lean_s354 lean_s485
let lean_s487 := by timed congr lean_s350 lean_s486
let lean_s488 := by timed congr lean_s341 lean_s487
let lean_s489 := by timed congr lean_s337 lean_s488
let lean_s490 := by timed congr lean_s328 lean_s489
let lean_s491 := by timed congr lean_s323 lean_s490
let lean_s492 := by timed congr lean_s317 lean_s491
let lean_s493 := by timed congr lean_s295 lean_s492
let lean_s494 := by timed congr lean_s273 lean_s493
let lean_s495 := by timed congr lean_s251 lean_s494
let lean_s496 := by timed congr lean_s229 lean_s495
let lean_s497 := by timed congr lean_s207 lean_s496
let lean_s498 := by timed congr lean_s185 lean_s497
let lean_s499 := by timed congr lean_s172 lean_s498
let lean_s500 := by timed congr lean_s141 lean_s499
let lean_s501 := by timed congr lean_s118 lean_s500
let lean_s502 := by timed congr lean_s101 lean_s501
let lean_s503 := by timed congr lean_s100 lean_s502
let lean_s504 := by timed congr lean_s94 lean_s503
let lean_s505 := by timed congr lean_s77 lean_s504
let lean_s506 := by timed congr lean_s76 lean_s505
let lean_s507 := by timed congr lean_s72 lean_s506
let lean_s508 := by timed congr lean_s70 lean_s507
let lean_s509 := by timed congr lean_s68 lean_s508
let lean_s510 := by timed congr lean_s66 lean_s509
let lean_s511 := by timed congr lean_s64 lean_s510
let lean_s512 := by timed congr lean_s62 lean_s511
let lean_s513 := by timed congr lean_s60 lean_s512
let lean_s514 := by timed congr lean_s58 lean_s513
let lean_s515 := by timed congr lean_s56 lean_s514
have lean_s516 : (Eq let698 let860) := by timed congr lean_s54 lean_s515
have lean_s517 : (Eq let699 let860) := by timed Eq.trans lean_r203 lean_s516
let lean_s518 := by timed flipCongrArg lean_s517 [Implies]
have lean_s519 : let944 := by timed rfl
have lean_s520 : (Eq let263 let797) := by timed flipCongrArg lean_r29 [Not]
let lean_s521 := by timed congr lean_s519 lean_s520
have lean_s522 : (Eq let261 let165) := by timed flipCongrArg lean_r32 [format]
let lean_s523 := by timed flipCongrArg lean_s522 [Eq]
have lean_s524 : (Eq s s) := by timed rfl
have lean_s525 : (Eq let262 let167) := by timed congr lean_s523 lean_s524
have lean_s526 : (Eq let262 let166) := by timed Eq.trans lean_s525 lean_r34
let lean_s527 := by timed congr lean_s519 lean_s526
let lean_s528 := by timed congr lean_s519 lean_r42
have lean_s529 : (Eq let259 let199) := by timed flipCongrArg lean_r73 [format]
let lean_s530 := by timed flipCongrArg lean_s529 [Eq]
have lean_s531 : (Eq adrx5fmedlo adrx5fmedlo) := by timed rfl
have lean_s532 : (Eq let260 let201) := by timed congr lean_s530 lean_s531
have lean_s533 : (Eq let260 let200) := by timed Eq.trans lean_s532 lean_r45
let lean_s534 := by timed congr lean_s519 lean_s533
have lean_s535 : (Eq let256 let184) := by timed flipCongrArg lean_r35 [format]
let lean_s536 := by timed flipCongrArg lean_s535 [Eq]
have lean_s537 : (Eq adrx5fmedhi adrx5fmedhi) := by timed rfl
have lean_s538 : (Eq let257 let186) := by timed congr lean_s536 lean_s537
have lean_s539 : (Eq let257 let185) := by timed Eq.trans lean_s538 lean_r40
let lean_s540 := by timed congr lean_s519 lean_s539
have lean_s541 : (Eq let254 let188) := by timed flipCongrArg lean_r48 [format]
let lean_s542 := by timed flipCongrArg lean_s541 [Eq]
have lean_s543 : (Eq adrx5fhi adrx5fhi) := by timed rfl
have lean_s544 : (Eq let255 let190) := by timed congr lean_s542 lean_s543
have lean_s545 : (Eq let255 let189) := by timed Eq.trans lean_s544 lean_r41
let lean_s546 := by timed congr lean_s540 lean_s545
let lean_s547 := by timed congr lean_s534 lean_s546
let lean_s548 := by timed congr lean_s528 lean_s547
let lean_s549 := by timed congr lean_s527 lean_s548
have lean_s550 : (Eq let264 let798) := by timed congr lean_s521 lean_s549
have lean_s551 : (Eq let265 let798) := by timed Eq.trans lean_r68 lean_s550
have lean_s552 : (Eq let791 let861) := by timed congr lean_s518 lean_s551
have lean_s553 : (Eq let792 let862) := by timed flipCongrArg lean_s552 [Not]
have lean_s554 : let944 := by timed rfl
have lean_s555 : let862 := by timed eqResolve lean_a266 lean_s553
have lean_s556 : let860 := by timed notImplies1 lean_s555
have lean_s557 : let533 := by andElim lean_s556, 16
have lean_s558 : let860 := by timed notImplies1 lean_s555
have lean_s559 : let859 := by andElim lean_s558, 10
have lean_s560 : let1010 := by timed rfl
let lean_s561 := by timed flipCongrArg lean_s560 [Eq]
have lean_s562 : let860 := by timed notImplies1 lean_s555
have lean_s563 : let688 := by andElim lean_s562, 9
have lean_s564 : let860 := by timed notImplies1 lean_s555
have lean_s565 : let689 := by andElim lean_s564, 8
have lean_s566 : let860 := by timed notImplies1 lean_s555
have lean_s567 : let690 := by andElim lean_s566, 7
have lean_s568 : let860 := by timed notImplies1 lean_s555
have lean_s569 : let691 := by andElim lean_s568, 6
have lean_s570 : let860 := by timed notImplies1 lean_s555
have lean_s571 : let692 := by andElim lean_s570, 5
have lean_s572 : let860 := by timed notImplies1 lean_s555
have lean_s573 : let693 := by andElim lean_s572, 4
have lean_s574 : let860 := by timed notImplies1 lean_s555
have lean_s575 : let694 := by andElim lean_s574, 3
have lean_s576 : let860 := by timed notImplies1 lean_s555
have lean_s577 : let695 := by andElim lean_s576, 2
have lean_s578 : let860 := by timed notImplies1 lean_s555
have lean_s579 : let696 := by andElim lean_s578, 1
have lean_s580 : let860 := by timed notImplies1 lean_s555
have lean_s581 : let697 := by andElim lean_s580, 0
let lean_s582 := by timed And.intro lean_s579 lean_s581
let lean_s583 := by timed And.intro lean_s577 lean_s582
let lean_s584 := by timed And.intro lean_s575 lean_s583
let lean_s585 := by timed And.intro lean_s573 lean_s584
let lean_s586 := by timed And.intro lean_s571 lean_s585
let lean_s587 := by timed And.intro lean_s569 lean_s586
let lean_s588 := by timed And.intro lean_s567 lean_s587
let lean_s589 := by timed And.intro lean_s565 lean_s588
have lean_s590 : let1006 := by timed And.intro lean_s563 lean_s589
have lean_s591 : let688 := by andElim lean_s590, 0
let lean_s592 := by timed flipCongrArg lean_s591 [HAdd.hAdd]
have lean_s593 : let1004 := by timed rfl
let lean_s594 := by timed flipCongrArg lean_s593 [HMul.hMul]
have lean_s595 : let697 := by andElim lean_s590, 9
have lean_s596 : let1014 := by timed congr lean_s594 lean_s595
have lean_s597 : let1013 := by timed congr lean_s592 lean_s596
have lean_s598 : (Eq let859 let1012) := by timed congr lean_s561 lean_s597
let lean_s599 := by timed flipCongrArg lean_s73 [Eq]
have lean_s600 : let310 := by timed rfl
let lean_s601 := by timed flipCongrArg lean_s600 [HAdd.hAdd]
have lean_s602 : (Eq let939 let287) := by timed congr lean_s601 lean_r237
have lean_s603 : (Eq let939 let84) := by timed Eq.trans lean_s602 lean_r81
have lean_s604 : (Eq let1012 let1007) := by timed congr lean_s599 lean_s603
have lean_s605 : (Eq let859 let1007) := by timed Eq.trans lean_s598 lean_s604
have lean_s606 : let1007 := by timed eqResolve lean_s559 lean_s605
let lean_s607 := by timed And.intro lean_s579 lean_s581
let lean_s608 := by timed And.intro lean_s577 lean_s607
let lean_s609 := by timed And.intro lean_s575 lean_s608
let lean_s610 := by timed And.intro lean_s573 lean_s609
let lean_s611 := by timed And.intro lean_s571 lean_s610
let lean_s612 := by timed And.intro lean_s569 lean_s611
let lean_s613 := by timed And.intro lean_s567 lean_s612
let lean_s614 := by timed And.intro lean_s565 lean_s613
let lean_s615 := by timed And.intro lean_s563 lean_s614
have lean_s616 : let1008 := by timed And.intro lean_s606 lean_s615
have lean_s617 : let1007 := by andElim lean_s616, 0
let lean_s618 := by timed flipCongrArg lean_s617 [Eq]
have lean_s619 : let1009 := by timed rfl
have lean_s620 : let1002 := by timed rfl
let lean_s621 := by timed flipCongrArg lean_s620 [HMul.hMul]
have lean_s622 : let1001 := by timed rfl
have lean_s623 : let1004 := by timed rfl
let lean_s624 := by timed flipCongrArg lean_s623 [HMul.hMul]
have lean_s625 : let688 := by andElim lean_s616, 1
have lean_s626 : let1020 := by timed congr lean_s624 lean_s625
have lean_s627 : let1000 := by timed rfl
let lean_s628 := by timed congrHAdd lean_s626 lean_s627
have lean_s629 : let1019 := by timed congrHAdd lean_s622 lean_s628
have lean_s630 : let1022 := by timed flipCongrArg lean_s629 [sx5fcount]
have lean_s631 : let1021 := by timed congr lean_s621 lean_s630
let lean_s632 := by timed flipCongrArg lean_s620 [HMul.hMul]
have lean_s633 : let1018 := by timed flipCongrArg lean_s629 [xx5fcount]
have lean_s634 : let1017 := by timed congr lean_s632 lean_s633
let lean_s635 := by timed congrHAdd lean_s631 lean_s634
have lean_s636 : (Eq let532 let1015) := by timed congrHAdd lean_s619 lean_s635
have lean_s637 : (Eq let533 let1016) := by timed congr lean_s618 lean_s636
have lean_s638 : let85 := by timed rfl
let lean_s639 := by timed flipCongrArg lean_s638 [Eq]
have lean_s640 : let1002 := by timed rfl
let lean_s641 := by timed flipCongrArg lean_s640 [HMul.hMul]
have lean_s642 : let1001 := by timed rfl
let lean_s643 := by timed congrHAdd lean_r128 lean_s78
have lean_s644 : (Eq let487 let266) := by timed congrHAdd lean_s642 lean_s643
have lean_s645 : (Eq let487 let11) := by timed Eq.trans lean_s644 lean_r69
have lean_s646 : (Eq let490 let13) := by timed flipCongrArg lean_s645 [sx5fcount]
have lean_s647 : (Eq let491 let113) := by timed congr lean_s641 lean_s646
let lean_s648 := by timed flipCongrArg lean_s640 [HMul.hMul]
have lean_s649 : (Eq let488 let12) := by timed flipCongrArg lean_s645 [xx5fcount]
have lean_s650 : (Eq let489 let112) := by timed congr lean_s648 lean_s649
let lean_s651 := by timed congrHAdd lean_s647 lean_s650
have lean_s652 : (Eq let1015 let701) := by timed congrHAdd lean_s102 lean_s651
have lean_s653 : (Eq let1016 let702) := by timed congr lean_s639 lean_s652
have lean_s654 : (Eq let1016 let700) := by timed Eq.trans lean_s653 lean_r204
have lean_s655 : (Eq let533 let700) := by timed Eq.trans lean_s637 lean_s654
have lean_s656 : let700 := by timed eqResolve lean_s557 lean_s655
let lean_s657 := by timed And.intro lean_s579 lean_s581
let lean_s658 := by timed And.intro lean_s577 lean_s657
let lean_s659 := by timed And.intro lean_s575 lean_s658
let lean_s660 := by timed And.intro lean_s573 lean_s659
let lean_s661 := by timed And.intro lean_s571 lean_s660
let lean_s662 := by timed And.intro lean_s569 lean_s661
let lean_s663 := by timed And.intro lean_s567 lean_s662
let lean_s664 := by timed And.intro lean_s565 lean_s663
let lean_s665 := by timed And.intro lean_s563 lean_s664
let lean_s666 := by timed And.intro lean_s606 lean_s665
have lean_s667 : (And let700 let1008) := by timed And.intro lean_s656 lean_s666
have lean_s668 : let697 := by andElim lean_s667, 11
let lean_s669 := by timed flipCongrArg lean_s668 [Eq]
have lean_s670 : let239 := by timed rfl
have lean_s671 : (Eq let697 let239) := by timed congr lean_s669 lean_s670
let lean_s672 := by timed congr lean_s554 lean_s671
have lean_s673 : let696 := by andElim lean_s667, 10
let lean_s674 := by timed flipCongrArg lean_s673 [Eq]
have lean_s675 : let276 := by timed rfl
have lean_s676 : (Eq let696 let276) := by timed congr lean_s674 lean_s675
let lean_s677 := by timed congr lean_s554 lean_s676
have lean_s678 : let695 := by andElim lean_s667, 9
let lean_s679 := by timed flipCongrArg lean_s678 [Eq]
have lean_s680 : let233 := by timed rfl
have lean_s681 : (Eq let695 let233) := by timed congr lean_s679 lean_s680
let lean_s682 := by timed congr lean_s554 lean_s681
have lean_s683 : let694 := by andElim lean_s667, 8
let lean_s684 := by timed flipCongrArg lean_s683 [Eq]
have lean_s685 : let232 := by timed rfl
have lean_s686 : (Eq let694 let232) := by timed congr lean_s684 lean_s685
let lean_s687 := by timed congr lean_s554 lean_s686
have lean_s688 : let693 := by andElim lean_s667, 7
let lean_s689 := by timed flipCongrArg lean_s688 [Eq]
have lean_s690 : let197 := by timed rfl
have lean_s691 : (Eq let693 let197) := by timed congr lean_s689 lean_s690
let lean_s692 := by timed congr lean_s554 lean_s691
have lean_s693 : let692 := by andElim lean_s667, 6
let lean_s694 := by timed flipCongrArg lean_s693 [Eq]
have lean_s695 : (Eq let692 let276) := by timed congr lean_s694 lean_s675
let lean_s696 := by timed congr lean_s554 lean_s695
have lean_s697 : let691 := by andElim lean_s667, 5
let lean_s698 := by timed flipCongrArg lean_s697 [Eq]
have lean_s699 : let580 := by timed rfl
have lean_s700 : (Eq let691 let580) := by timed congr lean_s698 lean_s699
let lean_s701 := by timed congr lean_s554 lean_s700
have lean_s702 : let690 := by andElim lean_s667, 4
let lean_s703 := by timed flipCongrArg lean_s702 [Eq]
have lean_s704 : let576 := by timed rfl
have lean_s705 : (Eq let690 let576) := by timed congr lean_s703 lean_s704
let lean_s706 := by timed congr lean_s554 lean_s705
have lean_s707 : let689 := by andElim lean_s667, 3
let lean_s708 := by timed flipCongrArg lean_s707 [Eq]
have lean_s709 : let573 := by timed rfl
have lean_s710 : (Eq let689 let573) := by timed congr lean_s708 lean_s709
let lean_s711 := by timed congr lean_s554 lean_s710
have lean_s712 : let688 := by andElim lean_s667, 2
let lean_s713 := by timed flipCongrArg lean_s712 [Eq]
have lean_s714 : let310 := by timed rfl
have lean_s715 : (Eq let688 let310) := by timed congr lean_s713 lean_s714
let lean_s716 := by timed congr lean_s554 lean_s715
have lean_s717 : let1007 := by andElim lean_s667, 1
let lean_s718 := by timed flipCongrArg lean_s717 [Eq]
let lean_s719 := by timed flipCongrArg lean_s712 [HAdd.hAdd]
have lean_s720 : let1004 := by timed rfl
let lean_s721 := by timed flipCongrArg lean_s720 [HMul.hMul]
have lean_s722 : let1014 := by timed congr lean_s721 lean_s668
have lean_s723 : let1013 := by timed congr lean_s719 lean_s722
have lean_s724 : (Eq let859 let940) := by timed congr lean_s718 lean_s723
let lean_s725 := by timed congr lean_s554 lean_s724
have lean_s726 : let700 := by andElim lean_s667, 0
let lean_s727 := by timed flipCongrArg lean_s726 [HAdd.hAdd]
let lean_s728 := by timed flipCongrArg lean_s720 [HMul.hMul]
have lean_s729 : let1020 := by timed congr lean_s728 lean_s712
have lean_s730 : (Eq let606 let326) := by timed congr lean_s727 lean_s729
let lean_s731 := by timed flipCongrArg lean_s730 [GE.ge]
have lean_s732 : (Eq let607 let938) := by timed congr lean_s731 lean_s714
let lean_s733 := by timed congr lean_s554 lean_s732
have lean_s734 : (Eq let221 let221) := by timed rfl
let lean_s735 := by timed congrHAdd lean_s734 lean_s673
have lean_s736 : (Eq let356 let223) := by timed congrHAdd lean_s712 lean_s735
let lean_s737 := by timed flipCongrArg lean_s736 [GE.ge]
have lean_s738 : let1005 := by timed rfl
have lean_s739 : (Eq let357 let937) := by timed congr lean_s737 lean_s738
let lean_s740 := by timed congr lean_s554 lean_s739
let lean_s741 := by timed flipCongrArg lean_s712 [HAdd.hAdd]
have lean_s742 : (Eq let586 let396) := by timed congr lean_s741 lean_s734
let lean_s743 := by timed flipCongrArg lean_s742 [GE.ge]
have lean_s744 : (Eq let587 let935) := by timed congr lean_s743 lean_s720
have lean_s745 : (Eq let858 let936) := by timed flipCongrArg lean_s744 [Not]
let lean_s746 := by timed congr lean_s554 lean_s745
let lean_s747 := by timed flipCongrArg lean_s720 [HMul.hMul]
have lean_s748 : (Eq let560 let120) := by timed congr lean_s747 lean_s726
let lean_s749 := by timed congrHAdd lean_s748 lean_s668
have lean_s750 : (Eq let581 let932) := by timed congrHAdd lean_s717 lean_s749
let lean_s751 := by timed flipCongrArg lean_s750 [GE.ge]
have lean_s752 : let1003 := by timed rfl
have lean_s753 : (Eq let582 let933) := by timed congr lean_s751 lean_s752
have lean_s754 : (Eq let583 let934) := by timed flipCongrArg lean_s753 [Not]
let lean_s755 := by timed congr lean_s554 lean_s754
let lean_s756 := by timed congrHAdd lean_s668 lean_s673
let lean_s757 := by timed congrHAdd lean_s748 lean_s756
have lean_s758 : (Eq let561 let930) := by timed congrHAdd lean_s717 lean_s757
let lean_s759 := by timed flipCongrArg lean_s758 [GE.ge]
have lean_s760 : (Eq let562 let931) := by timed congr lean_s759 lean_s690
let lean_s761 := by timed congr lean_s554 lean_s760
let lean_s762 := by timed flipCongrArg lean_s717 [Eq]
have lean_s763 : let1002 := by timed rfl
let lean_s764 := by timed flipCongrArg lean_s763 [HMul.hMul]
have lean_s765 : let1001 := by timed rfl
have lean_s766 : let1000 := by timed rfl
let lean_s767 := by timed congrHAdd lean_s729 lean_s766
have lean_s768 : let1019 := by timed congrHAdd lean_s765 lean_s767
have lean_s769 : let1022 := by timed flipCongrArg lean_s768 [sx5fcount]
have lean_s770 : let1021 := by timed congr lean_s764 lean_s769
let lean_s771 := by timed flipCongrArg lean_s763 [HMul.hMul]
have lean_s772 : let1018 := by timed flipCongrArg lean_s768 [xx5fcount]
have lean_s773 : let1017 := by timed congr lean_s771 lean_s772
let lean_s774 := by timed congrHAdd lean_s770 lean_s773
have lean_s775 : (Eq let532 let494) := by timed congrHAdd lean_s726 lean_s774
have lean_s776 : (Eq let533 let929) := by timed congr lean_s762 lean_s775
let lean_s777 := by timed congr lean_s554 lean_s776
have lean_s778 : let971 := by timed rfl
let lean_s779 := by timed flipCongrArg lean_s712 [Eq]
have lean_s780 : (Eq let226 let87) := by timed congr lean_s779 lean_s766
let lean_s781 := by timed congr lean_s778 lean_s780
let lean_s782 := by timed flipCongrArg lean_s712 [Eq]
have lean_s783 : (Eq let397 let397) := by timed rfl
have lean_s784 : (Eq let398 let513) := by timed congr lean_s782 lean_s783
let lean_s785 := by timed congr lean_s778 lean_s784
let lean_s786 := by timed flipCongrArg lean_s712 [Eq]
have lean_s787 : (Eq let11 let11) := by timed rfl
have lean_s788 : (Eq let519 let385) := by timed congr lean_s786 lean_s787
let lean_s789 := by timed congr lean_s778 lean_s788
let lean_s790 := by timed flipCongrArg lean_s712 [Eq]
have lean_s791 : (Eq let383 let383) := by timed rfl
have lean_s792 : (Eq let495 let384) := by timed congr lean_s790 lean_s791
let lean_s793 := by timed congr lean_s778 lean_s792
let lean_s794 := by timed flipCongrArg lean_s712 [Eq]
have lean_s795 : (Eq let346 let346) := by timed rfl
have lean_s796 : (Eq let517 let347) := by timed congr lean_s794 lean_s795
let lean_s797 := by timed congr lean_s778 lean_s796
let lean_s798 := by timed flipCongrArg lean_s712 [Eq]
have lean_s799 : (Eq let361 let361) := by timed rfl
have lean_s800 : (Eq let362 let387) := by timed congr lean_s798 lean_s799
let lean_s801 := by timed congr lean_s797 lean_s800
let lean_s802 := by timed congr lean_s793 lean_s801
let lean_s803 := by timed congr lean_s789 lean_s802
let lean_s804 := by timed congr lean_s785 lean_s803
have lean_s805 : (Eq let857 let928) := by timed congr lean_s781 lean_s804
let lean_s806 := by timed congr lean_s554 lean_s805
have lean_s807 : let971 := by timed rfl
let lean_s808 := by timed flipCongrArg lean_s726 [Eq]
have lean_s809 : (Eq let855 let242) := by timed congr lean_s808 lean_s712
let lean_s810 := by timed congr lean_s807 lean_s809
let lean_s811 := by timed flipCongrArg lean_s726 [Eq]
let lean_s812 := by timed flipCongrArg lean_s752 [HAdd.hAdd]
have lean_s813 : (Eq let399 let729) := by timed congr lean_s812 lean_s712
have lean_s814 : (Eq let854 let926) := by timed congr lean_s811 lean_s813
let lean_s815 := by timed congr lean_s807 lean_s814
let lean_s816 := by timed flipCongrArg lean_s726 [Eq]
let lean_s817 := by timed flipCongrArg lean_s738 [HAdd.hAdd]
have lean_s818 : (Eq let183 let381) := by timed congr lean_s817 lean_s712
have lean_s819 : (Eq let853 let925) := by timed congr lean_s816 lean_s818
let lean_s820 := by timed congr lean_s815 lean_s819
have lean_s821 : (Eq let856 let927) := by timed congr lean_s810 lean_s820
let lean_s822 := by timed congr lean_s554 lean_s821
have lean_s823 : let971 := by timed rfl
let lean_s824 := by timed flipCongrArg lean_s697 [Eq]
have lean_s825 : (Eq let73 let73) := by timed rfl
have lean_s826 : (Eq let331 let781) := by timed congr lean_s824 lean_s825
let lean_s827 := by timed congr lean_s823 lean_s826
let lean_s828 := by timed flipCongrArg lean_s702 [Eq]
have lean_s829 : (Eq let74 let330) := by timed congr lean_s828 lean_s825
let lean_s830 := by timed congr lean_s823 lean_s829
let lean_s831 := by timed flipCongrArg lean_s707 [Eq]
have lean_s832 : (Eq let512 let328) := by timed congr lean_s831 lean_s825
let lean_s833 := by timed congr lean_s823 lean_s832
have lean_s834 : let999 := by timed rfl
let lean_s835 := by timed congr lean_s823 lean_s834
have lean_s836 : let998 := by timed rfl
let lean_s837 := by timed congr lean_s823 lean_s836
have lean_s838 : let997 := by timed rfl
let lean_s839 := by timed congr lean_s823 lean_s838
have lean_s840 : let996 := by timed rfl
let lean_s841 := by timed congr lean_s823 lean_s840
have lean_s842 : let995 := by timed rfl
let lean_s843 := by timed congr lean_s841 lean_s842
let lean_s844 := by timed congr lean_s839 lean_s843
let lean_s845 := by timed congr lean_s837 lean_s844
let lean_s846 := by timed congr lean_s835 lean_s845
let lean_s847 := by timed congr lean_s833 lean_s846
let lean_s848 := by timed congr lean_s830 lean_s847
have lean_s849 : (Eq let852 let924) := by timed congr lean_s827 lean_s848
let lean_s850 := by timed congr lean_s554 lean_s849
have lean_s851 : let971 := by timed rfl
let lean_s852 := by timed flipCongrArg lean_s697 [Eq]
have lean_s853 : (Eq let70 let70) := by timed rfl
have lean_s854 : (Eq let220 let551) := by timed congr lean_s852 lean_s853
let lean_s855 := by timed congr lean_s851 lean_s854
let lean_s856 := by timed flipCongrArg lean_s702 [Eq]
have lean_s857 : (Eq let504 let136) := by timed congr lean_s856 lean_s853
let lean_s858 := by timed congr lean_s851 lean_s857
let lean_s859 := by timed flipCongrArg lean_s707 [Eq]
have lean_s860 : (Eq let71 let777) := by timed congr lean_s859 lean_s853
let lean_s861 := by timed congr lean_s851 lean_s860
have lean_s862 : let994 := by timed rfl
let lean_s863 := by timed congr lean_s851 lean_s862
have lean_s864 : let993 := by timed rfl
let lean_s865 := by timed congr lean_s851 lean_s864
have lean_s866 : let992 := by timed rfl
let lean_s867 := by timed congr lean_s851 lean_s866
have lean_s868 : let991 := by timed rfl
let lean_s869 := by timed congr lean_s851 lean_s868
have lean_s870 : let990 := by timed rfl
let lean_s871 := by timed congr lean_s869 lean_s870
let lean_s872 := by timed congr lean_s867 lean_s871
let lean_s873 := by timed congr lean_s865 lean_s872
let lean_s874 := by timed congr lean_s863 lean_s873
let lean_s875 := by timed congr lean_s861 lean_s874
let lean_s876 := by timed congr lean_s858 lean_s875
have lean_s877 : (Eq let851 let923) := by timed congr lean_s855 lean_s876
let lean_s878 := by timed congr lean_s554 lean_s877
have lean_s879 : let971 := by timed rfl
let lean_s880 := by timed flipCongrArg lean_s697 [Eq]
have lean_s881 : (Eq let80 let80) := by timed rfl
have lean_s882 : (Eq let301 let538) := by timed congr lean_s880 lean_s881
let lean_s883 := by timed congr lean_s879 lean_s882
let lean_s884 := by timed flipCongrArg lean_s702 [Eq]
have lean_s885 : (Eq let228 let751) := by timed congr lean_s884 lean_s881
let lean_s886 := by timed congr lean_s879 lean_s885
let lean_s887 := by timed flipCongrArg lean_s707 [Eq]
have lean_s888 : (Eq let81 let231) := by timed congr lean_s887 lean_s881
let lean_s889 := by timed congr lean_s879 lean_s888
have lean_s890 : let989 := by timed rfl
let lean_s891 := by timed congr lean_s879 lean_s890
have lean_s892 : let988 := by timed rfl
let lean_s893 := by timed congr lean_s879 lean_s892
have lean_s894 : let987 := by timed rfl
let lean_s895 := by timed congr lean_s879 lean_s894
have lean_s896 : let986 := by timed rfl
let lean_s897 := by timed congr lean_s879 lean_s896
have lean_s898 : let985 := by timed rfl
let lean_s899 := by timed congr lean_s897 lean_s898
let lean_s900 := by timed congr lean_s895 lean_s899
let lean_s901 := by timed congr lean_s893 lean_s900
let lean_s902 := by timed congr lean_s891 lean_s901
let lean_s903 := by timed congr lean_s889 lean_s902
let lean_s904 := by timed congr lean_s886 lean_s903
have lean_s905 : (Eq let850 let922) := by timed congr lean_s883 lean_s904
let lean_s906 := by timed congr lean_s554 lean_s905
have lean_s907 : let971 := by timed rfl
let lean_s908 := by timed flipCongrArg lean_s697 [Eq]
have lean_s909 : (Eq let60 let60) := by timed rfl
have lean_s910 : (Eq let574 let253) := by timed congr lean_s908 lean_s909
let lean_s911 := by timed congr lean_s907 lean_s910
let lean_s912 := by timed flipCongrArg lean_s702 [Eq]
have lean_s913 : (Eq let61 let350) := by timed congr lean_s912 lean_s909
let lean_s914 := by timed congr lean_s907 lean_s913
let lean_s915 := by timed flipCongrArg lean_s707 [Eq]
have lean_s916 : (Eq let237 let314) := by timed congr lean_s915 lean_s909
let lean_s917 := by timed congr lean_s907 lean_s916
have lean_s918 : let984 := by timed rfl
let lean_s919 := by timed congr lean_s907 lean_s918
have lean_s920 : let983 := by timed rfl
let lean_s921 := by timed congr lean_s907 lean_s920
have lean_s922 : let982 := by timed rfl
let lean_s923 := by timed congr lean_s907 lean_s922
have lean_s924 : let981 := by timed rfl
let lean_s925 := by timed congr lean_s907 lean_s924
have lean_s926 : let980 := by timed rfl
let lean_s927 := by timed congr lean_s925 lean_s926
let lean_s928 := by timed congr lean_s923 lean_s927
let lean_s929 := by timed congr lean_s921 lean_s928
let lean_s930 := by timed congr lean_s919 lean_s929
let lean_s931 := by timed congr lean_s917 lean_s930
let lean_s932 := by timed congr lean_s914 lean_s931
have lean_s933 : (Eq let849 let921) := by timed congr lean_s911 lean_s932
let lean_s934 := by timed congr lean_s554 lean_s933
have lean_s935 : let971 := by timed rfl
let lean_s936 := by timed flipCongrArg lean_s697 [Eq]
have lean_s937 : (Eq let147 let147) := by timed rfl
have lean_s938 : (Eq let567 let280) := by timed congr lean_s936 lean_s937
let lean_s939 := by timed congr lean_s935 lean_s938
let lean_s940 := by timed flipCongrArg lean_s702 [Eq]
have lean_s941 : (Eq let148 let377) := by timed congr lean_s940 lean_s937
let lean_s942 := by timed congr lean_s935 lean_s941
let lean_s943 := by timed flipCongrArg lean_s707 [Eq]
have lean_s944 : (Eq let311 let155) := by timed congr lean_s943 lean_s937
let lean_s945 := by timed congr lean_s935 lean_s944
have lean_s946 : let979 := by timed rfl
let lean_s947 := by timed congr lean_s935 lean_s946
have lean_s948 : let978 := by timed rfl
let lean_s949 := by timed congr lean_s935 lean_s948
have lean_s950 : let977 := by timed rfl
let lean_s951 := by timed congr lean_s935 lean_s950
have lean_s952 : let976 := by timed rfl
let lean_s953 := by timed congr lean_s935 lean_s952
have lean_s954 : let975 := by timed rfl
let lean_s955 := by timed congr lean_s953 lean_s954
let lean_s956 := by timed congr lean_s951 lean_s955
let lean_s957 := by timed congr lean_s949 lean_s956
let lean_s958 := by timed congr lean_s947 lean_s957
let lean_s959 := by timed congr lean_s945 lean_s958
let lean_s960 := by timed congr lean_s942 lean_s959
have lean_s961 : (Eq let848 let920) := by timed congr lean_s939 lean_s960
let lean_s962 := by timed congr lean_s554 lean_s961
have lean_s963 : let971 := by timed rfl
let lean_s964 := by timed flipCongrArg lean_s697 [Eq]
have lean_s965 : (Eq let140 let140) := by timed rfl
have lean_s966 : (Eq let141 let284) := by timed congr lean_s964 lean_s965
let lean_s967 := by timed congr lean_s963 lean_s966
let lean_s968 := by timed flipCongrArg lean_s702 [Eq]
have lean_s969 : (Eq let351 let225) := by timed congr lean_s968 lean_s965
let lean_s970 := by timed congr lean_s963 lean_s969
let lean_s971 := by timed flipCongrArg lean_s707 [Eq]
have lean_s972 : (Eq let204 let354) := by timed congr lean_s971 lean_s965
let lean_s973 := by timed congr lean_s963 lean_s972
have lean_s974 : let974 := by timed rfl
let lean_s975 := by timed congr lean_s963 lean_s974
have lean_s976 : let973 := by timed rfl
let lean_s977 := by timed congr lean_s963 lean_s976
have lean_s978 : let972 := by timed rfl
let lean_s979 := by timed congr lean_s963 lean_s978
have lean_s980 : let970 := by timed rfl
let lean_s981 := by timed congr lean_s963 lean_s980
have lean_s982 : let969 := by timed rfl
let lean_s983 := by timed congr lean_s981 lean_s982
let lean_s984 := by timed congr lean_s979 lean_s983
let lean_s985 := by timed congr lean_s977 lean_s984
let lean_s986 := by timed congr lean_s975 lean_s985
let lean_s987 := by timed congr lean_s973 lean_s986
let lean_s988 := by timed congr lean_s970 lean_s987
have lean_s989 : (Eq let847 let919) := by timed congr lean_s967 lean_s988
let lean_s990 := by timed congr lean_s554 lean_s989
let lean_s991 := by timed flipCongrArg lean_s826 [And]
have lean_s992 : (Eq let843 let915) := by timed congr lean_s991 lean_s857
let lean_s993 := by timed flipCongrArg lean_s992 [Implies]
have lean_s994 : let968 := by timed rfl
have lean_s995 : (Eq let846 let918) := by timed congr lean_s993 lean_s994
let lean_s996 := by timed congr lean_s554 lean_s995
have lean_s997 : (Eq let844 let916) := by timed flipCongrArg lean_s992 [Not]
let lean_s998 := by timed flipCongrArg lean_s997 [Implies]
have lean_s999 : let967 := by timed rfl
have lean_s1000 : (Eq let845 let917) := by timed congr lean_s998 lean_s999
let lean_s1001 := by timed congr lean_s554 lean_s1000
let lean_s1002 := by timed flipCongrArg lean_s854 [And]
have lean_s1003 : (Eq let839 let911) := by timed congr lean_s1002 lean_s885
let lean_s1004 := by timed flipCongrArg lean_s1003 [Implies]
have lean_s1005 : let966 := by timed rfl
have lean_s1006 : (Eq let842 let914) := by timed congr lean_s1004 lean_s1005
let lean_s1007 := by timed congr lean_s554 lean_s1006
have lean_s1008 : (Eq let840 let912) := by timed flipCongrArg lean_s1003 [Not]
let lean_s1009 := by timed flipCongrArg lean_s1008 [Implies]
have lean_s1010 : let965 := by timed rfl
have lean_s1011 : (Eq let841 let913) := by timed congr lean_s1009 lean_s1010
let lean_s1012 := by timed congr lean_s554 lean_s1011
let lean_s1013 := by timed flipCongrArg lean_s882 [And]
have lean_s1014 : (Eq let835 let907) := by timed congr lean_s1013 lean_s913
let lean_s1015 := by timed flipCongrArg lean_s1014 [Implies]
have lean_s1016 : let964 := by timed rfl
have lean_s1017 : (Eq let838 let910) := by timed congr lean_s1015 lean_s1016
let lean_s1018 := by timed congr lean_s554 lean_s1017
have lean_s1019 : (Eq let836 let908) := by timed flipCongrArg lean_s1014 [Not]
let lean_s1020 := by timed flipCongrArg lean_s1019 [Implies]
have lean_s1021 : let963 := by timed rfl
have lean_s1022 : (Eq let837 let909) := by timed congr lean_s1020 lean_s1021
let lean_s1023 := by timed congr lean_s554 lean_s1022
let lean_s1024 := by timed flipCongrArg lean_s910 [And]
have lean_s1025 : (Eq let831 let903) := by timed congr lean_s1024 lean_s941
let lean_s1026 := by timed flipCongrArg lean_s1025 [Implies]
have lean_s1027 : let962 := by timed rfl
have lean_s1028 : (Eq let834 let906) := by timed congr lean_s1026 lean_s1027
let lean_s1029 := by timed congr lean_s554 lean_s1028
have lean_s1030 : (Eq let832 let904) := by timed flipCongrArg lean_s1025 [Not]
let lean_s1031 := by timed flipCongrArg lean_s1030 [Implies]
have lean_s1032 : let961 := by timed rfl
have lean_s1033 : (Eq let833 let905) := by timed congr lean_s1031 lean_s1032
let lean_s1034 := by timed congr lean_s554 lean_s1033
let lean_s1035 := by timed flipCongrArg lean_s938 [And]
have lean_s1036 : (Eq let827 let899) := by timed congr lean_s1035 lean_s969
let lean_s1037 := by timed flipCongrArg lean_s1036 [Implies]
have lean_s1038 : let960 := by timed rfl
have lean_s1039 : (Eq let830 let902) := by timed congr lean_s1037 lean_s1038
let lean_s1040 := by timed congr lean_s554 lean_s1039
have lean_s1041 : (Eq let828 let900) := by timed flipCongrArg lean_s1036 [Not]
let lean_s1042 := by timed flipCongrArg lean_s1041 [Implies]
have lean_s1043 : let959 := by timed rfl
have lean_s1044 : (Eq let829 let901) := by timed congr lean_s1042 lean_s1043
let lean_s1045 := by timed congr lean_s554 lean_s1044
let lean_s1046 := by timed flipCongrArg lean_s966 [And]
let lean_s1047 := by timed flipCongrArg lean_s702 [Eq]
have lean_s1048 : (Eq let137 let137) := by timed rfl
have lean_s1049 : (Eq let138 let366) := by timed congr lean_s1047 lean_s1048
have lean_s1050 : (Eq let823 let895) := by timed congr lean_s1046 lean_s1049
let lean_s1051 := by timed flipCongrArg lean_s1050 [Implies]
have lean_s1052 : let958 := by timed rfl
have lean_s1053 : (Eq let826 let898) := by timed congr lean_s1051 lean_s1052
let lean_s1054 := by timed congr lean_s554 lean_s1053
have lean_s1055 : (Eq let824 let896) := by timed flipCongrArg lean_s1050 [Not]
let lean_s1056 := by timed flipCongrArg lean_s1055 [Implies]
have lean_s1057 : let957 := by timed rfl
have lean_s1058 : (Eq let825 let897) := by timed congr lean_s1056 lean_s1057
let lean_s1059 := by timed congr lean_s554 lean_s1058
let lean_s1060 := by timed flipCongrArg lean_s826 [And]
have lean_s1061 : (Eq let819 let891) := by timed congr lean_s1060 lean_s860
let lean_s1062 := by timed flipCongrArg lean_s1061 [Implies]
have lean_s1063 : let956 := by timed rfl
have lean_s1064 : (Eq let822 let894) := by timed congr lean_s1062 lean_s1063
let lean_s1065 := by timed congr lean_s554 lean_s1064
have lean_s1066 : (Eq let820 let892) := by timed flipCongrArg lean_s1061 [Not]
let lean_s1067 := by timed flipCongrArg lean_s1066 [Implies]
have lean_s1068 : let955 := by timed rfl
have lean_s1069 : (Eq let821 let893) := by timed congr lean_s1067 lean_s1068
let lean_s1070 := by timed congr lean_s554 lean_s1069
let lean_s1071 := by timed flipCongrArg lean_s854 [And]
have lean_s1072 : (Eq let815 let887) := by timed congr lean_s1071 lean_s888
let lean_s1073 := by timed flipCongrArg lean_s1072 [Implies]
have lean_s1074 : let954 := by timed rfl
have lean_s1075 : (Eq let818 let890) := by timed congr lean_s1073 lean_s1074
let lean_s1076 := by timed congr lean_s554 lean_s1075
have lean_s1077 : (Eq let816 let888) := by timed flipCongrArg lean_s1072 [Not]
let lean_s1078 := by timed flipCongrArg lean_s1077 [Implies]
have lean_s1079 : let953 := by timed rfl
have lean_s1080 : (Eq let817 let889) := by timed congr lean_s1078 lean_s1079
let lean_s1081 := by timed congr lean_s554 lean_s1080
let lean_s1082 := by timed flipCongrArg lean_s882 [And]
have lean_s1083 : (Eq let811 let883) := by timed congr lean_s1082 lean_s916
let lean_s1084 := by timed flipCongrArg lean_s1083 [Implies]
have lean_s1085 : let952 := by timed rfl
have lean_s1086 : (Eq let814 let886) := by timed congr lean_s1084 lean_s1085
let lean_s1087 := by timed congr lean_s554 lean_s1086
have lean_s1088 : (Eq let812 let884) := by timed flipCongrArg lean_s1083 [Not]
let lean_s1089 := by timed flipCongrArg lean_s1088 [Implies]
have lean_s1090 : let951 := by timed rfl
have lean_s1091 : (Eq let813 let885) := by timed congr lean_s1089 lean_s1090
let lean_s1092 := by timed congr lean_s554 lean_s1091
let lean_s1093 := by timed flipCongrArg lean_s910 [And]
have lean_s1094 : (Eq let807 let879) := by timed congr lean_s1093 lean_s944
let lean_s1095 := by timed flipCongrArg lean_s1094 [Implies]
have lean_s1096 : let950 := by timed rfl
have lean_s1097 : (Eq let810 let882) := by timed congr lean_s1095 lean_s1096
let lean_s1098 := by timed congr lean_s554 lean_s1097
have lean_s1099 : (Eq let808 let880) := by timed flipCongrArg lean_s1094 [Not]
let lean_s1100 := by timed flipCongrArg lean_s1099 [Implies]
have lean_s1101 : let949 := by timed rfl
have lean_s1102 : (Eq let809 let881) := by timed congr lean_s1100 lean_s1101
let lean_s1103 := by timed congr lean_s554 lean_s1102
let lean_s1104 := by timed flipCongrArg lean_s938 [And]
have lean_s1105 : (Eq let803 let875) := by timed congr lean_s1104 lean_s972
let lean_s1106 := by timed flipCongrArg lean_s1105 [Implies]
have lean_s1107 : let948 := by timed rfl
have lean_s1108 : (Eq let806 let878) := by timed congr lean_s1106 lean_s1107
let lean_s1109 := by timed congr lean_s554 lean_s1108
have lean_s1110 : (Eq let804 let876) := by timed flipCongrArg lean_s1105 [Not]
let lean_s1111 := by timed flipCongrArg lean_s1110 [Implies]
have lean_s1112 : let947 := by timed rfl
have lean_s1113 : (Eq let805 let877) := by timed congr lean_s1111 lean_s1112
let lean_s1114 := by timed congr lean_s554 lean_s1113
let lean_s1115 := by timed flipCongrArg lean_s966 [And]
let lean_s1116 := by timed flipCongrArg lean_s707 [Eq]
have lean_s1117 : (Eq let767 let203) := by timed congr lean_s1116 lean_s1048
have lean_s1118 : (Eq let799 let871) := by timed congr lean_s1115 lean_s1117
let lean_s1119 := by timed flipCongrArg lean_s1118 [Implies]
have lean_s1120 : let946 := by timed rfl
have lean_s1121 : (Eq let802 let874) := by timed congr lean_s1119 lean_s1120
let lean_s1122 := by timed congr lean_s554 lean_s1121
have lean_s1123 : (Eq let800 let872) := by timed flipCongrArg lean_s1118 [Not]
let lean_s1124 := by timed flipCongrArg lean_s1123 [Implies]
have lean_s1125 : let945 := by timed rfl
have lean_s1126 : (Eq let801 let873) := by timed congr lean_s1124 lean_s1125
let lean_s1127 := by timed congr lean_s1122 lean_s1126
let lean_s1128 := by timed congr lean_s1114 lean_s1127
let lean_s1129 := by timed congr lean_s1109 lean_s1128
let lean_s1130 := by timed congr lean_s1103 lean_s1129
let lean_s1131 := by timed congr lean_s1098 lean_s1130
let lean_s1132 := by timed congr lean_s1092 lean_s1131
let lean_s1133 := by timed congr lean_s1087 lean_s1132
let lean_s1134 := by timed congr lean_s1081 lean_s1133
let lean_s1135 := by timed congr lean_s1076 lean_s1134
let lean_s1136 := by timed congr lean_s1070 lean_s1135
let lean_s1137 := by timed congr lean_s1065 lean_s1136
let lean_s1138 := by timed congr lean_s1059 lean_s1137
let lean_s1139 := by timed congr lean_s1054 lean_s1138
let lean_s1140 := by timed congr lean_s1045 lean_s1139
let lean_s1141 := by timed congr lean_s1040 lean_s1140
let lean_s1142 := by timed congr lean_s1034 lean_s1141
let lean_s1143 := by timed congr lean_s1029 lean_s1142
let lean_s1144 := by timed congr lean_s1023 lean_s1143
let lean_s1145 := by timed congr lean_s1018 lean_s1144
let lean_s1146 := by timed congr lean_s1012 lean_s1145
let lean_s1147 := by timed congr lean_s1007 lean_s1146
let lean_s1148 := by timed congr lean_s1001 lean_s1147
let lean_s1149 := by timed congr lean_s996 lean_s1148
let lean_s1150 := by timed congr lean_s990 lean_s1149
let lean_s1151 := by timed congr lean_s962 lean_s1150
let lean_s1152 := by timed congr lean_s934 lean_s1151
let lean_s1153 := by timed congr lean_s906 lean_s1152
let lean_s1154 := by timed congr lean_s878 lean_s1153
let lean_s1155 := by timed congr lean_s850 lean_s1154
let lean_s1156 := by timed congr lean_s822 lean_s1155
let lean_s1157 := by timed congr lean_s806 lean_s1156
let lean_s1158 := by timed congr lean_s777 lean_s1157
let lean_s1159 := by timed congr lean_s761 lean_s1158
let lean_s1160 := by timed congr lean_s755 lean_s1159
let lean_s1161 := by timed congr lean_s746 lean_s1160
let lean_s1162 := by timed congr lean_s740 lean_s1161
let lean_s1163 := by timed congr lean_s733 lean_s1162
let lean_s1164 := by timed congr lean_s725 lean_s1163
let lean_s1165 := by timed congr lean_s716 lean_s1164
let lean_s1166 := by timed congr lean_s711 lean_s1165
let lean_s1167 := by timed congr lean_s706 lean_s1166
let lean_s1168 := by timed congr lean_s701 lean_s1167
let lean_s1169 := by timed congr lean_s696 lean_s1168
let lean_s1170 := by timed congr lean_s692 lean_s1169
let lean_s1171 := by timed congr lean_s687 lean_s1170
let lean_s1172 := by timed congr lean_s682 lean_s1171
let lean_s1173 := by timed congr lean_s677 lean_s1172
have lean_s1174 : (Eq let860 let941) := by timed congr lean_s672 lean_s1173
let lean_s1175 := by timed flipCongrArg lean_s1174 [Implies]
have lean_s1176 : let944 := by timed rfl
let lean_s1177 := by timed flipCongrArg lean_s697 [Eq]
have lean_s1178 : (Eq let150 let150) := by timed rfl
have lean_s1179 : (Eq let151 let274) := by timed congr lean_s1177 lean_s1178
have lean_s1180 : (Eq let797 let869) := by timed flipCongrArg lean_s1179 [Not]
let lean_s1181 := by timed congr lean_s1176 lean_s1180
let lean_s1182 := by timed flipCongrArg lean_s702 [Eq]
have lean_s1183 : (Eq let165 let165) := by timed rfl
have lean_s1184 : (Eq let166 let369) := by timed congr lean_s1182 lean_s1183
let lean_s1185 := by timed congr lean_s1176 lean_s1184
let lean_s1186 := by timed flipCongrArg lean_s678 [Eq]
have lean_s1187 : (Eq let191 let521) := by timed flipCongrArg lean_s726 [format]
have lean_s1188 : (Eq let192 let523) := by timed congr lean_s1186 lean_s1187
let lean_s1189 := by timed congr lean_s1176 lean_s1188
let lean_s1190 := by timed flipCongrArg lean_s683 [Eq]
let lean_s1191 := by timed flipCongrArg lean_s752 [HAdd.hAdd]
have lean_s1192 : (Eq let198 let717) := by timed congr lean_s1191 lean_s726
have lean_s1193 : (Eq let199 let867) := by timed flipCongrArg lean_s1192 [format]
have lean_s1194 : (Eq let200 let868) := by timed congr lean_s1190 lean_s1193
let lean_s1195 := by timed congr lean_s1176 lean_s1194
let lean_s1196 := by timed flipCongrArg lean_s688 [Eq]
let lean_s1197 := by timed flipCongrArg lean_s738 [HAdd.hAdd]
have lean_s1198 : (Eq let168 let712) := by timed congr lean_s1197 lean_s726
have lean_s1199 : (Eq let184 let865) := by timed flipCongrArg lean_s1198 [format]
have lean_s1200 : (Eq let185 let866) := by timed congr lean_s1196 lean_s1199
let lean_s1201 := by timed congr lean_s1176 lean_s1200
let lean_s1202 := by timed flipCongrArg lean_s693 [Eq]
let lean_s1203 := by timed flipCongrArg lean_s680 [HAdd.hAdd]
have lean_s1204 : (Eq let187 let348) := by timed congr lean_s1203 lean_s726
have lean_s1205 : (Eq let188 let863) := by timed flipCongrArg lean_s1204 [format]
have lean_s1206 : (Eq let189 let864) := by timed congr lean_s1202 lean_s1205
let lean_s1207 := by timed congr lean_s1201 lean_s1206
let lean_s1208 := by timed congr lean_s1195 lean_s1207
let lean_s1209 := by timed congr lean_s1189 lean_s1208
let lean_s1210 := by timed congr lean_s1185 lean_s1209
have lean_s1211 : (Eq let798 let870) := by timed congr lean_s1181 lean_s1210
have lean_s1212 : (Eq let861 let942) := by timed congr lean_s1175 lean_s1211
have lean_s1213 : (Eq let862 let943) := by timed flipCongrArg lean_s1212 [Not]
have lean_s1214 : let944 := by timed rfl
let lean_s1215 := by timed congr lean_s1214 lean_r64
let lean_s1216 := by timed congr lean_s1214 lean_r75
let lean_s1217 := by timed congr lean_s1214 lean_r61
let lean_s1218 := by timed congr lean_s1214 lean_r60
let lean_s1219 := by timed congr lean_s1214 lean_r44
let lean_s1220 := by timed congr lean_s1214 lean_r75
let lean_s1221 := by timed congr lean_s1214 lean_r185
let lean_s1222 := by timed congr lean_s1214 lean_r183
let lean_s1223 := by timed congr lean_s1214 lean_r180
let lean_s1224 := by timed congr lean_s1214 lean_r91
let lean_s1225 := by timed flipCongrArg lean_s638 [Eq]
have lean_s1226 : (Eq let940 let85) := by timed congr lean_s1225 lean_s603
have lean_s1227 : (Eq let940 True) := by timed Eq.trans lean_s1226 lean_r13
let lean_s1228 := by timed congr lean_s1214 lean_s1227
have lean_s1229 : (Eq let117 let117) := by timed rfl
have lean_s1230 : (Eq let116 let116) := by timed rfl
let lean_s1231 := by timed congrHAdd lean_s1230 lean_r128
let lean_s1232 := by timed congrHAdd lean_s1229 lean_s1231
have lean_s1233 : (Eq let325 let741) := by timed congrHAdd lean_s638 lean_s1232
have lean_s1234 : (Eq let325 let119) := by timed Eq.trans lean_s1233 lean_r235
have lean_s1235 : (Eq let326 let119) := by timed Eq.trans lean_r98 lean_s1234
let lean_s1236 := by timed flipCongrArg lean_s1235 [GE.ge]
have lean_s1237 : (Eq let938 let213) := by timed congr lean_s1236 lean_s600
have lean_s1238 : (Eq let938 let15) := by timed Eq.trans lean_s1237 lean_r52
let lean_s1239 := by timed congr lean_s1214 lean_s1238
let lean_s1240 := by timed flipCongrArg lean_r55 [GE.ge]
have lean_s1241 : let1005 := by timed rfl
have lean_s1242 : (Eq let937 let766) := by timed congr lean_s1240 lean_s1241
have lean_s1243 : (Eq let937 let374) := by timed Eq.trans lean_s1242 lean_r250
let lean_s1244 := by timed congr lean_s1214 lean_s1243
let lean_s1245 := by timed flipCongrArg lean_r137 [GE.ge]
have lean_s1246 : let1004 := by timed rfl
have lean_s1247 : (Eq let935 let236) := by timed congr lean_s1245 lean_s1246
have lean_s1248 : (Eq let935 let235) := by timed Eq.trans lean_s1247 lean_r62
have lean_s1249 : (Eq let936 let370) := by timed flipCongrArg lean_s1248 [Not]
have lean_s1250 : (Eq let936 let234) := by timed Eq.trans lean_s1249 lean_r117
let lean_s1251 := by timed congr lean_s1214 lean_s1250
have lean_s1252 : let239 := by timed rfl
let lean_s1253 := by timed congrHAdd lean_r19 lean_s1252
have lean_s1254 : (Eq let932 let388) := by timed congrHAdd lean_s638 lean_s1253
have lean_s1255 : (Eq let932 let115) := by timed Eq.trans lean_s1254 lean_r130
let lean_s1256 := by timed flipCongrArg lean_s1255 [GE.ge]
have lean_s1257 : let1003 := by timed rfl
have lean_s1258 : (Eq let933 let272) := by timed congr lean_s1256 lean_s1257
have lean_s1259 : (Eq let933 let271) := by timed Eq.trans lean_s1258 lean_r71
have lean_s1260 : (Eq let934 let527) := by timed flipCongrArg lean_s1259 [Not]
have lean_s1261 : (Eq let934 let15) := by timed Eq.trans lean_s1260 lean_r162
let lean_s1262 := by timed congr lean_s1214 lean_s1261
have lean_s1263 : let276 := by timed rfl
let lean_s1264 := by timed congrHAdd lean_s1252 lean_s1263
let lean_s1265 := by timed congrHAdd lean_r19 lean_s1264
have lean_s1266 : (Eq let930 let725) := by timed congrHAdd lean_s638 lean_s1265
have lean_s1267 : (Eq let930 let195) := by timed Eq.trans lean_s1266 lean_r222
let lean_s1268 := by timed flipCongrArg lean_s1267 [GE.ge]
have lean_s1269 : let197 := by timed rfl
have lean_s1270 : (Eq let931 let196) := by timed congr lean_s1268 lean_s1269
have lean_s1271 : (Eq let931 let194) := by timed Eq.trans lean_s1270 lean_r43
let lean_s1272 := by timed congr lean_s1214 lean_s1271
let lean_s1273 := by timed flipCongrArg lean_s638 [Eq]
let lean_s1274 := by timed congrHAdd lean_s647 lean_s650
let lean_s1275 := by timed congrHAdd lean_s1230 lean_s1274
let lean_s1276 := by timed congrHAdd lean_s1229 lean_s1275
have lean_s1277 : (Eq let493 let378) := by timed congrHAdd lean_s638 lean_s1276
have lean_s1278 : (Eq let493 let84) := by timed Eq.trans lean_s1277 lean_r121
have lean_s1279 : (Eq let494 let84) := by timed Eq.trans lean_r143 lean_s1278
have lean_s1280 : (Eq let929 let85) := by timed congr lean_s1273 lean_s1279
have lean_s1281 : (Eq let929 True) := by timed Eq.trans lean_s1280 lean_r13
let lean_s1282 := by timed congr lean_s1214 lean_s1281
have lean_s1283 : let971 := by timed rfl
let lean_s1284 := by timed congr lean_s1283 lean_r14
let lean_s1285 := by timed congr lean_s1283 lean_r155
let lean_s1286 := by timed congr lean_s1283 lean_r127
let lean_s1287 := by timed congr lean_s1283 lean_r126
let lean_s1288 := by timed congr lean_s1283 lean_r104
let lean_s1289 := by timed congr lean_s1288 lean_r129
let lean_s1290 := by timed congr lean_s1287 lean_s1289
let lean_s1291 := by timed congr lean_s1286 lean_s1290
let lean_s1292 := by timed congr lean_s1285 lean_s1291
have lean_s1293 : (Eq let928 let482) := by timed congr lean_s1284 lean_s1292
let lean_s1294 := by timed congr lean_s1214 lean_s1293
have lean_s1295 : let971 := by timed rfl
let lean_s1296 := by timed congr lean_s1295 lean_r65
have lean_s1297 : (Eq let119 let119) := by timed rfl
let lean_s1298 := by timed flipCongrArg lean_s1297 [Eq]
have lean_s1299 : (Eq let926 let289) := by timed congr lean_s1298 lean_r225
have lean_s1300 : (Eq let926 False) := by timed Eq.trans lean_s1299 lean_r83
let lean_s1301 := by timed congr lean_s1295 lean_s1300
let lean_s1302 := by timed flipCongrArg lean_s1297 [Eq]
have lean_s1303 : (Eq let925 let394) := by timed congr lean_s1302 lean_r124
have lean_s1304 : (Eq let925 False) := by timed Eq.trans lean_s1303 lean_r135
let lean_s1305 := by timed congr lean_s1301 lean_s1304
have lean_s1306 : (Eq let927 let379) := by timed congr lean_s1296 lean_s1305
have lean_s1307 : (Eq let927 let241) := by timed Eq.trans lean_s1306 lean_r122
let lean_s1308 := by timed congr lean_s1214 lean_s1307
have lean_s1309 : let971 := by timed rfl
let lean_s1310 := by timed congr lean_s1309 lean_r261
let lean_s1311 := by timed congr lean_s1309 lean_r100
let lean_s1312 := by timed congr lean_s1309 lean_r99
let lean_s1313 := by timed congr lean_s1309 lean_s190
let lean_s1314 := by timed congr lean_s1309 lean_s192
let lean_s1315 := by timed congr lean_s1309 lean_s194
let lean_s1316 := by timed congr lean_s1309 lean_s196
let lean_s1317 := by timed congr lean_s1316 lean_s198
let lean_s1318 := by timed congr lean_s1315 lean_s1317
let lean_s1319 := by timed congr lean_s1314 lean_s1318
let lean_s1320 := by timed congr lean_s1313 lean_s1319
let lean_s1321 := by timed congr lean_s1312 lean_s1320
let lean_s1322 := by timed congr lean_s1311 lean_s1321
have lean_s1323 : (Eq let924 let480) := by timed congr lean_s1310 lean_s1322
let lean_s1324 := by timed congr lean_s1214 lean_s1323
have lean_s1325 : let971 := by timed rfl
let lean_s1326 := by timed congr lean_s1325 lean_r171
let lean_s1327 := by timed congr lean_s1325 lean_r23
let lean_s1328 := by timed congr lean_s1325 lean_r257
let lean_s1329 := by timed congr lean_s1325 lean_s212
let lean_s1330 := by timed congr lean_s1325 lean_s214
let lean_s1331 := by timed congr lean_s1325 lean_s216
let lean_s1332 := by timed congr lean_s1325 lean_s218
let lean_s1333 := by timed congr lean_s1332 lean_s220
let lean_s1334 := by timed congr lean_s1331 lean_s1333
let lean_s1335 := by timed congr lean_s1330 lean_s1334
let lean_s1336 := by timed congr lean_s1329 lean_s1335
let lean_s1337 := by timed congr lean_s1328 lean_s1336
let lean_s1338 := by timed congr lean_s1327 lean_s1337
have lean_s1339 : (Eq let923 let479) := by timed congr lean_s1326 lean_s1338
let lean_s1340 := by timed congr lean_s1214 lean_s1339
have lean_s1341 : let971 := by timed rfl
let lean_s1342 := by timed congr lean_s1341 lean_r164
let lean_s1343 := by timed congr lean_s1341 lean_r240
let lean_s1344 := by timed congr lean_s1341 lean_r59
let lean_s1345 := by timed congr lean_s1341 lean_s234
let lean_s1346 := by timed congr lean_s1341 lean_s236
let lean_s1347 := by timed congr lean_s1341 lean_s238
let lean_s1348 := by timed congr lean_s1341 lean_s240
let lean_s1349 := by timed congr lean_s1348 lean_s242
let lean_s1350 := by timed congr lean_s1347 lean_s1349
let lean_s1351 := by timed congr lean_s1346 lean_s1350
let lean_s1352 := by timed congr lean_s1345 lean_s1351
let lean_s1353 := by timed congr lean_s1344 lean_s1352
let lean_s1354 := by timed congr lean_s1343 lean_s1353
have lean_s1355 : (Eq let922 let478) := by timed congr lean_s1342 lean_s1354
let lean_s1356 := by timed congr lean_s1214 lean_s1355
have lean_s1357 : let971 := by timed rfl
let lean_s1358 := by timed congr lean_s1357 lean_r67
let lean_s1359 := by timed congr lean_s1357 lean_r106
let lean_s1360 := by timed congr lean_s1357 lean_r93
let lean_s1361 := by timed congr lean_s1357 lean_s256
let lean_s1362 := by timed congr lean_s1357 lean_s258
let lean_s1363 := by timed congr lean_s1357 lean_s260
let lean_s1364 := by timed congr lean_s1357 lean_s262
let lean_s1365 := by timed congr lean_s1364 lean_s264
let lean_s1366 := by timed congr lean_s1363 lean_s1365
let lean_s1367 := by timed congr lean_s1362 lean_s1366
let lean_s1368 := by timed congr lean_s1361 lean_s1367
let lean_s1369 := by timed congr lean_s1360 lean_s1368
let lean_s1370 := by timed congr lean_s1359 lean_s1369
have lean_s1371 : (Eq let921 let471) := by timed congr lean_s1358 lean_s1370
let lean_s1372 := by timed congr lean_s1214 lean_s1371
have lean_s1373 : let971 := by timed rfl
let lean_s1374 := by timed congr lean_s1373 lean_r77
let lean_s1375 := by timed congr lean_s1373 lean_r120
let lean_s1376 := by timed congr lean_s1373 lean_r30
let lean_s1377 := by timed congr lean_s1373 lean_s278
let lean_s1378 := by timed congr lean_s1373 lean_s280
let lean_s1379 := by timed congr lean_s1373 lean_s282
let lean_s1380 := by timed congr lean_s1373 lean_s284
let lean_s1381 := by timed congr lean_s1380 lean_s286
let lean_s1382 := by timed congr lean_s1379 lean_s1381
let lean_s1383 := by timed congr lean_s1378 lean_s1382
let lean_s1384 := by timed congr lean_s1377 lean_s1383
let lean_s1385 := by timed congr lean_s1376 lean_s1384
let lean_s1386 := by timed congr lean_s1375 lean_s1385
have lean_s1387 : (Eq let920 let470) := by timed congr lean_s1374 lean_s1386
let lean_s1388 := by timed congr lean_s1214 lean_s1387
have lean_s1389 : let971 := by timed rfl
let lean_s1390 := by timed congr lean_s1389 lean_r79
let lean_s1391 := by timed congr lean_s1389 lean_r56
let lean_s1392 := by timed congr lean_s1389 lean_r109
let lean_s1393 := by timed congr lean_s1389 lean_s300
let lean_s1394 := by timed congr lean_s1389 lean_s302
let lean_s1395 := by timed congr lean_s1389 lean_s304
let lean_s1396 := by timed congr lean_s1389 lean_s306
let lean_s1397 := by timed congr lean_s1396 lean_s308
let lean_s1398 := by timed congr lean_s1395 lean_s1397
let lean_s1399 := by timed congr lean_s1394 lean_s1398
let lean_s1400 := by timed congr lean_s1393 lean_s1399
let lean_s1401 := by timed congr lean_s1392 lean_s1400
let lean_s1402 := by timed congr lean_s1391 lean_s1401
have lean_s1403 : (Eq let919 let463) := by timed congr lean_s1390 lean_s1402
let lean_s1404 := by timed congr lean_s1214 lean_s1403
let lean_s1405 := by timed flipCongrArg lean_r261 [And]
have lean_s1406 : (Eq let915 let453) := by timed congr lean_s1405 lean_r23
let lean_s1407 := by timed flipCongrArg lean_s1406 [Implies]
have lean_s1408 : (Eq let918 let456) := by timed congr lean_s1407 lean_s321
let lean_s1409 := by timed congr lean_s1214 lean_s1408
have lean_s1410 : (Eq let916 let454) := by timed flipCongrArg lean_s1406 [Not]
let lean_s1411 := by timed flipCongrArg lean_s1410 [Implies]
have lean_s1412 : (Eq let917 let455) := by timed congr lean_s1411 lean_s326
let lean_s1413 := by timed congr lean_s1214 lean_s1412
let lean_s1414 := by timed flipCongrArg lean_r171 [And]
have lean_s1415 : (Eq let911 let449) := by timed congr lean_s1414 lean_r240
let lean_s1416 := by timed flipCongrArg lean_s1415 [Implies]
have lean_s1417 : let966 := by timed rfl
have lean_s1418 : (Eq let914 let452) := by timed congr lean_s1416 lean_s1417
let lean_s1419 := by timed congr lean_s1214 lean_s1418
have lean_s1420 : (Eq let912 let450) := by timed flipCongrArg lean_s1415 [Not]
let lean_s1421 := by timed flipCongrArg lean_s1420 [Implies]
have lean_s1422 : let965 := by timed rfl
have lean_s1423 : (Eq let913 let451) := by timed congr lean_s1421 lean_s1422
let lean_s1424 := by timed congr lean_s1214 lean_s1423
let lean_s1425 := by timed flipCongrArg lean_r164 [And]
have lean_s1426 : (Eq let907 let125) := by timed congr lean_s1425 lean_r106
let lean_s1427 := by timed flipCongrArg lean_s1426 [Implies]
have lean_s1428 : let964 := by timed rfl
have lean_s1429 : (Eq let910 let447) := by timed congr lean_s1427 lean_s1428
let lean_s1430 := by timed congr lean_s1214 lean_s1429
have lean_s1431 : (Eq let908 let126) := by timed flipCongrArg lean_s1426 [Not]
let lean_s1432 := by timed flipCongrArg lean_s1431 [Implies]
have lean_s1433 : let963 := by timed rfl
have lean_s1434 : (Eq let909 let446) := by timed congr lean_s1432 lean_s1433
let lean_s1435 := by timed congr lean_s1214 lean_s1434
let lean_s1436 := by timed flipCongrArg lean_r67 [And]
have lean_s1437 : (Eq let903 let442) := by timed congr lean_s1436 lean_r120
let lean_s1438 := by timed flipCongrArg lean_s1437 [Implies]
have lean_s1439 : let962 := by timed rfl
have lean_s1440 : (Eq let906 let445) := by timed congr lean_s1438 lean_s1439
let lean_s1441 := by timed congr lean_s1214 lean_s1440
have lean_s1442 : (Eq let904 let443) := by timed flipCongrArg lean_s1437 [Not]
let lean_s1443 := by timed flipCongrArg lean_s1442 [Implies]
have lean_s1444 : let961 := by timed rfl
have lean_s1445 : (Eq let905 let444) := by timed congr lean_s1443 lean_s1444
let lean_s1446 := by timed congr lean_s1214 lean_s1445
let lean_s1447 := by timed flipCongrArg lean_r77 [And]
have lean_s1448 : (Eq let899 let437) := by timed congr lean_s1447 lean_r56
let lean_s1449 := by timed flipCongrArg lean_s1448 [Implies]
have lean_s1450 : let960 := by timed rfl
have lean_s1451 : (Eq let902 let441) := by timed congr lean_s1449 lean_s1450
let lean_s1452 := by timed congr lean_s1214 lean_s1451
have lean_s1453 : (Eq let900 let438) := by timed flipCongrArg lean_s1448 [Not]
let lean_s1454 := by timed flipCongrArg lean_s1453 [Implies]
have lean_s1455 : let959 := by timed rfl
have lean_s1456 : (Eq let901 let439) := by timed congr lean_s1454 lean_s1455
let lean_s1457 := by timed congr lean_s1214 lean_s1456
let lean_s1458 := by timed flipCongrArg lean_r79 [And]
have lean_s1459 : (Eq let895 let433) := by timed congr lean_s1458 lean_r114
let lean_s1460 := by timed flipCongrArg lean_s1459 [Implies]
have lean_s1461 : let958 := by timed rfl
have lean_s1462 : (Eq let898 let436) := by timed congr lean_s1460 lean_s1461
let lean_s1463 := by timed congr lean_s1214 lean_s1462
have lean_s1464 : (Eq let896 let434) := by timed flipCongrArg lean_s1459 [Not]
let lean_s1465 := by timed flipCongrArg lean_s1464 [Implies]
have lean_s1466 : let957 := by timed rfl
have lean_s1467 : (Eq let897 let435) := by timed congr lean_s1465 lean_s1466
let lean_s1468 := by timed congr lean_s1214 lean_s1467
let lean_s1469 := by timed flipCongrArg lean_r261 [And]
have lean_s1470 : (Eq let891 let428) := by timed congr lean_s1469 lean_r257
let lean_s1471 := by timed flipCongrArg lean_s1470 [Implies]
have lean_s1472 : (Eq let894 let431) := by timed congr lean_s1471 lean_s397
let lean_s1473 := by timed congr lean_s1214 lean_s1472
have lean_s1474 : (Eq let892 let429) := by timed flipCongrArg lean_s1470 [Not]
let lean_s1475 := by timed flipCongrArg lean_s1474 [Implies]
have lean_s1476 : (Eq let893 let430) := by timed congr lean_s1475 lean_s402
let lean_s1477 := by timed congr lean_s1214 lean_s1476
let lean_s1478 := by timed flipCongrArg lean_r171 [And]
have lean_s1479 : (Eq let887 let422) := by timed congr lean_s1478 lean_r59
let lean_s1480 := by timed flipCongrArg lean_s1479 [Implies]
have lean_s1481 : let954 := by timed rfl
have lean_s1482 : (Eq let890 let425) := by timed congr lean_s1480 lean_s1481
let lean_s1483 := by timed congr lean_s1214 lean_s1482
have lean_s1484 : (Eq let888 let423) := by timed flipCongrArg lean_s1479 [Not]
let lean_s1485 := by timed flipCongrArg lean_s1484 [Implies]
have lean_s1486 : let953 := by timed rfl
have lean_s1487 : (Eq let889 let424) := by timed congr lean_s1485 lean_s1486
let lean_s1488 := by timed congr lean_s1214 lean_s1487
let lean_s1489 := by timed flipCongrArg lean_r164 [And]
have lean_s1490 : (Eq let883 let417) := by timed congr lean_s1489 lean_r93
let lean_s1491 := by timed flipCongrArg lean_s1490 [Implies]
have lean_s1492 : let952 := by timed rfl
have lean_s1493 : (Eq let886 let420) := by timed congr lean_s1491 lean_s1492
let lean_s1494 := by timed congr lean_s1214 lean_s1493
have lean_s1495 : (Eq let884 let418) := by timed flipCongrArg lean_s1490 [Not]
let lean_s1496 := by timed flipCongrArg lean_s1495 [Implies]
have lean_s1497 : let951 := by timed rfl
have lean_s1498 : (Eq let885 let419) := by timed congr lean_s1496 lean_s1497
let lean_s1499 := by timed congr lean_s1214 lean_s1498
let lean_s1500 := by timed flipCongrArg lean_r67 [And]
have lean_s1501 : (Eq let879 let413) := by timed congr lean_s1500 lean_r30
let lean_s1502 := by timed flipCongrArg lean_s1501 [Implies]
have lean_s1503 : let950 := by timed rfl
have lean_s1504 : (Eq let882 let416) := by timed congr lean_s1502 lean_s1503
let lean_s1505 := by timed congr lean_s1214 lean_s1504
have lean_s1506 : (Eq let880 let414) := by timed flipCongrArg lean_s1501 [Not]
let lean_s1507 := by timed flipCongrArg lean_s1506 [Implies]
have lean_s1508 : let949 := by timed rfl
have lean_s1509 : (Eq let881 let415) := by timed congr lean_s1507 lean_s1508
let lean_s1510 := by timed congr lean_s1214 lean_s1509
let lean_s1511 := by timed flipCongrArg lean_r77 [And]
have lean_s1512 : (Eq let875 let409) := by timed congr lean_s1511 lean_r109
let lean_s1513 := by timed flipCongrArg lean_s1512 [Implies]
have lean_s1514 : let948 := by timed rfl
have lean_s1515 : (Eq let878 let412) := by timed congr lean_s1513 lean_s1514
let lean_s1516 := by timed congr lean_s1214 lean_s1515
have lean_s1517 : (Eq let876 let410) := by timed flipCongrArg lean_s1512 [Not]
let lean_s1518 := by timed flipCongrArg lean_s1517 [Implies]
have lean_s1519 : let947 := by timed rfl
have lean_s1520 : (Eq let877 let411) := by timed congr lean_s1518 lean_s1519
let lean_s1521 := by timed congr lean_s1214 lean_s1520
let lean_s1522 := by timed flipCongrArg lean_r79 [And]
have lean_s1523 : (Eq let871 let404) := by timed congr lean_s1522 lean_r46
let lean_s1524 := by timed flipCongrArg lean_s1523 [Implies]
have lean_s1525 : let946 := by timed rfl
have lean_s1526 : (Eq let874 let407) := by timed congr lean_s1524 lean_s1525
let lean_s1527 := by timed congr lean_s1214 lean_s1526
have lean_s1528 : (Eq let872 let405) := by timed flipCongrArg lean_s1523 [Not]
let lean_s1529 := by timed flipCongrArg lean_s1528 [Implies]
have lean_s1530 : let945 := by timed rfl
have lean_s1531 : (Eq let873 let406) := by timed congr lean_s1529 lean_s1530
let lean_s1532 := by timed congr lean_s1527 lean_s1531
let lean_s1533 := by timed congr lean_s1521 lean_s1532
let lean_s1534 := by timed congr lean_s1516 lean_s1533
let lean_s1535 := by timed congr lean_s1510 lean_s1534
let lean_s1536 := by timed congr lean_s1505 lean_s1535
let lean_s1537 := by timed congr lean_s1499 lean_s1536
let lean_s1538 := by timed congr lean_s1494 lean_s1537
let lean_s1539 := by timed congr lean_s1488 lean_s1538
let lean_s1540 := by timed congr lean_s1483 lean_s1539
let lean_s1541 := by timed congr lean_s1477 lean_s1540
let lean_s1542 := by timed congr lean_s1473 lean_s1541
let lean_s1543 := by timed congr lean_s1468 lean_s1542
let lean_s1544 := by timed congr lean_s1463 lean_s1543
let lean_s1545 := by timed congr lean_s1457 lean_s1544
let lean_s1546 := by timed congr lean_s1452 lean_s1545
let lean_s1547 := by timed congr lean_s1446 lean_s1546
let lean_s1548 := by timed congr lean_s1441 lean_s1547
let lean_s1549 := by timed congr lean_s1435 lean_s1548
let lean_s1550 := by timed congr lean_s1430 lean_s1549
let lean_s1551 := by timed congr lean_s1424 lean_s1550
let lean_s1552 := by timed congr lean_s1419 lean_s1551
let lean_s1553 := by timed congr lean_s1413 lean_s1552
let lean_s1554 := by timed congr lean_s1409 lean_s1553
let lean_s1555 := by timed congr lean_s1404 lean_s1554
let lean_s1556 := by timed congr lean_s1388 lean_s1555
let lean_s1557 := by timed congr lean_s1372 lean_s1556
let lean_s1558 := by timed congr lean_s1356 lean_s1557
let lean_s1559 := by timed congr lean_s1340 lean_s1558
let lean_s1560 := by timed congr lean_s1324 lean_s1559
let lean_s1561 := by timed congr lean_s1308 lean_s1560
let lean_s1562 := by timed congr lean_s1294 lean_s1561
let lean_s1563 := by timed congr lean_s1282 lean_s1562
let lean_s1564 := by timed congr lean_s1272 lean_s1563
let lean_s1565 := by timed congr lean_s1262 lean_s1564
let lean_s1566 := by timed congr lean_s1251 lean_s1565
let lean_s1567 := by timed congr lean_s1244 lean_s1566
let lean_s1568 := by timed congr lean_s1239 lean_s1567
let lean_s1569 := by timed congr lean_s1228 lean_s1568
let lean_s1570 := by timed congr lean_s1224 lean_s1569
let lean_s1571 := by timed congr lean_s1223 lean_s1570
let lean_s1572 := by timed congr lean_s1222 lean_s1571
let lean_s1573 := by timed congr lean_s1221 lean_s1572
let lean_s1574 := by timed congr lean_s1220 lean_s1573
let lean_s1575 := by timed congr lean_s1219 lean_s1574
let lean_s1576 := by timed congr lean_s1218 lean_s1575
let lean_s1577 := by timed congr lean_s1217 lean_s1576
let lean_s1578 := by timed congr lean_s1216 lean_s1577
have lean_s1579 : (Eq let941 let485) := by timed congr lean_s1215 lean_s1578
have lean_s1580 : (Eq let941 let484) := by timed Eq.trans lean_s1579 lean_r141
let lean_s1581 := by timed flipCongrArg lean_s1580 [Implies]
have lean_s1582 : let944 := by timed rfl
have lean_s1583 : (Eq let869 let793) := by timed flipCongrArg lean_r72 [Not]
let lean_s1584 := by timed congr lean_s1582 lean_s1583
let lean_s1585 := by timed congr lean_s1582 lean_r116
let lean_s1586 := by timed congr lean_s1582 lean_r160
let lean_s1587 := by timed flipCongrArg lean_s120 [Eq]
have lean_s1588 : let718 := by timed Eq.trans lean_r217 lean_r215
have lean_s1589 : (Eq let867 let343) := by timed flipCongrArg lean_s1588 [format]
have lean_s1590 : (Eq let868 let345) := by timed congr lean_s1587 lean_s1589
have lean_s1591 : (Eq let868 let344) := by timed Eq.trans lean_s1590 lean_r103
let lean_s1592 := by timed congr lean_s1582 lean_s1591
let lean_s1593 := by timed flipCongrArg lean_s1269 [Eq]
have lean_s1594 : let713 := by timed Eq.trans lean_r230 lean_r213
have lean_s1595 : (Eq let865 let307) := by timed flipCongrArg lean_s1594 [format]
have lean_s1596 : (Eq let866 let309) := by timed congr lean_s1593 lean_s1595
have lean_s1597 : (Eq let866 let308) := by timed Eq.trans lean_s1596 lean_r90
let lean_s1598 := by timed congr lean_s1582 lean_s1597
let lean_s1599 := by timed flipCongrArg lean_s1263 [Eq]
have lean_s1600 : let349 := by timed Eq.trans lean_r107 lean_r105
have lean_s1601 : (Eq let863 let293) := by timed flipCongrArg lean_s1600 [format]
have lean_s1602 : (Eq let864 let295) := by timed congr lean_s1599 lean_s1601
have lean_s1603 : (Eq let864 let294) := by timed Eq.trans lean_s1602 lean_r85
let lean_s1604 := by timed congr lean_s1598 lean_s1603
let lean_s1605 := by timed congr lean_s1592 lean_s1604
let lean_s1606 := by timed congr lean_s1586 lean_s1605
let lean_s1607 := by timed congr lean_s1585 lean_s1606
have lean_s1608 : (Eq let870 let794) := by timed congr lean_s1584 lean_s1607
have lean_s1609 : (Eq let942 let795) := by timed congr lean_s1581 lean_s1608
have lean_s1610 : (Eq let943 let796) := by timed flipCongrArg lean_s1609 [Not]
have lean_s1611 : (Eq let862 let796) := by timed Eq.trans lean_s1213 lean_s1610
have lean_s1612 : (Eq let792 let796) := by timed Eq.trans lean_s553 lean_s1611
have lean_s1613 : let796 := by timed eqResolve lean_a266 lean_s1612
have lean_s1614 : let484 := by timed notImplies1 lean_s1613
have lean_s1615 : let424 := by andElim lean_s1614, 27
have lean_s1616 : let1039 := by timed impliesElim lean_s1615
have lean_s1617 : let719 := by timed rfl
let lean_s1618 := by timed flipCongrArg lean_s1617 [Eq]
have lean_s1619 : (Eq let525 let719) := by timed congr lean_s1618 lean_r218
have lean_s1620 : (Eq let525 True) := by timed Eq.trans lean_s1619 lean_r216
have lean_s1621 : (Eq let526 True) := by timed Eq.trans lean_r161 lean_s1620
have lean_s1622 : let526 := by timed trueElim lean_s1621
let lean_s1623 := by timed flipCongrArg lean_s1622 [Or]
have lean_s1624 : let953 := by timed rfl
have lean_s1625 : (Eq let1039 let1038) := by timed congr lean_s1623 lean_s1624
have lean_s1626 : let1038 := by timed eqResolve lean_s1616 lean_s1625
have lean_s1627 : (Or let24 let422) := by permutateOr lean_s1626, [1, 0], (- 1)
have lean_s1628 : (Or let423 let421) := by timed @cnfAndPos [let421, let230] 0
have lean_s1629 : (Or let421 let423) := by permutateOr lean_s1628, [1, 0], (- 1)
have lean_s1630 : let1305 :=
  (scope (fun lean_a289 : let135 =>
    have lean_s1630 : let1305 :=
      (scope (fun lean_a290 : let135 =>
        have lean_s1630 : let136 := by timed Eq.symm lean_a290
        have lean_s1631 : let135 := by timed Eq.symm lean_s1630
        let lean_s1632 := by timed flipCongrArg lean_s1631 [Eq]
        have lean_s1633 : let580 := by timed rfl
        have lean_s1634 : (Eq let421 let499) := by timed congr lean_s1632 lean_s1633
        have lean_s1635 : (Eq let711 let589) := by timed flipCongrArg lean_r147 [Not]
        have lean_s1636 : (Eq let711 True) := by timed Eq.trans lean_s1635 lean_r189
        have lean_s1637 : (Eq let500 True) := by timed Eq.trans lean_r212 lean_s1636
        have lean_s1638 : let500 := by timed trueElim lean_s1637
        have lean_s1639 : let1032 := by timed Eq.trans lean_s1634 lean_s1638
        have lean_s1640 : let1029 := by timed falseElim lean_s1639
        show let1029 from lean_s1640
      ))
    have lean_s1631 : let1306 := by liftOrNToImp lean_s1630, 1
    have lean_s1632 : let1029 := by timed modusPonens lean_a289 lean_s1631
    show let1029 from lean_s1632
  ))
have lean_s1631 : let1306 := by liftOrNToImp lean_s1630, 1
have lean_s1632 : let1305 := by timed impliesElim lean_s1631
have lean_s1633 : (Or let1029 let1026) := by permutateOr lean_s1632, [1, 0], (- 1)
have lean_s1634 : (Or let454 let135) := by timed @cnfAndPos [let427, let135] 1
have lean_s1635 : (Or let135 let454) := by permutateOr lean_s1634, [1, 0], (- 1)
have lean_s1636 : let455 := by andElim lean_s1614, 13
have lean_s1637 : let1034 := by timed impliesElim lean_s1636
have lean_s1638 : let707 := by timed rfl
let lean_s1639 := by timed flipCongrArg lean_s1638 [Eq]
have lean_s1640 : (Eq let610 let707) := by timed congr lean_s1639 lean_r211
have lean_s1641 : (Eq let610 True) := by timed Eq.trans lean_s1640 lean_r208
have lean_s1642 : (Eq let611 True) := by timed Eq.trans lean_r198 lean_s1641
have lean_s1643 : let611 := by timed trueElim lean_s1642
let lean_s1644 := by timed flipCongrArg lean_s1643 [Or]
have lean_s1645 : let967 := by timed rfl
have lean_s1646 : (Eq let1034 let1033) := by timed congr lean_s1644 lean_s1645
have lean_s1647 : let1033 := by timed eqResolve lean_s1637 lean_s1646
have lean_s1648 : (Or let54 let453) := by permutateOr lean_s1647, [1, 0], (- 1)
have lean_s1649 : (Or let1035 (Or let1114 (Or let1042 (Or let1263 let1228)))) :=
  (scope (fun lean_a290 : let54 =>
    (scope (fun lean_a291 : let34 =>
      (scope (fun lean_a292 : let32 =>
        (scope (fun lean_a293 : let77 =>
          (scope (fun lean_a294 : let15 =>
            (scope (fun lean_a295 : let49 =>
              have lean_s1649 : let1235 := by timed Eq.symm lean_r192
              have lean_s1650 : let594 := by timed eqResolve lean_a295 lean_s1649
              have lean_s1651 : let1270 := by timed And.intro lean_a293 lean_a291
              have lean_s1652 : let1272 :=
                (scope (fun lean_a292 : let77 =>
                  (scope (fun lean_a293 : let34 =>
                    have lean_s1652 : let1152 := by timed Eq.symm lean_a293
                    have lean_s1653 : (Eq let76 let23) := by timed Eq.symm lean_a292
                    have lean_s1654 : let77 := by timed Eq.symm lean_s1653
                    have lean_s1655 : let787 := by timed Eq.trans lean_s1652 lean_s1654
                    show let787 from lean_s1655
                ))))
              have lean_s1653 : let1271 := by liftOrNToImp lean_s1652, 2
              have lean_s1654 : let787 := by timed modusPonens lean_s1651 lean_s1653
              have lean_s1655 : let1269 :=
                (scope (fun lean_a292 : let787 =>
                  have lean_s1655 : let786 := by timed eqResolve lean_a292 lean_r264
                  have lean_s1656 : let1265 := by timed Eq.symm lean_s1655
                  show let1265 from lean_s1656
                ))
              have lean_s1656 : let1268 := by liftOrNToImp lean_s1655, 1
              have lean_s1657 : let1265 := by timed modusPonens lean_s1654 lean_s1656
              have lean_s1658 : let1304 := by timed And.intro lean_s1650 lean_s1657
              have lean_s1659 : (Or let1231 let1267) :=
                (scope (fun lean_a293 : let594 =>
                  (scope (fun lean_a294 : let1265 =>
                    have lean_s1659 : let786 := by timed Eq.symm lean_a294
                    have lean_s1660 : let1265 := by timed Eq.symm lean_s1659
                    have lean_s1661 : let1234 := by timed Eq.symm lean_a293
                    have lean_s1662 : let594 := by timed Eq.symm lean_s1661
                    have lean_s1663 : let1237 := by timed flipCongrArg lean_s1662 [xx5fcount]
                    have lean_s1664 : let1060 := by timed Eq.trans lean_s1660 lean_s1663
                    show let1060 from lean_s1664
                ))))
              have lean_s1660 : (Implies let1304 let1060) := by liftOrNToImp lean_s1659, 2
              have lean_s1661 : let1060 := by timed modusPonens lean_s1658 lean_s1660
              let lean_s1662 := by timed And.intro lean_a292 lean_a290
              have lean_s1663 : let1229 := by timed And.intro lean_s1650 lean_s1662
              have lean_s1664 : let1232 :=
                (scope (fun lean_a294 : let594 =>
                  (scope (fun lean_a295 : let32 =>
                    (scope (fun lean_a296 : let54 =>
                      have lean_s1664 : let1098 := by timed Eq.symm lean_a296
                      have lean_s1665 : let486 := by timed Eq.symm lean_a295
                      have lean_s1666 : let32 := by timed Eq.symm lean_s1665
                      let lean_s1667 := by timed Eq.trans lean_s1664 lean_s1666
                      have lean_s1668 : let1234 := by timed Eq.symm lean_a294
                      have lean_s1669 : let594 := by timed Eq.symm lean_s1668
                      have lean_s1670 : let1233 := by timed flipCongrArg lean_s1669 [sx5fcount]
                      have lean_s1671 : let1121 := by timed Eq.trans lean_s1667 lean_s1670
                      show let1121 from lean_s1671
                ))))))
              have lean_s1665 : let1230 := by liftOrNToImp lean_s1664, 3
              have lean_s1666 : let1121 := by timed modusPonens lean_s1663 lean_s1665
              let lean_s1667 := by timed And.intro lean_s1661 lean_s1666
              have lean_s1668 : let1155 := by timed And.intro lean_a294 lean_s1667
              show let1155 from lean_s1668
  ))))))))))))
have lean_s1650 : let1303 := by liftOrNToImp lean_s1649, 6
have lean_s1651 : (Eq let546 let546) := by timed rfl
let lean_s1652 := by timed flipCongrArg lean_s1651 [Implies]
have lean_s1653 : (Or let271 (Or let1065 let1126)) :=
  (scope (fun lean_a294 : let15 =>
    (scope (fun lean_a295 : let1060 =>
      (scope (fun lean_a296 : let1121 =>
        have lean_s1653 : let1128 := by timed Eq.symm lean_a296
        have lean_s1654 : let1130 :=
          (scope (fun lean_a296 : let1128 =>
            have lean_s1654 : let498 := by timed trueElim lean_r146
            have lean_s1655 : let1139 := by timed And.intro lean_s1654 lean_a296
            have lean_s1656 : let1140 := by arithMulPos [let13, let22, let65], 4
            have lean_s1657 : let1138 := by timed modusPonens lean_s1655 lean_s1656
            have lean_s1658 : let1077 := by timed Eq.symm lean_a295
            have lean_s1659 : let1078 := by timed And.intro lean_s1654 lean_s1658
            have lean_s1660 : let1079 := by arithMulPos [let12, let18, let65], 4
            have lean_s1661 : let1076 := by timed modusPonens lean_s1659 lean_s1660
            have lean_s1662 : let733 := by timed trueElim lean_r228
            have lean_s1663 : let1074 := by timed And.intro lean_s1662 lean_a294
            have lean_s1664 : let1075 := by arithMulNeg [let14, let7, let285], 3
            have lean_s1665 : let1073 := by timed modusPonens lean_s1663 lean_s1664
            have lean_s1666 : let1159 := by sumBounds [lean_s1657, lean_s1661, lean_s1665]
            let lean_s1667 := by timed congrHAdd lean_r7 lean_r205
            have lean_s1668 : (Eq let1071 let709) := by timed congrHAdd lean_r227 lean_s1667
            have lean_s1669 : (Eq let1071 let4) := by timed Eq.trans lean_s1668 lean_r209
            let lean_s1670 := by timed flipCongrArg lean_s1669 [LE.le]
            let lean_s1671 := by timed congrHAdd lean_r74 lean_r80
            have lean_s1672 : (Eq let1158 let737) := by timed congrHAdd lean_r241 lean_s1671
            have lean_s1673 : (Eq let1158 let736) := by timed Eq.trans lean_s1672 lean_r231
            have lean_s1674 : (Eq let1159 let758) := by timed congr lean_s1670 lean_s1673
            have lean_s1675 : (Eq let1159 False) := by timed Eq.trans lean_s1674 lean_r246
            show False from by timed eqResolve lean_s1666 lean_s1675
          ))
        have lean_s1655 : let1129 := by liftOrNToNeg lean_s1654
        show False from by timed contradiction lean_s1653 lean_s1655
  ))))))
have lean_s1654 : (Not let1155) := by liftOrNToNeg lean_s1653
have lean_s1655 : let1157 := by timed falseIntro lean_s1654
have lean_s1656 : (Eq let1303 let548) := by timed congr lean_s1652 lean_s1655
have lean_s1657 : (Eq let1303 let547) := by timed Eq.trans lean_s1656 lean_r169
have lean_s1658 : let547 := by timed eqResolve lean_s1650 lean_s1657
have lean_s1659 : (Or let1035 (Or let1114 (Or let1042 (Or let1263 let1224)))) := by timed flipNotAnd lean_s1658 [let54, let34, let32, let77, let15, let49]
have lean_s1660 : (Or let271 (Or let1223 (Or let1035 (Or let1042 (Or let1114 let1263))))) := by permutateOr lean_s1659, [4, 5, 0, 2, 1, 3], (- 1)
have lean_s1661 : let430 := by andElim lean_s1614, 25
have lean_s1662 : let1154 := by timed impliesElim lean_s1661
have lean_s1663 : let753 := by timed rfl
let lean_s1664 := by timed flipCongrArg lean_s1663 [Eq]
have lean_s1665 : (Eq let710 let753) := by timed congr lean_s1664 lean_r207
have lean_s1666 : (Eq let710 True) := by timed Eq.trans lean_s1665 lean_r242
have lean_s1667 : (Eq let706 True) := by timed Eq.trans lean_r210 lean_s1666
have lean_s1668 : let706 := by timed trueElim lean_s1667
let lean_s1669 := by timed flipCongrArg lean_s1668 [Or]
have lean_s1670 : let955 := by timed rfl
have lean_s1671 : (Eq let1154 let1153) := by timed congr lean_s1669 lean_s1670
have lean_s1672 : let1153 := by timed eqResolve lean_s1662 lean_s1671
have lean_s1673 : (Or let34 let428) := by permutateOr lean_s1672, [1, 0], (- 1)
have lean_s1674 : (Or let1035 (Or let1025 (Or let1042 (Or let1040 let1228)))) :=
  (scope (fun lean_a297 : let54 =>
    (scope (fun lean_a298 : let157 =>
      (scope (fun lean_a299 : let32 =>
        (scope (fun lean_a300 : let24 =>
          (scope (fun lean_a301 : let15 =>
            (scope (fun lean_a302 : let49 =>
              have lean_s1674 : let1235 := by timed Eq.symm lean_r192
              have lean_s1675 : let594 := by timed eqResolve lean_a302 lean_s1674
              let lean_s1676 := by timed And.intro lean_a300 lean_a298
              have lean_s1677 : let1236 := by timed And.intro lean_s1675 lean_s1676
              have lean_s1678 : (Or let1231 let1104) :=
                (scope (fun lean_a298 : let594 =>
                  (scope (fun lean_a299 : let24 =>
                    (scope (fun lean_a300 : let157 =>
                      have lean_s1678 : let1107 := by timed Eq.symm lean_a300
                      have lean_s1679 : let593 := by timed Eq.symm lean_a299
                      have lean_s1680 : let24 := by timed Eq.symm lean_s1679
                      let lean_s1681 := by timed Eq.trans lean_s1678 lean_s1680
                      have lean_s1682 : let1234 := by timed Eq.symm lean_a298
                      have lean_s1683 : let594 := by timed Eq.symm lean_s1682
                      have lean_s1684 : let1237 := by timed flipCongrArg lean_s1683 [xx5fcount]
                      have lean_s1685 : let1060 := by timed Eq.trans lean_s1681 lean_s1684
                      show let1060 from lean_s1685
                ))))))
              have lean_s1679 : (Implies let1236 let1060) := by liftOrNToImp lean_s1678, 3
              have lean_s1680 : let1060 := by timed modusPonens lean_s1677 lean_s1679
              let lean_s1681 := by timed And.intro lean_a299 lean_a297
              have lean_s1682 : let1229 := by timed And.intro lean_s1675 lean_s1681
              have lean_s1683 : let1232 :=
                (scope (fun lean_a298 : let594 =>
                  (scope (fun lean_a299 : let32 =>
                    (scope (fun lean_a300 : let54 =>
                      have lean_s1683 : let1098 := by timed Eq.symm lean_a300
                      have lean_s1684 : let486 := by timed Eq.symm lean_a299
                      have lean_s1685 : let32 := by timed Eq.symm lean_s1684
                      let lean_s1686 := by timed Eq.trans lean_s1683 lean_s1685
                      have lean_s1687 : let1234 := by timed Eq.symm lean_a298
                      have lean_s1688 : let594 := by timed Eq.symm lean_s1687
                      have lean_s1689 : let1233 := by timed flipCongrArg lean_s1688 [sx5fcount]
                      have lean_s1690 : let1121 := by timed Eq.trans lean_s1686 lean_s1689
                      show let1121 from lean_s1690
                ))))))
              have lean_s1684 : let1230 := by liftOrNToImp lean_s1683, 3
              have lean_s1685 : let1121 := by timed modusPonens lean_s1682 lean_s1684
              let lean_s1686 := by timed And.intro lean_s1680 lean_s1685
              have lean_s1687 : let1155 := by timed And.intro lean_a301 lean_s1686
              show let1155 from lean_s1687
  ))))))))))))
have lean_s1675 : let1227 := by liftOrNToImp lean_s1674, 6
have lean_s1676 : (Eq let158 let158) := by timed rfl
let lean_s1677 := by timed flipCongrArg lean_s1676 [Implies]
have lean_s1678 : let1157 := by timed falseIntro lean_s1654
have lean_s1679 : (Eq let1227 let160) := by timed congr lean_s1677 lean_s1678
have lean_s1680 : (Eq let1227 let159) := by timed Eq.trans lean_s1679 lean_r31
have lean_s1681 : let159 := by timed eqResolve lean_s1675 lean_s1680
have lean_s1682 : (Or let1035 (Or let1025 let1226)) := by timed flipNotAnd lean_s1681 [let54, let157, let32, let24, let15, let49]
have lean_s1683 : (Or let271 (Or let1223 let1043)) := by permutateOr lean_s1682, [4, 5, 0, 2, 1, 3], (- 1)
have lean_s1684 : let15 := by andElim lean_s1614, 0
let lean_s1685 := by R2 lean_s1683, lean_s1684, let15, [(- 1), 0]
let lean_s1686 := by R2 lean_s1685, lean_s39, let49, [(- 1), (- 1)]
have lean_s1687 : (Or let1214 (Or let235 let297)) := by timed cnfAndNeg [let234, let296]
have lean_s1688 : let1213 :=
  (scope (fun lean_a298 : let234 =>
    (scope (fun lean_a299 : let296 =>
      have lean_s1688 : let1214 := by timed And.intro lean_a298 lean_a299
      have lean_s1689 : let1213 :=
        (scope (fun lean_a300 : let234 =>
          (scope (fun lean_a301 : let296 =>
            have lean_s1689 : (binrel% GT.gt fmt1 let9) := by trichotomy lean_a300, lean_a301
            have lean_s1690 : let1192 := by intTightLb lean_s1689
            show let1192 from lean_s1690
        ))))
      have lean_s1690 : let1215 := by liftOrNToImp lean_s1689, 2
      have lean_s1691 : let1192 := by timed modusPonens lean_s1688 lean_s1690
      show let1192 from lean_s1691
  ))))
have lean_s1689 : let1215 := by liftOrNToImp lean_s1688, 2
have lean_s1690 : (Or (Not let1214) let1192) := by timed impliesElim lean_s1689
have lean_s1691 : let1213 := by R1 lean_s1687, lean_s1690, let1214, [(- 1), (- 1)]
have lean_s1692 : let971 := by timed rfl
have lean_s1693 : (Eq let235 let235) := by timed rfl
let lean_s1694 := by timed congr lean_s1692 lean_s1693
have lean_s1695 : let722 := by timed rfl
let lean_s1696 := by timed flipCongrArg lean_s1695 [Eq]
have lean_s1697 : (Eq let298 let722) := by timed congr lean_s1696 lean_r223
have lean_s1698 : (Eq let298 True) := by timed Eq.trans lean_s1697 lean_r220
have lean_s1699 : (Eq let299 True) := by timed Eq.trans lean_r86 lean_s1698
have lean_s1700 : let299 := by timed trueElim lean_s1699
let lean_s1701 := by timed congr lean_s1692 lean_s1700
have lean_s1702 : (Eq let1192 let1192) := by timed rfl
let lean_s1703 := by timed congr lean_s1701 lean_s1702
have lean_s1704 : (Eq let1213 let1212) := by timed congr lean_s1694 lean_s1703
have lean_s1705 : let1212 := by timed eqResolve lean_s1691 lean_s1704
have lean_s1706 : (Or let1035 (Or let1025 (Or let271 (Or let296 let1155)))) :=
  (scope (fun lean_a300 : let54 =>
    (scope (fun lean_a301 : let157 =>
      (scope (fun lean_a302 : let15 =>
        (scope (fun lean_a303 : let214 =>
          have lean_s1706 : let1203 := by timed Eq.symm lean_r127
          have lean_s1707 : let385 := by timed eqResolve lean_a303 lean_s1706
          have lean_s1708 : let1211 := by timed And.intro lean_s1707 lean_a301
          have lean_s1709 : (Or let1199 let1103) :=
            (scope (fun lean_a301 : let385 =>
              (scope (fun lean_a302 : let157 =>
                have lean_s1709 : let1107 := by timed Eq.symm lean_a302
                have lean_s1710 : let1202 := by timed Eq.symm lean_a301
                have lean_s1711 : let385 := by timed Eq.symm lean_s1710
                have lean_s1712 : let1207 := by timed flipCongrArg lean_s1711 [xx5fcount]
                have lean_s1713 : let1060 := by timed Eq.trans lean_s1709 lean_s1712
                show let1060 from lean_s1713
            ))))
          have lean_s1710 : (Implies let1211 let1060) := by liftOrNToImp lean_s1709, 2
          have lean_s1711 : let1060 := by timed modusPonens lean_s1708 lean_s1710
          have lean_s1712 : let1197 := by timed And.intro lean_s1707 lean_a300
          have lean_s1713 : let1200 :=
            (scope (fun lean_a302 : let385 =>
              (scope (fun lean_a303 : let54 =>
                have lean_s1713 : let1098 := by timed Eq.symm lean_a303
                have lean_s1714 : let1202 := by timed Eq.symm lean_a302
                have lean_s1715 : let385 := by timed Eq.symm lean_s1714
                have lean_s1716 : let1201 := by timed flipCongrArg lean_s1715 [sx5fcount]
                have lean_s1717 : let1121 := by timed Eq.trans lean_s1713 lean_s1716
                show let1121 from lean_s1717
            ))))
          have lean_s1714 : let1198 := by liftOrNToImp lean_s1713, 2
          have lean_s1715 : let1121 := by timed modusPonens lean_s1712 lean_s1714
          let lean_s1716 := by timed And.intro lean_s1711 lean_s1715
          have lean_s1717 : let1155 := by timed And.intro lean_a302 lean_s1716
          show let1155 from lean_s1717
  ))))))))
have lean_s1707 : let1210 := by liftOrNToImp lean_s1706, 4
have lean_s1708 : (Eq let541 let541) := by timed rfl
let lean_s1709 := by timed flipCongrArg lean_s1708 [Implies]
have lean_s1710 : let1157 := by timed falseIntro lean_s1654
have lean_s1711 : (Eq let1210 let543) := by timed congr lean_s1709 lean_s1710
have lean_s1712 : (Eq let1210 let542) := by timed Eq.trans lean_s1711 lean_r167
have lean_s1713 : let542 := by timed eqResolve lean_s1707 lean_s1712
have lean_s1714 : (Or let1035 (Or let1025 let1194)) := by timed flipNotAnd lean_s1713 [let54, let157, let15, let214]
have lean_s1715 : (Or let271 (Or let296 (Or let1035 let1025))) := by permutateOr lean_s1714, [2, 3, 0, 1], (- 1)
let lean_s1716 := by R2 lean_s1715, lean_s1684, let15, [(- 1), 0]
let lean_s1717 := by R2 lean_s1716, lean_s1648, let54, [(- 1), (- 1)]
let lean_s1718 := by R1 lean_s1717, lean_s1635, let453, [(- 1), (- 1)]
have lean_s1719 : let1027 :=
  (scope (fun lean_a302 : let135 =>
    have lean_s1719 : let1027 :=
      (scope (fun lean_a302 : let135 =>
        have lean_s1719 : let136 := by timed Eq.symm lean_a302
        have lean_s1720 : let135 := by timed Eq.symm lean_s1719
        let lean_s1721 := by timed flipCongrArg lean_s1720 [Eq]
        have lean_s1722 : let573 := by timed rfl
        have lean_s1723 : (Eq let426 let599) := by timed congr lean_s1721 lean_s1722
        have lean_s1724 : (Eq let600 let589) := by timed flipCongrArg lean_r206 [Not]
        have lean_s1725 : (Eq let600 True) := by timed Eq.trans lean_s1724 lean_r189
        have lean_s1726 : (Eq let601 True) := by timed Eq.trans lean_r195 lean_s1725
        have lean_s1727 : let601 := by timed trueElim lean_s1726
        have lean_s1728 : (Eq let426 False) := by timed Eq.trans lean_s1723 lean_s1727
        have lean_s1729 : let1024 := by timed falseElim lean_s1728
        show let1024 from lean_s1729
      ))
    have lean_s1720 : let1028 := by liftOrNToImp lean_s1719, 1
    have lean_s1721 : let1024 := by timed modusPonens lean_a302 lean_s1720
    show let1024 from lean_s1721
  ))
have lean_s1720 : let1028 := by liftOrNToImp lean_s1719, 1
have lean_s1721 : let1027 := by timed impliesElim lean_s1720
let lean_s1722 := by R1 lean_s1718, lean_s1721, let135, [(- 1), (- 1)]
have lean_s1723 : let431 := by andElim lean_s1614, 24
have lean_s1724 : (Or let429 let157) := by timed impliesElim lean_s1723
have lean_s1725 : (Or let157 let429) := by permutateOr lean_s1724, [1, 0], (- 1)
let lean_s1726 := by R2 lean_s1722, lean_s1725, let157, [(- 1), (- 1)]
have lean_s1727 : (Or let429 let426) := by timed @cnfAndPos [let427, let426] 1
have lean_s1728 : (Or let426 let429) := by permutateOr lean_s1727, [1, 0], (- 1)
have lean_s1729 : (Or let296 let1023) := by R2 lean_s1726, lean_s1728, let426, [(- 1), (- 1)]
have lean_s1730 : (Or let296 let429) := by factor lean_s1729, (- 1)
let lean_s1731 := by R2 lean_s1730, lean_s1673, let428, [(- 1), (- 1)]
have lean_s1732 : (Or let1162 (Or let1114 (Or let271 (Or let296 let1163)))) :=
  (scope (fun lean_a302 : let36 =>
    (scope (fun lean_a303 : let34 =>
      (scope (fun lean_a304 : let15 =>
        (scope (fun lean_a305 : let214 =>
          have lean_s1732 : let1203 := by timed Eq.symm lean_r127
          have lean_s1733 : let385 := by timed eqResolve lean_a305 lean_s1732
          have lean_s1734 : let1204 := by timed And.intro lean_s1733 lean_a303
          have lean_s1735 : let1206 :=
            (scope (fun lean_a302 : let385 =>
              (scope (fun lean_a303 : let34 =>
                have lean_s1735 : let1152 := by timed Eq.symm lean_a303
                have lean_s1736 : let1202 := by timed Eq.symm lean_a302
                have lean_s1737 : let385 := by timed Eq.symm lean_s1736
                have lean_s1738 : let1207 := by timed flipCongrArg lean_s1737 [xx5fcount]
                have lean_s1739 : let1122 := by timed Eq.trans lean_s1735 lean_s1738
                show let1122 from lean_s1739
            ))))
          have lean_s1736 : let1205 := by liftOrNToImp lean_s1735, 2
          have lean_s1737 : let1122 := by timed modusPonens lean_s1734 lean_s1736
          have lean_s1738 : let1209 := by timed And.intro lean_s1733 lean_a302
          have lean_s1739 : (Or let1199 let1173) :=
            (scope (fun lean_a302 : let385 =>
              (scope (fun lean_a303 : let36 =>
                have lean_s1739 : let1176 := by timed Eq.symm lean_a303
                have lean_s1740 : let1202 := by timed Eq.symm lean_a302
                have lean_s1741 : let385 := by timed Eq.symm lean_s1740
                have lean_s1742 : let1201 := by timed flipCongrArg lean_s1741 [sx5fcount]
                have lean_s1743 : let1059 := by timed Eq.trans lean_s1739 lean_s1742
                show let1059 from lean_s1743
            ))))
          have lean_s1740 : (Implies let1209 let1059) := by liftOrNToImp lean_s1739, 2
          have lean_s1741 : let1059 := by timed modusPonens lean_s1738 lean_s1740
          let lean_s1742 := by timed And.intro lean_s1737 lean_s1741
          have lean_s1743 : let1163 := by timed And.intro lean_a304 lean_s1742
          show let1163 from lean_s1743
  ))))))))
have lean_s1733 : let1208 := by liftOrNToImp lean_s1732, 4
have lean_s1734 : (Eq let217 let217) := by timed rfl
let lean_s1735 := by timed flipCongrArg lean_s1734 [Implies]
have lean_s1736 : let1165 := by timed falseIntro lean_s5
have lean_s1737 : (Eq let1208 let219) := by timed congr lean_s1735 lean_s1736
have lean_s1738 : (Eq let1208 let218) := by timed Eq.trans lean_s1737 lean_r53
have lean_s1739 : let218 := by timed eqResolve lean_s1733 lean_s1738
have lean_s1740 : (Or let1162 let1195) := by timed flipNotAnd lean_s1739 [let36, let34, let15, let214]
have lean_s1741 : (Or let271 (Or let296 (Or let1162 let1114))) := by permutateOr lean_s1740, [2, 3, 0, 1], (- 1)
let lean_s1742 := by R2 lean_s1741, lean_s1684, let15, [(- 1), 0]
have lean_s1743 : let456 := by andElim lean_s1614, 12
have lean_s1744 : (Or let454 let36) := by timed impliesElim lean_s1743
have lean_s1745 : (Or let36 let454) := by permutateOr lean_s1744, [1, 0], (- 1)
let lean_s1746 := by R2 lean_s1742, lean_s1745, let36, [(- 1), (- 1)]
let lean_s1747 := by R2 lean_s1746, lean_s1648, let453, [(- 1), (- 1)]
have lean_s1748 : (Or let1035 (Or let1114 (Or let271 (Or let296 let1123)))) :=
  (scope (fun lean_a302 : let54 =>
    (scope (fun lean_a303 : let34 =>
      (scope (fun lean_a304 : let15 =>
        (scope (fun lean_a305 : let214 =>
          have lean_s1748 : let1203 := by timed Eq.symm lean_r127
          have lean_s1749 : let385 := by timed eqResolve lean_a305 lean_s1748
          have lean_s1750 : let1204 := by timed And.intro lean_s1749 lean_a303
          have lean_s1751 : let1206 :=
            (scope (fun lean_a302 : let385 =>
              (scope (fun lean_a303 : let34 =>
                have lean_s1751 : let1152 := by timed Eq.symm lean_a303
                have lean_s1752 : let1202 := by timed Eq.symm lean_a302
                have lean_s1753 : let385 := by timed Eq.symm lean_s1752
                have lean_s1754 : let1207 := by timed flipCongrArg lean_s1753 [xx5fcount]
                have lean_s1755 : let1122 := by timed Eq.trans lean_s1751 lean_s1754
                show let1122 from lean_s1755
            ))))
          have lean_s1752 : let1205 := by liftOrNToImp lean_s1751, 2
          have lean_s1753 : let1122 := by timed modusPonens lean_s1750 lean_s1752
          have lean_s1754 : let1197 := by timed And.intro lean_s1749 lean_a302
          have lean_s1755 : let1200 :=
            (scope (fun lean_a302 : let385 =>
              (scope (fun lean_a303 : let54 =>
                have lean_s1755 : let1098 := by timed Eq.symm lean_a303
                have lean_s1756 : let1202 := by timed Eq.symm lean_a302
                have lean_s1757 : let385 := by timed Eq.symm lean_s1756
                have lean_s1758 : let1201 := by timed flipCongrArg lean_s1757 [sx5fcount]
                have lean_s1759 : let1121 := by timed Eq.trans lean_s1755 lean_s1758
                show let1121 from lean_s1759
            ))))
          have lean_s1756 : let1198 := by liftOrNToImp lean_s1755, 2
          have lean_s1757 : let1121 := by timed modusPonens lean_s1754 lean_s1756
          let lean_s1758 := by timed And.intro lean_s1753 lean_s1757
          have lean_s1759 : let1123 := by timed And.intro lean_a304 lean_s1758
          show let1123 from lean_s1759
  ))))))))
have lean_s1749 : let1196 := by liftOrNToImp lean_s1748, 4
have lean_s1750 : (Eq let773 let773) := by timed rfl
let lean_s1751 := by timed flipCongrArg lean_s1750 [Implies]
have lean_s1752 : (Or let271 (Or let1127 let1126)) :=
  (scope (fun lean_a302 : let15 =>
    (scope (fun lean_a303 : let1122 =>
      (scope (fun lean_a304 : let1121 =>
        have lean_s1752 : let1128 := by timed Eq.symm lean_a304
        have lean_s1753 : let1130 :=
          (scope (fun lean_a302 : let1128 =>
            have lean_s1753 : let498 := by timed trueElim lean_r146
            have lean_s1754 : let1139 := by timed And.intro lean_s1753 lean_a302
            have lean_s1755 : let1140 := by arithMulPos [let13, let22, let65], 4
            have lean_s1756 : let1138 := by timed modusPonens lean_s1754 lean_s1755
            have lean_s1757 : let1135 := by timed Eq.symm lean_a303
            have lean_s1758 : let1136 := by timed And.intro lean_s1753 lean_s1757
            have lean_s1759 : let1137 := by arithMulPos [let12, let22, let65], 4
            have lean_s1760 : let1134 := by timed modusPonens lean_s1758 lean_s1759
            have lean_s1761 : let733 := by timed trueElim lean_r228
            have lean_s1762 : let1074 := by timed And.intro lean_s1761 lean_a302
            have lean_s1763 : let1075 := by arithMulNeg [let14, let7, let285], 3
            have lean_s1764 : let1073 := by timed modusPonens lean_s1762 lean_s1763
            have lean_s1765 : let1133 := by sumBounds [lean_s1756, lean_s1760, lean_s1764]
            let lean_s1766 := by timed congrHAdd lean_r7 lean_r205
            have lean_s1767 : (Eq let1071 let709) := by timed congrHAdd lean_r227 lean_s1766
            have lean_s1768 : (Eq let1071 let4) := by timed Eq.trans lean_s1767 lean_r209
            let lean_s1769 := by timed flipCongrArg lean_s1768 [LE.le]
            let lean_s1770 := by timed congrHAdd lean_r241 lean_r80
            have lean_s1771 : (Eq let1132 let750) := by timed congrHAdd lean_r241 lean_s1770
            have lean_s1772 : (Eq let1132 let3) := by timed Eq.trans lean_s1771 lean_r239
            have lean_s1773 : (Eq let1133 let749) := by timed congr lean_s1769 lean_s1772
            have lean_s1774 : (Eq let1133 False) := by timed Eq.trans lean_s1773 lean_r238
            show False from by timed eqResolve lean_s1765 lean_s1774
          ))
        have lean_s1754 : let1129 := by liftOrNToNeg lean_s1753
        show False from by timed contradiction lean_s1752 lean_s1754
  ))))))
have lean_s1753 : (Not let1123) := by liftOrNToNeg lean_s1752
have lean_s1754 : let1125 := by timed falseIntro lean_s1753
have lean_s1755 : (Eq let1196 let775) := by timed congr lean_s1751 lean_s1754
have lean_s1756 : (Eq let1196 let774) := by timed Eq.trans lean_s1755 lean_r254
have lean_s1757 : let774 := by timed eqResolve lean_s1749 lean_s1756
have lean_s1758 : (Or let1035 let1195) := by timed flipNotAnd lean_s1757 [let54, let34, let15, let214]
have lean_s1759 : (Or let271 (Or let296 (Or let1035 let1114))) := by permutateOr lean_s1758, [2, 3, 0, 1], (- 1)
let lean_s1760 := by R1 lean_s1747, lean_s1759, let54, [(- 1), (- 1)]
have lean_s1761 : (Or let296 (Or let1114 let1193)) := by R2 lean_s1760, lean_s1684, let15, [(- 1), 0]
have lean_s1762 : let1193 := by factor lean_s1761, (- 1)
have lean_s1763 : (Or let296 let296) := by R1 lean_s1731, lean_s1762, let34, [(- 1), (- 1)]
have lean_s1764 : let296 := by factor lean_s1763, 1
let lean_s1765 := by R1 lean_s1705, lean_s1764, let214, [(- 1), 0]
have lean_s1766 : let234 := by andElim lean_s1614, 2
have lean_s1767 : let1192 := by R2 lean_s1765, lean_s1766, let234, [(- 1), 0]
let lean_s1768 := by R2 lean_s1686, lean_s1767, let1192, [(- 1), 0]
have lean_s1769 : let374 := by andElim lean_s1614, 1
let lean_s1770 := by R1 lean_s1768, lean_s1769, let373, [(- 1), 0]
have lean_s1771 : (Or let1035 (Or let1025 (Or let1042 (Or let1110 (Or let1040 (Or let1177 (Or let271 (Or let768 let1181)))))))) :=
  (scope (fun lean_a302 : let54 =>
    (scope (fun lean_a303 : let157 =>
      (scope (fun lean_a304 : let32 =>
        (scope (fun lean_a305 : let42 =>
          (scope (fun lean_a306 : let24 =>
            (scope (fun lean_a307 : let41 =>
              (scope (fun lean_a308 : let15 =>
                (scope (fun lean_a309 : let8 =>
                  have lean_s1771 : let1099 := by timed Eq.symm lean_r27
                  have lean_s1772 : let146 := by timed eqResolve lean_a309 lean_s1771
                  let lean_s1773 := by timed And.intro lean_a306 lean_a303
                  have lean_s1774 : let1190 := by timed And.intro lean_a307 lean_s1773
                  have lean_s1775 : (Or let1177 (Or let1040 (Or let1025 let282))) :=
                    (scope (fun lean_a304 : let41 =>
                      (scope (fun lean_a305 : let24 =>
                        (scope (fun lean_a306 : let157 =>
                          have lean_s1775 : let1107 := by timed Eq.symm lean_a306
                          have lean_s1776 : let593 := by timed Eq.symm lean_a305
                          have lean_s1777 : let24 := by timed Eq.symm lean_s1776
                          let lean_s1778 := by timed Eq.trans lean_s1775 lean_s1777
                          have lean_s1779 : let1191 := by timed Eq.symm lean_a304
                          have lean_s1780 : let41 := by timed Eq.symm lean_s1779
                          have lean_s1781 : let282 := by timed Eq.trans lean_s1778 lean_s1780
                          show let282 from lean_s1781
                    ))))))
                  have lean_s1776 : (Implies let1190 let282) := by liftOrNToImp lean_s1775, 3
                  have lean_s1777 : let282 := by timed modusPonens lean_s1774 lean_s1776
                  have lean_s1778 : (Or (Not let282) let1188) :=
                    (scope (fun lean_a304 : let282 =>
                      have lean_s1778 : let281 := by timed eqResolve lean_a304 lean_r78
                      have lean_s1779 : let1188 := by timed Eq.symm lean_s1778
                      show let1188 from lean_s1779
                    ))
                  have lean_s1779 : (Implies let282 let1188) := by liftOrNToImp lean_s1778, 1
                  have lean_s1780 : let1188 := by timed modusPonens lean_s1777 lean_s1779
                  have lean_s1781 : let1189 := by timed And.intro lean_s1772 lean_s1780
                  have lean_s1782 : (Or let1087 (Or (Not let1188) let1180)) :=
                    (scope (fun lean_a305 : let146 =>
                      (scope (fun lean_a306 : let1188 =>
                        have lean_s1782 : let281 := by timed Eq.symm lean_a306
                        have lean_s1783 : let1188 := by timed Eq.symm lean_s1782
                        have lean_s1784 : let1090 := by timed Eq.symm lean_a305
                        have lean_s1785 : let146 := by timed Eq.symm lean_s1784
                        have lean_s1786 : let1106 := by timed flipCongrArg lean_s1785 [xx5fcount]
                        have lean_s1787 : let1180 := by timed Eq.trans lean_s1783 lean_s1786
                        show let1180 from lean_s1787
                    ))))
                  have lean_s1783 : (Implies let1189 let1180) := by liftOrNToImp lean_s1782, 2
                  have lean_s1784 : let1180 := by timed modusPonens lean_s1781 lean_s1783
                  let lean_s1785 := by timed And.intro lean_a304 lean_a302
                  let lean_s1786 := by timed And.intro lean_a305 lean_s1785
                  have lean_s1787 : let1141 := by timed And.intro lean_s1772 lean_s1786
                  have lean_s1788 : let1145 :=
                    (scope (fun lean_a306 : let146 =>
                      (scope (fun lean_a307 : let42 =>
                        (scope (fun lean_a308 : let32 =>
                          (scope (fun lean_a309 : let54 =>
                            have lean_s1788 : let1098 := by timed Eq.symm lean_a309
                            have lean_s1789 : let486 := by timed Eq.symm lean_a308
                            have lean_s1790 : let32 := by timed Eq.symm lean_s1789
                            let lean_s1791 := by timed Eq.trans lean_s1788 lean_s1790
                            have lean_s1792 : let63 := by timed Eq.symm lean_a307
                            have lean_s1793 : let42 := by timed Eq.symm lean_s1792
                            let lean_s1794 := by timed Eq.trans lean_s1791 lean_s1793
                            have lean_s1795 : let1090 := by timed Eq.symm lean_a306
                            have lean_s1796 : let146 := by timed Eq.symm lean_s1795
                            have lean_s1797 : let1089 := by timed flipCongrArg lean_s1796 [sx5fcount]
                            have lean_s1798 : let1121 := by timed Eq.trans lean_s1794 lean_s1797
                            show let1121 from lean_s1798
                    ))))))))
                  have lean_s1789 : let1142 := by liftOrNToImp lean_s1788, 4
                  have lean_s1790 : let1121 := by timed modusPonens lean_s1787 lean_s1789
                  let lean_s1791 := by timed And.intro lean_s1784 lean_s1790
                  have lean_s1792 : let1181 := by timed And.intro lean_a308 lean_s1791
                  show let1181 from lean_s1792
  ))))))))))))))))
have lean_s1772 : let1182 := by liftOrNToImp lean_s1771, 8
have lean_s1773 : (Eq let763 let763) := by timed rfl
let lean_s1774 := by timed flipCongrArg lean_s1773 [Implies]
have lean_s1775 : (Or let271 (Or (Not let1180) let1126)) :=
  (scope (fun lean_a306 : let15 =>
    (scope (fun lean_a307 : let1180 =>
      (scope (fun lean_a308 : let1121 =>
        have lean_s1775 : let1128 := by timed Eq.symm lean_a308
        have lean_s1776 : let1130 :=
          (scope (fun lean_a307 : let1128 =>
            have lean_s1776 : let498 := by timed trueElim lean_r146
            have lean_s1777 : let1139 := by timed And.intro lean_s1776 lean_a307
            have lean_s1778 : let1140 := by arithMulPos [let13, let22, let65], 4
            have lean_s1779 : let1138 := by timed modusPonens lean_s1777 lean_s1778
            have lean_s1780 : let1186 := by timed Eq.symm lean_a307
            have lean_s1781 : let1187 := by timed And.intro lean_s1776 lean_s1780
            have lean_s1782 : (Implies let1187 let1185) := by arithMulPos [let12, let9, let65], 4
            have lean_s1783 : let1185 := by timed modusPonens lean_s1781 lean_s1782
            have lean_s1784 : let733 := by timed trueElim lean_r228
            have lean_s1785 : let1074 := by timed And.intro lean_s1784 lean_a306
            have lean_s1786 : let1075 := by arithMulNeg [let14, let7, let285], 3
            have lean_s1787 : let1073 := by timed modusPonens lean_s1785 lean_s1786
            have lean_s1788 : let1184 := by sumBounds [lean_s1779, lean_s1783, lean_s1787]
            let lean_s1789 := by timed congrHAdd lean_r7 lean_r205
            have lean_s1790 : (Eq let1071 let709) := by timed congrHAdd lean_r227 lean_s1789
            have lean_s1791 : (Eq let1071 let4) := by timed Eq.trans lean_s1790 lean_r209
            let lean_s1792 := by timed flipCongrArg lean_s1791 [LE.le]
            let lean_s1793 := by timed congrHAdd lean_r253 lean_r80
            have lean_s1794 : (Eq let1183 let360) := by timed congrHAdd lean_r241 lean_s1793
            have lean_s1795 : (Eq let1183 let2) := by timed Eq.trans lean_s1794 lean_r112
            have lean_s1796 : (Eq let1184 let393) := by timed congr lean_s1792 lean_s1795
            have lean_s1797 : (Eq let1184 False) := by timed Eq.trans lean_s1796 lean_r134
            show False from by timed eqResolve lean_s1788 lean_s1797
          ))
        have lean_s1777 : let1129 := by liftOrNToNeg lean_s1776
        show False from by timed contradiction lean_s1775 lean_s1777
  ))))))
have lean_s1776 : (Not let1181) := by liftOrNToNeg lean_s1775
have lean_s1777 : (Eq let1181 False) := by timed falseIntro lean_s1776
have lean_s1778 : (Eq let1182 let765) := by timed congr lean_s1774 lean_s1777
have lean_s1779 : (Eq let1182 let764) := by timed Eq.trans lean_s1778 lean_r249
have lean_s1780 : let764 := by timed eqResolve lean_s1772 lean_s1779
have lean_s1781 : (Or let1035 (Or let1025 let1179)) := by timed flipNotAnd lean_s1780 [let54, let157, let32, let42, let24, let41, let15, let8]
have lean_s1782 : (Or let271 (Or let768 (Or let1035 (Or let1042 (Or let1110 (Or let1025 let1178)))))) := by permutateOr lean_s1781, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s1783 := by R2 lean_s1782, lean_s1684, let15, [(- 1), 0]
have lean_s1784 : let420 := by andElim lean_s1614, 28
have lean_s1785 : (Or let418 let41) := by timed impliesElim lean_s1784
have lean_s1786 : (Or let41 let418) := by permutateOr lean_s1785, [1, 0], (- 1)
let lean_s1787 := by R2 lean_s1783, lean_s1786, let41, [(- 1), (- 1)]
have lean_s1788 : let419 := by andElim lean_s1614, 29
have lean_s1789 : let1050 := by timed impliesElim lean_s1788
have lean_s1790 : let566 := by timed rfl
let lean_s1791 := by timed flipCongrArg lean_s1790 [Eq]
have lean_s1792 : (Eq let723 let566) := by timed congr lean_s1791 lean_r219
have lean_s1793 : (Eq let723 True) := by timed Eq.trans lean_s1792 lean_r175
have lean_s1794 : (Eq let721 True) := by timed Eq.trans lean_r221 lean_s1793
have lean_s1795 : let721 := by timed trueElim lean_s1794
let lean_s1796 := by timed flipCongrArg lean_s1795 [Or]
have lean_s1797 : let951 := by timed rfl
have lean_s1798 : (Eq let1050 let1049) := by timed congr lean_s1796 lean_s1797
have lean_s1799 : let1049 := by timed eqResolve lean_s1789 lean_s1798
have lean_s1800 : (Or let20 let417) := by permutateOr lean_s1799, [1, 0], (- 1)
let lean_s1801 := by R2 lean_s1787, lean_s1800, let417, [(- 1), (- 1)]
have lean_s1802 : (Or let1162 (Or let1114 (Or let1042 let1169))) :=
  (scope (fun lean_a307 : let36 =>
    (scope (fun lean_a308 : let34 =>
      (scope (fun lean_a309 : let32 =>
        (scope (fun lean_a310 : let42 =>
          (scope (fun lean_a311 : let24 =>
            (scope (fun lean_a312 : let20 =>
              (scope (fun lean_a313 : let15 =>
                (scope (fun lean_a314 : let8 =>
                  have lean_s1802 : let1099 := by timed Eq.symm lean_r27
                  have lean_s1803 : let146 := by timed eqResolve lean_a314 lean_s1802
                  let lean_s1804 := by timed And.intro lean_a311 lean_a308
                  let lean_s1805 := by timed And.intro lean_a312 lean_s1804
                  have lean_s1806 : let1147 := by timed And.intro lean_s1803 lean_s1805
                  have lean_s1807 : let1151 :=
                    (scope (fun lean_a307 : let146 =>
                      (scope (fun lean_a308 : let20 =>
                        (scope (fun lean_a309 : let24 =>
                          (scope (fun lean_a310 : let34 =>
                            have lean_s1807 : let1152 := by timed Eq.symm lean_a310
                            have lean_s1808 : let593 := by timed Eq.symm lean_a309
                            have lean_s1809 : let24 := by timed Eq.symm lean_s1808
                            let lean_s1810 := by timed Eq.trans lean_s1807 lean_s1809
                            have lean_s1811 : let585 := by timed Eq.symm lean_a308
                            have lean_s1812 : let20 := by timed Eq.symm lean_s1811
                            let lean_s1813 := by timed Eq.trans lean_s1810 lean_s1812
                            have lean_s1814 : let1090 := by timed Eq.symm lean_a307
                            have lean_s1815 : let146 := by timed Eq.symm lean_s1814
                            have lean_s1816 : let1106 := by timed flipCongrArg lean_s1815 [xx5fcount]
                            have lean_s1817 : let1122 := by timed Eq.trans lean_s1813 lean_s1816
                            show let1122 from lean_s1817
                    ))))))))
                  have lean_s1808 : let1148 := by liftOrNToImp lean_s1807, 4
                  have lean_s1809 : let1122 := by timed modusPonens lean_s1806 lean_s1808
                  let lean_s1810 := by timed And.intro lean_a309 lean_a307
                  let lean_s1811 := by timed And.intro lean_a310 lean_s1810
                  have lean_s1812 : let1171 := by timed And.intro lean_s1803 lean_s1811
                  have lean_s1813 : let1175 :=
                    (scope (fun lean_a307 : let146 =>
                      (scope (fun lean_a308 : let42 =>
                        (scope (fun lean_a309 : let32 =>
                          (scope (fun lean_a310 : let36 =>
                            have lean_s1813 : let1176 := by timed Eq.symm lean_a310
                            have lean_s1814 : let486 := by timed Eq.symm lean_a309
                            have lean_s1815 : let32 := by timed Eq.symm lean_s1814
                            let lean_s1816 := by timed Eq.trans lean_s1813 lean_s1815
                            have lean_s1817 : let63 := by timed Eq.symm lean_a308
                            have lean_s1818 : let42 := by timed Eq.symm lean_s1817
                            let lean_s1819 := by timed Eq.trans lean_s1816 lean_s1818
                            have lean_s1820 : let1090 := by timed Eq.symm lean_a307
                            have lean_s1821 : let146 := by timed Eq.symm lean_s1820
                            have lean_s1822 : let1089 := by timed flipCongrArg lean_s1821 [sx5fcount]
                            have lean_s1823 : let1059 := by timed Eq.trans lean_s1819 lean_s1822
                            show let1059 from lean_s1823
                    ))))))))
                  have lean_s1814 : let1172 := by liftOrNToImp lean_s1813, 4
                  have lean_s1815 : let1059 := by timed modusPonens lean_s1812 lean_s1814
                  let lean_s1816 := by timed And.intro lean_s1809 lean_s1815
                  have lean_s1817 : let1163 := by timed And.intro lean_a313 lean_s1816
                  show let1163 from lean_s1817
  ))))))))))))))))
have lean_s1803 : let1164 := by liftOrNToImp lean_s1802, 8
have lean_s1804 : (Eq let759 let759) := by timed rfl
let lean_s1805 := by timed flipCongrArg lean_s1804 [Implies]
have lean_s1806 : let1165 := by timed falseIntro lean_s5
have lean_s1807 : (Eq let1164 let761) := by timed congr lean_s1805 lean_s1806
have lean_s1808 : (Eq let1164 let760) := by timed Eq.trans lean_s1807 lean_r247
have lean_s1809 : let760 := by timed eqResolve lean_s1803 lean_s1808
have lean_s1810 : (Or let1162 let1120) := by timed flipNotAnd lean_s1809 [let36, let34, let32, let42, let24, let20, let15, let8]
have lean_s1811 : (Or let271 (Or let768 (Or let1162 let1117))) := by permutateOr lean_s1810, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s1812 := by R2 lean_s1811, lean_s1684, let15, [(- 1), 0]
let lean_s1813 := by R2 lean_s1812, lean_s1673, let34, [(- 1), (- 1)]
let lean_s1814 := by R1 lean_s1813, lean_s1728, let428, [(- 1), (- 1)]
let lean_s1815 := by R1 lean_s1814, lean_s1721, let426, [(- 1), (- 1)]
let lean_s1816 := by R2 lean_s1815, lean_s1745, let36, [(- 1), (- 1)]
have lean_s1817 : (Or let768 (Or let1042 (Or let1110 (Or let1040 (Or let1051 (Or let454 let454)))))) := by R2 lean_s1816, lean_s1635, let135, [(- 1), (- 1)]
have lean_s1818 : (Or let768 (Or let1042 (Or let1110 (Or let1040 (Or let1051 let454))))) := by factor lean_s1817, (- 1)
let lean_s1819 := by R2 lean_s1818, lean_s1648, let453, [(- 1), (- 1)]
have lean_s1820 : (Or let1035 (Or let1025 (Or let1042 (Or let1110 (Or let1040 let1161))))) :=
  (scope (fun lean_a307 : let54 =>
    (scope (fun lean_a308 : let157 =>
      (scope (fun lean_a309 : let32 =>
        (scope (fun lean_a310 : let42 =>
          (scope (fun lean_a311 : let24 =>
            (scope (fun lean_a312 : let20 =>
              (scope (fun lean_a313 : let15 =>
                (scope (fun lean_a314 : let8 =>
                  have lean_s1820 : let1099 := by timed Eq.symm lean_r27
                  have lean_s1821 : let146 := by timed eqResolve lean_a314 lean_s1820
                  let lean_s1822 := by timed And.intro lean_a311 lean_a308
                  let lean_s1823 := by timed And.intro lean_a312 lean_s1822
                  have lean_s1824 : let1101 := by timed And.intro lean_s1821 lean_s1823
                  have lean_s1825 : let1105 :=
                    (scope (fun lean_a307 : let146 =>
                      (scope (fun lean_a308 : let20 =>
                        (scope (fun lean_a309 : let24 =>
                          (scope (fun lean_a310 : let157 =>
                            have lean_s1825 : let1107 := by timed Eq.symm lean_a310
                            have lean_s1826 : let593 := by timed Eq.symm lean_a309
                            have lean_s1827 : let24 := by timed Eq.symm lean_s1826
                            let lean_s1828 := by timed Eq.trans lean_s1825 lean_s1827
                            have lean_s1829 : let585 := by timed Eq.symm lean_a308
                            have lean_s1830 : let20 := by timed Eq.symm lean_s1829
                            let lean_s1831 := by timed Eq.trans lean_s1828 lean_s1830
                            have lean_s1832 : let1090 := by timed Eq.symm lean_a307
                            have lean_s1833 : let146 := by timed Eq.symm lean_s1832
                            have lean_s1834 : let1106 := by timed flipCongrArg lean_s1833 [xx5fcount]
                            have lean_s1835 : let1060 := by timed Eq.trans lean_s1831 lean_s1834
                            show let1060 from lean_s1835
                    ))))))))
                  have lean_s1826 : let1102 := by liftOrNToImp lean_s1825, 4
                  have lean_s1827 : let1060 := by timed modusPonens lean_s1824 lean_s1826
                  let lean_s1828 := by timed And.intro lean_a309 lean_a307
                  let lean_s1829 := by timed And.intro lean_a310 lean_s1828
                  have lean_s1830 : let1141 := by timed And.intro lean_s1821 lean_s1829
                  have lean_s1831 : let1145 :=
                    (scope (fun lean_a307 : let146 =>
                      (scope (fun lean_a308 : let42 =>
                        (scope (fun lean_a309 : let32 =>
                          (scope (fun lean_a310 : let54 =>
                            have lean_s1831 : let1098 := by timed Eq.symm lean_a310
                            have lean_s1832 : let486 := by timed Eq.symm lean_a309
                            have lean_s1833 : let32 := by timed Eq.symm lean_s1832
                            let lean_s1834 := by timed Eq.trans lean_s1831 lean_s1833
                            have lean_s1835 : let63 := by timed Eq.symm lean_a308
                            have lean_s1836 : let42 := by timed Eq.symm lean_s1835
                            let lean_s1837 := by timed Eq.trans lean_s1834 lean_s1836
                            have lean_s1838 : let1090 := by timed Eq.symm lean_a307
                            have lean_s1839 : let146 := by timed Eq.symm lean_s1838
                            have lean_s1840 : let1089 := by timed flipCongrArg lean_s1839 [sx5fcount]
                            have lean_s1841 : let1121 := by timed Eq.trans lean_s1837 lean_s1840
                            show let1121 from lean_s1841
                    ))))))))
                  have lean_s1832 : let1142 := by liftOrNToImp lean_s1831, 4
                  have lean_s1833 : let1121 := by timed modusPonens lean_s1830 lean_s1832
                  let lean_s1834 := by timed And.intro lean_s1827 lean_s1833
                  have lean_s1835 : let1155 := by timed And.intro lean_a313 lean_s1834
                  show let1155 from lean_s1835
  ))))))))))))))))
have lean_s1821 : let1156 := by liftOrNToImp lean_s1820, 8
have lean_s1822 : (Eq let754 let754) := by timed rfl
let lean_s1823 := by timed flipCongrArg lean_s1822 [Implies]
have lean_s1824 : let1157 := by timed falseIntro lean_s1654
have lean_s1825 : (Eq let1156 let756) := by timed congr lean_s1823 lean_s1824
have lean_s1826 : (Eq let1156 let755) := by timed Eq.trans lean_s1825 lean_r243
have lean_s1827 : let755 := by timed eqResolve lean_s1821 lean_s1826
have lean_s1828 : (Or let1035 (Or let1025 let1119)) := by timed flipNotAnd lean_s1827 [let54, let157, let32, let42, let24, let20, let15, let8]
have lean_s1829 : (Or let271 (Or let768 (Or let1035 (Or let1042 (Or let1110 let1053))))) := by permutateOr lean_s1828, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s1830 := by R2 lean_s1829, lean_s1684, let15, [(- 1), 0]
let lean_s1831 := by R2 lean_s1830, lean_s1725, let157, [(- 1), (- 1)]
let lean_s1832 := by R2 lean_s1831, lean_s1673, let428, [(- 1), (- 1)]
have lean_s1833 : (Or let1035 (Or let1114 (Or let1042 (Or let1110 (Or let1040 (Or let1051 (Or let271 (Or let768 let1123)))))))) :=
  (scope (fun lean_a307 : let54 =>
    (scope (fun lean_a308 : let34 =>
      (scope (fun lean_a309 : let32 =>
        (scope (fun lean_a310 : let42 =>
          (scope (fun lean_a311 : let24 =>
            (scope (fun lean_a312 : let20 =>
              (scope (fun lean_a313 : let15 =>
                (scope (fun lean_a314 : let8 =>
                  have lean_s1833 : let1099 := by timed Eq.symm lean_r27
                  have lean_s1834 : let146 := by timed eqResolve lean_a314 lean_s1833
                  let lean_s1835 := by timed And.intro lean_a311 lean_a308
                  let lean_s1836 := by timed And.intro lean_a312 lean_s1835
                  have lean_s1837 : let1147 := by timed And.intro lean_s1834 lean_s1836
                  have lean_s1838 : let1151 :=
                    (scope (fun lean_a307 : let146 =>
                      (scope (fun lean_a308 : let20 =>
                        (scope (fun lean_a309 : let24 =>
                          (scope (fun lean_a310 : let34 =>
                            have lean_s1838 : let1152 := by timed Eq.symm lean_a310
                            have lean_s1839 : let593 := by timed Eq.symm lean_a309
                            have lean_s1840 : let24 := by timed Eq.symm lean_s1839
                            let lean_s1841 := by timed Eq.trans lean_s1838 lean_s1840
                            have lean_s1842 : let585 := by timed Eq.symm lean_a308
                            have lean_s1843 : let20 := by timed Eq.symm lean_s1842
                            let lean_s1844 := by timed Eq.trans lean_s1841 lean_s1843
                            have lean_s1845 : let1090 := by timed Eq.symm lean_a307
                            have lean_s1846 : let146 := by timed Eq.symm lean_s1845
                            have lean_s1847 : let1106 := by timed flipCongrArg lean_s1846 [xx5fcount]
                            have lean_s1848 : let1122 := by timed Eq.trans lean_s1844 lean_s1847
                            show let1122 from lean_s1848
                    ))))))))
                  have lean_s1839 : let1148 := by liftOrNToImp lean_s1838, 4
                  have lean_s1840 : let1122 := by timed modusPonens lean_s1837 lean_s1839
                  let lean_s1841 := by timed And.intro lean_a309 lean_a307
                  let lean_s1842 := by timed And.intro lean_a310 lean_s1841
                  have lean_s1843 : let1141 := by timed And.intro lean_s1834 lean_s1842
                  have lean_s1844 : let1145 :=
                    (scope (fun lean_a307 : let146 =>
                      (scope (fun lean_a308 : let42 =>
                        (scope (fun lean_a309 : let32 =>
                          (scope (fun lean_a310 : let54 =>
                            have lean_s1844 : let1098 := by timed Eq.symm lean_a310
                            have lean_s1845 : let486 := by timed Eq.symm lean_a309
                            have lean_s1846 : let32 := by timed Eq.symm lean_s1845
                            let lean_s1847 := by timed Eq.trans lean_s1844 lean_s1846
                            have lean_s1848 : let63 := by timed Eq.symm lean_a308
                            have lean_s1849 : let42 := by timed Eq.symm lean_s1848
                            let lean_s1850 := by timed Eq.trans lean_s1847 lean_s1849
                            have lean_s1851 : let1090 := by timed Eq.symm lean_a307
                            have lean_s1852 : let146 := by timed Eq.symm lean_s1851
                            have lean_s1853 : let1089 := by timed flipCongrArg lean_s1852 [sx5fcount]
                            have lean_s1854 : let1121 := by timed Eq.trans lean_s1850 lean_s1853
                            show let1121 from lean_s1854
                    ))))))))
                  have lean_s1845 : let1142 := by liftOrNToImp lean_s1844, 4
                  have lean_s1846 : let1121 := by timed modusPonens lean_s1843 lean_s1845
                  let lean_s1847 := by timed And.intro lean_s1840 lean_s1846
                  have lean_s1848 : let1123 := by timed And.intro lean_a313 lean_s1847
                  show let1123 from lean_s1848
  ))))))))))))))))
have lean_s1834 : let1124 := by liftOrNToImp lean_s1833, 8
have lean_s1835 : (Eq let745 let745) := by timed rfl
let lean_s1836 := by timed flipCongrArg lean_s1835 [Implies]
have lean_s1837 : let1125 := by timed falseIntro lean_s1753
have lean_s1838 : (Eq let1124 let747) := by timed congr lean_s1836 lean_s1837
have lean_s1839 : (Eq let1124 let746) := by timed Eq.trans lean_s1838 lean_r236
have lean_s1840 : let746 := by timed eqResolve lean_s1834 lean_s1839
have lean_s1841 : (Or let1035 let1120) := by timed flipNotAnd lean_s1840 [let54, let34, let32, let42, let24, let20, let15, let8]
have lean_s1842 : (Or let271 (Or let768 (Or let1035 let1117))) := by permutateOr lean_s1841, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s1843 := by R1 lean_s1832, lean_s1842, let34, [(- 1), (- 1)]
have lean_s1844 : (Or let768 (Or let1035 (Or let1042 (Or let1110 (Or let1040 (Or let1051 let1113)))))) := by R2 lean_s1843, lean_s1684, let15, [(- 1), 0]
have lean_s1845 : let1113 := by factor lean_s1844, (- 1)
have lean_s1846 : (Or let768 (Or let1042 (Or let1110 (Or let1040 (Or let1051 let1112))))) := by R1 lean_s1819, lean_s1845, let54, [(- 1), (- 1)]
have lean_s1847 : let1112 := by factor lean_s1846, (- 1)
have lean_s1848 : (Or let768 (Or let1035 (Or let1042 (Or let1110 (Or let1025 (Or let1040 (Or let768 (Or let1042 (Or let1110 let1040))))))))) := by R1 lean_s1801, lean_s1847, let20, [(- 1), (- 1)]
have lean_s1849 : (Or let768 (Or let1035 (Or let1042 (Or let1110 let1041)))) := by factor lean_s1848, (- 1)
have lean_s1850 : let446 := by andElim lean_s1614, 17
have lean_s1851 : let1109 := by timed impliesElim lean_s1850
have lean_s1852 : let739 := by timed rfl
let lean_s1853 := by timed flipCongrArg lean_s1852 [Eq]
have lean_s1854 : (Eq let740 let739) := by timed congr lean_s1853 lean_r20
have lean_s1855 : (Eq let740 True) := by timed Eq.trans lean_s1854 lean_r233
have lean_s1856 : (Eq let128 True) := by timed Eq.trans lean_r234 lean_s1855
have lean_s1857 : let128 := by timed trueElim lean_s1856
let lean_s1858 := by timed flipCongrArg lean_s1857 [Or]
have lean_s1859 : let963 := by timed rfl
have lean_s1860 : (Eq let1109 let1108) := by timed congr lean_s1858 lean_s1859
have lean_s1861 : let1108 := by timed eqResolve lean_s1851 lean_s1860
have lean_s1862 : (Or let42 let125) := by permutateOr lean_s1861, [1, 0], (- 1)
let lean_s1863 := by R2 lean_s1849, lean_s1862, let42, [(- 1), (- 1)]
have lean_s1864 : (Or let1035 (Or let1025 (Or let1042 (Or let1054 (Or let1040 (Or let1051 let1083)))))) :=
  (scope (fun lean_a307 : let54 =>
    (scope (fun lean_a308 : let157 =>
      (scope (fun lean_a309 : let32 =>
        (scope (fun lean_a310 : let30 =>
          (scope (fun lean_a311 : let24 =>
            (scope (fun lean_a312 : let20 =>
              (scope (fun lean_a313 : let15 =>
                (scope (fun lean_a314 : let8 =>
                  have lean_s1864 : let1099 := by timed Eq.symm lean_r27
                  have lean_s1865 : let146 := by timed eqResolve lean_a314 lean_s1864
                  let lean_s1866 := by timed And.intro lean_a311 lean_a308
                  let lean_s1867 := by timed And.intro lean_a312 lean_s1866
                  have lean_s1868 : let1101 := by timed And.intro lean_s1865 lean_s1867
                  have lean_s1869 : let1105 :=
                    (scope (fun lean_a307 : let146 =>
                      (scope (fun lean_a308 : let20 =>
                        (scope (fun lean_a309 : let24 =>
                          (scope (fun lean_a310 : let157 =>
                            have lean_s1869 : let1107 := by timed Eq.symm lean_a310
                            have lean_s1870 : let593 := by timed Eq.symm lean_a309
                            have lean_s1871 : let24 := by timed Eq.symm lean_s1870
                            let lean_s1872 := by timed Eq.trans lean_s1869 lean_s1871
                            have lean_s1873 : let585 := by timed Eq.symm lean_a308
                            have lean_s1874 : let20 := by timed Eq.symm lean_s1873
                            let lean_s1875 := by timed Eq.trans lean_s1872 lean_s1874
                            have lean_s1876 : let1090 := by timed Eq.symm lean_a307
                            have lean_s1877 : let146 := by timed Eq.symm lean_s1876
                            have lean_s1878 : let1106 := by timed flipCongrArg lean_s1877 [xx5fcount]
                            have lean_s1879 : let1060 := by timed Eq.trans lean_s1875 lean_s1878
                            show let1060 from lean_s1879
                    ))))))))
                  have lean_s1870 : let1102 := by liftOrNToImp lean_s1869, 4
                  have lean_s1871 : let1060 := by timed modusPonens lean_s1868 lean_s1870
                  let lean_s1872 := by timed And.intro lean_a309 lean_a307
                  have lean_s1873 : let1094 := by timed And.intro lean_a310 lean_s1872
                  have lean_s1874 : let1096 :=
                    (scope (fun lean_a307 : let30 =>
                      (scope (fun lean_a308 : let32 =>
                        (scope (fun lean_a309 : let54 =>
                          have lean_s1874 : let1098 := by timed Eq.symm lean_a309
                          have lean_s1875 : let486 := by timed Eq.symm lean_a308
                          have lean_s1876 : let32 := by timed Eq.symm lean_s1875
                          let lean_s1877 := by timed Eq.trans lean_s1874 lean_s1876
                          have lean_s1878 : let1097 := by timed Eq.symm lean_a307
                          have lean_s1879 : let30 := by timed Eq.symm lean_s1878
                          have lean_s1880 : let735 := by timed Eq.trans lean_s1877 lean_s1879
                          show let735 from lean_s1880
                    ))))))
                  have lean_s1875 : let1095 := by liftOrNToImp lean_s1874, 3
                  have lean_s1876 : let735 := by timed modusPonens lean_s1873 lean_s1875
                  have lean_s1877 : let1092 :=
                    (scope (fun lean_a307 : let735 =>
                      have lean_s1877 : let734 := by timed eqResolve lean_a307 lean_r229
                      have lean_s1878 : let1084 := by timed Eq.symm lean_s1877
                      show let1084 from lean_s1878
                    ))
                  have lean_s1878 : let1091 := by liftOrNToImp lean_s1877, 1
                  have lean_s1879 : let1084 := by timed modusPonens lean_s1876 lean_s1878
                  have lean_s1880 : let1085 := by timed And.intro lean_s1865 lean_s1879
                  have lean_s1881 : let1088 :=
                    (scope (fun lean_a308 : let146 =>
                      (scope (fun lean_a309 : let1084 =>
                        have lean_s1881 : let734 := by timed Eq.symm lean_a309
                        have lean_s1882 : let1084 := by timed Eq.symm lean_s1881
                        have lean_s1883 : let1090 := by timed Eq.symm lean_a308
                        have lean_s1884 : let146 := by timed Eq.symm lean_s1883
                        have lean_s1885 : let1089 := by timed flipCongrArg lean_s1884 [sx5fcount]
                        have lean_s1886 : let1059 := by timed Eq.trans lean_s1882 lean_s1885
                        show let1059 from lean_s1886
                    ))))
                  have lean_s1882 : let1086 := by liftOrNToImp lean_s1881, 2
                  have lean_s1883 : let1059 := by timed modusPonens lean_s1880 lean_s1882
                  let lean_s1884 := by timed And.intro lean_s1871 lean_s1883
                  have lean_s1885 : let1061 := by timed And.intro lean_a313 lean_s1884
                  show let1061 from lean_s1885
  ))))))))))))))))
have lean_s1865 : let1062 := by liftOrNToImp lean_s1864, 8
have lean_s1866 : (Eq let726 let726) := by timed rfl
let lean_s1867 := by timed flipCongrArg lean_s1866 [Implies]
have lean_s1868 : (Or let271 (Or let1065 let1064)) :=
  (scope (fun lean_a309 : let15 =>
    (scope (fun lean_a310 : let1060 =>
      (scope (fun lean_a311 : let1059 =>
        have lean_s1868 : let1066 := by timed Eq.symm lean_a311
        have lean_s1869 : let1068 :=
          (scope (fun lean_a309 : let1066 =>
            have lean_s1869 : let498 := by timed trueElim lean_r146
            have lean_s1870 : let1081 := by timed And.intro lean_s1869 lean_a309
            have lean_s1871 : let1082 := by arithMulPos [let13, let18, let65], 4
            have lean_s1872 : let1080 := by timed modusPonens lean_s1870 lean_s1871
            have lean_s1873 : let1077 := by timed Eq.symm lean_a310
            have lean_s1874 : let1078 := by timed And.intro lean_s1869 lean_s1873
            have lean_s1875 : let1079 := by arithMulPos [let12, let18, let65], 4
            have lean_s1876 : let1076 := by timed modusPonens lean_s1874 lean_s1875
            have lean_s1877 : let733 := by timed trueElim lean_r228
            have lean_s1878 : let1074 := by timed And.intro lean_s1877 lean_a309
            have lean_s1879 : let1075 := by arithMulNeg [let14, let7, let285], 3
            have lean_s1880 : let1073 := by timed modusPonens lean_s1878 lean_s1879
            have lean_s1881 : let1072 := by sumBounds [lean_s1872, lean_s1876, lean_s1880]
            let lean_s1882 := by timed congrHAdd lean_r7 lean_r205
            have lean_s1883 : (Eq let1071 let709) := by timed congrHAdd lean_r227 lean_s1882
            have lean_s1884 : (Eq let1071 let4) := by timed Eq.trans lean_s1883 lean_r209
            let lean_s1885 := by timed flipCongrArg lean_s1884 [LE.le]
            let lean_s1886 := by timed congrHAdd lean_r74 lean_r80
            have lean_s1887 : (Eq let1070 let731) := by timed congrHAdd lean_r74 lean_s1886
            have lean_s1888 : (Eq let1070 let2) := by timed Eq.trans lean_s1887 lean_r226
            have lean_s1889 : (Eq let1072 let393) := by timed congr lean_s1885 lean_s1888
            have lean_s1890 : (Eq let1072 False) := by timed Eq.trans lean_s1889 lean_r134
            show False from by timed eqResolve lean_s1881 lean_s1890
          ))
        have lean_s1870 : let1067 := by liftOrNToNeg lean_s1869
        show False from by timed contradiction lean_s1868 lean_s1870
  ))))))
have lean_s1869 : (Not let1061) := by liftOrNToNeg lean_s1868
have lean_s1870 : let1063 := by timed falseIntro lean_s1869
have lean_s1871 : (Eq let1062 let728) := by timed congr lean_s1867 lean_s1870
have lean_s1872 : (Eq let1062 let727) := by timed Eq.trans lean_s1871 lean_r224
have lean_s1873 : let727 := by timed eqResolve lean_s1865 lean_s1872
have lean_s1874 : (Or let1035 (Or let1025 let1058)) := by timed flipNotAnd lean_s1873 [let54, let157, let32, let30, let24, let20, let15, let8]
have lean_s1875 : (Or let271 (Or let768 (Or let1035 (Or let1042 (Or let1054 let1053))))) := by permutateOr lean_s1874, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s1876 := by R2 lean_s1875, lean_s1684, let15, [(- 1), 0]
let lean_s1877 := by R2 lean_s1876, lean_s1800, let20, [(- 1), (- 1)]
have lean_s1878 : (Or let418 let313) := by timed @cnfAndPos [let124, let313] 1
have lean_s1879 : (Or let313 let418) := by permutateOr lean_s1878, [1, 0], (- 1)
let lean_s1880 := by R1 lean_s1877, lean_s1879, let417, [(- 1), (- 1)]
have lean_s1881 : let1047 :=
  (scope (fun lean_a309 : let122 =>
    have lean_s1881 : let1047 :=
      (scope (fun lean_a310 : let122 =>
        have lean_s1881 : let350 := by timed Eq.symm lean_a310
        have lean_s1882 : let122 := by timed Eq.symm lean_s1881
        let lean_s1883 := by timed flipCongrArg lean_s1882 [Eq]
        have lean_s1884 : let573 := by timed rfl
        have lean_s1885 : (Eq let313 let599) := by timed congr lean_s1883 lean_s1884
        have lean_s1886 : (Eq let600 let589) := by timed flipCongrArg lean_r206 [Not]
        have lean_s1887 : (Eq let600 True) := by timed Eq.trans lean_s1886 lean_r189
        have lean_s1888 : (Eq let601 True) := by timed Eq.trans lean_r195 lean_s1887
        have lean_s1889 : let601 := by timed trueElim lean_s1888
        have lean_s1890 : (Eq let313 False) := by timed Eq.trans lean_s1885 lean_s1889
        have lean_s1891 : let1046 := by timed falseElim lean_s1890
        show let1046 from lean_s1891
      ))
    have lean_s1882 : let1048 := by liftOrNToImp lean_s1881, 1
    have lean_s1883 : let1046 := by timed modusPonens lean_a309 lean_s1882
    show let1046 from lean_s1883
  ))
have lean_s1882 : let1048 := by liftOrNToImp lean_s1881, 1
have lean_s1883 : let1047 := by timed impliesElim lean_s1882
let lean_s1884 := by R1 lean_s1880, lean_s1883, let313, [(- 1), (- 1)]
have lean_s1885 : let447 := by andElim lean_s1614, 16
have lean_s1886 : (Or let126 let30) := by timed impliesElim lean_s1885
have lean_s1887 : (Or let30 let126) := by permutateOr lean_s1886, [1, 0], (- 1)
let lean_s1888 := by R2 lean_s1884, lean_s1887, let30, [(- 1), (- 1)]
have lean_s1889 : (Or let126 let122) := by timed @cnfAndPos [let124, let122] 1
have lean_s1890 : (Or let122 let126) := by permutateOr lean_s1889, [1, 0], (- 1)
have lean_s1891 : (Or let768 (Or let1035 (Or let1042 (Or let1025 (Or let1040 let1045))))) := by R2 lean_s1888, lean_s1890, let122, [(- 1), (- 1)]
have lean_s1892 : (Or let768 (Or let1035 (Or let1042 (Or let1025 (Or let1040 let126))))) := by factor lean_s1891, (- 1)
have lean_s1893 : (Or let126 let1044) := by permutateOr lean_s1892, [5, 0, 1, 2, 3, 4], (- 1)
have lean_s1894 : (Or let768 (Or let1035 (Or let1042 (Or let1025 (Or let1040 let1044))))) := by R1 lean_s1863, lean_s1893, let125, [(- 1), (- 1)]
have lean_s1895 : let1044 := by factor lean_s1894, (- 1)
have lean_s1896 : (Or let1035 (Or let1042 (Or let1025 (Or let1040 let1043)))) := by R1 lean_s1770, lean_s1895, let8, [(- 1), (- 1)]
have lean_s1897 : let1043 := by factor lean_s1896, (- 1)
let lean_s1898 := by R2 lean_s1897, lean_s1627, let24, [(- 1), (- 1)]
have lean_s1899 : let451 := by andElim lean_s1614, 15
have lean_s1900 : let1037 := by timed impliesElim lean_s1899
have lean_s1901 : let497 := by timed rfl
let lean_s1902 := by timed flipCongrArg lean_s1901 [Eq]
have lean_s1903 : (Eq let715 let497) := by timed congr lean_s1902 lean_r245
have lean_s1904 : (Eq let715 True) := by timed Eq.trans lean_s1903 lean_r145
have lean_s1905 : (Eq let716 True) := by timed Eq.trans lean_r214 lean_s1904
have lean_s1906 : let716 := by timed trueElim lean_s1905
let lean_s1907 := by timed flipCongrArg lean_s1906 [Or]
have lean_s1908 : let965 := by timed rfl
have lean_s1909 : (Eq let1037 let1036) := by timed congr lean_s1907 lean_s1908
have lean_s1910 : let1036 := by timed eqResolve lean_s1900 lean_s1909
have lean_s1911 : (Or let32 let449) := by permutateOr lean_s1910, [1, 0], (- 1)
let lean_s1912 := by R2 lean_s1898, lean_s1911, let32, [(- 1), (- 1)]
let lean_s1913 := by R1 lean_s1912, lean_s1629, let422, [(- 1), (- 1)]
have lean_s1914 : (Or let450 let421) := by timed @cnfAndPos [let421, let448] 0
have lean_s1915 : (Or let421 let450) := by permutateOr lean_s1914, [1, 0], (- 1)
have lean_s1916 : (Or let1035 (Or let1025 (Or let421 let421))) := by R1 lean_s1913, lean_s1915, let449, [(- 1), (- 1)]
have lean_s1917 : (Or let1035 (Or let1025 let421)) := by factor lean_s1916, (- 1)
let lean_s1918 := by R2 lean_s1917, lean_s1648, let54, [(- 1), (- 1)]
let lean_s1919 := by R1 lean_s1918, lean_s1635, let453, [(- 1), (- 1)]
have lean_s1920 : let1030 :=
  (scope (fun lean_a310 : let426 =>
    have lean_s1920 : let1030 :=
      (scope (fun lean_a311 : let426 =>
        have lean_s1920 : let777 := by timed Eq.symm lean_a311
        have lean_s1921 : let426 := by timed Eq.symm lean_s1920
        let lean_s1922 := by timed flipCongrArg lean_s1921 [Eq]
        have lean_s1923 : let580 := by timed rfl
        have lean_s1924 : (Eq let421 let178) := by timed congr lean_s1922 lean_s1923
        have lean_s1925 : (Eq let617 let589) := by timed flipCongrArg lean_r37 [Not]
        have lean_s1926 : (Eq let617 True) := by timed Eq.trans lean_s1925 lean_r189
        have lean_s1927 : (Eq let179 True) := by timed Eq.trans lean_r202 lean_s1926
        have lean_s1928 : let179 := by timed trueElim lean_s1927
        have lean_s1929 : let1032 := by timed Eq.trans lean_s1924 lean_s1928
        have lean_s1930 : let1029 := by timed falseElim lean_s1929
        show let1029 from lean_s1930
      ))
    have lean_s1921 : let1031 := by liftOrNToImp lean_s1920, 1
    have lean_s1922 : let1029 := by timed modusPonens lean_a310 lean_s1921
    show let1029 from lean_s1922
  ))
have lean_s1921 : let1031 := by liftOrNToImp lean_s1920, 1
have lean_s1922 : let1030 := by timed impliesElim lean_s1921
have lean_s1923 : (Or let1029 let1024) := by permutateOr lean_s1922, [1, 0], (- 1)
let lean_s1924 := by R1 lean_s1919, lean_s1923, let421, [(- 1), (- 1)]
have lean_s1925 : (Or let1025 (Or let1024 let1024)) := by R1 lean_s1924, lean_s1721, let135, [(- 1), (- 1)]
have lean_s1926 : (Or let1025 let1024) := by factor lean_s1925, (- 1)
let lean_s1927 := by R2 lean_s1926, lean_s1728, let426, [(- 1), (- 1)]
have lean_s1928 : let1023 := by R2 lean_s1927, lean_s1725, let157, [(- 1), (- 1)]
have lean_s1929 : let429 := by factor lean_s1928, 1
have lean_s1930 : let34 := by R1 lean_s1673, lean_s1929, let428, [(- 1), 0]
let lean_s1931 := by R2 lean_s1660, lean_s1930, let34, [(- 1), 0]
let lean_s1932 := by R2 lean_s1931, lean_s1684, let15, [(- 1), 0]
have lean_s1933 : let425 := by andElim lean_s1614, 26
have lean_s1934 : (Or let423 let77) := by timed impliesElim lean_s1933
have lean_s1935 : (Or let77 let423) := by permutateOr lean_s1934, [1, 0], (- 1)
let lean_s1936 := by R2 lean_s1932, lean_s1935, let77, [(- 1), (- 1)]
let lean_s1937 := by R2 lean_s1936, lean_s1627, let422, [(- 1), (- 1)]
have lean_s1938 : (Or let1035 (Or let1114 (Or let1042 (Or let1040 (Or let271 (Or let1223 let1123)))))) :=
  (scope (fun lean_a311 : let54 =>
    (scope (fun lean_a312 : let34 =>
      (scope (fun lean_a313 : let32 =>
        (scope (fun lean_a314 : let24 =>
          (scope (fun lean_a315 : let15 =>
            (scope (fun lean_a316 : let49 =>
              have lean_s1938 : let1235 := by timed Eq.symm lean_r192
              have lean_s1939 : let594 := by timed eqResolve lean_a316 lean_s1938
              let lean_s1940 := by timed And.intro lean_a314 lean_a312
              have lean_s1941 : let1296 := by timed And.intro lean_s1939 lean_s1940
              have lean_s1942 : let1298 :=
                (scope (fun lean_a311 : let594 =>
                  (scope (fun lean_a312 : let24 =>
                    (scope (fun lean_a313 : let34 =>
                      have lean_s1942 : let1152 := by timed Eq.symm lean_a313
                      have lean_s1943 : let593 := by timed Eq.symm lean_a312
                      have lean_s1944 : let24 := by timed Eq.symm lean_s1943
                      let lean_s1945 := by timed Eq.trans lean_s1942 lean_s1944
                      have lean_s1946 : let1234 := by timed Eq.symm lean_a311
                      have lean_s1947 : let594 := by timed Eq.symm lean_s1946
                      have lean_s1948 : let1237 := by timed flipCongrArg lean_s1947 [xx5fcount]
                      have lean_s1949 : let1122 := by timed Eq.trans lean_s1945 lean_s1948
                      show let1122 from lean_s1949
                ))))))
              have lean_s1943 : let1297 := by liftOrNToImp lean_s1942, 3
              have lean_s1944 : let1122 := by timed modusPonens lean_s1941 lean_s1943
              let lean_s1945 := by timed And.intro lean_a313 lean_a311
              have lean_s1946 : let1229 := by timed And.intro lean_s1939 lean_s1945
              have lean_s1947 : let1232 :=
                (scope (fun lean_a311 : let594 =>
                  (scope (fun lean_a312 : let32 =>
                    (scope (fun lean_a313 : let54 =>
                      have lean_s1947 : let1098 := by timed Eq.symm lean_a313
                      have lean_s1948 : let486 := by timed Eq.symm lean_a312
                      have lean_s1949 : let32 := by timed Eq.symm lean_s1948
                      let lean_s1950 := by timed Eq.trans lean_s1947 lean_s1949
                      have lean_s1951 : let1234 := by timed Eq.symm lean_a311
                      have lean_s1952 : let594 := by timed Eq.symm lean_s1951
                      have lean_s1953 : let1233 := by timed flipCongrArg lean_s1952 [sx5fcount]
                      have lean_s1954 : let1121 := by timed Eq.trans lean_s1950 lean_s1953
                      show let1121 from lean_s1954
                ))))))
              have lean_s1948 : let1230 := by liftOrNToImp lean_s1947, 3
              have lean_s1949 : let1121 := by timed modusPonens lean_s1946 lean_s1948
              let lean_s1950 := by timed And.intro lean_s1944 lean_s1949
              have lean_s1951 : let1123 := by timed And.intro lean_a315 lean_s1950
              show let1123 from lean_s1951
  ))))))))))))
have lean_s1939 : let1302 := by liftOrNToImp lean_s1938, 6
have lean_s1940 : (Eq let268 let268) := by timed rfl
let lean_s1941 := by timed flipCongrArg lean_s1940 [Implies]
have lean_s1942 : let1125 := by timed falseIntro lean_s1753
have lean_s1943 : (Eq let1302 let270) := by timed congr lean_s1941 lean_s1942
have lean_s1944 : (Eq let1302 let269) := by timed Eq.trans lean_s1943 lean_r70
have lean_s1945 : let269 := by timed eqResolve lean_s1939 lean_s1944
have lean_s1946 : (Or let1035 let1301) := by timed flipNotAnd lean_s1945 [let54, let34, let32, let24, let15, let49]
have lean_s1947 : (Or let271 (Or let1223 (Or let1035 let1300))) := by permutateOr lean_s1946, [4, 5, 0, 2, 1, 3], (- 1)
let lean_s1948 := by R1 lean_s1937, lean_s1947, let24, [(- 1), (- 1)]
let lean_s1949 := by R2 lean_s1948, lean_s1930, let34, [(- 1), 0]
have lean_s1950 : (Or let1223 (Or let1035 (Or let1042 let1299))) := by R2 lean_s1949, lean_s1684, let15, [(- 1), 0]
have lean_s1951 : let1299 := by factor lean_s1950, (- 1)
let lean_s1952 := by R2 lean_s1951, lean_s1911, let32, [(- 1), (- 1)]
have lean_s1953 : (Or let1035 (Or let1114 (Or let1281 let1294))) :=
  (scope (fun lean_a311 : let54 =>
    (scope (fun lean_a312 : let34 =>
      (scope (fun lean_a313 : let53 =>
        (scope (fun lean_a314 : let24 =>
          (scope (fun lean_a315 : let15 =>
            (scope (fun lean_a316 : let49 =>
              have lean_s1953 : let1235 := by timed Eq.symm lean_r192
              have lean_s1954 : let594 := by timed eqResolve lean_a316 lean_s1953
              let lean_s1955 := by timed And.intro lean_a314 lean_a312
              have lean_s1956 : let1296 := by timed And.intro lean_s1954 lean_s1955
              have lean_s1957 : let1298 :=
                (scope (fun lean_a312 : let594 =>
                  (scope (fun lean_a313 : let24 =>
                    (scope (fun lean_a314 : let34 =>
                      have lean_s1957 : let1152 := by timed Eq.symm lean_a314
                      have lean_s1958 : let593 := by timed Eq.symm lean_a313
                      have lean_s1959 : let24 := by timed Eq.symm lean_s1958
                      let lean_s1960 := by timed Eq.trans lean_s1957 lean_s1959
                      have lean_s1961 : let1234 := by timed Eq.symm lean_a312
                      have lean_s1962 : let594 := by timed Eq.symm lean_s1961
                      have lean_s1963 : let1237 := by timed flipCongrArg lean_s1962 [xx5fcount]
                      have lean_s1964 : let1122 := by timed Eq.trans lean_s1960 lean_s1963
                      show let1122 from lean_s1964
                ))))))
              have lean_s1958 : let1297 := by liftOrNToImp lean_s1957, 3
              have lean_s1959 : let1122 := by timed modusPonens lean_s1956 lean_s1958
              have lean_s1960 : let1288 := by timed And.intro lean_a313 lean_a311
              have lean_s1961 : let1290 :=
                (scope (fun lean_a312 : let53 =>
                  (scope (fun lean_a313 : let54 =>
                    have lean_s1961 : let1098 := by timed Eq.symm lean_a313
                    have lean_s1962 : (Eq let52 let31) := by timed Eq.symm lean_a312
                    have lean_s1963 : let53 := by timed Eq.symm lean_s1962
                    have lean_s1964 : let59 := by timed Eq.trans lean_s1961 lean_s1963
                    show let59 from lean_s1964
                ))))
              have lean_s1962 : let1289 := by liftOrNToImp lean_s1961, 2
              have lean_s1963 : let59 := by timed modusPonens lean_s1960 lean_s1962
              have lean_s1964 : let1287 :=
                (scope (fun lean_a312 : let59 =>
                  have lean_s1964 : let58 := by timed eqResolve lean_a312 lean_r4
                  have lean_s1965 : let1283 := by timed Eq.symm lean_s1964
                  show let1283 from lean_s1965
                ))
              have lean_s1965 : let1286 := by liftOrNToImp lean_s1964, 1
              have lean_s1966 : let1283 := by timed modusPonens lean_s1963 lean_s1965
              have lean_s1967 : let1295 := by timed And.intro lean_s1954 lean_s1966
              have lean_s1968 : (Or let1231 let1285) :=
                (scope (fun lean_a313 : let594 =>
                  (scope (fun lean_a314 : let1283 =>
                    have lean_s1968 : let58 := by timed Eq.symm lean_a314
                    have lean_s1969 : let1283 := by timed Eq.symm lean_s1968
                    have lean_s1970 : let1234 := by timed Eq.symm lean_a313
                    have lean_s1971 : let594 := by timed Eq.symm lean_s1970
                    have lean_s1972 : let1233 := by timed flipCongrArg lean_s1971 [sx5fcount]
                    have lean_s1973 : let1059 := by timed Eq.trans lean_s1969 lean_s1972
                    show let1059 from lean_s1973
                ))))
              have lean_s1969 : (Implies let1295 let1059) := by liftOrNToImp lean_s1968, 2
              have lean_s1970 : let1059 := by timed modusPonens lean_s1967 lean_s1969
              let lean_s1971 := by timed And.intro lean_s1959 lean_s1970
              have lean_s1972 : let1163 := by timed And.intro lean_a315 lean_s1971
              show let1163 from lean_s1972
  ))))))))))))
have lean_s1954 : let1293 := by liftOrNToImp lean_s1953, 6
have lean_s1955 : (Eq let55 let55) := by timed rfl
let lean_s1956 := by timed flipCongrArg lean_s1955 [Implies]
have lean_s1957 : let1165 := by timed falseIntro lean_s5
have lean_s1958 : (Eq let1293 let57) := by timed congr lean_s1956 lean_s1957
have lean_s1959 : (Eq let1293 let56) := by timed Eq.trans lean_s1958 lean_r3
have lean_s1960 : let56 := by timed eqResolve lean_s1954 lean_s1959
have lean_s1961 : (Or let1035 (Or let1114 (Or let1281 let1225))) := by timed flipNotAnd lean_s1960 [let54, let34, let53, let24, let15, let49]
have lean_s1962 : (Or let271 (Or let1223 (Or let1035 (Or let1281 let1292)))) := by permutateOr lean_s1961, [4, 5, 0, 2, 1, 3], (- 1)
let lean_s1963 := by R2 lean_s1962, lean_s1930, let34, [(- 1), 0]
let lean_s1964 := by R2 lean_s1963, lean_s1684, let15, [(- 1), 0]
let lean_s1965 := by R2 lean_s1964, lean_s1627, let24, [(- 1), (- 1)]
have lean_s1966 : (Or let423 let230) := by timed @cnfAndPos [let421, let230] 1
have lean_s1967 : (Or let230 let423) := by permutateOr lean_s1966, [1, 0], (- 1)
let lean_s1968 := by R1 lean_s1965, lean_s1967, let422, [(- 1), (- 1)]
have lean_s1969 : let1276 :=
  (scope (fun lean_a314 : let448 =>
    have lean_s1969 : let1276 :=
      (scope (fun lean_a315 : let448 =>
        have lean_s1969 : let751 := by timed Eq.symm lean_a315
        have lean_s1970 : let448 := by timed Eq.symm lean_s1969
        let lean_s1971 := by timed flipCongrArg lean_s1970 [Eq]
        have lean_s1972 : let573 := by timed rfl
        have lean_s1973 : (Eq let230 let599) := by timed congr lean_s1971 lean_s1972
        have lean_s1974 : (Eq let600 let589) := by timed flipCongrArg lean_r206 [Not]
        have lean_s1975 : (Eq let600 True) := by timed Eq.trans lean_s1974 lean_r189
        have lean_s1976 : (Eq let601 True) := by timed Eq.trans lean_r195 lean_s1975
        have lean_s1977 : let601 := by timed trueElim lean_s1976
        have lean_s1978 : (Eq let230 False) := by timed Eq.trans lean_s1973 lean_s1977
        have lean_s1979 : let1258 := by timed falseElim lean_s1978
        show let1258 from lean_s1979
      ))
    have lean_s1970 : let1277 := by liftOrNToImp lean_s1969, 1
    have lean_s1971 : let1258 := by timed modusPonens lean_a314 lean_s1970
    show let1258 from lean_s1971
  ))
have lean_s1970 : let1277 := by liftOrNToImp lean_s1969, 1
have lean_s1971 : let1276 := by timed impliesElim lean_s1970
let lean_s1972 := by R1 lean_s1968, lean_s1971, let230, [(- 1), (- 1)]
have lean_s1973 : let452 := by andElim lean_s1614, 14
have lean_s1974 : (Or let450 let53) := by timed impliesElim lean_s1973
have lean_s1975 : (Or let53 let450) := by permutateOr lean_s1974, [1, 0], (- 1)
let lean_s1976 := by R2 lean_s1972, lean_s1975, let53, [(- 1), (- 1)]
have lean_s1977 : (Or let450 let448) := by timed @cnfAndPos [let421, let448] 1
have lean_s1978 : (Or let448 let450) := by permutateOr lean_s1977, [1, 0], (- 1)
let lean_s1979 := by R2 lean_s1976, lean_s1978, let448, [(- 1), (- 1)]
let lean_s1980 := by R2 lean_s1979, lean_s39, let49, [(- 1), (- 1)]
let lean_s1981 := by R1 lean_s1980, lean_s1769, let373, [(- 1), 0]
let lean_s1982 := by R2 lean_s1981, lean_s1767, let1192, [(- 1), 0]
have lean_s1983 : (Or let1035 (Or let1114 (Or let1281 let1169))) :=
  (scope (fun lean_a315 : let54 =>
    (scope (fun lean_a316 : let34 =>
      (scope (fun lean_a317 : let53 =>
        (scope (fun lean_a318 : let42 =>
          (scope (fun lean_a319 : let24 =>
            (scope (fun lean_a320 : let20 =>
              (scope (fun lean_a321 : let15 =>
                (scope (fun lean_a322 : let8 =>
                  have lean_s1983 : let1099 := by timed Eq.symm lean_r27
                  have lean_s1984 : let146 := by timed eqResolve lean_a322 lean_s1983
                  let lean_s1985 := by timed And.intro lean_a319 lean_a316
                  let lean_s1986 := by timed And.intro lean_a320 lean_s1985
                  have lean_s1987 : let1147 := by timed And.intro lean_s1984 lean_s1986
                  have lean_s1988 : let1151 :=
                    (scope (fun lean_a315 : let146 =>
                      (scope (fun lean_a316 : let20 =>
                        (scope (fun lean_a317 : let24 =>
                          (scope (fun lean_a318 : let34 =>
                            have lean_s1988 : let1152 := by timed Eq.symm lean_a318
                            have lean_s1989 : let593 := by timed Eq.symm lean_a317
                            have lean_s1990 : let24 := by timed Eq.symm lean_s1989
                            let lean_s1991 := by timed Eq.trans lean_s1988 lean_s1990
                            have lean_s1992 : let585 := by timed Eq.symm lean_a316
                            have lean_s1993 : let20 := by timed Eq.symm lean_s1992
                            let lean_s1994 := by timed Eq.trans lean_s1991 lean_s1993
                            have lean_s1995 : let1090 := by timed Eq.symm lean_a315
                            have lean_s1996 : let146 := by timed Eq.symm lean_s1995
                            have lean_s1997 : let1106 := by timed flipCongrArg lean_s1996 [xx5fcount]
                            have lean_s1998 : let1122 := by timed Eq.trans lean_s1994 lean_s1997
                            show let1122 from lean_s1998
                    ))))))))
                  have lean_s1989 : let1148 := by liftOrNToImp lean_s1988, 4
                  have lean_s1990 : let1122 := by timed modusPonens lean_s1987 lean_s1989
                  have lean_s1991 : let1288 := by timed And.intro lean_a317 lean_a315
                  have lean_s1992 : let1290 :=
                    (scope (fun lean_a315 : let53 =>
                      (scope (fun lean_a316 : let54 =>
                        have lean_s1992 : let1098 := by timed Eq.symm lean_a316
                        have lean_s1993 : (Eq let52 let31) := by timed Eq.symm lean_a315
                        have lean_s1994 : let53 := by timed Eq.symm lean_s1993
                        have lean_s1995 : let59 := by timed Eq.trans lean_s1992 lean_s1994
                        show let59 from lean_s1995
                    ))))
                  have lean_s1993 : let1289 := by liftOrNToImp lean_s1992, 2
                  have lean_s1994 : let59 := by timed modusPonens lean_s1991 lean_s1993
                  have lean_s1995 : let1287 :=
                    (scope (fun lean_a315 : let59 =>
                      have lean_s1995 : let58 := by timed eqResolve lean_a315 lean_r4
                      have lean_s1996 : let1283 := by timed Eq.symm lean_s1995
                      show let1283 from lean_s1996
                    ))
                  have lean_s1996 : let1286 := by liftOrNToImp lean_s1995, 1
                  have lean_s1997 : let1283 := by timed modusPonens lean_s1994 lean_s1996
                  let lean_s1998 := by timed And.intro lean_a318 lean_s1997
                  have lean_s1999 : let1284 := by timed And.intro lean_s1984 lean_s1998
                  have lean_s2000 : (Or let1087 (Or let1110 let1285)) :=
                    (scope (fun lean_a315 : let146 =>
                      (scope (fun lean_a316 : let42 =>
                        (scope (fun lean_a317 : let1283 =>
                          have lean_s2000 : let58 := by timed Eq.symm lean_a317
                          have lean_s2001 : let1283 := by timed Eq.symm lean_s2000
                          have lean_s2002 : let63 := by timed Eq.symm lean_a316
                          have lean_s2003 : let42 := by timed Eq.symm lean_s2002
                          let lean_s2004 := by timed Eq.trans lean_s2001 lean_s2003
                          have lean_s2005 : let1090 := by timed Eq.symm lean_a315
                          have lean_s2006 : let146 := by timed Eq.symm lean_s2005
                          have lean_s2007 : let1089 := by timed flipCongrArg lean_s2006 [sx5fcount]
                          have lean_s2008 : let1059 := by timed Eq.trans lean_s2004 lean_s2007
                          show let1059 from lean_s2008
                    ))))))
                  have lean_s2001 : (Implies let1284 let1059) := by liftOrNToImp lean_s2000, 3
                  have lean_s2002 : let1059 := by timed modusPonens lean_s1999 lean_s2001
                  let lean_s2003 := by timed And.intro lean_s1990 lean_s2002
                  have lean_s2004 : let1163 := by timed And.intro lean_a321 lean_s2003
                  show let1163 from lean_s2004
  ))))))))))))))))
have lean_s1984 : let1282 := by liftOrNToImp lean_s1983, 8
have lean_s1985 : (Eq let788 let788) := by timed rfl
let lean_s1986 := by timed flipCongrArg lean_s1985 [Implies]
have lean_s1987 : let1165 := by timed falseIntro lean_s5
have lean_s1988 : (Eq let1282 let790) := by timed congr lean_s1986 lean_s1987
have lean_s1989 : (Eq let1282 let789) := by timed Eq.trans lean_s1988 lean_r265
have lean_s1990 : let789 := by timed eqResolve lean_s1984 lean_s1989
have lean_s1991 : (Or let1035 (Or let1114 (Or let1281 let1118))) := by timed flipNotAnd lean_s1990 [let54, let34, let53, let42, let24, let20, let15, let8]
have lean_s1992 : (Or let271 (Or let768 (Or let1035 (Or let1281 let1116)))) := by permutateOr lean_s1991, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s1993 := by R2 lean_s1992, lean_s1930, let34, [(- 1), 0]
let lean_s1994 := by R2 lean_s1993, lean_s1684, let15, [(- 1), 0]
let lean_s1995 := by R2 lean_s1994, lean_s1800, let20, [(- 1), (- 1)]
let lean_s1996 := by R2 lean_s1995, lean_s1862, let42, [(- 1), (- 1)]
let lean_s1997 := by R2 lean_s1996, lean_s1627, let24, [(- 1), (- 1)]
have lean_s1998 : (Or let418 let124) := by timed @cnfAndPos [let124, let313] 0
have lean_s1999 : (Or let124 let418) := by permutateOr lean_s1998, [1, 0], (- 1)
let lean_s2000 := by R1 lean_s1997, lean_s1999, let417, [(- 1), (- 1)]
have lean_s2001 : (Or let126 let124) := by timed @cnfAndPos [let124, let122] 0
have lean_s2002 : (Or let124 let126) := by permutateOr lean_s2001, [1, 0], (- 1)
let lean_s2003 := by R1 lean_s2000, lean_s2002, let125, [(- 1), (- 1)]
have lean_s2004 : (Or let768 (Or let1035 (Or let1281 (Or let124 let1280)))) := by R1 lean_s2003, lean_s1967, let422, [(- 1), (- 1)]
have lean_s2005 : (Or let768 (Or let1035 (Or let1281 let1280))) := by factor lean_s2004, (- 1)
have lean_s2006 : let1278 :=
  (scope (fun lean_a315 : let448 =>
    have lean_s2006 : let1278 :=
      (scope (fun lean_a315 : let448 =>
        have lean_s2006 : let751 := by timed Eq.symm lean_a315
        have lean_s2007 : let448 := by timed Eq.symm lean_s2006
        let lean_s2008 := by timed flipCongrArg lean_s2007 [Eq]
        have lean_s2009 : let580 := by timed rfl
        have lean_s2010 : (Eq let124 let499) := by timed congr lean_s2008 lean_s2009
        have lean_s2011 : (Eq let711 let589) := by timed flipCongrArg lean_r147 [Not]
        have lean_s2012 : (Eq let711 True) := by timed Eq.trans lean_s2011 lean_r189
        have lean_s2013 : (Eq let500 True) := by timed Eq.trans lean_r212 lean_s2012
        have lean_s2014 : let500 := by timed trueElim lean_s2013
        have lean_s2015 : let1262 := by timed Eq.trans lean_s2010 lean_s2014
        have lean_s2016 : let1259 := by timed falseElim lean_s2015
        show let1259 from lean_s2016
      ))
    have lean_s2007 : let1279 := by liftOrNToImp lean_s2006, 1
    have lean_s2008 : let1259 := by timed modusPonens lean_a315 lean_s2007
    show let1259 from lean_s2008
  ))
have lean_s2007 : let1279 := by liftOrNToImp lean_s2006, 1
have lean_s2008 : let1278 := by timed impliesElim lean_s2007
have lean_s2009 : (Or let1259 let1274) := by permutateOr lean_s2008, [1, 0], (- 1)
let lean_s2010 := by R1 lean_s2005, lean_s2009, let124, [(- 1), (- 1)]
let lean_s2011 := by R1 lean_s2010, lean_s1971, let230, [(- 1), (- 1)]
have lean_s2012 : (Or let768 (Or let1035 (Or let1274 let1275))) := by R2 lean_s2011, lean_s1975, let53, [(- 1), (- 1)]
have lean_s2013 : (Or let768 (Or let1035 let1275)) := by factor lean_s2012, (- 1)
have lean_s2014 : (Or let768 (Or let1035 (Or let450 let450))) := by R2 lean_s2013, lean_s1978, let448, [(- 1), (- 1)]
have lean_s2015 : (Or let768 let1273) := by factor lean_s2014, (- 1)
let lean_s2016 := by R2 lean_s2015, lean_s1911, let449, [(- 1), (- 1)]
have lean_s2017 : (Or let1035 (Or let1114 (Or let1042 (Or let1110 (Or let1263 let1161))))) :=
  (scope (fun lean_a315 : let54 =>
    (scope (fun lean_a316 : let34 =>
      (scope (fun lean_a317 : let32 =>
        (scope (fun lean_a318 : let42 =>
          (scope (fun lean_a319 : let77 =>
            (scope (fun lean_a320 : let20 =>
              (scope (fun lean_a321 : let15 =>
                (scope (fun lean_a322 : let8 =>
                  have lean_s2017 : let1099 := by timed Eq.symm lean_r27
                  have lean_s2018 : let146 := by timed eqResolve lean_a322 lean_s2017
                  have lean_s2019 : let1270 := by timed And.intro lean_a319 lean_a316
                  have lean_s2020 : let1272 :=
                    (scope (fun lean_a315 : let77 =>
                      (scope (fun lean_a316 : let34 =>
                        have lean_s2020 : let1152 := by timed Eq.symm lean_a316
                        have lean_s2021 : (Eq let76 let23) := by timed Eq.symm lean_a315
                        have lean_s2022 : let77 := by timed Eq.symm lean_s2021
                        have lean_s2023 : let787 := by timed Eq.trans lean_s2020 lean_s2022
                        show let787 from lean_s2023
                    ))))
                  have lean_s2021 : let1271 := by liftOrNToImp lean_s2020, 2
                  have lean_s2022 : let787 := by timed modusPonens lean_s2019 lean_s2021
                  have lean_s2023 : let1269 :=
                    (scope (fun lean_a315 : let787 =>
                      have lean_s2023 : let786 := by timed eqResolve lean_a315 lean_r264
                      have lean_s2024 : let1265 := by timed Eq.symm lean_s2023
                      show let1265 from lean_s2024
                    ))
                  have lean_s2024 : let1268 := by liftOrNToImp lean_s2023, 1
                  have lean_s2025 : let1265 := by timed modusPonens lean_s2022 lean_s2024
                  let lean_s2026 := by timed And.intro lean_a320 lean_s2025
                  have lean_s2027 : let1266 := by timed And.intro lean_s2018 lean_s2026
                  have lean_s2028 : (Or let1087 (Or let1051 let1267)) :=
                    (scope (fun lean_a315 : let146 =>
                      (scope (fun lean_a316 : let20 =>
                        (scope (fun lean_a317 : let1265 =>
                          have lean_s2028 : let786 := by timed Eq.symm lean_a317
                          have lean_s2029 : let1265 := by timed Eq.symm lean_s2028
                          have lean_s2030 : let585 := by timed Eq.symm lean_a316
                          have lean_s2031 : let20 := by timed Eq.symm lean_s2030
                          let lean_s2032 := by timed Eq.trans lean_s2029 lean_s2031
                          have lean_s2033 : let1090 := by timed Eq.symm lean_a315
                          have lean_s2034 : let146 := by timed Eq.symm lean_s2033
                          have lean_s2035 : let1106 := by timed flipCongrArg lean_s2034 [xx5fcount]
                          have lean_s2036 : let1060 := by timed Eq.trans lean_s2032 lean_s2035
                          show let1060 from lean_s2036
                    ))))))
                  have lean_s2029 : (Implies let1266 let1060) := by liftOrNToImp lean_s2028, 3
                  have lean_s2030 : let1060 := by timed modusPonens lean_s2027 lean_s2029
                  let lean_s2031 := by timed And.intro lean_a317 lean_a315
                  let lean_s2032 := by timed And.intro lean_a318 lean_s2031
                  have lean_s2033 : let1141 := by timed And.intro lean_s2018 lean_s2032
                  have lean_s2034 : let1145 :=
                    (scope (fun lean_a315 : let146 =>
                      (scope (fun lean_a316 : let42 =>
                        (scope (fun lean_a317 : let32 =>
                          (scope (fun lean_a318 : let54 =>
                            have lean_s2034 : let1098 := by timed Eq.symm lean_a318
                            have lean_s2035 : let486 := by timed Eq.symm lean_a317
                            have lean_s2036 : let32 := by timed Eq.symm lean_s2035
                            let lean_s2037 := by timed Eq.trans lean_s2034 lean_s2036
                            have lean_s2038 : let63 := by timed Eq.symm lean_a316
                            have lean_s2039 : let42 := by timed Eq.symm lean_s2038
                            let lean_s2040 := by timed Eq.trans lean_s2037 lean_s2039
                            have lean_s2041 : let1090 := by timed Eq.symm lean_a315
                            have lean_s2042 : let146 := by timed Eq.symm lean_s2041
                            have lean_s2043 : let1089 := by timed flipCongrArg lean_s2042 [sx5fcount]
                            have lean_s2044 : let1121 := by timed Eq.trans lean_s2040 lean_s2043
                            show let1121 from lean_s2044
                    ))))))))
                  have lean_s2035 : let1142 := by liftOrNToImp lean_s2034, 4
                  have lean_s2036 : let1121 := by timed modusPonens lean_s2033 lean_s2035
                  let lean_s2037 := by timed And.intro lean_s2030 lean_s2036
                  have lean_s2038 : let1155 := by timed And.intro lean_a321 lean_s2037
                  show let1155 from lean_s2038
  ))))))))))))))))
have lean_s2018 : let1264 := by liftOrNToImp lean_s2017, 8
have lean_s2019 : (Eq let514 let514) := by timed rfl
let lean_s2020 := by timed flipCongrArg lean_s2019 [Implies]
have lean_s2021 : let1157 := by timed falseIntro lean_s1654
have lean_s2022 : (Eq let1264 let516) := by timed congr lean_s2020 lean_s2021
have lean_s2023 : (Eq let1264 let515) := by timed Eq.trans lean_s2022 lean_r157
have lean_s2024 : let515 := by timed eqResolve lean_s2018 lean_s2023
have lean_s2025 : (Or let1035 (Or let1114 (Or let1042 (Or let1110 (Or let1263 let1056))))) := by timed flipNotAnd lean_s2024 [let54, let34, let32, let42, let77, let20, let15, let8]
have lean_s2026 : (Or let271 (Or let768 (Or let1035 (Or let1042 (Or let1110 (Or let1114 (Or let1263 let1051))))))) := by permutateOr lean_s2025, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s2027 := by R2 lean_s2026, lean_s1930, let34, [(- 1), 0]
let lean_s2028 := by R2 lean_s2027, lean_s1684, let15, [(- 1), 0]
let lean_s2029 := by R2 lean_s2028, lean_s1800, let20, [(- 1), (- 1)]
let lean_s2030 := by R2 lean_s2029, lean_s1862, let42, [(- 1), (- 1)]
let lean_s2031 := by R1 lean_s2030, lean_s1999, let417, [(- 1), (- 1)]
have lean_s2032 : (Or let768 (Or let1035 (Or let1042 (Or let1263 (Or let124 let124))))) := by R1 lean_s2031, lean_s2002, let125, [(- 1), (- 1)]
have lean_s2033 : (Or let768 (Or let1035 (Or let1042 (Or let1263 let124)))) := by factor lean_s2032, (- 1)
have lean_s2034 : let1260 :=
  (scope (fun lean_a315 : let230 =>
    have lean_s2034 : let1260 :=
      (scope (fun lean_a316 : let230 =>
        have lean_s2034 : let231 := by timed Eq.symm lean_a316
        have lean_s2035 : let230 := by timed Eq.symm lean_s2034
        let lean_s2036 := by timed flipCongrArg lean_s2035 [Eq]
        have lean_s2037 : let580 := by timed rfl
        have lean_s2038 : (Eq let124 let178) := by timed congr lean_s2036 lean_s2037
        have lean_s2039 : (Eq let617 let589) := by timed flipCongrArg lean_r37 [Not]
        have lean_s2040 : (Eq let617 True) := by timed Eq.trans lean_s2039 lean_r189
        have lean_s2041 : (Eq let179 True) := by timed Eq.trans lean_r202 lean_s2040
        have lean_s2042 : let179 := by timed trueElim lean_s2041
        have lean_s2043 : let1262 := by timed Eq.trans lean_s2038 lean_s2042
        have lean_s2044 : let1259 := by timed falseElim lean_s2043
        show let1259 from lean_s2044
      ))
    have lean_s2035 : let1261 := by liftOrNToImp lean_s2034, 1
    have lean_s2036 : let1259 := by timed modusPonens lean_a315 lean_s2035
    show let1259 from lean_s2036
  ))
have lean_s2035 : let1261 := by liftOrNToImp lean_s2034, 1
have lean_s2036 : let1260 := by timed impliesElim lean_s2035
have lean_s2037 : (Or let1259 let1258) := by permutateOr lean_s2036, [1, 0], (- 1)
let lean_s2038 := by R1 lean_s2033, lean_s2037, let124, [(- 1), (- 1)]
let lean_s2039 := by R2 lean_s2038, lean_s1935, let77, [(- 1), (- 1)]
have lean_s2040 : (Or let768 (Or let1035 (Or let1042 (Or let423 let423)))) := by R2 lean_s2039, lean_s1967, let230, [(- 1), (- 1)]
have lean_s2041 : (Or let768 (Or let1035 (Or let1042 let423))) := by factor lean_s2040, (- 1)
let lean_s2042 := by R2 lean_s2041, lean_s1627, let422, [(- 1), (- 1)]
have lean_s2043 : (Or let1035 (Or let1114 (Or let1042 (Or let1054 let1168)))) :=
  (scope (fun lean_a316 : let54 =>
    (scope (fun lean_a317 : let34 =>
      (scope (fun lean_a318 : let32 =>
        (scope (fun lean_a319 : let30 =>
          (scope (fun lean_a320 : let24 =>
            (scope (fun lean_a321 : let20 =>
              (scope (fun lean_a322 : let15 =>
                (scope (fun lean_a323 : let8 =>
                  have lean_s2043 : let1099 := by timed Eq.symm lean_r27
                  have lean_s2044 : let146 := by timed eqResolve lean_a323 lean_s2043
                  let lean_s2045 := by timed And.intro lean_a320 lean_a317
                  let lean_s2046 := by timed And.intro lean_a321 lean_s2045
                  have lean_s2047 : let1147 := by timed And.intro lean_s2044 lean_s2046
                  have lean_s2048 : let1151 :=
                    (scope (fun lean_a316 : let146 =>
                      (scope (fun lean_a317 : let20 =>
                        (scope (fun lean_a318 : let24 =>
                          (scope (fun lean_a319 : let34 =>
                            have lean_s2048 : let1152 := by timed Eq.symm lean_a319
                            have lean_s2049 : let593 := by timed Eq.symm lean_a318
                            have lean_s2050 : let24 := by timed Eq.symm lean_s2049
                            let lean_s2051 := by timed Eq.trans lean_s2048 lean_s2050
                            have lean_s2052 : let585 := by timed Eq.symm lean_a317
                            have lean_s2053 : let20 := by timed Eq.symm lean_s2052
                            let lean_s2054 := by timed Eq.trans lean_s2051 lean_s2053
                            have lean_s2055 : let1090 := by timed Eq.symm lean_a316
                            have lean_s2056 : let146 := by timed Eq.symm lean_s2055
                            have lean_s2057 : let1106 := by timed flipCongrArg lean_s2056 [xx5fcount]
                            have lean_s2058 : let1122 := by timed Eq.trans lean_s2054 lean_s2057
                            show let1122 from lean_s2058
                    ))))))))
                  have lean_s2049 : let1148 := by liftOrNToImp lean_s2048, 4
                  have lean_s2050 : let1122 := by timed modusPonens lean_s2047 lean_s2049
                  let lean_s2051 := by timed And.intro lean_a318 lean_a316
                  have lean_s2052 : let1094 := by timed And.intro lean_a319 lean_s2051
                  have lean_s2053 : let1096 :=
                    (scope (fun lean_a316 : let30 =>
                      (scope (fun lean_a317 : let32 =>
                        (scope (fun lean_a318 : let54 =>
                          have lean_s2053 : let1098 := by timed Eq.symm lean_a318
                          have lean_s2054 : let486 := by timed Eq.symm lean_a317
                          have lean_s2055 : let32 := by timed Eq.symm lean_s2054
                          let lean_s2056 := by timed Eq.trans lean_s2053 lean_s2055
                          have lean_s2057 : let1097 := by timed Eq.symm lean_a316
                          have lean_s2058 : let30 := by timed Eq.symm lean_s2057
                          have lean_s2059 : let735 := by timed Eq.trans lean_s2056 lean_s2058
                          show let735 from lean_s2059
                    ))))))
                  have lean_s2054 : let1095 := by liftOrNToImp lean_s2053, 3
                  have lean_s2055 : let735 := by timed modusPonens lean_s2052 lean_s2054
                  have lean_s2056 : let1092 :=
                    (scope (fun lean_a316 : let735 =>
                      have lean_s2056 : let734 := by timed eqResolve lean_a316 lean_r229
                      have lean_s2057 : let1084 := by timed Eq.symm lean_s2056
                      show let1084 from lean_s2057
                    ))
                  have lean_s2057 : let1091 := by liftOrNToImp lean_s2056, 1
                  have lean_s2058 : let1084 := by timed modusPonens lean_s2055 lean_s2057
                  have lean_s2059 : let1085 := by timed And.intro lean_s2044 lean_s2058
                  have lean_s2060 : let1088 :=
                    (scope (fun lean_a316 : let146 =>
                      (scope (fun lean_a317 : let1084 =>
                        have lean_s2060 : let734 := by timed Eq.symm lean_a317
                        have lean_s2061 : let1084 := by timed Eq.symm lean_s2060
                        have lean_s2062 : let1090 := by timed Eq.symm lean_a316
                        have lean_s2063 : let146 := by timed Eq.symm lean_s2062
                        have lean_s2064 : let1089 := by timed flipCongrArg lean_s2063 [sx5fcount]
                        have lean_s2065 : let1059 := by timed Eq.trans lean_s2061 lean_s2064
                        show let1059 from lean_s2065
                    ))))
                  have lean_s2061 : let1086 := by liftOrNToImp lean_s2060, 2
                  have lean_s2062 : let1059 := by timed modusPonens lean_s2059 lean_s2061
                  let lean_s2063 := by timed And.intro lean_s2050 lean_s2062
                  have lean_s2064 : let1163 := by timed And.intro lean_a322 lean_s2063
                  show let1163 from lean_s2064
  ))))))))))))))))
have lean_s2044 : let1257 := by liftOrNToImp lean_s2043, 8
have lean_s2045 : (Eq let321 let321) := by timed rfl
let lean_s2046 := by timed flipCongrArg lean_s2045 [Implies]
have lean_s2047 : let1165 := by timed falseIntro lean_s5
have lean_s2048 : (Eq let1257 let323) := by timed congr lean_s2046 lean_s2047
have lean_s2049 : (Eq let1257 let322) := by timed Eq.trans lean_s2048 lean_r97
have lean_s2050 : let322 := by timed eqResolve lean_s2044 lean_s2049
have lean_s2051 : (Or let1035 let1256) := by timed flipNotAnd lean_s2050 [let54, let34, let32, let30, let24, let20, let15, let8]
have lean_s2052 : (Or let271 (Or let768 (Or let1035 let1255))) := by permutateOr lean_s2051, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s2053 := by R2 lean_s2052, lean_s1930, let34, [(- 1), 0]
let lean_s2054 := by R2 lean_s2053, lean_s1684, let15, [(- 1), 0]
let lean_s2055 := by R2 lean_s2054, lean_s1887, let30, [(- 1), (- 1)]
let lean_s2056 := by R2 lean_s2055, lean_s1862, let125, [(- 1), (- 1)]
have lean_s2057 : (Or let768 (Or let1035 (Or let1042 (Or let1040 (Or let1051 (Or let768 let1254)))))) := by R1 lean_s2056, lean_s1847, let42, [(- 1), (- 1)]
have lean_s2058 : (Or let768 (Or let1035 let1254)) := by factor lean_s2057, (- 1)
let lean_s2059 := by R2 lean_s2058, lean_s1800, let20, [(- 1), (- 1)]
have lean_s2060 : (Or let1035 (Or let1114 (Or let1042 (Or let1110 (Or let1040 (Or let1177 let1160)))))) :=
  (scope (fun lean_a316 : let54 =>
    (scope (fun lean_a317 : let34 =>
      (scope (fun lean_a318 : let32 =>
        (scope (fun lean_a319 : let42 =>
          (scope (fun lean_a320 : let24 =>
            (scope (fun lean_a321 : let41 =>
              (scope (fun lean_a322 : let15 =>
                (scope (fun lean_a323 : let8 =>
                  have lean_s2060 : let1099 := by timed Eq.symm lean_r27
                  have lean_s2061 : let146 := by timed eqResolve lean_a323 lean_s2060
                  let lean_s2062 := by timed And.intro lean_a320 lean_a317
                  have lean_s2063 : let1251 := by timed And.intro lean_a321 lean_s2062
                  have lean_s2064 : let1253 :=
                    (scope (fun lean_a316 : let41 =>
                      (scope (fun lean_a317 : let24 =>
                        (scope (fun lean_a318 : let34 =>
                          have lean_s2064 : let1152 := by timed Eq.symm lean_a318
                          have lean_s2065 : let593 := by timed Eq.symm lean_a317
                          have lean_s2066 : let24 := by timed Eq.symm lean_s2065
                          let lean_s2067 := by timed Eq.trans lean_s2064 lean_s2066
                          have lean_s2068 : let1191 := by timed Eq.symm lean_a316
                          have lean_s2069 : let41 := by timed Eq.symm lean_s2068
                          have lean_s2070 : let278 := by timed Eq.trans lean_s2067 lean_s2069
                          show let278 from lean_s2070
                    ))))))
                  have lean_s2065 : let1252 := by liftOrNToImp lean_s2064, 3
                  have lean_s2066 : let278 := by timed modusPonens lean_s2063 lean_s2065
                  have lean_s2067 : let1250 :=
                    (scope (fun lean_a316 : let278 =>
                      have lean_s2067 : let277 := by timed eqResolve lean_a316 lean_r76
                      have lean_s2068 : let1245 := by timed Eq.symm lean_s2067
                      show let1245 from lean_s2068
                    ))
                  have lean_s2068 : let1249 := by liftOrNToImp lean_s2067, 1
                  have lean_s2069 : let1245 := by timed modusPonens lean_s2066 lean_s2068
                  have lean_s2070 : let1246 := by timed And.intro lean_s2061 lean_s2069
                  have lean_s2071 : let1248 :=
                    (scope (fun lean_a317 : let146 =>
                      (scope (fun lean_a318 : let1245 =>
                        have lean_s2071 : let277 := by timed Eq.symm lean_a318
                        have lean_s2072 : let1245 := by timed Eq.symm lean_s2071
                        have lean_s2073 : let1090 := by timed Eq.symm lean_a317
                        have lean_s2074 : let146 := by timed Eq.symm lean_s2073
                        have lean_s2075 : let1106 := by timed flipCongrArg lean_s2074 [xx5fcount]
                        have lean_s2076 : let1060 := by timed Eq.trans lean_s2072 lean_s2075
                        show let1060 from lean_s2076
                    ))))
                  have lean_s2072 : let1247 := by liftOrNToImp lean_s2071, 2
                  have lean_s2073 : let1060 := by timed modusPonens lean_s2070 lean_s2072
                  let lean_s2074 := by timed And.intro lean_a318 lean_a316
                  let lean_s2075 := by timed And.intro lean_a319 lean_s2074
                  have lean_s2076 : let1141 := by timed And.intro lean_s2061 lean_s2075
                  have lean_s2077 : let1145 :=
                    (scope (fun lean_a318 : let146 =>
                      (scope (fun lean_a319 : let42 =>
                        (scope (fun lean_a320 : let32 =>
                          (scope (fun lean_a321 : let54 =>
                            have lean_s2077 : let1098 := by timed Eq.symm lean_a321
                            have lean_s2078 : let486 := by timed Eq.symm lean_a320
                            have lean_s2079 : let32 := by timed Eq.symm lean_s2078
                            let lean_s2080 := by timed Eq.trans lean_s2077 lean_s2079
                            have lean_s2081 : let63 := by timed Eq.symm lean_a319
                            have lean_s2082 : let42 := by timed Eq.symm lean_s2081
                            let lean_s2083 := by timed Eq.trans lean_s2080 lean_s2082
                            have lean_s2084 : let1090 := by timed Eq.symm lean_a318
                            have lean_s2085 : let146 := by timed Eq.symm lean_s2084
                            have lean_s2086 : let1089 := by timed flipCongrArg lean_s2085 [sx5fcount]
                            have lean_s2087 : let1121 := by timed Eq.trans lean_s2083 lean_s2086
                            show let1121 from lean_s2087
                    ))))))))
                  have lean_s2078 : let1142 := by liftOrNToImp lean_s2077, 4
                  have lean_s2079 : let1121 := by timed modusPonens lean_s2076 lean_s2078
                  let lean_s2080 := by timed And.intro lean_s2073 lean_s2079
                  have lean_s2081 : let1155 := by timed And.intro lean_a322 lean_s2080
                  show let1155 from lean_s2081
  ))))))))))))))))
have lean_s2061 : let1244 := by liftOrNToImp lean_s2060, 8
have lean_s2062 : (Eq let783 let783) := by timed rfl
let lean_s2063 := by timed flipCongrArg lean_s2062 [Implies]
have lean_s2064 : let1157 := by timed falseIntro lean_s1654
have lean_s2065 : (Eq let1244 let785) := by timed congr lean_s2063 lean_s2064
have lean_s2066 : (Eq let1244 let784) := by timed Eq.trans lean_s2065 lean_r263
have lean_s2067 : let784 := by timed eqResolve lean_s2061 lean_s2066
have lean_s2068 : (Or let1035 let1243) := by timed flipNotAnd lean_s2067 [let54, let34, let32, let42, let24, let41, let15, let8]
have lean_s2069 : (Or let271 (Or let768 (Or let1035 let1242))) := by permutateOr lean_s2068, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s2070 := by R2 lean_s2069, lean_s1930, let34, [(- 1), 0]
let lean_s2071 := by R2 lean_s2070, lean_s1684, let15, [(- 1), 0]
let lean_s2072 := by R2 lean_s2071, lean_s1862, let42, [(- 1), (- 1)]
let lean_s2073 := by R1 lean_s2072, lean_s1890, let125, [(- 1), (- 1)]
let lean_s2074 := by R1 lean_s2073, lean_s1883, let122, [(- 1), (- 1)]
let lean_s2075 := by R2 lean_s2074, lean_s1786, let41, [(- 1), (- 1)]
have lean_s2076 : (Or let768 (Or let1035 (Or let1042 (Or let1040 (Or let418 let418))))) := by R2 lean_s2075, lean_s1879, let313, [(- 1), (- 1)]
have lean_s2077 : (Or let768 (Or let1035 (Or let1042 (Or let1040 let418)))) := by factor lean_s2076, (- 1)
have lean_s2078 : (Or let418 let1241) := by permutateOr lean_s2077, [4, 0, 1, 2, 3], (- 1)
have lean_s2079 : (Or let768 (Or let1035 (Or let1042 (Or let1040 let1241)))) := by R1 lean_s2059, lean_s2078, let417, [(- 1), (- 1)]
have lean_s2080 : let1241 := by factor lean_s2079, (- 1)
have lean_s2081 : (Or let768 (Or let1035 (Or let1042 let1240))) := by R1 lean_s2042, lean_s2080, let24, [(- 1), (- 1)]
have lean_s2082 : let1240 := by factor lean_s2081, (- 1)
have lean_s2083 : (Or let768 (Or let1035 let1238)) := by R1 lean_s2016, lean_s2082, let32, [(- 1), (- 1)]
have lean_s2084 : let1238 := by factor lean_s2083, (- 1)
have lean_s2085 : (Or let1035 (Or let450 let1291)) := by R1 lean_s1982, lean_s2084, let8, [(- 1), (- 1)]
have lean_s2086 : let1273 := by factor lean_s2085, 3
have lean_s2087 : let1291 := by permutateOr lean_s2086, [1, 0], (- 1)
let lean_s2088 := by R1 lean_s1952, lean_s2087, let449, [(- 1), (- 1)]
let lean_s2089 := by R2 lean_s2088, lean_s39, let49, [(- 1), (- 1)]
let lean_s2090 := by R2 lean_s2089, lean_s1767, let1192, [(- 1), 0]
let lean_s2091 := by R1 lean_s2090, lean_s1769, let373, [(- 1), 0]
have lean_s2092 : (Or let1035 (Or let1035 let1035)) := by R1 lean_s2091, lean_s2084, let8, [(- 1), (- 1)]
have lean_s2093 : let1035 := by factor lean_s2092, 2
have lean_s2094 : let453 := by R1 lean_s1648, lean_s2093, let54, [(- 1), 0]
have lean_s2095 : let135 := by R2 lean_s1635, lean_s2094, let453, [(- 1), 0]
have lean_s2096 : let1029 := by R2 lean_s1633, lean_s2095, let135, [(- 1), 0]
have lean_s2097 : let423 := by R1 lean_s1629, lean_s2096, let421, [(- 1), 0]
have lean_s2098 : let24 := by R1 lean_s1627, lean_s2097, let422, [(- 1), 0]
let lean_s2099 := by R2 lean_s51, lean_s2098, let24, [(- 1), 0]
have lean_s2100 : let450 := by R1 lean_s1915, lean_s2096, let421, [(- 1), 0]
have lean_s2101 : let32 := by R1 lean_s1911, lean_s2100, let449, [(- 1), 0]
let lean_s2102 := by R2 lean_s2099, lean_s2101, let32, [(- 1), 0]
have lean_s2103 : let36 := by R2 lean_s1745, lean_s2094, let453, [(- 1), 0]
let lean_s2104 := by R2 lean_s2102, lean_s2103, let36, [(- 1), 0]
let lean_s2105 := by R2 lean_s2104, lean_s1930, let34, [(- 1), 0]
let lean_s2106 := by R2 lean_s2105, lean_s1684, let15, [(- 1), 0]
let lean_s2107 := by R2 lean_s2106, lean_s1800, let20, [(- 1), (- 1)]
let lean_s2108 := by R1 lean_s2107, lean_s1879, let417, [(- 1), (- 1)]
let lean_s2109 := by R1 lean_s2108, lean_s1883, let313, [(- 1), (- 1)]
let lean_s2110 := by R2 lean_s2109, lean_s1887, let30, [(- 1), (- 1)]
have lean_s2111 : (Or let768 let1045) := by R2 lean_s2110, lean_s1890, let122, [(- 1), (- 1)]
have lean_s2112 : (Or let768 let126) := by factor lean_s2111, (- 1)
let lean_s2113 := by R2 lean_s2112, lean_s1862, let125, [(- 1), (- 1)]
have lean_s2114 : (Or let1162 (Or let1114 (Or let1042 (Or let1110 (Or let1040 (Or let1177 let1083)))))) :=
  (scope (fun lean_a318 : let36 =>
    (scope (fun lean_a319 : let34 =>
      (scope (fun lean_a320 : let32 =>
        (scope (fun lean_a321 : let42 =>
          (scope (fun lean_a322 : let24 =>
            (scope (fun lean_a323 : let41 =>
              (scope (fun lean_a324 : let15 =>
                (scope (fun lean_a325 : let8 =>
                  have lean_s2114 : let1099 := by timed Eq.symm lean_r27
                  have lean_s2115 : let146 := by timed eqResolve lean_a325 lean_s2114
                  let lean_s2116 := by timed And.intro lean_a322 lean_a319
                  have lean_s2117 : let1251 := by timed And.intro lean_a323 lean_s2116
                  have lean_s2118 : let1253 :=
                    (scope (fun lean_a318 : let41 =>
                      (scope (fun lean_a319 : let24 =>
                        (scope (fun lean_a320 : let34 =>
                          have lean_s2118 : let1152 := by timed Eq.symm lean_a320
                          have lean_s2119 : let593 := by timed Eq.symm lean_a319
                          have lean_s2120 : let24 := by timed Eq.symm lean_s2119
                          let lean_s2121 := by timed Eq.trans lean_s2118 lean_s2120
                          have lean_s2122 : let1191 := by timed Eq.symm lean_a318
                          have lean_s2123 : let41 := by timed Eq.symm lean_s2122
                          have lean_s2124 : let278 := by timed Eq.trans lean_s2121 lean_s2123
                          show let278 from lean_s2124
                    ))))))
                  have lean_s2119 : let1252 := by liftOrNToImp lean_s2118, 3
                  have lean_s2120 : let278 := by timed modusPonens lean_s2117 lean_s2119
                  have lean_s2121 : let1250 :=
                    (scope (fun lean_a318 : let278 =>
                      have lean_s2121 : let277 := by timed eqResolve lean_a318 lean_r76
                      have lean_s2122 : let1245 := by timed Eq.symm lean_s2121
                      show let1245 from lean_s2122
                    ))
                  have lean_s2122 : let1249 := by liftOrNToImp lean_s2121, 1
                  have lean_s2123 : let1245 := by timed modusPonens lean_s2120 lean_s2122
                  have lean_s2124 : let1246 := by timed And.intro lean_s2115 lean_s2123
                  have lean_s2125 : let1248 :=
                    (scope (fun lean_a318 : let146 =>
                      (scope (fun lean_a319 : let1245 =>
                        have lean_s2125 : let277 := by timed Eq.symm lean_a319
                        have lean_s2126 : let1245 := by timed Eq.symm lean_s2125
                        have lean_s2127 : let1090 := by timed Eq.symm lean_a318
                        have lean_s2128 : let146 := by timed Eq.symm lean_s2127
                        have lean_s2129 : let1106 := by timed flipCongrArg lean_s2128 [xx5fcount]
                        have lean_s2130 : let1060 := by timed Eq.trans lean_s2126 lean_s2129
                        show let1060 from lean_s2130
                    ))))
                  have lean_s2126 : let1247 := by liftOrNToImp lean_s2125, 2
                  have lean_s2127 : let1060 := by timed modusPonens lean_s2124 lean_s2126
                  let lean_s2128 := by timed And.intro lean_a320 lean_a318
                  let lean_s2129 := by timed And.intro lean_a321 lean_s2128
                  have lean_s2130 : let1171 := by timed And.intro lean_s2115 lean_s2129
                  have lean_s2131 : let1175 :=
                    (scope (fun lean_a318 : let146 =>
                      (scope (fun lean_a319 : let42 =>
                        (scope (fun lean_a320 : let32 =>
                          (scope (fun lean_a321 : let36 =>
                            have lean_s2131 : let1176 := by timed Eq.symm lean_a321
                            have lean_s2132 : let486 := by timed Eq.symm lean_a320
                            have lean_s2133 : let32 := by timed Eq.symm lean_s2132
                            let lean_s2134 := by timed Eq.trans lean_s2131 lean_s2133
                            have lean_s2135 : let63 := by timed Eq.symm lean_a319
                            have lean_s2136 : let42 := by timed Eq.symm lean_s2135
                            let lean_s2137 := by timed Eq.trans lean_s2134 lean_s2136
                            have lean_s2138 : let1090 := by timed Eq.symm lean_a318
                            have lean_s2139 : let146 := by timed Eq.symm lean_s2138
                            have lean_s2140 : let1089 := by timed flipCongrArg lean_s2139 [sx5fcount]
                            have lean_s2141 : let1059 := by timed Eq.trans lean_s2137 lean_s2140
                            show let1059 from lean_s2141
                    ))))))))
                  have lean_s2132 : let1172 := by liftOrNToImp lean_s2131, 4
                  have lean_s2133 : let1059 := by timed modusPonens lean_s2130 lean_s2132
                  let lean_s2134 := by timed And.intro lean_s2127 lean_s2133
                  have lean_s2135 : let1061 := by timed And.intro lean_a324 lean_s2134
                  show let1061 from lean_s2135
  ))))))))))))))))
have lean_s2115 : let1308 := by liftOrNToImp lean_s2114, 8
have lean_s2116 : (Eq let45 let45) := by timed rfl
let lean_s2117 := by timed flipCongrArg lean_s2116 [Implies]
have lean_s2118 : let1063 := by timed falseIntro lean_s1869
have lean_s2119 : (Eq let1308 let47) := by timed congr lean_s2117 lean_s2118
have lean_s2120 : (Eq let1308 let46) := by timed Eq.trans lean_s2119 lean_r2
have lean_s2121 : let46 := by timed eqResolve lean_s2115 lean_s2120
have lean_s2122 : (Or let1162 let1243) := by timed flipNotAnd lean_s2121 [let36, let34, let32, let42, let24, let41, let15, let8]
have lean_s2123 : (Or let271 (Or let768 (Or let1162 let1242))) := by permutateOr lean_s2122, [6, 7, 0, 2, 3, 1, 4, 5], (- 1)
let lean_s2124 := by R2 lean_s2123, lean_s2098, let24, [(- 1), 0]
let lean_s2125 := by R2 lean_s2124, lean_s2101, let32, [(- 1), 0]
let lean_s2126 := by R2 lean_s2125, lean_s2103, let36, [(- 1), 0]
let lean_s2127 := by R2 lean_s2126, lean_s1930, let34, [(- 1), 0]
let lean_s2128 := by R2 lean_s2127, lean_s1684, let15, [(- 1), 0]
let lean_s2129 := by R2 lean_s2128, lean_s1786, let41, [(- 1), (- 1)]
let lean_s2130 := by R2 lean_s2129, lean_s1800, let417, [(- 1), (- 1)]
let lean_s2131 := by R1 lean_s2130, lean_s1811, let20, [(- 1), (- 1)]
let lean_s2132 := by R2 lean_s2131, lean_s1930, let34, [(- 1), 0]
let lean_s2133 := by R2 lean_s2132, lean_s2103, let36, [(- 1), 0]
let lean_s2134 := by R2 lean_s2133, lean_s2098, let24, [(- 1), 0]
let lean_s2135 := by R2 lean_s2134, lean_s2101, let32, [(- 1), 0]
have lean_s2136 : (Or let768 (Or let1110 let1307)) := by R2 lean_s2135, lean_s1684, let15, [(- 1), 0]
have lean_s2137 : let1307 := by factor lean_s2136, (- 1)
have lean_s2138 : (Or let768 let768) := by R1 lean_s2113, lean_s2137, let42, [(- 1), (- 1)]
have lean_s2139 : let768 := by factor lean_s2138, 1
let lean_s2140 := by R1 lean_s39, lean_s2139, let8, [(- 1), 0]
let lean_s2141 := by R2 lean_s2140, lean_s1767, let1192, [(- 1), 0]
have lean_s2142 : let49 := by R1 lean_s2141, lean_s1769, let373, [(- 1), 0]
let lean_s2143 := by R2 lean_s11, lean_s2142, let49, [(- 1), 0]
let lean_s2144 := by R2 lean_s2143, lean_s2098, let24, [(- 1), 0]
let lean_s2145 := by R2 lean_s2144, lean_s2101, let32, [(- 1), 0]
let lean_s2146 := by R2 lean_s2145, lean_s2103, let36, [(- 1), 0]
let lean_s2147 := by R2 lean_s2146, lean_s1930, let34, [(- 1), 0]
exact (show False from by R2 lean_s2147, lean_s1684, let15, [0, 0])


