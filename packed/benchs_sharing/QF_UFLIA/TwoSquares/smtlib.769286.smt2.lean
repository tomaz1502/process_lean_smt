open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000


universe u
variable {S1 : Type u} [Nonempty S1]
variable {f3 : Int}
variable {f4 : Int}
variable {f1 : S1}
variable {f2 : S1}
variable {f2 : S1}
variable {f1 : S1}
variable {f3 : Int}
variable {f4 : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 2)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 let1)
  let let5 := (Rat.ofInt 1)
  let let6 := (binrel% HMul.hMul let5 let1)
  let let7 := (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let6 let4))
  let let8 := (binrel% HMul.hMul let3 f4)
  let let9 := (Int.ofNat 2)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% HMul.hMul let10 f4)
  let let12 := (binrel% HMul.hMul let9 f4)
  let let13 := (binrel% GE.ge f4 let1)
  let let14 := (smtIte let13 let12 let11 Int)
  let let15 := (binrel% HMul.hMul let5 let14)
  let let16 := (Neg.neg (Int.ofNat 1))
  let let17 := (binrel% HMul.hMul let16 let14)
  let let18 := (binrel% HAdd.hAdd let12 let17)
  let let19 := (binrel% HMul.hMul let5 let18)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let15 let8))
  let let21 := (binrel% GE.ge let20 let7)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let20 let7)
  let let24 := (Rat.ofInt 0)
  let let25 := (binrel% HMul.hMul let2 let1)
  let let26 := (binrel% LT.lt let3 let1)
  let let27 := (binrel% GE.ge let14 let1)
  let let28 := (binrel% LE.le let1 let14)
  let let29 := (binrel% HMul.hMul let3 f3)
  let let30 := (binrel% HMul.hMul let10 f3)
  let let31 := (binrel% HMul.hMul let9 f3)
  let let32 := (binrel% GE.ge f3 let1)
  let let33 := (smtIte let32 let31 let30 Int)
  let let34 := (binrel% HMul.hMul let5 let33)
  let let35 := (binrel% HMul.hMul let16 let33)
  let let36 := (binrel% HAdd.hAdd let31 let35)
  let let37 := (binrel% HMul.hMul let5 let36)
  let let38 := (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let34 let29))
  let let39 := (binrel% GE.ge let38 let7)
  let let40 := (Not let39)
  let let41 := (binrel% LT.lt let38 let7)
  let let42 := (Eq let13 let13)
  let let43 := (Rat.ofInt let33)
  let let44 := (Not True)
  let let45 := (Not let32)
  let let46 := (Not let45)
  let let47 := (Eq let32 let46)
  let let48 := (Eq let46 let32)
  let let49 := (Eq let33 let33)
  let let50 := (Eq let49 True)
  let let51 := (Not let13)
  let let52 := (binrel% LT.lt f4 let1)
  let let53 := (Rat.ofInt let31)
  let let54 := (binrel% HMul.hMul let2 f3)
  let let55 := (binrel% GE.ge let33 let1)
  let let56 := (Not let55)
  let let57 := (Not let56)
  let let58 := (Eq let57 let55)
  let let59 := (Eq let14 let11)
  let let60 := (binrel% HAdd.hAdd let12 let14)
  let let61 := (Eq let60 let1)
  let let62 := (Rat.ofInt let30)
  let let63 := (Eq let55 let57)
  let let64 := (Rat.ofInt let36)
  let let65 := (Eq let33 let31)
  let let66 := (And let32 (And let65 let56))
  let let67 := (Not let66)
  let let68 := (Implies let66 False)
  let let69 := (Neg.neg let5)
  let let70 := (binrel% HMul.hMul let69 let1)
  let let71 := (Eq let32 let32)
  let let72 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let24 let24))
  let let73 := (binrel% GE.ge let24 let24)
  let let74 := (Eq let33 let30)
  let let75 := (binrel% HAdd.hAdd let31 let33)
  let let76 := (Eq let75 let1)
  let let77 := (Eq let14 let12)
  let let78 := (Eq let18 let1)
  let let79 := (Rat.ofInt let14)
  let let80 := (binrel% GT.gt let5 let1)
  let let81 := (Eq let14 let14)
  let let82 := (Eq let81 True)
  let let83 := (Rat.ofInt (binrel% HAdd.hAdd let30 let35))
  let let84 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let43 let53))
  let let85 := (binrel% LT.lt let33 let1)
  let let86 := (Not let27)
  let let87 := (binrel% LT.lt let14 let1)
  let let88 := (binrel% LT.lt let69 let1)
  let let89 := (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let43 let62))
  let let90 := (Eq let36 let1)
  let let91 := (binrel% LT.lt f3 let1)
  let let92 := (binrel% GT.gt let2 let1)
  let let93 := (smtIte let51 let11 let12 Int)
  let let94 := (Eq let81 let81)
  let let95 := (binrel% LE.le let1 let33)
  let let96 := (smtIte let45 let30 let31 Int)
  let let97 := (binrel% HMul.hMul let69 let75)
  let let98 := (Eq let27 let27)
  let let99 := (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let6 let25))
  let let100 := (binrel% HAdd.hAdd let97 (binrel% HAdd.hAdd let34 let54))
  let let101 := (binrel% GE.ge let100 let99)
  let let102 := (Not let101)
  let let103 := (binrel% LT.lt let100 let99)
  let let104 := (Not let86)
  let let105 := (Eq let104 let27)
  let let106 := (Eq let27 let104)
  let let107 := (Not let51)
  let let108 := (Eq let107 let13)
  let let109 := (Rat.ofInt let12)
  let let110 := (binrel% HMul.hMul let2 f4)
  let let111 := (And let51 (And let59 let86))
  let let112 := (Not let111)
  let let113 := (Implies let111 False)
  let let114 := (And let45 (And let74 let56))
  let let115 := (Not let114)
  let let116 := (Implies let114 False)
  let let117 := (Rat.ofInt (binrel% HAdd.hAdd let11 let17))
  let let118 := (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let79 let109))
  let let119 := (binrel% HMul.hMul let69 let60)
  let let120 := (Eq let55 let55)
  let let121 := (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let15 let110))
  let let122 := (binrel% GE.ge let121 let99)
  let let123 := (Not let122)
  let let124 := (binrel% LT.lt let121 let99)
  let let125 := (Eq let13 let107)
  let let126 := (And let13 (And let77 let86))
  let let127 := (Not let126)
  let let128 := (Implies let126 False)
  let let129 := (Eq let49 let49)
  let let130 := (Rat.ofInt let11)
  let let131 := (Rat.ofInt let18)
  let let132 := (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd let79 let130))
  let let133 := (smtIte let52 let11 let12 Int)
  let let134 := (binrel% LE.le let1 let133)
  let let135 := (smtIte let91 let30 let31 Int)
  let let136 := (binrel% LE.le let1 let135)
  let let137 := (And let136 let134)
  let let138 := (Not let137)
  let let139 := (smtIte let32 let65 let74 Prop)
  let let140 := (Eq let30 let30)
  let let141 := (Eq let31 let31)
  let let142 := (Not let65)
  let let143 := (Or let45 (Or let142 let55))
  let let144 := (Or let45 (Or let142 let57))
  let let145 := (Eq Or Or)
  let let146 := (And let32 (And let56 let65))
  let let147 := (Implies let66 let146)
  let let148 := (Not let90)
  let let149 := (binrel% LE.le let29 let4)
  let let150 := (And let26 let32)
  let let151 := (binrel% LT.lt let34 let6)
  let let152 := (And let80 let85)
  let let153 := (Implies let152 let151)
  let let154 := (Eq let56 let85)
  let let155 := (Eq let37 let6)
  let let156 := (And let80 let90)
  let let157 := (Not let74)
  let let158 := (Or let32 (Or let157 let55))
  let let159 := (Or let46 (Or let157 let57))
  let let160 := (And let45 (And let56 let74))
  let let161 := (Implies let114 let160)
  let let162 := (Not let76)
  let let163 := (binrel% LT.lt let54 let25)
  let let164 := (And let92 let91)
  let let165 := (Eq let97 let70)
  let let166 := (And let88 let76)
  let let167 := (And let55 let27)
  let let168 := (Not let167)
  let let169 := (Eq let138 let168)
  let let170 := (Eq let1 let1)
  let let171 := (Eq let12 let12)
  let let172 := (Eq let11 let11)
  let let173 := (smtIte let13 let77 let59 Prop)
  let let174 := (Not let59)
  let let175 := (Or let13 (Or let174 let27))
  let let176 := (Or let107 (Or let174 let104))
  let let177 := (And let51 (And let86 let59))
  let let178 := (Implies let111 let177)
  let let179 := (Not let61)
  let let180 := (binrel% LT.lt let110 let25)
  let let181 := (And let92 let52)
  let let182 := (binrel% LT.lt let15 let6)
  let let183 := (And let80 let87)
  let let184 := (Implies let183 let182)
  let let185 := (Eq let86 let87)
  let let186 := (Eq let119 let70)
  let let187 := (And let88 let61)
  let let188 := (Not let77)
  let let189 := (Or let51 (Or let188 let27))
  let let190 := (Or let51 (Or let188 let104))
  let let191 := (And let13 (And let86 let77))
  let let192 := (Implies let126 let191)
  let let193 := (Not let78)
  let let194 := (binrel% LE.le let8 let4)
  let let195 := (And let26 let13)
  let let196 := (Eq let19 let6)
  let let197 := (And let80 let78)
(Eq let23 let22) → (Eq let25 let24) → (Eq let26 True) → (Eq let28 let27) → (Eq let41 let40) → (Eq let42 True) → (Eq let34 let43) → (Eq let44 False) → (Eq let48 let47) → let50 → (Eq let52 let51) → (Eq let54 let53) → let58 → (Eq let61 let59) → (Eq let29 let62) → (Eq let58 let63) → (Eq let37 let64) → let48 → (Eq let68 let67) → (Eq let70 let24) → (Eq let71 True) → (Eq let72 let24) → (Eq let73 True) → (Eq let76 let74) → (Eq let78 let77) → (Eq let15 let79) → (Eq let80 True) → let82 → (Eq let6 let24) → (Eq let84 let24) → (Eq let85 let56) → (Eq let87 let86) → (Eq let88 True) → (Eq let4 let24) → (Eq let89 let24) → (Eq let90 let65) → (Eq let91 let45) → (Eq let92 True) → (Eq let93 let14) → let94 → (Eq let95 let55) → (Eq let96 let33) → (Eq let97 let83) → (Eq let98 True) → (Eq let103 let102) → let105 → (Eq let105 let106) → let108 → (Eq let110 let109) → (Eq let113 let112) → (Eq let116 let115) → (Eq let118 let24) → (Eq let119 let117) → (Eq let120 True) → (Eq let124 let123) → (Eq let108 let125) → (Eq let128 let127) → let129 → (Eq let132 let24) → (Eq let8 let130) → (Eq let19 let131) → (Not (Eq f1 f2)) → let138 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 2)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 let1)
  let let5 := (Rat.ofInt 1)
  let let6 := (binrel% HMul.hMul let5 let1)
  let let7 := (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let6 let4))
  let let8 := (binrel% HMul.hMul let3 f4)
  let let9 := (Int.ofNat 2)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% HMul.hMul let10 f4)
  let let12 := (binrel% HMul.hMul let9 f4)
  let let13 := (binrel% GE.ge f4 let1)
  let let14 := (smtIte let13 let12 let11 Int)
  let let15 := (binrel% HMul.hMul let5 let14)
  let let16 := (Neg.neg (Int.ofNat 1))
  let let17 := (binrel% HMul.hMul let16 let14)
  let let18 := (binrel% HAdd.hAdd let12 let17)
  let let19 := (binrel% HMul.hMul let5 let18)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let15 let8))
  let let21 := (binrel% GE.ge let20 let7)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let20 let7)
  let let24 := (Rat.ofInt 0)
  let let25 := (binrel% HMul.hMul let2 let1)
  let let26 := (binrel% LT.lt let3 let1)
  let let27 := (binrel% GE.ge let14 let1)
  let let28 := (binrel% LE.le let1 let14)
  let let29 := (binrel% HMul.hMul let3 f3)
  let let30 := (binrel% HMul.hMul let10 f3)
  let let31 := (binrel% HMul.hMul let9 f3)
  let let32 := (binrel% GE.ge f3 let1)
  let let33 := (smtIte let32 let31 let30 Int)
  let let34 := (binrel% HMul.hMul let5 let33)
  let let35 := (binrel% HMul.hMul let16 let33)
  let let36 := (binrel% HAdd.hAdd let31 let35)
  let let37 := (binrel% HMul.hMul let5 let36)
  let let38 := (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let34 let29))
  let let39 := (binrel% GE.ge let38 let7)
  let let40 := (Not let39)
  let let41 := (binrel% LT.lt let38 let7)
  let let42 := (Eq let13 let13)
  let let43 := (Rat.ofInt let33)
  let let44 := (Not True)
  let let45 := (Not let32)
  let let46 := (Not let45)
  let let47 := (Eq let32 let46)
  let let48 := (Eq let46 let32)
  let let49 := (Eq let33 let33)
  let let50 := (Eq let49 True)
  let let51 := (Not let13)
  let let52 := (binrel% LT.lt f4 let1)
  let let53 := (Rat.ofInt let31)
  let let54 := (binrel% HMul.hMul let2 f3)
  let let55 := (binrel% GE.ge let33 let1)
  let let56 := (Not let55)
  let let57 := (Not let56)
  let let58 := (Eq let57 let55)
  let let59 := (Eq let14 let11)
  let let60 := (binrel% HAdd.hAdd let12 let14)
  let let61 := (Eq let60 let1)
  let let62 := (Rat.ofInt let30)
  let let63 := (Eq let55 let57)
  let let64 := (Rat.ofInt let36)
  let let65 := (Eq let33 let31)
  let let66 := (And let32 (And let65 let56))
  let let67 := (Not let66)
  let let68 := (Implies let66 False)
  let let69 := (Neg.neg let5)
  let let70 := (binrel% HMul.hMul let69 let1)
  let let71 := (Eq let32 let32)
  let let72 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let24 let24))
  let let73 := (binrel% GE.ge let24 let24)
  let let74 := (Eq let33 let30)
  let let75 := (binrel% HAdd.hAdd let31 let33)
  let let76 := (Eq let75 let1)
  let let77 := (Eq let14 let12)
  let let78 := (Eq let18 let1)
  let let79 := (Rat.ofInt let14)
  let let80 := (binrel% GT.gt let5 let1)
  let let81 := (Eq let14 let14)
  let let82 := (Eq let81 True)
  let let83 := (Rat.ofInt (binrel% HAdd.hAdd let30 let35))
  let let84 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let43 let53))
  let let85 := (binrel% LT.lt let33 let1)
  let let86 := (Not let27)
  let let87 := (binrel% LT.lt let14 let1)
  let let88 := (binrel% LT.lt let69 let1)
  let let89 := (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let43 let62))
  let let90 := (Eq let36 let1)
  let let91 := (binrel% LT.lt f3 let1)
  let let92 := (binrel% GT.gt let2 let1)
  let let93 := (smtIte let51 let11 let12 Int)
  let let94 := (Eq let81 let81)
  let let95 := (binrel% LE.le let1 let33)
  let let96 := (smtIte let45 let30 let31 Int)
  let let97 := (binrel% HMul.hMul let69 let75)
  let let98 := (Eq let27 let27)
  let let99 := (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let6 let25))
  let let100 := (binrel% HAdd.hAdd let97 (binrel% HAdd.hAdd let34 let54))
  let let101 := (binrel% GE.ge let100 let99)
  let let102 := (Not let101)
  let let103 := (binrel% LT.lt let100 let99)
  let let104 := (Not let86)
  let let105 := (Eq let104 let27)
  let let106 := (Eq let27 let104)
  let let107 := (Not let51)
  let let108 := (Eq let107 let13)
  let let109 := (Rat.ofInt let12)
  let let110 := (binrel% HMul.hMul let2 f4)
  let let111 := (And let51 (And let59 let86))
  let let112 := (Not let111)
  let let113 := (Implies let111 False)
  let let114 := (And let45 (And let74 let56))
  let let115 := (Not let114)
  let let116 := (Implies let114 False)
  let let117 := (Rat.ofInt (binrel% HAdd.hAdd let11 let17))
  let let118 := (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let79 let109))
  let let119 := (binrel% HMul.hMul let69 let60)
  let let120 := (Eq let55 let55)
  let let121 := (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let15 let110))
  let let122 := (binrel% GE.ge let121 let99)
  let let123 := (Not let122)
  let let124 := (binrel% LT.lt let121 let99)
  let let125 := (Eq let13 let107)
  let let126 := (And let13 (And let77 let86))
  let let127 := (Not let126)
  let let128 := (Implies let126 False)
  let let129 := (Eq let49 let49)
  let let130 := (Rat.ofInt let11)
  let let131 := (Rat.ofInt let18)
  let let132 := (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd let79 let130))
  let let133 := (smtIte let52 let11 let12 Int)
  let let134 := (binrel% LE.le let1 let133)
  let let135 := (smtIte let91 let30 let31 Int)
  let let136 := (binrel% LE.le let1 let135)
  let let137 := (And let136 let134)
  let let138 := (Not let137)
  let let139 := (smtIte let32 let65 let74 Prop)
  let let140 := (Eq let30 let30)
  let let141 := (Eq let31 let31)
  let let142 := (Not let65)
  let let143 := (Or let45 (Or let142 let55))
  let let144 := (Or let45 (Or let142 let57))
  let let145 := (Eq Or Or)
  let let146 := (And let32 (And let56 let65))
  let let147 := (Implies let66 let146)
  let let148 := (Not let90)
  let let149 := (binrel% LE.le let29 let4)
  let let150 := (And let26 let32)
  let let151 := (binrel% LT.lt let34 let6)
  let let152 := (And let80 let85)
  let let153 := (Implies let152 let151)
  let let154 := (Eq let56 let85)
  let let155 := (Eq let37 let6)
  let let156 := (And let80 let90)
  let let157 := (Not let74)
  let let158 := (Or let32 (Or let157 let55))
  let let159 := (Or let46 (Or let157 let57))
  let let160 := (And let45 (And let56 let74))
  let let161 := (Implies let114 let160)
  let let162 := (Not let76)
  let let163 := (binrel% LT.lt let54 let25)
  let let164 := (And let92 let91)
  let let165 := (Eq let97 let70)
  let let166 := (And let88 let76)
  let let167 := (And let55 let27)
  let let168 := (Not let167)
  let let169 := (Eq let138 let168)
  let let170 := (Eq let1 let1)
  let let171 := (Eq let12 let12)
  let let172 := (Eq let11 let11)
  let let173 := (smtIte let13 let77 let59 Prop)
  let let174 := (Not let59)
  let let175 := (Or let13 (Or let174 let27))
  let let176 := (Or let107 (Or let174 let104))
  let let177 := (And let51 (And let86 let59))
  let let178 := (Implies let111 let177)
  let let179 := (Not let61)
  let let180 := (binrel% LT.lt let110 let25)
  let let181 := (And let92 let52)
  let let182 := (binrel% LT.lt let15 let6)
  let let183 := (And let80 let87)
  let let184 := (Implies let183 let182)
  let let185 := (Eq let86 let87)
  let let186 := (Eq let119 let70)
  let let187 := (And let88 let61)
  let let188 := (Not let77)
  let let189 := (Or let51 (Or let188 let27))
  let let190 := (Or let51 (Or let188 let104))
  let let191 := (And let13 (And let86 let77))
  let let192 := (Implies let126 let191)
  let let193 := (Not let78)
  let let194 := (binrel% LE.le let8 let4)
  let let195 := (And let26 let13)
  let let196 := (Eq let19 let6)
  let let197 := (And let80 let78)
fun lean_r0 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let26 True) => -- EVALUATE
fun lean_r3 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let42 True) => -- THEORY_REWRITE_BOOL
fun lean_r6 : (Eq let34 let43) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let44 False) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let48 let47) => -- THEORY_REWRITE_BOOL
fun lean_r9 : let50 => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let54 let53) => -- THEORY_REWRITE_ARITH
fun lean_r12 : let58 => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let61 let59) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let29 let62) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let58 let63) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let37 let64) => -- THEORY_REWRITE_ARITH
fun lean_r17 : let48 => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let68 let67) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let70 let24) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let71 True) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let72 let24) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let73 True) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let76 let74) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let78 let77) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let15 let79) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let80 True) => -- EVALUATE
fun lean_r27 : let82 => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let6 let24) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let84 let24) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let85 let56) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let87 let86) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let88 True) => -- EVALUATE
fun lean_r33 : (Eq let4 let24) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let89 let24) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let90 let65) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let91 let45) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let92 True) => -- EVALUATE
fun lean_r38 : (Eq let93 let14) => -- THEORY_REWRITE_BOOL
fun lean_r39 : let94 => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let95 let55) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let96 let33) => -- THEORY_REWRITE_BOOL
fun lean_r42 : (Eq let97 let83) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let98 True) => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let103 let102) => -- THEORY_REWRITE_ARITH
fun lean_r45 : let105 => -- THEORY_REWRITE_BOOL
fun lean_r46 : (Eq let105 let106) => -- THEORY_REWRITE_BOOL
fun lean_r47 : let108 => -- THEORY_REWRITE_BOOL
fun lean_r48 : (Eq let110 let109) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let113 let112) => -- THEORY_REWRITE_BOOL
fun lean_r50 : (Eq let116 let115) => -- THEORY_REWRITE_BOOL
fun lean_r51 : (Eq let118 let24) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let119 let117) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let120 True) => -- THEORY_REWRITE_BOOL
fun lean_r54 : (Eq let124 let123) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let108 let125) => -- THEORY_REWRITE_BOOL
fun lean_r56 : (Eq let128 let127) => -- THEORY_REWRITE_BOOL
fun lean_r57 : let129 => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let132 let24) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let8 let130) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let19 let131) => -- THEORY_REWRITE_ARITH
fun lean_a61 : (Not (Eq f1 f2)) =>
fun lean_a62 : let138 => by
have lean_s0 : (Or let51 (Or let188 (Or let104 let191))) :=
  (scope (fun lean_a63 : let13 =>
    (scope (fun lean_a64 : let77 =>
      (scope (fun lean_a65 : let86 =>
        let lean_s0 := by timed And.intro lean_a65 lean_a64
        have lean_s1 : let191 := by timed And.intro lean_a63 lean_s0
        show let191 from lean_s1
  ))))))
have lean_s1 : let192 := by liftOrNToImp lean_s0, 3
have lean_s2 : (Eq let126 let126) := by timed rfl
let lean_s3 := by timed flipCongrArg lean_s2 [Implies]
have lean_s4 : (Or let51 (Or let104 (Or let188 False))) :=
  (scope (fun lean_a66 : let13 =>
    (scope (fun lean_a67 : let86 =>
      (scope (fun lean_a68 : let77 =>
        have lean_s4 : (Eq let77 let78) := by timed Eq.symm lean_r24
        have lean_s5 : let78 := by timed eqResolve lean_a68 lean_s4
        have lean_s6 : (Or let193 False) :=
          (scope (fun lean_a66 : let78 =>
            have lean_s6 : let80 := by timed trueElim lean_r26
            have lean_s7 : let197 := by timed And.intro lean_s6 lean_a66
            have lean_s8 : (Implies let197 let196) := by arithMulPos [let18, let1, let5], 4
            have lean_s9 : let196 := by timed modusPonens lean_s7 lean_s8
            have lean_s10 : let185 := by timed Eq.symm lean_r31
            have lean_s11 : let87 := by timed eqResolve lean_a67 lean_s10
            have lean_s12 : let183 := by timed And.intro lean_s6 lean_s11
            have lean_s13 : let184 := by arithMulPos [let14, let1, let5], 0
            have lean_s14 : let182 := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : let26 := by timed trueElim lean_r2
            have lean_s16 : let195 := by timed And.intro lean_s15 lean_a66
            have lean_s17 : (Implies let195 let194) := by arithMulNeg [f4, let1, let3], 3
            have lean_s18 : let194 := by timed modusPonens lean_s16 lean_s17
            have lean_s19 : let23 := by sumBounds [lean_s9, lean_s14, lean_s18]
            let lean_s20 := by timed congrHAdd lean_r25 lean_r59
            have lean_s21 : (Eq let20 let132) := by timed congrHAdd lean_r60 lean_s20
            have lean_s22 : (Eq let20 let24) := by timed Eq.trans lean_s21 lean_r58
            let lean_s23 := by timed flipCongrArg lean_s22 [GE.ge]
            let lean_s24 := by timed congrHAdd lean_r28 lean_r33
            have lean_s25 : (Eq let7 let72) := by timed congrHAdd lean_r28 lean_s24
            have lean_s26 : (Eq let7 let24) := by timed Eq.trans lean_s25 lean_r21
            have lean_s27 : (Eq let21 let73) := by timed congr lean_s23 lean_s26
            have lean_s28 : (Eq let21 True) := by timed Eq.trans lean_s27 lean_r22
            have lean_s29 : (Eq let22 let44) := by timed flipCongrArg lean_s28 [Not]
            have lean_s30 : (Eq let22 False) := by timed Eq.trans lean_s29 lean_r7
            have lean_s31 : (Eq let23 False) := by timed Eq.trans lean_r0 lean_s30
            show False from by timed eqResolve lean_s19 lean_s31
          ))
        have lean_s7 : let193 := by liftOrNToNeg lean_s6
        show False from by timed contradiction lean_s5 lean_s7
  ))))))
have lean_s5 : (Not let191) := by liftOrNToNeg lean_s4
have lean_s6 : (Eq let191 False) := by timed falseIntro lean_s5
have lean_s7 : (Eq let192 let128) := by timed congr lean_s3 lean_s6
have lean_s8 : (Eq let192 let127) := by timed Eq.trans lean_s7 lean_r56
have lean_s9 : let127 := by timed eqResolve lean_s1 lean_s8
have lean_s10 : let190 := by timed flipNotAnd lean_s9 [let13, let77, let86]
have lean_s11 : let145 := by timed rfl
have lean_s12 : (Eq let51 let51) := by timed rfl
let lean_s13 := by timed congr lean_s11 lean_s12
have lean_s14 : (Eq let188 let188) := by timed rfl
let lean_s15 := by timed congr lean_s11 lean_s14
have lean_s16 : let98 := by timed rfl
let lean_s17 := by timed flipCongrArg lean_s16 [Eq]
have lean_s18 : (Eq let106 let98) := by timed congr lean_s17 lean_r45
have lean_s19 : (Eq let106 True) := by timed Eq.trans lean_s18 lean_r43
have lean_s20 : (Eq let105 True) := by timed Eq.trans lean_r46 lean_s19
have lean_s21 : let105 := by timed trueElim lean_s20
let lean_s22 := by timed congr lean_s15 lean_s21
have lean_s23 : (Eq let190 let189) := by timed congr lean_s13 lean_s22
have lean_s24 : let189 := by timed eqResolve lean_s10 lean_s23
have lean_s25 : (Or let51 (Or let27 let188)) := by permutateOr lean_s24, [0, 2, 1], (- 1)
have lean_s26 : let173 := by timed iteIntro
have lean_s27 : let42 := by timed rfl
have lean_s28 : let81 := by timed rfl
let lean_s29 := by timed flipCongrArg lean_s28 [Eq]
have lean_s30 : let81 := by timed rfl
have lean_s31 : let94 := by timed congr lean_s29 lean_s30
let lean_s32 := by timed Eq.trans lean_r39 lean_s31
have lean_s33 : let82 := by timed Eq.trans lean_s32 lean_r27
have lean_s34 : let81 := by timed trueElim lean_s33
let lean_s35 := by timed flipCongrArg lean_s34 [Eq]
have lean_s36 : let171 := by timed rfl
have lean_s37 : (Eq let77 let77) := by timed congr lean_s35 lean_s36
let lean_s38 := by timed flipCongrArg lean_s34 [Eq]
have lean_s39 : let172 := by timed rfl
have lean_s40 : (Eq let59 let59) := by timed congr lean_s38 lean_s39
have lean_s41 : (Eq let173 let173) := by timed congrIte lean_s27 lean_s37 lean_s40
have lean_s42 : let173 := by timed eqResolve lean_s26 lean_s41
have lean_s43 : (Or let51 let77) := by timed iteElim1 lean_s42
have lean_s44 : (Or let107 (Or let174 (Or let104 let177))) :=
  (scope (fun lean_a67 : let51 =>
    (scope (fun lean_a68 : let59 =>
      (scope (fun lean_a69 : let86 =>
        let lean_s44 := by timed And.intro lean_a69 lean_a68
        have lean_s45 : let177 := by timed And.intro lean_a67 lean_s44
        show let177 from lean_s45
  ))))))
have lean_s45 : let178 := by liftOrNToImp lean_s44, 3
have lean_s46 : (Eq let111 let111) := by timed rfl
let lean_s47 := by timed flipCongrArg lean_s46 [Implies]
have lean_s48 : (Or let107 (Or let104 (Or let174 False))) :=
  (scope (fun lean_a69 : let51 =>
    (scope (fun lean_a70 : let86 =>
      (scope (fun lean_a71 : let59 =>
        have lean_s48 : (Eq let59 let61) := by timed Eq.symm lean_r13
        have lean_s49 : let61 := by timed eqResolve lean_a71 lean_s48
        have lean_s50 : (Or let179 False) :=
          (scope (fun lean_a69 : let61 =>
            have lean_s50 : let88 := by timed trueElim lean_r32
            have lean_s51 : let187 := by timed And.intro lean_s50 lean_a69
            have lean_s52 : (Implies let187 let186) := by arithMulNeg [let60, let1, let69], 4
            have lean_s53 : let186 := by timed modusPonens lean_s51 lean_s52
            have lean_s54 : let80 := by timed trueElim lean_r26
            have lean_s55 : let185 := by timed Eq.symm lean_r31
            have lean_s56 : let87 := by timed eqResolve lean_a70 lean_s55
            have lean_s57 : let183 := by timed And.intro lean_s54 lean_s56
            have lean_s58 : let184 := by arithMulPos [let14, let1, let5], 0
            have lean_s59 : let182 := by timed modusPonens lean_s57 lean_s58
            have lean_s60 : let92 := by timed trueElim lean_r37
            have lean_s61 : (Eq let51 let52) := by timed Eq.symm lean_r10
            have lean_s62 : let52 := by timed eqResolve lean_a69 lean_s61
            have lean_s63 : let181 := by timed And.intro lean_s60 lean_s62
            have lean_s64 : (Implies let181 let180) := by arithMulPos [f4, let1, let2], 0
            have lean_s65 : let180 := by timed modusPonens lean_s63 lean_s64
            have lean_s66 : let124 := by sumBounds [lean_s53, lean_s59, lean_s65]
            let lean_s67 := by timed congrHAdd lean_r25 lean_r48
            have lean_s68 : (Eq let121 let118) := by timed congrHAdd lean_r52 lean_s67
            have lean_s69 : (Eq let121 let24) := by timed Eq.trans lean_s68 lean_r51
            let lean_s70 := by timed flipCongrArg lean_s69 [GE.ge]
            let lean_s71 := by timed congrHAdd lean_r28 lean_r1
            have lean_s72 : (Eq let99 let72) := by timed congrHAdd lean_r19 lean_s71
            have lean_s73 : (Eq let99 let24) := by timed Eq.trans lean_s72 lean_r21
            have lean_s74 : (Eq let122 let73) := by timed congr lean_s70 lean_s73
            have lean_s75 : (Eq let122 True) := by timed Eq.trans lean_s74 lean_r22
            have lean_s76 : (Eq let123 let44) := by timed flipCongrArg lean_s75 [Not]
            have lean_s77 : (Eq let123 False) := by timed Eq.trans lean_s76 lean_r7
            have lean_s78 : (Eq let124 False) := by timed Eq.trans lean_r54 lean_s77
            show False from by timed eqResolve lean_s66 lean_s78
          ))
        have lean_s51 : let179 := by liftOrNToNeg lean_s50
        show False from by timed contradiction lean_s49 lean_s51
  ))))))
have lean_s49 : (Not let177) := by liftOrNToNeg lean_s48
have lean_s50 : (Eq let177 False) := by timed falseIntro lean_s49
have lean_s51 : (Eq let178 let113) := by timed congr lean_s47 lean_s50
have lean_s52 : (Eq let178 let112) := by timed Eq.trans lean_s51 lean_r49
have lean_s53 : let112 := by timed eqResolve lean_s45 lean_s52
have lean_s54 : let176 := by timed flipNotAnd lean_s53 [let51, let59, let86]
have lean_s55 : let145 := by timed rfl
have lean_s56 : let42 := by timed rfl
let lean_s57 := by timed flipCongrArg lean_s56 [Eq]
have lean_s58 : (Eq let125 let42) := by timed congr lean_s57 lean_r47
have lean_s59 : (Eq let125 True) := by timed Eq.trans lean_s58 lean_r5
have lean_s60 : (Eq let108 True) := by timed Eq.trans lean_r55 lean_s59
have lean_s61 : let108 := by timed trueElim lean_s60
let lean_s62 := by timed congr lean_s55 lean_s61
have lean_s63 : (Eq let174 let174) := by timed rfl
let lean_s64 := by timed congr lean_s55 lean_s63
let lean_s65 := by timed congr lean_s64 lean_s21
have lean_s66 : (Eq let176 let175) := by timed congr lean_s62 lean_s65
have lean_s67 : let175 := by timed eqResolve lean_s54 lean_s66
have lean_s68 : (Or let13 (Or let27 let174)) := by permutateOr lean_s67, [0, 2, 1], (- 1)
have lean_s69 : let170 := by timed rfl
let lean_s70 := by timed flipCongrArg lean_s69 [LE.le]
have lean_s71 : let140 := by timed rfl
have lean_s72 : let141 := by timed rfl
have lean_s73 : (Eq let135 let96) := by timed congrIte lean_r36 lean_s71 lean_s72
have lean_s74 : (Eq let135 let33) := by timed Eq.trans lean_s73 lean_r41
have lean_s75 : (Eq let136 let95) := by timed congr lean_s70 lean_s74
have lean_s76 : (Eq let136 let55) := by timed Eq.trans lean_s75 lean_r40
let lean_s77 := by timed flipCongrArg lean_s76 [And]
let lean_s78 := by timed flipCongrArg lean_s69 [LE.le]
have lean_s79 : let172 := by timed rfl
have lean_s80 : let171 := by timed rfl
have lean_s81 : (Eq let133 let93) := by timed congrIte lean_r10 lean_s79 lean_s80
have lean_s82 : (Eq let133 let14) := by timed Eq.trans lean_s81 lean_r38
have lean_s83 : (Eq let134 let28) := by timed congr lean_s78 lean_s82
have lean_s84 : (Eq let134 let27) := by timed Eq.trans lean_s83 lean_r3
have lean_s85 : (Eq let137 let167) := by timed congr lean_s77 lean_s84
have lean_s86 : let169 := by timed flipCongrArg lean_s85 [Not]
have lean_s87 : let49 := by timed rfl
let lean_s88 := by timed flipCongrArg lean_s87 [Eq]
have lean_s89 : let49 := by timed rfl
have lean_s90 : let129 := by timed congr lean_s88 lean_s89
let lean_s91 := by timed Eq.trans lean_r57 lean_s90
have lean_s92 : let50 := by timed Eq.trans lean_s91 lean_r9
have lean_s93 : let49 := by timed trueElim lean_s92
let lean_s94 := by timed flipCongrArg lean_s93 [GE.ge]
have lean_s95 : let170 := by timed rfl
have lean_s96 : let120 := by timed congr lean_s94 lean_s95
let lean_s97 := by timed flipCongrArg lean_s96 [And]
have lean_s98 : let81 := by timed trueElim lean_s33
let lean_s99 := by timed flipCongrArg lean_s98 [GE.ge]
have lean_s100 : let98 := by timed congr lean_s99 lean_s95
have lean_s101 : (Eq let167 let167) := by timed congr lean_s97 lean_s100
have lean_s102 : (Eq let168 let168) := by timed flipCongrArg lean_s101 [Not]
have lean_s103 : let169 := by timed Eq.trans lean_s86 lean_s102
have lean_s104 : let168 := by timed eqResolve lean_a62 lean_s103
have lean_s105 : (Or let56 let86) := by timed flipNotAnd lean_s104 [let55, let27]
have lean_s106 : (Or let46 (Or let157 (Or let57 let160))) :=
  (scope (fun lean_a70 : let45 =>
    (scope (fun lean_a71 : let74 =>
      (scope (fun lean_a72 : let56 =>
        let lean_s106 := by timed And.intro lean_a72 lean_a71
        have lean_s107 : let160 := by timed And.intro lean_a70 lean_s106
        show let160 from lean_s107
  ))))))
have lean_s107 : let161 := by liftOrNToImp lean_s106, 3
have lean_s108 : (Eq let114 let114) := by timed rfl
let lean_s109 := by timed flipCongrArg lean_s108 [Implies]
have lean_s110 : (Or let46 (Or let57 (Or let157 False))) :=
  (scope (fun lean_a73 : let45 =>
    (scope (fun lean_a74 : let56 =>
      (scope (fun lean_a75 : let74 =>
        have lean_s110 : (Eq let74 let76) := by timed Eq.symm lean_r23
        have lean_s111 : let76 := by timed eqResolve lean_a75 lean_s110
        have lean_s112 : (Or let162 False) :=
          (scope (fun lean_a73 : let76 =>
            have lean_s112 : let88 := by timed trueElim lean_r32
            have lean_s113 : let166 := by timed And.intro lean_s112 lean_a73
            have lean_s114 : (Implies let166 let165) := by arithMulNeg [let75, let1, let69], 4
            have lean_s115 : let165 := by timed modusPonens lean_s113 lean_s114
            have lean_s116 : let80 := by timed trueElim lean_r26
            have lean_s117 : let154 := by timed Eq.symm lean_r30
            have lean_s118 : let85 := by timed eqResolve lean_a74 lean_s117
            have lean_s119 : let152 := by timed And.intro lean_s116 lean_s118
            have lean_s120 : let153 := by arithMulPos [let33, let1, let5], 0
            have lean_s121 : let151 := by timed modusPonens lean_s119 lean_s120
            have lean_s122 : let92 := by timed trueElim lean_r37
            have lean_s123 : (Eq let45 let91) := by timed Eq.symm lean_r36
            have lean_s124 : let91 := by timed eqResolve lean_a73 lean_s123
            have lean_s125 : let164 := by timed And.intro lean_s122 lean_s124
            have lean_s126 : (Implies let164 let163) := by arithMulPos [f3, let1, let2], 0
            have lean_s127 : let163 := by timed modusPonens lean_s125 lean_s126
            have lean_s128 : let103 := by sumBounds [lean_s115, lean_s121, lean_s127]
            let lean_s129 := by timed congrHAdd lean_r6 lean_r11
            have lean_s130 : (Eq let100 let84) := by timed congrHAdd lean_r42 lean_s129
            have lean_s131 : (Eq let100 let24) := by timed Eq.trans lean_s130 lean_r29
            let lean_s132 := by timed flipCongrArg lean_s131 [GE.ge]
            let lean_s133 := by timed congrHAdd lean_r28 lean_r1
            have lean_s134 : (Eq let99 let72) := by timed congrHAdd lean_r19 lean_s133
            have lean_s135 : (Eq let99 let24) := by timed Eq.trans lean_s134 lean_r21
            have lean_s136 : (Eq let101 let73) := by timed congr lean_s132 lean_s135
            have lean_s137 : (Eq let101 True) := by timed Eq.trans lean_s136 lean_r22
            have lean_s138 : (Eq let102 let44) := by timed flipCongrArg lean_s137 [Not]
            have lean_s139 : (Eq let102 False) := by timed Eq.trans lean_s138 lean_r7
            have lean_s140 : (Eq let103 False) := by timed Eq.trans lean_r44 lean_s139
            show False from by timed eqResolve lean_s128 lean_s140
          ))
        have lean_s113 : let162 := by liftOrNToNeg lean_s112
        show False from by timed contradiction lean_s111 lean_s113
  ))))))
have lean_s111 : (Not let160) := by liftOrNToNeg lean_s110
have lean_s112 : (Eq let160 False) := by timed falseIntro lean_s111
have lean_s113 : (Eq let161 let116) := by timed congr lean_s109 lean_s112
have lean_s114 : (Eq let161 let115) := by timed Eq.trans lean_s113 lean_r50
have lean_s115 : let115 := by timed eqResolve lean_s107 lean_s114
have lean_s116 : let159 := by timed flipNotAnd lean_s115 [let45, let74, let56]
have lean_s117 : let145 := by timed rfl
have lean_s118 : let71 := by timed rfl
let lean_s119 := by timed flipCongrArg lean_s118 [Eq]
have lean_s120 : (Eq let47 let71) := by timed congr lean_s119 lean_r17
have lean_s121 : (Eq let47 True) := by timed Eq.trans lean_s120 lean_r20
have lean_s122 : (Eq let48 True) := by timed Eq.trans lean_r8 lean_s121
have lean_s123 : let48 := by timed trueElim lean_s122
let lean_s124 := by timed congr lean_s117 lean_s123
have lean_s125 : (Eq let157 let157) := by timed rfl
let lean_s126 := by timed congr lean_s117 lean_s125
have lean_s127 : let120 := by timed rfl
let lean_s128 := by timed flipCongrArg lean_s127 [Eq]
have lean_s129 : (Eq let63 let120) := by timed congr lean_s128 lean_r12
have lean_s130 : (Eq let63 True) := by timed Eq.trans lean_s129 lean_r53
have lean_s131 : (Eq let58 True) := by timed Eq.trans lean_r15 lean_s130
have lean_s132 : let58 := by timed trueElim lean_s131
let lean_s133 := by timed congr lean_s126 lean_s132
have lean_s134 : (Eq let159 let158) := by timed congr lean_s124 lean_s133
have lean_s135 : let158 := by timed eqResolve lean_s116 lean_s134
have lean_s136 : (Or let32 (Or let55 let157)) := by permutateOr lean_s135, [0, 2, 1], (- 1)
have lean_s137 : let139 := by timed iteIntro
have lean_s138 : let71 := by timed rfl
have lean_s139 : let49 := by timed trueElim lean_s92
let lean_s140 := by timed flipCongrArg lean_s139 [Eq]
have lean_s141 : let141 := by timed rfl
have lean_s142 : (Eq let65 let65) := by timed congr lean_s140 lean_s141
let lean_s143 := by timed flipCongrArg lean_s139 [Eq]
have lean_s144 : let140 := by timed rfl
have lean_s145 : (Eq let74 let74) := by timed congr lean_s143 lean_s144
have lean_s146 : (Eq let139 let139) := by timed congrIte lean_s138 lean_s142 lean_s145
have lean_s147 : let139 := by timed eqResolve lean_s137 lean_s146
have lean_s148 : (Or let32 let74) := by timed iteElim2 lean_s147
have lean_s149 : (Or let32 (Or let55 let32)) := by R2 lean_s136, lean_s148, let74, [(- 1), (- 1)]
have lean_s150 : (Or let32 let55) := by factor lean_s149, 2
have lean_s151 : (Or let45 (Or let142 (Or let57 let146))) :=
  (scope (fun lean_a74 : let32 =>
    (scope (fun lean_a75 : let65 =>
      (scope (fun lean_a76 : let56 =>
        let lean_s151 := by timed And.intro lean_a76 lean_a75
        have lean_s152 : let146 := by timed And.intro lean_a74 lean_s151
        show let146 from lean_s152
  ))))))
have lean_s152 : let147 := by liftOrNToImp lean_s151, 3
have lean_s153 : (Eq let66 let66) := by timed rfl
let lean_s154 := by timed flipCongrArg lean_s153 [Implies]
have lean_s155 : (Or let45 (Or let57 (Or let142 False))) :=
  (scope (fun lean_a76 : let32 =>
    (scope (fun lean_a77 : let56 =>
      (scope (fun lean_a78 : let65 =>
        have lean_s155 : (Eq let65 let90) := by timed Eq.symm lean_r35
        have lean_s156 : let90 := by timed eqResolve lean_a78 lean_s155
        have lean_s157 : (Or let148 False) :=
          (scope (fun lean_a76 : let90 =>
            have lean_s157 : let80 := by timed trueElim lean_r26
            have lean_s158 : let156 := by timed And.intro lean_s157 lean_a76
            have lean_s159 : (Implies let156 let155) := by arithMulPos [let36, let1, let5], 4
            have lean_s160 : let155 := by timed modusPonens lean_s158 lean_s159
            have lean_s161 : let154 := by timed Eq.symm lean_r30
            have lean_s162 : let85 := by timed eqResolve lean_a77 lean_s161
            have lean_s163 : let152 := by timed And.intro lean_s157 lean_s162
            have lean_s164 : let153 := by arithMulPos [let33, let1, let5], 0
            have lean_s165 : let151 := by timed modusPonens lean_s163 lean_s164
            have lean_s166 : let26 := by timed trueElim lean_r2
            have lean_s167 : let150 := by timed And.intro lean_s166 lean_a76
            have lean_s168 : (Implies let150 let149) := by arithMulNeg [f3, let1, let3], 3
            have lean_s169 : let149 := by timed modusPonens lean_s167 lean_s168
            have lean_s170 : let41 := by sumBounds [lean_s160, lean_s165, lean_s169]
            let lean_s171 := by timed congrHAdd lean_r6 lean_r14
            have lean_s172 : (Eq let38 let89) := by timed congrHAdd lean_r16 lean_s171
            have lean_s173 : (Eq let38 let24) := by timed Eq.trans lean_s172 lean_r34
            let lean_s174 := by timed flipCongrArg lean_s173 [GE.ge]
            let lean_s175 := by timed congrHAdd lean_r28 lean_r33
            have lean_s176 : (Eq let7 let72) := by timed congrHAdd lean_r28 lean_s175
            have lean_s177 : (Eq let7 let24) := by timed Eq.trans lean_s176 lean_r21
            have lean_s178 : (Eq let39 let73) := by timed congr lean_s174 lean_s177
            have lean_s179 : (Eq let39 True) := by timed Eq.trans lean_s178 lean_r22
            have lean_s180 : (Eq let40 let44) := by timed flipCongrArg lean_s179 [Not]
            have lean_s181 : (Eq let40 False) := by timed Eq.trans lean_s180 lean_r7
            have lean_s182 : (Eq let41 False) := by timed Eq.trans lean_r4 lean_s181
            show False from by timed eqResolve lean_s170 lean_s182
          ))
        have lean_s158 : let148 := by liftOrNToNeg lean_s157
        show False from by timed contradiction lean_s156 lean_s158
  ))))))
have lean_s156 : (Not let146) := by liftOrNToNeg lean_s155
have lean_s157 : (Eq let146 False) := by timed falseIntro lean_s156
have lean_s158 : (Eq let147 let68) := by timed congr lean_s154 lean_s157
have lean_s159 : (Eq let147 let67) := by timed Eq.trans lean_s158 lean_r18
have lean_s160 : let67 := by timed eqResolve lean_s152 lean_s159
have lean_s161 : let144 := by timed flipNotAnd lean_s160 [let32, let65, let56]
have lean_s162 : let145 := by timed rfl
have lean_s163 : (Eq let45 let45) := by timed rfl
let lean_s164 := by timed congr lean_s162 lean_s163
have lean_s165 : (Eq let142 let142) := by timed rfl
let lean_s166 := by timed congr lean_s162 lean_s165
let lean_s167 := by timed congr lean_s166 lean_s132
have lean_s168 : (Eq let144 let143) := by timed congr lean_s164 lean_s167
have lean_s169 : let143 := by timed eqResolve lean_s161 lean_s168
have lean_s170 : (Or let45 (Or let55 let142)) := by permutateOr lean_s169, [0, 2, 1], (- 1)
have lean_s171 : (Or let45 let65) := by timed iteElim1 lean_s147
have lean_s172 : (Or let45 (Or let55 let45)) := by R2 lean_s170, lean_s171, let65, [(- 1), (- 1)]
have lean_s173 : (Or let45 let55) := by factor lean_s172, 2
have lean_s174 : (Or let55 let55) := by R1 lean_s150, lean_s173, let32, [(- 1), (- 1)]
have lean_s175 : let55 := by factor lean_s174, 1
have lean_s176 : let86 := by R2 lean_s105, lean_s175, let55, [(- 1), 0]
let lean_s177 := by R1 lean_s68, lean_s176, let27, [(- 1), 0]
have lean_s178 : (Or let13 let59) := by timed iteElim2 lean_s42
have lean_s179 : (Or let13 let13) := by R2 lean_s177, lean_s178, let59, [(- 1), (- 1)]
have lean_s180 : let13 := by factor lean_s179, 1
have lean_s181 : let77 := by R2 lean_s43, lean_s180, let13, [(- 1), 0]
let lean_s182 := by R2 lean_s25, lean_s181, let77, [(- 1), 0]
let lean_s183 := by R2 lean_s182, lean_s180, let13, [(- 1), 0]
exact (show False from by R1 lean_s183, lean_s176, let27, [0, 0])


