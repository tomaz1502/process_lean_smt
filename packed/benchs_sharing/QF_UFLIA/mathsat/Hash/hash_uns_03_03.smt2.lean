open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {hashx5f3 : (Int -> Int)}
variable {hashx5f3 : (Int -> Int)}
variable {x3 : Int}
variable {x1 : Int}
variable {x2 : Int}
variable {hashx5f1 : (Int -> Int)}
variable {x3 : Int}
variable {hashx5f2 : (Int -> Int)}
variable {hashx5f2 : (Int -> Int)}
variable {x2 : Int}
variable {hashx5f1 : (Int -> Int)}
variable {x1 : Int}

theorem th0 :
  let let1 := (hashx5f1 x1)
  let let2 := (binrel% HMul.hMul (Int.ofNat 2) let1)
  let let3 := (hashx5f2 x1)
  let let4 := (Eq let1 let3)
  let let5 := (smtIte let4 let3 let2 Int)
  let let6 := (binrel% HAdd.hAdd let1 let1)
  let let7 := (smtIte let4 let3 let6 Int)
  let let8 := (Ne let7 let5)
  let let9 := (Int.ofNat 4)
  let let10 := (binrel% LT.lt x3 let9)
  let let11 := (Int.ofNat 0)
  let let12 := (binrel% LE.le let11 x3)
  let let13 := (binrel% LT.lt x2 let9)
  let let14 := (binrel% LE.le let11 x2)
  let let15 := (binrel% LT.lt x1 let9)
  let let16 := (binrel% LE.le let11 x1)
  let let17 := (Ne x2 x3)
  let let18 := (Ne x1 x3)
  let let19 := (Ne x1 x2)
  let let20 := (hashx5f3 x3)
  let let21 := (Eq let20 x3)
  let let22 := (Eq let20 x2)
  let let23 := (Eq let20 x1)
  let let24 := (Or (Or let23 let22) let21)
  let let25 := (hashx5f3 x2)
  let let26 := (Eq let25 x3)
  let let27 := (Eq let25 x2)
  let let28 := (Eq let25 x1)
  let let29 := (Or (Or let28 let27) let26)
  let let30 := (hashx5f3 x1)
  let let31 := (Eq let30 x3)
  let let32 := (Eq let30 x2)
  let let33 := (Eq let30 x1)
  let let34 := (Or (Or let33 let32) let31)
  let let35 := (hashx5f2 x3)
  let let36 := (Eq let35 x3)
  let let37 := (Eq let35 x2)
  let let38 := (Eq let35 x1)
  let let39 := (Or (Or let38 let37) let36)
  let let40 := (hashx5f2 x2)
  let let41 := (Eq let40 x3)
  let let42 := (Eq let40 x2)
  let let43 := (Eq let40 x1)
  let let44 := (Or (Or let43 let42) let41)
  let let45 := (Eq let3 x3)
  let let46 := (Eq let3 x2)
  let let47 := (Eq let3 x1)
  let let48 := (Or (Or let47 let46) let45)
  let let49 := (hashx5f1 x3)
  let let50 := (Eq let49 x3)
  let let51 := (Eq let49 x2)
  let let52 := (Eq let49 x1)
  let let53 := (Or (Or let52 let51) let50)
  let let54 := (hashx5f1 x2)
  let let55 := (Eq let54 x3)
  let let56 := (Eq let54 x2)
  let let57 := (Eq let54 x1)
  let let58 := (Or (Or let57 let56) let55)
  let let59 := (Eq let1 x3)
  let let60 := (Eq let1 x2)
  let let61 := (Eq let1 x1)
  let let62 := (Or (Or let61 let60) let59)
  let let63 := (Ne let25 let20)
  let let64 := (Ne let30 let20)
  let let65 := (Ne let30 let25)
  let let66 := (Ne let40 let35)
  let let67 := (Ne let3 let35)
  let let68 := (Ne let3 let40)
  let let69 := (Ne let54 let49)
  let let70 := (Ne let1 let49)
  let let71 := (Ne let1 let54)
  let let72 := (And let71 (And let70 (And let69 (And let68 (And let67 (And let66 (And let65 (And let64 (And let63 (And let62 (And let58 (And let53 (And let48 (And let44 (And let39 (And let34 (And let29 (And let24 (And let19 (And let18 (And let17 (And let16 (And let15 (And let14 (And let13 (And let12 (And let10 let8)))))))))))))))))))))))))))
  let let73 := (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And let71 let70) let69) let68) let67) let66) let65) let64) let63) let62) let58) let53) let48) let44) let39) let34) let29) let24) let19) let18) let17) let16) let15) let14) let13) let12) let10) let8)
  let let74 := (Eq x1 let35)
  let let75 := (Eq x2 let35)
  let let76 := (Eq x3 let35)
  let let77 := (Or let47 (Or let46 let45))
  let let78 := (Or let33 (Or let32 let31))
  let let79 := (Eq x3 let20)
  let let80 := (Eq let5 let5)
  let let81 := (Eq x1 let30)
  let let82 := (Eq x2 let30)
  let let83 := (Eq x3 let30)
  let let84 := (Or let23 (Or let22 let21))
  let let85 := (Eq x1 let20)
  let let86 := (Not (Eq let1 let54))
  let let87 := (Or let43 (Or let42 let41))
  let let88 := (Not (Eq x1 x2))
  let let89 := (Or let52 (Or let51 let50))
  let let90 := (Eq x2 let20)
  let let91 := (Not (binrel% GE.ge x3 let9))
  let let92 := (binrel% GE.ge x3 let11)
  let let93 := (Not (binrel% GE.ge x2 let9))
  let let94 := (binrel% GE.ge x2 let11)
  let let95 := (Not (binrel% GE.ge x1 let9))
  let let96 := (binrel% GE.ge x1 let11)
  let let97 := (Not (Eq x2 x3))
  let let98 := (Not (Eq x1 x3))
  let let99 := (Or let85 (Or let90 let79))
  let let100 := (Eq x3 let25)
  let let101 := (Eq x2 let25)
  let let102 := (Eq x1 let25)
  let let103 := (Or let102 (Or let101 let100))
  let let104 := (Or let81 (Or let82 let83))
  let let105 := (Or let74 (Or let75 let76))
  let let106 := (Eq x3 let40)
  let let107 := (Eq x2 let40)
  let let108 := (Eq x1 let40)
  let let109 := (Or let108 (Or let107 let106))
  let let110 := (Eq x3 let3)
  let let111 := (Eq x2 let3)
  let let112 := (Eq x1 let3)
  let let113 := (Or let112 (Or let111 let110))
  let let114 := (Eq x3 let49)
  let let115 := (Eq x2 let49)
  let let116 := (Eq x1 let49)
  let let117 := (Or let116 (Or let115 let114))
  let let118 := (Eq x3 let54)
  let let119 := (Eq x2 let54)
  let let120 := (Eq x1 let54)
  let let121 := (Or let120 (Or let119 let118))
  let let122 := (Eq x3 let1)
  let let123 := (Eq x2 let1)
  let let124 := (Eq x1 let1)
  let let125 := (Or let124 (Or let123 let122))
  let let126 := (Not (Eq let25 let20))
  let let127 := (Not (Eq let30 let20))
  let let128 := (Not (Eq let30 let25))
  let let129 := (Not (Eq let40 let35))
  let let130 := (Not (Eq let3 let35))
  let let131 := (Not (Eq let3 let40))
  let let132 := (Not (Eq let54 let49))
  let let133 := (Not (Eq let1 let49))
  let let134 := (And let86 (And let133 (And let132 (And let131 (And let130 (And let129 (And let128 (And let127 (And let126 (And let125 (And let121 (And let117 (And let113 (And let109 (And let105 (And let104 (And let103 (And let99 (And let88 (And let98 (And let97 (And let96 (And let95 (And let94 (And let93 (And let92 (And let91 False)))))))))))))))))))))))))))
  let let135 := (Or let28 (Or let27 let26))
  let let136 := (Not True)
  let let137 := (Or let38 (Or let37 let36))
  let let138 := (Eq let7 let5)
  let let139 := (Not let138)
  let let140 := (Or let61 (Or let60 let59))
  let let141 := (Or let57 (Or let56 let55))
  let let142 := (Eq Or Or)
(Eq let73 let72) → (Eq let38 let74) → (Eq let37 let75) → (Eq let36 let76) → (Eq let48 let77) → (Eq let34 let78) → (Eq let21 let79) → (Eq let80 True) → (Eq let33 let81) → (Eq let32 let82) → (Eq let31 let83) → (Eq let24 let84) → (Eq let6 let2) → (Eq let23 let85) → (Eq let71 let86) → (Eq let44 let87) → (Eq let19 let88) → (Eq let53 let89) → (Eq let22 let90) → (Eq let134 False) → (Eq let29 let135) → (Eq let51 let115) → (Eq let136 False) → (Eq let27 let101) → (Eq let61 let124) → (Eq let26 let100) → (Eq let39 let137) → (Eq let60 let123) → (Eq let63 let126) → (Eq let10 let91) → (Eq let65 let128) → (Eq let13 let93) → (Eq let59 let122) → (Eq let28 let102) → (Eq let68 let131) → (Eq let41 let106) → (Eq let16 let96) → (Eq let50 let114) → (Eq let8 let139) → (Eq let62 let140) → (Eq let52 let116) → (Eq let12 let92) → (Eq let64 let127) → (Eq let69 let132) → (Eq let17 let97) → (Eq let42 let107) → (Eq let14 let94) → (Eq let66 let129) → (Eq let70 let133) → (Eq let18 let98) → (Eq let43 let108) → (Eq let15 let95) → (Eq let67 let130) → (Eq let45 let110) → (Eq let58 let141) → (Eq let46 let111) → (Eq let47 let112) → (Eq let55 let118) → (Eq let56 let119) → (Eq let57 let120) → let73 → False :=
  let let1 := (hashx5f1 x1)
  let let2 := (binrel% HMul.hMul (Int.ofNat 2) let1)
  let let3 := (hashx5f2 x1)
  let let4 := (Eq let1 let3)
  let let5 := (smtIte let4 let3 let2 Int)
  let let6 := (binrel% HAdd.hAdd let1 let1)
  let let7 := (smtIte let4 let3 let6 Int)
  let let8 := (Ne let7 let5)
  let let9 := (Int.ofNat 4)
  let let10 := (binrel% LT.lt x3 let9)
  let let11 := (Int.ofNat 0)
  let let12 := (binrel% LE.le let11 x3)
  let let13 := (binrel% LT.lt x2 let9)
  let let14 := (binrel% LE.le let11 x2)
  let let15 := (binrel% LT.lt x1 let9)
  let let16 := (binrel% LE.le let11 x1)
  let let17 := (Ne x2 x3)
  let let18 := (Ne x1 x3)
  let let19 := (Ne x1 x2)
  let let20 := (hashx5f3 x3)
  let let21 := (Eq let20 x3)
  let let22 := (Eq let20 x2)
  let let23 := (Eq let20 x1)
  let let24 := (Or (Or let23 let22) let21)
  let let25 := (hashx5f3 x2)
  let let26 := (Eq let25 x3)
  let let27 := (Eq let25 x2)
  let let28 := (Eq let25 x1)
  let let29 := (Or (Or let28 let27) let26)
  let let30 := (hashx5f3 x1)
  let let31 := (Eq let30 x3)
  let let32 := (Eq let30 x2)
  let let33 := (Eq let30 x1)
  let let34 := (Or (Or let33 let32) let31)
  let let35 := (hashx5f2 x3)
  let let36 := (Eq let35 x3)
  let let37 := (Eq let35 x2)
  let let38 := (Eq let35 x1)
  let let39 := (Or (Or let38 let37) let36)
  let let40 := (hashx5f2 x2)
  let let41 := (Eq let40 x3)
  let let42 := (Eq let40 x2)
  let let43 := (Eq let40 x1)
  let let44 := (Or (Or let43 let42) let41)
  let let45 := (Eq let3 x3)
  let let46 := (Eq let3 x2)
  let let47 := (Eq let3 x1)
  let let48 := (Or (Or let47 let46) let45)
  let let49 := (hashx5f1 x3)
  let let50 := (Eq let49 x3)
  let let51 := (Eq let49 x2)
  let let52 := (Eq let49 x1)
  let let53 := (Or (Or let52 let51) let50)
  let let54 := (hashx5f1 x2)
  let let55 := (Eq let54 x3)
  let let56 := (Eq let54 x2)
  let let57 := (Eq let54 x1)
  let let58 := (Or (Or let57 let56) let55)
  let let59 := (Eq let1 x3)
  let let60 := (Eq let1 x2)
  let let61 := (Eq let1 x1)
  let let62 := (Or (Or let61 let60) let59)
  let let63 := (Ne let25 let20)
  let let64 := (Ne let30 let20)
  let let65 := (Ne let30 let25)
  let let66 := (Ne let40 let35)
  let let67 := (Ne let3 let35)
  let let68 := (Ne let3 let40)
  let let69 := (Ne let54 let49)
  let let70 := (Ne let1 let49)
  let let71 := (Ne let1 let54)
  let let72 := (And let71 (And let70 (And let69 (And let68 (And let67 (And let66 (And let65 (And let64 (And let63 (And let62 (And let58 (And let53 (And let48 (And let44 (And let39 (And let34 (And let29 (And let24 (And let19 (And let18 (And let17 (And let16 (And let15 (And let14 (And let13 (And let12 (And let10 let8)))))))))))))))))))))))))))
  let let73 := (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And let71 let70) let69) let68) let67) let66) let65) let64) let63) let62) let58) let53) let48) let44) let39) let34) let29) let24) let19) let18) let17) let16) let15) let14) let13) let12) let10) let8)
  let let74 := (Eq x1 let35)
  let let75 := (Eq x2 let35)
  let let76 := (Eq x3 let35)
  let let77 := (Or let47 (Or let46 let45))
  let let78 := (Or let33 (Or let32 let31))
  let let79 := (Eq x3 let20)
  let let80 := (Eq let5 let5)
  let let81 := (Eq x1 let30)
  let let82 := (Eq x2 let30)
  let let83 := (Eq x3 let30)
  let let84 := (Or let23 (Or let22 let21))
  let let85 := (Eq x1 let20)
  let let86 := (Not (Eq let1 let54))
  let let87 := (Or let43 (Or let42 let41))
  let let88 := (Not (Eq x1 x2))
  let let89 := (Or let52 (Or let51 let50))
  let let90 := (Eq x2 let20)
  let let91 := (Not (binrel% GE.ge x3 let9))
  let let92 := (binrel% GE.ge x3 let11)
  let let93 := (Not (binrel% GE.ge x2 let9))
  let let94 := (binrel% GE.ge x2 let11)
  let let95 := (Not (binrel% GE.ge x1 let9))
  let let96 := (binrel% GE.ge x1 let11)
  let let97 := (Not (Eq x2 x3))
  let let98 := (Not (Eq x1 x3))
  let let99 := (Or let85 (Or let90 let79))
  let let100 := (Eq x3 let25)
  let let101 := (Eq x2 let25)
  let let102 := (Eq x1 let25)
  let let103 := (Or let102 (Or let101 let100))
  let let104 := (Or let81 (Or let82 let83))
  let let105 := (Or let74 (Or let75 let76))
  let let106 := (Eq x3 let40)
  let let107 := (Eq x2 let40)
  let let108 := (Eq x1 let40)
  let let109 := (Or let108 (Or let107 let106))
  let let110 := (Eq x3 let3)
  let let111 := (Eq x2 let3)
  let let112 := (Eq x1 let3)
  let let113 := (Or let112 (Or let111 let110))
  let let114 := (Eq x3 let49)
  let let115 := (Eq x2 let49)
  let let116 := (Eq x1 let49)
  let let117 := (Or let116 (Or let115 let114))
  let let118 := (Eq x3 let54)
  let let119 := (Eq x2 let54)
  let let120 := (Eq x1 let54)
  let let121 := (Or let120 (Or let119 let118))
  let let122 := (Eq x3 let1)
  let let123 := (Eq x2 let1)
  let let124 := (Eq x1 let1)
  let let125 := (Or let124 (Or let123 let122))
  let let126 := (Not (Eq let25 let20))
  let let127 := (Not (Eq let30 let20))
  let let128 := (Not (Eq let30 let25))
  let let129 := (Not (Eq let40 let35))
  let let130 := (Not (Eq let3 let35))
  let let131 := (Not (Eq let3 let40))
  let let132 := (Not (Eq let54 let49))
  let let133 := (Not (Eq let1 let49))
  let let134 := (And let86 (And let133 (And let132 (And let131 (And let130 (And let129 (And let128 (And let127 (And let126 (And let125 (And let121 (And let117 (And let113 (And let109 (And let105 (And let104 (And let103 (And let99 (And let88 (And let98 (And let97 (And let96 (And let95 (And let94 (And let93 (And let92 (And let91 False)))))))))))))))))))))))))))
  let let135 := (Or let28 (Or let27 let26))
  let let136 := (Not True)
  let let137 := (Or let38 (Or let37 let36))
  let let138 := (Eq let7 let5)
  let let139 := (Not let138)
  let let140 := (Or let61 (Or let60 let59))
  let let141 := (Or let57 (Or let56 let55))
  let let142 := (Eq Or Or)
fun lean_r0 : (Eq let73 let72) => -- THEORY_REWRITE_BOOL
fun lean_r1 : (Eq let38 let74) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let37 let75) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let36 let76) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let48 let77) => -- THEORY_REWRITE_BOOL
fun lean_r5 : (Eq let34 let78) => -- THEORY_REWRITE_BOOL
fun lean_r6 : (Eq let21 let79) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let80 True) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let33 let81) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let32 let82) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let31 let83) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let24 let84) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let6 let2) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let23 let85) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let71 let86) => -- THEORY_REWRITE_BUILTIN
fun lean_r15 : (Eq let44 let87) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let19 let88) => -- THEORY_REWRITE_BUILTIN
fun lean_r17 : (Eq let53 let89) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let22 let90) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let134 False) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let29 let135) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let51 let115) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let136 False) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let27 let101) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let61 let124) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let26 let100) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let39 let137) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let60 let123) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let63 let126) => -- THEORY_REWRITE_BUILTIN
fun lean_r29 : (Eq let10 let91) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let65 let128) => -- THEORY_REWRITE_BUILTIN
fun lean_r31 : (Eq let13 let93) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let59 let122) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let28 let102) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let68 let131) => -- THEORY_REWRITE_BUILTIN
fun lean_r35 : (Eq let41 let106) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let16 let96) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let50 let114) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let8 let139) => -- THEORY_REWRITE_BUILTIN
fun lean_r39 : (Eq let62 let140) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let52 let116) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let12 let92) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let64 let127) => -- THEORY_REWRITE_BUILTIN
fun lean_r43 : (Eq let69 let132) => -- THEORY_REWRITE_BUILTIN
fun lean_r44 : (Eq let17 let97) => -- THEORY_REWRITE_BUILTIN
fun lean_r45 : (Eq let42 let107) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let14 let94) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let66 let129) => -- THEORY_REWRITE_BUILTIN
fun lean_r48 : (Eq let70 let133) => -- THEORY_REWRITE_BUILTIN
fun lean_r49 : (Eq let18 let98) => -- THEORY_REWRITE_BUILTIN
fun lean_r50 : (Eq let43 let108) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let15 let95) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let67 let130) => -- THEORY_REWRITE_BUILTIN
fun lean_r53 : (Eq let45 let110) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let58 let141) => -- THEORY_REWRITE_BOOL
fun lean_r55 : (Eq let46 let111) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let47 let112) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let55 let118) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let56 let119) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let57 let120) => -- THEORY_REWRITE_ARITH
fun lean_a60 : let73 => by
have lean_s0 : (Eq And And) := by timed rfl
let lean_s1 := by timed congr lean_s0 lean_r14
let lean_s2 := by timed congr lean_s0 lean_r48
let lean_s3 := by timed congr lean_s0 lean_r43
let lean_s4 := by timed congr lean_s0 lean_r34
let lean_s5 := by timed congr lean_s0 lean_r52
let lean_s6 := by timed congr lean_s0 lean_r47
let lean_s7 := by timed congr lean_s0 lean_r30
let lean_s8 := by timed congr lean_s0 lean_r42
let lean_s9 := by timed congr lean_s0 lean_r28
have lean_s10 : let142 := by timed rfl
let lean_s11 := by timed congr lean_s10 lean_r24
let lean_s12 := by timed congr lean_s10 lean_r27
let lean_s13 := by timed congr lean_s12 lean_r32
have lean_s14 : (Eq let140 let125) := by timed congr lean_s11 lean_s13
have lean_s15 : (Eq let62 let125) := by timed Eq.trans lean_r39 lean_s14
let lean_s16 := by timed congr lean_s0 lean_s15
have lean_s17 : let142 := by timed rfl
let lean_s18 := by timed congr lean_s17 lean_r59
let lean_s19 := by timed congr lean_s17 lean_r58
let lean_s20 := by timed congr lean_s19 lean_r57
have lean_s21 : (Eq let141 let121) := by timed congr lean_s18 lean_s20
have lean_s22 : (Eq let58 let121) := by timed Eq.trans lean_r54 lean_s21
let lean_s23 := by timed congr lean_s0 lean_s22
have lean_s24 : let142 := by timed rfl
let lean_s25 := by timed congr lean_s24 lean_r40
let lean_s26 := by timed congr lean_s24 lean_r21
let lean_s27 := by timed congr lean_s26 lean_r37
have lean_s28 : (Eq let89 let117) := by timed congr lean_s25 lean_s27
have lean_s29 : (Eq let53 let117) := by timed Eq.trans lean_r17 lean_s28
let lean_s30 := by timed congr lean_s0 lean_s29
have lean_s31 : let142 := by timed rfl
let lean_s32 := by timed congr lean_s31 lean_r56
let lean_s33 := by timed congr lean_s31 lean_r55
let lean_s34 := by timed congr lean_s33 lean_r53
have lean_s35 : (Eq let77 let113) := by timed congr lean_s32 lean_s34
have lean_s36 : (Eq let48 let113) := by timed Eq.trans lean_r4 lean_s35
let lean_s37 := by timed congr lean_s0 lean_s36
have lean_s38 : let142 := by timed rfl
let lean_s39 := by timed congr lean_s38 lean_r50
let lean_s40 := by timed congr lean_s38 lean_r45
let lean_s41 := by timed congr lean_s40 lean_r35
have lean_s42 : (Eq let87 let109) := by timed congr lean_s39 lean_s41
have lean_s43 : (Eq let44 let109) := by timed Eq.trans lean_r15 lean_s42
let lean_s44 := by timed congr lean_s0 lean_s43
have lean_s45 : let142 := by timed rfl
let lean_s46 := by timed congr lean_s45 lean_r1
let lean_s47 := by timed congr lean_s45 lean_r2
let lean_s48 := by timed congr lean_s47 lean_r3
have lean_s49 : (Eq let137 let105) := by timed congr lean_s46 lean_s48
have lean_s50 : (Eq let39 let105) := by timed Eq.trans lean_r26 lean_s49
let lean_s51 := by timed congr lean_s0 lean_s50
have lean_s52 : let142 := by timed rfl
let lean_s53 := by timed congr lean_s52 lean_r8
let lean_s54 := by timed congr lean_s52 lean_r9
let lean_s55 := by timed congr lean_s54 lean_r10
have lean_s56 : (Eq let78 let104) := by timed congr lean_s53 lean_s55
have lean_s57 : (Eq let34 let104) := by timed Eq.trans lean_r5 lean_s56
let lean_s58 := by timed congr lean_s0 lean_s57
have lean_s59 : let142 := by timed rfl
let lean_s60 := by timed congr lean_s59 lean_r33
let lean_s61 := by timed congr lean_s59 lean_r23
let lean_s62 := by timed congr lean_s61 lean_r25
have lean_s63 : (Eq let135 let103) := by timed congr lean_s60 lean_s62
have lean_s64 : (Eq let29 let103) := by timed Eq.trans lean_r20 lean_s63
let lean_s65 := by timed congr lean_s0 lean_s64
have lean_s66 : let142 := by timed rfl
let lean_s67 := by timed congr lean_s66 lean_r13
let lean_s68 := by timed congr lean_s66 lean_r18
let lean_s69 := by timed congr lean_s68 lean_r6
have lean_s70 : (Eq let84 let99) := by timed congr lean_s67 lean_s69
have lean_s71 : (Eq let24 let99) := by timed Eq.trans lean_r11 lean_s70
let lean_s72 := by timed congr lean_s0 lean_s71
let lean_s73 := by timed congr lean_s0 lean_r16
let lean_s74 := by timed congr lean_s0 lean_r49
let lean_s75 := by timed congr lean_s0 lean_r44
let lean_s76 := by timed congr lean_s0 lean_r36
let lean_s77 := by timed congr lean_s0 lean_r51
let lean_s78 := by timed congr lean_s0 lean_r46
let lean_s79 := by timed congr lean_s0 lean_r31
let lean_s80 := by timed congr lean_s0 lean_r41
let lean_s81 := by timed congr lean_s0 lean_r29
have lean_s82 : (Eq let4 let4) := by timed rfl
have lean_s83 : (Eq let3 let3) := by timed rfl
have lean_s84 : let138 := by timed congrIte lean_s82 lean_s83 lean_r12
let lean_s85 := by timed flipCongrArg lean_s84 [Eq]
have lean_s86 : let80 := by timed rfl
have lean_s87 : (Eq let138 let80) := by timed congr lean_s85 lean_s86
have lean_s88 : (Eq let138 True) := by timed Eq.trans lean_s87 lean_r7
have lean_s89 : (Eq let139 let136) := by timed flipCongrArg lean_s88 [Not]
have lean_s90 : (Eq let139 False) := by timed Eq.trans lean_s89 lean_r22
have lean_s91 : (Eq let8 False) := by timed Eq.trans lean_r38 lean_s90
let lean_s92 := by timed congr lean_s81 lean_s91
let lean_s93 := by timed congr lean_s80 lean_s92
let lean_s94 := by timed congr lean_s79 lean_s93
let lean_s95 := by timed congr lean_s78 lean_s94
let lean_s96 := by timed congr lean_s77 lean_s95
let lean_s97 := by timed congr lean_s76 lean_s96
let lean_s98 := by timed congr lean_s75 lean_s97
let lean_s99 := by timed congr lean_s74 lean_s98
let lean_s100 := by timed congr lean_s73 lean_s99
let lean_s101 := by timed congr lean_s72 lean_s100
let lean_s102 := by timed congr lean_s65 lean_s101
let lean_s103 := by timed congr lean_s58 lean_s102
let lean_s104 := by timed congr lean_s51 lean_s103
let lean_s105 := by timed congr lean_s44 lean_s104
let lean_s106 := by timed congr lean_s37 lean_s105
let lean_s107 := by timed congr lean_s30 lean_s106
let lean_s108 := by timed congr lean_s23 lean_s107
let lean_s109 := by timed congr lean_s16 lean_s108
let lean_s110 := by timed congr lean_s9 lean_s109
let lean_s111 := by timed congr lean_s8 lean_s110
let lean_s112 := by timed congr lean_s7 lean_s111
let lean_s113 := by timed congr lean_s6 lean_s112
let lean_s114 := by timed congr lean_s5 lean_s113
let lean_s115 := by timed congr lean_s4 lean_s114
let lean_s116 := by timed congr lean_s3 lean_s115
let lean_s117 := by timed congr lean_s2 lean_s116
have lean_s118 : (Eq let72 let134) := by timed congr lean_s1 lean_s117
have lean_s119 : (Eq let72 False) := by timed Eq.trans lean_s118 lean_r19
have lean_s120 : (Eq let73 False) := by timed Eq.trans lean_r0 lean_s119
exact (show False from by timed eqResolve lean_a60 lean_s120)


