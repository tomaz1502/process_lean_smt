open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x1 : Int}
variable {hashx5f1 : (Int -> Int)}
variable {x3 : Int}
variable {x2 : Int}
variable {hashx5f4 : (Int -> Int)}
variable {hashx5f3 : (Int -> Int)}
variable {hashx5f2 : (Int -> Int)}
variable {hashx5f4 : (Int -> Int)}
variable {x1 : Int}
variable {x3 : Int}
variable {hashx5f1 : (Int -> Int)}
variable {hashx5f2 : (Int -> Int)}
variable {hashx5f3 : (Int -> Int)}
variable {x2 : Int}

theorem th0 :
  let let1 := (hashx5f1 x1)
  let let2 := (binrel% HMul.hMul (Int.ofNat 2) let1)
  let let3 := (hashx5f2 x1)
  let let4 := (Eq let1 let3)
  let let5 := (smtIte let4 let3 let2 Int)
  let let6 := (binrel% HAdd.hAdd let1 let1)
  let let7 := (smtIte let4 let3 let6 Int)
  let let8 := (Ne let7 let5)
  let let9 := (Int.ofNat 4)
  let let10 := (binrel% LT.lt x3 let9)
  let let11 := (Int.ofNat 0)
  let let12 := (binrel% LE.le let11 x3)
  let let13 := (binrel% LT.lt x2 let9)
  let let14 := (binrel% LE.le let11 x2)
  let let15 := (binrel% LT.lt x1 let9)
  let let16 := (binrel% LE.le let11 x1)
  let let17 := (Ne x2 x3)
  let let18 := (Ne x1 x3)
  let let19 := (Ne x1 x2)
  let let20 := (hashx5f4 x3)
  let let21 := (Eq let20 x3)
  let let22 := (Eq let20 x2)
  let let23 := (Eq let20 x1)
  let let24 := (Or (Or let23 let22) let21)
  let let25 := (hashx5f4 x2)
  let let26 := (Eq let25 x3)
  let let27 := (Eq let25 x2)
  let let28 := (Eq let25 x1)
  let let29 := (Or (Or let28 let27) let26)
  let let30 := (hashx5f4 x1)
  let let31 := (Eq let30 x3)
  let let32 := (Eq let30 x2)
  let let33 := (Eq let30 x1)
  let let34 := (Or (Or let33 let32) let31)
  let let35 := (hashx5f3 x3)
  let let36 := (Eq let35 x3)
  let let37 := (Eq let35 x2)
  let let38 := (Eq let35 x1)
  let let39 := (Or (Or let38 let37) let36)
  let let40 := (hashx5f3 x2)
  let let41 := (Eq let40 x3)
  let let42 := (Eq let40 x2)
  let let43 := (Eq let40 x1)
  let let44 := (Or (Or let43 let42) let41)
  let let45 := (hashx5f3 x1)
  let let46 := (Eq let45 x3)
  let let47 := (Eq let45 x2)
  let let48 := (Eq let45 x1)
  let let49 := (Or (Or let48 let47) let46)
  let let50 := (hashx5f2 x3)
  let let51 := (Eq let50 x3)
  let let52 := (Eq let50 x2)
  let let53 := (Eq let50 x1)
  let let54 := (Or (Or let53 let52) let51)
  let let55 := (hashx5f2 x2)
  let let56 := (Eq let55 x3)
  let let57 := (Eq let55 x2)
  let let58 := (Eq let55 x1)
  let let59 := (Or (Or let58 let57) let56)
  let let60 := (Eq let3 x3)
  let let61 := (Eq let3 x2)
  let let62 := (Eq let3 x1)
  let let63 := (Or (Or let62 let61) let60)
  let let64 := (hashx5f1 x3)
  let let65 := (Eq let64 x3)
  let let66 := (Eq let64 x2)
  let let67 := (Eq let64 x1)
  let let68 := (Or (Or let67 let66) let65)
  let let69 := (hashx5f1 x2)
  let let70 := (Eq let69 x3)
  let let71 := (Eq let69 x2)
  let let72 := (Eq let69 x1)
  let let73 := (Or (Or let72 let71) let70)
  let let74 := (Eq let1 x3)
  let let75 := (Eq let1 x2)
  let let76 := (Eq let1 x1)
  let let77 := (Or (Or let76 let75) let74)
  let let78 := (Ne let25 let20)
  let let79 := (Ne let30 let20)
  let let80 := (Ne let30 let25)
  let let81 := (Ne let40 let35)
  let let82 := (Ne let45 let35)
  let let83 := (Ne let45 let40)
  let let84 := (Ne let55 let50)
  let let85 := (Ne let3 let50)
  let let86 := (Ne let3 let55)
  let let87 := (Ne let69 let64)
  let let88 := (Ne let1 let64)
  let let89 := (Ne let1 let69)
  let let90 := (And let89 (And let88 (And let87 (And let86 (And let85 (And let84 (And let83 (And let82 (And let81 (And let80 (And let79 (And let78 (And let77 (And let73 (And let68 (And let63 (And let59 (And let54 (And let49 (And let44 (And let39 (And let34 (And let29 (And let24 (And let19 (And let18 (And let17 (And let16 (And let15 (And let14 (And let13 (And let12 (And let10 let8)))))))))))))))))))))))))))))))))
  let let91 := (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And let89 let88) let87) let86) let85) let84) let83) let82) let81) let80) let79) let78) let77) let73) let68) let63) let59) let54) let49) let44) let39) let34) let29) let24) let19) let18) let17) let16) let15) let14) let13) let12) let10) let8)
  let let92 := (Not (Eq let1 let69))
  let let93 := (Not (Eq let1 let64))
  let let94 := (Not (Eq let69 let64))
  let let95 := (Not (Eq let45 let35))
  let let96 := (Not (Eq let40 let35))
  let let97 := (Not (Eq let30 let25))
  let let98 := (Not (Eq let30 let20))
  let let99 := (Not (Eq let25 let20))
  let let100 := (Or let76 (Or let75 let74))
  let let101 := (Eq x1 let1)
  let let102 := (Eq x2 let1)
  let let103 := (Eq x2 let35)
  let let104 := (Eq x3 let35)
  let let105 := (Or let48 (Or let47 let46))
  let let106 := (Or let33 (Or let32 let31))
  let let107 := (Eq x3 let20)
  let let108 := (Eq let5 let5)
  let let109 := (Eq x1 let30)
  let let110 := (Eq x2 let30)
  let let111 := (Eq x3 let30)
  let let112 := (Or let23 (Or let22 let21))
  let let113 := (Eq x1 let20)
  let let114 := (Eq x2 let20)
  let let115 := (Or let43 (Or let42 let41))
  let let116 := (Not (Eq x1 x2))
  let let117 := (Or let53 (Or let52 let51))
  let let118 := (Eq x1 let25)
  let let119 := (Eq x3 let40)
  let let120 := (binrel% GE.ge x1 let11)
  let let121 := (Eq x3 let50)
  let let122 := (Not True)
  let let123 := (Eq x2 let25)
  let let124 := (Not (binrel% GE.ge x1 let9))
  let let125 := (Eq x1 let3)
  let let126 := (Eq x3 let25)
  let let127 := (Or let38 (Or let37 let36))
  let let128 := (binrel% GE.ge x2 let11)
  let let129 := (Eq x2 let3)
  let let130 := (Or let28 (Or let27 let26))
  let let131 := (Eq x2 let50)
  let let132 := (Or let62 (Or let61 let60))
  let let133 := (Eq let7 let5)
  let let134 := (Not let133)
  let let135 := (Eq x3 let69)
  let let136 := (Not (binrel% GE.ge x3 let9))
  let let137 := (Eq x2 let69)
  let let138 := (Eq x1 let35)
  let let139 := (binrel% GE.ge x3 let11)
  let let140 := (Not (binrel% GE.ge x2 let9))
  let let141 := (Not (Eq x2 x3))
  let let142 := (Not (Eq x1 x3))
  let let143 := (Or let113 (Or let114 let107))
  let let144 := (Or let118 (Or let123 let126))
  let let145 := (Or let109 (Or let110 let111))
  let let146 := (Or let138 (Or let103 let104))
  let let147 := (Eq x2 let40)
  let let148 := (Eq x1 let40)
  let let149 := (Or let148 (Or let147 let119))
  let let150 := (Eq x3 let45)
  let let151 := (Eq x2 let45)
  let let152 := (Eq x1 let45)
  let let153 := (Or let152 (Or let151 let150))
  let let154 := (Eq x1 let50)
  let let155 := (Or let154 (Or let131 let121))
  let let156 := (Eq x3 let55)
  let let157 := (Eq x2 let55)
  let let158 := (Eq x1 let55)
  let let159 := (Or let158 (Or let157 let156))
  let let160 := (Eq x3 let3)
  let let161 := (Or let125 (Or let129 let160))
  let let162 := (Eq x3 let64)
  let let163 := (Eq x2 let64)
  let let164 := (Eq x1 let64)
  let let165 := (Or let164 (Or let163 let162))
  let let166 := (Eq x1 let69)
  let let167 := (Or let166 (Or let137 let135))
  let let168 := (Eq x3 let1)
  let let169 := (Or let101 (Or let102 let168))
  let let170 := (Not (Eq let45 let40))
  let let171 := (Not (Eq let55 let50))
  let let172 := (Not (Eq let3 let50))
  let let173 := (Not (Eq let3 let55))
  let let174 := (And let92 (And let93 (And let94 (And let173 (And let172 (And let171 (And let170 (And let95 (And let96 (And let97 (And let98 (And let99 (And let169 (And let167 (And let165 (And let161 (And let159 (And let155 (And let153 (And let149 (And let146 (And let145 (And let144 (And let143 (And let116 (And let142 (And let141 (And let120 (And let124 (And let128 (And let140 (And let139 (And let136 False)))))))))))))))))))))))))))))))))
  let let175 := (Or let72 (Or let71 let70))
  let let176 := (Or let58 (Or let57 let56))
  let let177 := (Or let67 (Or let66 let65))
  let let178 := (Eq Or Or)
(Eq let91 let90) → (Eq let89 let92) → (Eq let88 let93) → (Eq let87 let94) → (Eq let82 let95) → (Eq let81 let96) → (Eq let80 let97) → (Eq let79 let98) → (Eq let78 let99) → (Eq let77 let100) → (Eq let76 let101) → (Eq let75 let102) → (Eq let37 let103) → (Eq let36 let104) → (Eq let49 let105) → (Eq let34 let106) → (Eq let21 let107) → (Eq let108 True) → (Eq let33 let109) → (Eq let32 let110) → (Eq let31 let111) → (Eq let24 let112) → (Eq let6 let2) → (Eq let23 let113) → (Eq let22 let114) → (Eq let44 let115) → (Eq let19 let116) → (Eq let54 let117) → (Eq let28 let118) → (Eq let41 let119) → (Eq let16 let120) → (Eq let51 let121) → (Eq let122 False) → (Eq let27 let123) → (Eq let15 let124) → (Eq let62 let125) → (Eq let26 let126) → (Eq let39 let127) → (Eq let14 let128) → (Eq let61 let129) → (Eq let29 let130) → (Eq let52 let131) → (Eq let63 let132) → (Eq let8 let134) → (Eq let70 let135) → (Eq let10 let136) → (Eq let71 let137) → (Eq let38 let138) → (Eq let174 False) → (Eq let67 let164) → (Eq let12 let139) → (Eq let72 let166) → (Eq let13 let140) → (Eq let60 let160) → (Eq let73 let175) → (Eq let53 let154) → (Eq let17 let141) → (Eq let42 let147) → (Eq let18 let142) → (Eq let43 let148) → (Eq let46 let150) → (Eq let86 let173) → (Eq let59 let176) → (Eq let47 let151) → (Eq let48 let152) → (Eq let83 let170) → (Eq let56 let156) → (Eq let68 let177) → (Eq let84 let171) → (Eq let57 let157) → (Eq let85 let172) → (Eq let58 let158) → (Eq let65 let162) → (Eq let66 let163) → (Eq let74 let168) → let91 → False :=
  let let1 := (hashx5f1 x1)
  let let2 := (binrel% HMul.hMul (Int.ofNat 2) let1)
  let let3 := (hashx5f2 x1)
  let let4 := (Eq let1 let3)
  let let5 := (smtIte let4 let3 let2 Int)
  let let6 := (binrel% HAdd.hAdd let1 let1)
  let let7 := (smtIte let4 let3 let6 Int)
  let let8 := (Ne let7 let5)
  let let9 := (Int.ofNat 4)
  let let10 := (binrel% LT.lt x3 let9)
  let let11 := (Int.ofNat 0)
  let let12 := (binrel% LE.le let11 x3)
  let let13 := (binrel% LT.lt x2 let9)
  let let14 := (binrel% LE.le let11 x2)
  let let15 := (binrel% LT.lt x1 let9)
  let let16 := (binrel% LE.le let11 x1)
  let let17 := (Ne x2 x3)
  let let18 := (Ne x1 x3)
  let let19 := (Ne x1 x2)
  let let20 := (hashx5f4 x3)
  let let21 := (Eq let20 x3)
  let let22 := (Eq let20 x2)
  let let23 := (Eq let20 x1)
  let let24 := (Or (Or let23 let22) let21)
  let let25 := (hashx5f4 x2)
  let let26 := (Eq let25 x3)
  let let27 := (Eq let25 x2)
  let let28 := (Eq let25 x1)
  let let29 := (Or (Or let28 let27) let26)
  let let30 := (hashx5f4 x1)
  let let31 := (Eq let30 x3)
  let let32 := (Eq let30 x2)
  let let33 := (Eq let30 x1)
  let let34 := (Or (Or let33 let32) let31)
  let let35 := (hashx5f3 x3)
  let let36 := (Eq let35 x3)
  let let37 := (Eq let35 x2)
  let let38 := (Eq let35 x1)
  let let39 := (Or (Or let38 let37) let36)
  let let40 := (hashx5f3 x2)
  let let41 := (Eq let40 x3)
  let let42 := (Eq let40 x2)
  let let43 := (Eq let40 x1)
  let let44 := (Or (Or let43 let42) let41)
  let let45 := (hashx5f3 x1)
  let let46 := (Eq let45 x3)
  let let47 := (Eq let45 x2)
  let let48 := (Eq let45 x1)
  let let49 := (Or (Or let48 let47) let46)
  let let50 := (hashx5f2 x3)
  let let51 := (Eq let50 x3)
  let let52 := (Eq let50 x2)
  let let53 := (Eq let50 x1)
  let let54 := (Or (Or let53 let52) let51)
  let let55 := (hashx5f2 x2)
  let let56 := (Eq let55 x3)
  let let57 := (Eq let55 x2)
  let let58 := (Eq let55 x1)
  let let59 := (Or (Or let58 let57) let56)
  let let60 := (Eq let3 x3)
  let let61 := (Eq let3 x2)
  let let62 := (Eq let3 x1)
  let let63 := (Or (Or let62 let61) let60)
  let let64 := (hashx5f1 x3)
  let let65 := (Eq let64 x3)
  let let66 := (Eq let64 x2)
  let let67 := (Eq let64 x1)
  let let68 := (Or (Or let67 let66) let65)
  let let69 := (hashx5f1 x2)
  let let70 := (Eq let69 x3)
  let let71 := (Eq let69 x2)
  let let72 := (Eq let69 x1)
  let let73 := (Or (Or let72 let71) let70)
  let let74 := (Eq let1 x3)
  let let75 := (Eq let1 x2)
  let let76 := (Eq let1 x1)
  let let77 := (Or (Or let76 let75) let74)
  let let78 := (Ne let25 let20)
  let let79 := (Ne let30 let20)
  let let80 := (Ne let30 let25)
  let let81 := (Ne let40 let35)
  let let82 := (Ne let45 let35)
  let let83 := (Ne let45 let40)
  let let84 := (Ne let55 let50)
  let let85 := (Ne let3 let50)
  let let86 := (Ne let3 let55)
  let let87 := (Ne let69 let64)
  let let88 := (Ne let1 let64)
  let let89 := (Ne let1 let69)
  let let90 := (And let89 (And let88 (And let87 (And let86 (And let85 (And let84 (And let83 (And let82 (And let81 (And let80 (And let79 (And let78 (And let77 (And let73 (And let68 (And let63 (And let59 (And let54 (And let49 (And let44 (And let39 (And let34 (And let29 (And let24 (And let19 (And let18 (And let17 (And let16 (And let15 (And let14 (And let13 (And let12 (And let10 let8)))))))))))))))))))))))))))))))))
  let let91 := (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And let89 let88) let87) let86) let85) let84) let83) let82) let81) let80) let79) let78) let77) let73) let68) let63) let59) let54) let49) let44) let39) let34) let29) let24) let19) let18) let17) let16) let15) let14) let13) let12) let10) let8)
  let let92 := (Not (Eq let1 let69))
  let let93 := (Not (Eq let1 let64))
  let let94 := (Not (Eq let69 let64))
  let let95 := (Not (Eq let45 let35))
  let let96 := (Not (Eq let40 let35))
  let let97 := (Not (Eq let30 let25))
  let let98 := (Not (Eq let30 let20))
  let let99 := (Not (Eq let25 let20))
  let let100 := (Or let76 (Or let75 let74))
  let let101 := (Eq x1 let1)
  let let102 := (Eq x2 let1)
  let let103 := (Eq x2 let35)
  let let104 := (Eq x3 let35)
  let let105 := (Or let48 (Or let47 let46))
  let let106 := (Or let33 (Or let32 let31))
  let let107 := (Eq x3 let20)
  let let108 := (Eq let5 let5)
  let let109 := (Eq x1 let30)
  let let110 := (Eq x2 let30)
  let let111 := (Eq x3 let30)
  let let112 := (Or let23 (Or let22 let21))
  let let113 := (Eq x1 let20)
  let let114 := (Eq x2 let20)
  let let115 := (Or let43 (Or let42 let41))
  let let116 := (Not (Eq x1 x2))
  let let117 := (Or let53 (Or let52 let51))
  let let118 := (Eq x1 let25)
  let let119 := (Eq x3 let40)
  let let120 := (binrel% GE.ge x1 let11)
  let let121 := (Eq x3 let50)
  let let122 := (Not True)
  let let123 := (Eq x2 let25)
  let let124 := (Not (binrel% GE.ge x1 let9))
  let let125 := (Eq x1 let3)
  let let126 := (Eq x3 let25)
  let let127 := (Or let38 (Or let37 let36))
  let let128 := (binrel% GE.ge x2 let11)
  let let129 := (Eq x2 let3)
  let let130 := (Or let28 (Or let27 let26))
  let let131 := (Eq x2 let50)
  let let132 := (Or let62 (Or let61 let60))
  let let133 := (Eq let7 let5)
  let let134 := (Not let133)
  let let135 := (Eq x3 let69)
  let let136 := (Not (binrel% GE.ge x3 let9))
  let let137 := (Eq x2 let69)
  let let138 := (Eq x1 let35)
  let let139 := (binrel% GE.ge x3 let11)
  let let140 := (Not (binrel% GE.ge x2 let9))
  let let141 := (Not (Eq x2 x3))
  let let142 := (Not (Eq x1 x3))
  let let143 := (Or let113 (Or let114 let107))
  let let144 := (Or let118 (Or let123 let126))
  let let145 := (Or let109 (Or let110 let111))
  let let146 := (Or let138 (Or let103 let104))
  let let147 := (Eq x2 let40)
  let let148 := (Eq x1 let40)
  let let149 := (Or let148 (Or let147 let119))
  let let150 := (Eq x3 let45)
  let let151 := (Eq x2 let45)
  let let152 := (Eq x1 let45)
  let let153 := (Or let152 (Or let151 let150))
  let let154 := (Eq x1 let50)
  let let155 := (Or let154 (Or let131 let121))
  let let156 := (Eq x3 let55)
  let let157 := (Eq x2 let55)
  let let158 := (Eq x1 let55)
  let let159 := (Or let158 (Or let157 let156))
  let let160 := (Eq x3 let3)
  let let161 := (Or let125 (Or let129 let160))
  let let162 := (Eq x3 let64)
  let let163 := (Eq x2 let64)
  let let164 := (Eq x1 let64)
  let let165 := (Or let164 (Or let163 let162))
  let let166 := (Eq x1 let69)
  let let167 := (Or let166 (Or let137 let135))
  let let168 := (Eq x3 let1)
  let let169 := (Or let101 (Or let102 let168))
  let let170 := (Not (Eq let45 let40))
  let let171 := (Not (Eq let55 let50))
  let let172 := (Not (Eq let3 let50))
  let let173 := (Not (Eq let3 let55))
  let let174 := (And let92 (And let93 (And let94 (And let173 (And let172 (And let171 (And let170 (And let95 (And let96 (And let97 (And let98 (And let99 (And let169 (And let167 (And let165 (And let161 (And let159 (And let155 (And let153 (And let149 (And let146 (And let145 (And let144 (And let143 (And let116 (And let142 (And let141 (And let120 (And let124 (And let128 (And let140 (And let139 (And let136 False)))))))))))))))))))))))))))))))))
  let let175 := (Or let72 (Or let71 let70))
  let let176 := (Or let58 (Or let57 let56))
  let let177 := (Or let67 (Or let66 let65))
  let let178 := (Eq Or Or)
fun lean_r0 : (Eq let91 let90) => -- THEORY_REWRITE_BOOL
fun lean_r1 : (Eq let89 let92) => -- THEORY_REWRITE_BUILTIN
fun lean_r2 : (Eq let88 let93) => -- THEORY_REWRITE_BUILTIN
fun lean_r3 : (Eq let87 let94) => -- THEORY_REWRITE_BUILTIN
fun lean_r4 : (Eq let82 let95) => -- THEORY_REWRITE_BUILTIN
fun lean_r5 : (Eq let81 let96) => -- THEORY_REWRITE_BUILTIN
fun lean_r6 : (Eq let80 let97) => -- THEORY_REWRITE_BUILTIN
fun lean_r7 : (Eq let79 let98) => -- THEORY_REWRITE_BUILTIN
fun lean_r8 : (Eq let78 let99) => -- THEORY_REWRITE_BUILTIN
fun lean_r9 : (Eq let77 let100) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let76 let101) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let75 let102) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let37 let103) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let36 let104) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let49 let105) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let34 let106) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let21 let107) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let108 True) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let33 let109) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let32 let110) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let31 let111) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let24 let112) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let6 let2) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let23 let113) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let22 let114) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let44 let115) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let19 let116) => -- THEORY_REWRITE_BUILTIN
fun lean_r27 : (Eq let54 let117) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let28 let118) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let41 let119) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let16 let120) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let51 let121) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let122 False) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let27 let123) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let15 let124) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let62 let125) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let26 let126) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let39 let127) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let14 let128) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let61 let129) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let29 let130) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let52 let131) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let63 let132) => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq let8 let134) => -- THEORY_REWRITE_BUILTIN
fun lean_r44 : (Eq let70 let135) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let10 let136) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let71 let137) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let38 let138) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let174 False) => -- THEORY_REWRITE_BOOL
fun lean_r49 : (Eq let67 let164) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let12 let139) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let72 let166) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let13 let140) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let60 let160) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let73 let175) => -- THEORY_REWRITE_BOOL
fun lean_r55 : (Eq let53 let154) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let17 let141) => -- THEORY_REWRITE_BUILTIN
fun lean_r57 : (Eq let42 let147) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let18 let142) => -- THEORY_REWRITE_BUILTIN
fun lean_r59 : (Eq let43 let148) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let46 let150) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let86 let173) => -- THEORY_REWRITE_BUILTIN
fun lean_r62 : (Eq let59 let176) => -- THEORY_REWRITE_BOOL
fun lean_r63 : (Eq let47 let151) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq let48 let152) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let83 let170) => -- THEORY_REWRITE_BUILTIN
fun lean_r66 : (Eq let56 let156) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq let68 let177) => -- THEORY_REWRITE_BOOL
fun lean_r68 : (Eq let84 let171) => -- THEORY_REWRITE_BUILTIN
fun lean_r69 : (Eq let57 let157) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq let85 let172) => -- THEORY_REWRITE_BUILTIN
fun lean_r71 : (Eq let58 let158) => -- THEORY_REWRITE_ARITH
fun lean_r72 : (Eq let65 let162) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let66 let163) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let74 let168) => -- THEORY_REWRITE_ARITH
fun lean_a75 : let91 => by
have lean_s0 : (Eq And And) := by timed rfl
let lean_s1 := by timed congr lean_s0 lean_r1
let lean_s2 := by timed congr lean_s0 lean_r2
let lean_s3 := by timed congr lean_s0 lean_r3
let lean_s4 := by timed congr lean_s0 lean_r61
let lean_s5 := by timed congr lean_s0 lean_r70
let lean_s6 := by timed congr lean_s0 lean_r68
let lean_s7 := by timed congr lean_s0 lean_r65
let lean_s8 := by timed congr lean_s0 lean_r4
let lean_s9 := by timed congr lean_s0 lean_r5
let lean_s10 := by timed congr lean_s0 lean_r6
let lean_s11 := by timed congr lean_s0 lean_r7
let lean_s12 := by timed congr lean_s0 lean_r8
have lean_s13 : let178 := by timed rfl
let lean_s14 := by timed congr lean_s13 lean_r10
let lean_s15 := by timed congr lean_s13 lean_r11
let lean_s16 := by timed congr lean_s15 lean_r74
have lean_s17 : (Eq let100 let169) := by timed congr lean_s14 lean_s16
have lean_s18 : (Eq let77 let169) := by timed Eq.trans lean_r9 lean_s17
let lean_s19 := by timed congr lean_s0 lean_s18
have lean_s20 : let178 := by timed rfl
let lean_s21 := by timed congr lean_s20 lean_r51
let lean_s22 := by timed congr lean_s20 lean_r46
let lean_s23 := by timed congr lean_s22 lean_r44
have lean_s24 : (Eq let175 let167) := by timed congr lean_s21 lean_s23
have lean_s25 : (Eq let73 let167) := by timed Eq.trans lean_r54 lean_s24
let lean_s26 := by timed congr lean_s0 lean_s25
have lean_s27 : let178 := by timed rfl
let lean_s28 := by timed congr lean_s27 lean_r49
let lean_s29 := by timed congr lean_s27 lean_r73
let lean_s30 := by timed congr lean_s29 lean_r72
have lean_s31 : (Eq let177 let165) := by timed congr lean_s28 lean_s30
have lean_s32 : (Eq let68 let165) := by timed Eq.trans lean_r67 lean_s31
let lean_s33 := by timed congr lean_s0 lean_s32
have lean_s34 : let178 := by timed rfl
let lean_s35 := by timed congr lean_s34 lean_r35
let lean_s36 := by timed congr lean_s34 lean_r39
let lean_s37 := by timed congr lean_s36 lean_r53
have lean_s38 : (Eq let132 let161) := by timed congr lean_s35 lean_s37
have lean_s39 : (Eq let63 let161) := by timed Eq.trans lean_r42 lean_s38
let lean_s40 := by timed congr lean_s0 lean_s39
have lean_s41 : let178 := by timed rfl
let lean_s42 := by timed congr lean_s41 lean_r71
let lean_s43 := by timed congr lean_s41 lean_r69
let lean_s44 := by timed congr lean_s43 lean_r66
have lean_s45 : (Eq let176 let159) := by timed congr lean_s42 lean_s44
have lean_s46 : (Eq let59 let159) := by timed Eq.trans lean_r62 lean_s45
let lean_s47 := by timed congr lean_s0 lean_s46
have lean_s48 : let178 := by timed rfl
let lean_s49 := by timed congr lean_s48 lean_r55
let lean_s50 := by timed congr lean_s48 lean_r41
let lean_s51 := by timed congr lean_s50 lean_r31
have lean_s52 : (Eq let117 let155) := by timed congr lean_s49 lean_s51
have lean_s53 : (Eq let54 let155) := by timed Eq.trans lean_r27 lean_s52
let lean_s54 := by timed congr lean_s0 lean_s53
have lean_s55 : let178 := by timed rfl
let lean_s56 := by timed congr lean_s55 lean_r64
let lean_s57 := by timed congr lean_s55 lean_r63
let lean_s58 := by timed congr lean_s57 lean_r60
have lean_s59 : (Eq let105 let153) := by timed congr lean_s56 lean_s58
have lean_s60 : (Eq let49 let153) := by timed Eq.trans lean_r14 lean_s59
let lean_s61 := by timed congr lean_s0 lean_s60
have lean_s62 : let178 := by timed rfl
let lean_s63 := by timed congr lean_s62 lean_r59
let lean_s64 := by timed congr lean_s62 lean_r57
let lean_s65 := by timed congr lean_s64 lean_r29
have lean_s66 : (Eq let115 let149) := by timed congr lean_s63 lean_s65
have lean_s67 : (Eq let44 let149) := by timed Eq.trans lean_r25 lean_s66
let lean_s68 := by timed congr lean_s0 lean_s67
have lean_s69 : let178 := by timed rfl
let lean_s70 := by timed congr lean_s69 lean_r47
let lean_s71 := by timed congr lean_s69 lean_r12
let lean_s72 := by timed congr lean_s71 lean_r13
have lean_s73 : (Eq let127 let146) := by timed congr lean_s70 lean_s72
have lean_s74 : (Eq let39 let146) := by timed Eq.trans lean_r37 lean_s73
let lean_s75 := by timed congr lean_s0 lean_s74
have lean_s76 : let178 := by timed rfl
let lean_s77 := by timed congr lean_s76 lean_r18
let lean_s78 := by timed congr lean_s76 lean_r19
let lean_s79 := by timed congr lean_s78 lean_r20
have lean_s80 : (Eq let106 let145) := by timed congr lean_s77 lean_s79
have lean_s81 : (Eq let34 let145) := by timed Eq.trans lean_r15 lean_s80
let lean_s82 := by timed congr lean_s0 lean_s81
have lean_s83 : let178 := by timed rfl
let lean_s84 := by timed congr lean_s83 lean_r28
let lean_s85 := by timed congr lean_s83 lean_r33
let lean_s86 := by timed congr lean_s85 lean_r36
have lean_s87 : (Eq let130 let144) := by timed congr lean_s84 lean_s86
have lean_s88 : (Eq let29 let144) := by timed Eq.trans lean_r40 lean_s87
let lean_s89 := by timed congr lean_s0 lean_s88
have lean_s90 : let178 := by timed rfl
let lean_s91 := by timed congr lean_s90 lean_r23
let lean_s92 := by timed congr lean_s90 lean_r24
let lean_s93 := by timed congr lean_s92 lean_r16
have lean_s94 : (Eq let112 let143) := by timed congr lean_s91 lean_s93
have lean_s95 : (Eq let24 let143) := by timed Eq.trans lean_r21 lean_s94
let lean_s96 := by timed congr lean_s0 lean_s95
let lean_s97 := by timed congr lean_s0 lean_r26
let lean_s98 := by timed congr lean_s0 lean_r58
let lean_s99 := by timed congr lean_s0 lean_r56
let lean_s100 := by timed congr lean_s0 lean_r30
let lean_s101 := by timed congr lean_s0 lean_r34
let lean_s102 := by timed congr lean_s0 lean_r38
let lean_s103 := by timed congr lean_s0 lean_r52
let lean_s104 := by timed congr lean_s0 lean_r50
let lean_s105 := by timed congr lean_s0 lean_r45
have lean_s106 : (Eq let4 let4) := by timed rfl
have lean_s107 : (Eq let3 let3) := by timed rfl
have lean_s108 : let133 := by timed congrIte lean_s106 lean_s107 lean_r22
let lean_s109 := by timed flipCongrArg lean_s108 [Eq]
have lean_s110 : let108 := by timed rfl
have lean_s111 : (Eq let133 let108) := by timed congr lean_s109 lean_s110
have lean_s112 : (Eq let133 True) := by timed Eq.trans lean_s111 lean_r17
have lean_s113 : (Eq let134 let122) := by timed flipCongrArg lean_s112 [Not]
have lean_s114 : (Eq let134 False) := by timed Eq.trans lean_s113 lean_r32
have lean_s115 : (Eq let8 False) := by timed Eq.trans lean_r43 lean_s114
let lean_s116 := by timed congr lean_s105 lean_s115
let lean_s117 := by timed congr lean_s104 lean_s116
let lean_s118 := by timed congr lean_s103 lean_s117
let lean_s119 := by timed congr lean_s102 lean_s118
let lean_s120 := by timed congr lean_s101 lean_s119
let lean_s121 := by timed congr lean_s100 lean_s120
let lean_s122 := by timed congr lean_s99 lean_s121
let lean_s123 := by timed congr lean_s98 lean_s122
let lean_s124 := by timed congr lean_s97 lean_s123
let lean_s125 := by timed congr lean_s96 lean_s124
let lean_s126 := by timed congr lean_s89 lean_s125
let lean_s127 := by timed congr lean_s82 lean_s126
let lean_s128 := by timed congr lean_s75 lean_s127
let lean_s129 := by timed congr lean_s68 lean_s128
let lean_s130 := by timed congr lean_s61 lean_s129
let lean_s131 := by timed congr lean_s54 lean_s130
let lean_s132 := by timed congr lean_s47 lean_s131
let lean_s133 := by timed congr lean_s40 lean_s132
let lean_s134 := by timed congr lean_s33 lean_s133
let lean_s135 := by timed congr lean_s26 lean_s134
let lean_s136 := by timed congr lean_s19 lean_s135
let lean_s137 := by timed congr lean_s12 lean_s136
let lean_s138 := by timed congr lean_s11 lean_s137
let lean_s139 := by timed congr lean_s10 lean_s138
let lean_s140 := by timed congr lean_s9 lean_s139
let lean_s141 := by timed congr lean_s8 lean_s140
let lean_s142 := by timed congr lean_s7 lean_s141
let lean_s143 := by timed congr lean_s6 lean_s142
let lean_s144 := by timed congr lean_s5 lean_s143
let lean_s145 := by timed congr lean_s4 lean_s144
let lean_s146 := by timed congr lean_s3 lean_s145
let lean_s147 := by timed congr lean_s2 lean_s146
have lean_s148 : (Eq let90 let174) := by timed congr lean_s1 lean_s147
have lean_s149 : (Eq let90 False) := by timed Eq.trans lean_s148 lean_r48
have lean_s150 : (Eq let91 False) := by timed Eq.trans lean_r0 lean_s149
exact (show False from by timed eqResolve lean_a75 lean_s150)


