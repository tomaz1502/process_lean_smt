open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {xx5f0 : Int}
variable {xx5f1 : Int}
variable {xx5f2 : Int}
variable {xx5f0 : Int}
variable {xx5f1 : Int}
variable {xx5f2 : Int}

theorem th0 :
  let let1 := (Int.ofNat 10)
  let let2 := (binrel% HAdd.hAdd xx5f0 (binrel% HAdd.hAdd xx5f1 xx5f2))
  let let3 := (binrel% GE.ge let2 let1)
  let let4 := (Not let3)
  let let5 := (binrel% LT.lt let2 let1)
  let let6 := (Int.ofNat 0)
  let let7 := (Int.ofNat 6)
  let let8 := (Int.ofNat 11)
  let let9 := (Neg.neg (binrel% HDiv.hDiv let8 let7))
  let let10 := (binrel% LT.lt let9 let6)
  let let11 := (Int.ofNat 2)
  let let12 := (binrel% HMul.hMul let9 let11)
  let let13 := (Int.ofNat 3)
  let let14 := (binrel% HMul.hMul let9 let13)
  let let15 := (Int.ofNat 1)
  let let16 := (binrel% HDiv.hDiv let15 let7)
  let let17 := (binrel% HMul.hMul let16 let15)
  let let18 := (Int.ofNat 9)
  let let19 := (Rat.ofInt 1)
  let let20 := (binrel% HMul.hMul let19 let18)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let14 let12)))
  let let22 := (binrel% HMul.hMul let9 xx5f0)
  let let23 := (binrel% HMul.hMul let9 xx5f1)
  let let24 := (binrel% HAdd.hAdd let23 let22)
  let let25 := (Int.ofNat 5)
  let let26 := (binrel% HAdd.hAdd (binrel% HMul.hMul let25 xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul let25 xx5f1) (binrel% HMul.hMul (Neg.neg let7) xx5f2)))
  let let27 := (binrel% HMul.hMul let16 let26)
  let let28 := (binrel% HMul.hMul let19 let2)
  let let29 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 let24))
  let let30 := (binrel% GE.ge let29 let21)
  let let31 := (Not let30)
  let let32 := (binrel% LT.lt let29 let21)
  let let33 := (Rat.ofInt 9)
  let let34 := (Neg.neg (binrel% HDiv.hDiv let8 let11))
  let let35 := (Neg.neg (binrel% HDiv.hDiv let8 let13))
  let let36 := (Rat.ofInt 0)
  let let37 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let34 let35)))
  let let38 := (Not let4)
  let let39 := (Eq let3 let38)
  let let40 := (Eq let38 let3)
  let let41 := (binrel% GE.ge xx5f1 let13)
  let let42 := (Not let41)
  let let43 := (binrel% LT.lt xx5f1 let13)
  let let44 := (Int.ofNat 8)
  let let45 := (binrel% HDiv.hDiv let15 let44)
  let let46 := (binrel% GT.gt let45 let6)
  let let47 := (binrel% HDiv.hDiv let13 let44)
  let let48 := (Neg.neg let47)
  let let49 := (binrel% HMul.hMul let48 let7)
  let let50 := (binrel% HMul.hMul let45 let15)
  let let51 := (binrel% HMul.hMul let19 let11)
  let let52 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 let49))
  let let53 := (binrel% HAdd.hAdd xx5f0 xx5f2)
  let let54 := (binrel% HMul.hMul let48 let53)
  let let55 := (binrel% HAdd.hAdd (binrel% HMul.hMul let13 xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let44) xx5f1) (binrel% HMul.hMul let13 xx5f2)))
  let let56 := (binrel% HMul.hMul let45 let55)
  let let57 := (binrel% HMul.hMul let19 xx5f1)
  let let58 := (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let56 let54))
  let let59 := (binrel% GE.ge let58 let52)
  let let60 := (Not let59)
  let let61 := (binrel% LT.lt let58 let52)
  let let62 := (Neg.neg let45)
  let let63 := (binrel% GE.ge let36 let62)
  let let64 := (binrel% LE.le xx5f1 let11)
  let let65 := (Not let64)
  let let66 := (binrel% GT.gt xx5f1 let11)
  let let67 := (Eq let66 let65)
  let let68 := (Rat.ofInt let2)
  let let69 := (Not let42)
  let let70 := (Eq let41 let69)
  let let71 := (Eq let69 let41)
  let let72 := (Eq let41 let41)
  let let73 := (binrel% HDiv.hDiv let7 let8)
  let let74 := (binrel% GT.gt let73 let6)
  let let75 := (binrel% HDiv.hDiv let15 let8)
  let let76 := (binrel% HMul.hMul let75 let15)
  let let77 := (Neg.neg (binrel% HDiv.hDiv let11 let13))
  let let78 := (binrel% HDiv.hDiv let11 let18)
  let let79 := (Neg.neg let78)
  let let80 := (binrel% HMul.hMul let79 let13)
  let let81 := (Neg.neg let73)
  let let82 := (binrel% HDiv.hDiv let13 let8)
  let let83 := (Neg.neg let82)
  let let84 := (binrel% HMul.hMul let83 let11)
  let let85 := (Neg.neg (binrel% HDiv.hDiv let15 let18))
  let let86 := (binrel% HMul.hMul let85 let6)
  let let87 := (binrel% GE.ge let36 let36)
  let let88 := (binrel% GE.ge let55 let15)
  let let89 := (Eq let88 let88)
  let let90 := (binrel% HAdd.hAdd xx5f0 xx5f1)
  let let91 := (binrel% GE.ge let90 let13)
  let let92 := (Not let91)
  let let93 := (Not let92)
  let let94 := (Eq let93 let91)
  let let95 := (binrel% HDiv.hDiv (Int.ofNat 16) let8)
  let let96 := (Neg.neg let19)
  let let97 := (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let95 let81)))
  let let98 := (binrel% GT.gt let19 let6)
  let let99 := (binrel% GE.ge let36 let83)
  let let100 := (binrel% GE.ge let26 let15)
  let let101 := (Not let100)
  let let102 := (binrel% LT.lt let26 let15)
  let let103 := (binrel% HAdd.hAdd (binrel% HMul.hMul let48 xx5f0) (binrel% HMul.hMul let48 xx5f2))
  let let104 := (Neg.neg let15)
  let let105 := (binrel% HAdd.hAdd (binrel% HMul.hMul let47 xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul let104 xx5f1) (binrel% HMul.hMul let47 xx5f2)))
  let let106 := (Rat.ofInt xx5f1)
  let let107 := (binrel% HAdd.hAdd let106 (binrel% HAdd.hAdd let105 let103))
  let let108 := (binrel% HDiv.hDiv let25 let8)
  let let109 := (Int.ofNat 33)
  let let110 := (binrel% HDiv.hDiv (Int.ofNat 40) let109)
  let let111 := (binrel% HMul.hMul let108 xx5f0)
  let let112 := (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let110) xx5f1) (binrel% HMul.hMul let108 xx5f2)))
  let let113 := (binrel% HDiv.hDiv let25 let109)
  let let114 := (binrel% HMul.hMul let113 let55)
  let let115 := (binrel% HDiv.hDiv let44 let8)
  let let116 := (binrel% HMul.hMul let115 let11)
  let let117 := (Int.ofNat 4)
  let let118 := (Neg.neg (binrel% HDiv.hDiv let117 let18))
  let let119 := (binrel% HMul.hMul let79 let11)
  let let120 := (binrel% HAdd.hAdd (binrel% HMul.hMul let110 xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul let110 xx5f1) (binrel% HMul.hMul (Neg.neg let95) xx5f2)))
  let let121 := (Neg.neg (binrel% HDiv.hDiv let25 let13))
  let let122 := (binrel% HMul.hMul let121 xx5f0)
  let let123 := (Rat.ofInt xx5f2)
  let let124 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let122 (binrel% HAdd.hAdd let120 let112)))
  let let125 := (binrel% HMul.hMul let73 let25)
  let let126 := (Neg.neg let108)
  let let127 := (binrel% HMul.hMul let126 let11)
  let let128 := (binrel% HMul.hMul let96 let11)
  let let129 := (binrel% HAdd.hAdd let128 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let127 let125)))
  let let130 := (binrel% HMul.hMul let73 let53)
  let let131 := (binrel% HMul.hMul let126 xx5f1)
  let let132 := (binrel% HMul.hMul let75 let26)
  let let133 := (binrel% HMul.hMul let96 xx5f0)
  let let134 := (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let132 (binrel% HAdd.hAdd let131 let130)))
  let let135 := (binrel% GE.ge let134 let129)
  let let136 := (Not let135)
  let let137 := (binrel% LT.lt let134 let129)
  let let138 := (binrel% HMul.hMul let19 let15)
  let let139 := (binrel% HMul.hMul let121 let15)
  let let140 := (Rat.ofInt 2)
  let let141 := (Neg.neg let140)
  let let142 := (binrel% GE.ge xx5f0 let11)
  let let143 := (Not let142)
  let let144 := (Not let143)
  let let145 := (Eq let142 let144)
  let let146 := (Eq let144 let142)
  let let147 := (binrel% HMul.hMul let113 let15)
  let let148 := (Not True)
  let let149 := (Not let88)
  let let150 := (Not let149)
  let let151 := (Eq let88 let150)
  let let152 := (Eq let150 let88)
  let let153 := (Rat.ofInt 11)
  let let154 := (binrel% HMul.hMul let153 let6)
  let let155 := (Rat.ofInt (binrel% HMul.hMul let8 xx5f0))
  let let156 := (binrel% HMul.hMul let153 xx5f0)
  let let157 := (binrel% LT.lt let83 let6)
  let let158 := (binrel% LE.le let36 let141)
  let let159 := (binrel% HMul.hMul let96 let6)
  let let160 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let18) xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 xx5f1) (binrel% HMul.hMul let11 xx5f2)))
  let let161 := (Rat.ofInt let160)
  let let162 := (Neg.neg let11)
  let let163 := (binrel% HAdd.hAdd (binrel% HMul.hMul let162 xx5f1) (binrel% HMul.hMul let162 xx5f2))
  let let164 := (binrel% HAdd.hAdd (binrel% HMul.hMul let18 xx5f0) let163)
  let let165 := (binrel% HMul.hMul let96 let164)
  let let166 := (binrel% GE.ge xx5f2 let11)
  let let167 := (Not let166)
  let let168 := (binrel% LE.le xx5f2 let15)
  let let169 := (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let141 let36))
  let let170 := (binrel% HMul.hMul let104 xx5f0)
  let let171 := (Rat.ofInt let170)
  let let172 := (Eq let3 let3)
  let let173 := (binrel% LE.le let26 let6)
  let let174 := (binrel% HDiv.hDiv let25 let7)
  let let175 := (Neg.neg let174)
  let let176 := (binrel% HAdd.hAdd (binrel% HMul.hMul let175 xx5f0) (binrel% HMul.hMul let175 xx5f1))
  let let177 := (binrel% HAdd.hAdd (binrel% HMul.hMul let174 xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul let174 xx5f1) (binrel% HMul.hMul let104 xx5f2)))
  let let178 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let177 let176))
  let let179 := (binrel% LT.lt let141 let6)
  let let180 := (binrel% GE.ge xx5f0 let15)
  let let181 := (Not let180)
  let let182 := (Not let181)
  let let183 := (Eq let182 let180)
  let let184 := (binrel% HDiv.hDiv let44 let109)
  let let185 := (binrel% HMul.hMul let184 let26)
  let let186 := (binrel% GE.ge let53 let7)
  let let187 := (Eq let186 let186)
  let let188 := (binrel% HMul.hMul let184 let15)
  let let189 := (Neg.neg (binrel% HDiv.hDiv let1 let8))
  let let190 := (binrel% LE.le let2 let18)
  let let191 := (Eq let142 let142)
  let let192 := (binrel% HDiv.hDiv (Int.ofNat 30) let8)
  let let193 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let162 xx5f0) let163))
  let let194 := (binrel% HMul.hMul let141 let2)
  let let195 := (Eq let91 let91)
  let let196 := (binrel% LE.le let55 let6)
  let let197 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let121 (binrel% HAdd.hAdd let184 let113)))
  let let198 := (binrel% HAdd.hAdd let170 (binrel% HAdd.hAdd (binrel% HMul.hMul let78 xx5f1) (binrel% HMul.hMul let78 xx5f2)))
  let let199 := (binrel% HMul.hMul let85 let164)
  let let200 := (Eq let180 let180)
  let let201 := (Not let168)
  let let202 := (binrel% GT.gt xx5f2 let15)
  let let203 := (Eq let202 let201)
  let let204 := (binrel% LT.lt xx5f0 let15)
  let let205 := (Not let167)
  let let206 := (Eq let205 let166)
  let let207 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let118 let36)))
  let let208 := (Eq let180 let182)
  let let209 := (Not let186)
  let let210 := (Not let209)
  let let211 := (Eq let210 let186)
  let let212 := (binrel% HAdd.hAdd let161 (binrel% HAdd.hAdd let193 let155))
  let let213 := (binrel% LT.lt xx5f2 let11)
  let let214 := (binrel% LE.le xx5f2 let11)
  let let215 := (Not let214)
  let let216 := (binrel% GT.gt xx5f2 let11)
  let let217 := (Eq let216 let215)
  let let218 := (binrel% GT.gt let153 let6)
  let let219 := (binrel% LT.lt let55 let15)
  let let220 := (binrel% LT.lt let96 let6)
  let let221 := (binrel% GE.ge let164 let6)
  let let222 := (Not let221)
  let let223 := (binrel% LT.lt let164 let6)
  let let224 := (binrel% GE.ge xx5f2 let13)
  let let225 := (Not let224)
  let let226 := (Not let225)
  let let227 := (Eq let224 let226)
  let let228 := (Eq let226 let224)
  let let229 := (Eq let166 let166)
  let let230 := (Rat.ofInt xx5f0)
  let let231 := (binrel% HMul.hMul let19 xx5f0)
  let let232 := (binrel% GT.gt let113 let6)
  let let233 := (binrel% HMul.hMul let175 let13)
  let let234 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let17 let233))
  let let235 := (binrel% HMul.hMul let175 let90)
  let let236 := (binrel% HMul.hMul let19 xx5f2)
  let let237 := (binrel% HAdd.hAdd let236 (binrel% HAdd.hAdd let27 let235))
  let let238 := (binrel% GE.ge let237 let234)
  let let239 := (Not let238)
  let let240 := (binrel% LT.lt let237 let234)
  let let241 := (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let188 let147)))
  let let242 := (binrel% HAdd.hAdd let236 (binrel% HAdd.hAdd let122 (binrel% HAdd.hAdd let185 let114)))
  let let243 := (binrel% GE.ge let242 let241)
  let let244 := (Not let243)
  let let245 := (binrel% LT.lt let242 let241)
  let let246 := (Eq let100 let100)
  let let247 := (Not let101)
  let let248 := (Eq let247 let100)
  let let249 := (binrel% LT.lt let79 let6)
  let let250 := (Not let190)
  let let251 := (binrel% GT.gt let2 let18)
  let let252 := (Eq let251 let250)
  let let253 := (Eq let100 let247)
  let let254 := (Neg.neg (binrel% HDiv.hDiv let15 let13))
  let let255 := (binrel% GE.ge let36 let254)
  let let256 := (binrel% HMul.hMul let96 let15)
  let let257 := (binrel% HMul.hMul let83 xx5f2)
  let let258 := (binrel% HAdd.hAdd (binrel% HMul.hMul let115 xx5f0) (binrel% HMul.hMul let115 xx5f1))
  let let259 := (binrel% HAdd.hAdd (binrel% HMul.hMul let82 xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let115) xx5f1) (binrel% HMul.hMul let82 xx5f2)))
  let let260 := (binrel% HAdd.hAdd let171 (binrel% HAdd.hAdd let259 (binrel% HAdd.hAdd let258 let257)))
  let let261 := (binrel% HMul.hMul let115 let90)
  let let262 := (binrel% HMul.hMul let75 let55)
  let let263 := (binrel% HAdd.hAdd let256 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let116 let84)))
  let let264 := (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let262 (binrel% HAdd.hAdd let261 let257)))
  let let265 := (binrel% GE.ge let264 let263)
  let let266 := (Not let265)
  let let267 := (binrel% LT.lt let264 let263)
  let let268 := (Neg.neg (binrel% HDiv.hDiv let18 let117))
  let let269 := (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let45 let268))
  let let270 := (binrel% LT.lt let90 let13)
  let let271 := (binrel% LE.le xx5f0 let15)
  let let272 := (binrel% GT.gt let115 let6)
  let let273 := (Not let271)
  let let274 := (binrel% GT.gt xx5f0 let15)
  let let275 := (Eq let274 let273)
  let let276 := (binrel% GT.gt let75 let6)
  let let277 := (binrel% LT.lt let48 let6)
  let let278 := (binrel% GE.ge xx5f1 let11)
  let let279 := (Not let278)
  let let280 := (Not let279)
  let let281 := (Eq let280 let278)
  let let282 := (Eq let278 let278)
  let let283 := (binrel% LT.lt let175 let6)
  let let284 := (Eq let278 let280)
  let let285 := (binrel% LT.lt let121 let6)
  let let286 := (binrel% LE.le xx5f1 let15)
  let let287 := (Not let286)
  let let288 := (binrel% GT.gt xx5f1 let15)
  let let289 := (Eq let288 let287)
  let let290 := (Eq let166 let205)
  let let291 := (Neg.neg (binrel% HDiv.hDiv let18 let8))
  let let292 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let291 (binrel% HAdd.hAdd let81 let75)))
  let let293 := (binrel% LE.le let160 let6)
  let let294 := (binrel% HAdd.hAdd (binrel% HMul.hMul let83 xx5f0) (binrel% HMul.hMul let83 xx5f1))
  let let295 := (binrel% HAdd.hAdd let106 (binrel% HAdd.hAdd let294 (binrel% HAdd.hAdd let257 let259)))
  let let296 := (binrel% LT.lt xx5f0 let11)
  let let297 := (binrel% HMul.hMul let83 let90)
  let let298 := (binrel% HMul.hMul let83 let13)
  let let299 := (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let298 (binrel% HAdd.hAdd let84 let76)))
  let let300 := (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let297 (binrel% HAdd.hAdd let257 let262)))
  let let301 := (binrel% GE.ge let300 let299)
  let let302 := (Not let301)
  let let303 := (binrel% LT.lt let300 let299)
  let let304 := (binrel% LT.lt xx5f1 let11)
  let let305 := (Eq let224 let224)
  let let306 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let177 let24))
  let let307 := (binrel% HMul.hMul let141 let15)
  let let308 := (Neg.neg (binrel% HDiv.hDiv let25 let11))
  let let309 := (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let16 let308))
  let let310 := (Eq let91 let93)
  let let311 := (binrel% HAdd.hAdd (binrel% HMul.hMul let73 xx5f0) (binrel% HMul.hMul let73 xx5f2))
  let let312 := (binrel% GT.gt let16 let6)
  let let313 := (binrel% GT.gt let184 let6)
  let let314 := (binrel% LT.lt xx5f2 let13)
  let let315 := (binrel% LT.lt let126 let6)
  let let316 := (binrel% LE.le let36 let85)
  let let317 := (binrel% HMul.hMul let79 xx5f1)
  let let318 := (binrel% HMul.hMul let79 xx5f2)
  let let319 := (binrel% HAdd.hAdd let230 (binrel% HAdd.hAdd let318 (binrel% HAdd.hAdd let317 let198)))
  let let320 := (binrel% LT.lt let85 let6)
  let let321 := (Eq let186 let210)
  let let322 := (Neg.neg let75)
  let let323 := (binrel% GE.ge let36 let322)
  let let324 := (binrel% HAdd.hAdd let141 (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let189 let192)))
  let let325 := (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd (binrel% HMul.hMul let108 xx5f1) (binrel% HMul.hMul let81 xx5f2)))
  let let326 := (binrel% HAdd.hAdd let171 (binrel% HAdd.hAdd let325 (binrel% HAdd.hAdd let131 let311)))
  let let327 := (binrel% LT.lt let53 let7)
  let let328 := (binrel% GE.ge let2 let15)
  let let329 := (Not let328)
  let let330 := (Or let329 let222)
  let let331 := (Or let180 let330)
  let let332 := (Or let182 let330)
  let let333 := (Eq Or Or)
  let let334 := (Or let222 False)
  let let335 := (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd let307 let154))
  let let336 := (binrel% HAdd.hAdd let165 (binrel% HAdd.hAdd let194 let156))
  let let337 := (binrel% LE.le let336 let335)
  let let338 := (binrel% LE.le let156 let154)
  let let339 := (binrel% LE.le xx5f0 let6)
  let let340 := (And let218 let339)
  let let341 := (Eq let181 let204)
  let let342 := (binrel% LE.le let194 let307)
  let let343 := (And let179 let328)
  let let344 := (binrel% LE.le let165 let159)
  let let345 := (And let220 let221)
  let let346 := (Or let88 (Or let100 (Or let181 let166)))
  let let347 := (Or let150 (Or let247 (Or let181 let205)))
  let let348 := (binrel% LT.lt let114 let147)
  let let349 := (And let232 let219)
  let let350 := (Eq let149 let219)
  let let351 := (binrel% LT.lt let185 let188)
  let let352 := (And let313 let102)
  let let353 := (Eq let101 let102)
  let let354 := (binrel% LE.le let122 let139)
  let let355 := (And let285 let180)
  let let356 := (binrel% LE.le let236 let138)
  let let357 := (And let98 let168)
  let let358 := (Or let167 (Or let91 (Or let88 let181)))
  let let359 := (Or let167 (Or let93 (Or let150 let181)))
  let let360 := (Or let181 False)
  let let361 := (binrel% LE.le let257 let84)
  let let362 := (And let157 let166)
  let let363 := (Implies let362 let361)
  let let364 := (binrel% LE.le let261 let116)
  let let365 := (binrel% LE.le let90 let11)
  let let366 := (And let272 let365)
  let let367 := (binrel% LT.lt let262 let76)
  let let368 := (And let276 let219)
  let let369 := (Implies let368 let367)
  let let370 := (binrel% LE.le let133 let256)
  let let371 := (And let220 let180)
  let let372 := (Or let88 (Or let167 (Or let92 let278)))
  let let373 := (Or let150 (Or let167 (Or let92 let280)))
  let let374 := (binrel% LE.le let297 let298)
  let let375 := (And let157 let91)
  let let376 := (binrel% LE.le let57 let138)
  let let377 := (And let98 let286)
  let let378 := (Or let92 (Or let100 let224))
  let let379 := (Or let92 (Or let247 let226))
  let let380 := (binrel% LE.le let235 let233)
  let let381 := (And let283 let91)
  let let382 := (binrel% LT.lt let27 let17)
  let let383 := (And let312 let102)
  let let384 := (Implies let383 let382)
  let let385 := (binrel% LE.le let236 let51)
  let let386 := (And let98 let214)
  let let387 := (Or let222 (Or let279 (Or let225 let142)))
  let let388 := (Or let222 (Or let279 (Or let225 let144)))
  let let389 := (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let119 let86)))
  let let390 := (binrel% HAdd.hAdd let231 (binrel% HAdd.hAdd let318 (binrel% HAdd.hAdd let317 let199)))
  let let391 := (binrel% LE.le let390 let389)
  let let392 := (binrel% LE.le let199 let86)
  let let393 := (And let320 let221)
  let let394 := (binrel% LE.le let317 let119)
  let let395 := (And let249 let278)
  let let396 := (binrel% LE.le let318 let80)
  let let397 := (And let249 let224)
  let let398 := (binrel% LE.le let231 let138)
  let let399 := (And let98 let271)
  let let400 := (Eq let143 let296)
  let let401 := (Or let186 (Or let279 (Or let100 let143)))
  let let402 := (Or let210 (Or let279 (Or let247 let143)))
  let let403 := (Or let143 False)
  let let404 := (binrel% LE.le let130 let125)
  let let405 := (binrel% LE.le let53 let25)
  let let406 := (And let74 let405)
  let let407 := (binrel% LE.le let131 let127)
  let let408 := (And let315 let278)
  let let409 := (binrel% LT.lt let132 let76)
  let let410 := (And let276 let102)
  let let411 := (binrel% LE.le let133 let128)
  let let412 := (And let220 let142)
  let let413 := (Or let209 (Or let88 let41))
  let let414 := (Or let209 (Or let150 let69))
  let let415 := (binrel% LE.le let54 let49)
  let let416 := (And let277 let186)
  let let417 := (binrel% LT.lt let56 let50)
  let let418 := (And let46 let219)
  let let419 := (binrel% LE.le let57 let51)
  let let420 := (And let98 let64)
  let let421 := (Or let143 (Or let42 (Or let100 let3)))
  let let422 := (Or let143 (Or let42 (Or let247 let38)))
  let let423 := (binrel% LE.le let22 let12)
  let let424 := (And let10 let142)
  let let425 := (binrel% LE.le let23 let14)
  let let426 := (And let10 let41)
  let let427 := (binrel% LE.le let28 let20)
  let let428 := (And let98 let190)
(Eq let5 let4) → (Eq let10 True) → (Eq let32 let31) → (Eq let20 let33) → (Eq let14 let34) → (Eq let12 let35) → (Eq let37 let36) → (Eq let40 let39) → let40 → (Eq let43 let42) → (Eq let46 True) → (Eq let61 let60) → (Eq let50 let45) → (Eq let63 True) → let67 → (Eq let64 let42) → (Eq let28 let68) → (Eq let71 let70) → let71 → (Eq let72 True) → (Eq let74 True) → (Eq let76 let75) → (Eq let80 let77) → (Eq let84 let81) → (Eq let86 let36) → (Eq let87 True) → (Eq let89 True) → let94 → (Eq let97 let36) → (Eq let98 True) → (Eq let99 True) → (Eq let102 let101) → (Eq let107 let36) → (Eq let114 let112) → (Eq let116 let95) → (Eq let119 let118) → (Eq let124 let36) → (Eq let137 let136) → (Eq let138 let19) → (Eq let139 let121) → (Eq let128 let141) → (Eq let146 let145) → (Eq let147 let113) → (Eq let148 False) → (Eq let152 let151) → (Eq let154 let36) → (Eq let156 let155) → (Eq let157 True) → (Eq let158 False) → (Eq let159 let36) → (Eq let165 let161) → (Eq let168 let167) → (Eq let169 let141) → (Eq let133 let171) → (Eq let172 True) → (Eq let173 let101) → (Eq let178 let36) → (Eq let179 True) → let183 → (Eq let185 let120) → (Eq let187 True) → (Eq let188 let184) → (Eq let127 let189) → (Eq let190 let4) → let146 → (Eq let191 True) → (Eq let125 let192) → (Eq let194 let193) → (Eq let195 True) → (Eq let196 let149) → (Eq let197 let83) → (Eq let199 let198) → (Eq let200 True) → let203 → (Eq let204 let181) → let206 → (Eq let207 let85) → (Eq let183 let208) → let211 → let152 → (Eq let212 let36) → (Eq let17 let16) → (Eq let213 let167) → let217 → (Eq let218 True) → (Eq let219 let149) → (Eq let220 True) → (Eq let223 let222) → (Eq let228 let227) → (Eq let229 True) → (Eq let231 let230) → (Eq let232 True) → (Eq let56 let105) → (Eq let240 let239) → (Eq let245 let244) → (Eq let235 let176) → (Eq let246 True) → let248 → (Eq let249 True) → let252 → (Eq let248 let253) → (Eq let255 True) → (Eq let256 let96) → (Eq let260 let36) → (Eq let261 let258) → (Eq let262 let259) → (Eq let267 let266) → (Eq let269 let62) → (Eq let270 let92) → (Eq let271 let143) → (Eq let272 True) → let275 → (Eq let276 True) → (Eq let57 let106) → (Eq let277 True) → let281 → (Eq let282 True) → (Eq let283 True) → (Eq let281 let284) → (Eq let285 True) → (Eq let286 let279) → let289 → (Eq let206 let290) → (Eq let292 let83) → (Eq let293 let221) → (Eq let295 let36) → (Eq let296 let143) → (Eq let297 let294) → (Eq let303 let302) → (Eq let304 let279) → (Eq let305 True) → (Eq let306 let36) → let228 → (Eq let214 let225) → (Eq let307 let141) → (Eq let309 let254) → (Eq let233 let308) → (Eq let94 let310) → (Eq let130 let311) → (Eq let49 let268) → (Eq let51 let140) → (Eq let54 let103) → (Eq let236 let123) → (Eq let27 let177) → (Eq let312 True) → (Eq let313 True) → (Eq let314 let225) → (Eq let315 True) → (Eq let316 False) → (Eq let319 let36) → (Eq let320 True) → (Eq let211 let321) → (Eq let323 True) → (Eq let324 let322) → (Eq let298 let291) → (Eq let326 let36) → (Eq let132 let325) → (Eq let327 let209) → (binrel% GE.ge xx5f0 let6) → (binrel% GE.ge xx5f1 let6) → (binrel% GE.ge xx5f2 let6) → let293 → let196 → let173 → let328 → let190 → False :=
  let let1 := (Int.ofNat 10)
  let let2 := (binrel% HAdd.hAdd xx5f0 (binrel% HAdd.hAdd xx5f1 xx5f2))
  let let3 := (binrel% GE.ge let2 let1)
  let let4 := (Not let3)
  let let5 := (binrel% LT.lt let2 let1)
  let let6 := (Int.ofNat 0)
  let let7 := (Int.ofNat 6)
  let let8 := (Int.ofNat 11)
  let let9 := (Neg.neg (binrel% HDiv.hDiv let8 let7))
  let let10 := (binrel% LT.lt let9 let6)
  let let11 := (Int.ofNat 2)
  let let12 := (binrel% HMul.hMul let9 let11)
  let let13 := (Int.ofNat 3)
  let let14 := (binrel% HMul.hMul let9 let13)
  let let15 := (Int.ofNat 1)
  let let16 := (binrel% HDiv.hDiv let15 let7)
  let let17 := (binrel% HMul.hMul let16 let15)
  let let18 := (Int.ofNat 9)
  let let19 := (Rat.ofInt 1)
  let let20 := (binrel% HMul.hMul let19 let18)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let14 let12)))
  let let22 := (binrel% HMul.hMul let9 xx5f0)
  let let23 := (binrel% HMul.hMul let9 xx5f1)
  let let24 := (binrel% HAdd.hAdd let23 let22)
  let let25 := (Int.ofNat 5)
  let let26 := (binrel% HAdd.hAdd (binrel% HMul.hMul let25 xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul let25 xx5f1) (binrel% HMul.hMul (Neg.neg let7) xx5f2)))
  let let27 := (binrel% HMul.hMul let16 let26)
  let let28 := (binrel% HMul.hMul let19 let2)
  let let29 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 let24))
  let let30 := (binrel% GE.ge let29 let21)
  let let31 := (Not let30)
  let let32 := (binrel% LT.lt let29 let21)
  let let33 := (Rat.ofInt 9)
  let let34 := (Neg.neg (binrel% HDiv.hDiv let8 let11))
  let let35 := (Neg.neg (binrel% HDiv.hDiv let8 let13))
  let let36 := (Rat.ofInt 0)
  let let37 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let34 let35)))
  let let38 := (Not let4)
  let let39 := (Eq let3 let38)
  let let40 := (Eq let38 let3)
  let let41 := (binrel% GE.ge xx5f1 let13)
  let let42 := (Not let41)
  let let43 := (binrel% LT.lt xx5f1 let13)
  let let44 := (Int.ofNat 8)
  let let45 := (binrel% HDiv.hDiv let15 let44)
  let let46 := (binrel% GT.gt let45 let6)
  let let47 := (binrel% HDiv.hDiv let13 let44)
  let let48 := (Neg.neg let47)
  let let49 := (binrel% HMul.hMul let48 let7)
  let let50 := (binrel% HMul.hMul let45 let15)
  let let51 := (binrel% HMul.hMul let19 let11)
  let let52 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 let49))
  let let53 := (binrel% HAdd.hAdd xx5f0 xx5f2)
  let let54 := (binrel% HMul.hMul let48 let53)
  let let55 := (binrel% HAdd.hAdd (binrel% HMul.hMul let13 xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let44) xx5f1) (binrel% HMul.hMul let13 xx5f2)))
  let let56 := (binrel% HMul.hMul let45 let55)
  let let57 := (binrel% HMul.hMul let19 xx5f1)
  let let58 := (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let56 let54))
  let let59 := (binrel% GE.ge let58 let52)
  let let60 := (Not let59)
  let let61 := (binrel% LT.lt let58 let52)
  let let62 := (Neg.neg let45)
  let let63 := (binrel% GE.ge let36 let62)
  let let64 := (binrel% LE.le xx5f1 let11)
  let let65 := (Not let64)
  let let66 := (binrel% GT.gt xx5f1 let11)
  let let67 := (Eq let66 let65)
  let let68 := (Rat.ofInt let2)
  let let69 := (Not let42)
  let let70 := (Eq let41 let69)
  let let71 := (Eq let69 let41)
  let let72 := (Eq let41 let41)
  let let73 := (binrel% HDiv.hDiv let7 let8)
  let let74 := (binrel% GT.gt let73 let6)
  let let75 := (binrel% HDiv.hDiv let15 let8)
  let let76 := (binrel% HMul.hMul let75 let15)
  let let77 := (Neg.neg (binrel% HDiv.hDiv let11 let13))
  let let78 := (binrel% HDiv.hDiv let11 let18)
  let let79 := (Neg.neg let78)
  let let80 := (binrel% HMul.hMul let79 let13)
  let let81 := (Neg.neg let73)
  let let82 := (binrel% HDiv.hDiv let13 let8)
  let let83 := (Neg.neg let82)
  let let84 := (binrel% HMul.hMul let83 let11)
  let let85 := (Neg.neg (binrel% HDiv.hDiv let15 let18))
  let let86 := (binrel% HMul.hMul let85 let6)
  let let87 := (binrel% GE.ge let36 let36)
  let let88 := (binrel% GE.ge let55 let15)
  let let89 := (Eq let88 let88)
  let let90 := (binrel% HAdd.hAdd xx5f0 xx5f1)
  let let91 := (binrel% GE.ge let90 let13)
  let let92 := (Not let91)
  let let93 := (Not let92)
  let let94 := (Eq let93 let91)
  let let95 := (binrel% HDiv.hDiv (Int.ofNat 16) let8)
  let let96 := (Neg.neg let19)
  let let97 := (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let95 let81)))
  let let98 := (binrel% GT.gt let19 let6)
  let let99 := (binrel% GE.ge let36 let83)
  let let100 := (binrel% GE.ge let26 let15)
  let let101 := (Not let100)
  let let102 := (binrel% LT.lt let26 let15)
  let let103 := (binrel% HAdd.hAdd (binrel% HMul.hMul let48 xx5f0) (binrel% HMul.hMul let48 xx5f2))
  let let104 := (Neg.neg let15)
  let let105 := (binrel% HAdd.hAdd (binrel% HMul.hMul let47 xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul let104 xx5f1) (binrel% HMul.hMul let47 xx5f2)))
  let let106 := (Rat.ofInt xx5f1)
  let let107 := (binrel% HAdd.hAdd let106 (binrel% HAdd.hAdd let105 let103))
  let let108 := (binrel% HDiv.hDiv let25 let8)
  let let109 := (Int.ofNat 33)
  let let110 := (binrel% HDiv.hDiv (Int.ofNat 40) let109)
  let let111 := (binrel% HMul.hMul let108 xx5f0)
  let let112 := (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let110) xx5f1) (binrel% HMul.hMul let108 xx5f2)))
  let let113 := (binrel% HDiv.hDiv let25 let109)
  let let114 := (binrel% HMul.hMul let113 let55)
  let let115 := (binrel% HDiv.hDiv let44 let8)
  let let116 := (binrel% HMul.hMul let115 let11)
  let let117 := (Int.ofNat 4)
  let let118 := (Neg.neg (binrel% HDiv.hDiv let117 let18))
  let let119 := (binrel% HMul.hMul let79 let11)
  let let120 := (binrel% HAdd.hAdd (binrel% HMul.hMul let110 xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul let110 xx5f1) (binrel% HMul.hMul (Neg.neg let95) xx5f2)))
  let let121 := (Neg.neg (binrel% HDiv.hDiv let25 let13))
  let let122 := (binrel% HMul.hMul let121 xx5f0)
  let let123 := (Rat.ofInt xx5f2)
  let let124 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let122 (binrel% HAdd.hAdd let120 let112)))
  let let125 := (binrel% HMul.hMul let73 let25)
  let let126 := (Neg.neg let108)
  let let127 := (binrel% HMul.hMul let126 let11)
  let let128 := (binrel% HMul.hMul let96 let11)
  let let129 := (binrel% HAdd.hAdd let128 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let127 let125)))
  let let130 := (binrel% HMul.hMul let73 let53)
  let let131 := (binrel% HMul.hMul let126 xx5f1)
  let let132 := (binrel% HMul.hMul let75 let26)
  let let133 := (binrel% HMul.hMul let96 xx5f0)
  let let134 := (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let132 (binrel% HAdd.hAdd let131 let130)))
  let let135 := (binrel% GE.ge let134 let129)
  let let136 := (Not let135)
  let let137 := (binrel% LT.lt let134 let129)
  let let138 := (binrel% HMul.hMul let19 let15)
  let let139 := (binrel% HMul.hMul let121 let15)
  let let140 := (Rat.ofInt 2)
  let let141 := (Neg.neg let140)
  let let142 := (binrel% GE.ge xx5f0 let11)
  let let143 := (Not let142)
  let let144 := (Not let143)
  let let145 := (Eq let142 let144)
  let let146 := (Eq let144 let142)
  let let147 := (binrel% HMul.hMul let113 let15)
  let let148 := (Not True)
  let let149 := (Not let88)
  let let150 := (Not let149)
  let let151 := (Eq let88 let150)
  let let152 := (Eq let150 let88)
  let let153 := (Rat.ofInt 11)
  let let154 := (binrel% HMul.hMul let153 let6)
  let let155 := (Rat.ofInt (binrel% HMul.hMul let8 xx5f0))
  let let156 := (binrel% HMul.hMul let153 xx5f0)
  let let157 := (binrel% LT.lt let83 let6)
  let let158 := (binrel% LE.le let36 let141)
  let let159 := (binrel% HMul.hMul let96 let6)
  let let160 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let18) xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 xx5f1) (binrel% HMul.hMul let11 xx5f2)))
  let let161 := (Rat.ofInt let160)
  let let162 := (Neg.neg let11)
  let let163 := (binrel% HAdd.hAdd (binrel% HMul.hMul let162 xx5f1) (binrel% HMul.hMul let162 xx5f2))
  let let164 := (binrel% HAdd.hAdd (binrel% HMul.hMul let18 xx5f0) let163)
  let let165 := (binrel% HMul.hMul let96 let164)
  let let166 := (binrel% GE.ge xx5f2 let11)
  let let167 := (Not let166)
  let let168 := (binrel% LE.le xx5f2 let15)
  let let169 := (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let141 let36))
  let let170 := (binrel% HMul.hMul let104 xx5f0)
  let let171 := (Rat.ofInt let170)
  let let172 := (Eq let3 let3)
  let let173 := (binrel% LE.le let26 let6)
  let let174 := (binrel% HDiv.hDiv let25 let7)
  let let175 := (Neg.neg let174)
  let let176 := (binrel% HAdd.hAdd (binrel% HMul.hMul let175 xx5f0) (binrel% HMul.hMul let175 xx5f1))
  let let177 := (binrel% HAdd.hAdd (binrel% HMul.hMul let174 xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul let174 xx5f1) (binrel% HMul.hMul let104 xx5f2)))
  let let178 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let177 let176))
  let let179 := (binrel% LT.lt let141 let6)
  let let180 := (binrel% GE.ge xx5f0 let15)
  let let181 := (Not let180)
  let let182 := (Not let181)
  let let183 := (Eq let182 let180)
  let let184 := (binrel% HDiv.hDiv let44 let109)
  let let185 := (binrel% HMul.hMul let184 let26)
  let let186 := (binrel% GE.ge let53 let7)
  let let187 := (Eq let186 let186)
  let let188 := (binrel% HMul.hMul let184 let15)
  let let189 := (Neg.neg (binrel% HDiv.hDiv let1 let8))
  let let190 := (binrel% LE.le let2 let18)
  let let191 := (Eq let142 let142)
  let let192 := (binrel% HDiv.hDiv (Int.ofNat 30) let8)
  let let193 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let162 xx5f0) let163))
  let let194 := (binrel% HMul.hMul let141 let2)
  let let195 := (Eq let91 let91)
  let let196 := (binrel% LE.le let55 let6)
  let let197 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let121 (binrel% HAdd.hAdd let184 let113)))
  let let198 := (binrel% HAdd.hAdd let170 (binrel% HAdd.hAdd (binrel% HMul.hMul let78 xx5f1) (binrel% HMul.hMul let78 xx5f2)))
  let let199 := (binrel% HMul.hMul let85 let164)
  let let200 := (Eq let180 let180)
  let let201 := (Not let168)
  let let202 := (binrel% GT.gt xx5f2 let15)
  let let203 := (Eq let202 let201)
  let let204 := (binrel% LT.lt xx5f0 let15)
  let let205 := (Not let167)
  let let206 := (Eq let205 let166)
  let let207 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let118 let36)))
  let let208 := (Eq let180 let182)
  let let209 := (Not let186)
  let let210 := (Not let209)
  let let211 := (Eq let210 let186)
  let let212 := (binrel% HAdd.hAdd let161 (binrel% HAdd.hAdd let193 let155))
  let let213 := (binrel% LT.lt xx5f2 let11)
  let let214 := (binrel% LE.le xx5f2 let11)
  let let215 := (Not let214)
  let let216 := (binrel% GT.gt xx5f2 let11)
  let let217 := (Eq let216 let215)
  let let218 := (binrel% GT.gt let153 let6)
  let let219 := (binrel% LT.lt let55 let15)
  let let220 := (binrel% LT.lt let96 let6)
  let let221 := (binrel% GE.ge let164 let6)
  let let222 := (Not let221)
  let let223 := (binrel% LT.lt let164 let6)
  let let224 := (binrel% GE.ge xx5f2 let13)
  let let225 := (Not let224)
  let let226 := (Not let225)
  let let227 := (Eq let224 let226)
  let let228 := (Eq let226 let224)
  let let229 := (Eq let166 let166)
  let let230 := (Rat.ofInt xx5f0)
  let let231 := (binrel% HMul.hMul let19 xx5f0)
  let let232 := (binrel% GT.gt let113 let6)
  let let233 := (binrel% HMul.hMul let175 let13)
  let let234 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let17 let233))
  let let235 := (binrel% HMul.hMul let175 let90)
  let let236 := (binrel% HMul.hMul let19 xx5f2)
  let let237 := (binrel% HAdd.hAdd let236 (binrel% HAdd.hAdd let27 let235))
  let let238 := (binrel% GE.ge let237 let234)
  let let239 := (Not let238)
  let let240 := (binrel% LT.lt let237 let234)
  let let241 := (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let188 let147)))
  let let242 := (binrel% HAdd.hAdd let236 (binrel% HAdd.hAdd let122 (binrel% HAdd.hAdd let185 let114)))
  let let243 := (binrel% GE.ge let242 let241)
  let let244 := (Not let243)
  let let245 := (binrel% LT.lt let242 let241)
  let let246 := (Eq let100 let100)
  let let247 := (Not let101)
  let let248 := (Eq let247 let100)
  let let249 := (binrel% LT.lt let79 let6)
  let let250 := (Not let190)
  let let251 := (binrel% GT.gt let2 let18)
  let let252 := (Eq let251 let250)
  let let253 := (Eq let100 let247)
  let let254 := (Neg.neg (binrel% HDiv.hDiv let15 let13))
  let let255 := (binrel% GE.ge let36 let254)
  let let256 := (binrel% HMul.hMul let96 let15)
  let let257 := (binrel% HMul.hMul let83 xx5f2)
  let let258 := (binrel% HAdd.hAdd (binrel% HMul.hMul let115 xx5f0) (binrel% HMul.hMul let115 xx5f1))
  let let259 := (binrel% HAdd.hAdd (binrel% HMul.hMul let82 xx5f0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let115) xx5f1) (binrel% HMul.hMul let82 xx5f2)))
  let let260 := (binrel% HAdd.hAdd let171 (binrel% HAdd.hAdd let259 (binrel% HAdd.hAdd let258 let257)))
  let let261 := (binrel% HMul.hMul let115 let90)
  let let262 := (binrel% HMul.hMul let75 let55)
  let let263 := (binrel% HAdd.hAdd let256 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let116 let84)))
  let let264 := (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let262 (binrel% HAdd.hAdd let261 let257)))
  let let265 := (binrel% GE.ge let264 let263)
  let let266 := (Not let265)
  let let267 := (binrel% LT.lt let264 let263)
  let let268 := (Neg.neg (binrel% HDiv.hDiv let18 let117))
  let let269 := (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let45 let268))
  let let270 := (binrel% LT.lt let90 let13)
  let let271 := (binrel% LE.le xx5f0 let15)
  let let272 := (binrel% GT.gt let115 let6)
  let let273 := (Not let271)
  let let274 := (binrel% GT.gt xx5f0 let15)
  let let275 := (Eq let274 let273)
  let let276 := (binrel% GT.gt let75 let6)
  let let277 := (binrel% LT.lt let48 let6)
  let let278 := (binrel% GE.ge xx5f1 let11)
  let let279 := (Not let278)
  let let280 := (Not let279)
  let let281 := (Eq let280 let278)
  let let282 := (Eq let278 let278)
  let let283 := (binrel% LT.lt let175 let6)
  let let284 := (Eq let278 let280)
  let let285 := (binrel% LT.lt let121 let6)
  let let286 := (binrel% LE.le xx5f1 let15)
  let let287 := (Not let286)
  let let288 := (binrel% GT.gt xx5f1 let15)
  let let289 := (Eq let288 let287)
  let let290 := (Eq let166 let205)
  let let291 := (Neg.neg (binrel% HDiv.hDiv let18 let8))
  let let292 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let291 (binrel% HAdd.hAdd let81 let75)))
  let let293 := (binrel% LE.le let160 let6)
  let let294 := (binrel% HAdd.hAdd (binrel% HMul.hMul let83 xx5f0) (binrel% HMul.hMul let83 xx5f1))
  let let295 := (binrel% HAdd.hAdd let106 (binrel% HAdd.hAdd let294 (binrel% HAdd.hAdd let257 let259)))
  let let296 := (binrel% LT.lt xx5f0 let11)
  let let297 := (binrel% HMul.hMul let83 let90)
  let let298 := (binrel% HMul.hMul let83 let13)
  let let299 := (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let298 (binrel% HAdd.hAdd let84 let76)))
  let let300 := (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let297 (binrel% HAdd.hAdd let257 let262)))
  let let301 := (binrel% GE.ge let300 let299)
  let let302 := (Not let301)
  let let303 := (binrel% LT.lt let300 let299)
  let let304 := (binrel% LT.lt xx5f1 let11)
  let let305 := (Eq let224 let224)
  let let306 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let177 let24))
  let let307 := (binrel% HMul.hMul let141 let15)
  let let308 := (Neg.neg (binrel% HDiv.hDiv let25 let11))
  let let309 := (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let16 let308))
  let let310 := (Eq let91 let93)
  let let311 := (binrel% HAdd.hAdd (binrel% HMul.hMul let73 xx5f0) (binrel% HMul.hMul let73 xx5f2))
  let let312 := (binrel% GT.gt let16 let6)
  let let313 := (binrel% GT.gt let184 let6)
  let let314 := (binrel% LT.lt xx5f2 let13)
  let let315 := (binrel% LT.lt let126 let6)
  let let316 := (binrel% LE.le let36 let85)
  let let317 := (binrel% HMul.hMul let79 xx5f1)
  let let318 := (binrel% HMul.hMul let79 xx5f2)
  let let319 := (binrel% HAdd.hAdd let230 (binrel% HAdd.hAdd let318 (binrel% HAdd.hAdd let317 let198)))
  let let320 := (binrel% LT.lt let85 let6)
  let let321 := (Eq let186 let210)
  let let322 := (Neg.neg let75)
  let let323 := (binrel% GE.ge let36 let322)
  let let324 := (binrel% HAdd.hAdd let141 (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let189 let192)))
  let let325 := (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd (binrel% HMul.hMul let108 xx5f1) (binrel% HMul.hMul let81 xx5f2)))
  let let326 := (binrel% HAdd.hAdd let171 (binrel% HAdd.hAdd let325 (binrel% HAdd.hAdd let131 let311)))
  let let327 := (binrel% LT.lt let53 let7)
  let let328 := (binrel% GE.ge let2 let15)
  let let329 := (Not let328)
  let let330 := (Or let329 let222)
  let let331 := (Or let180 let330)
  let let332 := (Or let182 let330)
  let let333 := (Eq Or Or)
  let let334 := (Or let222 False)
  let let335 := (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd let307 let154))
  let let336 := (binrel% HAdd.hAdd let165 (binrel% HAdd.hAdd let194 let156))
  let let337 := (binrel% LE.le let336 let335)
  let let338 := (binrel% LE.le let156 let154)
  let let339 := (binrel% LE.le xx5f0 let6)
  let let340 := (And let218 let339)
  let let341 := (Eq let181 let204)
  let let342 := (binrel% LE.le let194 let307)
  let let343 := (And let179 let328)
  let let344 := (binrel% LE.le let165 let159)
  let let345 := (And let220 let221)
  let let346 := (Or let88 (Or let100 (Or let181 let166)))
  let let347 := (Or let150 (Or let247 (Or let181 let205)))
  let let348 := (binrel% LT.lt let114 let147)
  let let349 := (And let232 let219)
  let let350 := (Eq let149 let219)
  let let351 := (binrel% LT.lt let185 let188)
  let let352 := (And let313 let102)
  let let353 := (Eq let101 let102)
  let let354 := (binrel% LE.le let122 let139)
  let let355 := (And let285 let180)
  let let356 := (binrel% LE.le let236 let138)
  let let357 := (And let98 let168)
  let let358 := (Or let167 (Or let91 (Or let88 let181)))
  let let359 := (Or let167 (Or let93 (Or let150 let181)))
  let let360 := (Or let181 False)
  let let361 := (binrel% LE.le let257 let84)
  let let362 := (And let157 let166)
  let let363 := (Implies let362 let361)
  let let364 := (binrel% LE.le let261 let116)
  let let365 := (binrel% LE.le let90 let11)
  let let366 := (And let272 let365)
  let let367 := (binrel% LT.lt let262 let76)
  let let368 := (And let276 let219)
  let let369 := (Implies let368 let367)
  let let370 := (binrel% LE.le let133 let256)
  let let371 := (And let220 let180)
  let let372 := (Or let88 (Or let167 (Or let92 let278)))
  let let373 := (Or let150 (Or let167 (Or let92 let280)))
  let let374 := (binrel% LE.le let297 let298)
  let let375 := (And let157 let91)
  let let376 := (binrel% LE.le let57 let138)
  let let377 := (And let98 let286)
  let let378 := (Or let92 (Or let100 let224))
  let let379 := (Or let92 (Or let247 let226))
  let let380 := (binrel% LE.le let235 let233)
  let let381 := (And let283 let91)
  let let382 := (binrel% LT.lt let27 let17)
  let let383 := (And let312 let102)
  let let384 := (Implies let383 let382)
  let let385 := (binrel% LE.le let236 let51)
  let let386 := (And let98 let214)
  let let387 := (Or let222 (Or let279 (Or let225 let142)))
  let let388 := (Or let222 (Or let279 (Or let225 let144)))
  let let389 := (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let119 let86)))
  let let390 := (binrel% HAdd.hAdd let231 (binrel% HAdd.hAdd let318 (binrel% HAdd.hAdd let317 let199)))
  let let391 := (binrel% LE.le let390 let389)
  let let392 := (binrel% LE.le let199 let86)
  let let393 := (And let320 let221)
  let let394 := (binrel% LE.le let317 let119)
  let let395 := (And let249 let278)
  let let396 := (binrel% LE.le let318 let80)
  let let397 := (And let249 let224)
  let let398 := (binrel% LE.le let231 let138)
  let let399 := (And let98 let271)
  let let400 := (Eq let143 let296)
  let let401 := (Or let186 (Or let279 (Or let100 let143)))
  let let402 := (Or let210 (Or let279 (Or let247 let143)))
  let let403 := (Or let143 False)
  let let404 := (binrel% LE.le let130 let125)
  let let405 := (binrel% LE.le let53 let25)
  let let406 := (And let74 let405)
  let let407 := (binrel% LE.le let131 let127)
  let let408 := (And let315 let278)
  let let409 := (binrel% LT.lt let132 let76)
  let let410 := (And let276 let102)
  let let411 := (binrel% LE.le let133 let128)
  let let412 := (And let220 let142)
  let let413 := (Or let209 (Or let88 let41))
  let let414 := (Or let209 (Or let150 let69))
  let let415 := (binrel% LE.le let54 let49)
  let let416 := (And let277 let186)
  let let417 := (binrel% LT.lt let56 let50)
  let let418 := (And let46 let219)
  let let419 := (binrel% LE.le let57 let51)
  let let420 := (And let98 let64)
  let let421 := (Or let143 (Or let42 (Or let100 let3)))
  let let422 := (Or let143 (Or let42 (Or let247 let38)))
  let let423 := (binrel% LE.le let22 let12)
  let let424 := (And let10 let142)
  let let425 := (binrel% LE.le let23 let14)
  let let426 := (And let10 let41)
  let let427 := (binrel% LE.le let28 let20)
  let let428 := (And let98 let190)
fun lean_r0 : (Eq let5 let4) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let10 True) => -- EVALUATE
fun lean_r2 : (Eq let32 let31) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let20 let33) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let14 let34) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let12 let35) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let40 let39) => -- THEORY_REWRITE_BOOL
fun lean_r8 : let40 => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let43 let42) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let46 True) => -- EVALUATE
fun lean_r11 : (Eq let61 let60) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let50 let45) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let63 True) => -- THEORY_REWRITE_ARITH
fun lean_r14 : let67 => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let64 let42) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let28 let68) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let71 let70) => -- THEORY_REWRITE_BOOL
fun lean_r18 : let71 => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let72 True) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let74 True) => -- EVALUATE
fun lean_r21 : (Eq let76 let75) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let80 let77) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let84 let81) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let86 let36) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let87 True) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let89 True) => -- THEORY_REWRITE_BOOL
fun lean_r27 : let94 => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let97 let36) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let98 True) => -- EVALUATE
fun lean_r30 : (Eq let99 True) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let102 let101) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let107 let36) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let114 let112) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let116 let95) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let119 let118) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let124 let36) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let137 let136) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let138 let19) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let139 let121) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let128 let141) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let146 let145) => -- THEORY_REWRITE_BOOL
fun lean_r42 : (Eq let147 let113) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let148 False) => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let152 let151) => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let154 let36) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let156 let155) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let157 True) => -- EVALUATE
fun lean_r48 : (Eq let158 False) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let159 let36) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let165 let161) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let168 let167) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let169 let141) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let133 let171) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let172 True) => -- THEORY_REWRITE_BOOL
fun lean_r55 : (Eq let173 let101) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let178 let36) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let179 True) => -- EVALUATE
fun lean_r58 : let183 => -- THEORY_REWRITE_BOOL
fun lean_r59 : (Eq let185 let120) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let187 True) => -- THEORY_REWRITE_BOOL
fun lean_r61 : (Eq let188 let184) => -- THEORY_REWRITE_ARITH
fun lean_r62 : (Eq let127 let189) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let190 let4) => -- THEORY_REWRITE_ARITH
fun lean_r64 : let146 => -- THEORY_REWRITE_BOOL
fun lean_r65 : (Eq let191 True) => -- THEORY_REWRITE_BOOL
fun lean_r66 : (Eq let125 let192) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq let194 let193) => -- THEORY_REWRITE_ARITH
fun lean_r68 : (Eq let195 True) => -- THEORY_REWRITE_BOOL
fun lean_r69 : (Eq let196 let149) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq let197 let83) => -- THEORY_REWRITE_ARITH
fun lean_r71 : (Eq let199 let198) => -- THEORY_REWRITE_ARITH
fun lean_r72 : (Eq let200 True) => -- THEORY_REWRITE_BOOL
fun lean_r73 : let203 => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let204 let181) => -- THEORY_REWRITE_ARITH
fun lean_r75 : let206 => -- THEORY_REWRITE_BOOL
fun lean_r76 : (Eq let207 let85) => -- THEORY_REWRITE_ARITH
fun lean_r77 : (Eq let183 let208) => -- THEORY_REWRITE_BOOL
fun lean_r78 : let211 => -- THEORY_REWRITE_BOOL
fun lean_r79 : let152 => -- THEORY_REWRITE_BOOL
fun lean_r80 : (Eq let212 let36) => -- THEORY_REWRITE_ARITH
fun lean_r81 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r82 : (Eq let213 let167) => -- THEORY_REWRITE_ARITH
fun lean_r83 : let217 => -- THEORY_REWRITE_ARITH
fun lean_r84 : (Eq let218 True) => -- EVALUATE
fun lean_r85 : (Eq let219 let149) => -- THEORY_REWRITE_ARITH
fun lean_r86 : (Eq let220 True) => -- EVALUATE
fun lean_r87 : (Eq let223 let222) => -- THEORY_REWRITE_ARITH
fun lean_r88 : (Eq let228 let227) => -- THEORY_REWRITE_BOOL
fun lean_r89 : (Eq let229 True) => -- THEORY_REWRITE_BOOL
fun lean_r90 : (Eq let231 let230) => -- THEORY_REWRITE_ARITH
fun lean_r91 : (Eq let232 True) => -- EVALUATE
fun lean_r92 : (Eq let56 let105) => -- THEORY_REWRITE_ARITH
fun lean_r93 : (Eq let240 let239) => -- THEORY_REWRITE_ARITH
fun lean_r94 : (Eq let245 let244) => -- THEORY_REWRITE_ARITH
fun lean_r95 : (Eq let235 let176) => -- THEORY_REWRITE_ARITH
fun lean_r96 : (Eq let246 True) => -- THEORY_REWRITE_BOOL
fun lean_r97 : let248 => -- THEORY_REWRITE_BOOL
fun lean_r98 : (Eq let249 True) => -- EVALUATE
fun lean_r99 : let252 => -- THEORY_REWRITE_ARITH
fun lean_r100 : (Eq let248 let253) => -- THEORY_REWRITE_BOOL
fun lean_r101 : (Eq let255 True) => -- THEORY_REWRITE_ARITH
fun lean_r102 : (Eq let256 let96) => -- THEORY_REWRITE_ARITH
fun lean_r103 : (Eq let260 let36) => -- THEORY_REWRITE_ARITH
fun lean_r104 : (Eq let261 let258) => -- THEORY_REWRITE_ARITH
fun lean_r105 : (Eq let262 let259) => -- THEORY_REWRITE_ARITH
fun lean_r106 : (Eq let267 let266) => -- THEORY_REWRITE_ARITH
fun lean_r107 : (Eq let269 let62) => -- THEORY_REWRITE_ARITH
fun lean_r108 : (Eq let270 let92) => -- THEORY_REWRITE_ARITH
fun lean_r109 : (Eq let271 let143) => -- THEORY_REWRITE_ARITH
fun lean_r110 : (Eq let272 True) => -- EVALUATE
fun lean_r111 : let275 => -- THEORY_REWRITE_ARITH
fun lean_r112 : (Eq let276 True) => -- EVALUATE
fun lean_r113 : (Eq let57 let106) => -- THEORY_REWRITE_ARITH
fun lean_r114 : (Eq let277 True) => -- EVALUATE
fun lean_r115 : let281 => -- THEORY_REWRITE_BOOL
fun lean_r116 : (Eq let282 True) => -- THEORY_REWRITE_BOOL
fun lean_r117 : (Eq let283 True) => -- EVALUATE
fun lean_r118 : (Eq let281 let284) => -- THEORY_REWRITE_BOOL
fun lean_r119 : (Eq let285 True) => -- EVALUATE
fun lean_r120 : (Eq let286 let279) => -- THEORY_REWRITE_ARITH
fun lean_r121 : let289 => -- THEORY_REWRITE_ARITH
fun lean_r122 : (Eq let206 let290) => -- THEORY_REWRITE_BOOL
fun lean_r123 : (Eq let292 let83) => -- THEORY_REWRITE_ARITH
fun lean_r124 : (Eq let293 let221) => -- THEORY_REWRITE_ARITH
fun lean_r125 : (Eq let295 let36) => -- THEORY_REWRITE_ARITH
fun lean_r126 : (Eq let296 let143) => -- THEORY_REWRITE_ARITH
fun lean_r127 : (Eq let297 let294) => -- THEORY_REWRITE_ARITH
fun lean_r128 : (Eq let303 let302) => -- THEORY_REWRITE_ARITH
fun lean_r129 : (Eq let304 let279) => -- THEORY_REWRITE_ARITH
fun lean_r130 : (Eq let305 True) => -- THEORY_REWRITE_BOOL
fun lean_r131 : (Eq let306 let36) => -- THEORY_REWRITE_ARITH
fun lean_r132 : let228 => -- THEORY_REWRITE_BOOL
fun lean_r133 : (Eq let214 let225) => -- THEORY_REWRITE_ARITH
fun lean_r134 : (Eq let307 let141) => -- THEORY_REWRITE_ARITH
fun lean_r135 : (Eq let309 let254) => -- THEORY_REWRITE_ARITH
fun lean_r136 : (Eq let233 let308) => -- THEORY_REWRITE_ARITH
fun lean_r137 : (Eq let94 let310) => -- THEORY_REWRITE_BOOL
fun lean_r138 : (Eq let130 let311) => -- THEORY_REWRITE_ARITH
fun lean_r139 : (Eq let49 let268) => -- THEORY_REWRITE_ARITH
fun lean_r140 : (Eq let51 let140) => -- THEORY_REWRITE_ARITH
fun lean_r141 : (Eq let54 let103) => -- THEORY_REWRITE_ARITH
fun lean_r142 : (Eq let236 let123) => -- THEORY_REWRITE_ARITH
fun lean_r143 : (Eq let27 let177) => -- THEORY_REWRITE_ARITH
fun lean_r144 : (Eq let312 True) => -- EVALUATE
fun lean_r145 : (Eq let313 True) => -- EVALUATE
fun lean_r146 : (Eq let314 let225) => -- THEORY_REWRITE_ARITH
fun lean_r147 : (Eq let315 True) => -- EVALUATE
fun lean_r148 : (Eq let316 False) => -- THEORY_REWRITE_ARITH
fun lean_r149 : (Eq let319 let36) => -- THEORY_REWRITE_ARITH
fun lean_r150 : (Eq let320 True) => -- EVALUATE
fun lean_r151 : (Eq let211 let321) => -- THEORY_REWRITE_BOOL
fun lean_r152 : (Eq let323 True) => -- THEORY_REWRITE_ARITH
fun lean_r153 : (Eq let324 let322) => -- THEORY_REWRITE_ARITH
fun lean_r154 : (Eq let298 let291) => -- THEORY_REWRITE_ARITH
fun lean_r155 : (Eq let326 let36) => -- THEORY_REWRITE_ARITH
fun lean_r156 : (Eq let132 let325) => -- THEORY_REWRITE_ARITH
fun lean_r157 : (Eq let327 let209) => -- THEORY_REWRITE_ARITH
fun lean_a158 : (binrel% GE.ge xx5f0 let6) =>
fun lean_a159 : (binrel% GE.ge xx5f1 let6) =>
fun lean_a160 : (binrel% GE.ge xx5f2 let6) =>
fun lean_a161 : let293 =>
fun lean_a162 : let196 =>
fun lean_a163 : let173 =>
fun lean_a164 : let328 =>
fun lean_a165 : let190 => by
have lean_s0 : (Or let143 (Or let42 (Or let247 (Or let38 False)))) :=
  (scope (fun lean_a166 : let142 =>
    (scope (fun lean_a167 : let41 =>
      (scope (fun lean_a168 : let101 =>
        (scope (fun lean_a169 : let4 =>
          have lean_s0 : let4 := by timed eqResolve lean_a165 lean_r63
          have lean_s1 : (Eq let4 let5) := by timed Eq.symm lean_r0
          have lean_s2 : let5 := by timed eqResolve lean_s0 lean_s1
          have lean_s3 : let190 := by intTightUb lean_s2
          have lean_s4 : (Or let250 False) :=
            (scope (fun lean_a170 : let190 =>
              have lean_s4 : let98 := by timed trueElim lean_r29
              have lean_s5 : let428 := by timed And.intro lean_s4 lean_a170
              have lean_s6 : (Implies let428 let427) := by arithMulPos [let2, let18, let19], 1
              have lean_s7 : let427 := by timed modusPonens lean_s5 lean_s6
              have lean_s8 : let312 := by timed trueElim lean_r144
              have lean_s9 : let101 := by timed eqResolve lean_a163 lean_r55
              have lean_s10 : let353 := by timed Eq.symm lean_r31
              have lean_s11 : let102 := by timed eqResolve lean_s9 lean_s10
              have lean_s12 : let383 := by timed And.intro lean_s8 lean_s11
              have lean_s13 : let384 := by arithMulPos [let26, let15, let16], 0
              have lean_s14 : let382 := by timed modusPonens lean_s12 lean_s13
              have lean_s15 : let10 := by timed trueElim lean_r1
              have lean_s16 : let426 := by timed And.intro lean_s15 lean_a167
              have lean_s17 : (Implies let426 let425) := by arithMulNeg [xx5f1, let13, let9], 3
              have lean_s18 : let425 := by timed modusPonens lean_s16 lean_s17
              have lean_s19 : let424 := by timed And.intro lean_s15 lean_a166
              have lean_s20 : (Implies let424 let423) := by arithMulNeg [xx5f0, let11, let9], 3
              have lean_s21 : let423 := by timed modusPonens lean_s19 lean_s20
              have lean_s22 : let32 := by sumBounds [lean_s7, lean_s14, lean_s18, lean_s21]
              have lean_s23 : (Eq let23 let23) := by timed rfl
              have lean_s24 : (Eq let22 let22) := by timed rfl
              let lean_s25 := by timed congrHAdd lean_s23 lean_s24
              let lean_s26 := by timed congrHAdd lean_r143 lean_s25
              have lean_s27 : (Eq let29 let306) := by timed congrHAdd lean_r16 lean_s26
              have lean_s28 : (Eq let29 let36) := by timed Eq.trans lean_s27 lean_r131
              let lean_s29 := by timed flipCongrArg lean_s28 [GE.ge]
              let lean_s30 := by timed congrHAdd lean_r4 lean_r5
              let lean_s31 := by timed congrHAdd lean_r81 lean_s30
              have lean_s32 : (Eq let21 let37) := by timed congrHAdd lean_r3 lean_s31
              have lean_s33 : (Eq let21 let36) := by timed Eq.trans lean_s32 lean_r6
              have lean_s34 : (Eq let30 let87) := by timed congr lean_s29 lean_s33
              have lean_s35 : (Eq let30 True) := by timed Eq.trans lean_s34 lean_r25
              have lean_s36 : (Eq let31 let148) := by timed flipCongrArg lean_s35 [Not]
              have lean_s37 : (Eq let31 False) := by timed Eq.trans lean_s36 lean_r43
              have lean_s38 : (Eq let32 False) := by timed Eq.trans lean_r2 lean_s37
              show False from by timed eqResolve lean_s22 lean_s38
            ))
          have lean_s5 : let250 := by liftOrNToNeg lean_s4
          have lean_s6 : (Eq let250 let38) := by timed flipCongrArg lean_r63 [Not]
          have lean_s7 : (Eq let250 let3) := by timed Eq.trans lean_s6 lean_r8
          have lean_s8 : (Eq let251 let3) := by timed Eq.trans lean_r99 lean_s7
          have lean_s9 : (Eq let3 let251) := by timed Eq.symm lean_s8
          have lean_s10 : (Eq let250 let251) := by timed Eq.trans lean_s7 lean_s9
          have lean_s11 : let251 := by timed eqResolve lean_s5 lean_s10
          have lean_s12 : (Eq let3 let250) := by timed Eq.symm lean_s7
          have lean_s13 : let252 := by timed Eq.trans lean_s8 lean_s12
          have lean_s14 : let250 := by timed eqResolve lean_s11 lean_s13
          show False from by timed contradiction lean_s3 lean_s14
  ))))))))
have lean_s1 : (Not (And let142 (And let41 (And let101 let4)))) := by liftOrNToNeg lean_s0
have lean_s2 : let422 := by timed flipNotAnd lean_s1 [let142, let41, let101, let4]
have lean_s3 : let333 := by timed rfl
have lean_s4 : (Eq let143 let143) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let42 let42) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : let246 := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [Eq]
have lean_s10 : (Eq let253 let246) := by timed congr lean_s9 lean_r97
have lean_s11 : (Eq let253 True) := by timed Eq.trans lean_s10 lean_r96
have lean_s12 : (Eq let248 True) := by timed Eq.trans lean_r100 lean_s11
have lean_s13 : let248 := by timed trueElim lean_s12
let lean_s14 := by timed congr lean_s3 lean_s13
have lean_s15 : let172 := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [Eq]
have lean_s17 : (Eq let39 let172) := by timed congr lean_s16 lean_r8
have lean_s18 : (Eq let39 True) := by timed Eq.trans lean_s17 lean_r54
have lean_s19 : (Eq let40 True) := by timed Eq.trans lean_r7 lean_s18
have lean_s20 : let40 := by timed trueElim lean_s19
let lean_s21 := by timed congr lean_s14 lean_s20
let lean_s22 := by timed congr lean_s7 lean_s21
have lean_s23 : (Eq let422 let421) := by timed congr lean_s5 lean_s22
have lean_s24 : let421 := by timed eqResolve lean_s2 lean_s23
have lean_s25 : (Or let100 (Or let3 (Or let143 let42))) := by permutateOr lean_s24, [2, 3, 0, 1], (- 1)
have lean_s26 : (Or let209 (Or let150 (Or let69 False))) :=
  (scope (fun lean_a170 : let186 =>
    (scope (fun lean_a171 : let149 =>
      (scope (fun lean_a172 : let42 =>
        have lean_s26 : (Eq let42 let43) := by timed Eq.symm lean_r9
        have lean_s27 : let43 := by timed eqResolve lean_a172 lean_s26
        have lean_s28 : let64 := by intTightUb lean_s27
        have lean_s29 : (Or let65 False) :=
          (scope (fun lean_a173 : let64 =>
            have lean_s29 : let98 := by timed trueElim lean_r29
            have lean_s30 : let420 := by timed And.intro lean_s29 lean_a173
            have lean_s31 : (Implies let420 let419) := by arithMulPos [xx5f1, let11, let19], 1
            have lean_s32 : let419 := by timed modusPonens lean_s30 lean_s31
            have lean_s33 : let46 := by timed trueElim lean_r10
            have lean_s34 : let149 := by timed eqResolve lean_a162 lean_r69
            have lean_s35 : let350 := by timed Eq.symm lean_r85
            have lean_s36 : let219 := by timed eqResolve lean_s34 lean_s35
            have lean_s37 : let418 := by timed And.intro lean_s33 lean_s36
            have lean_s38 : (Implies let418 let417) := by arithMulPos [let55, let15, let45], 0
            have lean_s39 : let417 := by timed modusPonens lean_s37 lean_s38
            have lean_s40 : let277 := by timed trueElim lean_r114
            have lean_s41 : let416 := by timed And.intro lean_s40 lean_a170
            have lean_s42 : (Implies let416 let415) := by arithMulNeg [let53, let7, let48], 3
            have lean_s43 : let415 := by timed modusPonens lean_s41 lean_s42
            have lean_s44 : let61 := by sumBounds [lean_s32, lean_s39, lean_s43]
            let lean_s45 := by timed congrHAdd lean_r92 lean_r141
            have lean_s46 : (Eq let58 let107) := by timed congrHAdd lean_r113 lean_s45
            have lean_s47 : (Eq let58 let36) := by timed Eq.trans lean_s46 lean_r32
            let lean_s48 := by timed flipCongrArg lean_s47 [GE.ge]
            let lean_s49 := by timed congrHAdd lean_r12 lean_r139
            have lean_s50 : (Eq let52 let269) := by timed congrHAdd lean_r140 lean_s49
            have lean_s51 : (Eq let52 let62) := by timed Eq.trans lean_s50 lean_r107
            have lean_s52 : (Eq let59 let63) := by timed congr lean_s48 lean_s51
            have lean_s53 : (Eq let59 True) := by timed Eq.trans lean_s52 lean_r13
            have lean_s54 : (Eq let60 let148) := by timed flipCongrArg lean_s53 [Not]
            have lean_s55 : (Eq let60 False) := by timed Eq.trans lean_s54 lean_r43
            have lean_s56 : (Eq let61 False) := by timed Eq.trans lean_r11 lean_s55
            show False from by timed eqResolve lean_s44 lean_s56
          ))
        have lean_s30 : let65 := by liftOrNToNeg lean_s29
        have lean_s31 : (Eq let65 let69) := by timed flipCongrArg lean_r15 [Not]
        have lean_s32 : (Eq let65 let41) := by timed Eq.trans lean_s31 lean_r18
        have lean_s33 : (Eq let66 let41) := by timed Eq.trans lean_r14 lean_s32
        have lean_s34 : (Eq let41 let66) := by timed Eq.symm lean_s33
        have lean_s35 : (Eq let65 let66) := by timed Eq.trans lean_s32 lean_s34
        have lean_s36 : let66 := by timed eqResolve lean_s30 lean_s35
        have lean_s37 : (Eq let41 let65) := by timed Eq.symm lean_s32
        have lean_s38 : let67 := by timed Eq.trans lean_s33 lean_s37
        have lean_s39 : let65 := by timed eqResolve lean_s36 lean_s38
        show False from by timed contradiction lean_s28 lean_s39
  ))))))
have lean_s27 : (Not (And let186 (And let149 let42))) := by liftOrNToNeg lean_s26
have lean_s28 : let414 := by timed flipNotAnd lean_s27 [let186, let149, let42]
have lean_s29 : let333 := by timed rfl
have lean_s30 : (Eq let209 let209) := by timed rfl
let lean_s31 := by timed congr lean_s29 lean_s30
have lean_s32 : let89 := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [Eq]
have lean_s34 : (Eq let151 let89) := by timed congr lean_s33 lean_r79
have lean_s35 : (Eq let151 True) := by timed Eq.trans lean_s34 lean_r26
have lean_s36 : (Eq let152 True) := by timed Eq.trans lean_r44 lean_s35
have lean_s37 : let152 := by timed trueElim lean_s36
let lean_s38 := by timed congr lean_s29 lean_s37
have lean_s39 : let72 := by timed rfl
let lean_s40 := by timed flipCongrArg lean_s39 [Eq]
have lean_s41 : (Eq let70 let72) := by timed congr lean_s40 lean_r18
have lean_s42 : (Eq let70 True) := by timed Eq.trans lean_s41 lean_r19
have lean_s43 : (Eq let71 True) := by timed Eq.trans lean_r17 lean_s42
have lean_s44 : let71 := by timed trueElim lean_s43
let lean_s45 := by timed congr lean_s38 lean_s44
have lean_s46 : (Eq let414 let413) := by timed congr lean_s31 lean_s45
have lean_s47 : let413 := by timed eqResolve lean_s28 lean_s46
have lean_s48 : (Or let88 (Or let41 let209)) := by permutateOr lean_s47, [1, 2, 0], (- 1)
have lean_s49 : let149 := by timed eqResolve lean_a162 lean_r69
let lean_s50 := by R1 lean_s48, lean_s49, let88, [(- 1), 0]
have lean_s51 : (Or let210 (Or let279 (Or let247 let403))) :=
  (scope (fun lean_a174 : let209 =>
    (scope (fun lean_a175 : let278 =>
      (scope (fun lean_a176 : let101 =>
        (scope (fun lean_a177 : let142 =>
          have lean_s51 : let403 :=
            (scope (fun lean_a176 : let142 =>
              have lean_s51 : let220 := by timed trueElim lean_r86
              have lean_s52 : let412 := by timed And.intro lean_s51 lean_a176
              have lean_s53 : (Implies let412 let411) := by arithMulNeg [xx5f0, let11, let96], 3
              have lean_s54 : let411 := by timed modusPonens lean_s52 lean_s53
              have lean_s55 : let276 := by timed trueElim lean_r112
              have lean_s56 : let101 := by timed eqResolve lean_a163 lean_r55
              have lean_s57 : let353 := by timed Eq.symm lean_r31
              have lean_s58 : let102 := by timed eqResolve lean_s56 lean_s57
              have lean_s59 : let410 := by timed And.intro lean_s55 lean_s58
              have lean_s60 : (Implies let410 let409) := by arithMulPos [let26, let15, let75], 0
              have lean_s61 : let409 := by timed modusPonens lean_s59 lean_s60
              have lean_s62 : let315 := by timed trueElim lean_r147
              have lean_s63 : let408 := by timed And.intro lean_s62 lean_a175
              have lean_s64 : (Implies let408 let407) := by arithMulNeg [xx5f1, let11, let126], 3
              have lean_s65 : let407 := by timed modusPonens lean_s63 lean_s64
              have lean_s66 : let74 := by timed trueElim lean_r20
              have lean_s67 : (Eq let209 let327) := by timed Eq.symm lean_r157
              have lean_s68 : let327 := by timed eqResolve lean_a174 lean_s67
              have lean_s69 : let405 := by intTightUb lean_s68
              have lean_s70 : let406 := by timed And.intro lean_s66 lean_s69
              have lean_s71 : (Implies let406 let404) := by arithMulPos [let53, let25, let73], 1
              have lean_s72 : let404 := by timed modusPonens lean_s70 lean_s71
              have lean_s73 : let137 := by sumBounds [lean_s54, lean_s61, lean_s65, lean_s72]
              have lean_s74 : (Eq let131 let131) := by timed rfl
              let lean_s75 := by timed congrHAdd lean_s74 lean_r138
              let lean_s76 := by timed congrHAdd lean_r156 lean_s75
              have lean_s77 : (Eq let134 let326) := by timed congrHAdd lean_r53 lean_s76
              have lean_s78 : (Eq let134 let36) := by timed Eq.trans lean_s77 lean_r155
              let lean_s79 := by timed flipCongrArg lean_s78 [GE.ge]
              let lean_s80 := by timed congrHAdd lean_r62 lean_r66
              let lean_s81 := by timed congrHAdd lean_r21 lean_s80
              have lean_s82 : (Eq let129 let324) := by timed congrHAdd lean_r40 lean_s81
              have lean_s83 : (Eq let129 let322) := by timed Eq.trans lean_s82 lean_r153
              have lean_s84 : (Eq let135 let323) := by timed congr lean_s79 lean_s83
              have lean_s85 : (Eq let135 True) := by timed Eq.trans lean_s84 lean_r152
              have lean_s86 : (Eq let136 let148) := by timed flipCongrArg lean_s85 [Not]
              have lean_s87 : (Eq let136 False) := by timed Eq.trans lean_s86 lean_r43
              have lean_s88 : (Eq let137 False) := by timed Eq.trans lean_r37 lean_s87
              show False from by timed eqResolve lean_s73 lean_s88
            ))
          have lean_s52 : let143 := by liftOrNToNeg lean_s51
          have lean_s53 : let400 := by timed Eq.symm lean_r126
          have lean_s54 : let296 := by timed eqResolve lean_s52 lean_s53
          have lean_s55 : let143 := by timed eqResolve lean_s54 lean_r126
          show False from by timed contradiction lean_a177 lean_s55
  ))))))))
have lean_s52 : (Not (And let209 (And let278 (And let101 let142)))) := by liftOrNToNeg lean_s51
have lean_s53 : let402 := by timed flipNotAnd lean_s52 [let209, let278, let101, let142]
have lean_s54 : let333 := by timed rfl
have lean_s55 : let187 := by timed rfl
let lean_s56 := by timed flipCongrArg lean_s55 [Eq]
have lean_s57 : (Eq let321 let187) := by timed congr lean_s56 lean_r78
have lean_s58 : (Eq let321 True) := by timed Eq.trans lean_s57 lean_r60
have lean_s59 : (Eq let211 True) := by timed Eq.trans lean_r151 lean_s58
have lean_s60 : let211 := by timed trueElim lean_s59
let lean_s61 := by timed congr lean_s54 lean_s60
have lean_s62 : (Eq let279 let279) := by timed rfl
let lean_s63 := by timed congr lean_s54 lean_s62
let lean_s64 := by timed congr lean_s54 lean_s13
let lean_s65 := by timed congr lean_s64 lean_s4
let lean_s66 := by timed congr lean_s63 lean_s65
have lean_s67 : (Eq let402 let401) := by timed congr lean_s61 lean_s66
have lean_s68 : let401 := by timed eqResolve lean_s53 lean_s67
have lean_s69 : (Or let100 (Or let279 (Or let143 let186))) := by permutateOr lean_s68, [2, 1, 3, 0], (- 1)
have lean_s70 : let101 := by timed eqResolve lean_a163 lean_r55
let lean_s71 := by R1 lean_s69, lean_s70, let100, [(- 1), 0]
have lean_s72 : (Or let150 (Or let167 (Or let92 (Or let280 False)))) :=
  (scope (fun lean_a176 : let149 =>
    (scope (fun lean_a177 : let166 =>
      (scope (fun lean_a178 : let91 =>
        (scope (fun lean_a179 : let279 =>
          have lean_s72 : (Eq let279 let304) := by timed Eq.symm lean_r129
          have lean_s73 : let304 := by timed eqResolve lean_a179 lean_s72
          have lean_s74 : let286 := by intTightUb lean_s73
          have lean_s75 : (Or let287 False) :=
            (scope (fun lean_a179 : let286 =>
              have lean_s75 : let98 := by timed trueElim lean_r29
              have lean_s76 : let377 := by timed And.intro lean_s75 lean_a179
              have lean_s77 : (Implies let377 let376) := by arithMulPos [xx5f1, let15, let19], 1
              have lean_s78 : let376 := by timed modusPonens lean_s76 lean_s77
              have lean_s79 : let157 := by timed trueElim lean_r47
              have lean_s80 : let375 := by timed And.intro lean_s79 lean_a178
              have lean_s81 : (Implies let375 let374) := by arithMulNeg [let90, let13, let83], 3
              have lean_s82 : let374 := by timed modusPonens lean_s80 lean_s81
              have lean_s83 : let362 := by timed And.intro lean_s79 lean_a177
              have lean_s84 : let363 := by arithMulNeg [xx5f2, let11, let83], 3
              have lean_s85 : let361 := by timed modusPonens lean_s83 lean_s84
              have lean_s86 : let276 := by timed trueElim lean_r112
              have lean_s87 : let149 := by timed eqResolve lean_a162 lean_r69
              have lean_s88 : let350 := by timed Eq.symm lean_r85
              have lean_s89 : let219 := by timed eqResolve lean_s87 lean_s88
              have lean_s90 : let368 := by timed And.intro lean_s86 lean_s89
              have lean_s91 : let369 := by arithMulPos [let55, let15, let75], 0
              have lean_s92 : let367 := by timed modusPonens lean_s90 lean_s91
              have lean_s93 : let303 := by sumBounds [lean_s78, lean_s82, lean_s85, lean_s92]
              have lean_s94 : (Eq let257 let257) := by timed rfl
              let lean_s95 := by timed congrHAdd lean_s94 lean_r105
              let lean_s96 := by timed congrHAdd lean_r127 lean_s95
              have lean_s97 : (Eq let300 let295) := by timed congrHAdd lean_r113 lean_s96
              have lean_s98 : (Eq let300 let36) := by timed Eq.trans lean_s97 lean_r125
              let lean_s99 := by timed flipCongrArg lean_s98 [GE.ge]
              let lean_s100 := by timed congrHAdd lean_r23 lean_r21
              let lean_s101 := by timed congrHAdd lean_r154 lean_s100
              have lean_s102 : (Eq let299 let292) := by timed congrHAdd lean_r38 lean_s101
              have lean_s103 : (Eq let299 let83) := by timed Eq.trans lean_s102 lean_r123
              have lean_s104 : (Eq let301 let99) := by timed congr lean_s99 lean_s103
              have lean_s105 : (Eq let301 True) := by timed Eq.trans lean_s104 lean_r30
              have lean_s106 : (Eq let302 let148) := by timed flipCongrArg lean_s105 [Not]
              have lean_s107 : (Eq let302 False) := by timed Eq.trans lean_s106 lean_r43
              have lean_s108 : (Eq let303 False) := by timed Eq.trans lean_r128 lean_s107
              show False from by timed eqResolve lean_s93 lean_s108
            ))
          have lean_s76 : let287 := by liftOrNToNeg lean_s75
          have lean_s77 : (Eq let287 let280) := by timed flipCongrArg lean_r120 [Not]
          have lean_s78 : (Eq let287 let278) := by timed Eq.trans lean_s77 lean_r115
          have lean_s79 : (Eq let288 let278) := by timed Eq.trans lean_r121 lean_s78
          have lean_s80 : (Eq let278 let288) := by timed Eq.symm lean_s79
          have lean_s81 : (Eq let287 let288) := by timed Eq.trans lean_s78 lean_s80
          have lean_s82 : let288 := by timed eqResolve lean_s76 lean_s81
          have lean_s83 : (Eq let278 let287) := by timed Eq.symm lean_s78
          have lean_s84 : let289 := by timed Eq.trans lean_s79 lean_s83
          have lean_s85 : let287 := by timed eqResolve lean_s82 lean_s84
          show False from by timed contradiction lean_s74 lean_s85
  ))))))))
have lean_s73 : (Not (And let149 (And let166 (And let91 let279)))) := by liftOrNToNeg lean_s72
have lean_s74 : let373 := by timed flipNotAnd lean_s73 [let149, let166, let91, let279]
have lean_s75 : let333 := by timed rfl
let lean_s76 := by timed congr lean_s75 lean_s37
have lean_s77 : (Eq let167 let167) := by timed rfl
let lean_s78 := by timed congr lean_s75 lean_s77
have lean_s79 : (Eq let92 let92) := by timed rfl
let lean_s80 := by timed congr lean_s75 lean_s79
have lean_s81 : let282 := by timed rfl
let lean_s82 := by timed flipCongrArg lean_s81 [Eq]
have lean_s83 : (Eq let284 let282) := by timed congr lean_s82 lean_r115
have lean_s84 : (Eq let284 True) := by timed Eq.trans lean_s83 lean_r116
have lean_s85 : (Eq let281 True) := by timed Eq.trans lean_r118 lean_s84
have lean_s86 : let281 := by timed trueElim lean_s85
let lean_s87 := by timed congr lean_s80 lean_s86
let lean_s88 := by timed congr lean_s78 lean_s87
have lean_s89 : (Eq let373 let372) := by timed congr lean_s76 lean_s88
have lean_s90 : let372 := by timed eqResolve lean_s74 lean_s89
have lean_s91 : (Or let167 (Or let93 (Or let150 let360))) :=
  (scope (fun lean_a180 : let166 =>
    (scope (fun lean_a181 : let92 =>
      (scope (fun lean_a182 : let149 =>
        (scope (fun lean_a183 : let180 =>
          have lean_s91 : let360 :=
            (scope (fun lean_a182 : let180 =>
              have lean_s91 : let220 := by timed trueElim lean_r86
              have lean_s92 : let371 := by timed And.intro lean_s91 lean_a182
              have lean_s93 : (Implies let371 let370) := by arithMulNeg [xx5f0, let15, let96], 3
              have lean_s94 : let370 := by timed modusPonens lean_s92 lean_s93
              have lean_s95 : let276 := by timed trueElim lean_r112
              have lean_s96 : let149 := by timed eqResolve lean_a162 lean_r69
              have lean_s97 : let350 := by timed Eq.symm lean_r85
              have lean_s98 : let219 := by timed eqResolve lean_s96 lean_s97
              have lean_s99 : let368 := by timed And.intro lean_s95 lean_s98
              have lean_s100 : let369 := by arithMulPos [let55, let15, let75], 0
              have lean_s101 : let367 := by timed modusPonens lean_s99 lean_s100
              have lean_s102 : let272 := by timed trueElim lean_r110
              have lean_s103 : (Eq let92 let270) := by timed Eq.symm lean_r108
              have lean_s104 : let270 := by timed eqResolve lean_a181 lean_s103
              have lean_s105 : let365 := by intTightUb lean_s104
              have lean_s106 : let366 := by timed And.intro lean_s102 lean_s105
              have lean_s107 : (Implies let366 let364) := by arithMulPos [let90, let11, let115], 1
              have lean_s108 : let364 := by timed modusPonens lean_s106 lean_s107
              have lean_s109 : let157 := by timed trueElim lean_r47
              have lean_s110 : let362 := by timed And.intro lean_s109 lean_a180
              have lean_s111 : let363 := by arithMulNeg [xx5f2, let11, let83], 3
              have lean_s112 : let361 := by timed modusPonens lean_s110 lean_s111
              have lean_s113 : let267 := by sumBounds [lean_s94, lean_s101, lean_s108, lean_s112]
              have lean_s114 : (Eq let257 let257) := by timed rfl
              let lean_s115 := by timed congrHAdd lean_r104 lean_s114
              let lean_s116 := by timed congrHAdd lean_r105 lean_s115
              have lean_s117 : (Eq let264 let260) := by timed congrHAdd lean_r53 lean_s116
              have lean_s118 : (Eq let264 let36) := by timed Eq.trans lean_s117 lean_r103
              let lean_s119 := by timed flipCongrArg lean_s118 [GE.ge]
              let lean_s120 := by timed congrHAdd lean_r34 lean_r23
              let lean_s121 := by timed congrHAdd lean_r21 lean_s120
              have lean_s122 : (Eq let263 let97) := by timed congrHAdd lean_r102 lean_s121
              have lean_s123 : (Eq let263 let36) := by timed Eq.trans lean_s122 lean_r28
              have lean_s124 : (Eq let265 let87) := by timed congr lean_s119 lean_s123
              have lean_s125 : (Eq let265 True) := by timed Eq.trans lean_s124 lean_r25
              have lean_s126 : (Eq let266 let148) := by timed flipCongrArg lean_s125 [Not]
              have lean_s127 : (Eq let266 False) := by timed Eq.trans lean_s126 lean_r43
              have lean_s128 : (Eq let267 False) := by timed Eq.trans lean_r106 lean_s127
              show False from by timed eqResolve lean_s113 lean_s128
            ))
          have lean_s92 : let181 := by liftOrNToNeg lean_s91
          have lean_s93 : let341 := by timed Eq.symm lean_r74
          have lean_s94 : let204 := by timed eqResolve lean_s92 lean_s93
          have lean_s95 : let181 := by timed eqResolve lean_s94 lean_r74
          show False from by timed contradiction lean_a183 lean_s95
  ))))))))
have lean_s92 : (Not (And let166 (And let92 (And let149 let180)))) := by liftOrNToNeg lean_s91
have lean_s93 : let359 := by timed flipNotAnd lean_s92 [let166, let92, let149, let180]
have lean_s94 : let333 := by timed rfl
let lean_s95 := by timed congr lean_s94 lean_s77
have lean_s96 : let195 := by timed rfl
let lean_s97 := by timed flipCongrArg lean_s96 [Eq]
have lean_s98 : (Eq let310 let195) := by timed congr lean_s97 lean_r27
have lean_s99 : (Eq let310 True) := by timed Eq.trans lean_s98 lean_r68
have lean_s100 : (Eq let94 True) := by timed Eq.trans lean_r137 lean_s99
have lean_s101 : let94 := by timed trueElim lean_s100
let lean_s102 := by timed congr lean_s94 lean_s101
let lean_s103 := by timed congr lean_s94 lean_s37
have lean_s104 : (Eq let181 let181) := by timed rfl
let lean_s105 := by timed congr lean_s103 lean_s104
let lean_s106 := by timed congr lean_s102 lean_s105
have lean_s107 : (Eq let359 let358) := by timed congr lean_s95 lean_s106
have lean_s108 : let358 := by timed eqResolve lean_s93 lean_s107
have lean_s109 : (Or let88 (Or let181 (Or let167 let91))) := by permutateOr lean_s108, [2, 3, 0, 1], (- 1)
have lean_s110 : (Or let150 (Or let247 (Or let181 (Or let205 False)))) :=
  (scope (fun lean_a182 : let149 =>
    (scope (fun lean_a183 : let101 =>
      (scope (fun lean_a184 : let180 =>
        (scope (fun lean_a185 : let167 =>
          have lean_s110 : (Eq let167 let213) := by timed Eq.symm lean_r82
          have lean_s111 : let213 := by timed eqResolve lean_a185 lean_s110
          have lean_s112 : let168 := by intTightUb lean_s111
          have lean_s113 : (Or let201 False) :=
            (scope (fun lean_a183 : let168 =>
              have lean_s113 : let98 := by timed trueElim lean_r29
              have lean_s114 : let357 := by timed And.intro lean_s113 lean_a183
              have lean_s115 : (Implies let357 let356) := by arithMulPos [xx5f2, let15, let19], 1
              have lean_s116 : let356 := by timed modusPonens lean_s114 lean_s115
              have lean_s117 : let285 := by timed trueElim lean_r119
              have lean_s118 : let355 := by timed And.intro lean_s117 lean_a184
              have lean_s119 : (Implies let355 let354) := by arithMulNeg [xx5f0, let15, let121], 3
              have lean_s120 : let354 := by timed modusPonens lean_s118 lean_s119
              have lean_s121 : let313 := by timed trueElim lean_r145
              have lean_s122 : let101 := by timed eqResolve lean_a163 lean_r55
              have lean_s123 : let353 := by timed Eq.symm lean_r31
              have lean_s124 : let102 := by timed eqResolve lean_s122 lean_s123
              have lean_s125 : let352 := by timed And.intro lean_s121 lean_s124
              have lean_s126 : (Implies let352 let351) := by arithMulPos [let26, let15, let184], 0
              have lean_s127 : let351 := by timed modusPonens lean_s125 lean_s126
              have lean_s128 : let232 := by timed trueElim lean_r91
              have lean_s129 : let149 := by timed eqResolve lean_a162 lean_r69
              have lean_s130 : let350 := by timed Eq.symm lean_r85
              have lean_s131 : let219 := by timed eqResolve lean_s129 lean_s130
              have lean_s132 : let349 := by timed And.intro lean_s128 lean_s131
              have lean_s133 : (Implies let349 let348) := by arithMulPos [let55, let15, let113], 0
              have lean_s134 : let348 := by timed modusPonens lean_s132 lean_s133
              have lean_s135 : let245 := by sumBounds [lean_s116, lean_s120, lean_s127, lean_s134]
              have lean_s136 : (Eq let122 let122) := by timed rfl
              let lean_s137 := by timed congrHAdd lean_r59 lean_r33
              let lean_s138 := by timed congrHAdd lean_s136 lean_s137
              have lean_s139 : (Eq let242 let124) := by timed congrHAdd lean_r142 lean_s138
              have lean_s140 : (Eq let242 let36) := by timed Eq.trans lean_s139 lean_r36
              let lean_s141 := by timed flipCongrArg lean_s140 [GE.ge]
              let lean_s142 := by timed congrHAdd lean_r61 lean_r42
              let lean_s143 := by timed congrHAdd lean_r39 lean_s142
              have lean_s144 : (Eq let241 let197) := by timed congrHAdd lean_r38 lean_s143
              have lean_s145 : (Eq let241 let83) := by timed Eq.trans lean_s144 lean_r70
              have lean_s146 : (Eq let243 let99) := by timed congr lean_s141 lean_s145
              have lean_s147 : (Eq let243 True) := by timed Eq.trans lean_s146 lean_r30
              have lean_s148 : (Eq let244 let148) := by timed flipCongrArg lean_s147 [Not]
              have lean_s149 : (Eq let244 False) := by timed Eq.trans lean_s148 lean_r43
              have lean_s150 : (Eq let245 False) := by timed Eq.trans lean_r94 lean_s149
              show False from by timed eqResolve lean_s135 lean_s150
            ))
          have lean_s114 : let201 := by liftOrNToNeg lean_s113
          have lean_s115 : (Eq let201 let205) := by timed flipCongrArg lean_r51 [Not]
          have lean_s116 : (Eq let201 let166) := by timed Eq.trans lean_s115 lean_r75
          have lean_s117 : (Eq let202 let166) := by timed Eq.trans lean_r73 lean_s116
          have lean_s118 : (Eq let166 let202) := by timed Eq.symm lean_s117
          have lean_s119 : (Eq let201 let202) := by timed Eq.trans lean_s116 lean_s118
          have lean_s120 : let202 := by timed eqResolve lean_s114 lean_s119
          have lean_s121 : (Eq let166 let201) := by timed Eq.symm lean_s116
          have lean_s122 : let203 := by timed Eq.trans lean_s117 lean_s121
          have lean_s123 : let201 := by timed eqResolve lean_s120 lean_s122
          show False from by timed contradiction lean_s112 lean_s123
  ))))))))
have lean_s111 : (Not (And let149 (And let101 (And let180 let167)))) := by liftOrNToNeg lean_s110
have lean_s112 : let347 := by timed flipNotAnd lean_s111 [let149, let101, let180, let167]
have lean_s113 : let333 := by timed rfl
let lean_s114 := by timed congr lean_s113 lean_s37
let lean_s115 := by timed congr lean_s113 lean_s13
let lean_s116 := by timed congr lean_s113 lean_s104
have lean_s117 : let229 := by timed rfl
let lean_s118 := by timed flipCongrArg lean_s117 [Eq]
have lean_s119 : (Eq let290 let229) := by timed congr lean_s118 lean_r75
have lean_s120 : (Eq let290 True) := by timed Eq.trans lean_s119 lean_r89
have lean_s121 : (Eq let206 True) := by timed Eq.trans lean_r122 lean_s120
have lean_s122 : let206 := by timed trueElim lean_s121
let lean_s123 := by timed congr lean_s116 lean_s122
let lean_s124 := by timed congr lean_s115 lean_s123
have lean_s125 : (Eq let347 let346) := by timed congr lean_s114 lean_s124
have lean_s126 : let346 := by timed eqResolve lean_s112 lean_s125
have lean_s127 : (Or let182 (Or let329 let334)) :=
  (scope (fun lean_a184 : let181 =>
    (scope (fun lean_a185 : let328 =>
      (scope (fun lean_a186 : let221 =>
        have lean_s127 : let221 := by timed eqResolve lean_a161 lean_r124
        have lean_s128 : let334 :=
          (scope (fun lean_a186 : let221 =>
            have lean_s128 : let220 := by timed trueElim lean_r86
            have lean_s129 : let221 := by timed eqResolve lean_a161 lean_r124
            have lean_s130 : let345 := by timed And.intro lean_s128 lean_s129
            have lean_s131 : (Implies let345 let344) := by arithMulNeg [let164, let6, let96], 3
            have lean_s132 : let344 := by timed modusPonens lean_s130 lean_s131
            have lean_s133 : let179 := by timed trueElim lean_r57
            have lean_s134 : let343 := by timed And.intro lean_s133 lean_a185
            have lean_s135 : (Implies let343 let342) := by arithMulNeg [let2, let15, let141], 3
            have lean_s136 : let342 := by timed modusPonens lean_s134 lean_s135
            have lean_s137 : let218 := by timed trueElim lean_r84
            have lean_s138 : let341 := by timed Eq.symm lean_r74
            have lean_s139 : let204 := by timed eqResolve lean_a184 lean_s138
            have lean_s140 : let339 := by intTightUb lean_s139
            have lean_s141 : let340 := by timed And.intro lean_s137 lean_s140
            have lean_s142 : (Implies let340 let338) := by arithMulPos [xx5f0, let6, let153], 1
            have lean_s143 : let338 := by timed modusPonens lean_s141 lean_s142
            have lean_s144 : let337 := by sumBounds [lean_s132, lean_s136, lean_s143]
            let lean_s145 := by timed congrHAdd lean_r67 lean_r46
            have lean_s146 : (Eq let336 let212) := by timed congrHAdd lean_r50 lean_s145
            have lean_s147 : (Eq let336 let36) := by timed Eq.trans lean_s146 lean_r80
            let lean_s148 := by timed flipCongrArg lean_s147 [LE.le]
            let lean_s149 := by timed congrHAdd lean_r134 lean_r45
            have lean_s150 : (Eq let335 let169) := by timed congrHAdd lean_r49 lean_s149
            have lean_s151 : (Eq let335 let141) := by timed Eq.trans lean_s150 lean_r52
            have lean_s152 : (Eq let337 let158) := by timed congr lean_s148 lean_s151
            have lean_s153 : (Eq let337 False) := by timed Eq.trans lean_s152 lean_r48
            show False from by timed eqResolve lean_s144 lean_s153
          ))
        have lean_s129 : let222 := by liftOrNToNeg lean_s128
        have lean_s130 : (Eq let222 let223) := by timed Eq.symm lean_r87
        have lean_s131 : let223 := by timed eqResolve lean_s129 lean_s130
        have lean_s132 : let222 := by timed eqResolve lean_s131 lean_r87
        show False from by timed contradiction lean_s127 lean_s132
  ))))))
have lean_s128 : (Not (And let181 (And let328 let221))) := by liftOrNToNeg lean_s127
have lean_s129 : let332 := by timed flipNotAnd lean_s128 [let181, let328, let221]
have lean_s130 : let333 := by timed rfl
have lean_s131 : let200 := by timed rfl
let lean_s132 := by timed flipCongrArg lean_s131 [Eq]
have lean_s133 : (Eq let208 let200) := by timed congr lean_s132 lean_r58
have lean_s134 : (Eq let208 True) := by timed Eq.trans lean_s133 lean_r72
have lean_s135 : (Eq let183 True) := by timed Eq.trans lean_r77 lean_s134
have lean_s136 : let183 := by timed trueElim lean_s135
let lean_s137 := by timed congr lean_s130 lean_s136
have lean_s138 : (Eq let329 let329) := by timed rfl
let lean_s139 := by timed congr lean_s130 lean_s138
have lean_s140 : (Eq let222 let222) := by timed rfl
let lean_s141 := by timed congr lean_s139 lean_s140
have lean_s142 : (Eq let332 let331) := by timed congr lean_s137 lean_s141
have lean_s143 : let331 := by timed eqResolve lean_s129 lean_s142
have lean_s144 : (Or let222 (Or let329 let180)) := by permutateOr lean_s143, [2, 1, 0], (- 1)
let lean_s145 := by R2 lean_s144, lean_a164, let328, [(- 1), 0]
have lean_s146 : let221 := by timed eqResolve lean_a161 lean_r124
have lean_s147 : let180 := by R2 lean_s145, lean_s146, let221, [(- 1), 0]
let lean_s148 := by R2 lean_s126, lean_s147, let180, [(- 1), 0]
let lean_s149 := by R1 lean_s148, lean_s70, let100, [(- 1), 0]
have lean_s150 : let166 := by R1 lean_s149, lean_s49, let88, [(- 1), 0]
let lean_s151 := by R2 lean_s109, lean_s150, let166, [(- 1), 0]
let lean_s152 := by R2 lean_s151, lean_s147, let180, [(- 1), 0]
have lean_s153 : let91 := by R1 lean_s152, lean_s49, let88, [(- 1), 0]
let lean_s154 := by R2 lean_s90, lean_s153, let91, [(- 1), 0]
let lean_s155 := by R2 lean_s154, lean_s150, let166, [(- 1), 0]
have lean_s156 : let278 := by R1 lean_s155, lean_s49, let88, [(- 1), 0]
let lean_s157 := by R2 lean_s71, lean_s156, let278, [(- 1), 0]
have lean_s158 : (Or let222 (Or let279 (Or let225 (Or let144 False)))) :=
  (scope (fun lean_a186 : let221 =>
    (scope (fun lean_a187 : let278 =>
      (scope (fun lean_a188 : let224 =>
        (scope (fun lean_a189 : let143 =>
          have lean_s158 : let400 := by timed Eq.symm lean_r126
          have lean_s159 : let296 := by timed eqResolve lean_a189 lean_s158
          have lean_s160 : let271 := by intTightUb lean_s159
          have lean_s161 : (Or let273 False) :=
            (scope (fun lean_a188 : let271 =>
              have lean_s161 : let98 := by timed trueElim lean_r29
              have lean_s162 : let399 := by timed And.intro lean_s161 lean_a188
              have lean_s163 : (Implies let399 let398) := by arithMulPos [xx5f0, let15, let19], 1
              have lean_s164 : let398 := by timed modusPonens lean_s162 lean_s163
              have lean_s165 : let249 := by timed trueElim lean_r98
              have lean_s166 : let397 := by timed And.intro lean_s165 lean_a188
              have lean_s167 : (Implies let397 let396) := by arithMulNeg [xx5f2, let13, let79], 3
              have lean_s168 : let396 := by timed modusPonens lean_s166 lean_s167
              have lean_s169 : let395 := by timed And.intro lean_s165 lean_a187
              have lean_s170 : (Implies let395 let394) := by arithMulNeg [xx5f1, let11, let79], 3
              have lean_s171 : let394 := by timed modusPonens lean_s169 lean_s170
              have lean_s172 : let320 := by timed trueElim lean_r150
              have lean_s173 : let221 := by timed eqResolve lean_a161 lean_r124
              have lean_s174 : let393 := by timed And.intro lean_s172 lean_s173
              have lean_s175 : (Implies let393 let392) := by arithMulNeg [let164, let6, let85], 3
              have lean_s176 : let392 := by timed modusPonens lean_s174 lean_s175
              have lean_s177 : let391 := by sumBounds [lean_s164, lean_s168, lean_s171, lean_s176]
              have lean_s178 : (Eq let318 let318) := by timed rfl
              have lean_s179 : (Eq let317 let317) := by timed rfl
              let lean_s180 := by timed congrHAdd lean_s179 lean_r71
              let lean_s181 := by timed congrHAdd lean_s178 lean_s180
              have lean_s182 : (Eq let390 let319) := by timed congrHAdd lean_r90 lean_s181
              have lean_s183 : (Eq let390 let36) := by timed Eq.trans lean_s182 lean_r149
              let lean_s184 := by timed flipCongrArg lean_s183 [LE.le]
              let lean_s185 := by timed congrHAdd lean_r35 lean_r24
              let lean_s186 := by timed congrHAdd lean_r22 lean_s185
              have lean_s187 : (Eq let389 let207) := by timed congrHAdd lean_r38 lean_s186
              have lean_s188 : (Eq let389 let85) := by timed Eq.trans lean_s187 lean_r76
              have lean_s189 : (Eq let391 let316) := by timed congr lean_s184 lean_s188
              have lean_s190 : (Eq let391 False) := by timed Eq.trans lean_s189 lean_r148
              show False from by timed eqResolve lean_s177 lean_s190
            ))
          have lean_s162 : let273 := by liftOrNToNeg lean_s161
          have lean_s163 : (Eq let273 let144) := by timed flipCongrArg lean_r109 [Not]
          have lean_s164 : (Eq let273 let142) := by timed Eq.trans lean_s163 lean_r64
          have lean_s165 : (Eq let274 let142) := by timed Eq.trans lean_r111 lean_s164
          have lean_s166 : (Eq let142 let274) := by timed Eq.symm lean_s165
          have lean_s167 : (Eq let273 let274) := by timed Eq.trans lean_s164 lean_s166
          have lean_s168 : let274 := by timed eqResolve lean_s162 lean_s167
          have lean_s169 : (Eq let142 let273) := by timed Eq.symm lean_s164
          have lean_s170 : let275 := by timed Eq.trans lean_s165 lean_s169
          have lean_s171 : let273 := by timed eqResolve lean_s168 lean_s170
          show False from by timed contradiction lean_s160 lean_s171
  ))))))))
have lean_s159 : (Not (And let221 (And let278 (And let224 let143)))) := by liftOrNToNeg lean_s158
have lean_s160 : let388 := by timed flipNotAnd lean_s159 [let221, let278, let224, let143]
have lean_s161 : let333 := by timed rfl
let lean_s162 := by timed congr lean_s161 lean_s140
let lean_s163 := by timed congr lean_s161 lean_s62
have lean_s164 : (Eq let225 let225) := by timed rfl
let lean_s165 := by timed congr lean_s161 lean_s164
have lean_s166 : let191 := by timed rfl
let lean_s167 := by timed flipCongrArg lean_s166 [Eq]
have lean_s168 : (Eq let145 let191) := by timed congr lean_s167 lean_r64
have lean_s169 : (Eq let145 True) := by timed Eq.trans lean_s168 lean_r65
have lean_s170 : (Eq let146 True) := by timed Eq.trans lean_r41 lean_s169
have lean_s171 : let146 := by timed trueElim lean_s170
let lean_s172 := by timed congr lean_s165 lean_s171
let lean_s173 := by timed congr lean_s163 lean_s172
have lean_s174 : (Eq let388 let387) := by timed congr lean_s162 lean_s173
have lean_s175 : let387 := by timed eqResolve lean_s160 lean_s174
have lean_s176 : (Or let222 (Or let225 (Or let279 let142))) := by permutateOr lean_s175, [0, 2, 1, 3], (- 1)
let lean_s177 := by R2 lean_s176, lean_s146, let221, [(- 1), 0]
have lean_s178 : (Or let92 (Or let247 (Or let226 False))) :=
  (scope (fun lean_a189 : let91 =>
    (scope (fun lean_a190 : let101 =>
      (scope (fun lean_a191 : let225 =>
        have lean_s178 : (Eq let225 let314) := by timed Eq.symm lean_r146
        have lean_s179 : let314 := by timed eqResolve lean_a191 lean_s178
        have lean_s180 : let214 := by intTightUb lean_s179
        have lean_s181 : (Or let215 False) :=
          (scope (fun lean_a190 : let214 =>
            have lean_s181 : let98 := by timed trueElim lean_r29
            have lean_s182 : let386 := by timed And.intro lean_s181 lean_a190
            have lean_s183 : (Implies let386 let385) := by arithMulPos [xx5f2, let11, let19], 1
            have lean_s184 : let385 := by timed modusPonens lean_s182 lean_s183
            have lean_s185 : let312 := by timed trueElim lean_r144
            have lean_s186 : let101 := by timed eqResolve lean_a163 lean_r55
            have lean_s187 : let353 := by timed Eq.symm lean_r31
            have lean_s188 : let102 := by timed eqResolve lean_s186 lean_s187
            have lean_s189 : let383 := by timed And.intro lean_s185 lean_s188
            have lean_s190 : let384 := by arithMulPos [let26, let15, let16], 0
            have lean_s191 : let382 := by timed modusPonens lean_s189 lean_s190
            have lean_s192 : let283 := by timed trueElim lean_r117
            have lean_s193 : let381 := by timed And.intro lean_s192 lean_a189
            have lean_s194 : (Implies let381 let380) := by arithMulNeg [let90, let13, let175], 3
            have lean_s195 : let380 := by timed modusPonens lean_s193 lean_s194
            have lean_s196 : let240 := by sumBounds [lean_s184, lean_s191, lean_s195]
            let lean_s197 := by timed congrHAdd lean_r143 lean_r95
            have lean_s198 : (Eq let237 let178) := by timed congrHAdd lean_r142 lean_s197
            have lean_s199 : (Eq let237 let36) := by timed Eq.trans lean_s198 lean_r56
            let lean_s200 := by timed flipCongrArg lean_s199 [GE.ge]
            let lean_s201 := by timed congrHAdd lean_r81 lean_r136
            have lean_s202 : (Eq let234 let309) := by timed congrHAdd lean_r140 lean_s201
            have lean_s203 : (Eq let234 let254) := by timed Eq.trans lean_s202 lean_r135
            have lean_s204 : (Eq let238 let255) := by timed congr lean_s200 lean_s203
            have lean_s205 : (Eq let238 True) := by timed Eq.trans lean_s204 lean_r101
            have lean_s206 : (Eq let239 let148) := by timed flipCongrArg lean_s205 [Not]
            have lean_s207 : (Eq let239 False) := by timed Eq.trans lean_s206 lean_r43
            have lean_s208 : (Eq let240 False) := by timed Eq.trans lean_r93 lean_s207
            show False from by timed eqResolve lean_s196 lean_s208
          ))
        have lean_s182 : let215 := by liftOrNToNeg lean_s181
        have lean_s183 : (Eq let215 let226) := by timed flipCongrArg lean_r133 [Not]
        have lean_s184 : (Eq let215 let224) := by timed Eq.trans lean_s183 lean_r132
        have lean_s185 : (Eq let216 let224) := by timed Eq.trans lean_r83 lean_s184
        have lean_s186 : (Eq let224 let216) := by timed Eq.symm lean_s185
        have lean_s187 : (Eq let215 let216) := by timed Eq.trans lean_s184 lean_s186
        have lean_s188 : let216 := by timed eqResolve lean_s182 lean_s187
        have lean_s189 : (Eq let224 let215) := by timed Eq.symm lean_s184
        have lean_s190 : let217 := by timed Eq.trans lean_s185 lean_s189
        have lean_s191 : let215 := by timed eqResolve lean_s188 lean_s190
        show False from by timed contradiction lean_s180 lean_s191
  ))))))
have lean_s179 : (Not (And let91 (And let101 let225))) := by liftOrNToNeg lean_s178
have lean_s180 : let379 := by timed flipNotAnd lean_s179 [let91, let101, let225]
have lean_s181 : let333 := by timed rfl
let lean_s182 := by timed congr lean_s181 lean_s79
let lean_s183 := by timed congr lean_s181 lean_s13
have lean_s184 : let305 := by timed rfl
let lean_s185 := by timed flipCongrArg lean_s184 [Eq]
have lean_s186 : (Eq let227 let305) := by timed congr lean_s185 lean_r132
have lean_s187 : (Eq let227 True) := by timed Eq.trans lean_s186 lean_r130
have lean_s188 : (Eq let228 True) := by timed Eq.trans lean_r88 lean_s187
have lean_s189 : let228 := by timed trueElim lean_s188
let lean_s190 := by timed congr lean_s183 lean_s189
have lean_s191 : (Eq let379 let378) := by timed congr lean_s182 lean_s190
have lean_s192 : let378 := by timed eqResolve lean_s180 lean_s191
have lean_s193 : (Or let100 (Or let92 let224)) := by permutateOr lean_s192, [1, 0, 2], (- 1)
let lean_s194 := by R2 lean_s193, lean_s153, let91, [(- 1), 0]
have lean_s195 : let224 := by R1 lean_s194, lean_s70, let100, [(- 1), 0]
let lean_s196 := by R2 lean_s177, lean_s195, let224, [(- 1), 0]
have lean_s197 : let142 := by R2 lean_s196, lean_s156, let278, [(- 1), 0]
have lean_s198 : let186 := by R2 lean_s157, lean_s197, let142, [(- 1), 0]
have lean_s199 : let41 := by R2 lean_s50, lean_s198, let186, [(- 1), 0]
let lean_s200 := by R2 lean_s25, lean_s199, let41, [(- 1), 0]
let lean_s201 := by R2 lean_s200, lean_s197, let142, [(- 1), 0]
have lean_s202 : let4 := by timed eqResolve lean_a165 lean_r63
let lean_s203 := by R1 lean_s201, lean_s202, let3, [(- 1), 0]
exact (show False from by R1 lean_s203, lean_s70, let100, [0, 0])


