open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x7 : Int}
variable {x4 : Int}
variable {x10 : Int}
variable {x13 : Int}
variable {x6 : Int}
variable {x8 : Int}
variable {x3 : Int}
variable {x13 : Int}
variable {x11 : Int}
variable {x8 : Int}
variable {x11 : Int}
variable {x12 : Int}
variable {x6 : Int}
variable {x4 : Int}
variable {x2 : Int}
variable {x0 : Int}
variable {x0 : Int}
variable {x9 : Int}
variable {x5 : Int}
variable {x12 : Int}
variable {x5 : Int}
variable {x3 : Int}
variable {x1 : Int}
variable {x7 : Int}
variable {x14 : Int}
variable {x9 : Int}
variable {x2 : Int}
variable {x14 : Int}
variable {x10 : Int}
variable {x1 : Int}

theorem th0 :
  let let1 := (Int.ofNat 2)
  let let2 := (binrel% HAdd.hAdd x13 x14)
  let let3 := (Neg.neg let1)
  let let4 := (binrel% HMul.hMul let3 x10)
  let let5 := (Int.ofNat 1)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% HMul.hMul let6 x9)
  let let8 := (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let4 let2)))
  let let9 := (binrel% GE.ge let8 let1)
  let let10 := (Not let9)
  let let11 := (binrel% LT.lt let8 let1)
  let let12 := (binrel% HMul.hMul let6 x3)
  let let13 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd let12 x5)))
  let let14 := (binrel% GE.ge let13 let5)
  let let15 := (Not let14)
  let let16 := (binrel% LT.lt let13 let5)
  let let17 := (Rat.ofInt let13)
  let let18 := (Rat.ofInt 1)
  let let19 := (binrel% HMul.hMul let18 let13)
  let let20 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x3 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd x9 x13)))))
  let let21 := (binrel% GE.ge let20 let5)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let20 let5)
  let let24 := (Rat.ofInt 0)
  let let25 := (Neg.neg (Rat.ofInt 2))
  let let26 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let24 let18))))
  let let27 := (binrel% GE.ge let24 let24)
  let let28 := (Int.ofNat 0)
  let let29 := (binrel% LT.lt let25 let28)
  let let30 := (Not True)
  let let31 := (binrel% LE.le let13 let28)
  let let32 := (binrel% LE.le let20 let28)
  let let33 := (binrel% HMul.hMul let6 x8)
  let let34 := (Neg.neg x8)
  let let35 := (binrel% HMul.hMul let3 x13)
  let let36 := (binrel% HMul.hMul let1 x10)
  let let37 := (binrel% HMul.hMul let3 x9)
  let let38 := (binrel% HMul.hMul let3 x8)
  let let39 := (binrel% HMul.hMul let3 x5)
  let let40 := (binrel% HMul.hMul let3 x0)
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 let35)))))
  let let42 := (Rat.ofInt let41)
  let let43 := (binrel% HMul.hMul let6 x10)
  let let44 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let43 x13)))))
  let let45 := (binrel% HMul.hMul let25 let44)
  let let46 := (binrel% HMul.hMul x10 let1)
  let let47 := (Neg.neg x12)
  let let48 := (Neg.neg x1)
  let let49 := (Neg.neg x7)
  let let50 := (Neg.neg x2)
  let let51 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd x13 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd let48 let47)))))))
  let let52 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let50 x5) let49)
  let let53 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let52 x13) x0) x4) let48) let47)
  let let54 := (binrel% HAdd.hAdd x3 x12)
  let let55 := (Neg.neg x9)
  let let56 := (Neg.neg x13)
  let let57 := (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let55 let54)))
  let let58 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let56 x6) let55) x3) x12)
  let let59 := (binrel% HMul.hMul x10 let3)
  let let60 := (binrel% HAdd.hAdd x13 (binrel% HAdd.hAdd x14 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x8 let59))))
  let let61 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let55) x8) let59)
  let let62 := (binrel% HMul.hMul let6 x12)
  let let63 := (binrel% HMul.hMul let6 x7)
  let let64 := (binrel% HMul.hMul let6 x2)
  let let65 := (binrel% HMul.hMul let6 x1)
  let let66 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let62 x13)))))))
  let let67 := (binrel% GE.ge let66 let28)
  let let68 := (binrel% LE.le let28 let66)
  let let69 := (binrel% HMul.hMul let6 x14)
  let let70 := (Rat.ofInt (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd (binrel% HMul.hMul let1 x9) let69)))
  let let71 := (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd let37 x14))
  let let72 := (Neg.neg let18)
  let let73 := (binrel% HMul.hMul let72 let71)
  let let74 := (binrel% HMul.hMul x5 let3)
  let let75 := (Rat.ofInt let20)
  let let76 := (binrel% HMul.hMul let18 let20)
  let let77 := (binrel% HMul.hMul x0 let3)
  let let78 := (Not let15)
  let let79 := (Eq let78 let14)
  let let80 := (binrel% HAdd.hAdd x14 (binrel% HAdd.hAdd x2 let37))
  let let81 := (Eq let21 let21)
  let let82 := (binrel% HMul.hMul x9 let3)
  let let83 := (Not let22)
  let let84 := (Eq let21 let83)
  let let85 := (Eq let83 let21)
  let let86 := (Eq let14 let78)
  let let87 := (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x13 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd let65 let62)))))))
  let let88 := (binrel% HAdd.hAdd x14 (binrel% HAdd.hAdd x2 let82))
  let let89 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd x14 x2) let82)
  let let90 := (binrel% HMul.hMul let6 x13)
  let let91 := (binrel% HAdd.hAdd x12 let90)
  let let92 := (binrel% HMul.hMul let6 x11)
  let let93 := (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let92 let91))))
  let let94 := (Not (binrel% GE.ge let93 let28))
  let let95 := (binrel% LE.le let93 let6)
  let let96 := (binrel% HMul.hMul let72 let28)
  let let97 := (Not let10)
  let let98 := (Eq let97 let9)
  let let99 := (binrel% GT.gt let18 let28)
  let let100 := (Neg.neg x10)
  let let101 := (binrel% HAdd.hAdd x13 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x8 x3)))))
  let let102 := (Neg.neg x11)
  let let103 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let34 x12)))))
  let let104 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x6 x2) let56) let102) let34) x12)
  let let105 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd let33 x12)))))
  let let106 := (Neg.neg x3)
  let let107 := (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x0 let106)))
  let let108 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x2 x5) x0) let106)
  let let109 := (Not let32)
  let let110 := (binrel% GT.gt let20 let28)
  let let111 := (Eq let110 let109)
  let let112 := (binrel% HAdd.hAdd x3 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let7 let91)))
  let let113 := (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let7 let54)))
  let let114 := (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x0 let12)))
  let let115 := (binrel% HAdd.hAdd x13 (binrel% HAdd.hAdd x14 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x8 let4))))
  let let116 := (Rat.ofInt let8)
  let let117 := (binrel% HMul.hMul let18 let8)
  let let118 := (binrel% HMul.hMul x8 let3)
  let let119 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x13 x5) x9) x0) x8) x3)
  let let120 := (binrel% HMul.hMul let18 let28)
  let let121 := (binrel% HAdd.hAdd x14 (binrel% HAdd.hAdd x8 x12))
  let let122 := (Neg.neg x0)
  let let123 := (binrel% HAdd.hAdd let122 let121)
  let let124 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let122 x14) x8) x12)
  let let125 := (binrel% GE.ge let71 let28)
  let let126 := (binrel% LE.le let28 let71)
  let let127 := (binrel% GE.ge (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x4) (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x10 let92))))) let5)
  let let128 := (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd let43 x11)))))
  let let129 := (binrel% LE.le let128 let6)
  let let130 := (binrel% LE.le let8 let5)
  let let131 := (binrel% LE.le let28 let89)
  let let132 := (binrel% LE.le let104 let6)
  let let133 := (binrel% LE.le let61 let5)
  let let134 := (binrel% LE.le let28 let53)
  let let135 := (binrel% LE.le let119 let28)
  let let136 := (binrel% LE.le let108 let28)
  let let137 := (binrel% LE.le let124 let28)
  let let138 := (binrel% HAdd.hAdd let52 x10)
  let let139 := (binrel% LE.le let138 let28)
  let let140 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x11 x7) x8) let100) x4) let48)
  let let141 := (binrel% LE.le let140 let6)
  let let142 := (binrel% LE.le let5 let58)
  let let143 := (binrel% HMul.hMul x13 let3)
  let let144 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let118 let46))) let82) let74)
  let let145 := (binrel% GE.ge let144 let28)
  let let146 := (Not let145)
  let let147 := (And let146 (And let142 (And let141 (And let139 (And let137 (And let136 (And let135 (And let134 (And let133 (And let132 let131))))))))))
  let let148 := (And let146 (And (And (And (And (And (And (And (And (And let142 let141) let139) let137) let136) let135) let134) let133) let132) let131))
  let let149 := (binrel% HMul.hMul let6 x0)
  let let150 := (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd x12 x14)))
  let let151 := (binrel% HAdd.hAdd let149 let121)
  let let152 := (binrel% GE.ge (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x5) (binrel% HAdd.hAdd x7 let43))) let28)
  let let153 := (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd let63 x10)))
  let let154 := (binrel% LE.le let153 let28)
  let let155 := (binrel% GE.ge let44 let5)
  let let156 := (Not let155)
  let let157 := (binrel% GE.ge let41 let28)
  let let158 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd let49 x10)))
  let let159 := (binrel% HAdd.hAdd x11 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd x4 let48)))))
  let let160 := (binrel% LT.lt let72 let28)
  let let161 := (binrel% GE.ge let112 let5)
  let let162 := (binrel% LE.le let5 let112)
  let let163 := (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let62 let69))) let28)
  let let164 := (binrel% LE.le let150 let28)
  let let165 := (Not let156)
  let let166 := (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let70 let17))))
  let let167 := (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let37 let39)))))
  let let168 := (binrel% HMul.hMul let18 let5)
  let let169 := (binrel% HMul.hMul let25 let5)
  let let170 := (binrel% HAdd.hAdd let120 (binrel% HAdd.hAdd let168 (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let96 let168))))
  let let171 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let73 let19))))
  let let172 := (binrel% GE.ge let171 let170)
  let let173 := (Not let172)
  let let174 := (binrel% LT.lt let171 let170)
  let let175 := (binrel% HAdd.hAdd x11 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x4 let65)))))
  let let176 := (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let82 let74)))))
  let let177 := (Eq let9 let9)
  let let178 := (Eq let9 let97)
  let let179 := (Eq let14 let14)
  let let180 := (And let155 (And let161 (And let127 (And let152 (And let163 (And let15 (And let22 (And let67 (And let10 (And let94 let125))))))))))
  let let181 := (Not let125)
  let let182 := (Or let14 (Or let181 (Or let156 (Or let9 let21))))
  let let183 := (Or let78 (Or let181 (Or let156 (Or let97 let83))))
  let let184 := (binrel% LT.lt let19 let168)
  let let185 := (And let99 let16)
  let let186 := (binrel% LE.le let73 let96)
  let let187 := (And let160 let125)
  let let188 := (binrel% LE.le let45 let169)
  let let189 := (And let29 let155)
  let let190 := (binrel% LE.le let117 let168)
  let let191 := (And let99 let130)
  let let192 := (binrel% LE.le let76 let120)
  let let193 := (And let99 let32)
(Eq let11 let10) → (Eq let16 let15) → (Eq let19 let17) → (Eq let23 let22) → (Eq let26 let24) → (Eq let27 True) → (Eq let29 True) → (Eq let30 False) → (Eq let31 let15) → (Eq let32 let22) → (Eq let34 let33) → (Eq let45 let42) → (Eq let46 let36) → (Eq let53 let51) → (Eq let58 let57) → (Eq let61 let60) → (Eq let55 let7) → (Eq let47 let62) → (Eq let68 let67) → (Eq let73 let70) → (Eq let74 let39) → (Eq let76 let75) → (Eq let49 let63) → (Eq let77 let40) → let79 → (Eq let80 let71) → (Eq let81 True) → (Eq let82 let37) → (Eq let85 let84) → (Eq let79 let86) → (Eq let87 let66) → (Eq let89 let88) → (Eq let95 let94) → (Eq let96 let24) → let98 → (Eq let99 True) → (Eq let100 let43) → (Eq let101 let20) → (Eq let104 let103) → (Eq let50 let64) → (Eq let105 let93) → (Eq let108 let107) → let111 → (Eq let48 let65) → (Eq let113 let112) → (Eq let114 let13) → (Eq let106 let12) → (Eq let115 let8) → (Eq let102 let92) → (Eq let117 let116) → (Eq let118 let38) → (Eq let119 let101) → (Eq let120 let24) → (Eq let124 let123) → (Eq let126 let125) → (Eq let129 let127) → (Eq let130 let10) → (Eq let148 let147) → (Eq let151 let150) → (Eq let154 let152) → (Eq let157 let156) → (Eq let138 let158) → (Eq let56 let90) → (Eq let140 let159) → (Eq let160 True) → (Eq let162 let161) → (Eq let164 let163) → (Eq let165 let155) → (Eq let166 let24) → (Eq let167 let41) → (Eq let174 let173) → (Eq let143 let35) → (Eq let175 let128) → (Eq let144 let176) → (Eq let59 let4) → let85 → (Eq let168 let18) → (Eq let177 True) → (Eq let169 let25) → (Eq let122 let149) → (Eq let98 let178) → (Eq let179 True) → let148 → False :=
  let let1 := (Int.ofNat 2)
  let let2 := (binrel% HAdd.hAdd x13 x14)
  let let3 := (Neg.neg let1)
  let let4 := (binrel% HMul.hMul let3 x10)
  let let5 := (Int.ofNat 1)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% HMul.hMul let6 x9)
  let let8 := (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let4 let2)))
  let let9 := (binrel% GE.ge let8 let1)
  let let10 := (Not let9)
  let let11 := (binrel% LT.lt let8 let1)
  let let12 := (binrel% HMul.hMul let6 x3)
  let let13 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd let12 x5)))
  let let14 := (binrel% GE.ge let13 let5)
  let let15 := (Not let14)
  let let16 := (binrel% LT.lt let13 let5)
  let let17 := (Rat.ofInt let13)
  let let18 := (Rat.ofInt 1)
  let let19 := (binrel% HMul.hMul let18 let13)
  let let20 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x3 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd x9 x13)))))
  let let21 := (binrel% GE.ge let20 let5)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let20 let5)
  let let24 := (Rat.ofInt 0)
  let let25 := (Neg.neg (Rat.ofInt 2))
  let let26 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let24 let18))))
  let let27 := (binrel% GE.ge let24 let24)
  let let28 := (Int.ofNat 0)
  let let29 := (binrel% LT.lt let25 let28)
  let let30 := (Not True)
  let let31 := (binrel% LE.le let13 let28)
  let let32 := (binrel% LE.le let20 let28)
  let let33 := (binrel% HMul.hMul let6 x8)
  let let34 := (Neg.neg x8)
  let let35 := (binrel% HMul.hMul let3 x13)
  let let36 := (binrel% HMul.hMul let1 x10)
  let let37 := (binrel% HMul.hMul let3 x9)
  let let38 := (binrel% HMul.hMul let3 x8)
  let let39 := (binrel% HMul.hMul let3 x5)
  let let40 := (binrel% HMul.hMul let3 x0)
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 let35)))))
  let let42 := (Rat.ofInt let41)
  let let43 := (binrel% HMul.hMul let6 x10)
  let let44 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let43 x13)))))
  let let45 := (binrel% HMul.hMul let25 let44)
  let let46 := (binrel% HMul.hMul x10 let1)
  let let47 := (Neg.neg x12)
  let let48 := (Neg.neg x1)
  let let49 := (Neg.neg x7)
  let let50 := (Neg.neg x2)
  let let51 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd x13 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd let48 let47)))))))
  let let52 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let50 x5) let49)
  let let53 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let52 x13) x0) x4) let48) let47)
  let let54 := (binrel% HAdd.hAdd x3 x12)
  let let55 := (Neg.neg x9)
  let let56 := (Neg.neg x13)
  let let57 := (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let55 let54)))
  let let58 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let56 x6) let55) x3) x12)
  let let59 := (binrel% HMul.hMul x10 let3)
  let let60 := (binrel% HAdd.hAdd x13 (binrel% HAdd.hAdd x14 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x8 let59))))
  let let61 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let55) x8) let59)
  let let62 := (binrel% HMul.hMul let6 x12)
  let let63 := (binrel% HMul.hMul let6 x7)
  let let64 := (binrel% HMul.hMul let6 x2)
  let let65 := (binrel% HMul.hMul let6 x1)
  let let66 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let62 x13)))))))
  let let67 := (binrel% GE.ge let66 let28)
  let let68 := (binrel% LE.le let28 let66)
  let let69 := (binrel% HMul.hMul let6 x14)
  let let70 := (Rat.ofInt (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd (binrel% HMul.hMul let1 x9) let69)))
  let let71 := (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd let37 x14))
  let let72 := (Neg.neg let18)
  let let73 := (binrel% HMul.hMul let72 let71)
  let let74 := (binrel% HMul.hMul x5 let3)
  let let75 := (Rat.ofInt let20)
  let let76 := (binrel% HMul.hMul let18 let20)
  let let77 := (binrel% HMul.hMul x0 let3)
  let let78 := (Not let15)
  let let79 := (Eq let78 let14)
  let let80 := (binrel% HAdd.hAdd x14 (binrel% HAdd.hAdd x2 let37))
  let let81 := (Eq let21 let21)
  let let82 := (binrel% HMul.hMul x9 let3)
  let let83 := (Not let22)
  let let84 := (Eq let21 let83)
  let let85 := (Eq let83 let21)
  let let86 := (Eq let14 let78)
  let let87 := (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x13 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd let65 let62)))))))
  let let88 := (binrel% HAdd.hAdd x14 (binrel% HAdd.hAdd x2 let82))
  let let89 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd x14 x2) let82)
  let let90 := (binrel% HMul.hMul let6 x13)
  let let91 := (binrel% HAdd.hAdd x12 let90)
  let let92 := (binrel% HMul.hMul let6 x11)
  let let93 := (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let92 let91))))
  let let94 := (Not (binrel% GE.ge let93 let28))
  let let95 := (binrel% LE.le let93 let6)
  let let96 := (binrel% HMul.hMul let72 let28)
  let let97 := (Not let10)
  let let98 := (Eq let97 let9)
  let let99 := (binrel% GT.gt let18 let28)
  let let100 := (Neg.neg x10)
  let let101 := (binrel% HAdd.hAdd x13 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x8 x3)))))
  let let102 := (Neg.neg x11)
  let let103 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let34 x12)))))
  let let104 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x6 x2) let56) let102) let34) x12)
  let let105 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd let33 x12)))))
  let let106 := (Neg.neg x3)
  let let107 := (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x0 let106)))
  let let108 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x2 x5) x0) let106)
  let let109 := (Not let32)
  let let110 := (binrel% GT.gt let20 let28)
  let let111 := (Eq let110 let109)
  let let112 := (binrel% HAdd.hAdd x3 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let7 let91)))
  let let113 := (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let7 let54)))
  let let114 := (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x0 let12)))
  let let115 := (binrel% HAdd.hAdd x13 (binrel% HAdd.hAdd x14 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x8 let4))))
  let let116 := (Rat.ofInt let8)
  let let117 := (binrel% HMul.hMul let18 let8)
  let let118 := (binrel% HMul.hMul x8 let3)
  let let119 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x13 x5) x9) x0) x8) x3)
  let let120 := (binrel% HMul.hMul let18 let28)
  let let121 := (binrel% HAdd.hAdd x14 (binrel% HAdd.hAdd x8 x12))
  let let122 := (Neg.neg x0)
  let let123 := (binrel% HAdd.hAdd let122 let121)
  let let124 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let122 x14) x8) x12)
  let let125 := (binrel% GE.ge let71 let28)
  let let126 := (binrel% LE.le let28 let71)
  let let127 := (binrel% GE.ge (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x4) (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x10 let92))))) let5)
  let let128 := (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd let43 x11)))))
  let let129 := (binrel% LE.le let128 let6)
  let let130 := (binrel% LE.le let8 let5)
  let let131 := (binrel% LE.le let28 let89)
  let let132 := (binrel% LE.le let104 let6)
  let let133 := (binrel% LE.le let61 let5)
  let let134 := (binrel% LE.le let28 let53)
  let let135 := (binrel% LE.le let119 let28)
  let let136 := (binrel% LE.le let108 let28)
  let let137 := (binrel% LE.le let124 let28)
  let let138 := (binrel% HAdd.hAdd let52 x10)
  let let139 := (binrel% LE.le let138 let28)
  let let140 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x11 x7) x8) let100) x4) let48)
  let let141 := (binrel% LE.le let140 let6)
  let let142 := (binrel% LE.le let5 let58)
  let let143 := (binrel% HMul.hMul x13 let3)
  let let144 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let118 let46))) let82) let74)
  let let145 := (binrel% GE.ge let144 let28)
  let let146 := (Not let145)
  let let147 := (And let146 (And let142 (And let141 (And let139 (And let137 (And let136 (And let135 (And let134 (And let133 (And let132 let131))))))))))
  let let148 := (And let146 (And (And (And (And (And (And (And (And (And let142 let141) let139) let137) let136) let135) let134) let133) let132) let131))
  let let149 := (binrel% HMul.hMul let6 x0)
  let let150 := (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd x12 x14)))
  let let151 := (binrel% HAdd.hAdd let149 let121)
  let let152 := (binrel% GE.ge (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x5) (binrel% HAdd.hAdd x7 let43))) let28)
  let let153 := (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd let63 x10)))
  let let154 := (binrel% LE.le let153 let28)
  let let155 := (binrel% GE.ge let44 let5)
  let let156 := (Not let155)
  let let157 := (binrel% GE.ge let41 let28)
  let let158 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd let49 x10)))
  let let159 := (binrel% HAdd.hAdd x11 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd x4 let48)))))
  let let160 := (binrel% LT.lt let72 let28)
  let let161 := (binrel% GE.ge let112 let5)
  let let162 := (binrel% LE.le let5 let112)
  let let163 := (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let62 let69))) let28)
  let let164 := (binrel% LE.le let150 let28)
  let let165 := (Not let156)
  let let166 := (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let70 let17))))
  let let167 := (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let37 let39)))))
  let let168 := (binrel% HMul.hMul let18 let5)
  let let169 := (binrel% HMul.hMul let25 let5)
  let let170 := (binrel% HAdd.hAdd let120 (binrel% HAdd.hAdd let168 (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let96 let168))))
  let let171 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let73 let19))))
  let let172 := (binrel% GE.ge let171 let170)
  let let173 := (Not let172)
  let let174 := (binrel% LT.lt let171 let170)
  let let175 := (binrel% HAdd.hAdd x11 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x4 let65)))))
  let let176 := (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let82 let74)))))
  let let177 := (Eq let9 let9)
  let let178 := (Eq let9 let97)
  let let179 := (Eq let14 let14)
  let let180 := (And let155 (And let161 (And let127 (And let152 (And let163 (And let15 (And let22 (And let67 (And let10 (And let94 let125))))))))))
  let let181 := (Not let125)
  let let182 := (Or let14 (Or let181 (Or let156 (Or let9 let21))))
  let let183 := (Or let78 (Or let181 (Or let156 (Or let97 let83))))
  let let184 := (binrel% LT.lt let19 let168)
  let let185 := (And let99 let16)
  let let186 := (binrel% LE.le let73 let96)
  let let187 := (And let160 let125)
  let let188 := (binrel% LE.le let45 let169)
  let let189 := (And let29 let155)
  let let190 := (binrel% LE.le let117 let168)
  let let191 := (And let99 let130)
  let let192 := (binrel% LE.le let76 let120)
  let let193 := (And let99 let32)
fun lean_r0 : (Eq let11 let10) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let16 let15) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let19 let17) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let26 let24) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let27 True) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let29 True) => -- EVALUATE
fun lean_r7 : (Eq let30 False) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let31 let15) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let32 let22) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let45 let42) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let46 let36) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let53 let51) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let58 let57) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let61 let60) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let55 let7) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let47 let62) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let68 let67) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let73 let70) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let74 let39) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let76 let75) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let49 let63) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let77 let40) => -- THEORY_REWRITE_ARITH
fun lean_r24 : let79 => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let80 let71) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let81 True) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let82 let37) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let85 let84) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let79 let86) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let87 let66) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let89 let88) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let95 let94) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let96 let24) => -- THEORY_REWRITE_ARITH
fun lean_r34 : let98 => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let99 True) => -- EVALUATE
fun lean_r36 : (Eq let100 let43) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let101 let20) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let104 let103) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let50 let64) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let105 let93) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let108 let107) => -- THEORY_REWRITE_ARITH
fun lean_r42 : let111 => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let48 let65) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let113 let112) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let114 let13) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let106 let12) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let115 let8) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let102 let92) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let117 let116) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let118 let38) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let119 let101) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let120 let24) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let124 let123) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let126 let125) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let129 let127) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let130 let10) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let148 let147) => -- THEORY_REWRITE_BOOL
fun lean_r58 : (Eq let151 let150) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let154 let152) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let157 let156) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let138 let158) => -- THEORY_REWRITE_ARITH
fun lean_r62 : (Eq let56 let90) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let140 let159) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq let160 True) => -- EVALUATE
fun lean_r65 : (Eq let162 let161) => -- THEORY_REWRITE_ARITH
fun lean_r66 : (Eq let164 let163) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq let165 let155) => -- THEORY_REWRITE_BOOL
fun lean_r68 : (Eq let166 let24) => -- THEORY_REWRITE_ARITH
fun lean_r69 : (Eq let167 let41) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq let174 let173) => -- THEORY_REWRITE_ARITH
fun lean_r71 : (Eq let143 let35) => -- THEORY_REWRITE_ARITH
fun lean_r72 : (Eq let175 let128) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let144 let176) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let59 let4) => -- THEORY_REWRITE_ARITH
fun lean_r75 : let85 => -- THEORY_REWRITE_BOOL
fun lean_r76 : (Eq let168 let18) => -- THEORY_REWRITE_ARITH
fun lean_r77 : (Eq let177 True) => -- THEORY_REWRITE_BOOL
fun lean_r78 : (Eq let169 let25) => -- THEORY_REWRITE_ARITH
fun lean_r79 : (Eq let122 let149) => -- THEORY_REWRITE_ARITH
fun lean_r80 : (Eq let98 let178) => -- THEORY_REWRITE_BOOL
fun lean_r81 : (Eq let179 True) => -- THEORY_REWRITE_BOOL
fun lean_a82 : let148 => by
have lean_s0 : (Or let78 (Or let181 (Or let156 (Or let97 (Or let83 False))))) :=
  (scope (fun lean_a83 : let15 =>
    (scope (fun lean_a84 : let125 =>
      (scope (fun lean_a85 : let155 =>
        (scope (fun lean_a86 : let10 =>
          (scope (fun lean_a87 : let22 =>
            have lean_s0 : (Eq let22 let23) := by timed Eq.symm lean_r3
            have lean_s1 : let23 := by timed eqResolve lean_a87 lean_s0
            have lean_s2 : let32 := by intTightUb lean_s1
            have lean_s3 : (Or let109 False) :=
              (scope (fun lean_a88 : let32 =>
                have lean_s3 : let99 := by timed trueElim lean_r35
                have lean_s4 : let193 := by timed And.intro lean_s3 lean_a88
                have lean_s5 : (Implies let193 let192) := by arithMulPos [let20, let28, let18], 1
                have lean_s6 : let192 := by timed modusPonens lean_s4 lean_s5
                have lean_s7 : (Eq let10 let11) := by timed Eq.symm lean_r0
                have lean_s8 : let11 := by timed eqResolve lean_a86 lean_s7
                have lean_s9 : let130 := by intTightUb lean_s8
                have lean_s10 : let191 := by timed And.intro lean_s3 lean_s9
                have lean_s11 : (Implies let191 let190) := by arithMulPos [let8, let5, let18], 1
                have lean_s12 : let190 := by timed modusPonens lean_s10 lean_s11
                have lean_s13 : let29 := by timed trueElim lean_r6
                have lean_s14 : let189 := by timed And.intro lean_s13 lean_a85
                have lean_s15 : (Implies let189 let188) := by arithMulNeg [let44, let5, let25], 3
                have lean_s16 : let188 := by timed modusPonens lean_s14 lean_s15
                have lean_s17 : let160 := by timed trueElim lean_r64
                have lean_s18 : let187 := by timed And.intro lean_s17 lean_a84
                have lean_s19 : (Implies let187 let186) := by arithMulNeg [let71, let28, let72], 3
                have lean_s20 : let186 := by timed modusPonens lean_s18 lean_s19
                have lean_s21 : (Eq let15 let16) := by timed Eq.symm lean_r1
                have lean_s22 : let16 := by timed eqResolve lean_a83 lean_s21
                have lean_s23 : let185 := by timed And.intro lean_s3 lean_s22
                have lean_s24 : (Implies let185 let184) := by arithMulPos [let13, let5, let18], 0
                have lean_s25 : let184 := by timed modusPonens lean_s23 lean_s24
                have lean_s26 : let174 := by sumBounds [lean_s6, lean_s12, lean_s16, lean_s20, lean_s25]
                let lean_s27 := by timed congrHAdd lean_r19 lean_r2
                let lean_s28 := by timed congrHAdd lean_r11 lean_s27
                let lean_s29 := by timed congrHAdd lean_r49 lean_s28
                have lean_s30 : (Eq let171 let166) := by timed congrHAdd lean_r21 lean_s29
                have lean_s31 : (Eq let171 let24) := by timed Eq.trans lean_s30 lean_r68
                let lean_s32 := by timed flipCongrArg lean_s31 [GE.ge]
                let lean_s33 := by timed congrHAdd lean_r33 lean_r76
                let lean_s34 := by timed congrHAdd lean_r78 lean_s33
                let lean_s35 := by timed congrHAdd lean_r76 lean_s34
                have lean_s36 : (Eq let170 let26) := by timed congrHAdd lean_r52 lean_s35
                have lean_s37 : (Eq let170 let24) := by timed Eq.trans lean_s36 lean_r4
                have lean_s38 : (Eq let172 let27) := by timed congr lean_s32 lean_s37
                have lean_s39 : (Eq let172 True) := by timed Eq.trans lean_s38 lean_r5
                have lean_s40 : (Eq let173 let30) := by timed flipCongrArg lean_s39 [Not]
                have lean_s41 : (Eq let173 False) := by timed Eq.trans lean_s40 lean_r7
                have lean_s42 : (Eq let174 False) := by timed Eq.trans lean_r70 lean_s41
                show False from by timed eqResolve lean_s26 lean_s42
              ))
            have lean_s4 : let109 := by liftOrNToNeg lean_s3
            have lean_s5 : (Eq let109 let83) := by timed flipCongrArg lean_r9 [Not]
            have lean_s6 : (Eq let109 let21) := by timed Eq.trans lean_s5 lean_r75
            have lean_s7 : (Eq let110 let21) := by timed Eq.trans lean_r42 lean_s6
            have lean_s8 : (Eq let21 let110) := by timed Eq.symm lean_s7
            have lean_s9 : (Eq let109 let110) := by timed Eq.trans lean_s6 lean_s8
            have lean_s10 : let110 := by timed eqResolve lean_s4 lean_s9
            have lean_s11 : (Eq let21 let109) := by timed Eq.symm lean_s6
            have lean_s12 : let111 := by timed Eq.trans lean_s7 lean_s11
            have lean_s13 : let109 := by timed eqResolve lean_s10 lean_s12
            show False from by timed contradiction lean_s2 lean_s13
  ))))))))))
have lean_s1 : (Not (And let15 (And let125 (And let155 (And let10 let22))))) := by liftOrNToNeg lean_s0
have lean_s2 : let183 := by timed flipNotAnd lean_s1 [let15, let125, let155, let10, let22]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let179 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let86 let179) := by timed congr lean_s5 lean_r24
have lean_s7 : (Eq let86 True) := by timed Eq.trans lean_s6 lean_r81
have lean_s8 : (Eq let79 True) := by timed Eq.trans lean_r29 lean_s7
have lean_s9 : let79 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq let181 let181) := by timed rfl
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq let156 let156) := by timed rfl
let lean_s14 := by timed congr lean_s3 lean_s13
have lean_s15 : let177 := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [Eq]
have lean_s17 : (Eq let178 let177) := by timed congr lean_s16 lean_r34
have lean_s18 : (Eq let178 True) := by timed Eq.trans lean_s17 lean_r77
have lean_s19 : (Eq let98 True) := by timed Eq.trans lean_r80 lean_s18
have lean_s20 : let98 := by timed trueElim lean_s19
let lean_s21 := by timed congr lean_s3 lean_s20
have lean_s22 : let81 := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [Eq]
have lean_s24 : (Eq let84 let81) := by timed congr lean_s23 lean_r75
have lean_s25 : (Eq let84 True) := by timed Eq.trans lean_s24 lean_r26
have lean_s26 : (Eq let85 True) := by timed Eq.trans lean_r28 lean_s25
have lean_s27 : let85 := by timed trueElim lean_s26
let lean_s28 := by timed congr lean_s21 lean_s27
let lean_s29 := by timed congr lean_s14 lean_s28
let lean_s30 := by timed congr lean_s12 lean_s29
have lean_s31 : (Eq let183 let182) := by timed congr lean_s10 lean_s30
have lean_s32 : let182 := by timed eqResolve lean_s2 lean_s31
have lean_s33 : (Or let156 (Or let14 (Or let21 (Or let9 let181)))) := by permutateOr lean_s32, [2, 0, 4, 3, 1], (- 1)
have lean_s34 : (Eq And And) := by timed rfl
let lean_s35 := by timed congrHAdd lean_r27 lean_r20
let lean_s36 := by timed congrHAdd lean_r12 lean_s35
let lean_s37 := by timed congrHAdd lean_r50 lean_s36
let lean_s38 := by timed congrHAdd lean_r23 lean_s37
have lean_s39 : (Eq let176 let167) := by timed congrHAdd lean_r71 lean_s38
have lean_s40 : (Eq let176 let41) := by timed Eq.trans lean_s39 lean_r69
have lean_s41 : (Eq let144 let41) := by timed Eq.trans lean_r73 lean_s40
let lean_s42 := by timed flipCongrArg lean_s41 [GE.ge]
have lean_s43 : (Eq let28 let28) := by timed rfl
have lean_s44 : (Eq let145 let157) := by timed congr lean_s42 lean_s43
have lean_s45 : (Eq let145 let156) := by timed Eq.trans lean_s44 lean_r60
have lean_s46 : (Eq let146 let165) := by timed flipCongrArg lean_s45 [Not]
have lean_s47 : (Eq let146 let155) := by timed Eq.trans lean_s46 lean_r67
let lean_s48 := by timed congr lean_s34 lean_s47
have lean_s49 : (Eq let5 let5) := by timed rfl
let lean_s50 := by timed flipCongrArg lean_s49 [LE.le]
have lean_s51 : (Eq x6 x6) := by timed rfl
have lean_s52 : (Eq x3 x3) := by timed rfl
have lean_s53 : (Eq x12 x12) := by timed rfl
let lean_s54 := by timed congrHAdd lean_s52 lean_s53
let lean_s55 := by timed congrHAdd lean_r16 lean_s54
let lean_s56 := by timed congrHAdd lean_s51 lean_s55
have lean_s57 : (Eq let57 let113) := by timed congrHAdd lean_r62 lean_s56
have lean_s58 : (Eq let57 let112) := by timed Eq.trans lean_s57 lean_r44
have lean_s59 : (Eq let58 let112) := by timed Eq.trans lean_r14 lean_s58
have lean_s60 : (Eq let142 let162) := by timed congr lean_s50 lean_s59
have lean_s61 : (Eq let142 let161) := by timed Eq.trans lean_s60 lean_r65
let lean_s62 := by timed congr lean_s34 lean_s61
have lean_s63 : (Eq x11 x11) := by timed rfl
have lean_s64 : (Eq x7 x7) := by timed rfl
have lean_s65 : (Eq x8 x8) := by timed rfl
have lean_s66 : (Eq x4 x4) := by timed rfl
let lean_s67 := by timed congrHAdd lean_s66 lean_r43
let lean_s68 := by timed congrHAdd lean_r36 lean_s67
let lean_s69 := by timed congrHAdd lean_s65 lean_s68
let lean_s70 := by timed congrHAdd lean_s64 lean_s69
have lean_s71 : (Eq let159 let175) := by timed congrHAdd lean_s63 lean_s70
have lean_s72 : (Eq let159 let128) := by timed Eq.trans lean_s71 lean_r72
have lean_s73 : (Eq let140 let128) := by timed Eq.trans lean_r63 lean_s72
let lean_s74 := by timed flipCongrArg lean_s73 [LE.le]
have lean_s75 : (Eq let6 let6) := by timed rfl
have lean_s76 : (Eq let141 let129) := by timed congr lean_s74 lean_s75
have lean_s77 : (Eq let141 let127) := by timed Eq.trans lean_s76 lean_r55
let lean_s78 := by timed congr lean_s34 lean_s77
have lean_s79 : (Eq x5 x5) := by timed rfl
have lean_s80 : (Eq x10 x10) := by timed rfl
let lean_s81 := by timed congrHAdd lean_r22 lean_s80
let lean_s82 := by timed congrHAdd lean_s79 lean_s81
have lean_s83 : (Eq let158 let153) := by timed congrHAdd lean_r39 lean_s82
have lean_s84 : (Eq let138 let153) := by timed Eq.trans lean_r61 lean_s83
let lean_s85 := by timed flipCongrArg lean_s84 [LE.le]
have lean_s86 : (Eq let139 let154) := by timed congr lean_s85 lean_s43
have lean_s87 : (Eq let139 let152) := by timed Eq.trans lean_s86 lean_r59
let lean_s88 := by timed congr lean_s34 lean_s87
have lean_s89 : (Eq x14 x14) := by timed rfl
let lean_s90 := by timed congrHAdd lean_s65 lean_s53
let lean_s91 := by timed congrHAdd lean_s89 lean_s90
have lean_s92 : (Eq let123 let151) := by timed congrHAdd lean_r79 lean_s91
have lean_s93 : (Eq let123 let150) := by timed Eq.trans lean_s92 lean_r58
have lean_s94 : (Eq let124 let150) := by timed Eq.trans lean_r53 lean_s93
let lean_s95 := by timed flipCongrArg lean_s94 [LE.le]
have lean_s96 : (Eq let137 let164) := by timed congr lean_s95 lean_s43
have lean_s97 : (Eq let137 let163) := by timed Eq.trans lean_s96 lean_r66
let lean_s98 := by timed congr lean_s34 lean_s97
have lean_s99 : (Eq x2 x2) := by timed rfl
have lean_s100 : (Eq x0 x0) := by timed rfl
let lean_s101 := by timed congrHAdd lean_s100 lean_r46
let lean_s102 := by timed congrHAdd lean_s79 lean_s101
have lean_s103 : (Eq let107 let114) := by timed congrHAdd lean_s99 lean_s102
have lean_s104 : (Eq let107 let13) := by timed Eq.trans lean_s103 lean_r45
have lean_s105 : (Eq let108 let13) := by timed Eq.trans lean_r41 lean_s104
let lean_s106 := by timed flipCongrArg lean_s105 [LE.le]
have lean_s107 : (Eq let136 let31) := by timed congr lean_s106 lean_s43
have lean_s108 : (Eq let136 let15) := by timed Eq.trans lean_s107 lean_r8
let lean_s109 := by timed congr lean_s34 lean_s108
have lean_s110 : (Eq let119 let20) := by timed Eq.trans lean_r51 lean_r37
let lean_s111 := by timed flipCongrArg lean_s110 [LE.le]
have lean_s112 : (Eq let135 let32) := by timed congr lean_s111 lean_s43
have lean_s113 : (Eq let135 let22) := by timed Eq.trans lean_s112 lean_r9
let lean_s114 := by timed congr lean_s34 lean_s113
let lean_s115 := by timed flipCongrArg lean_s43 [LE.le]
have lean_s116 : (Eq x13 x13) := by timed rfl
let lean_s117 := by timed congrHAdd lean_r43 lean_r17
let lean_s118 := by timed congrHAdd lean_s66 lean_s117
let lean_s119 := by timed congrHAdd lean_s100 lean_s118
let lean_s120 := by timed congrHAdd lean_s116 lean_s119
let lean_s121 := by timed congrHAdd lean_r22 lean_s120
let lean_s122 := by timed congrHAdd lean_s79 lean_s121
have lean_s123 : (Eq let51 let87) := by timed congrHAdd lean_r39 lean_s122
have lean_s124 : (Eq let51 let66) := by timed Eq.trans lean_s123 lean_r30
have lean_s125 : (Eq let53 let66) := by timed Eq.trans lean_r13 lean_s124
have lean_s126 : (Eq let134 let68) := by timed congr lean_s115 lean_s125
have lean_s127 : (Eq let134 let67) := by timed Eq.trans lean_s126 lean_r18
let lean_s128 := by timed congr lean_s34 lean_s127
let lean_s129 := by timed congrHAdd lean_s65 lean_r74
let lean_s130 := by timed congrHAdd lean_r16 lean_s129
let lean_s131 := by timed congrHAdd lean_s89 lean_s130
have lean_s132 : (Eq let60 let115) := by timed congrHAdd lean_s116 lean_s131
have lean_s133 : (Eq let60 let8) := by timed Eq.trans lean_s132 lean_r47
have lean_s134 : (Eq let61 let8) := by timed Eq.trans lean_r15 lean_s133
let lean_s135 := by timed flipCongrArg lean_s134 [LE.le]
have lean_s136 : (Eq let133 let130) := by timed congr lean_s135 lean_s49
have lean_s137 : (Eq let133 let10) := by timed Eq.trans lean_s136 lean_r56
let lean_s138 := by timed congr lean_s34 lean_s137
let lean_s139 := by timed congrHAdd lean_r10 lean_s53
let lean_s140 := by timed congrHAdd lean_r48 lean_s139
let lean_s141 := by timed congrHAdd lean_r62 lean_s140
let lean_s142 := by timed congrHAdd lean_s99 lean_s141
have lean_s143 : (Eq let103 let105) := by timed congrHAdd lean_s51 lean_s142
have lean_s144 : (Eq let103 let93) := by timed Eq.trans lean_s143 lean_r40
have lean_s145 : (Eq let104 let93) := by timed Eq.trans lean_r38 lean_s144
let lean_s146 := by timed flipCongrArg lean_s145 [LE.le]
have lean_s147 : (Eq let132 let95) := by timed congr lean_s146 lean_s75
have lean_s148 : (Eq let132 let94) := by timed Eq.trans lean_s147 lean_r32
let lean_s149 := by timed congr lean_s34 lean_s148
let lean_s150 := by timed flipCongrArg lean_s43 [LE.le]
let lean_s151 := by timed congrHAdd lean_s99 lean_r27
have lean_s152 : (Eq let88 let80) := by timed congrHAdd lean_s89 lean_s151
have lean_s153 : (Eq let88 let71) := by timed Eq.trans lean_s152 lean_r25
have lean_s154 : (Eq let89 let71) := by timed Eq.trans lean_r31 lean_s153
have lean_s155 : (Eq let131 let126) := by timed congr lean_s150 lean_s154
have lean_s156 : (Eq let131 let125) := by timed Eq.trans lean_s155 lean_r54
let lean_s157 := by timed congr lean_s149 lean_s156
let lean_s158 := by timed congr lean_s138 lean_s157
let lean_s159 := by timed congr lean_s128 lean_s158
let lean_s160 := by timed congr lean_s114 lean_s159
let lean_s161 := by timed congr lean_s109 lean_s160
let lean_s162 := by timed congr lean_s98 lean_s161
let lean_s163 := by timed congr lean_s88 lean_s162
let lean_s164 := by timed congr lean_s78 lean_s163
let lean_s165 := by timed congr lean_s62 lean_s164
have lean_s166 : (Eq let147 let180) := by timed congr lean_s48 lean_s165
have lean_s167 : (Eq let148 let180) := by timed Eq.trans lean_r57 lean_s166
have lean_s168 : let180 := by timed eqResolve lean_a82 lean_s167
have lean_s169 : let125 := by andElim lean_s168, 10
let lean_s170 := by R2 lean_s33, lean_s169, let125, [(- 1), 0]
have lean_s171 : let10 := by andElim lean_s168, 8
let lean_s172 := by R1 lean_s170, lean_s171, let9, [(- 1), 0]
have lean_s173 : let22 := by andElim lean_s168, 6
let lean_s174 := by R1 lean_s172, lean_s173, let21, [(- 1), 0]
have lean_s175 : let15 := by andElim lean_s168, 5
let lean_s176 := by R1 lean_s174, lean_s175, let14, [(- 1), 0]
have lean_s177 : let155 := by andElim lean_s168, 0
exact (show False from by R2 lean_s176, lean_s177, let155, [0, 0])


