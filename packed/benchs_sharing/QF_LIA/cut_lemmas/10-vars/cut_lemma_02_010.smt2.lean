open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x7 : Int}
variable {x4 : Int}
variable {x6 : Int}
variable {x0 : Int}
variable {x9 : Int}
variable {x2 : Int}
variable {x9 : Int}
variable {x8 : Int}
variable {x2 : Int}
variable {x5 : Int}
variable {x1 : Int}
variable {x0 : Int}
variable {x1 : Int}
variable {x6 : Int}
variable {x4 : Int}
variable {x5 : Int}
variable {x7 : Int}
variable {x8 : Int}

theorem th0 :
  let let1 := (Int.ofNat 2)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 x8)
  let let5 := (binrel% HMul.hMul let3 x7)
  let let6 := (binrel% HMul.hMul let1 x5)
  let let7 := (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let5 let4))
  let let8 := (binrel% GE.ge let7 let1)
  let let9 := (Not let8)
  let let10 := (binrel% LT.lt let7 let1)
  let let11 := (binrel% HMul.hMul let1 x8)
  let let12 := (binrel% HAdd.hAdd let11 x9)
  let let13 := (binrel% HMul.hMul let3 x5)
  let let14 := (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd let13 let12))
  let let15 := (binrel% GE.ge let14 let3)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let3)
  let let18 := (Int.ofNat 0)
  let let19 := (Rat.ofInt 1)
  let let20 := (binrel% GT.gt let19 let18)
  let let21 := (binrel% HMul.hMul let3 x9)
  let let22 := (Neg.neg let1)
  let let23 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd (binrel% HMul.hMul let22 x8) let21)))
  let let24 := (binrel% GE.ge let23 let1)
  let let25 := (Not let24)
  let let26 := (binrel% LT.lt let23 let1)
  let let27 := (Neg.neg let19)
  let let28 := (binrel% LT.lt let27 let18)
  let let29 := (binrel% HMul.hMul let1 x9)
  let let30 := (Int.ofNat 4)
  let let31 := (binrel% HMul.hMul let30 x8)
  let let32 := (binrel% HMul.hMul let22 x5)
  let let33 := (binrel% HMul.hMul let1 x2)
  let let34 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let31 let29)))
  let let35 := (Rat.ofInt let34)
  let let36 := (Rat.ofInt 2)
  let let37 := (binrel% HMul.hMul let36 let14)
  let let38 := (binrel% LE.le let7 let2)
  let let39 := (binrel% HMul.hMul let3 x6)
  let let40 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let22 x2) (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let4 let21))))
  let let41 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x8 x9)))
  let let42 := (binrel% HMul.hMul let27 let41)
  let let43 := (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let5 let12))
  let let44 := (binrel% LE.le let3 let43)
  let let45 := (binrel% HMul.hMul let19 let1)
  let let46 := (Rat.ofInt 0)
  let let47 := (binrel% GE.ge let46 let46)
  let let48 := (Neg.neg x6)
  let let49 := (Neg.neg x7)
  let let50 := (Neg.neg x0)
  let let51 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let49))))
  let let52 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let50 x6) x5) x8) let49)
  let let53 := (binrel% HMul.hMul x8 let1)
  let let54 := (binrel% HMul.hMul let3 x2)
  let let55 := (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let54 let5))
  let let56 := (binrel% GE.ge let55 let18)
  let let57 := (binrel% LE.le let18 let55)
  let let58 := (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let33 let29)))
  let let59 := (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x7 let4)))) let2)
  let let60 := (binrel% HMul.hMul let3 x0)
  let let61 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let5 x8))))
  let let62 := (binrel% LE.le let61 let3)
  let let63 := (Neg.neg x8)
  let let64 := (binrel% HMul.hMul x2 let1)
  let let65 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let64 x8)))
  let let66 := (binrel% HAdd.hAdd x6 x9)
  let let67 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let66 let64) x8)
  let let68 := (binrel% GE.ge let34 let22)
  let let69 := (Not (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x4) (binrel% HAdd.hAdd let39 let21)))) let2))
  let let70 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x4 let66)))
  let let71 := (binrel% LE.le let18 let70)
  let let72 := (Not let38)
  let let73 := (binrel% GT.gt let7 let2)
  let let74 := (Eq let73 let72)
  let let75 := (binrel% HMul.hMul x9 let1)
  let let76 := (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let11 let5)))
  let let77 := (Neg.neg x2)
  let let78 := (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd x1 let49))
  let let79 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let77 x1) let49)
  let let80 := (binrel% HMul.hMul x5 let22)
  let let81 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let6 let5))
  let let82 := (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x1 let5))
  let let83 := (binrel% HMul.hMul x5 let1)
  let let84 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let60 x2))))
  let let85 := (binrel% GT.gt let36 let18)
  let let86 := (Not True)
  let let87 := (Rat.ofInt let23)
  let let88 := (Rat.ofInt let7)
  let let89 := (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let87 let40)))
  let let90 := (binrel% HMul.hMul x8 let30)
  let let91 := (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let64 let75)))
  let let92 := (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd (binrel% HAdd.hAdd let90 let64) let75))
  let let93 := (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let53 let49)))
  let let94 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let48 x9) let53) let49)
  let let95 := (Neg.neg (Rat.ofInt 4))
  let let96 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let95 (binrel% HAdd.hAdd let36 let19)))
  let let97 := (binrel% HAdd.hAdd x1 x8)
  let let98 := (binrel% GE.ge let97 let2)
  let let99 := (binrel% LE.le let2 let97)
  let let100 := (binrel% HAdd.hAdd x8 x1)
  let let101 := (Not let16)
  let let102 := (Eq let101 let15)
  let let103 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let83 let49))
  let let104 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let63 let83) let49)
  let let105 := (binrel% GE.ge let92 let22)
  let let106 := (Not let105)
  let let107 := (binrel% LE.le let2 let100)
  let let108 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x9 x4) x6) let50) x2)
  let let109 := (binrel% LE.le let18 let108)
  let let110 := (binrel% LE.le let52 let3)
  let let111 := (binrel% LE.le let18 let79)
  let let112 := (binrel% LE.le let3 let94)
  let let113 := (binrel% LE.le let104 let2)
  let let114 := (binrel% HMul.hMul x1 let1)
  let let115 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let114 x0) x5) let49)
  let let116 := (binrel% LE.le let115 let18)
  let let117 := (binrel% LE.le let3 let67)
  let let118 := (And let117 (And let116 (And let113 (And let112 (And let111 (And let110 (And let109 (And let107 let106))))))))
  let let119 := (And (And (And (And (And (And (And (And let117 let116) let113) let112) let111) let110) let109) let107) let106)
  let let120 := (binrel% HAdd.hAdd x5 let5)
  let let121 := (binrel% HMul.hMul let1 x1)
  let let122 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let121 let120))
  let let123 := (Not (binrel% GE.ge let122 let2))
  let let124 := (binrel% LE.le let122 let18)
  let let125 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let50 x2))))
  let let126 := (Eq let15 let101)
  let let127 := (binrel% HAdd.hAdd let121 (binrel% HAdd.hAdd x0 let120))
  let let128 := (Not let25)
  let let129 := (Eq let128 let24)
  let let130 := (binrel% HMul.hMul let19 let7)
  let let131 := (binrel% HMul.hMul let27 let3)
  let let132 := (binrel% HMul.hMul let36 let22)
  let let133 := (binrel% HMul.hMul let19 let2)
  let let134 := (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let132 (binrel% HAdd.hAdd let45 let131)))
  let let135 := (binrel% HMul.hMul let19 let23)
  let let136 := (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let135 let42)))
  let let137 := (binrel% GE.ge let136 let134)
  let let138 := (Not let137)
  let let139 := (binrel% LT.lt let136 let134)
  let let140 := (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x5 let49)))
  let let141 := (binrel% GE.ge let41 let3)
  let let142 := (binrel% LE.le let3 let41)
  let let143 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let33 x8)))
  let let144 := (Not let9)
  let let145 := (Eq let144 let8)
  let let146 := (Eq let8 let8)
  let let147 := (Eq let8 let144)
  let let148 := (Eq let15 let15)
  let let149 := (Eq let24 let24)
  let let150 := (Eq let24 let128)
  let let151 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let5))))
  let let152 := (And let141 (And let123 (And let9 (And let25 (And let56 (And let59 (And let69 (And let98 let16))))))))
  let let153 := (Not let141)
  let let154 := (Or let153 (Or let24 (Or let15 let8)))
  let let155 := (Or let153 (Or let128 (Or let101 let144)))
  let let156 := (binrel% LE.le let42 let131)
  let let157 := (And let28 let141)
  let let158 := (binrel% LT.lt let135 let45)
  let let159 := (And let20 let26)
  let let160 := (binrel% LE.le let37 let132)
  let let161 := (binrel% LE.le let14 let22)
  let let162 := (And let85 let161)
  let let163 := (binrel% LE.le let130 let133)
  let let164 := (And let20 let38)
(Eq let10 let9) → (Eq let17 let16) → (Eq let20 True) → (Eq let26 let25) → (Eq let28 True) → (Eq let37 let35) → (Eq let38 let9) → (Eq let42 let40) → (Eq let44 let25) → (Eq let45 let36) → (Eq let47 True) → (Eq let48 let39) → (Eq let52 let51) → (Eq let49 let5) → (Eq let53 let11) → (Eq let57 let56) → (Eq let58 let34) → (Eq let62 let59) → (Eq let63 let4) → (Eq let67 let65) → (Eq let68 let15) → (Eq let71 let69) → let74 → (Eq let75 let29) → (Eq let64 let33) → (Eq let76 let43) → (Eq let79 let78) → (Eq let80 let32) → (Eq let81 let7) → (Eq let82 let55) → (Eq let83 let6) → (Eq let84 let70) → (Eq let85 True) → (Eq let86 False) → (Eq let89 let46) → (Eq let92 let91) → (Eq let94 let93) → (Eq let96 let46) → (Eq let90 let31) → (Eq let77 let54) → (Eq let99 let98) → (Eq let100 let97) → let102 → (Eq let104 let103) → (Eq let119 let118) → (Eq let124 let123) → (Eq let108 let125) → (Eq let102 let126) → (Eq let127 let122) → let129 → (Eq let130 let88) → (Eq let114 let121) → (Eq let139 let138) → (Eq let115 let140) → (Eq let142 let141) → (Eq let143 let41) → let145 → (Eq let146 True) → (Eq let131 let19) → (Eq let145 let147) → (Eq let50 let60) → (Eq let148 True) → (Eq let149 True) → (Eq let129 let150) → (Eq let132 let95) → (Eq let133 let19) → (Eq let151 let61) → (Eq let135 let87) → let119 → False :=
  let let1 := (Int.ofNat 2)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 x8)
  let let5 := (binrel% HMul.hMul let3 x7)
  let let6 := (binrel% HMul.hMul let1 x5)
  let let7 := (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let5 let4))
  let let8 := (binrel% GE.ge let7 let1)
  let let9 := (Not let8)
  let let10 := (binrel% LT.lt let7 let1)
  let let11 := (binrel% HMul.hMul let1 x8)
  let let12 := (binrel% HAdd.hAdd let11 x9)
  let let13 := (binrel% HMul.hMul let3 x5)
  let let14 := (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd let13 let12))
  let let15 := (binrel% GE.ge let14 let3)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let3)
  let let18 := (Int.ofNat 0)
  let let19 := (Rat.ofInt 1)
  let let20 := (binrel% GT.gt let19 let18)
  let let21 := (binrel% HMul.hMul let3 x9)
  let let22 := (Neg.neg let1)
  let let23 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd (binrel% HMul.hMul let22 x8) let21)))
  let let24 := (binrel% GE.ge let23 let1)
  let let25 := (Not let24)
  let let26 := (binrel% LT.lt let23 let1)
  let let27 := (Neg.neg let19)
  let let28 := (binrel% LT.lt let27 let18)
  let let29 := (binrel% HMul.hMul let1 x9)
  let let30 := (Int.ofNat 4)
  let let31 := (binrel% HMul.hMul let30 x8)
  let let32 := (binrel% HMul.hMul let22 x5)
  let let33 := (binrel% HMul.hMul let1 x2)
  let let34 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let31 let29)))
  let let35 := (Rat.ofInt let34)
  let let36 := (Rat.ofInt 2)
  let let37 := (binrel% HMul.hMul let36 let14)
  let let38 := (binrel% LE.le let7 let2)
  let let39 := (binrel% HMul.hMul let3 x6)
  let let40 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let22 x2) (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let4 let21))))
  let let41 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x8 x9)))
  let let42 := (binrel% HMul.hMul let27 let41)
  let let43 := (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let5 let12))
  let let44 := (binrel% LE.le let3 let43)
  let let45 := (binrel% HMul.hMul let19 let1)
  let let46 := (Rat.ofInt 0)
  let let47 := (binrel% GE.ge let46 let46)
  let let48 := (Neg.neg x6)
  let let49 := (Neg.neg x7)
  let let50 := (Neg.neg x0)
  let let51 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let49))))
  let let52 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let50 x6) x5) x8) let49)
  let let53 := (binrel% HMul.hMul x8 let1)
  let let54 := (binrel% HMul.hMul let3 x2)
  let let55 := (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let54 let5))
  let let56 := (binrel% GE.ge let55 let18)
  let let57 := (binrel% LE.le let18 let55)
  let let58 := (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let33 let29)))
  let let59 := (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x7 let4)))) let2)
  let let60 := (binrel% HMul.hMul let3 x0)
  let let61 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let5 x8))))
  let let62 := (binrel% LE.le let61 let3)
  let let63 := (Neg.neg x8)
  let let64 := (binrel% HMul.hMul x2 let1)
  let let65 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let64 x8)))
  let let66 := (binrel% HAdd.hAdd x6 x9)
  let let67 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let66 let64) x8)
  let let68 := (binrel% GE.ge let34 let22)
  let let69 := (Not (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x4) (binrel% HAdd.hAdd let39 let21)))) let2))
  let let70 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x4 let66)))
  let let71 := (binrel% LE.le let18 let70)
  let let72 := (Not let38)
  let let73 := (binrel% GT.gt let7 let2)
  let let74 := (Eq let73 let72)
  let let75 := (binrel% HMul.hMul x9 let1)
  let let76 := (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let11 let5)))
  let let77 := (Neg.neg x2)
  let let78 := (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd x1 let49))
  let let79 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let77 x1) let49)
  let let80 := (binrel% HMul.hMul x5 let22)
  let let81 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let6 let5))
  let let82 := (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x1 let5))
  let let83 := (binrel% HMul.hMul x5 let1)
  let let84 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let60 x2))))
  let let85 := (binrel% GT.gt let36 let18)
  let let86 := (Not True)
  let let87 := (Rat.ofInt let23)
  let let88 := (Rat.ofInt let7)
  let let89 := (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let87 let40)))
  let let90 := (binrel% HMul.hMul x8 let30)
  let let91 := (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let64 let75)))
  let let92 := (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd (binrel% HAdd.hAdd let90 let64) let75))
  let let93 := (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let53 let49)))
  let let94 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let48 x9) let53) let49)
  let let95 := (Neg.neg (Rat.ofInt 4))
  let let96 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let95 (binrel% HAdd.hAdd let36 let19)))
  let let97 := (binrel% HAdd.hAdd x1 x8)
  let let98 := (binrel% GE.ge let97 let2)
  let let99 := (binrel% LE.le let2 let97)
  let let100 := (binrel% HAdd.hAdd x8 x1)
  let let101 := (Not let16)
  let let102 := (Eq let101 let15)
  let let103 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let83 let49))
  let let104 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let63 let83) let49)
  let let105 := (binrel% GE.ge let92 let22)
  let let106 := (Not let105)
  let let107 := (binrel% LE.le let2 let100)
  let let108 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x9 x4) x6) let50) x2)
  let let109 := (binrel% LE.le let18 let108)
  let let110 := (binrel% LE.le let52 let3)
  let let111 := (binrel% LE.le let18 let79)
  let let112 := (binrel% LE.le let3 let94)
  let let113 := (binrel% LE.le let104 let2)
  let let114 := (binrel% HMul.hMul x1 let1)
  let let115 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let114 x0) x5) let49)
  let let116 := (binrel% LE.le let115 let18)
  let let117 := (binrel% LE.le let3 let67)
  let let118 := (And let117 (And let116 (And let113 (And let112 (And let111 (And let110 (And let109 (And let107 let106))))))))
  let let119 := (And (And (And (And (And (And (And (And let117 let116) let113) let112) let111) let110) let109) let107) let106)
  let let120 := (binrel% HAdd.hAdd x5 let5)
  let let121 := (binrel% HMul.hMul let1 x1)
  let let122 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let121 let120))
  let let123 := (Not (binrel% GE.ge let122 let2))
  let let124 := (binrel% LE.le let122 let18)
  let let125 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let50 x2))))
  let let126 := (Eq let15 let101)
  let let127 := (binrel% HAdd.hAdd let121 (binrel% HAdd.hAdd x0 let120))
  let let128 := (Not let25)
  let let129 := (Eq let128 let24)
  let let130 := (binrel% HMul.hMul let19 let7)
  let let131 := (binrel% HMul.hMul let27 let3)
  let let132 := (binrel% HMul.hMul let36 let22)
  let let133 := (binrel% HMul.hMul let19 let2)
  let let134 := (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let132 (binrel% HAdd.hAdd let45 let131)))
  let let135 := (binrel% HMul.hMul let19 let23)
  let let136 := (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let135 let42)))
  let let137 := (binrel% GE.ge let136 let134)
  let let138 := (Not let137)
  let let139 := (binrel% LT.lt let136 let134)
  let let140 := (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x5 let49)))
  let let141 := (binrel% GE.ge let41 let3)
  let let142 := (binrel% LE.le let3 let41)
  let let143 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let33 x8)))
  let let144 := (Not let9)
  let let145 := (Eq let144 let8)
  let let146 := (Eq let8 let8)
  let let147 := (Eq let8 let144)
  let let148 := (Eq let15 let15)
  let let149 := (Eq let24 let24)
  let let150 := (Eq let24 let128)
  let let151 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let5))))
  let let152 := (And let141 (And let123 (And let9 (And let25 (And let56 (And let59 (And let69 (And let98 let16))))))))
  let let153 := (Not let141)
  let let154 := (Or let153 (Or let24 (Or let15 let8)))
  let let155 := (Or let153 (Or let128 (Or let101 let144)))
  let let156 := (binrel% LE.le let42 let131)
  let let157 := (And let28 let141)
  let let158 := (binrel% LT.lt let135 let45)
  let let159 := (And let20 let26)
  let let160 := (binrel% LE.le let37 let132)
  let let161 := (binrel% LE.le let14 let22)
  let let162 := (And let85 let161)
  let let163 := (binrel% LE.le let130 let133)
  let let164 := (And let20 let38)
fun lean_r0 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let20 True) => -- EVALUATE
fun lean_r3 : (Eq let26 let25) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let28 True) => -- EVALUATE
fun lean_r5 : (Eq let37 let35) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let38 let9) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let42 let40) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let44 let25) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let45 let36) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let47 True) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let48 let39) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let49 let5) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let53 let11) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let57 let56) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let58 let34) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let62 let59) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let63 let4) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let67 let65) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let68 let15) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let71 let69) => -- THEORY_REWRITE_ARITH
fun lean_r22 : let74 => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let75 let29) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let64 let33) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let76 let43) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let79 let78) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let80 let32) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let81 let7) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let82 let55) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let83 let6) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let84 let70) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let85 True) => -- EVALUATE
fun lean_r33 : (Eq let86 False) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let89 let46) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let92 let91) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let94 let93) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let96 let46) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let90 let31) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let77 let54) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let99 let98) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let100 let97) => -- THEORY_REWRITE_ARITH
fun lean_r42 : let102 => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq let104 let103) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let119 let118) => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let124 let123) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let108 let125) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let102 let126) => -- THEORY_REWRITE_BOOL
fun lean_r48 : (Eq let127 let122) => -- THEORY_REWRITE_ARITH
fun lean_r49 : let129 => -- THEORY_REWRITE_BOOL
fun lean_r50 : (Eq let130 let88) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let114 let121) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let139 let138) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let115 let140) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let142 let141) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let143 let41) => -- THEORY_REWRITE_ARITH
fun lean_r56 : let145 => -- THEORY_REWRITE_BOOL
fun lean_r57 : (Eq let146 True) => -- THEORY_REWRITE_BOOL
fun lean_r58 : (Eq let131 let19) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let145 let147) => -- THEORY_REWRITE_BOOL
fun lean_r60 : (Eq let50 let60) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let148 True) => -- THEORY_REWRITE_BOOL
fun lean_r62 : (Eq let149 True) => -- THEORY_REWRITE_BOOL
fun lean_r63 : (Eq let129 let150) => -- THEORY_REWRITE_BOOL
fun lean_r64 : (Eq let132 let95) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let133 let19) => -- THEORY_REWRITE_ARITH
fun lean_r66 : (Eq let151 let61) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq let135 let87) => -- THEORY_REWRITE_ARITH
fun lean_a68 : let119 => by
have lean_s0 : (Or let153 (Or let128 (Or let101 (Or let144 False)))) :=
  (scope (fun lean_a69 : let141 =>
    (scope (fun lean_a70 : let25 =>
      (scope (fun lean_a71 : let16 =>
        (scope (fun lean_a72 : let9 =>
          have lean_s0 : (Eq let9 let10) := by timed Eq.symm lean_r0
          have lean_s1 : let10 := by timed eqResolve lean_a72 lean_s0
          have lean_s2 : let38 := by intTightUb lean_s1
          have lean_s3 : (Or let72 False) :=
            (scope (fun lean_a73 : let38 =>
              have lean_s3 : let20 := by timed trueElim lean_r2
              have lean_s4 : let164 := by timed And.intro lean_s3 lean_a73
              have lean_s5 : (Implies let164 let163) := by arithMulPos [let7, let2, let19], 1
              have lean_s6 : let163 := by timed modusPonens lean_s4 lean_s5
              have lean_s7 : let85 := by timed trueElim lean_r32
              have lean_s8 : (Eq let16 let17) := by timed Eq.symm lean_r1
              have lean_s9 : let17 := by timed eqResolve lean_a71 lean_s8
              have lean_s10 : let161 := by intTightUb lean_s9
              have lean_s11 : let162 := by timed And.intro lean_s7 lean_s10
              have lean_s12 : (Implies let162 let160) := by arithMulPos [let14, let22, let36], 1
              have lean_s13 : let160 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let25 let26) := by timed Eq.symm lean_r3
              have lean_s15 : let26 := by timed eqResolve lean_a70 lean_s14
              have lean_s16 : let159 := by timed And.intro lean_s3 lean_s15
              have lean_s17 : (Implies let159 let158) := by arithMulPos [let23, let1, let19], 0
              have lean_s18 : let158 := by timed modusPonens lean_s16 lean_s17
              have lean_s19 : let28 := by timed trueElim lean_r4
              have lean_s20 : let157 := by timed And.intro lean_s19 lean_a69
              have lean_s21 : (Implies let157 let156) := by arithMulNeg [let41, let3, let27], 3
              have lean_s22 : let156 := by timed modusPonens lean_s20 lean_s21
              have lean_s23 : let139 := by sumBounds [lean_s6, lean_s13, lean_s18, lean_s22]
              let lean_s24 := by timed congrHAdd lean_r67 lean_r7
              let lean_s25 := by timed congrHAdd lean_r5 lean_s24
              have lean_s26 : (Eq let136 let89) := by timed congrHAdd lean_r50 lean_s25
              have lean_s27 : (Eq let136 let46) := by timed Eq.trans lean_s26 lean_r34
              let lean_s28 := by timed flipCongrArg lean_s27 [GE.ge]
              let lean_s29 := by timed congrHAdd lean_r9 lean_r58
              let lean_s30 := by timed congrHAdd lean_r64 lean_s29
              have lean_s31 : (Eq let134 let96) := by timed congrHAdd lean_r65 lean_s30
              have lean_s32 : (Eq let134 let46) := by timed Eq.trans lean_s31 lean_r37
              have lean_s33 : (Eq let137 let47) := by timed congr lean_s28 lean_s32
              have lean_s34 : (Eq let137 True) := by timed Eq.trans lean_s33 lean_r10
              have lean_s35 : (Eq let138 let86) := by timed flipCongrArg lean_s34 [Not]
              have lean_s36 : (Eq let138 False) := by timed Eq.trans lean_s35 lean_r33
              have lean_s37 : (Eq let139 False) := by timed Eq.trans lean_r52 lean_s36
              show False from by timed eqResolve lean_s23 lean_s37
            ))
          have lean_s4 : let72 := by liftOrNToNeg lean_s3
          have lean_s5 : (Eq let72 let144) := by timed flipCongrArg lean_r6 [Not]
          have lean_s6 : (Eq let72 let8) := by timed Eq.trans lean_s5 lean_r56
          have lean_s7 : (Eq let73 let8) := by timed Eq.trans lean_r22 lean_s6
          have lean_s8 : (Eq let8 let73) := by timed Eq.symm lean_s7
          have lean_s9 : (Eq let72 let73) := by timed Eq.trans lean_s6 lean_s8
          have lean_s10 : let73 := by timed eqResolve lean_s4 lean_s9
          have lean_s11 : (Eq let8 let72) := by timed Eq.symm lean_s6
          have lean_s12 : let74 := by timed Eq.trans lean_s7 lean_s11
          have lean_s13 : let72 := by timed eqResolve lean_s10 lean_s12
          show False from by timed contradiction lean_s2 lean_s13
  ))))))))
have lean_s1 : (Not (And let141 (And let25 (And let16 let9)))) := by liftOrNToNeg lean_s0
have lean_s2 : let155 := by timed flipNotAnd lean_s1 [let141, let25, let16, let9]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let153 let153) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let149 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let150 let149) := by timed congr lean_s7 lean_r49
have lean_s9 : (Eq let150 True) := by timed Eq.trans lean_s8 lean_r62
have lean_s10 : (Eq let129 True) := by timed Eq.trans lean_r63 lean_s9
have lean_s11 : let129 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let148 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let126 let148) := by timed congr lean_s14 lean_r42
have lean_s16 : (Eq let126 True) := by timed Eq.trans lean_s15 lean_r61
have lean_s17 : (Eq let102 True) := by timed Eq.trans lean_r47 lean_s16
have lean_s18 : let102 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s3 lean_s18
have lean_s20 : let146 := by timed rfl
let lean_s21 := by timed flipCongrArg lean_s20 [Eq]
have lean_s22 : (Eq let147 let146) := by timed congr lean_s21 lean_r56
have lean_s23 : (Eq let147 True) := by timed Eq.trans lean_s22 lean_r57
have lean_s24 : (Eq let145 True) := by timed Eq.trans lean_r59 lean_s23
have lean_s25 : let145 := by timed trueElim lean_s24
let lean_s26 := by timed congr lean_s19 lean_s25
let lean_s27 := by timed congr lean_s12 lean_s26
have lean_s28 : (Eq let155 let154) := by timed congr lean_s5 lean_s27
have lean_s29 : let154 := by timed eqResolve lean_s2 lean_s28
have lean_s30 : (Or let8 (Or let24 (Or let15 let153))) := by permutateOr lean_s29, [3, 1, 2, 0], (- 1)
have lean_s31 : (Eq And And) := by timed rfl
have lean_s32 : (Eq let3 let3) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq x6 x6) := by timed rfl
have lean_s35 : (Eq x9 x9) := by timed rfl
have lean_s36 : (Eq x8 x8) := by timed rfl
let lean_s37 := by timed congrHAdd lean_r24 lean_s36
let lean_s38 := by timed congrHAdd lean_s35 lean_s37
have lean_s39 : (Eq let65 let143) := by timed congrHAdd lean_s34 lean_s38
have lean_s40 : (Eq let65 let41) := by timed Eq.trans lean_s39 lean_r55
have lean_s41 : (Eq let67 let41) := by timed Eq.trans lean_r19 lean_s40
have lean_s42 : (Eq let117 let142) := by timed congr lean_s33 lean_s41
have lean_s43 : (Eq let117 let141) := by timed Eq.trans lean_s42 lean_r54
let lean_s44 := by timed congr lean_s31 lean_s43
have lean_s45 : (Eq x0 x0) := by timed rfl
have lean_s46 : (Eq x5 x5) := by timed rfl
let lean_s47 := by timed congrHAdd lean_s46 lean_r13
let lean_s48 := by timed congrHAdd lean_s45 lean_s47
have lean_s49 : (Eq let140 let127) := by timed congrHAdd lean_r51 lean_s48
have lean_s50 : (Eq let140 let122) := by timed Eq.trans lean_s49 lean_r48
have lean_s51 : (Eq let115 let122) := by timed Eq.trans lean_r53 lean_s50
let lean_s52 := by timed flipCongrArg lean_s51 [LE.le]
have lean_s53 : (Eq let18 let18) := by timed rfl
have lean_s54 : (Eq let116 let124) := by timed congr lean_s52 lean_s53
have lean_s55 : (Eq let116 let123) := by timed Eq.trans lean_s54 lean_r45
let lean_s56 := by timed congr lean_s31 lean_s55
let lean_s57 := by timed congrHAdd lean_r30 lean_r13
have lean_s58 : (Eq let103 let81) := by timed congrHAdd lean_r18 lean_s57
have lean_s59 : (Eq let103 let7) := by timed Eq.trans lean_s58 lean_r28
have lean_s60 : (Eq let104 let7) := by timed Eq.trans lean_r43 lean_s59
let lean_s61 := by timed flipCongrArg lean_s60 [LE.le]
have lean_s62 : (Eq let2 let2) := by timed rfl
have lean_s63 : (Eq let113 let38) := by timed congr lean_s61 lean_s62
have lean_s64 : (Eq let113 let9) := by timed Eq.trans lean_s63 lean_r6
let lean_s65 := by timed congr lean_s31 lean_s64
let lean_s66 := by timed flipCongrArg lean_s32 [LE.le]
let lean_s67 := by timed congrHAdd lean_r14 lean_r13
let lean_s68 := by timed congrHAdd lean_s35 lean_s67
have lean_s69 : (Eq let93 let76) := by timed congrHAdd lean_r11 lean_s68
have lean_s70 : (Eq let93 let43) := by timed Eq.trans lean_s69 lean_r25
have lean_s71 : (Eq let94 let43) := by timed Eq.trans lean_r36 lean_s70
have lean_s72 : (Eq let112 let44) := by timed congr lean_s66 lean_s71
have lean_s73 : (Eq let112 let25) := by timed Eq.trans lean_s72 lean_r8
let lean_s74 := by timed congr lean_s31 lean_s73
let lean_s75 := by timed flipCongrArg lean_s53 [LE.le]
have lean_s76 : (Eq x1 x1) := by timed rfl
let lean_s77 := by timed congrHAdd lean_s76 lean_r13
have lean_s78 : (Eq let78 let82) := by timed congrHAdd lean_r39 lean_s77
have lean_s79 : (Eq let78 let55) := by timed Eq.trans lean_s78 lean_r29
have lean_s80 : (Eq let79 let55) := by timed Eq.trans lean_r26 lean_s79
have lean_s81 : (Eq let111 let57) := by timed congr lean_s75 lean_s80
have lean_s82 : (Eq let111 let56) := by timed Eq.trans lean_s81 lean_r15
let lean_s83 := by timed congr lean_s31 lean_s82
let lean_s84 := by timed congrHAdd lean_s36 lean_r13
let lean_s85 := by timed congrHAdd lean_s46 lean_s84
let lean_s86 := by timed congrHAdd lean_s34 lean_s85
have lean_s87 : (Eq let51 let151) := by timed congrHAdd lean_r60 lean_s86
have lean_s88 : (Eq let51 let61) := by timed Eq.trans lean_s87 lean_r66
have lean_s89 : (Eq let52 let61) := by timed Eq.trans lean_r12 lean_s88
let lean_s90 := by timed flipCongrArg lean_s89 [LE.le]
have lean_s91 : (Eq let110 let62) := by timed congr lean_s90 lean_s32
have lean_s92 : (Eq let110 let59) := by timed Eq.trans lean_s91 lean_r17
let lean_s93 := by timed congr lean_s31 lean_s92
let lean_s94 := by timed flipCongrArg lean_s53 [LE.le]
have lean_s95 : (Eq x4 x4) := by timed rfl
have lean_s96 : (Eq x2 x2) := by timed rfl
let lean_s97 := by timed congrHAdd lean_r60 lean_s96
let lean_s98 := by timed congrHAdd lean_s34 lean_s97
let lean_s99 := by timed congrHAdd lean_s95 lean_s98
have lean_s100 : (Eq let125 let84) := by timed congrHAdd lean_s35 lean_s99
have lean_s101 : (Eq let125 let70) := by timed Eq.trans lean_s100 lean_r31
have lean_s102 : (Eq let108 let70) := by timed Eq.trans lean_r46 lean_s101
have lean_s103 : (Eq let109 let71) := by timed congr lean_s94 lean_s102
have lean_s104 : (Eq let109 let69) := by timed Eq.trans lean_s103 lean_r21
let lean_s105 := by timed congr lean_s31 lean_s104
let lean_s106 := by timed flipCongrArg lean_s62 [LE.le]
have lean_s107 : (Eq let107 let99) := by timed congr lean_s106 lean_r41
have lean_s108 : (Eq let107 let98) := by timed Eq.trans lean_s107 lean_r40
let lean_s109 := by timed congr lean_s31 lean_s108
let lean_s110 := by timed congrHAdd lean_r24 lean_r23
let lean_s111 := by timed congrHAdd lean_r38 lean_s110
have lean_s112 : (Eq let91 let58) := by timed congrHAdd lean_r27 lean_s111
have lean_s113 : (Eq let91 let34) := by timed Eq.trans lean_s112 lean_r16
have lean_s114 : (Eq let92 let34) := by timed Eq.trans lean_r35 lean_s113
let lean_s115 := by timed flipCongrArg lean_s114 [GE.ge]
have lean_s116 : (Eq let22 let22) := by timed rfl
have lean_s117 : (Eq let105 let68) := by timed congr lean_s115 lean_s116
have lean_s118 : (Eq let105 let15) := by timed Eq.trans lean_s117 lean_r20
have lean_s119 : (Eq let106 let16) := by timed flipCongrArg lean_s118 [Not]
let lean_s120 := by timed congr lean_s109 lean_s119
let lean_s121 := by timed congr lean_s105 lean_s120
let lean_s122 := by timed congr lean_s93 lean_s121
let lean_s123 := by timed congr lean_s83 lean_s122
let lean_s124 := by timed congr lean_s74 lean_s123
let lean_s125 := by timed congr lean_s65 lean_s124
let lean_s126 := by timed congr lean_s56 lean_s125
have lean_s127 : (Eq let118 let152) := by timed congr lean_s44 lean_s126
have lean_s128 : (Eq let119 let152) := by timed Eq.trans lean_r44 lean_s127
have lean_s129 : let152 := by timed eqResolve lean_a68 lean_s128
have lean_s130 : let16 := by andElim lean_s129, 8
let lean_s131 := by R1 lean_s30, lean_s130, let15, [(- 1), 0]
have lean_s132 : let25 := by andElim lean_s129, 3
let lean_s133 := by R1 lean_s131, lean_s132, let24, [(- 1), 0]
have lean_s134 : let9 := by andElim lean_s129, 2
let lean_s135 := by R1 lean_s133, lean_s134, let8, [(- 1), 0]
have lean_s136 : let141 := by andElim lean_s129, 0
exact (show False from by R2 lean_s135, lean_s136, let141, [0, 0])


