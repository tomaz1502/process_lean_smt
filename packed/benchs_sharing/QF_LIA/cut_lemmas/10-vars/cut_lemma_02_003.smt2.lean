open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x5 : Int}
variable {x1 : Int}
variable {x8 : Int}
variable {x6 : Int}
variable {x2 : Int}
variable {x0 : Int}
variable {x0 : Int}
variable {x6 : Int}
variable {x4 : Int}
variable {x4 : Int}
variable {x9 : Int}
variable {x7 : Int}
variable {x9 : Int}
variable {x5 : Int}
variable {x7 : Int}
variable {x1 : Int}
variable {x8 : Int}
variable {x2 : Int}

theorem th0 :
  let let1 := (Int.ofNat 2)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 x8)
  let let5 := (binrel% HMul.hMul let3 x7)
  let let6 := (binrel% HMul.hMul let1 x5)
  let let7 := (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let5 let4))
  let let8 := (binrel% GE.ge let7 let1)
  let let9 := (Not let8)
  let let10 := (binrel% LT.lt let7 let1)
  let let11 := (Rat.ofInt let7)
  let let12 := (Rat.ofInt 1)
  let let13 := (binrel% HMul.hMul let12 let7)
  let let14 := (binrel% HMul.hMul let1 x9)
  let let15 := (Int.ofNat 4)
  let let16 := (binrel% HMul.hMul let15 x8)
  let let17 := (Neg.neg let1)
  let let18 := (binrel% HMul.hMul let17 x5)
  let let19 := (binrel% HMul.hMul let1 x2)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let16 let14)))
  let let21 := (Rat.ofInt let20)
  let let22 := (binrel% HMul.hMul let1 x8)
  let let23 := (binrel% HAdd.hAdd let22 x9)
  let let24 := (binrel% HMul.hMul let3 x5)
  let let25 := (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd let24 let23))
  let let26 := (Rat.ofInt 2)
  let let27 := (binrel% HMul.hMul let26 let25)
  let let28 := (binrel% HMul.hMul let3 x9)
  let let29 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd (binrel% HMul.hMul let17 x8) let28)))
  let let30 := (Rat.ofInt let29)
  let let31 := (binrel% HMul.hMul let12 let29)
  let let32 := (binrel% LE.le let7 let2)
  let let33 := (binrel% HAdd.hAdd x5 let5)
  let let34 := (binrel% HMul.hMul let1 x1)
  let let35 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let34 let33))
  let let36 := (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x0 let33))
  let let37 := (binrel% HMul.hMul let12 let1)
  let let38 := (Neg.neg let12)
  let let39 := (binrel% HMul.hMul let38 let3)
  let let40 := (binrel% HMul.hMul let26 let17)
  let let41 := (binrel% HMul.hMul let12 let2)
  let let42 := (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 let37)))
  let let43 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x8 x9)))
  let let44 := (binrel% HMul.hMul let38 let43)
  let let45 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let44 let31)))
  let let46 := (binrel% GE.ge let45 let42)
  let let47 := (Not let46)
  let let48 := (binrel% LT.lt let45 let42)
  let let49 := (binrel% HMul.hMul x8 let1)
  let let50 := (binrel% HMul.hMul let3 x6)
  let let51 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let17 x2) (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let4 let28))))
  let let52 := (binrel% GE.ge let25 let3)
  let let53 := (binrel% GE.ge let20 let17)
  let let54 := (Not let52)
  let let55 := (binrel% LT.lt let25 let3)
  let let56 := (binrel% HAdd.hAdd x4 let28)
  let let57 := (binrel% HSub.hSub x4 x9)
  let let58 := (Not let54)
  let let59 := (Eq let52 let58)
  let let60 := (Eq let58 let52)
  let let61 := (Neg.neg x7)
  let let62 := (binrel% HMul.hMul x5 let1)
  let let63 := (Neg.neg x8)
  let let64 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let62 let61))
  let let65 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let63 let62) let61)
  let let66 := (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x7 let4)))) let2)
  let let67 := (binrel% HMul.hMul let3 x0)
  let let68 := (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let5 x8))))
  let let69 := (binrel% LE.le let68 let3)
  let let70 := (Rat.ofInt 0)
  let let71 := (Neg.neg (Rat.ofInt 4))
  let let72 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let12 let26)))
  let let73 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let6 let5))
  let let74 := (Int.ofNat 0)
  let let75 := (binrel% LT.lt let38 let74)
  let let76 := (Neg.neg x0)
  let let77 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let76 x2))))
  let let78 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x9 x4) x6) let76) x2)
  let let79 := (Neg.neg x6)
  let let80 := (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let49 let61)))
  let let81 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let79 x9) let49) let61)
  let let82 := (Not (binrel% GE.ge let56 let74))
  let let83 := (binrel% LE.le let56 let3)
  let let84 := (binrel% HMul.hMul let3 x2)
  let let85 := (Not (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x4) (binrel% HAdd.hAdd let50 let28)))) let2))
  let let86 := (binrel% HAdd.hAdd x6 x9)
  let let87 := (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x4 let86)))
  let let88 := (binrel% LE.le let74 let87)
  let let89 := (Not (binrel% GE.ge let35 let2))
  let let90 := (binrel% LE.le let35 let74)
  let let91 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let5 let23))
  let let92 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let22 let5)))
  let let93 := (Not let32)
  let let94 := (binrel% GT.gt let7 let2)
  let let95 := (Eq let94 let93)
  let let96 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let67 x2))))
  let let97 := (binrel% GE.ge let29 let1)
  let let98 := (Not let97)
  let let99 := (Not let98)
  let let100 := (Eq let97 let99)
  let let101 := (Eq let99 let97)
  let let102 := (Neg.neg x2)
  let let103 := (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd x1 let61))
  let let104 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let102 x1) let61)
  let let105 := (binrel% HAdd.hAdd x1 x8)
  let let106 := (binrel% HAdd.hAdd x8 x1)
  let let107 := (binrel% HMul.hMul x5 let17)
  let let108 := (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let5))))
  let let109 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let61))))
  let let110 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let76 x6) x5) x8) let61)
  let let111 := (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let84 let5))
  let let112 := (binrel% GE.ge let111 let74)
  let let113 := (binrel% LE.le let74 let111)
  let let114 := (Eq let52 let52)
  let let115 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd x1 let5))
  let let116 := (binrel% GE.ge let43 let3)
  let let117 := (binrel% LE.le let3 let43)
  let let118 := (binrel% HMul.hMul x1 let1)
  let let119 := (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x5 let61)))
  let let120 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let118 x0) x5) let61)
  let let121 := (binrel% GE.ge let105 let2)
  let let122 := (binrel% LE.le let2 let105)
  let let123 := (binrel% HMul.hMul x2 let1)
  let let124 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let19 x8)))
  let let125 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let19 let14)))
  let let126 := (binrel% LT.lt let29 let1)
  let let127 := (binrel% HMul.hMul x9 let1)
  let let128 := (Not let9)
  let let129 := (Eq let128 let8)
  let let130 := (binrel% GT.gt let12 let74)
  let let131 := (binrel% HMul.hMul x8 let15)
  let let132 := (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd let123 let127)))
  let let133 := (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd (binrel% HAdd.hAdd let131 let123) let127))
  let let134 := (binrel% LE.le let2 let106)
  let let135 := (binrel% LE.le let74 let78)
  let let136 := (binrel% LE.le let110 let3)
  let let137 := (binrel% LE.le let74 let104)
  let let138 := (binrel% LE.le let3 let81)
  let let139 := (binrel% LE.le let65 let2)
  let let140 := (binrel% LE.le let57 let3)
  let let141 := (binrel% LE.le let120 let74)
  let let142 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let86 let123) x8)
  let let143 := (binrel% LE.le let3 let142)
  let let144 := (binrel% GE.ge let133 let17)
  let let145 := (Not let144)
  let let146 := (And let145 (And let143 (And let141 (And let140 (And let139 (And let138 (And let137 (And let136 (And let135 let134)))))))))
  let let147 := (And let145 (And (And (And (And (And (And (And (And let143 let141) let140) let139) let138) let137) let136) let135) let134))
  let let148 := (Eq let8 let128)
  let let149 := (Eq let8 let8)
  let let150 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let123 x8)))
  let let151 := (Eq let97 let97)
  let let152 := (binrel% GT.gt let26 let74)
  let let153 := (Not True)
  let let154 := (binrel% LE.le let3 let91)
  let let155 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let51 let30)))
  let let156 := (binrel% GE.ge let70 let70)
  let let157 := (And let54 (And let116 (And let89 (And let82 (And let9 (And let98 (And let112 (And let66 (And let85 let121)))))))))
  let let158 := (Not let116)
  let let159 := (Or let97 (Or let158 (Or let52 let8)))
  let let160 := (Or let99 (Or let158 (Or let58 let128)))
  let let161 := (binrel% LT.lt let31 let37)
  let let162 := (And let130 let126)
  let let163 := (binrel% LE.le let44 let39)
  let let164 := (And let75 let116)
  let let165 := (binrel% LE.le let27 let40)
  let let166 := (binrel% LE.le let25 let17)
  let let167 := (And let152 let166)
  let let168 := (binrel% LE.le let13 let41)
  let let169 := (And let130 let32)
(Eq let10 let9) → (Eq let13 let11) → (Eq let27 let21) → (Eq let31 let30) → (Eq let32 let9) → (Eq let36 let35) → (Eq let48 let47) → (Eq let49 let22) → (Eq let44 let51) → (Eq let53 let52) → (Eq let55 let54) → (Eq let57 let56) → (Eq let60 let59) → (Eq let65 let64) → (Eq let63 let4) → (Eq let69 let66) → (Eq let62 let6) → (Eq let72 let70) → (Eq let73 let7) → (Eq let75 True) → (Eq let78 let77) → (Eq let81 let80) → (Eq let76 let67) → (Eq let83 let82) → (Eq let88 let85) → (Eq let90 let89) → (Eq let92 let91) → let95 → (Eq let96 let87) → (Eq let61 let5) → (Eq let101 let100) → (Eq let102 let84) → (Eq let104 let103) → (Eq let106 let105) → (Eq let107 let18) → (Eq let108 let68) → (Eq let79 let50) → (Eq let110 let109) → (Eq let113 let112) → (Eq let114 True) → (Eq let115 let111) → (Eq let117 let116) → (Eq let120 let119) → (Eq let122 let121) → (Eq let123 let19) → (Eq let124 let43) → let60 → (Eq let125 let20) → (Eq let126 let98) → (Eq let127 let14) → let129 → (Eq let130 True) → (Eq let131 let16) → (Eq let133 let132) → (Eq let147 let146) → (Eq let129 let148) → (Eq let37 let26) → (Eq let118 let34) → (Eq let149 True) → (Eq let142 let150) → (Eq let151 True) → (Eq let152 True) → (Eq let153 False) → (Eq let154 let98) → let101 → (Eq let155 let70) → (Eq let156 True) → (Eq let39 let12) → (Eq let40 let71) → (Eq let41 let12) → let147 → False :=
  let let1 := (Int.ofNat 2)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 x8)
  let let5 := (binrel% HMul.hMul let3 x7)
  let let6 := (binrel% HMul.hMul let1 x5)
  let let7 := (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let5 let4))
  let let8 := (binrel% GE.ge let7 let1)
  let let9 := (Not let8)
  let let10 := (binrel% LT.lt let7 let1)
  let let11 := (Rat.ofInt let7)
  let let12 := (Rat.ofInt 1)
  let let13 := (binrel% HMul.hMul let12 let7)
  let let14 := (binrel% HMul.hMul let1 x9)
  let let15 := (Int.ofNat 4)
  let let16 := (binrel% HMul.hMul let15 x8)
  let let17 := (Neg.neg let1)
  let let18 := (binrel% HMul.hMul let17 x5)
  let let19 := (binrel% HMul.hMul let1 x2)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let16 let14)))
  let let21 := (Rat.ofInt let20)
  let let22 := (binrel% HMul.hMul let1 x8)
  let let23 := (binrel% HAdd.hAdd let22 x9)
  let let24 := (binrel% HMul.hMul let3 x5)
  let let25 := (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd let24 let23))
  let let26 := (Rat.ofInt 2)
  let let27 := (binrel% HMul.hMul let26 let25)
  let let28 := (binrel% HMul.hMul let3 x9)
  let let29 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd (binrel% HMul.hMul let17 x8) let28)))
  let let30 := (Rat.ofInt let29)
  let let31 := (binrel% HMul.hMul let12 let29)
  let let32 := (binrel% LE.le let7 let2)
  let let33 := (binrel% HAdd.hAdd x5 let5)
  let let34 := (binrel% HMul.hMul let1 x1)
  let let35 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let34 let33))
  let let36 := (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x0 let33))
  let let37 := (binrel% HMul.hMul let12 let1)
  let let38 := (Neg.neg let12)
  let let39 := (binrel% HMul.hMul let38 let3)
  let let40 := (binrel% HMul.hMul let26 let17)
  let let41 := (binrel% HMul.hMul let12 let2)
  let let42 := (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 let37)))
  let let43 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x8 x9)))
  let let44 := (binrel% HMul.hMul let38 let43)
  let let45 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let44 let31)))
  let let46 := (binrel% GE.ge let45 let42)
  let let47 := (Not let46)
  let let48 := (binrel% LT.lt let45 let42)
  let let49 := (binrel% HMul.hMul x8 let1)
  let let50 := (binrel% HMul.hMul let3 x6)
  let let51 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let17 x2) (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let4 let28))))
  let let52 := (binrel% GE.ge let25 let3)
  let let53 := (binrel% GE.ge let20 let17)
  let let54 := (Not let52)
  let let55 := (binrel% LT.lt let25 let3)
  let let56 := (binrel% HAdd.hAdd x4 let28)
  let let57 := (binrel% HSub.hSub x4 x9)
  let let58 := (Not let54)
  let let59 := (Eq let52 let58)
  let let60 := (Eq let58 let52)
  let let61 := (Neg.neg x7)
  let let62 := (binrel% HMul.hMul x5 let1)
  let let63 := (Neg.neg x8)
  let let64 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let62 let61))
  let let65 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let63 let62) let61)
  let let66 := (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x7 let4)))) let2)
  let let67 := (binrel% HMul.hMul let3 x0)
  let let68 := (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let5 x8))))
  let let69 := (binrel% LE.le let68 let3)
  let let70 := (Rat.ofInt 0)
  let let71 := (Neg.neg (Rat.ofInt 4))
  let let72 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let12 let26)))
  let let73 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let6 let5))
  let let74 := (Int.ofNat 0)
  let let75 := (binrel% LT.lt let38 let74)
  let let76 := (Neg.neg x0)
  let let77 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let76 x2))))
  let let78 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x9 x4) x6) let76) x2)
  let let79 := (Neg.neg x6)
  let let80 := (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let49 let61)))
  let let81 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let79 x9) let49) let61)
  let let82 := (Not (binrel% GE.ge let56 let74))
  let let83 := (binrel% LE.le let56 let3)
  let let84 := (binrel% HMul.hMul let3 x2)
  let let85 := (Not (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x4) (binrel% HAdd.hAdd let50 let28)))) let2))
  let let86 := (binrel% HAdd.hAdd x6 x9)
  let let87 := (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x4 let86)))
  let let88 := (binrel% LE.le let74 let87)
  let let89 := (Not (binrel% GE.ge let35 let2))
  let let90 := (binrel% LE.le let35 let74)
  let let91 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let5 let23))
  let let92 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let22 let5)))
  let let93 := (Not let32)
  let let94 := (binrel% GT.gt let7 let2)
  let let95 := (Eq let94 let93)
  let let96 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let67 x2))))
  let let97 := (binrel% GE.ge let29 let1)
  let let98 := (Not let97)
  let let99 := (Not let98)
  let let100 := (Eq let97 let99)
  let let101 := (Eq let99 let97)
  let let102 := (Neg.neg x2)
  let let103 := (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd x1 let61))
  let let104 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let102 x1) let61)
  let let105 := (binrel% HAdd.hAdd x1 x8)
  let let106 := (binrel% HAdd.hAdd x8 x1)
  let let107 := (binrel% HMul.hMul x5 let17)
  let let108 := (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let5))))
  let let109 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let61))))
  let let110 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let76 x6) x5) x8) let61)
  let let111 := (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let84 let5))
  let let112 := (binrel% GE.ge let111 let74)
  let let113 := (binrel% LE.le let74 let111)
  let let114 := (Eq let52 let52)
  let let115 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd x1 let5))
  let let116 := (binrel% GE.ge let43 let3)
  let let117 := (binrel% LE.le let3 let43)
  let let118 := (binrel% HMul.hMul x1 let1)
  let let119 := (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x5 let61)))
  let let120 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let118 x0) x5) let61)
  let let121 := (binrel% GE.ge let105 let2)
  let let122 := (binrel% LE.le let2 let105)
  let let123 := (binrel% HMul.hMul x2 let1)
  let let124 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let19 x8)))
  let let125 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let19 let14)))
  let let126 := (binrel% LT.lt let29 let1)
  let let127 := (binrel% HMul.hMul x9 let1)
  let let128 := (Not let9)
  let let129 := (Eq let128 let8)
  let let130 := (binrel% GT.gt let12 let74)
  let let131 := (binrel% HMul.hMul x8 let15)
  let let132 := (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd let123 let127)))
  let let133 := (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd (binrel% HAdd.hAdd let131 let123) let127))
  let let134 := (binrel% LE.le let2 let106)
  let let135 := (binrel% LE.le let74 let78)
  let let136 := (binrel% LE.le let110 let3)
  let let137 := (binrel% LE.le let74 let104)
  let let138 := (binrel% LE.le let3 let81)
  let let139 := (binrel% LE.le let65 let2)
  let let140 := (binrel% LE.le let57 let3)
  let let141 := (binrel% LE.le let120 let74)
  let let142 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let86 let123) x8)
  let let143 := (binrel% LE.le let3 let142)
  let let144 := (binrel% GE.ge let133 let17)
  let let145 := (Not let144)
  let let146 := (And let145 (And let143 (And let141 (And let140 (And let139 (And let138 (And let137 (And let136 (And let135 let134)))))))))
  let let147 := (And let145 (And (And (And (And (And (And (And (And let143 let141) let140) let139) let138) let137) let136) let135) let134))
  let let148 := (Eq let8 let128)
  let let149 := (Eq let8 let8)
  let let150 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let123 x8)))
  let let151 := (Eq let97 let97)
  let let152 := (binrel% GT.gt let26 let74)
  let let153 := (Not True)
  let let154 := (binrel% LE.le let3 let91)
  let let155 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let51 let30)))
  let let156 := (binrel% GE.ge let70 let70)
  let let157 := (And let54 (And let116 (And let89 (And let82 (And let9 (And let98 (And let112 (And let66 (And let85 let121)))))))))
  let let158 := (Not let116)
  let let159 := (Or let97 (Or let158 (Or let52 let8)))
  let let160 := (Or let99 (Or let158 (Or let58 let128)))
  let let161 := (binrel% LT.lt let31 let37)
  let let162 := (And let130 let126)
  let let163 := (binrel% LE.le let44 let39)
  let let164 := (And let75 let116)
  let let165 := (binrel% LE.le let27 let40)
  let let166 := (binrel% LE.le let25 let17)
  let let167 := (And let152 let166)
  let let168 := (binrel% LE.le let13 let41)
  let let169 := (And let130 let32)
fun lean_r0 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let13 let11) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let27 let21) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let32 let9) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let48 let47) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let49 let22) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let44 let51) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let53 let52) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let57 let56) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let60 let59) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let65 let64) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let63 let4) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let69 let66) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let62 let6) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let72 let70) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let73 let7) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let75 True) => -- EVALUATE
fun lean_r20 : (Eq let78 let77) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let81 let80) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let76 let67) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let83 let82) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let88 let85) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let90 let89) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let92 let91) => -- THEORY_REWRITE_ARITH
fun lean_r27 : let95 => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let96 let87) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let61 let5) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let101 let100) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let102 let84) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let104 let103) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let106 let105) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let107 let18) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let108 let68) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let79 let50) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let110 let109) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let113 let112) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let114 True) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let115 let111) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let117 let116) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let120 let119) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let122 let121) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let123 let19) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let124 let43) => -- THEORY_REWRITE_ARITH
fun lean_r46 : let60 => -- THEORY_REWRITE_BOOL
fun lean_r47 : (Eq let125 let20) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let126 let98) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let127 let14) => -- THEORY_REWRITE_ARITH
fun lean_r50 : let129 => -- THEORY_REWRITE_BOOL
fun lean_r51 : (Eq let130 True) => -- EVALUATE
fun lean_r52 : (Eq let131 let16) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let133 let132) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let147 let146) => -- THEORY_REWRITE_BOOL
fun lean_r55 : (Eq let129 let148) => -- THEORY_REWRITE_BOOL
fun lean_r56 : (Eq let37 let26) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let118 let34) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let149 True) => -- THEORY_REWRITE_BOOL
fun lean_r59 : (Eq let142 let150) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let151 True) => -- THEORY_REWRITE_BOOL
fun lean_r61 : (Eq let152 True) => -- EVALUATE
fun lean_r62 : (Eq let153 False) => -- THEORY_REWRITE_BOOL
fun lean_r63 : (Eq let154 let98) => -- THEORY_REWRITE_ARITH
fun lean_r64 : let101 => -- THEORY_REWRITE_BOOL
fun lean_r65 : (Eq let155 let70) => -- THEORY_REWRITE_ARITH
fun lean_r66 : (Eq let156 True) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq let39 let12) => -- THEORY_REWRITE_ARITH
fun lean_r68 : (Eq let40 let71) => -- THEORY_REWRITE_ARITH
fun lean_r69 : (Eq let41 let12) => -- THEORY_REWRITE_ARITH
fun lean_a70 : let147 => by
have lean_s0 : (Or let99 (Or let158 (Or let58 (Or let128 False)))) :=
  (scope (fun lean_a71 : let98 =>
    (scope (fun lean_a72 : let116 =>
      (scope (fun lean_a73 : let54 =>
        (scope (fun lean_a74 : let9 =>
          have lean_s0 : (Eq let9 let10) := by timed Eq.symm lean_r0
          have lean_s1 : let10 := by timed eqResolve lean_a74 lean_s0
          have lean_s2 : let32 := by intTightUb lean_s1
          have lean_s3 : (Or let93 False) :=
            (scope (fun lean_a75 : let32 =>
              have lean_s3 : let130 := by timed trueElim lean_r51
              have lean_s4 : let169 := by timed And.intro lean_s3 lean_a75
              have lean_s5 : (Implies let169 let168) := by arithMulPos [let7, let2, let12], 1
              have lean_s6 : let168 := by timed modusPonens lean_s4 lean_s5
              have lean_s7 : let152 := by timed trueElim lean_r61
              have lean_s8 : (Eq let54 let55) := by timed Eq.symm lean_r10
              have lean_s9 : let55 := by timed eqResolve lean_a73 lean_s8
              have lean_s10 : let166 := by intTightUb lean_s9
              have lean_s11 : let167 := by timed And.intro lean_s7 lean_s10
              have lean_s12 : (Implies let167 let165) := by arithMulPos [let25, let17, let26], 1
              have lean_s13 : let165 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : let75 := by timed trueElim lean_r19
              have lean_s15 : let164 := by timed And.intro lean_s14 lean_a72
              have lean_s16 : (Implies let164 let163) := by arithMulNeg [let43, let3, let38], 3
              have lean_s17 : let163 := by timed modusPonens lean_s15 lean_s16
              have lean_s18 : (Eq let98 let126) := by timed Eq.symm lean_r48
              have lean_s19 : let126 := by timed eqResolve lean_a71 lean_s18
              have lean_s20 : let162 := by timed And.intro lean_s3 lean_s19
              have lean_s21 : (Implies let162 let161) := by arithMulPos [let29, let1, let12], 0
              have lean_s22 : let161 := by timed modusPonens lean_s20 lean_s21
              have lean_s23 : let48 := by sumBounds [lean_s6, lean_s13, lean_s17, lean_s22]
              let lean_s24 := by timed congrHAdd lean_r8 lean_r3
              let lean_s25 := by timed congrHAdd lean_r2 lean_s24
              have lean_s26 : (Eq let45 let155) := by timed congrHAdd lean_r1 lean_s25
              have lean_s27 : (Eq let45 let70) := by timed Eq.trans lean_s26 lean_r65
              let lean_s28 := by timed flipCongrArg lean_s27 [GE.ge]
              let lean_s29 := by timed congrHAdd lean_r67 lean_r56
              let lean_s30 := by timed congrHAdd lean_r68 lean_s29
              have lean_s31 : (Eq let42 let72) := by timed congrHAdd lean_r69 lean_s30
              have lean_s32 : (Eq let42 let70) := by timed Eq.trans lean_s31 lean_r17
              have lean_s33 : (Eq let46 let156) := by timed congr lean_s28 lean_s32
              have lean_s34 : (Eq let46 True) := by timed Eq.trans lean_s33 lean_r66
              have lean_s35 : (Eq let47 let153) := by timed flipCongrArg lean_s34 [Not]
              have lean_s36 : (Eq let47 False) := by timed Eq.trans lean_s35 lean_r62
              have lean_s37 : (Eq let48 False) := by timed Eq.trans lean_r6 lean_s36
              show False from by timed eqResolve lean_s23 lean_s37
            ))
          have lean_s4 : let93 := by liftOrNToNeg lean_s3
          have lean_s5 : (Eq let93 let128) := by timed flipCongrArg lean_r4 [Not]
          have lean_s6 : (Eq let93 let8) := by timed Eq.trans lean_s5 lean_r50
          have lean_s7 : (Eq let94 let8) := by timed Eq.trans lean_r27 lean_s6
          have lean_s8 : (Eq let8 let94) := by timed Eq.symm lean_s7
          have lean_s9 : (Eq let93 let94) := by timed Eq.trans lean_s6 lean_s8
          have lean_s10 : let94 := by timed eqResolve lean_s4 lean_s9
          have lean_s11 : (Eq let8 let93) := by timed Eq.symm lean_s6
          have lean_s12 : let95 := by timed Eq.trans lean_s7 lean_s11
          have lean_s13 : let93 := by timed eqResolve lean_s10 lean_s12
          show False from by timed contradiction lean_s2 lean_s13
  ))))))))
have lean_s1 : (Not (And let98 (And let116 (And let54 let9)))) := by liftOrNToNeg lean_s0
have lean_s2 : let160 := by timed flipNotAnd lean_s1 [let98, let116, let54, let9]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let151 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let100 let151) := by timed congr lean_s5 lean_r64
have lean_s7 : (Eq let100 True) := by timed Eq.trans lean_s6 lean_r60
have lean_s8 : (Eq let101 True) := by timed Eq.trans lean_r30 lean_s7
have lean_s9 : let101 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq let158 let158) := by timed rfl
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let114 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let59 let114) := by timed congr lean_s14 lean_r46
have lean_s16 : (Eq let59 True) := by timed Eq.trans lean_s15 lean_r39
have lean_s17 : (Eq let60 True) := by timed Eq.trans lean_r12 lean_s16
have lean_s18 : let60 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s3 lean_s18
have lean_s20 : let149 := by timed rfl
let lean_s21 := by timed flipCongrArg lean_s20 [Eq]
have lean_s22 : (Eq let148 let149) := by timed congr lean_s21 lean_r50
have lean_s23 : (Eq let148 True) := by timed Eq.trans lean_s22 lean_r58
have lean_s24 : (Eq let129 True) := by timed Eq.trans lean_r55 lean_s23
have lean_s25 : let129 := by timed trueElim lean_s24
let lean_s26 := by timed congr lean_s19 lean_s25
let lean_s27 := by timed congr lean_s12 lean_s26
have lean_s28 : (Eq let160 let159) := by timed congr lean_s10 lean_s27
have lean_s29 : let159 := by timed eqResolve lean_s2 lean_s28
have lean_s30 : (Or let52 (Or let8 (Or let97 let158))) := by permutateOr lean_s29, [2, 3, 0, 1], (- 1)
have lean_s31 : (Eq And And) := by timed rfl
let lean_s32 := by timed congrHAdd lean_r44 lean_r49
let lean_s33 := by timed congrHAdd lean_r52 lean_s32
have lean_s34 : (Eq let132 let125) := by timed congrHAdd lean_r34 lean_s33
have lean_s35 : (Eq let132 let20) := by timed Eq.trans lean_s34 lean_r47
have lean_s36 : (Eq let133 let20) := by timed Eq.trans lean_r53 lean_s35
let lean_s37 := by timed flipCongrArg lean_s36 [GE.ge]
have lean_s38 : (Eq let17 let17) := by timed rfl
have lean_s39 : (Eq let144 let53) := by timed congr lean_s37 lean_s38
have lean_s40 : (Eq let144 let52) := by timed Eq.trans lean_s39 lean_r9
have lean_s41 : (Eq let145 let54) := by timed flipCongrArg lean_s40 [Not]
let lean_s42 := by timed congr lean_s31 lean_s41
have lean_s43 : (Eq let3 let3) := by timed rfl
let lean_s44 := by timed flipCongrArg lean_s43 [LE.le]
have lean_s45 : (Eq x6 x6) := by timed rfl
have lean_s46 : (Eq x9 x9) := by timed rfl
have lean_s47 : (Eq x8 x8) := by timed rfl
let lean_s48 := by timed congrHAdd lean_r44 lean_s47
let lean_s49 := by timed congrHAdd lean_s46 lean_s48
have lean_s50 : (Eq let150 let124) := by timed congrHAdd lean_s45 lean_s49
have lean_s51 : (Eq let150 let43) := by timed Eq.trans lean_s50 lean_r45
have lean_s52 : (Eq let142 let43) := by timed Eq.trans lean_r59 lean_s51
have lean_s53 : (Eq let143 let117) := by timed congr lean_s44 lean_s52
have lean_s54 : (Eq let143 let116) := by timed Eq.trans lean_s53 lean_r41
let lean_s55 := by timed congr lean_s31 lean_s54
have lean_s56 : (Eq x0 x0) := by timed rfl
have lean_s57 : (Eq x5 x5) := by timed rfl
let lean_s58 := by timed congrHAdd lean_s57 lean_r29
let lean_s59 := by timed congrHAdd lean_s56 lean_s58
have lean_s60 : (Eq let119 let36) := by timed congrHAdd lean_r57 lean_s59
have lean_s61 : (Eq let119 let35) := by timed Eq.trans lean_s60 lean_r5
have lean_s62 : (Eq let120 let35) := by timed Eq.trans lean_r42 lean_s61
let lean_s63 := by timed flipCongrArg lean_s62 [LE.le]
have lean_s64 : (Eq let74 let74) := by timed rfl
have lean_s65 : (Eq let141 let90) := by timed congr lean_s63 lean_s64
have lean_s66 : (Eq let141 let89) := by timed Eq.trans lean_s65 lean_r25
let lean_s67 := by timed congr lean_s31 lean_s66
let lean_s68 := by timed flipCongrArg lean_r11 [LE.le]
have lean_s69 : (Eq let140 let83) := by timed congr lean_s68 lean_s43
have lean_s70 : (Eq let140 let82) := by timed Eq.trans lean_s69 lean_r23
let lean_s71 := by timed congr lean_s31 lean_s70
let lean_s72 := by timed congrHAdd lean_r16 lean_r29
have lean_s73 : (Eq let64 let73) := by timed congrHAdd lean_r14 lean_s72
have lean_s74 : (Eq let64 let7) := by timed Eq.trans lean_s73 lean_r18
have lean_s75 : (Eq let65 let7) := by timed Eq.trans lean_r13 lean_s74
let lean_s76 := by timed flipCongrArg lean_s75 [LE.le]
have lean_s77 : (Eq let2 let2) := by timed rfl
have lean_s78 : (Eq let139 let32) := by timed congr lean_s76 lean_s77
have lean_s79 : (Eq let139 let9) := by timed Eq.trans lean_s78 lean_r4
let lean_s80 := by timed congr lean_s31 lean_s79
let lean_s81 := by timed flipCongrArg lean_s43 [LE.le]
let lean_s82 := by timed congrHAdd lean_r7 lean_r29
let lean_s83 := by timed congrHAdd lean_s46 lean_s82
have lean_s84 : (Eq let80 let92) := by timed congrHAdd lean_r36 lean_s83
have lean_s85 : (Eq let80 let91) := by timed Eq.trans lean_s84 lean_r26
have lean_s86 : (Eq let81 let91) := by timed Eq.trans lean_r21 lean_s85
have lean_s87 : (Eq let138 let154) := by timed congr lean_s81 lean_s86
have lean_s88 : (Eq let138 let98) := by timed Eq.trans lean_s87 lean_r63
let lean_s89 := by timed congr lean_s31 lean_s88
let lean_s90 := by timed flipCongrArg lean_s64 [LE.le]
have lean_s91 : (Eq x1 x1) := by timed rfl
let lean_s92 := by timed congrHAdd lean_s91 lean_r29
have lean_s93 : (Eq let103 let115) := by timed congrHAdd lean_r31 lean_s92
have lean_s94 : (Eq let103 let111) := by timed Eq.trans lean_s93 lean_r40
have lean_s95 : (Eq let104 let111) := by timed Eq.trans lean_r32 lean_s94
have lean_s96 : (Eq let137 let113) := by timed congr lean_s90 lean_s95
have lean_s97 : (Eq let137 let112) := by timed Eq.trans lean_s96 lean_r38
let lean_s98 := by timed congr lean_s31 lean_s97
let lean_s99 := by timed congrHAdd lean_s47 lean_r29
let lean_s100 := by timed congrHAdd lean_s57 lean_s99
let lean_s101 := by timed congrHAdd lean_s45 lean_s100
have lean_s102 : (Eq let109 let108) := by timed congrHAdd lean_r22 lean_s101
have lean_s103 : (Eq let109 let68) := by timed Eq.trans lean_s102 lean_r35
have lean_s104 : (Eq let110 let68) := by timed Eq.trans lean_r37 lean_s103
let lean_s105 := by timed flipCongrArg lean_s104 [LE.le]
have lean_s106 : (Eq let136 let69) := by timed congr lean_s105 lean_s43
have lean_s107 : (Eq let136 let66) := by timed Eq.trans lean_s106 lean_r15
let lean_s108 := by timed congr lean_s31 lean_s107
let lean_s109 := by timed flipCongrArg lean_s64 [LE.le]
have lean_s110 : (Eq x4 x4) := by timed rfl
have lean_s111 : (Eq x2 x2) := by timed rfl
let lean_s112 := by timed congrHAdd lean_r22 lean_s111
let lean_s113 := by timed congrHAdd lean_s45 lean_s112
let lean_s114 := by timed congrHAdd lean_s110 lean_s113
have lean_s115 : (Eq let77 let96) := by timed congrHAdd lean_s46 lean_s114
have lean_s116 : (Eq let77 let87) := by timed Eq.trans lean_s115 lean_r28
have lean_s117 : (Eq let78 let87) := by timed Eq.trans lean_r20 lean_s116
have lean_s118 : (Eq let135 let88) := by timed congr lean_s109 lean_s117
have lean_s119 : (Eq let135 let85) := by timed Eq.trans lean_s118 lean_r24
let lean_s120 := by timed congr lean_s31 lean_s119
let lean_s121 := by timed flipCongrArg lean_s77 [LE.le]
have lean_s122 : (Eq let134 let122) := by timed congr lean_s121 lean_r33
have lean_s123 : (Eq let134 let121) := by timed Eq.trans lean_s122 lean_r43
let lean_s124 := by timed congr lean_s120 lean_s123
let lean_s125 := by timed congr lean_s108 lean_s124
let lean_s126 := by timed congr lean_s98 lean_s125
let lean_s127 := by timed congr lean_s89 lean_s126
let lean_s128 := by timed congr lean_s80 lean_s127
let lean_s129 := by timed congr lean_s71 lean_s128
let lean_s130 := by timed congr lean_s67 lean_s129
let lean_s131 := by timed congr lean_s55 lean_s130
have lean_s132 : (Eq let146 let157) := by timed congr lean_s42 lean_s131
have lean_s133 : (Eq let147 let157) := by timed Eq.trans lean_r54 lean_s132
have lean_s134 : let157 := by timed eqResolve lean_a70 lean_s133
have lean_s135 : let98 := by andElim lean_s134, 5
let lean_s136 := by R1 lean_s30, lean_s135, let97, [(- 1), 0]
have lean_s137 : let9 := by andElim lean_s134, 4
let lean_s138 := by R1 lean_s136, lean_s137, let8, [(- 1), 0]
have lean_s139 : let116 := by andElim lean_s134, 1
let lean_s140 := by R2 lean_s138, lean_s139, let116, [(- 1), 0]
have lean_s141 : let54 := by andElim lean_s134, 0
exact (show False from by R1 lean_s140, lean_s141, let52, [0, 0])


