open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x4 : Int}
variable {x3 : Int}
variable {x8 : Int}
variable {x7 : Int}
variable {x4 : Int}
variable {x3 : Int}
variable {x8 : Int}
variable {x7 : Int}

theorem th0 :
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x7) (binrel% HMul.hMul let2 x8))
  let let4 := (binrel% HAdd.hAdd x4 let3)
  let let5 := (binrel% GE.ge let4 let1)
  let let6 := (Not let5)
  let let7 := (binrel% LT.lt let4 let1)
  let let8 := (Int.ofNat 0)
  let let9 := (Rat.ofInt 1)
  let let10 := (binrel% GT.gt let9 let8)
  let let11 := (Int.ofNat 2)
  let let12 := (binrel% HDiv.hDiv let1 let11)
  let let13 := (binrel% HMul.hMul let12 let1)
  let let14 := (Neg.neg let12)
  let let15 := (binrel% HMul.hMul let14 let1)
  let let16 := (binrel% HMul.hMul let9 let8)
  let let17 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let15 let13))
  let let18 := (binrel% HAdd.hAdd x7 x8)
  let let19 := (binrel% HAdd.hAdd x3 let18)
  let let20 := (binrel% HMul.hMul let12 let19)
  let let21 := (binrel% HMul.hMul let11 x4)
  let let22 := (binrel% HAdd.hAdd x3 (binrel% HAdd.hAdd let21 let3))
  let let23 := (binrel% HMul.hMul let14 let22)
  let let24 := (binrel% HMul.hMul let9 let4)
  let let25 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let23 let20))
  let let26 := (binrel% GE.ge let25 let17)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let17)
  let let29 := (binrel% HAdd.hAdd (binrel% HMul.hMul let12 x7) (binrel% HMul.hMul let12 x8))
  let let30 := (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x3) (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x4) let29))
  let let31 := (Neg.neg let11)
  let let32 := (binrel% HMul.hMul let31 x8)
  let let33 := (binrel% HMul.hMul let31 x7)
  let let34 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let33 let32))
  let let35 := (binrel% GE.ge let34 let11)
  let let36 := (binrel% GE.ge x4 let1)
  let let37 := (binrel% LE.le let1 x4)
  let let38 := (binrel% HMul.hMul x4 let31)
  let let39 := (Neg.neg x3)
  let let40 := (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd let38 x7)))
  let let41 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let39 x8) let38) x7)
  let let42 := (Rat.ofInt let4)
  let let43 := (binrel% HMul.hMul let31 x4)
  let let44 := (Not let6)
  let let45 := (Eq let44 let5)
  let let46 := (Rat.ofInt 0)
  let let47 := (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let14 let12))
  let let48 := (binrel% LT.lt let14 let8)
  let let49 := (binrel% GE.ge let22 let1)
  let let50 := (binrel% HMul.hMul let2 x3)
  let let51 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let43 let18))
  let let52 := (binrel% LE.le let51 let2)
  let let53 := (Eq let5 let44)
  let let54 := (binrel% GE.ge let19 let1)
  let let55 := (Not let54)
  let let56 := (Not let55)
  let let57 := (Eq let56 let54)
  let let58 := (binrel% HMul.hMul x4 let11)
  let let59 := (binrel% LE.le let4 let8)
  let let60 := (Not let59)
  let let61 := (binrel% GT.gt let4 let8)
  let let62 := (Eq let61 let60)
  let let63 := (binrel% LE.le let19 let8)
  let let64 := (binrel% HAdd.hAdd x3 (binrel% HAdd.hAdd x8 x7))
  let let65 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd x3 x8) x7)
  let let66 := (Eq let5 let5)
  let let67 := (binrel% LT.lt let19 let1)
  let let68 := (binrel% LE.le let65 let8)
  let let69 := (binrel% LE.le let41 let2)
  let let70 := (Not let37)
  let let71 := (binrel% HMul.hMul x8 let31)
  let let72 := (binrel% HMul.hMul x7 let31)
  let let73 := (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let72 let71))
  let let74 := (binrel% GE.ge let73 let11)
  let let75 := (Not let74)
  let let76 := (And let75 (And let70 (And let69 let68)))
  let let77 := (And let75 (And (And let70 let69) let68))
  let let78 := (Eq let54 let54)
  let let79 := (binrel% HAdd.hAdd (binrel% HMul.hMul let12 x3) let29)
  let let80 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let30 let79))
  let let81 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd let43 x7)))
  let let82 := (Eq let54 let56)
  let let83 := (Not True)
  let let84 := (binrel% GT.gt let12 let8)
  let let85 := (binrel% GE.ge let46 let46)
  let let86 := (Not let36)
  let let87 := (And let6 (And let86 (And let49 let55)))
  let let88 := (Eq let73 let34)
  let let89 := (Not let49)
  let let90 := (Or let54 (Or let89 let5))
  let let91 := (Or let56 (Or let89 let44))
  let let92 := (binrel% LT.lt let20 let13)
  let let93 := (And let84 let67)
  let let94 := (binrel% LE.le let23 let15)
  let let95 := (And let48 let49)
  let let96 := (binrel% LE.le let24 let16)
  let let97 := (And let10 let59)
(Eq let7 let6) → (Eq let10 True) → (Eq let28 let27) → (Eq let23 let30) → (Eq let35 let5) → (Eq let37 let36) → (Eq let41 let40) → (Eq let24 let42) → (Eq let38 let43) → let45 → (Eq let16 let46) → (Eq let47 let46) → (Eq let48 True) → (Eq let52 let49) → (Eq let45 let53) → let57 → (Eq let58 let21) → let62 → (Eq let39 let50) → (Eq let63 let55) → (Eq let65 let64) → (Eq let66 True) → (Eq let67 let55) → (Eq let13 let12) → (Eq let59 let6) → (Eq let64 let19) → (Eq let77 let76) → (Eq let71 let32) → (Eq let72 let33) → (Eq let78 True) → (Eq let80 let46) → (Eq let81 let51) → (Eq let73 let73) → (Eq let57 let82) → (Eq let20 let79) → (Eq let83 False) → (Eq let84 True) → (Eq let15 let14) → (Eq let85 True) → let77 → False :=
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x7) (binrel% HMul.hMul let2 x8))
  let let4 := (binrel% HAdd.hAdd x4 let3)
  let let5 := (binrel% GE.ge let4 let1)
  let let6 := (Not let5)
  let let7 := (binrel% LT.lt let4 let1)
  let let8 := (Int.ofNat 0)
  let let9 := (Rat.ofInt 1)
  let let10 := (binrel% GT.gt let9 let8)
  let let11 := (Int.ofNat 2)
  let let12 := (binrel% HDiv.hDiv let1 let11)
  let let13 := (binrel% HMul.hMul let12 let1)
  let let14 := (Neg.neg let12)
  let let15 := (binrel% HMul.hMul let14 let1)
  let let16 := (binrel% HMul.hMul let9 let8)
  let let17 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let15 let13))
  let let18 := (binrel% HAdd.hAdd x7 x8)
  let let19 := (binrel% HAdd.hAdd x3 let18)
  let let20 := (binrel% HMul.hMul let12 let19)
  let let21 := (binrel% HMul.hMul let11 x4)
  let let22 := (binrel% HAdd.hAdd x3 (binrel% HAdd.hAdd let21 let3))
  let let23 := (binrel% HMul.hMul let14 let22)
  let let24 := (binrel% HMul.hMul let9 let4)
  let let25 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let23 let20))
  let let26 := (binrel% GE.ge let25 let17)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let17)
  let let29 := (binrel% HAdd.hAdd (binrel% HMul.hMul let12 x7) (binrel% HMul.hMul let12 x8))
  let let30 := (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x3) (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x4) let29))
  let let31 := (Neg.neg let11)
  let let32 := (binrel% HMul.hMul let31 x8)
  let let33 := (binrel% HMul.hMul let31 x7)
  let let34 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let33 let32))
  let let35 := (binrel% GE.ge let34 let11)
  let let36 := (binrel% GE.ge x4 let1)
  let let37 := (binrel% LE.le let1 x4)
  let let38 := (binrel% HMul.hMul x4 let31)
  let let39 := (Neg.neg x3)
  let let40 := (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd let38 x7)))
  let let41 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let39 x8) let38) x7)
  let let42 := (Rat.ofInt let4)
  let let43 := (binrel% HMul.hMul let31 x4)
  let let44 := (Not let6)
  let let45 := (Eq let44 let5)
  let let46 := (Rat.ofInt 0)
  let let47 := (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let14 let12))
  let let48 := (binrel% LT.lt let14 let8)
  let let49 := (binrel% GE.ge let22 let1)
  let let50 := (binrel% HMul.hMul let2 x3)
  let let51 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let43 let18))
  let let52 := (binrel% LE.le let51 let2)
  let let53 := (Eq let5 let44)
  let let54 := (binrel% GE.ge let19 let1)
  let let55 := (Not let54)
  let let56 := (Not let55)
  let let57 := (Eq let56 let54)
  let let58 := (binrel% HMul.hMul x4 let11)
  let let59 := (binrel% LE.le let4 let8)
  let let60 := (Not let59)
  let let61 := (binrel% GT.gt let4 let8)
  let let62 := (Eq let61 let60)
  let let63 := (binrel% LE.le let19 let8)
  let let64 := (binrel% HAdd.hAdd x3 (binrel% HAdd.hAdd x8 x7))
  let let65 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd x3 x8) x7)
  let let66 := (Eq let5 let5)
  let let67 := (binrel% LT.lt let19 let1)
  let let68 := (binrel% LE.le let65 let8)
  let let69 := (binrel% LE.le let41 let2)
  let let70 := (Not let37)
  let let71 := (binrel% HMul.hMul x8 let31)
  let let72 := (binrel% HMul.hMul x7 let31)
  let let73 := (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let72 let71))
  let let74 := (binrel% GE.ge let73 let11)
  let let75 := (Not let74)
  let let76 := (And let75 (And let70 (And let69 let68)))
  let let77 := (And let75 (And (And let70 let69) let68))
  let let78 := (Eq let54 let54)
  let let79 := (binrel% HAdd.hAdd (binrel% HMul.hMul let12 x3) let29)
  let let80 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let30 let79))
  let let81 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x8 (binrel% HAdd.hAdd let43 x7)))
  let let82 := (Eq let54 let56)
  let let83 := (Not True)
  let let84 := (binrel% GT.gt let12 let8)
  let let85 := (binrel% GE.ge let46 let46)
  let let86 := (Not let36)
  let let87 := (And let6 (And let86 (And let49 let55)))
  let let88 := (Eq let73 let34)
  let let89 := (Not let49)
  let let90 := (Or let54 (Or let89 let5))
  let let91 := (Or let56 (Or let89 let44))
  let let92 := (binrel% LT.lt let20 let13)
  let let93 := (And let84 let67)
  let let94 := (binrel% LE.le let23 let15)
  let let95 := (And let48 let49)
  let let96 := (binrel% LE.le let24 let16)
  let let97 := (And let10 let59)
fun lean_r0 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let10 True) => -- EVALUATE
fun lean_r2 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let23 let30) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let35 let5) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let24 let42) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let38 let43) => -- THEORY_REWRITE_ARITH
fun lean_r9 : let45 => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let16 let46) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let47 let46) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let48 True) => -- EVALUATE
fun lean_r13 : (Eq let52 let49) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let45 let53) => -- THEORY_REWRITE_BOOL
fun lean_r15 : let57 => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let58 let21) => -- THEORY_REWRITE_ARITH
fun lean_r17 : let62 => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let39 let50) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let63 let55) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let65 let64) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let66 True) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let67 let55) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let59 let6) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let64 let19) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let77 let76) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let71 let32) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let72 let33) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let78 True) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let80 let46) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let81 let51) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let73 let73) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let57 let82) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let20 let79) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let83 False) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let84 True) => -- EVALUATE
fun lean_r37 : (Eq let15 let14) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let85 True) => -- THEORY_REWRITE_ARITH
fun lean_a39 : let77 => by
have lean_s0 : (Or let56 (Or let89 (Or let44 False))) :=
  (scope (fun lean_a40 : let55 =>
    (scope (fun lean_a41 : let49 =>
      (scope (fun lean_a42 : let6 =>
        have lean_s0 : (Eq let6 let7) := by timed Eq.symm lean_r0
        have lean_s1 : let7 := by timed eqResolve lean_a42 lean_s0
        have lean_s2 : let59 := by intTightUb lean_s1
        have lean_s3 : (Or let60 False) :=
          (scope (fun lean_a43 : let59 =>
            have lean_s3 : let10 := by timed trueElim lean_r1
            have lean_s4 : let97 := by timed And.intro lean_s3 lean_a43
            have lean_s5 : (Implies let97 let96) := by arithMulPos [let4, let8, let9], 1
            have lean_s6 : let96 := by timed modusPonens lean_s4 lean_s5
            have lean_s7 : let48 := by timed trueElim lean_r12
            have lean_s8 : let95 := by timed And.intro lean_s7 lean_a41
            have lean_s9 : (Implies let95 let94) := by arithMulNeg [let22, let1, let14], 3
            have lean_s10 : let94 := by timed modusPonens lean_s8 lean_s9
            have lean_s11 : let84 := by timed trueElim lean_r36
            have lean_s12 : (Eq let55 let67) := by timed Eq.symm lean_r22
            have lean_s13 : let67 := by timed eqResolve lean_a40 lean_s12
            have lean_s14 : let93 := by timed And.intro lean_s11 lean_s13
            have lean_s15 : (Implies let93 let92) := by arithMulPos [let19, let1, let12], 0
            have lean_s16 : let92 := by timed modusPonens lean_s14 lean_s15
            have lean_s17 : let28 := by sumBounds [lean_s6, lean_s10, lean_s16]
            let lean_s18 := by timed congrHAdd lean_r3 lean_r34
            have lean_s19 : (Eq let25 let80) := by timed congrHAdd lean_r7 lean_s18
            have lean_s20 : (Eq let25 let46) := by timed Eq.trans lean_s19 lean_r30
            let lean_s21 := by timed flipCongrArg lean_s20 [GE.ge]
            let lean_s22 := by timed congrHAdd lean_r37 lean_r23
            have lean_s23 : (Eq let17 let47) := by timed congrHAdd lean_r10 lean_s22
            have lean_s24 : (Eq let17 let46) := by timed Eq.trans lean_s23 lean_r11
            have lean_s25 : (Eq let26 let85) := by timed congr lean_s21 lean_s24
            have lean_s26 : (Eq let26 True) := by timed Eq.trans lean_s25 lean_r38
            have lean_s27 : (Eq let27 let83) := by timed flipCongrArg lean_s26 [Not]
            have lean_s28 : (Eq let27 False) := by timed Eq.trans lean_s27 lean_r35
            have lean_s29 : (Eq let28 False) := by timed Eq.trans lean_r2 lean_s28
            show False from by timed eqResolve lean_s17 lean_s29
          ))
        have lean_s4 : let60 := by liftOrNToNeg lean_s3
        have lean_s5 : (Eq let60 let44) := by timed flipCongrArg lean_r24 [Not]
        have lean_s6 : (Eq let60 let5) := by timed Eq.trans lean_s5 lean_r9
        have lean_s7 : (Eq let61 let5) := by timed Eq.trans lean_r17 lean_s6
        have lean_s8 : (Eq let5 let61) := by timed Eq.symm lean_s7
        have lean_s9 : (Eq let60 let61) := by timed Eq.trans lean_s6 lean_s8
        have lean_s10 : let61 := by timed eqResolve lean_s4 lean_s9
        have lean_s11 : (Eq let5 let60) := by timed Eq.symm lean_s6
        have lean_s12 : let62 := by timed Eq.trans lean_s7 lean_s11
        have lean_s13 : let60 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s2 lean_s13
  ))))))
have lean_s1 : (Not (And let55 (And let49 let6))) := by liftOrNToNeg lean_s0
have lean_s2 : let91 := by timed flipNotAnd lean_s1 [let55, let49, let6]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let78 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let82 let78) := by timed congr lean_s5 lean_r15
have lean_s7 : (Eq let82 True) := by timed Eq.trans lean_s6 lean_r29
have lean_s8 : (Eq let57 True) := by timed Eq.trans lean_r33 lean_s7
have lean_s9 : let57 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq let89 let89) := by timed rfl
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let66 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let53 let66) := by timed congr lean_s14 lean_r9
have lean_s16 : (Eq let53 True) := by timed Eq.trans lean_s15 lean_r21
have lean_s17 : (Eq let45 True) := by timed Eq.trans lean_r14 lean_s16
have lean_s18 : let45 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s12 lean_s18
have lean_s20 : (Eq let91 let90) := by timed congr lean_s10 lean_s19
have lean_s21 : let90 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let5 (Or let54 let89)) := by permutateOr lean_s21, [2, 0, 1], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
let lean_s24 := by timed congrHAdd lean_r28 lean_r27
have lean_s25 : let88 := by timed congrHAdd lean_r16 lean_s24
have lean_s26 : let88 := by timed Eq.trans lean_r32 lean_s25
let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
have lean_s28 : (Eq let11 let11) := by timed rfl
have lean_s29 : (Eq let74 let35) := by timed congr lean_s27 lean_s28
have lean_s30 : (Eq let74 let5) := by timed Eq.trans lean_s29 lean_r4
have lean_s31 : (Eq let75 let6) := by timed flipCongrArg lean_s30 [Not]
let lean_s32 := by timed congr lean_s23 lean_s31
have lean_s33 : (Eq let70 let86) := by timed flipCongrArg lean_r5 [Not]
let lean_s34 := by timed congr lean_s23 lean_s33
have lean_s35 : (Eq x8 x8) := by timed rfl
have lean_s36 : (Eq x7 x7) := by timed rfl
let lean_s37 := by timed congrHAdd lean_r8 lean_s36
let lean_s38 := by timed congrHAdd lean_s35 lean_s37
have lean_s39 : (Eq let40 let81) := by timed congrHAdd lean_r18 lean_s38
have lean_s40 : (Eq let40 let51) := by timed Eq.trans lean_s39 lean_r31
have lean_s41 : (Eq let41 let51) := by timed Eq.trans lean_r6 lean_s40
let lean_s42 := by timed flipCongrArg lean_s41 [LE.le]
have lean_s43 : (Eq let2 let2) := by timed rfl
have lean_s44 : (Eq let69 let52) := by timed congr lean_s42 lean_s43
have lean_s45 : (Eq let69 let49) := by timed Eq.trans lean_s44 lean_r13
let lean_s46 := by timed congr lean_s23 lean_s45
have lean_s47 : (Eq let65 let19) := by timed Eq.trans lean_r20 lean_r25
let lean_s48 := by timed flipCongrArg lean_s47 [LE.le]
have lean_s49 : (Eq let8 let8) := by timed rfl
have lean_s50 : (Eq let68 let63) := by timed congr lean_s48 lean_s49
have lean_s51 : (Eq let68 let55) := by timed Eq.trans lean_s50 lean_r19
let lean_s52 := by timed congr lean_s46 lean_s51
let lean_s53 := by timed congr lean_s34 lean_s52
have lean_s54 : (Eq let76 let87) := by timed congr lean_s32 lean_s53
have lean_s55 : (Eq let77 let87) := by timed Eq.trans lean_r26 lean_s54
have lean_s56 : let87 := by timed eqResolve lean_a39 lean_s55
have lean_s57 : let55 := by andElim lean_s56, 3
let lean_s58 := by R1 lean_s22, lean_s57, let54, [(- 1), 0]
have lean_s59 : let49 := by andElim lean_s56, 2
let lean_s60 := by R2 lean_s58, lean_s59, let49, [(- 1), 0]
have lean_s61 : let6 := by andElim lean_s56, 0
exact (show False from by R1 lean_s60, lean_s61, let5, [0, 0])


