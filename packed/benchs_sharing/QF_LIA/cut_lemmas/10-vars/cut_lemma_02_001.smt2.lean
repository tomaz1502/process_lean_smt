open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x9 : Int}
variable {x4 : Int}
variable {x6 : Int}
variable {x1 : Int}
variable {x5 : Int}
variable {x8 : Int}
variable {x2 : Int}
variable {x0 : Int}
variable {x0 : Int}
variable {x4 : Int}
variable {x9 : Int}
variable {x5 : Int}
variable {x7 : Int}
variable {x6 : Int}
variable {x1 : Int}
variable {x7 : Int}
variable {x8 : Int}
variable {x2 : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 5)
  let let5 := (Int.ofNat 8)
  let let6 := (binrel% HDiv.hDiv let5 let4)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% LT.lt let7 let1)
  let let9 := (Int.ofNat 2)
  let let10 := (binrel% HDiv.hDiv let9 let4)
  let let11 := (binrel% GT.gt let10 let1)
  let let12 := (binrel% HDiv.hDiv (Int.ofNat 4) let4)
  let let13 := (Neg.neg let12)
  let let14 := (binrel% LT.lt let13 let1)
  let let15 := (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let12 x2) (binrel% HMul.hMul let12 x7)))
  let let16 := (Int.ofNat 1)
  let let17 := (Neg.neg let16)
  let let18 := (binrel% HMul.hMul let17 x7)
  let let19 := (binrel% HMul.hMul let17 x2)
  let let20 := (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let19 let18))
  let let21 := (binrel% HMul.hMul let13 let20)
  let let22 := (binrel% HMul.hMul let2 let16)
  let let23 := (binrel% HDiv.hDiv (Int.ofNat 7) let4)
  let let24 := (binrel% HMul.hMul let23 let16)
  let let25 := (Neg.neg let2)
  let let26 := (binrel% HMul.hMul let25 let17)
  let let27 := (Rat.ofInt 0)
  let let28 := (binrel% HDiv.hDiv (Int.ofNat 6) let4)
  let let29 := (binrel% HMul.hMul let28 let1)
  let let30 := (Neg.neg let10)
  let let31 := (binrel% HMul.hMul let10 let17)
  let let32 := (binrel% HMul.hMul let10 let1)
  let let33 := (binrel% HMul.hMul let13 let1)
  let let34 := (Neg.neg (binrel% HDiv.hDiv let16 let4))
  let let35 := (Int.ofNat 16)
  let let36 := (binrel% HDiv.hDiv let35 let4)
  let let37 := (Neg.neg let36)
  let let38 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let27 let27)))))))
  let let39 := (binrel% LT.lt let25 let1)
  let let40 := (binrel% LE.le let27 let34)
  let let41 := (binrel% HMul.hMul let17 x8)
  let let42 := (binrel% HMul.hMul let9 x5)
  let let43 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let18 let41))
  let let44 := (binrel% LE.le let43 let16)
  let let45 := (Not let44)
  let let46 := (binrel% GT.gt let43 let16)
  let let47 := (Eq let46 let45)
  let let48 := (binrel% GT.gt let23 let1)
  let let49 := (binrel% HMul.hMul let17 x9)
  let let50 := (binrel% HMul.hMul let17 x6)
  let let51 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd (binrel% HMul.hMul let17 x4) (binrel% HAdd.hAdd let50 let49))))
  let let52 := (binrel% GE.ge let51 let16)
  let let53 := (Not let52)
  let let54 := (Not let53)
  let let55 := (Eq let52 let54)
  let let56 := (Eq let54 let52)
  let let57 := (binrel% LT.lt let51 let16)
  let let58 := (binrel% GE.ge let43 let9)
  let let59 := (Not let58)
  let let60 := (Neg.neg let9)
  let let61 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 3)) x8) (binrel% HMul.hMul let60 x9))))))
  let let62 := (binrel% GE.ge let61 let9)
  let let63 := (Not let62)
  let let64 := (Neg.neg let5)
  let let65 := (binrel% HMul.hMul let35 x9)
  let let66 := (Int.ofNat 24)
  let let67 := (binrel% HMul.hMul let66 x8)
  let let68 := (Neg.neg let35)
  let let69 := (binrel% HMul.hMul let68 x5)
  let let70 := (binrel% HMul.hMul let5 x2)
  let let71 := (binrel% HMul.hMul let64 x1)
  let let72 := (binrel% HMul.hMul let64 x0)
  let let73 := (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let67 let65)))))
  let let74 := (binrel% GE.ge let73 let64)
  let let75 := (binrel% HAdd.hAdd x4 let49)
  let let76 := (binrel% HSub.hSub x4 x9)
  let let77 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x2) (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let41 let49))))
  let let78 := (binrel% HMul.hMul let9 x2)
  let let79 := (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x8 x9)))
  let let80 := (binrel% HMul.hMul let25 let79)
  let let81 := (binrel% HMul.hMul x2 let9)
  let let82 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let81 x8)))
  let let83 := (binrel% HAdd.hAdd x6 x9)
  let let84 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let83 let81) x8)
  let let85 := (Neg.neg x7)
  let let86 := (binrel% HMul.hMul x5 let9)
  let let87 := (Neg.neg x8)
  let let88 := (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let86 let85))
  let let89 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let87 let86) let85)
  let let90 := (binrel% HMul.hMul let30 x9)
  let let91 := (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x0) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x2) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x4) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x6) let90))))
  let let92 := (binrel% HMul.hMul let10 let51)
  let let93 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let78 x8)))
  let let94 := (Not let59)
  let let95 := (Eq let58 let94)
  let let96 := (Eq let94 let58)
  let let97 := (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x0) (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x2) (binrel% HAdd.hAdd (binrel% HMul.hMul let37 x5) (binrel% HAdd.hAdd (binrel% HMul.hMul (binrel% HDiv.hDiv let66 let4) x8) (binrel% HMul.hMul let36 x9))))))
  let let98 := (binrel% HMul.hMul let7 let61)
  let let99 := (Neg.neg x2)
  let let100 := (binrel% HAdd.hAdd let99 (binrel% HAdd.hAdd x1 let85))
  let let101 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let99 x1) let85)
  let let102 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x8) let49)))
  let let103 := (binrel% GE.ge let102 let9)
  let let104 := (Eq let103 let103)
  let let105 := (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let42 let18))
  let let106 := (Neg.neg x6)
  let let107 := (binrel% HMul.hMul let9 x8)
  let let108 := (binrel% HMul.hMul x8 let9)
  let let109 := (binrel% HAdd.hAdd x5 let18)
  let let110 := (binrel% HMul.hMul let9 x1)
  let let111 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let110 let109))
  let let112 := (binrel% HAdd.hAdd let110 (binrel% HAdd.hAdd x0 let109))
  let let113 := (binrel% HMul.hMul x8 let66)
  let let114 := (binrel% HMul.hMul x2 let5)
  let let115 := (binrel% HMul.hMul x9 let35)
  let let116 := (binrel% HMul.hMul x5 let68)
  let let117 := (binrel% HMul.hMul x1 let64)
  let let118 := (binrel% HMul.hMul x0 let64)
  let let119 := (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let114 let113)))))
  let let120 := (binrel% GE.ge let111 let16)
  let let121 := (Not let120)
  let let122 := (binrel% LE.le let111 let1)
  let let123 := (Rat.ofInt let43)
  let let124 := (binrel% HMul.hMul let2 let43)
  let let125 := (Not let63)
  let let126 := (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x6) (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x7) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) let4)) x8) (binrel% HMul.hMul (Neg.neg let23) x9))))
  let let127 := (binrel% HMul.hMul let23 let102)
  let let128 := (Not let103)
  let let129 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let107 x9)))
  let let130 := (binrel% LE.le let17 let129)
  let let131 := (binrel% HMul.hMul let17 x0)
  let let132 := (Neg.neg x0)
  let let133 := (binrel% GE.ge let75 let1)
  let let134 := (Not let133)
  let let135 := (Not let134)
  let let136 := (Eq let135 let133)
  let let137 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let107 let18)))
  let let138 := (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x4 let83)))
  let let139 := (binrel% LE.le let1 let138)
  let let140 := (binrel% HAdd.hAdd (binrel% HMul.hMul let28 x0) (binrel% HAdd.hAdd (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 12) let4) x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let28 x5) (binrel% HMul.hMul (Neg.neg let28) x7))))
  let let141 := (binrel% HMul.hMul let28 let111)
  let let142 := (binrel% HAdd.hAdd x1 x8)
  let let143 := (binrel% GE.ge let142 let16)
  let let144 := (binrel% LE.le let16 let142)
  let let145 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let132 x2))))
  let let146 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x9 x4) x6) let132) x2)
  let let147 := (binrel% GE.ge let79 let17)
  let let148 := (binrel% LE.le let17 let79)
  let let149 := (binrel% GT.gt let28 let1)
  let let150 := (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x4) let90)
  let let151 := (binrel% HMul.hMul let10 let75)
  let let152 := (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let70 let67)))))
  let let153 := (binrel% HMul.hMul let7 let9)
  let let154 := (binrel% HAdd.hAdd x8 x1)
  let let155 := (binrel% LE.le let16 let154)
  let let156 := (binrel% LE.le let1 let146)
  let let157 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let132 x6) x5) x8) let85)
  let let158 := (binrel% LE.le let157 let17)
  let let159 := (binrel% LE.le let1 let101)
  let let160 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let106 x9) let108) let85)
  let let161 := (binrel% LE.le let17 let160)
  let let162 := (binrel% LE.le let89 let16)
  let let163 := (binrel% LE.le let76 let17)
  let let164 := (binrel% HMul.hMul x1 let9)
  let let165 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let164 x0) x5) let85)
  let let166 := (binrel% LE.le let165 let1)
  let let167 := (binrel% LE.le let17 let84)
  let let168 := (binrel% GE.ge let119 let64)
  let let169 := (Not let168)
  let let170 := (And let169 (And let167 (And let166 (And let163 (And let162 (And let161 (And let159 (And let158 (And let156 let155)))))))))
  let let171 := (And let169 (And (And (And (And (And (And (And (And let167 let166) let163) let162) let161) let159) let158) let156) let155))
  let let172 := (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let18 x8))))
  let let173 := (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let18))))
  let let174 := (binrel% HAdd.hAdd let132 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let85))))
  let let175 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let131 x2))))
  let let176 := (binrel% HAdd.hAdd let106 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let108 let85)))
  let let177 := (binrel% GE.ge let20 let1)
  let let178 := (binrel% LE.le let1 let20)
  let let179 := (binrel% LT.lt let43 let9)
  let let180 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd x1 let18))
  let let181 := (binrel% HAdd.hAdd let164 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x5 let85)))
  let let182 := (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd (binrel% HMul.hMul let17 x5) (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x7 let41)))) let16)
  let let183 := (binrel% LE.le let172 let17)
  let let184 := (binrel% LT.lt let111 let16)
  let let185 := (Eq let58 let58)
  let let186 := (binrel% LT.lt let75 let1)
  let let187 := (Not let128)
  let let188 := (Eq let187 let103)
  let let189 := (Eq let103 let187)
  let let190 := (Eq let120 let120)
  let let191 := (binrel% LE.le let75 let17)
  let let192 := (Not let121)
  let let193 := (Eq let192 let120)
  let let194 := (Eq let120 let192)
  let let195 := (Eq let133 let133)
  let let196 := (Eq let133 let135)
  let let197 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let97 (binrel% HAdd.hAdd let150 (binrel% HAdd.hAdd let91 let15)))))))
  let let198 := (Eq let52 let52)
  let let199 := (binrel% LT.lt let102 let9)
  let let200 := (And let62 (And let147 (And let121 (And let134 (And let59 (And let128 (And let177 (And let182 (And let53 let143)))))))))
  let let201 := (Eq let119 let73)
  let let202 := (Not let177)
  let let203 := (Not let147)
  let let204 := (Or let202 (Or let52 (Or let133 (Or let63 (Or let120 (Or let203 (Or let103 let58)))))))
  let let205 := (Or let202 (Or let54 (Or let135 (Or let63 (Or let192 (Or let203 (Or let187 let94)))))))
  let let206 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let32 let33)))))))
  let let207 := (binrel% HAdd.hAdd let124 (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let141 (binrel% HAdd.hAdd let98 (binrel% HAdd.hAdd let151 (binrel% HAdd.hAdd let92 let21)))))))
  let let208 := (binrel% LE.le let207 let206)
  let let209 := (binrel% LE.le let21 let33)
  let let210 := (And let14 let177)
  let let211 := (binrel% LE.le let92 let32)
  let let212 := (binrel% LE.le let51 let1)
  let let213 := (And let11 let212)
  let let214 := (binrel% LE.le let151 let31)
  let let215 := (And let11 let191)
  let let216 := (binrel% LE.le let98 let153)
  let let217 := (And let8 let62)
  let let218 := (binrel% LE.le let141 let29)
  let let219 := (And let149 let122)
  let let220 := (binrel% LE.le let80 let26)
  let let221 := (And let39 let147)
  let let222 := (binrel% LE.le let127 let24)
  let let223 := (binrel% LE.le let102 let16)
  let let224 := (And let48 let223)
  let let225 := (binrel% LE.le let124 let22)
  let let226 := (And let3 let44)
(Eq let3 True) → (Eq let8 True) → (Eq let11 True) → (Eq let14 True) → (Eq let21 let15) → (Eq let22 let2) → (Eq let24 let23) → (Eq let26 let2) → (Eq let29 let27) → (Eq let31 let30) → (Eq let32 let27) → (Eq let33 let27) → (Eq let38 let34) → (Eq let39 True) → (Eq let40 False) → let47 → (Eq let48 True) → (Eq let56 let55) → (Eq let57 let53) → (Eq let44 let59) → (Eq let74 let63) → (Eq let76 let75) → (Eq let80 let77) → (Eq let84 let82) → (Eq let89 let88) → (Eq let87 let41) → (Eq let92 let91) → (Eq let93 let79) → (Eq let96 let95) → (Eq let98 let97) → (Eq let101 let100) → let96 → (Eq let104 True) → (Eq let105 let43) → (Eq let106 let50) → (Eq let108 let107) → (Eq let112 let111) → (Eq let119 let119) → (Eq let122 let121) → (Eq let124 let123) → (Eq let125 let62) → (Eq let127 let126) → (Eq let130 let128) → (Eq let132 let131) → let136 → (Eq let137 let129) → (Eq let139 let53) → (Eq let141 let140) → (Eq let81 let78) → (Eq let144 let143) → (Eq let86 let42) → (Eq let146 let145) → (Eq let148 let147) → (Eq let149 True) → (Eq let118 let72) → (Eq let151 let150) → (Eq let99 let19) → (Eq let152 let73) → (Eq let153 let37) → (Eq let154 let142) → (Eq let171 let170) → (Eq let173 let172) → (Eq let114 let70) → (Eq let164 let110) → (Eq let157 let174) → (Eq let175 let138) → (Eq let160 let176) → (Eq let178 let177) → (Eq let179 let59) → (Eq let180 let20) → (Eq let165 let181) → (Eq let113 let67) → (Eq let183 let182) → (Eq let115 let65) → (Eq let116 let69) → (Eq let184 let121) → (Eq let117 let71) → (Eq let185 True) → (Eq let186 let134) → let188 → (Eq let188 let189) → (Eq let190 True) → (Eq let191 let134) → let193 → (Eq let193 let194) → (Eq let195 True) → (Eq let136 let196) → (Eq let197 let27) → (Eq let85 let18) → (Eq let198 True) → (Eq let199 let128) → let56 → let171 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 5)
  let let5 := (Int.ofNat 8)
  let let6 := (binrel% HDiv.hDiv let5 let4)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% LT.lt let7 let1)
  let let9 := (Int.ofNat 2)
  let let10 := (binrel% HDiv.hDiv let9 let4)
  let let11 := (binrel% GT.gt let10 let1)
  let let12 := (binrel% HDiv.hDiv (Int.ofNat 4) let4)
  let let13 := (Neg.neg let12)
  let let14 := (binrel% LT.lt let13 let1)
  let let15 := (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let12 x2) (binrel% HMul.hMul let12 x7)))
  let let16 := (Int.ofNat 1)
  let let17 := (Neg.neg let16)
  let let18 := (binrel% HMul.hMul let17 x7)
  let let19 := (binrel% HMul.hMul let17 x2)
  let let20 := (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let19 let18))
  let let21 := (binrel% HMul.hMul let13 let20)
  let let22 := (binrel% HMul.hMul let2 let16)
  let let23 := (binrel% HDiv.hDiv (Int.ofNat 7) let4)
  let let24 := (binrel% HMul.hMul let23 let16)
  let let25 := (Neg.neg let2)
  let let26 := (binrel% HMul.hMul let25 let17)
  let let27 := (Rat.ofInt 0)
  let let28 := (binrel% HDiv.hDiv (Int.ofNat 6) let4)
  let let29 := (binrel% HMul.hMul let28 let1)
  let let30 := (Neg.neg let10)
  let let31 := (binrel% HMul.hMul let10 let17)
  let let32 := (binrel% HMul.hMul let10 let1)
  let let33 := (binrel% HMul.hMul let13 let1)
  let let34 := (Neg.neg (binrel% HDiv.hDiv let16 let4))
  let let35 := (Int.ofNat 16)
  let let36 := (binrel% HDiv.hDiv let35 let4)
  let let37 := (Neg.neg let36)
  let let38 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let27 let27)))))))
  let let39 := (binrel% LT.lt let25 let1)
  let let40 := (binrel% LE.le let27 let34)
  let let41 := (binrel% HMul.hMul let17 x8)
  let let42 := (binrel% HMul.hMul let9 x5)
  let let43 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let18 let41))
  let let44 := (binrel% LE.le let43 let16)
  let let45 := (Not let44)
  let let46 := (binrel% GT.gt let43 let16)
  let let47 := (Eq let46 let45)
  let let48 := (binrel% GT.gt let23 let1)
  let let49 := (binrel% HMul.hMul let17 x9)
  let let50 := (binrel% HMul.hMul let17 x6)
  let let51 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd (binrel% HMul.hMul let17 x4) (binrel% HAdd.hAdd let50 let49))))
  let let52 := (binrel% GE.ge let51 let16)
  let let53 := (Not let52)
  let let54 := (Not let53)
  let let55 := (Eq let52 let54)
  let let56 := (Eq let54 let52)
  let let57 := (binrel% LT.lt let51 let16)
  let let58 := (binrel% GE.ge let43 let9)
  let let59 := (Not let58)
  let let60 := (Neg.neg let9)
  let let61 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 3)) x8) (binrel% HMul.hMul let60 x9))))))
  let let62 := (binrel% GE.ge let61 let9)
  let let63 := (Not let62)
  let let64 := (Neg.neg let5)
  let let65 := (binrel% HMul.hMul let35 x9)
  let let66 := (Int.ofNat 24)
  let let67 := (binrel% HMul.hMul let66 x8)
  let let68 := (Neg.neg let35)
  let let69 := (binrel% HMul.hMul let68 x5)
  let let70 := (binrel% HMul.hMul let5 x2)
  let let71 := (binrel% HMul.hMul let64 x1)
  let let72 := (binrel% HMul.hMul let64 x0)
  let let73 := (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let67 let65)))))
  let let74 := (binrel% GE.ge let73 let64)
  let let75 := (binrel% HAdd.hAdd x4 let49)
  let let76 := (binrel% HSub.hSub x4 x9)
  let let77 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x2) (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let41 let49))))
  let let78 := (binrel% HMul.hMul let9 x2)
  let let79 := (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x8 x9)))
  let let80 := (binrel% HMul.hMul let25 let79)
  let let81 := (binrel% HMul.hMul x2 let9)
  let let82 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let81 x8)))
  let let83 := (binrel% HAdd.hAdd x6 x9)
  let let84 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let83 let81) x8)
  let let85 := (Neg.neg x7)
  let let86 := (binrel% HMul.hMul x5 let9)
  let let87 := (Neg.neg x8)
  let let88 := (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let86 let85))
  let let89 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let87 let86) let85)
  let let90 := (binrel% HMul.hMul let30 x9)
  let let91 := (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x0) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x2) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x4) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x6) let90))))
  let let92 := (binrel% HMul.hMul let10 let51)
  let let93 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let78 x8)))
  let let94 := (Not let59)
  let let95 := (Eq let58 let94)
  let let96 := (Eq let94 let58)
  let let97 := (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x0) (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x2) (binrel% HAdd.hAdd (binrel% HMul.hMul let37 x5) (binrel% HAdd.hAdd (binrel% HMul.hMul (binrel% HDiv.hDiv let66 let4) x8) (binrel% HMul.hMul let36 x9))))))
  let let98 := (binrel% HMul.hMul let7 let61)
  let let99 := (Neg.neg x2)
  let let100 := (binrel% HAdd.hAdd let99 (binrel% HAdd.hAdd x1 let85))
  let let101 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let99 x1) let85)
  let let102 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x8) let49)))
  let let103 := (binrel% GE.ge let102 let9)
  let let104 := (Eq let103 let103)
  let let105 := (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let42 let18))
  let let106 := (Neg.neg x6)
  let let107 := (binrel% HMul.hMul let9 x8)
  let let108 := (binrel% HMul.hMul x8 let9)
  let let109 := (binrel% HAdd.hAdd x5 let18)
  let let110 := (binrel% HMul.hMul let9 x1)
  let let111 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let110 let109))
  let let112 := (binrel% HAdd.hAdd let110 (binrel% HAdd.hAdd x0 let109))
  let let113 := (binrel% HMul.hMul x8 let66)
  let let114 := (binrel% HMul.hMul x2 let5)
  let let115 := (binrel% HMul.hMul x9 let35)
  let let116 := (binrel% HMul.hMul x5 let68)
  let let117 := (binrel% HMul.hMul x1 let64)
  let let118 := (binrel% HMul.hMul x0 let64)
  let let119 := (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let114 let113)))))
  let let120 := (binrel% GE.ge let111 let16)
  let let121 := (Not let120)
  let let122 := (binrel% LE.le let111 let1)
  let let123 := (Rat.ofInt let43)
  let let124 := (binrel% HMul.hMul let2 let43)
  let let125 := (Not let63)
  let let126 := (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x6) (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x7) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 14) let4)) x8) (binrel% HMul.hMul (Neg.neg let23) x9))))
  let let127 := (binrel% HMul.hMul let23 let102)
  let let128 := (Not let103)
  let let129 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let107 x9)))
  let let130 := (binrel% LE.le let17 let129)
  let let131 := (binrel% HMul.hMul let17 x0)
  let let132 := (Neg.neg x0)
  let let133 := (binrel% GE.ge let75 let1)
  let let134 := (Not let133)
  let let135 := (Not let134)
  let let136 := (Eq let135 let133)
  let let137 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let107 let18)))
  let let138 := (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x4 let83)))
  let let139 := (binrel% LE.le let1 let138)
  let let140 := (binrel% HAdd.hAdd (binrel% HMul.hMul let28 x0) (binrel% HAdd.hAdd (binrel% HMul.hMul (binrel% HDiv.hDiv (Int.ofNat 12) let4) x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let28 x5) (binrel% HMul.hMul (Neg.neg let28) x7))))
  let let141 := (binrel% HMul.hMul let28 let111)
  let let142 := (binrel% HAdd.hAdd x1 x8)
  let let143 := (binrel% GE.ge let142 let16)
  let let144 := (binrel% LE.le let16 let142)
  let let145 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let132 x2))))
  let let146 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x9 x4) x6) let132) x2)
  let let147 := (binrel% GE.ge let79 let17)
  let let148 := (binrel% LE.le let17 let79)
  let let149 := (binrel% GT.gt let28 let1)
  let let150 := (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x4) let90)
  let let151 := (binrel% HMul.hMul let10 let75)
  let let152 := (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let70 let67)))))
  let let153 := (binrel% HMul.hMul let7 let9)
  let let154 := (binrel% HAdd.hAdd x8 x1)
  let let155 := (binrel% LE.le let16 let154)
  let let156 := (binrel% LE.le let1 let146)
  let let157 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let132 x6) x5) x8) let85)
  let let158 := (binrel% LE.le let157 let17)
  let let159 := (binrel% LE.le let1 let101)
  let let160 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let106 x9) let108) let85)
  let let161 := (binrel% LE.le let17 let160)
  let let162 := (binrel% LE.le let89 let16)
  let let163 := (binrel% LE.le let76 let17)
  let let164 := (binrel% HMul.hMul x1 let9)
  let let165 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let164 x0) x5) let85)
  let let166 := (binrel% LE.le let165 let1)
  let let167 := (binrel% LE.le let17 let84)
  let let168 := (binrel% GE.ge let119 let64)
  let let169 := (Not let168)
  let let170 := (And let169 (And let167 (And let166 (And let163 (And let162 (And let161 (And let159 (And let158 (And let156 let155)))))))))
  let let171 := (And let169 (And (And (And (And (And (And (And (And let167 let166) let163) let162) let161) let159) let158) let156) let155))
  let let172 := (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let18 x8))))
  let let173 := (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let18))))
  let let174 := (binrel% HAdd.hAdd let132 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let85))))
  let let175 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let131 x2))))
  let let176 := (binrel% HAdd.hAdd let106 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let108 let85)))
  let let177 := (binrel% GE.ge let20 let1)
  let let178 := (binrel% LE.le let1 let20)
  let let179 := (binrel% LT.lt let43 let9)
  let let180 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd x1 let18))
  let let181 := (binrel% HAdd.hAdd let164 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x5 let85)))
  let let182 := (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd (binrel% HMul.hMul let17 x5) (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x7 let41)))) let16)
  let let183 := (binrel% LE.le let172 let17)
  let let184 := (binrel% LT.lt let111 let16)
  let let185 := (Eq let58 let58)
  let let186 := (binrel% LT.lt let75 let1)
  let let187 := (Not let128)
  let let188 := (Eq let187 let103)
  let let189 := (Eq let103 let187)
  let let190 := (Eq let120 let120)
  let let191 := (binrel% LE.le let75 let17)
  let let192 := (Not let121)
  let let193 := (Eq let192 let120)
  let let194 := (Eq let120 let192)
  let let195 := (Eq let133 let133)
  let let196 := (Eq let133 let135)
  let let197 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let97 (binrel% HAdd.hAdd let150 (binrel% HAdd.hAdd let91 let15)))))))
  let let198 := (Eq let52 let52)
  let let199 := (binrel% LT.lt let102 let9)
  let let200 := (And let62 (And let147 (And let121 (And let134 (And let59 (And let128 (And let177 (And let182 (And let53 let143)))))))))
  let let201 := (Eq let119 let73)
  let let202 := (Not let177)
  let let203 := (Not let147)
  let let204 := (Or let202 (Or let52 (Or let133 (Or let63 (Or let120 (Or let203 (Or let103 let58)))))))
  let let205 := (Or let202 (Or let54 (Or let135 (Or let63 (Or let192 (Or let203 (Or let187 let94)))))))
  let let206 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let32 let33)))))))
  let let207 := (binrel% HAdd.hAdd let124 (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let141 (binrel% HAdd.hAdd let98 (binrel% HAdd.hAdd let151 (binrel% HAdd.hAdd let92 let21)))))))
  let let208 := (binrel% LE.le let207 let206)
  let let209 := (binrel% LE.le let21 let33)
  let let210 := (And let14 let177)
  let let211 := (binrel% LE.le let92 let32)
  let let212 := (binrel% LE.le let51 let1)
  let let213 := (And let11 let212)
  let let214 := (binrel% LE.le let151 let31)
  let let215 := (And let11 let191)
  let let216 := (binrel% LE.le let98 let153)
  let let217 := (And let8 let62)
  let let218 := (binrel% LE.le let141 let29)
  let let219 := (And let149 let122)
  let let220 := (binrel% LE.le let80 let26)
  let let221 := (And let39 let147)
  let let222 := (binrel% LE.le let127 let24)
  let let223 := (binrel% LE.le let102 let16)
  let let224 := (And let48 let223)
  let let225 := (binrel% LE.le let124 let22)
  let let226 := (And let3 let44)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let8 True) => -- EVALUATE
fun lean_r2 : (Eq let11 True) => -- EVALUATE
fun lean_r3 : (Eq let14 True) => -- EVALUATE
fun lean_r4 : (Eq let21 let15) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let22 let2) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let26 let2) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let29 let27) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let32 let27) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let33 let27) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let38 let34) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let39 True) => -- EVALUATE
fun lean_r14 : (Eq let40 False) => -- THEORY_REWRITE_ARITH
fun lean_r15 : let47 => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let48 True) => -- EVALUATE
fun lean_r17 : (Eq let56 let55) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let57 let53) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let44 let59) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let74 let63) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let76 let75) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let80 let77) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let84 let82) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let89 let88) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let87 let41) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let92 let91) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let93 let79) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let96 let95) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let98 let97) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let101 let100) => -- THEORY_REWRITE_ARITH
fun lean_r31 : let96 => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let104 True) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let105 let43) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let106 let50) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let108 let107) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let112 let111) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let119 let119) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let122 let121) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let124 let123) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let125 let62) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let127 let126) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let130 let128) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let132 let131) => -- THEORY_REWRITE_ARITH
fun lean_r44 : let136 => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let137 let129) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let139 let53) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let141 let140) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let81 let78) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let144 let143) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let86 let42) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let146 let145) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let148 let147) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let149 True) => -- EVALUATE
fun lean_r54 : (Eq let118 let72) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let151 let150) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let99 let19) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let152 let73) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let153 let37) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let154 let142) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let171 let170) => -- THEORY_REWRITE_BOOL
fun lean_r61 : (Eq let173 let172) => -- THEORY_REWRITE_ARITH
fun lean_r62 : (Eq let114 let70) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let164 let110) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq let157 let174) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let175 let138) => -- THEORY_REWRITE_ARITH
fun lean_r66 : (Eq let160 let176) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq let178 let177) => -- THEORY_REWRITE_ARITH
fun lean_r68 : (Eq let179 let59) => -- THEORY_REWRITE_ARITH
fun lean_r69 : (Eq let180 let20) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq let165 let181) => -- THEORY_REWRITE_ARITH
fun lean_r71 : (Eq let113 let67) => -- THEORY_REWRITE_ARITH
fun lean_r72 : (Eq let183 let182) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let115 let65) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let116 let69) => -- THEORY_REWRITE_ARITH
fun lean_r75 : (Eq let184 let121) => -- THEORY_REWRITE_ARITH
fun lean_r76 : (Eq let117 let71) => -- THEORY_REWRITE_ARITH
fun lean_r77 : (Eq let185 True) => -- THEORY_REWRITE_BOOL
fun lean_r78 : (Eq let186 let134) => -- THEORY_REWRITE_ARITH
fun lean_r79 : let188 => -- THEORY_REWRITE_BOOL
fun lean_r80 : (Eq let188 let189) => -- THEORY_REWRITE_BOOL
fun lean_r81 : (Eq let190 True) => -- THEORY_REWRITE_BOOL
fun lean_r82 : (Eq let191 let134) => -- THEORY_REWRITE_ARITH
fun lean_r83 : let193 => -- THEORY_REWRITE_BOOL
fun lean_r84 : (Eq let193 let194) => -- THEORY_REWRITE_BOOL
fun lean_r85 : (Eq let195 True) => -- THEORY_REWRITE_BOOL
fun lean_r86 : (Eq let136 let196) => -- THEORY_REWRITE_BOOL
fun lean_r87 : (Eq let197 let27) => -- THEORY_REWRITE_ARITH
fun lean_r88 : (Eq let85 let18) => -- THEORY_REWRITE_ARITH
fun lean_r89 : (Eq let198 True) => -- THEORY_REWRITE_BOOL
fun lean_r90 : (Eq let199 let128) => -- THEORY_REWRITE_ARITH
fun lean_r91 : let56 => -- THEORY_REWRITE_BOOL
fun lean_a92 : let171 => by
have lean_s0 : (Or let202 (Or let54 (Or let135 (Or let63 (Or let192 (Or let203 (Or let187 (Or let94 False)))))))) :=
  (scope (fun lean_a93 : let177 =>
    (scope (fun lean_a94 : let53 =>
      (scope (fun lean_a95 : let134 =>
        (scope (fun lean_a96 : let62 =>
          (scope (fun lean_a97 : let121 =>
            (scope (fun lean_a98 : let147 =>
              (scope (fun lean_a99 : let128 =>
                (scope (fun lean_a100 : let59 =>
                  have lean_s0 : (Eq let59 let179) := by timed Eq.symm lean_r68
                  have lean_s1 : let179 := by timed eqResolve lean_a100 lean_s0
                  have lean_s2 : let44 := by intTightUb lean_s1
                  have lean_s3 : (Or let45 False) :=
                    (scope (fun lean_a101 : let44 =>
                      have lean_s3 : let3 := by timed trueElim lean_r0
                      have lean_s4 : let226 := by timed And.intro lean_s3 lean_a101
                      have lean_s5 : (Implies let226 let225) := by arithMulPos [let43, let16, let2], 1
                      have lean_s6 : let225 := by timed modusPonens lean_s4 lean_s5
                      have lean_s7 : let48 := by timed trueElim lean_r16
                      have lean_s8 : (Eq let128 let199) := by timed Eq.symm lean_r90
                      have lean_s9 : let199 := by timed eqResolve lean_a99 lean_s8
                      have lean_s10 : let223 := by intTightUb lean_s9
                      have lean_s11 : let224 := by timed And.intro lean_s7 lean_s10
                      have lean_s12 : (Implies let224 let222) := by arithMulPos [let102, let16, let23], 1
                      have lean_s13 : let222 := by timed modusPonens lean_s11 lean_s12
                      have lean_s14 : let39 := by timed trueElim lean_r13
                      have lean_s15 : let221 := by timed And.intro lean_s14 lean_a98
                      have lean_s16 : (Implies let221 let220) := by arithMulNeg [let79, let17, let25], 3
                      have lean_s17 : let220 := by timed modusPonens lean_s15 lean_s16
                      have lean_s18 : let149 := by timed trueElim lean_r53
                      have lean_s19 : (Eq let121 let184) := by timed Eq.symm lean_r75
                      have lean_s20 : let184 := by timed eqResolve lean_a97 lean_s19
                      have lean_s21 : let122 := by intTightUb lean_s20
                      have lean_s22 : let219 := by timed And.intro lean_s18 lean_s21
                      have lean_s23 : (Implies let219 let218) := by arithMulPos [let111, let1, let28], 1
                      have lean_s24 : let218 := by timed modusPonens lean_s22 lean_s23
                      have lean_s25 : let8 := by timed trueElim lean_r1
                      have lean_s26 : let217 := by timed And.intro lean_s25 lean_a96
                      have lean_s27 : (Implies let217 let216) := by arithMulNeg [let61, let9, let7], 3
                      have lean_s28 : let216 := by timed modusPonens lean_s26 lean_s27
                      have lean_s29 : let11 := by timed trueElim lean_r2
                      have lean_s30 : (Eq let134 let186) := by timed Eq.symm lean_r78
                      have lean_s31 : let186 := by timed eqResolve lean_a95 lean_s30
                      have lean_s32 : let191 := by intTightUb lean_s31
                      have lean_s33 : let215 := by timed And.intro lean_s29 lean_s32
                      have lean_s34 : (Implies let215 let214) := by arithMulPos [let75, let17, let10], 1
                      have lean_s35 : let214 := by timed modusPonens lean_s33 lean_s34
                      have lean_s36 : (Eq let53 let57) := by timed Eq.symm lean_r18
                      have lean_s37 : let57 := by timed eqResolve lean_a94 lean_s36
                      have lean_s38 : let212 := by intTightUb lean_s37
                      have lean_s39 : let213 := by timed And.intro lean_s29 lean_s38
                      have lean_s40 : (Implies let213 let211) := by arithMulPos [let51, let1, let10], 1
                      have lean_s41 : let211 := by timed modusPonens lean_s39 lean_s40
                      have lean_s42 : let14 := by timed trueElim lean_r3
                      have lean_s43 : let210 := by timed And.intro lean_s42 lean_a93
                      have lean_s44 : (Implies let210 let209) := by arithMulNeg [let20, let1, let13], 3
                      have lean_s45 : let209 := by timed modusPonens lean_s43 lean_s44
                      have lean_s46 : let208 := by sumBounds [lean_s6, lean_s13, lean_s17, lean_s24, lean_s28, lean_s35, lean_s41, lean_s45]
                      let lean_s47 := by timed congrHAdd lean_r26 lean_r4
                      let lean_s48 := by timed congrHAdd lean_r55 lean_s47
                      let lean_s49 := by timed congrHAdd lean_r29 lean_s48
                      let lean_s50 := by timed congrHAdd lean_r47 lean_s49
                      let lean_s51 := by timed congrHAdd lean_r22 lean_s50
                      let lean_s52 := by timed congrHAdd lean_r41 lean_s51
                      have lean_s53 : (Eq let207 let197) := by timed congrHAdd lean_r39 lean_s52
                      have lean_s54 : (Eq let207 let27) := by timed Eq.trans lean_s53 lean_r87
                      let lean_s55 := by timed flipCongrArg lean_s54 [LE.le]
                      let lean_s56 := by timed congrHAdd lean_r10 lean_r11
                      let lean_s57 := by timed congrHAdd lean_r9 lean_s56
                      let lean_s58 := by timed congrHAdd lean_r58 lean_s57
                      let lean_s59 := by timed congrHAdd lean_r8 lean_s58
                      let lean_s60 := by timed congrHAdd lean_r7 lean_s59
                      let lean_s61 := by timed congrHAdd lean_r6 lean_s60
                      have lean_s62 : (Eq let206 let38) := by timed congrHAdd lean_r5 lean_s61
                      have lean_s63 : (Eq let206 let34) := by timed Eq.trans lean_s62 lean_r12
                      have lean_s64 : (Eq let208 let40) := by timed congr lean_s55 lean_s63
                      have lean_s65 : (Eq let208 False) := by timed Eq.trans lean_s64 lean_r14
                      show False from by timed eqResolve lean_s46 lean_s65
                    ))
                  have lean_s4 : let45 := by liftOrNToNeg lean_s3
                  have lean_s5 : (Eq let45 let94) := by timed flipCongrArg lean_r19 [Not]
                  have lean_s6 : (Eq let45 let58) := by timed Eq.trans lean_s5 lean_r31
                  have lean_s7 : (Eq let46 let58) := by timed Eq.trans lean_r15 lean_s6
                  have lean_s8 : (Eq let58 let46) := by timed Eq.symm lean_s7
                  have lean_s9 : (Eq let45 let46) := by timed Eq.trans lean_s6 lean_s8
                  have lean_s10 : let46 := by timed eqResolve lean_s4 lean_s9
                  have lean_s11 : (Eq let58 let45) := by timed Eq.symm lean_s6
                  have lean_s12 : let47 := by timed Eq.trans lean_s7 lean_s11
                  have lean_s13 : let45 := by timed eqResolve lean_s10 lean_s12
                  show False from by timed contradiction lean_s2 lean_s13
  ))))))))))))))))
have lean_s1 : (Not (And let177 (And let53 (And let134 (And let62 (And let121 (And let147 (And let128 let59)))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let205 := by timed flipNotAnd lean_s1 [let177, let53, let134, let62, let121, let147, let128, let59]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let202 let202) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let198 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let55 let198) := by timed congr lean_s7 lean_r91
have lean_s9 : (Eq let55 True) := by timed Eq.trans lean_s8 lean_r89
have lean_s10 : (Eq let56 True) := by timed Eq.trans lean_r17 lean_s9
have lean_s11 : let56 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let195 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let196 let195) := by timed congr lean_s14 lean_r44
have lean_s16 : (Eq let196 True) := by timed Eq.trans lean_s15 lean_r85
have lean_s17 : (Eq let136 True) := by timed Eq.trans lean_r86 lean_s16
have lean_s18 : let136 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s3 lean_s18
have lean_s20 : (Eq let63 let63) := by timed rfl
let lean_s21 := by timed congr lean_s3 lean_s20
have lean_s22 : let190 := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [Eq]
have lean_s24 : (Eq let194 let190) := by timed congr lean_s23 lean_r83
have lean_s25 : (Eq let194 True) := by timed Eq.trans lean_s24 lean_r81
have lean_s26 : (Eq let193 True) := by timed Eq.trans lean_r84 lean_s25
have lean_s27 : let193 := by timed trueElim lean_s26
let lean_s28 := by timed congr lean_s3 lean_s27
have lean_s29 : (Eq let203 let203) := by timed rfl
let lean_s30 := by timed congr lean_s3 lean_s29
have lean_s31 : let104 := by timed rfl
let lean_s32 := by timed flipCongrArg lean_s31 [Eq]
have lean_s33 : (Eq let189 let104) := by timed congr lean_s32 lean_r79
have lean_s34 : (Eq let189 True) := by timed Eq.trans lean_s33 lean_r32
have lean_s35 : (Eq let188 True) := by timed Eq.trans lean_r80 lean_s34
have lean_s36 : let188 := by timed trueElim lean_s35
let lean_s37 := by timed congr lean_s3 lean_s36
have lean_s38 : let185 := by timed rfl
let lean_s39 := by timed flipCongrArg lean_s38 [Eq]
have lean_s40 : (Eq let95 let185) := by timed congr lean_s39 lean_r31
have lean_s41 : (Eq let95 True) := by timed Eq.trans lean_s40 lean_r77
have lean_s42 : (Eq let96 True) := by timed Eq.trans lean_r28 lean_s41
have lean_s43 : let96 := by timed trueElim lean_s42
let lean_s44 := by timed congr lean_s37 lean_s43
let lean_s45 := by timed congr lean_s30 lean_s44
let lean_s46 := by timed congr lean_s28 lean_s45
let lean_s47 := by timed congr lean_s21 lean_s46
let lean_s48 := by timed congr lean_s19 lean_s47
let lean_s49 := by timed congr lean_s12 lean_s48
have lean_s50 : (Eq let205 let204) := by timed congr lean_s5 lean_s49
have lean_s51 : let204 := by timed eqResolve lean_s2 lean_s50
have lean_s52 : (Or let63 (Or let120 (Or let133 (Or let58 (Or let103 (Or let52 (Or let203 let202))))))) := by permutateOr lean_s51, [3, 4, 2, 7, 6, 1, 5, 0], (- 1)
have lean_s53 : (Eq And And) := by timed rfl
let lean_s54 := by timed congrHAdd lean_r62 lean_r71
let lean_s55 := by timed congrHAdd lean_r73 lean_s54
let lean_s56 := by timed congrHAdd lean_r74 lean_s55
let lean_s57 := by timed congrHAdd lean_r76 lean_s56
have lean_s58 : (Eq let119 let152) := by timed congrHAdd lean_r54 lean_s57
have lean_s59 : let201 := by timed Eq.trans lean_s58 lean_r57
have lean_s60 : let201 := by timed Eq.trans lean_r37 lean_s59
let lean_s61 := by timed flipCongrArg lean_s60 [GE.ge]
have lean_s62 : (Eq let64 let64) := by timed rfl
have lean_s63 : (Eq let168 let74) := by timed congr lean_s61 lean_s62
have lean_s64 : (Eq let168 let63) := by timed Eq.trans lean_s63 lean_r20
have lean_s65 : (Eq let169 let125) := by timed flipCongrArg lean_s64 [Not]
have lean_s66 : (Eq let169 let62) := by timed Eq.trans lean_s65 lean_r40
let lean_s67 := by timed congr lean_s53 lean_s66
have lean_s68 : (Eq let17 let17) := by timed rfl
let lean_s69 := by timed flipCongrArg lean_s68 [LE.le]
have lean_s70 : (Eq x6 x6) := by timed rfl
have lean_s71 : (Eq x9 x9) := by timed rfl
have lean_s72 : (Eq x8 x8) := by timed rfl
let lean_s73 := by timed congrHAdd lean_r48 lean_s72
let lean_s74 := by timed congrHAdd lean_s71 lean_s73
have lean_s75 : (Eq let82 let93) := by timed congrHAdd lean_s70 lean_s74
have lean_s76 : (Eq let82 let79) := by timed Eq.trans lean_s75 lean_r27
have lean_s77 : (Eq let84 let79) := by timed Eq.trans lean_r23 lean_s76
have lean_s78 : (Eq let167 let148) := by timed congr lean_s69 lean_s77
have lean_s79 : (Eq let167 let147) := by timed Eq.trans lean_s78 lean_r52
let lean_s80 := by timed congr lean_s53 lean_s79
have lean_s81 : (Eq x0 x0) := by timed rfl
have lean_s82 : (Eq x5 x5) := by timed rfl
let lean_s83 := by timed congrHAdd lean_s82 lean_r88
let lean_s84 := by timed congrHAdd lean_s81 lean_s83
have lean_s85 : (Eq let181 let112) := by timed congrHAdd lean_r63 lean_s84
have lean_s86 : (Eq let181 let111) := by timed Eq.trans lean_s85 lean_r36
have lean_s87 : (Eq let165 let111) := by timed Eq.trans lean_r70 lean_s86
let lean_s88 := by timed flipCongrArg lean_s87 [LE.le]
have lean_s89 : (Eq let1 let1) := by timed rfl
have lean_s90 : (Eq let166 let122) := by timed congr lean_s88 lean_s89
have lean_s91 : (Eq let166 let121) := by timed Eq.trans lean_s90 lean_r38
let lean_s92 := by timed congr lean_s53 lean_s91
let lean_s93 := by timed flipCongrArg lean_r21 [LE.le]
have lean_s94 : (Eq let163 let191) := by timed congr lean_s93 lean_s68
have lean_s95 : (Eq let163 let134) := by timed Eq.trans lean_s94 lean_r82
let lean_s96 := by timed congr lean_s53 lean_s95
let lean_s97 := by timed congrHAdd lean_r50 lean_r88
have lean_s98 : (Eq let88 let105) := by timed congrHAdd lean_r25 lean_s97
have lean_s99 : (Eq let88 let43) := by timed Eq.trans lean_s98 lean_r33
have lean_s100 : (Eq let89 let43) := by timed Eq.trans lean_r24 lean_s99
let lean_s101 := by timed flipCongrArg lean_s100 [LE.le]
have lean_s102 : (Eq let16 let16) := by timed rfl
have lean_s103 : (Eq let162 let44) := by timed congr lean_s101 lean_s102
have lean_s104 : (Eq let162 let59) := by timed Eq.trans lean_s103 lean_r19
let lean_s105 := by timed congr lean_s53 lean_s104
let lean_s106 := by timed flipCongrArg lean_s68 [LE.le]
let lean_s107 := by timed congrHAdd lean_r35 lean_r88
let lean_s108 := by timed congrHAdd lean_s71 lean_s107
have lean_s109 : (Eq let176 let137) := by timed congrHAdd lean_r34 lean_s108
have lean_s110 : (Eq let176 let129) := by timed Eq.trans lean_s109 lean_r45
have lean_s111 : (Eq let160 let129) := by timed Eq.trans lean_r66 lean_s110
have lean_s112 : (Eq let161 let130) := by timed congr lean_s106 lean_s111
have lean_s113 : (Eq let161 let128) := by timed Eq.trans lean_s112 lean_r42
let lean_s114 := by timed congr lean_s53 lean_s113
let lean_s115 := by timed flipCongrArg lean_s89 [LE.le]
have lean_s116 : (Eq x1 x1) := by timed rfl
let lean_s117 := by timed congrHAdd lean_s116 lean_r88
have lean_s118 : (Eq let100 let180) := by timed congrHAdd lean_r56 lean_s117
have lean_s119 : (Eq let100 let20) := by timed Eq.trans lean_s118 lean_r69
have lean_s120 : (Eq let101 let20) := by timed Eq.trans lean_r30 lean_s119
have lean_s121 : (Eq let159 let178) := by timed congr lean_s115 lean_s120
have lean_s122 : (Eq let159 let177) := by timed Eq.trans lean_s121 lean_r67
let lean_s123 := by timed congr lean_s53 lean_s122
let lean_s124 := by timed congrHAdd lean_s72 lean_r88
let lean_s125 := by timed congrHAdd lean_s82 lean_s124
let lean_s126 := by timed congrHAdd lean_s70 lean_s125
have lean_s127 : (Eq let174 let173) := by timed congrHAdd lean_r43 lean_s126
have lean_s128 : (Eq let174 let172) := by timed Eq.trans lean_s127 lean_r61
have lean_s129 : (Eq let157 let172) := by timed Eq.trans lean_r64 lean_s128
let lean_s130 := by timed flipCongrArg lean_s129 [LE.le]
have lean_s131 : (Eq let158 let183) := by timed congr lean_s130 lean_s68
have lean_s132 : (Eq let158 let182) := by timed Eq.trans lean_s131 lean_r72
let lean_s133 := by timed congr lean_s53 lean_s132
let lean_s134 := by timed flipCongrArg lean_s89 [LE.le]
have lean_s135 : (Eq x4 x4) := by timed rfl
have lean_s136 : (Eq x2 x2) := by timed rfl
let lean_s137 := by timed congrHAdd lean_r43 lean_s136
let lean_s138 := by timed congrHAdd lean_s70 lean_s137
let lean_s139 := by timed congrHAdd lean_s135 lean_s138
have lean_s140 : (Eq let145 let175) := by timed congrHAdd lean_s71 lean_s139
have lean_s141 : (Eq let145 let138) := by timed Eq.trans lean_s140 lean_r65
have lean_s142 : (Eq let146 let138) := by timed Eq.trans lean_r51 lean_s141
have lean_s143 : (Eq let156 let139) := by timed congr lean_s134 lean_s142
have lean_s144 : (Eq let156 let53) := by timed Eq.trans lean_s143 lean_r46
let lean_s145 := by timed congr lean_s53 lean_s144
let lean_s146 := by timed flipCongrArg lean_s102 [LE.le]
have lean_s147 : (Eq let155 let144) := by timed congr lean_s146 lean_r59
have lean_s148 : (Eq let155 let143) := by timed Eq.trans lean_s147 lean_r49
let lean_s149 := by timed congr lean_s145 lean_s148
let lean_s150 := by timed congr lean_s133 lean_s149
let lean_s151 := by timed congr lean_s123 lean_s150
let lean_s152 := by timed congr lean_s114 lean_s151
let lean_s153 := by timed congr lean_s105 lean_s152
let lean_s154 := by timed congr lean_s96 lean_s153
let lean_s155 := by timed congr lean_s92 lean_s154
let lean_s156 := by timed congr lean_s80 lean_s155
have lean_s157 : (Eq let170 let200) := by timed congr lean_s67 lean_s156
have lean_s158 : (Eq let171 let200) := by timed Eq.trans lean_r60 lean_s157
have lean_s159 : let200 := by timed eqResolve lean_a92 lean_s158
have lean_s160 : let53 := by andElim lean_s159, 8
let lean_s161 := by R1 lean_s52, lean_s160, let52, [(- 1), 0]
have lean_s162 : let177 := by andElim lean_s159, 6
let lean_s163 := by R2 lean_s161, lean_s162, let177, [(- 1), 0]
have lean_s164 : let128 := by andElim lean_s159, 5
let lean_s165 := by R1 lean_s163, lean_s164, let103, [(- 1), 0]
have lean_s166 : let59 := by andElim lean_s159, 4
let lean_s167 := by R1 lean_s165, lean_s166, let58, [(- 1), 0]
have lean_s168 : let134 := by andElim lean_s159, 3
let lean_s169 := by R1 lean_s167, lean_s168, let133, [(- 1), 0]
have lean_s170 : let121 := by andElim lean_s159, 2
let lean_s171 := by R1 lean_s169, lean_s170, let120, [(- 1), 0]
have lean_s172 : let147 := by andElim lean_s159, 1
let lean_s173 := by R2 lean_s171, lean_s172, let147, [(- 1), 0]
have lean_s174 : let62 := by andElim lean_s159, 0
exact (show False from by R2 lean_s173, lean_s174, let62, [0, 0])


