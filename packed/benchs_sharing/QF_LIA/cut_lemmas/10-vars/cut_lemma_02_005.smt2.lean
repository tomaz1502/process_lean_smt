open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x5 : Int}
variable {x8 : Int}
variable {x2 : Int}
variable {x7 : Int}
variable {x1 : Int}
variable {x4 : Int}
variable {x6 : Int}
variable {x4 : Int}
variable {x8 : Int}
variable {x0 : Int}
variable {x2 : Int}
variable {x9 : Int}
variable {x9 : Int}
variable {x7 : Int}
variable {x6 : Int}
variable {x5 : Int}
variable {x1 : Int}
variable {x0 : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 x9)
  let let7 := (binrel% HAdd.hAdd x4 let6)
  let let8 := (binrel% GE.ge let7 let1)
  let let9 := (Not let8)
  let let10 := (binrel% LT.lt let7 let1)
  let let11 := (binrel% HMul.hMul let5 x6)
  let let12 := (binrel% HMul.hMul let5 x2)
  let let13 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x4) (binrel% HAdd.hAdd let11 let6))))
  let let14 := (binrel% GE.ge let13 let4)
  let let15 := (Not let14)
  let let16 := (binrel% LT.lt let13 let4)
  let let17 := (Int.ofNat 3)
  let let18 := (Int.ofNat 4)
  let let19 := (binrel% HDiv.hDiv let18 let17)
  let let20 := (Neg.neg let19)
  let let21 := (binrel% LT.lt let20 let1)
  let let22 := (Int.ofNat 2)
  let let23 := (Neg.neg let22)
  let let24 := (binrel% HMul.hMul let23 x8)
  let let25 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd let24 let6)))
  let let26 := (Rat.ofInt let25)
  let let27 := (binrel% HMul.hMul let2 let25)
  let let28 := (binrel% HDiv.hDiv let22 let17)
  let let29 := (Neg.neg let28)
  let let30 := (binrel% HMul.hMul let28 x5)
  let let31 := (binrel% HMul.hMul let28 x0)
  let let32 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x1) (binrel% HAdd.hAdd let30 (binrel% HMul.hMul let29 x7))))
  let let33 := (binrel% HMul.hMul let5 x7)
  let let34 := (binrel% HAdd.hAdd x5 let33)
  let let35 := (binrel% HMul.hMul let22 x1)
  let let36 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let35 let34))
  let let37 := (binrel% HMul.hMul let28 let36)
  let let38 := (binrel% HDiv.hDiv let4 let17)
  let let39 := (Neg.neg let38)
  let let40 := (binrel% HMul.hMul let39 x8)
  let let41 := (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd (binrel% HMul.hMul let39 x7) let40))
  let let42 := (binrel% HMul.hMul let5 x8)
  let let43 := (binrel% HMul.hMul let22 x5)
  let let44 := (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let33 let42))
  let let45 := (binrel% HMul.hMul let38 let44)
  let let46 := (Rat.ofInt 0)
  let let47 := (Int.ofNat 8)
  let let48 := (binrel% HDiv.hDiv let47 let17)
  let let49 := (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x0) (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x2) (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x5) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x8) (binrel% HMul.hMul let48 x9))))))
  let let50 := (binrel% HMul.hMul let29 x2)
  let let51 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd (binrel% HMul.hMul let39 x6) (binrel% HAdd.hAdd let40 (binrel% HMul.hMul let39 x9))))
  let let52 := (binrel% HMul.hMul let29 x9)
  let let53 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x4) (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x6) let52))))
  let let54 := (binrel% HAdd.hAdd (binrel% HMul.hMul let28 x4) let52)
  let let55 := (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let32 let41))))))
  let let56 := (binrel% GT.gt let28 let1)
  let let57 := (binrel% HMul.hMul let2 let4)
  let let58 := (binrel% HMul.hMul let39 let5)
  let let59 := (binrel% HMul.hMul let20 let4)
  let let60 := (binrel% HMul.hMul let28 let1)
  let let61 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let46 let28))))))
  let let62 := (Not True)
  let let63 := (binrel% LE.le let25 let4)
  let let64 := (Not let63)
  let let65 := (binrel% GT.gt let25 let4)
  let let66 := (Eq let65 let64)
  let let67 := (binrel% GE.ge let25 let22)
  let let68 := (Not let67)
  let let69 := (binrel% GE.ge let44 let22)
  let let70 := (Not let69)
  let let71 := (Not let70)
  let let72 := (Eq let69 let71)
  let let73 := (Eq let71 let69)
  let let74 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd let24 (binrel% HMul.hMul let23 x9))))))
  let let75 := (binrel% GE.ge let74 let4)
  let let76 := (Not let75)
  let let77 := (binrel% HMul.hMul let47 x9)
  let let78 := (binrel% HMul.hMul let47 x8)
  let let79 := (Neg.neg let18)
  let let80 := (binrel% HMul.hMul let79 x5)
  let let81 := (binrel% HMul.hMul let18 x2)
  let let82 := (binrel% HMul.hMul let79 x1)
  let let83 := (binrel% HMul.hMul let79 x0)
  let let84 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let78 let77)))))
  let let85 := (binrel% GE.ge let84 let1)
  let let86 := (binrel% HMul.hMul x2 let22)
  let let87 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let86 x8)))
  let let88 := (binrel% HAdd.hAdd x6 x9)
  let let89 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let88 let86) x8)
  let let90 := (Eq let14 let14)
  let let91 := (binrel% LE.le let7 let5)
  let let92 := (binrel% HMul.hMul x2 let18)
  let let93 := (Neg.neg x7)
  let let94 := (binrel% HMul.hMul x5 let22)
  let let95 := (Neg.neg x8)
  let let96 := (binrel% HAdd.hAdd let95 (binrel% HAdd.hAdd let94 let93))
  let let97 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let95 let94) let93)
  let let98 := (binrel% HMul.hMul let22 x2)
  let let99 := (binrel% HAdd.hAdd let98 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x8 x9)))
  let let100 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let98 x8)))
  let let101 := (Neg.neg x2)
  let let102 := (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd x1 let93))
  let let103 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let101 x1) let93)
  let let104 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let43 let33))
  let let105 := (Not let68)
  let let106 := (Eq let67 let105)
  let let107 := (Eq let105 let67)
  let let108 := (Neg.neg x6)
  let let109 := (binrel% HMul.hMul let28 let13)
  let let110 := (binrel% GE.ge let36 let4)
  let let111 := (Not let110)
  let let112 := (Not let111)
  let let113 := (Eq let112 let110)
  let let114 := (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x0 let34))
  let let115 := (binrel% HMul.hMul let39 let99)
  let let116 := (Eq let110 let110)
  let let117 := (binrel% LE.le let36 let1)
  let let118 := (Not let76)
  let let119 := (binrel% HMul.hMul x5 let79)
  let let120 := (binrel% HMul.hMul let22 x8)
  let let121 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let120 x9)))
  let let122 := (binrel% LE.le let5 let121)
  let let123 := (binrel% HMul.hMul let5 x0)
  let let124 := (Neg.neg x0)
  let let125 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let120 let33)))
  let let126 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x4 let88)))
  let let127 := (binrel% LE.le let1 let126)
  let let128 := (Not let15)
  let let129 := (Eq let14 let128)
  let let130 := (Eq let128 let14)
  let let131 := (binrel% HMul.hMul x8 let47)
  let let132 := (binrel% HAdd.hAdd x1 x8)
  let let133 := (binrel% GE.ge let132 let4)
  let let134 := (binrel% LE.le let4 let132)
  let let135 := (binrel% GE.ge let99 let5)
  let let136 := (binrel% LE.le let5 let99)
  let let137 := (binrel% LT.lt let39 let1)
  let let138 := (binrel% HAdd.hAdd x8 x1)
  let let139 := (binrel% HMul.hMul let20 let74)
  let let140 := (binrel% GE.ge let46 let46)
  let let141 := (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x5) (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x7 let42)))) let4)
  let let142 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let33 x8))))
  let let143 := (binrel% LE.le let142 let5)
  let let144 := (binrel% LE.le let44 let4)
  let let145 := (Eq let8 let8)
  let let146 := (binrel% HMul.hMul let38 let22)
  let let147 := (binrel% HMul.hMul let28 let5)
  let let148 := (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd let60 let146))))))
  let let149 := (binrel% HMul.hMul let28 let7)
  let let150 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let37 let45))))))
  let let151 := (binrel% GE.ge let150 let148)
  let let152 := (Not let151)
  let let153 := (binrel% LT.lt let150 let148)
  let let154 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let33))))
  let let155 := (binrel% LT.lt let44 let22)
  let let156 := (binrel% HMul.hMul x1 let22)
  let let157 := (binrel% HAdd.hAdd let124 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let93))))
  let let158 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let124 x6) x5) x8) let93)
  let let159 := (binrel% LE.le let4 let138)
  let let160 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x9 x4) x6) let124) x2)
  let let161 := (binrel% LE.le let1 let160)
  let let162 := (binrel% LE.le let158 let5)
  let let163 := (binrel% LE.le let1 let103)
  let let164 := (binrel% HMul.hMul x8 let22)
  let let165 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let108 x9) let164) let93)
  let let166 := (binrel% LE.le let5 let165)
  let let167 := (binrel% LE.le let97 let4)
  let let168 := (binrel% HSub.hSub x4 x9)
  let let169 := (binrel% LE.le let168 let5)
  let let170 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let156 x0) x5) let93)
  let let171 := (binrel% LE.le let170 let1)
  let let172 := (binrel% LE.le let5 let89)
  let let173 := (binrel% HMul.hMul x9 let47)
  let let174 := (binrel% HMul.hMul x1 let79)
  let let175 := (binrel% HMul.hMul x0 let79)
  let let176 := (binrel% HAdd.hAdd let175 (binrel% HAdd.hAdd let174 (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let173 (binrel% HAdd.hAdd let92 let131)))))
  let let177 := (binrel% GE.ge let176 let1)
  let let178 := (Not let177)
  let let179 := (And let178 (And let172 (And let171 (And let169 (And let167 (And let166 (And let163 (And let162 (And let161 let159)))))))))
  let let180 := (And let178 (And (And (And (And (And (And (And (And let172 let171) let169) let167) let166) let163) let162) let161) let159))
  let let181 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let123 x2))))
  let let182 := (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let164 let93)))
  let let183 := (Eq let110 let112)
  let let184 := (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let12 let33))
  let let185 := (binrel% GE.ge let184 let1)
  let let186 := (binrel% LE.le let1 let184)
  let let187 := (binrel% LT.lt let36 let4)
  let let188 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x1 let33))
  let let189 := (binrel% GT.gt let38 let1)
  let let190 := (binrel% HAdd.hAdd let156 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x5 let93)))
  let let191 := (Eq let69 let69)
  let let192 := (binrel% LT.lt let25 let22)
  let let193 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let81 let78)))))
  let let194 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let124 x2))))
  let let195 := (Eq let67 let67)
  let let196 := (Not let9)
  let let197 := (Eq let196 let8)
  let let198 := (Eq let8 let196)
  let let199 := (And let75 (And let135 (And let111 (And let9 (And let70 (And let68 (And let185 (And let141 (And let15 let133)))))))))
  let let200 := (Eq let176 let84)
  let let201 := (Not let135)
  let let202 := (Or let69 (Or let110 (Or let76 (Or let201 (Or let14 (Or let8 let67))))))
  let let203 := (Or let71 (Or let112 (Or let76 (Or let201 (Or let128 (Or let196 let105))))))
  let let204 := (binrel% LT.lt let45 let146)
  let let205 := (And let189 let155)
  let let206 := (binrel% LE.le let37 let60)
  let let207 := (And let56 let117)
  let let208 := (binrel% LE.le let139 let59)
  let let209 := (And let21 let75)
  let let210 := (binrel% LE.le let115 let58)
  let let211 := (And let137 let135)
  let let212 := (binrel% LE.le let109 let60)
  let let213 := (binrel% LE.le let13 let1)
  let let214 := (And let56 let213)
  let let215 := (binrel% LE.le let149 let147)
  let let216 := (And let56 let91)
  let let217 := (binrel% LE.le let27 let57)
  let let218 := (And let3 let63)
(Eq let3 True) → (Eq let10 let9) → (Eq let16 let15) → (Eq let21 True) → (Eq let27 let26) → (Eq let37 let32) → (Eq let45 let41) → (Eq let55 let46) → (Eq let56 True) → (Eq let57 let2) → (Eq let58 let38) → (Eq let59 let20) → (Eq let60 let46) → (Eq let61 let46) → (Eq let62 False) → let66 → (Eq let63 let68) → (Eq let73 let72) → (Eq let85 let76) → (Eq let89 let87) → (Eq let90 True) → (Eq let91 let9) → (Eq let92 let81) → (Eq let97 let96) → (Eq let100 let99) → (Eq let103 let102) → (Eq let104 let44) → (Eq let107 let106) → (Eq let108 let11) → (Eq let109 let53) → let113 → (Eq let114 let36) → (Eq let115 let51) → (Eq let116 True) → (Eq let117 let111) → (Eq let118 let75) → (Eq let119 let80) → (Eq let122 let68) → (Eq let124 let123) → (Eq let125 let121) → (Eq let127 let15) → (Eq let86 let98) → (Eq let95 let42) → (Eq let130 let129) → (Eq let131 let78) → (Eq let134 let133) → (Eq let136 let135) → (Eq let93 let33) → (Eq let101 let12) → (Eq let137 True) → (Eq let138 let132) → (Eq let139 let49) → (Eq let140 True) → (Eq let143 let141) → (Eq let144 let70) → (Eq let145 True) → (Eq let153 let152) → (Eq let154 let142) → (Eq let155 let70) → (Eq let156 let35) → (Eq let158 let157) → (Eq let180 let179) → (Eq let181 let126) → (Eq let165 let182) → (Eq let149 let54) → (Eq let113 let183) → (Eq let186 let185) → (Eq let187 let111) → (Eq let147 let29) → (Eq let188 let184) → let73 → (Eq let189 True) → (Eq let146 let28) → (Eq let170 let190) → (Eq let191 True) → (Eq let192 let68) → (Eq let193 let84) → (Eq let173 let77) → (Eq let94 let43) → (Eq let160 let194) → let130 → (Eq let168 let7) → (Eq let174 let82) → (Eq let175 let83) → (Eq let176 let176) → (Eq let195 True) → (Eq let164 let120) → let107 → let197 → (Eq let197 let198) → let180 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 x9)
  let let7 := (binrel% HAdd.hAdd x4 let6)
  let let8 := (binrel% GE.ge let7 let1)
  let let9 := (Not let8)
  let let10 := (binrel% LT.lt let7 let1)
  let let11 := (binrel% HMul.hMul let5 x6)
  let let12 := (binrel% HMul.hMul let5 x2)
  let let13 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x4) (binrel% HAdd.hAdd let11 let6))))
  let let14 := (binrel% GE.ge let13 let4)
  let let15 := (Not let14)
  let let16 := (binrel% LT.lt let13 let4)
  let let17 := (Int.ofNat 3)
  let let18 := (Int.ofNat 4)
  let let19 := (binrel% HDiv.hDiv let18 let17)
  let let20 := (Neg.neg let19)
  let let21 := (binrel% LT.lt let20 let1)
  let let22 := (Int.ofNat 2)
  let let23 := (Neg.neg let22)
  let let24 := (binrel% HMul.hMul let23 x8)
  let let25 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd let24 let6)))
  let let26 := (Rat.ofInt let25)
  let let27 := (binrel% HMul.hMul let2 let25)
  let let28 := (binrel% HDiv.hDiv let22 let17)
  let let29 := (Neg.neg let28)
  let let30 := (binrel% HMul.hMul let28 x5)
  let let31 := (binrel% HMul.hMul let28 x0)
  let let32 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x1) (binrel% HAdd.hAdd let30 (binrel% HMul.hMul let29 x7))))
  let let33 := (binrel% HMul.hMul let5 x7)
  let let34 := (binrel% HAdd.hAdd x5 let33)
  let let35 := (binrel% HMul.hMul let22 x1)
  let let36 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let35 let34))
  let let37 := (binrel% HMul.hMul let28 let36)
  let let38 := (binrel% HDiv.hDiv let4 let17)
  let let39 := (Neg.neg let38)
  let let40 := (binrel% HMul.hMul let39 x8)
  let let41 := (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd (binrel% HMul.hMul let39 x7) let40))
  let let42 := (binrel% HMul.hMul let5 x8)
  let let43 := (binrel% HMul.hMul let22 x5)
  let let44 := (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let33 let42))
  let let45 := (binrel% HMul.hMul let38 let44)
  let let46 := (Rat.ofInt 0)
  let let47 := (Int.ofNat 8)
  let let48 := (binrel% HDiv.hDiv let47 let17)
  let let49 := (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x0) (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x2) (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x5) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x8) (binrel% HMul.hMul let48 x9))))))
  let let50 := (binrel% HMul.hMul let29 x2)
  let let51 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd (binrel% HMul.hMul let39 x6) (binrel% HAdd.hAdd let40 (binrel% HMul.hMul let39 x9))))
  let let52 := (binrel% HMul.hMul let29 x9)
  let let53 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x4) (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x6) let52))))
  let let54 := (binrel% HAdd.hAdd (binrel% HMul.hMul let28 x4) let52)
  let let55 := (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let32 let41))))))
  let let56 := (binrel% GT.gt let28 let1)
  let let57 := (binrel% HMul.hMul let2 let4)
  let let58 := (binrel% HMul.hMul let39 let5)
  let let59 := (binrel% HMul.hMul let20 let4)
  let let60 := (binrel% HMul.hMul let28 let1)
  let let61 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let46 let28))))))
  let let62 := (Not True)
  let let63 := (binrel% LE.le let25 let4)
  let let64 := (Not let63)
  let let65 := (binrel% GT.gt let25 let4)
  let let66 := (Eq let65 let64)
  let let67 := (binrel% GE.ge let25 let22)
  let let68 := (Not let67)
  let let69 := (binrel% GE.ge let44 let22)
  let let70 := (Not let69)
  let let71 := (Not let70)
  let let72 := (Eq let69 let71)
  let let73 := (Eq let71 let69)
  let let74 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd let24 (binrel% HMul.hMul let23 x9))))))
  let let75 := (binrel% GE.ge let74 let4)
  let let76 := (Not let75)
  let let77 := (binrel% HMul.hMul let47 x9)
  let let78 := (binrel% HMul.hMul let47 x8)
  let let79 := (Neg.neg let18)
  let let80 := (binrel% HMul.hMul let79 x5)
  let let81 := (binrel% HMul.hMul let18 x2)
  let let82 := (binrel% HMul.hMul let79 x1)
  let let83 := (binrel% HMul.hMul let79 x0)
  let let84 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let78 let77)))))
  let let85 := (binrel% GE.ge let84 let1)
  let let86 := (binrel% HMul.hMul x2 let22)
  let let87 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let86 x8)))
  let let88 := (binrel% HAdd.hAdd x6 x9)
  let let89 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let88 let86) x8)
  let let90 := (Eq let14 let14)
  let let91 := (binrel% LE.le let7 let5)
  let let92 := (binrel% HMul.hMul x2 let18)
  let let93 := (Neg.neg x7)
  let let94 := (binrel% HMul.hMul x5 let22)
  let let95 := (Neg.neg x8)
  let let96 := (binrel% HAdd.hAdd let95 (binrel% HAdd.hAdd let94 let93))
  let let97 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let95 let94) let93)
  let let98 := (binrel% HMul.hMul let22 x2)
  let let99 := (binrel% HAdd.hAdd let98 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x8 x9)))
  let let100 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let98 x8)))
  let let101 := (Neg.neg x2)
  let let102 := (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd x1 let93))
  let let103 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let101 x1) let93)
  let let104 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let43 let33))
  let let105 := (Not let68)
  let let106 := (Eq let67 let105)
  let let107 := (Eq let105 let67)
  let let108 := (Neg.neg x6)
  let let109 := (binrel% HMul.hMul let28 let13)
  let let110 := (binrel% GE.ge let36 let4)
  let let111 := (Not let110)
  let let112 := (Not let111)
  let let113 := (Eq let112 let110)
  let let114 := (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x0 let34))
  let let115 := (binrel% HMul.hMul let39 let99)
  let let116 := (Eq let110 let110)
  let let117 := (binrel% LE.le let36 let1)
  let let118 := (Not let76)
  let let119 := (binrel% HMul.hMul x5 let79)
  let let120 := (binrel% HMul.hMul let22 x8)
  let let121 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let120 x9)))
  let let122 := (binrel% LE.le let5 let121)
  let let123 := (binrel% HMul.hMul let5 x0)
  let let124 := (Neg.neg x0)
  let let125 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let120 let33)))
  let let126 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x4 let88)))
  let let127 := (binrel% LE.le let1 let126)
  let let128 := (Not let15)
  let let129 := (Eq let14 let128)
  let let130 := (Eq let128 let14)
  let let131 := (binrel% HMul.hMul x8 let47)
  let let132 := (binrel% HAdd.hAdd x1 x8)
  let let133 := (binrel% GE.ge let132 let4)
  let let134 := (binrel% LE.le let4 let132)
  let let135 := (binrel% GE.ge let99 let5)
  let let136 := (binrel% LE.le let5 let99)
  let let137 := (binrel% LT.lt let39 let1)
  let let138 := (binrel% HAdd.hAdd x8 x1)
  let let139 := (binrel% HMul.hMul let20 let74)
  let let140 := (binrel% GE.ge let46 let46)
  let let141 := (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x5) (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x7 let42)))) let4)
  let let142 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let33 x8))))
  let let143 := (binrel% LE.le let142 let5)
  let let144 := (binrel% LE.le let44 let4)
  let let145 := (Eq let8 let8)
  let let146 := (binrel% HMul.hMul let38 let22)
  let let147 := (binrel% HMul.hMul let28 let5)
  let let148 := (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd let60 let146))))))
  let let149 := (binrel% HMul.hMul let28 let7)
  let let150 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let37 let45))))))
  let let151 := (binrel% GE.ge let150 let148)
  let let152 := (Not let151)
  let let153 := (binrel% LT.lt let150 let148)
  let let154 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let33))))
  let let155 := (binrel% LT.lt let44 let22)
  let let156 := (binrel% HMul.hMul x1 let22)
  let let157 := (binrel% HAdd.hAdd let124 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let93))))
  let let158 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let124 x6) x5) x8) let93)
  let let159 := (binrel% LE.le let4 let138)
  let let160 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x9 x4) x6) let124) x2)
  let let161 := (binrel% LE.le let1 let160)
  let let162 := (binrel% LE.le let158 let5)
  let let163 := (binrel% LE.le let1 let103)
  let let164 := (binrel% HMul.hMul x8 let22)
  let let165 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let108 x9) let164) let93)
  let let166 := (binrel% LE.le let5 let165)
  let let167 := (binrel% LE.le let97 let4)
  let let168 := (binrel% HSub.hSub x4 x9)
  let let169 := (binrel% LE.le let168 let5)
  let let170 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let156 x0) x5) let93)
  let let171 := (binrel% LE.le let170 let1)
  let let172 := (binrel% LE.le let5 let89)
  let let173 := (binrel% HMul.hMul x9 let47)
  let let174 := (binrel% HMul.hMul x1 let79)
  let let175 := (binrel% HMul.hMul x0 let79)
  let let176 := (binrel% HAdd.hAdd let175 (binrel% HAdd.hAdd let174 (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let173 (binrel% HAdd.hAdd let92 let131)))))
  let let177 := (binrel% GE.ge let176 let1)
  let let178 := (Not let177)
  let let179 := (And let178 (And let172 (And let171 (And let169 (And let167 (And let166 (And let163 (And let162 (And let161 let159)))))))))
  let let180 := (And let178 (And (And (And (And (And (And (And (And let172 let171) let169) let167) let166) let163) let162) let161) let159))
  let let181 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let123 x2))))
  let let182 := (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let164 let93)))
  let let183 := (Eq let110 let112)
  let let184 := (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let12 let33))
  let let185 := (binrel% GE.ge let184 let1)
  let let186 := (binrel% LE.le let1 let184)
  let let187 := (binrel% LT.lt let36 let4)
  let let188 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x1 let33))
  let let189 := (binrel% GT.gt let38 let1)
  let let190 := (binrel% HAdd.hAdd let156 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x5 let93)))
  let let191 := (Eq let69 let69)
  let let192 := (binrel% LT.lt let25 let22)
  let let193 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let81 let78)))))
  let let194 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let124 x2))))
  let let195 := (Eq let67 let67)
  let let196 := (Not let9)
  let let197 := (Eq let196 let8)
  let let198 := (Eq let8 let196)
  let let199 := (And let75 (And let135 (And let111 (And let9 (And let70 (And let68 (And let185 (And let141 (And let15 let133)))))))))
  let let200 := (Eq let176 let84)
  let let201 := (Not let135)
  let let202 := (Or let69 (Or let110 (Or let76 (Or let201 (Or let14 (Or let8 let67))))))
  let let203 := (Or let71 (Or let112 (Or let76 (Or let201 (Or let128 (Or let196 let105))))))
  let let204 := (binrel% LT.lt let45 let146)
  let let205 := (And let189 let155)
  let let206 := (binrel% LE.le let37 let60)
  let let207 := (And let56 let117)
  let let208 := (binrel% LE.le let139 let59)
  let let209 := (And let21 let75)
  let let210 := (binrel% LE.le let115 let58)
  let let211 := (And let137 let135)
  let let212 := (binrel% LE.le let109 let60)
  let let213 := (binrel% LE.le let13 let1)
  let let214 := (And let56 let213)
  let let215 := (binrel% LE.le let149 let147)
  let let216 := (And let56 let91)
  let let217 := (binrel% LE.le let27 let57)
  let let218 := (And let3 let63)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let16 let15) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let21 True) => -- EVALUATE
fun lean_r4 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let37 let32) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let45 let41) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let55 let46) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let56 True) => -- EVALUATE
fun lean_r9 : (Eq let57 let2) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let58 let38) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let59 let20) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let60 let46) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let61 let46) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let62 False) => -- THEORY_REWRITE_BOOL
fun lean_r15 : let66 => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let63 let68) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let73 let72) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let85 let76) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let89 let87) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let90 True) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let91 let9) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let92 let81) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let97 let96) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let100 let99) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let103 let102) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let104 let44) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let107 let106) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let108 let11) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let109 let53) => -- THEORY_REWRITE_ARITH
fun lean_r30 : let113 => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let114 let36) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let115 let51) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let116 True) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let117 let111) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let118 let75) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let119 let80) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let122 let68) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let124 let123) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let125 let121) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let127 let15) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let86 let98) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let95 let42) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let130 let129) => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let131 let78) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let134 let133) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let136 let135) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let93 let33) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let101 let12) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let137 True) => -- EVALUATE
fun lean_r50 : (Eq let138 let132) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let139 let49) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let140 True) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let143 let141) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let144 let70) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let145 True) => -- THEORY_REWRITE_BOOL
fun lean_r56 : (Eq let153 let152) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let154 let142) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let155 let70) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let156 let35) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let158 let157) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let180 let179) => -- THEORY_REWRITE_BOOL
fun lean_r62 : (Eq let181 let126) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let165 let182) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq let149 let54) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let113 let183) => -- THEORY_REWRITE_BOOL
fun lean_r66 : (Eq let186 let185) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq let187 let111) => -- THEORY_REWRITE_ARITH
fun lean_r68 : (Eq let147 let29) => -- THEORY_REWRITE_ARITH
fun lean_r69 : (Eq let188 let184) => -- THEORY_REWRITE_ARITH
fun lean_r70 : let73 => -- THEORY_REWRITE_BOOL
fun lean_r71 : (Eq let189 True) => -- EVALUATE
fun lean_r72 : (Eq let146 let28) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let170 let190) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let191 True) => -- THEORY_REWRITE_BOOL
fun lean_r75 : (Eq let192 let68) => -- THEORY_REWRITE_ARITH
fun lean_r76 : (Eq let193 let84) => -- THEORY_REWRITE_ARITH
fun lean_r77 : (Eq let173 let77) => -- THEORY_REWRITE_ARITH
fun lean_r78 : (Eq let94 let43) => -- THEORY_REWRITE_ARITH
fun lean_r79 : (Eq let160 let194) => -- THEORY_REWRITE_ARITH
fun lean_r80 : let130 => -- THEORY_REWRITE_BOOL
fun lean_r81 : (Eq let168 let7) => -- THEORY_REWRITE_ARITH
fun lean_r82 : (Eq let174 let82) => -- THEORY_REWRITE_ARITH
fun lean_r83 : (Eq let175 let83) => -- THEORY_REWRITE_ARITH
fun lean_r84 : (Eq let176 let176) => -- THEORY_REWRITE_ARITH
fun lean_r85 : (Eq let195 True) => -- THEORY_REWRITE_BOOL
fun lean_r86 : (Eq let164 let120) => -- THEORY_REWRITE_ARITH
fun lean_r87 : let107 => -- THEORY_REWRITE_BOOL
fun lean_r88 : let197 => -- THEORY_REWRITE_BOOL
fun lean_r89 : (Eq let197 let198) => -- THEORY_REWRITE_BOOL
fun lean_a90 : let180 => by
have lean_s0 : (Or let71 (Or let112 (Or let76 (Or let201 (Or let128 (Or let196 (Or let105 False))))))) :=
  (scope (fun lean_a91 : let70 =>
    (scope (fun lean_a92 : let111 =>
      (scope (fun lean_a93 : let75 =>
        (scope (fun lean_a94 : let135 =>
          (scope (fun lean_a95 : let15 =>
            (scope (fun lean_a96 : let9 =>
              (scope (fun lean_a97 : let68 =>
                have lean_s0 : (Eq let68 let192) := by timed Eq.symm lean_r75
                have lean_s1 : let192 := by timed eqResolve lean_a97 lean_s0
                have lean_s2 : let63 := by intTightUb lean_s1
                have lean_s3 : (Or let64 False) :=
                  (scope (fun lean_a98 : let63 =>
                    have lean_s3 : let3 := by timed trueElim lean_r0
                    have lean_s4 : let218 := by timed And.intro lean_s3 lean_a98
                    have lean_s5 : (Implies let218 let217) := by arithMulPos [let25, let4, let2], 1
                    have lean_s6 : let217 := by timed modusPonens lean_s4 lean_s5
                    have lean_s7 : let56 := by timed trueElim lean_r8
                    have lean_s8 : (Eq let9 let10) := by timed Eq.symm lean_r1
                    have lean_s9 : let10 := by timed eqResolve lean_a96 lean_s8
                    have lean_s10 : let91 := by intTightUb lean_s9
                    have lean_s11 : let216 := by timed And.intro lean_s7 lean_s10
                    have lean_s12 : (Implies let216 let215) := by arithMulPos [let7, let5, let28], 1
                    have lean_s13 : let215 := by timed modusPonens lean_s11 lean_s12
                    have lean_s14 : (Eq let15 let16) := by timed Eq.symm lean_r2
                    have lean_s15 : let16 := by timed eqResolve lean_a95 lean_s14
                    have lean_s16 : let213 := by intTightUb lean_s15
                    have lean_s17 : let214 := by timed And.intro lean_s7 lean_s16
                    have lean_s18 : (Implies let214 let212) := by arithMulPos [let13, let1, let28], 1
                    have lean_s19 : let212 := by timed modusPonens lean_s17 lean_s18
                    have lean_s20 : let137 := by timed trueElim lean_r49
                    have lean_s21 : let211 := by timed And.intro lean_s20 lean_a94
                    have lean_s22 : (Implies let211 let210) := by arithMulNeg [let99, let5, let39], 3
                    have lean_s23 : let210 := by timed modusPonens lean_s21 lean_s22
                    have lean_s24 : let21 := by timed trueElim lean_r3
                    have lean_s25 : let209 := by timed And.intro lean_s24 lean_a93
                    have lean_s26 : (Implies let209 let208) := by arithMulNeg [let74, let4, let20], 3
                    have lean_s27 : let208 := by timed modusPonens lean_s25 lean_s26
                    have lean_s28 : (Eq let111 let187) := by timed Eq.symm lean_r67
                    have lean_s29 : let187 := by timed eqResolve lean_a92 lean_s28
                    have lean_s30 : let117 := by intTightUb lean_s29
                    have lean_s31 : let207 := by timed And.intro lean_s7 lean_s30
                    have lean_s32 : (Implies let207 let206) := by arithMulPos [let36, let1, let28], 1
                    have lean_s33 : let206 := by timed modusPonens lean_s31 lean_s32
                    have lean_s34 : let189 := by timed trueElim lean_r71
                    have lean_s35 : (Eq let70 let155) := by timed Eq.symm lean_r58
                    have lean_s36 : let155 := by timed eqResolve lean_a91 lean_s35
                    have lean_s37 : let205 := by timed And.intro lean_s34 lean_s36
                    have lean_s38 : (Implies let205 let204) := by arithMulPos [let44, let22, let38], 0
                    have lean_s39 : let204 := by timed modusPonens lean_s37 lean_s38
                    have lean_s40 : let153 := by sumBounds [lean_s6, lean_s13, lean_s19, lean_s23, lean_s27, lean_s33, lean_s39]
                    let lean_s41 := by timed congrHAdd lean_r5 lean_r6
                    let lean_s42 := by timed congrHAdd lean_r51 lean_s41
                    let lean_s43 := by timed congrHAdd lean_r32 lean_s42
                    let lean_s44 := by timed congrHAdd lean_r29 lean_s43
                    let lean_s45 := by timed congrHAdd lean_r64 lean_s44
                    have lean_s46 : (Eq let150 let55) := by timed congrHAdd lean_r4 lean_s45
                    have lean_s47 : (Eq let150 let46) := by timed Eq.trans lean_s46 lean_r7
                    let lean_s48 := by timed flipCongrArg lean_s47 [GE.ge]
                    let lean_s49 := by timed congrHAdd lean_r12 lean_r72
                    let lean_s50 := by timed congrHAdd lean_r11 lean_s49
                    let lean_s51 := by timed congrHAdd lean_r10 lean_s50
                    let lean_s52 := by timed congrHAdd lean_r12 lean_s51
                    let lean_s53 := by timed congrHAdd lean_r68 lean_s52
                    have lean_s54 : (Eq let148 let61) := by timed congrHAdd lean_r9 lean_s53
                    have lean_s55 : (Eq let148 let46) := by timed Eq.trans lean_s54 lean_r13
                    have lean_s56 : (Eq let151 let140) := by timed congr lean_s48 lean_s55
                    have lean_s57 : (Eq let151 True) := by timed Eq.trans lean_s56 lean_r52
                    have lean_s58 : (Eq let152 let62) := by timed flipCongrArg lean_s57 [Not]
                    have lean_s59 : (Eq let152 False) := by timed Eq.trans lean_s58 lean_r14
                    have lean_s60 : (Eq let153 False) := by timed Eq.trans lean_r56 lean_s59
                    show False from by timed eqResolve lean_s40 lean_s60
                  ))
                have lean_s4 : let64 := by liftOrNToNeg lean_s3
                have lean_s5 : (Eq let64 let105) := by timed flipCongrArg lean_r16 [Not]
                have lean_s6 : (Eq let64 let67) := by timed Eq.trans lean_s5 lean_r87
                have lean_s7 : (Eq let65 let67) := by timed Eq.trans lean_r15 lean_s6
                have lean_s8 : (Eq let67 let65) := by timed Eq.symm lean_s7
                have lean_s9 : (Eq let64 let65) := by timed Eq.trans lean_s6 lean_s8
                have lean_s10 : let65 := by timed eqResolve lean_s4 lean_s9
                have lean_s11 : (Eq let67 let64) := by timed Eq.symm lean_s6
                have lean_s12 : let66 := by timed Eq.trans lean_s7 lean_s11
                have lean_s13 : let64 := by timed eqResolve lean_s10 lean_s12
                show False from by timed contradiction lean_s2 lean_s13
  ))))))))))))))
have lean_s1 : (Not (And let70 (And let111 (And let75 (And let135 (And let15 (And let9 let68))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let203 := by timed flipNotAnd lean_s1 [let70, let111, let75, let135, let15, let9, let68]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let191 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let72 let191) := by timed congr lean_s5 lean_r70
have lean_s7 : (Eq let72 True) := by timed Eq.trans lean_s6 lean_r74
have lean_s8 : (Eq let73 True) := by timed Eq.trans lean_r17 lean_s7
have lean_s9 : let73 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let116 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let183 let116) := by timed congr lean_s12 lean_r30
have lean_s14 : (Eq let183 True) := by timed Eq.trans lean_s13 lean_r33
have lean_s15 : (Eq let113 True) := by timed Eq.trans lean_r65 lean_s14
have lean_s16 : let113 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq let76 let76) := by timed rfl
let lean_s19 := by timed congr lean_s3 lean_s18
have lean_s20 : (Eq let201 let201) := by timed rfl
let lean_s21 := by timed congr lean_s3 lean_s20
have lean_s22 : let90 := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [Eq]
have lean_s24 : (Eq let129 let90) := by timed congr lean_s23 lean_r80
have lean_s25 : (Eq let129 True) := by timed Eq.trans lean_s24 lean_r20
have lean_s26 : (Eq let130 True) := by timed Eq.trans lean_r43 lean_s25
have lean_s27 : let130 := by timed trueElim lean_s26
let lean_s28 := by timed congr lean_s3 lean_s27
have lean_s29 : let145 := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [Eq]
have lean_s31 : (Eq let198 let145) := by timed congr lean_s30 lean_r88
have lean_s32 : (Eq let198 True) := by timed Eq.trans lean_s31 lean_r55
have lean_s33 : (Eq let197 True) := by timed Eq.trans lean_r89 lean_s32
have lean_s34 : let197 := by timed trueElim lean_s33
let lean_s35 := by timed congr lean_s3 lean_s34
have lean_s36 : let195 := by timed rfl
let lean_s37 := by timed flipCongrArg lean_s36 [Eq]
have lean_s38 : (Eq let106 let195) := by timed congr lean_s37 lean_r87
have lean_s39 : (Eq let106 True) := by timed Eq.trans lean_s38 lean_r85
have lean_s40 : (Eq let107 True) := by timed Eq.trans lean_r27 lean_s39
have lean_s41 : let107 := by timed trueElim lean_s40
let lean_s42 := by timed congr lean_s35 lean_s41
let lean_s43 := by timed congr lean_s28 lean_s42
let lean_s44 := by timed congr lean_s21 lean_s43
let lean_s45 := by timed congr lean_s19 lean_s44
let lean_s46 := by timed congr lean_s17 lean_s45
have lean_s47 : (Eq let203 let202) := by timed congr lean_s10 lean_s46
have lean_s48 : let202 := by timed eqResolve lean_s2 lean_s47
have lean_s49 : (Or let76 (Or let110 (Or let8 (Or let69 (Or let67 (Or let14 let201)))))) := by permutateOr lean_s48, [2, 1, 5, 0, 6, 4, 3], (- 1)
have lean_s50 : (Eq And And) := by timed rfl
let lean_s51 := by timed congrHAdd lean_r22 lean_r44
let lean_s52 := by timed congrHAdd lean_r77 lean_s51
let lean_s53 := by timed congrHAdd lean_r36 lean_s52
let lean_s54 := by timed congrHAdd lean_r82 lean_s53
have lean_s55 : (Eq let176 let193) := by timed congrHAdd lean_r83 lean_s54
have lean_s56 : let200 := by timed Eq.trans lean_s55 lean_r76
have lean_s57 : let200 := by timed Eq.trans lean_r84 lean_s56
let lean_s58 := by timed flipCongrArg lean_s57 [GE.ge]
have lean_s59 : (Eq let1 let1) := by timed rfl
have lean_s60 : (Eq let177 let85) := by timed congr lean_s58 lean_s59
have lean_s61 : (Eq let177 let76) := by timed Eq.trans lean_s60 lean_r18
have lean_s62 : (Eq let178 let118) := by timed flipCongrArg lean_s61 [Not]
have lean_s63 : (Eq let178 let75) := by timed Eq.trans lean_s62 lean_r35
let lean_s64 := by timed congr lean_s50 lean_s63
have lean_s65 : (Eq let5 let5) := by timed rfl
let lean_s66 := by timed flipCongrArg lean_s65 [LE.le]
have lean_s67 : (Eq x6 x6) := by timed rfl
have lean_s68 : (Eq x9 x9) := by timed rfl
have lean_s69 : (Eq x8 x8) := by timed rfl
let lean_s70 := by timed congrHAdd lean_r41 lean_s69
let lean_s71 := by timed congrHAdd lean_s68 lean_s70
have lean_s72 : (Eq let87 let100) := by timed congrHAdd lean_s67 lean_s71
have lean_s73 : (Eq let87 let99) := by timed Eq.trans lean_s72 lean_r24
have lean_s74 : (Eq let89 let99) := by timed Eq.trans lean_r19 lean_s73
have lean_s75 : (Eq let172 let136) := by timed congr lean_s66 lean_s74
have lean_s76 : (Eq let172 let135) := by timed Eq.trans lean_s75 lean_r46
let lean_s77 := by timed congr lean_s50 lean_s76
have lean_s78 : (Eq x0 x0) := by timed rfl
have lean_s79 : (Eq x5 x5) := by timed rfl
let lean_s80 := by timed congrHAdd lean_s79 lean_r47
let lean_s81 := by timed congrHAdd lean_s78 lean_s80
have lean_s82 : (Eq let190 let114) := by timed congrHAdd lean_r59 lean_s81
have lean_s83 : (Eq let190 let36) := by timed Eq.trans lean_s82 lean_r31
have lean_s84 : (Eq let170 let36) := by timed Eq.trans lean_r73 lean_s83
let lean_s85 := by timed flipCongrArg lean_s84 [LE.le]
have lean_s86 : (Eq let171 let117) := by timed congr lean_s85 lean_s59
have lean_s87 : (Eq let171 let111) := by timed Eq.trans lean_s86 lean_r34
let lean_s88 := by timed congr lean_s50 lean_s87
let lean_s89 := by timed flipCongrArg lean_r81 [LE.le]
have lean_s90 : (Eq let169 let91) := by timed congr lean_s89 lean_s65
have lean_s91 : (Eq let169 let9) := by timed Eq.trans lean_s90 lean_r21
let lean_s92 := by timed congr lean_s50 lean_s91
let lean_s93 := by timed congrHAdd lean_r78 lean_r47
have lean_s94 : (Eq let96 let104) := by timed congrHAdd lean_r42 lean_s93
have lean_s95 : (Eq let96 let44) := by timed Eq.trans lean_s94 lean_r26
have lean_s96 : (Eq let97 let44) := by timed Eq.trans lean_r23 lean_s95
let lean_s97 := by timed flipCongrArg lean_s96 [LE.le]
have lean_s98 : (Eq let4 let4) := by timed rfl
have lean_s99 : (Eq let167 let144) := by timed congr lean_s97 lean_s98
have lean_s100 : (Eq let167 let70) := by timed Eq.trans lean_s99 lean_r54
let lean_s101 := by timed congr lean_s50 lean_s100
let lean_s102 := by timed flipCongrArg lean_s65 [LE.le]
let lean_s103 := by timed congrHAdd lean_r86 lean_r47
let lean_s104 := by timed congrHAdd lean_s68 lean_s103
have lean_s105 : (Eq let182 let125) := by timed congrHAdd lean_r28 lean_s104
have lean_s106 : (Eq let182 let121) := by timed Eq.trans lean_s105 lean_r39
have lean_s107 : (Eq let165 let121) := by timed Eq.trans lean_r63 lean_s106
have lean_s108 : (Eq let166 let122) := by timed congr lean_s102 lean_s107
have lean_s109 : (Eq let166 let68) := by timed Eq.trans lean_s108 lean_r37
let lean_s110 := by timed congr lean_s50 lean_s109
let lean_s111 := by timed flipCongrArg lean_s59 [LE.le]
have lean_s112 : (Eq x1 x1) := by timed rfl
let lean_s113 := by timed congrHAdd lean_s112 lean_r47
have lean_s114 : (Eq let102 let188) := by timed congrHAdd lean_r48 lean_s113
have lean_s115 : (Eq let102 let184) := by timed Eq.trans lean_s114 lean_r69
have lean_s116 : (Eq let103 let184) := by timed Eq.trans lean_r25 lean_s115
have lean_s117 : (Eq let163 let186) := by timed congr lean_s111 lean_s116
have lean_s118 : (Eq let163 let185) := by timed Eq.trans lean_s117 lean_r66
let lean_s119 := by timed congr lean_s50 lean_s118
let lean_s120 := by timed congrHAdd lean_s69 lean_r47
let lean_s121 := by timed congrHAdd lean_s79 lean_s120
let lean_s122 := by timed congrHAdd lean_s67 lean_s121
have lean_s123 : (Eq let157 let154) := by timed congrHAdd lean_r38 lean_s122
have lean_s124 : (Eq let157 let142) := by timed Eq.trans lean_s123 lean_r57
have lean_s125 : (Eq let158 let142) := by timed Eq.trans lean_r60 lean_s124
let lean_s126 := by timed flipCongrArg lean_s125 [LE.le]
have lean_s127 : (Eq let162 let143) := by timed congr lean_s126 lean_s65
have lean_s128 : (Eq let162 let141) := by timed Eq.trans lean_s127 lean_r53
let lean_s129 := by timed congr lean_s50 lean_s128
let lean_s130 := by timed flipCongrArg lean_s59 [LE.le]
have lean_s131 : (Eq x4 x4) := by timed rfl
have lean_s132 : (Eq x2 x2) := by timed rfl
let lean_s133 := by timed congrHAdd lean_r38 lean_s132
let lean_s134 := by timed congrHAdd lean_s67 lean_s133
let lean_s135 := by timed congrHAdd lean_s131 lean_s134
have lean_s136 : (Eq let194 let181) := by timed congrHAdd lean_s68 lean_s135
have lean_s137 : (Eq let194 let126) := by timed Eq.trans lean_s136 lean_r62
have lean_s138 : (Eq let160 let126) := by timed Eq.trans lean_r79 lean_s137
have lean_s139 : (Eq let161 let127) := by timed congr lean_s130 lean_s138
have lean_s140 : (Eq let161 let15) := by timed Eq.trans lean_s139 lean_r40
let lean_s141 := by timed congr lean_s50 lean_s140
let lean_s142 := by timed flipCongrArg lean_s98 [LE.le]
have lean_s143 : (Eq let159 let134) := by timed congr lean_s142 lean_r50
have lean_s144 : (Eq let159 let133) := by timed Eq.trans lean_s143 lean_r45
let lean_s145 := by timed congr lean_s141 lean_s144
let lean_s146 := by timed congr lean_s129 lean_s145
let lean_s147 := by timed congr lean_s119 lean_s146
let lean_s148 := by timed congr lean_s110 lean_s147
let lean_s149 := by timed congr lean_s101 lean_s148
let lean_s150 := by timed congr lean_s92 lean_s149
let lean_s151 := by timed congr lean_s88 lean_s150
let lean_s152 := by timed congr lean_s77 lean_s151
have lean_s153 : (Eq let179 let199) := by timed congr lean_s64 lean_s152
have lean_s154 : (Eq let180 let199) := by timed Eq.trans lean_r61 lean_s153
have lean_s155 : let199 := by timed eqResolve lean_a90 lean_s154
have lean_s156 : let15 := by andElim lean_s155, 8
let lean_s157 := by R1 lean_s49, lean_s156, let14, [(- 1), 0]
have lean_s158 : let68 := by andElim lean_s155, 5
let lean_s159 := by R1 lean_s157, lean_s158, let67, [(- 1), 0]
have lean_s160 : let70 := by andElim lean_s155, 4
let lean_s161 := by R1 lean_s159, lean_s160, let69, [(- 1), 0]
have lean_s162 : let9 := by andElim lean_s155, 3
let lean_s163 := by R1 lean_s161, lean_s162, let8, [(- 1), 0]
have lean_s164 : let111 := by andElim lean_s155, 2
let lean_s165 := by R1 lean_s163, lean_s164, let110, [(- 1), 0]
have lean_s166 : let135 := by andElim lean_s155, 1
let lean_s167 := by R2 lean_s165, lean_s166, let135, [(- 1), 0]
have lean_s168 : let75 := by andElim lean_s155, 0
exact (show False from by R2 lean_s167, lean_s168, let75, [0, 0])


