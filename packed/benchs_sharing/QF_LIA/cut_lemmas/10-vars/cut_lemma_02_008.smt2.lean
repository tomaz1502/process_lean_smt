open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x9 : Int}
variable {x4 : Int}
variable {x6 : Int}
variable {x1 : Int}
variable {x8 : Int}
variable {x0 : Int}
variable {x6 : Int}
variable {x9 : Int}
variable {x7 : Int}
variable {x2 : Int}
variable {x1 : Int}
variable {x7 : Int}
variable {x5 : Int}
variable {x5 : Int}
variable {x4 : Int}
variable {x8 : Int}
variable {x2 : Int}
variable {x0 : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Neg.neg (Rat.ofInt 12))
  let let3 := (binrel% LT.lt let2 let1)
  let let4 := (Rat.ofInt 6)
  let let5 := (binrel% GT.gt let4 let1)
  let let6 := (Int.ofNat 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 x7)
  let let9 := (binrel% HAdd.hAdd x5 let8)
  let let10 := (Int.ofNat 2)
  let let11 := (binrel% HMul.hMul let10 x1)
  let let12 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let11 let9))
  let let13 := (binrel% GE.ge let12 let6)
  let let14 := (Not let13)
  let let15 := (binrel% LT.lt let12 let6)
  let let16 := (Neg.neg (Rat.ofInt 4))
  let let17 := (binrel% LT.lt let16 let1)
  let let18 := (Int.ofNat 12)
  let let19 := (Neg.neg let18)
  let let20 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x7) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x8) (binrel% HMul.hMul let19 x9)))))
  let let21 := (binrel% HAdd.hAdd x8 x9)
  let let22 := (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let8 let21))
  let let23 := (binrel% HMul.hMul let2 let22)
  let let24 := (Int.ofNat 6)
  let let25 := (Neg.neg let24)
  let let26 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let24 x0) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let24 x5) (binrel% HMul.hMul let25 x7)))))
  let let27 := (binrel% HMul.hMul let4 let12)
  let let28 := (Rat.ofInt 0)
  let let29 := (binrel% HMul.hMul let2 let1)
  let let30 := (binrel% HMul.hMul let4 let1)
  let let31 := (binrel% HMul.hMul let16 let6)
  let let32 := (Rat.ofInt 3)
  let let33 := (Rat.ofInt 2)
  let let34 := (Neg.neg let33)
  let let35 := (Rat.ofInt 1)
  let let36 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let28 let16)))))))
  let let37 := (Not let14)
  let let38 := (Eq let13 let37)
  let let39 := (Eq let37 let13)
  let let40 := (Eq let13 let13)
  let let41 := (binrel% HMul.hMul let7 x9)
  let let42 := (Neg.neg let10)
  let let43 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd (binrel% HMul.hMul let42 x8) let41)))
  let let44 := (binrel% GE.ge let43 let10)
  let let45 := (Not let44)
  let let46 := (binrel% LT.lt let43 let10)
  let let47 := (binrel% HAdd.hAdd x4 let41)
  let let48 := (binrel% GE.ge let47 let1)
  let let49 := (Not let48)
  let let50 := (binrel% LT.lt let47 let1)
  let let51 := (Neg.neg let35)
  let let52 := (binrel% LT.lt let51 let1)
  let let53 := (binrel% GT.gt let35 let1)
  let let54 := (binrel% HMul.hMul let7 x8)
  let let55 := (binrel% HMul.hMul let10 x5)
  let let56 := (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let8 let54))
  let let57 := (binrel% GE.ge let56 let10)
  let let58 := (Not let57)
  let let59 := (binrel% LT.lt let56 let10)
  let let60 := (binrel% GT.gt let32 let1)
  let let61 := (binrel% GE.ge let22 let1)
  let let62 := (Not let61)
  let let63 := (binrel% LT.lt let22 let1)
  let let64 := (binrel% HMul.hMul let42 x9)
  let let65 := (binrel% HMul.hMul let42 x2)
  let let66 := (binrel% HMul.hMul let10 x0)
  let let67 := (Rat.ofInt (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd (binrel% HMul.hMul let42 x4) (binrel% HAdd.hAdd (binrel% HMul.hMul let42 x6) let64)))))
  let let68 := (binrel% HMul.hMul let7 x6)
  let let69 := (binrel% HMul.hMul let7 x2)
  let let70 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x4) (binrel% HAdd.hAdd let68 let41))))
  let let71 := (binrel% HMul.hMul let33 let70)
  let let72 := (Int.ofNat 3)
  let let73 := (Neg.neg let72)
  let let74 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x7) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x8) (binrel% HMul.hMul let72 x9)))))
  let let75 := (binrel% HMul.hMul let32 let22)
  let let76 := (binrel% GE.ge let70 let6)
  let let77 := (Not let76)
  let let78 := (binrel% LT.lt let70 let6)
  let let79 := (binrel% HMul.hMul let72 x7)
  let let80 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x2) let79)))
  let let81 := (Rat.ofInt let56)
  let let82 := (Rat.ofInt (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let54 let41))))
  let let83 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x4) let64))
  let let84 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x6) (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd (binrel% HMul.hMul let25 x8) (binrel% HMul.hMul let73 x9)))))
  let let85 := (Int.ofNat 5)
  let let86 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let42 x0) (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd (binrel% HMul.hMul let42 x5) (binrel% HAdd.hAdd (binrel% HMul.hMul let42 x7) (binrel% HAdd.hAdd (binrel% HMul.hMul let85 x8) (binrel% HMul.hMul let85 x9)))))))
  let let87 := (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let80 let74)))))))
  let let88 := (binrel% HMul.hMul let32 let6)
  let let89 := (binrel% HMul.hMul let33 let1)
  let let90 := (binrel% HMul.hMul let33 let7)
  let let91 := (binrel% HMul.hMul let35 let10)
  let let92 := (Neg.neg let32)
  let let93 := (binrel% HMul.hMul let92 let1)
  let let94 := (binrel% HMul.hMul let32 let7)
  let let95 := (Not True)
  let let96 := (binrel% HMul.hMul let51 let6)
  let let97 := (Neg.neg let85)
  let let98 := (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x7) (binrel% HAdd.hAdd (binrel% HMul.hMul let97 x8) (binrel% HMul.hMul let97 x9))))))
  let let99 := (binrel% GE.ge let98 let6)
  let let100 := (Not let99)
  let let101 := (binrel% LT.lt let98 let6)
  let let102 := (binrel% HMul.hMul let33 let47)
  let let103 := (Not let62)
  let let104 := (Eq let61 let103)
  let let105 := (Eq let103 let61)
  let let106 := (binrel% LE.le let56 let6)
  let let107 := (binrel% LT.lt let92 let1)
  let let108 := (Int.ofNat 40)
  let let109 := (binrel% HMul.hMul let108 x9)
  let let110 := (binrel% HMul.hMul let108 x8)
  let let111 := (Neg.neg (Int.ofNat 16))
  let let112 := (binrel% HMul.hMul let111 x7)
  let let113 := (binrel% HMul.hMul let111 x5)
  let let114 := (Int.ofNat 8)
  let let115 := (binrel% HMul.hMul let114 x2)
  let let116 := (binrel% HMul.hMul let111 x0)
  let let117 := (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd let110 let109)))))
  let let118 := (binrel% GE.ge let117 let1)
  let let119 := (binrel% HMul.hMul x2 let10)
  let let120 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let119 x8)))
  let let121 := (binrel% HAdd.hAdd x6 x9)
  let let122 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let121 let119) x8)
  let let123 := (Int.ofNat 20)
  let let124 := (Neg.neg let114)
  let let125 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 4) x2) (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x5) (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x7) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x8) (binrel% HMul.hMul let123 x9)))))))
  let let126 := (binrel% HMul.hMul let16 let98)
  let let127 := (binrel% GT.gt let33 let1)
  let let128 := (binrel% LE.le let47 let7)
  let let129 := (Neg.neg x8)
  let let130 := (binrel% HMul.hMul let32 let43)
  let let131 := (binrel% HMul.hMul let10 x2)
  let let132 := (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd x6 let21))
  let let133 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let131 x8)))
  let let134 := (binrel% HMul.hMul let51 let7)
  let let135 := (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let134 (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let93 let94)))))))
  let let136 := (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let69 let8))
  let let137 := (binrel% HMul.hMul let92 let136)
  let let138 := (binrel% HMul.hMul let35 let56)
  let let139 := (binrel% HMul.hMul let51 let132)
  let let140 := (binrel% HMul.hMul let51 let98)
  let let141 := (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let137 let75)))))))
  let let142 := (binrel% GE.ge let141 let135)
  let let143 := (Not let142)
  let let144 := (binrel% LT.lt let141 let135)
  let let145 := (Neg.neg x7)
  let let146 := (Neg.neg x2)
  let let147 := (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x1 let145))
  let let148 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let146 x1) let145)
  let let149 := (Not let58)
  let let150 := (Eq let57 let149)
  let let151 := (Eq let149 let57)
  let let152 := (Neg.neg x6)
  let let153 := (binrel% HMul.hMul let10 x8)
  let let154 := (binrel% HMul.hMul x8 let10)
  let let155 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x0 let9))
  let let156 := (Not let100)
  let let157 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let153 x9)))
  let let158 := (binrel% LE.le let7 let157)
  let let159 := (binrel% HMul.hMul let7 x0)
  let let160 := (Neg.neg x0)
  let let161 := (Not let49)
  let let162 := (Eq let48 let161)
  let let163 := (Eq let161 let48)
  let let164 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let153 let8)))
  let let165 := (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x4 let121)))
  let let166 := (binrel% LE.le let1 let165)
  let let167 := (binrel% HAdd.hAdd x1 x8)
  let let168 := (binrel% GE.ge let167 let6)
  let let169 := (binrel% LE.le let6 let167)
  let let170 := (binrel% HMul.hMul x5 let10)
  let let171 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let160 x2))))
  let let172 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x9 x4) x6) let160) x2)
  let let173 := (Eq let61 let61)
  let let174 := (binrel% GE.ge let132 let7)
  let let175 := (binrel% LE.le let7 let132)
  let let176 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let28 let92)))))))
  let let177 := (binrel% HAdd.hAdd x8 x1)
  let let178 := (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let26 let125)))))))
  let let179 := (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let55 let8))
  let let180 := (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let110 (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd let115 let113)))))
  let let181 := (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x5) (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd x7 let54)))) let6)
  let let182 := (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let8 x8))))
  let let183 := (binrel% LE.le let182 let7)
  let let184 := (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let8))))
  let let185 := (Not let45)
  let let186 := (Eq let44 let185)
  let let187 := (Eq let185 let44)
  let let188 := (binrel% HMul.hMul x1 let10)
  let let189 := (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let145))))
  let let190 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let160 x6) x5) x8) let145)
  let let191 := (binrel% HMul.hMul x0 let111)
  let let192 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let159 x2))))
  let let193 := (binrel% HAdd.hAdd let152 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let154 let145)))
  let let194 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let152 x9) let154) let145)
  let let195 := (binrel% GE.ge let136 let1)
  let let196 := (binrel% LE.le let1 let136)
  let let197 := (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let134 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let30 let31)))))))
  let let198 := (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let27 let126)))))))
  let let199 := (binrel% GE.ge let198 let197)
  let let200 := (Not let199)
  let let201 := (binrel% LT.lt let198 let197)
  let let202 := (binrel% LE.le let12 let1)
  let let203 := (Eq let48 let48)
  let let204 := (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x1 let8))
  let let205 := (binrel% HAdd.hAdd let188 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x5 let145)))
  let let206 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let188 x0) x5) let145)
  let let207 := (binrel% HSub.hSub x4 x9)
  let let208 := (binrel% HMul.hMul x7 let111)
  let let209 := (binrel% HAdd.hAdd let129 (binrel% HAdd.hAdd let170 let145))
  let let210 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let129 let170) let145)
  let let211 := (Eq let76 let76)
  let let212 := (binrel% HMul.hMul x8 let108)
  let let213 := (binrel% HMul.hMul x5 let111)
  let let214 := (Not let77)
  let let215 := (Eq let214 let76)
  let let216 := (binrel% GE.ge let28 let28)
  let let217 := (binrel% HMul.hMul x9 let108)
  let let218 := (binrel% HMul.hMul x2 let114)
  let let219 := (Eq let76 let214)
  let let220 := (binrel% HAdd.hAdd let191 (binrel% HAdd.hAdd let217 (binrel% HAdd.hAdd let212 (binrel% HAdd.hAdd let208 (binrel% HAdd.hAdd let218 let213)))))
  let let221 := (binrel% HAdd.hAdd let191 (binrel% HAdd.hAdd (binrel% HAdd.hAdd let217 (binrel% HAdd.hAdd (binrel% HAdd.hAdd let212 let208) let218)) let213))
  let let222 := (binrel% LE.le let6 let177)
  let let223 := (binrel% LE.le let1 let172)
  let let224 := (binrel% LE.le let190 let7)
  let let225 := (binrel% LE.le let1 let148)
  let let226 := (binrel% LE.le let7 let194)
  let let227 := (binrel% LE.le let210 let6)
  let let228 := (binrel% LE.le let207 let7)
  let let229 := (binrel% LE.le let206 let1)
  let let230 := (binrel% LE.le let7 let122)
  let let231 := (binrel% GE.ge let221 let1)
  let let232 := (Not let231)
  let let233 := (And let232 (And let230 (And let229 (And let228 (And let227 (And let226 (And let225 (And let224 (And let223 let222)))))))))
  let let234 := (And let232 (And (And (And (And (And (And (And (And let230 let229) let228) let227) let226) let225) let224) let223) let222))
  let let235 := (Eq let44 let44)
  let let236 := (Eq let57 let57)
  let let237 := (And let99 (And let174 (And let14 (And let49 (And let58 (And let45 (And let195 (And let181 (And let77 let168)))))))))
  let let238 := (Not let195)
  let let239 := (Not let174)
  let let240 := (Or let61 (Or let238 (Or let57 (Or let239 (Or let48 (Or let76 (Or let44 let100)))))))
  let let241 := (Or let103 (Or let238 (Or let149 (Or let239 (Or let161 (Or let214 (Or let185 let100)))))))
  let let242 := (Eq Or Or)
  let let243 := (Or let100 False)
  let let244 := (binrel% LE.le let75 let94)
  let let245 := (binrel% LE.le let22 let7)
  let let246 := (And let60 let245)
  let let247 := (binrel% LE.le let137 let93)
  let let248 := (And let107 let195)
  let let249 := (binrel% LT.lt let138 let91)
  let let250 := (And let53 let59)
  let let251 := (Implies let250 let249)
  let let252 := (Eq let58 let59)
  let let253 := (binrel% LE.le let139 let134)
  let let254 := (And let52 let174)
  let let255 := (Implies let254 let253)
  let let256 := (binrel% LE.le let102 let90)
  let let257 := (And let127 let128)
  let let258 := (Implies let257 let256)
  let let259 := (Eq let49 let50)
  let let260 := (binrel% LE.le let71 let89)
  let let261 := (binrel% LE.le let70 let1)
  let let262 := (And let127 let261)
  let let263 := (Implies let262 let260)
  let let264 := (Eq let77 let78)
  let let265 := (binrel% LE.le let130 let88)
  let let266 := (binrel% LE.le let43 let6)
  let let267 := (And let60 let266)
  let let268 := (Implies let267 let265)
  let let269 := (Eq let45 let46)
  let let270 := (binrel% LE.le let140 let96)
  let let271 := (And let52 let99)
  let let272 := (Or let100 (Or let13 (Or let44 (Or let76 (Or let48 (Or let239 (Or let62 let57)))))))
  let let273 := (Or let100 (Or let37 (Or let185 (Or let214 (Or let161 (Or let239 (Or let62 let149)))))))
  let let274 := (Not let59)
  let let275 := (binrel% LE.le let126 let31)
  let let276 := (And let17 let99)
  let let277 := (binrel% LE.le let27 let30)
  let let278 := (And let5 let202)
  let let279 := (binrel% LE.le let23 let29)
  let let280 := (And let3 let61)
(Eq let3 True) → (Eq let5 True) → (Eq let15 let14) → (Eq let17 True) → (Eq let23 let20) → (Eq let27 let26) → (Eq let29 let28) → (Eq let30 let28) → (Eq let31 let16) → (Eq let36 let28) → (Eq let39 let38) → (Eq let40 True) → (Eq let46 let45) → (Eq let50 let49) → (Eq let52 True) → (Eq let53 True) → (Eq let59 let58) → (Eq let60 True) → (Eq let63 let62) → (Eq let71 let67) → (Eq let75 let74) → (Eq let78 let77) → (Eq let87 let28) → (Eq let88 let32) → (Eq let89 let28) → (Eq let90 let34) → (Eq let91 let33) → (Eq let93 let28) → (Eq let94 let92) → (Eq let95 False) → (Eq let96 let51) → (Eq let101 let100) → (Eq let102 let83) → (Eq let105 let104) → (Eq let106 let58) → let39 → (Eq let107 True) → (Eq let118 let100) → (Eq let122 let120) → (Eq let126 let125) → (Eq let127 True) → (Eq let128 let49) → (Eq let129 let54) → (Eq let130 let84) → (Eq let133 let132) → (Eq let144 let143) → (Eq let148 let147) → (Eq let151 let150) → (Eq let152 let68) → (Eq let154 let153) → (Eq let155 let12) → (Eq let156 let99) → (Eq let158 let45) → (Eq let160 let159) → (Eq let163 let162) → (Eq let164 let157) → (Eq let166 let77) → (Eq let119 let131) → (Eq let139 let82) → let105 → (Eq let134 let35) → (Eq let169 let168) → (Eq let170 let55) → (Eq let172 let171) → (Eq let138 let81) → (Eq let173 True) → (Eq let175 let174) → (Eq let145 let8) → (Eq let140 let86) → (Eq let146 let69) → (Eq let176 let28) → let151 → (Eq let177 let167) → (Eq let178 let28) → (Eq let179 let56) → (Eq let180 let117) → (Eq let183 let181) → (Eq let184 let182) → (Eq let187 let186) → (Eq let188 let11) → (Eq let190 let189) → (Eq let191 let116) → (Eq let192 let165) → (Eq let194 let193) → (Eq let137 let80) → (Eq let196 let195) → (Eq let201 let200) → (Eq let202 let14) → (Eq let203 True) → (Eq let204 let136) → (Eq let206 let205) → (Eq let207 let47) → (Eq let208 let112) → (Eq let210 let209) → (Eq let211 True) → (Eq let212 let110) → (Eq let213 let113) → let215 → (Eq let216 True) → (Eq let217 let109) → (Eq let218 let115) → (Eq let215 let219) → (Eq let221 let220) → (Eq let234 let233) → (Eq let235 True) → let187 → let163 → (Eq let236 True) → let234 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Neg.neg (Rat.ofInt 12))
  let let3 := (binrel% LT.lt let2 let1)
  let let4 := (Rat.ofInt 6)
  let let5 := (binrel% GT.gt let4 let1)
  let let6 := (Int.ofNat 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 x7)
  let let9 := (binrel% HAdd.hAdd x5 let8)
  let let10 := (Int.ofNat 2)
  let let11 := (binrel% HMul.hMul let10 x1)
  let let12 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let11 let9))
  let let13 := (binrel% GE.ge let12 let6)
  let let14 := (Not let13)
  let let15 := (binrel% LT.lt let12 let6)
  let let16 := (Neg.neg (Rat.ofInt 4))
  let let17 := (binrel% LT.lt let16 let1)
  let let18 := (Int.ofNat 12)
  let let19 := (Neg.neg let18)
  let let20 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x7) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x8) (binrel% HMul.hMul let19 x9)))))
  let let21 := (binrel% HAdd.hAdd x8 x9)
  let let22 := (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let8 let21))
  let let23 := (binrel% HMul.hMul let2 let22)
  let let24 := (Int.ofNat 6)
  let let25 := (Neg.neg let24)
  let let26 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let24 x0) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let24 x5) (binrel% HMul.hMul let25 x7)))))
  let let27 := (binrel% HMul.hMul let4 let12)
  let let28 := (Rat.ofInt 0)
  let let29 := (binrel% HMul.hMul let2 let1)
  let let30 := (binrel% HMul.hMul let4 let1)
  let let31 := (binrel% HMul.hMul let16 let6)
  let let32 := (Rat.ofInt 3)
  let let33 := (Rat.ofInt 2)
  let let34 := (Neg.neg let33)
  let let35 := (Rat.ofInt 1)
  let let36 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let28 let16)))))))
  let let37 := (Not let14)
  let let38 := (Eq let13 let37)
  let let39 := (Eq let37 let13)
  let let40 := (Eq let13 let13)
  let let41 := (binrel% HMul.hMul let7 x9)
  let let42 := (Neg.neg let10)
  let let43 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x7 (binrel% HAdd.hAdd (binrel% HMul.hMul let42 x8) let41)))
  let let44 := (binrel% GE.ge let43 let10)
  let let45 := (Not let44)
  let let46 := (binrel% LT.lt let43 let10)
  let let47 := (binrel% HAdd.hAdd x4 let41)
  let let48 := (binrel% GE.ge let47 let1)
  let let49 := (Not let48)
  let let50 := (binrel% LT.lt let47 let1)
  let let51 := (Neg.neg let35)
  let let52 := (binrel% LT.lt let51 let1)
  let let53 := (binrel% GT.gt let35 let1)
  let let54 := (binrel% HMul.hMul let7 x8)
  let let55 := (binrel% HMul.hMul let10 x5)
  let let56 := (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let8 let54))
  let let57 := (binrel% GE.ge let56 let10)
  let let58 := (Not let57)
  let let59 := (binrel% LT.lt let56 let10)
  let let60 := (binrel% GT.gt let32 let1)
  let let61 := (binrel% GE.ge let22 let1)
  let let62 := (Not let61)
  let let63 := (binrel% LT.lt let22 let1)
  let let64 := (binrel% HMul.hMul let42 x9)
  let let65 := (binrel% HMul.hMul let42 x2)
  let let66 := (binrel% HMul.hMul let10 x0)
  let let67 := (Rat.ofInt (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd (binrel% HMul.hMul let42 x4) (binrel% HAdd.hAdd (binrel% HMul.hMul let42 x6) let64)))))
  let let68 := (binrel% HMul.hMul let7 x6)
  let let69 := (binrel% HMul.hMul let7 x2)
  let let70 := (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x4) (binrel% HAdd.hAdd let68 let41))))
  let let71 := (binrel% HMul.hMul let33 let70)
  let let72 := (Int.ofNat 3)
  let let73 := (Neg.neg let72)
  let let74 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x7) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x8) (binrel% HMul.hMul let72 x9)))))
  let let75 := (binrel% HMul.hMul let32 let22)
  let let76 := (binrel% GE.ge let70 let6)
  let let77 := (Not let76)
  let let78 := (binrel% LT.lt let70 let6)
  let let79 := (binrel% HMul.hMul let72 x7)
  let let80 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x1) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x2) let79)))
  let let81 := (Rat.ofInt let56)
  let let82 := (Rat.ofInt (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let54 let41))))
  let let83 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x4) let64))
  let let84 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x6) (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd (binrel% HMul.hMul let25 x8) (binrel% HMul.hMul let73 x9)))))
  let let85 := (Int.ofNat 5)
  let let86 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let42 x0) (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd (binrel% HMul.hMul let42 x5) (binrel% HAdd.hAdd (binrel% HMul.hMul let42 x7) (binrel% HAdd.hAdd (binrel% HMul.hMul let85 x8) (binrel% HMul.hMul let85 x9)))))))
  let let87 := (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let80 let74)))))))
  let let88 := (binrel% HMul.hMul let32 let6)
  let let89 := (binrel% HMul.hMul let33 let1)
  let let90 := (binrel% HMul.hMul let33 let7)
  let let91 := (binrel% HMul.hMul let35 let10)
  let let92 := (Neg.neg let32)
  let let93 := (binrel% HMul.hMul let92 let1)
  let let94 := (binrel% HMul.hMul let32 let7)
  let let95 := (Not True)
  let let96 := (binrel% HMul.hMul let51 let6)
  let let97 := (Neg.neg let85)
  let let98 := (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x7) (binrel% HAdd.hAdd (binrel% HMul.hMul let97 x8) (binrel% HMul.hMul let97 x9))))))
  let let99 := (binrel% GE.ge let98 let6)
  let let100 := (Not let99)
  let let101 := (binrel% LT.lt let98 let6)
  let let102 := (binrel% HMul.hMul let33 let47)
  let let103 := (Not let62)
  let let104 := (Eq let61 let103)
  let let105 := (Eq let103 let61)
  let let106 := (binrel% LE.le let56 let6)
  let let107 := (binrel% LT.lt let92 let1)
  let let108 := (Int.ofNat 40)
  let let109 := (binrel% HMul.hMul let108 x9)
  let let110 := (binrel% HMul.hMul let108 x8)
  let let111 := (Neg.neg (Int.ofNat 16))
  let let112 := (binrel% HMul.hMul let111 x7)
  let let113 := (binrel% HMul.hMul let111 x5)
  let let114 := (Int.ofNat 8)
  let let115 := (binrel% HMul.hMul let114 x2)
  let let116 := (binrel% HMul.hMul let111 x0)
  let let117 := (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd let110 let109)))))
  let let118 := (binrel% GE.ge let117 let1)
  let let119 := (binrel% HMul.hMul x2 let10)
  let let120 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let119 x8)))
  let let121 := (binrel% HAdd.hAdd x6 x9)
  let let122 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let121 let119) x8)
  let let123 := (Int.ofNat 20)
  let let124 := (Neg.neg let114)
  let let125 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x0) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 4) x2) (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x5) (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x7) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x8) (binrel% HMul.hMul let123 x9)))))))
  let let126 := (binrel% HMul.hMul let16 let98)
  let let127 := (binrel% GT.gt let33 let1)
  let let128 := (binrel% LE.le let47 let7)
  let let129 := (Neg.neg x8)
  let let130 := (binrel% HMul.hMul let32 let43)
  let let131 := (binrel% HMul.hMul let10 x2)
  let let132 := (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd x6 let21))
  let let133 := (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let131 x8)))
  let let134 := (binrel% HMul.hMul let51 let7)
  let let135 := (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let134 (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let93 let94)))))))
  let let136 := (binrel% HAdd.hAdd x1 (binrel% HAdd.hAdd let69 let8))
  let let137 := (binrel% HMul.hMul let92 let136)
  let let138 := (binrel% HMul.hMul let35 let56)
  let let139 := (binrel% HMul.hMul let51 let132)
  let let140 := (binrel% HMul.hMul let51 let98)
  let let141 := (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let137 let75)))))))
  let let142 := (binrel% GE.ge let141 let135)
  let let143 := (Not let142)
  let let144 := (binrel% LT.lt let141 let135)
  let let145 := (Neg.neg x7)
  let let146 := (Neg.neg x2)
  let let147 := (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x1 let145))
  let let148 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let146 x1) let145)
  let let149 := (Not let58)
  let let150 := (Eq let57 let149)
  let let151 := (Eq let149 let57)
  let let152 := (Neg.neg x6)
  let let153 := (binrel% HMul.hMul let10 x8)
  let let154 := (binrel% HMul.hMul x8 let10)
  let let155 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x0 let9))
  let let156 := (Not let100)
  let let157 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let153 x9)))
  let let158 := (binrel% LE.le let7 let157)
  let let159 := (binrel% HMul.hMul let7 x0)
  let let160 := (Neg.neg x0)
  let let161 := (Not let49)
  let let162 := (Eq let48 let161)
  let let163 := (Eq let161 let48)
  let let164 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let153 let8)))
  let let165 := (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x2 (binrel% HAdd.hAdd x4 let121)))
  let let166 := (binrel% LE.le let1 let165)
  let let167 := (binrel% HAdd.hAdd x1 x8)
  let let168 := (binrel% GE.ge let167 let6)
  let let169 := (binrel% LE.le let6 let167)
  let let170 := (binrel% HMul.hMul x5 let10)
  let let171 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let160 x2))))
  let let172 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd x9 x4) x6) let160) x2)
  let let173 := (Eq let61 let61)
  let let174 := (binrel% GE.ge let132 let7)
  let let175 := (binrel% LE.le let7 let132)
  let let176 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let28 let92)))))))
  let let177 := (binrel% HAdd.hAdd x8 x1)
  let let178 := (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let26 let125)))))))
  let let179 := (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let55 let8))
  let let180 := (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let110 (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd let115 let113)))))
  let let181 := (binrel% GE.ge (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x5) (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd x7 let54)))) let6)
  let let182 := (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let8 x8))))
  let let183 := (binrel% LE.le let182 let7)
  let let184 := (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let8))))
  let let185 := (Not let45)
  let let186 := (Eq let44 let185)
  let let187 := (Eq let185 let44)
  let let188 := (binrel% HMul.hMul x1 let10)
  let let189 := (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd x5 (binrel% HAdd.hAdd x8 let145))))
  let let190 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let160 x6) x5) x8) let145)
  let let191 := (binrel% HMul.hMul x0 let111)
  let let192 := (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd x4 (binrel% HAdd.hAdd x6 (binrel% HAdd.hAdd let159 x2))))
  let let193 := (binrel% HAdd.hAdd let152 (binrel% HAdd.hAdd x9 (binrel% HAdd.hAdd let154 let145)))
  let let194 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let152 x9) let154) let145)
  let let195 := (binrel% GE.ge let136 let1)
  let let196 := (binrel% LE.le let1 let136)
  let let197 := (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let134 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let30 let31)))))))
  let let198 := (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let27 let126)))))))
  let let199 := (binrel% GE.ge let198 let197)
  let let200 := (Not let199)
  let let201 := (binrel% LT.lt let198 let197)
  let let202 := (binrel% LE.le let12 let1)
  let let203 := (Eq let48 let48)
  let let204 := (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x1 let8))
  let let205 := (binrel% HAdd.hAdd let188 (binrel% HAdd.hAdd x0 (binrel% HAdd.hAdd x5 let145)))
  let let206 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let188 x0) x5) let145)
  let let207 := (binrel% HSub.hSub x4 x9)
  let let208 := (binrel% HMul.hMul x7 let111)
  let let209 := (binrel% HAdd.hAdd let129 (binrel% HAdd.hAdd let170 let145))
  let let210 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let129 let170) let145)
  let let211 := (Eq let76 let76)
  let let212 := (binrel% HMul.hMul x8 let108)
  let let213 := (binrel% HMul.hMul x5 let111)
  let let214 := (Not let77)
  let let215 := (Eq let214 let76)
  let let216 := (binrel% GE.ge let28 let28)
  let let217 := (binrel% HMul.hMul x9 let108)
  let let218 := (binrel% HMul.hMul x2 let114)
  let let219 := (Eq let76 let214)
  let let220 := (binrel% HAdd.hAdd let191 (binrel% HAdd.hAdd let217 (binrel% HAdd.hAdd let212 (binrel% HAdd.hAdd let208 (binrel% HAdd.hAdd let218 let213)))))
  let let221 := (binrel% HAdd.hAdd let191 (binrel% HAdd.hAdd (binrel% HAdd.hAdd let217 (binrel% HAdd.hAdd (binrel% HAdd.hAdd let212 let208) let218)) let213))
  let let222 := (binrel% LE.le let6 let177)
  let let223 := (binrel% LE.le let1 let172)
  let let224 := (binrel% LE.le let190 let7)
  let let225 := (binrel% LE.le let1 let148)
  let let226 := (binrel% LE.le let7 let194)
  let let227 := (binrel% LE.le let210 let6)
  let let228 := (binrel% LE.le let207 let7)
  let let229 := (binrel% LE.le let206 let1)
  let let230 := (binrel% LE.le let7 let122)
  let let231 := (binrel% GE.ge let221 let1)
  let let232 := (Not let231)
  let let233 := (And let232 (And let230 (And let229 (And let228 (And let227 (And let226 (And let225 (And let224 (And let223 let222)))))))))
  let let234 := (And let232 (And (And (And (And (And (And (And (And let230 let229) let228) let227) let226) let225) let224) let223) let222))
  let let235 := (Eq let44 let44)
  let let236 := (Eq let57 let57)
  let let237 := (And let99 (And let174 (And let14 (And let49 (And let58 (And let45 (And let195 (And let181 (And let77 let168)))))))))
  let let238 := (Not let195)
  let let239 := (Not let174)
  let let240 := (Or let61 (Or let238 (Or let57 (Or let239 (Or let48 (Or let76 (Or let44 let100)))))))
  let let241 := (Or let103 (Or let238 (Or let149 (Or let239 (Or let161 (Or let214 (Or let185 let100)))))))
  let let242 := (Eq Or Or)
  let let243 := (Or let100 False)
  let let244 := (binrel% LE.le let75 let94)
  let let245 := (binrel% LE.le let22 let7)
  let let246 := (And let60 let245)
  let let247 := (binrel% LE.le let137 let93)
  let let248 := (And let107 let195)
  let let249 := (binrel% LT.lt let138 let91)
  let let250 := (And let53 let59)
  let let251 := (Implies let250 let249)
  let let252 := (Eq let58 let59)
  let let253 := (binrel% LE.le let139 let134)
  let let254 := (And let52 let174)
  let let255 := (Implies let254 let253)
  let let256 := (binrel% LE.le let102 let90)
  let let257 := (And let127 let128)
  let let258 := (Implies let257 let256)
  let let259 := (Eq let49 let50)
  let let260 := (binrel% LE.le let71 let89)
  let let261 := (binrel% LE.le let70 let1)
  let let262 := (And let127 let261)
  let let263 := (Implies let262 let260)
  let let264 := (Eq let77 let78)
  let let265 := (binrel% LE.le let130 let88)
  let let266 := (binrel% LE.le let43 let6)
  let let267 := (And let60 let266)
  let let268 := (Implies let267 let265)
  let let269 := (Eq let45 let46)
  let let270 := (binrel% LE.le let140 let96)
  let let271 := (And let52 let99)
  let let272 := (Or let100 (Or let13 (Or let44 (Or let76 (Or let48 (Or let239 (Or let62 let57)))))))
  let let273 := (Or let100 (Or let37 (Or let185 (Or let214 (Or let161 (Or let239 (Or let62 let149)))))))
  let let274 := (Not let59)
  let let275 := (binrel% LE.le let126 let31)
  let let276 := (And let17 let99)
  let let277 := (binrel% LE.le let27 let30)
  let let278 := (And let5 let202)
  let let279 := (binrel% LE.le let23 let29)
  let let280 := (And let3 let61)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let5 True) => -- EVALUATE
fun lean_r2 : (Eq let15 let14) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let17 True) => -- EVALUATE
fun lean_r4 : (Eq let23 let20) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let30 let28) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let31 let16) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let36 let28) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let39 let38) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let40 True) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let46 let45) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let52 True) => -- EVALUATE
fun lean_r15 : (Eq let53 True) => -- EVALUATE
fun lean_r16 : (Eq let59 let58) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let60 True) => -- EVALUATE
fun lean_r18 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let71 let67) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let75 let74) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let78 let77) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let87 let28) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let88 let32) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let89 let28) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let90 let34) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let91 let33) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let93 let28) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let94 let92) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let95 False) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let96 let51) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let101 let100) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let102 let83) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let105 let104) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let106 let58) => -- THEORY_REWRITE_ARITH
fun lean_r35 : let39 => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let107 True) => -- EVALUATE
fun lean_r37 : (Eq let118 let100) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let122 let120) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let126 let125) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let127 True) => -- EVALUATE
fun lean_r41 : (Eq let128 let49) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let129 let54) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let130 let84) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let133 let132) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let144 let143) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let148 let147) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let151 let150) => -- THEORY_REWRITE_BOOL
fun lean_r48 : (Eq let152 let68) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let154 let153) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let155 let12) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let156 let99) => -- THEORY_REWRITE_BOOL
fun lean_r52 : (Eq let158 let45) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let160 let159) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let163 let162) => -- THEORY_REWRITE_BOOL
fun lean_r55 : (Eq let164 let157) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let166 let77) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let119 let131) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let139 let82) => -- THEORY_REWRITE_ARITH
fun lean_r59 : let105 => -- THEORY_REWRITE_BOOL
fun lean_r60 : (Eq let134 let35) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let169 let168) => -- THEORY_REWRITE_ARITH
fun lean_r62 : (Eq let170 let55) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let172 let171) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq let138 let81) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let173 True) => -- THEORY_REWRITE_BOOL
fun lean_r66 : (Eq let175 let174) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq let145 let8) => -- THEORY_REWRITE_ARITH
fun lean_r68 : (Eq let140 let86) => -- THEORY_REWRITE_ARITH
fun lean_r69 : (Eq let146 let69) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq let176 let28) => -- THEORY_REWRITE_ARITH
fun lean_r71 : let151 => -- THEORY_REWRITE_BOOL
fun lean_r72 : (Eq let177 let167) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let178 let28) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let179 let56) => -- THEORY_REWRITE_ARITH
fun lean_r75 : (Eq let180 let117) => -- THEORY_REWRITE_ARITH
fun lean_r76 : (Eq let183 let181) => -- THEORY_REWRITE_ARITH
fun lean_r77 : (Eq let184 let182) => -- THEORY_REWRITE_ARITH
fun lean_r78 : (Eq let187 let186) => -- THEORY_REWRITE_BOOL
fun lean_r79 : (Eq let188 let11) => -- THEORY_REWRITE_ARITH
fun lean_r80 : (Eq let190 let189) => -- THEORY_REWRITE_ARITH
fun lean_r81 : (Eq let191 let116) => -- THEORY_REWRITE_ARITH
fun lean_r82 : (Eq let192 let165) => -- THEORY_REWRITE_ARITH
fun lean_r83 : (Eq let194 let193) => -- THEORY_REWRITE_ARITH
fun lean_r84 : (Eq let137 let80) => -- THEORY_REWRITE_ARITH
fun lean_r85 : (Eq let196 let195) => -- THEORY_REWRITE_ARITH
fun lean_r86 : (Eq let201 let200) => -- THEORY_REWRITE_ARITH
fun lean_r87 : (Eq let202 let14) => -- THEORY_REWRITE_ARITH
fun lean_r88 : (Eq let203 True) => -- THEORY_REWRITE_BOOL
fun lean_r89 : (Eq let204 let136) => -- THEORY_REWRITE_ARITH
fun lean_r90 : (Eq let206 let205) => -- THEORY_REWRITE_ARITH
fun lean_r91 : (Eq let207 let47) => -- THEORY_REWRITE_ARITH
fun lean_r92 : (Eq let208 let112) => -- THEORY_REWRITE_ARITH
fun lean_r93 : (Eq let210 let209) => -- THEORY_REWRITE_ARITH
fun lean_r94 : (Eq let211 True) => -- THEORY_REWRITE_BOOL
fun lean_r95 : (Eq let212 let110) => -- THEORY_REWRITE_ARITH
fun lean_r96 : (Eq let213 let113) => -- THEORY_REWRITE_ARITH
fun lean_r97 : let215 => -- THEORY_REWRITE_BOOL
fun lean_r98 : (Eq let216 True) => -- THEORY_REWRITE_ARITH
fun lean_r99 : (Eq let217 let109) => -- THEORY_REWRITE_ARITH
fun lean_r100 : (Eq let218 let115) => -- THEORY_REWRITE_ARITH
fun lean_r101 : (Eq let215 let219) => -- THEORY_REWRITE_BOOL
fun lean_r102 : (Eq let221 let220) => -- THEORY_REWRITE_ARITH
fun lean_r103 : (Eq let234 let233) => -- THEORY_REWRITE_BOOL
fun lean_r104 : (Eq let235 True) => -- THEORY_REWRITE_BOOL
fun lean_r105 : let187 => -- THEORY_REWRITE_BOOL
fun lean_r106 : let163 => -- THEORY_REWRITE_BOOL
fun lean_r107 : (Eq let236 True) => -- THEORY_REWRITE_BOOL
fun lean_a108 : let234 => by
have lean_s0 : (Or let100 (Or let37 (Or let185 (Or let214 (Or let161 (Or let239 (Or let62 (Or let149 False)))))))) :=
  (scope (fun lean_a109 : let99 =>
    (scope (fun lean_a110 : let14 =>
      (scope (fun lean_a111 : let45 =>
        (scope (fun lean_a112 : let77 =>
          (scope (fun lean_a113 : let49 =>
            (scope (fun lean_a114 : let174 =>
              (scope (fun lean_a115 : let61 =>
                (scope (fun lean_a116 : let58 =>
                  have lean_s0 : let252 := by timed Eq.symm lean_r16
                  have lean_s1 : let59 := by timed eqResolve lean_a116 lean_s0
                  have lean_s2 : (Or let274 False) :=
                    (scope (fun lean_a117 : let59 =>
                      have lean_s2 : let53 := by timed trueElim lean_r15
                      have lean_s3 : let250 := by timed And.intro lean_s2 lean_a117
                      have lean_s4 : let251 := by arithMulPos [let56, let10, let35], 0
                      have lean_s5 : let249 := by timed modusPonens lean_s3 lean_s4
                      have lean_s6 : let3 := by timed trueElim lean_r0
                      have lean_s7 : let280 := by timed And.intro lean_s6 lean_a115
                      have lean_s8 : (Implies let280 let279) := by arithMulNeg [let22, let1, let2], 3
                      have lean_s9 : let279 := by timed modusPonens lean_s7 lean_s8
                      have lean_s10 : let52 := by timed trueElim lean_r14
                      have lean_s11 : let254 := by timed And.intro lean_s10 lean_a114
                      have lean_s12 : let255 := by arithMulNeg [let132, let7, let51], 3
                      have lean_s13 : let253 := by timed modusPonens lean_s11 lean_s12
                      have lean_s14 : let127 := by timed trueElim lean_r40
                      have lean_s15 : let259 := by timed Eq.symm lean_r13
                      have lean_s16 : let50 := by timed eqResolve lean_a113 lean_s15
                      have lean_s17 : let128 := by intTightUb lean_s16
                      have lean_s18 : let257 := by timed And.intro lean_s14 lean_s17
                      have lean_s19 : let258 := by arithMulPos [let47, let7, let33], 1
                      have lean_s20 : let256 := by timed modusPonens lean_s18 lean_s19
                      have lean_s21 : let264 := by timed Eq.symm lean_r21
                      have lean_s22 : let78 := by timed eqResolve lean_a112 lean_s21
                      have lean_s23 : let261 := by intTightUb lean_s22
                      have lean_s24 : let262 := by timed And.intro lean_s14 lean_s23
                      have lean_s25 : let263 := by arithMulPos [let70, let1, let33], 1
                      have lean_s26 : let260 := by timed modusPonens lean_s24 lean_s25
                      have lean_s27 : let60 := by timed trueElim lean_r17
                      have lean_s28 : let269 := by timed Eq.symm lean_r12
                      have lean_s29 : let46 := by timed eqResolve lean_a111 lean_s28
                      have lean_s30 : let266 := by intTightUb lean_s29
                      have lean_s31 : let267 := by timed And.intro lean_s27 lean_s30
                      have lean_s32 : let268 := by arithMulPos [let43, let6, let32], 1
                      have lean_s33 : let265 := by timed modusPonens lean_s31 lean_s32
                      have lean_s34 : let5 := by timed trueElim lean_r1
                      have lean_s35 : (Eq let14 let15) := by timed Eq.symm lean_r2
                      have lean_s36 : let15 := by timed eqResolve lean_a110 lean_s35
                      have lean_s37 : let202 := by intTightUb lean_s36
                      have lean_s38 : let278 := by timed And.intro lean_s34 lean_s37
                      have lean_s39 : (Implies let278 let277) := by arithMulPos [let12, let1, let4], 1
                      have lean_s40 : let277 := by timed modusPonens lean_s38 lean_s39
                      have lean_s41 : let17 := by timed trueElim lean_r3
                      have lean_s42 : let276 := by timed And.intro lean_s41 lean_a109
                      have lean_s43 : (Implies let276 let275) := by arithMulNeg [let98, let6, let16], 3
                      have lean_s44 : let275 := by timed modusPonens lean_s42 lean_s43
                      have lean_s45 : let201 := by sumBounds [lean_s5, lean_s9, lean_s13, lean_s20, lean_s26, lean_s33, lean_s40, lean_s44]
                      let lean_s46 := by timed congrHAdd lean_r5 lean_r39
                      let lean_s47 := by timed congrHAdd lean_r43 lean_s46
                      let lean_s48 := by timed congrHAdd lean_r19 lean_s47
                      let lean_s49 := by timed congrHAdd lean_r32 lean_s48
                      let lean_s50 := by timed congrHAdd lean_r58 lean_s49
                      let lean_s51 := by timed congrHAdd lean_r4 lean_s50
                      have lean_s52 : (Eq let198 let178) := by timed congrHAdd lean_r64 lean_s51
                      have lean_s53 : (Eq let198 let28) := by timed Eq.trans lean_s52 lean_r73
                      let lean_s54 := by timed flipCongrArg lean_s53 [GE.ge]
                      let lean_s55 := by timed congrHAdd lean_r7 lean_r8
                      let lean_s56 := by timed congrHAdd lean_r23 lean_s55
                      let lean_s57 := by timed congrHAdd lean_r24 lean_s56
                      let lean_s58 := by timed congrHAdd lean_r25 lean_s57
                      let lean_s59 := by timed congrHAdd lean_r60 lean_s58
                      let lean_s60 := by timed congrHAdd lean_r6 lean_s59
                      have lean_s61 : (Eq let197 let36) := by timed congrHAdd lean_r26 lean_s60
                      have lean_s62 : (Eq let197 let28) := by timed Eq.trans lean_s61 lean_r9
                      have lean_s63 : (Eq let199 let216) := by timed congr lean_s54 lean_s62
                      have lean_s64 : (Eq let199 True) := by timed Eq.trans lean_s63 lean_r98
                      have lean_s65 : (Eq let200 let95) := by timed flipCongrArg lean_s64 [Not]
                      have lean_s66 : (Eq let200 False) := by timed Eq.trans lean_s65 lean_r29
                      have lean_s67 : (Eq let201 False) := by timed Eq.trans lean_r86 lean_s66
                      show False from by timed eqResolve lean_s45 lean_s67
                    ))
                  have lean_s3 : let274 := by liftOrNToNeg lean_s2
                  have lean_s4 : (Eq let274 let149) := by timed flipCongrArg lean_r16 [Not]
                  have lean_s5 : (Eq let274 let57) := by timed Eq.trans lean_s4 lean_r71
                  have lean_s6 : let57 := by timed eqResolve lean_s3 lean_s5
                  have lean_s7 : (Eq let57 let274) := by timed Eq.symm lean_s5
                  have lean_s8 : let274 := by timed eqResolve lean_s6 lean_s7
                  show False from by timed contradiction lean_s1 lean_s8
  ))))))))))))))))
have lean_s1 : (Not (And let99 (And let14 (And let45 (And let77 (And let49 (And let174 (And let61 let58)))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let273 := by timed flipNotAnd lean_s1 [let99, let14, let45, let77, let49, let174, let61, let58]
have lean_s3 : let242 := by timed rfl
have lean_s4 : (Eq let100 let100) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let40 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let38 let40) := by timed congr lean_s7 lean_r35
have lean_s9 : (Eq let38 True) := by timed Eq.trans lean_s8 lean_r11
have lean_s10 : (Eq let39 True) := by timed Eq.trans lean_r10 lean_s9
have lean_s11 : let39 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let235 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let186 let235) := by timed congr lean_s14 lean_r105
have lean_s16 : (Eq let186 True) := by timed Eq.trans lean_s15 lean_r104
have lean_s17 : (Eq let187 True) := by timed Eq.trans lean_r78 lean_s16
have lean_s18 : let187 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s3 lean_s18
have lean_s20 : let211 := by timed rfl
let lean_s21 := by timed flipCongrArg lean_s20 [Eq]
have lean_s22 : (Eq let219 let211) := by timed congr lean_s21 lean_r97
have lean_s23 : (Eq let219 True) := by timed Eq.trans lean_s22 lean_r94
have lean_s24 : (Eq let215 True) := by timed Eq.trans lean_r101 lean_s23
have lean_s25 : let215 := by timed trueElim lean_s24
let lean_s26 := by timed congr lean_s3 lean_s25
have lean_s27 : let203 := by timed rfl
let lean_s28 := by timed flipCongrArg lean_s27 [Eq]
have lean_s29 : (Eq let162 let203) := by timed congr lean_s28 lean_r106
have lean_s30 : (Eq let162 True) := by timed Eq.trans lean_s29 lean_r88
have lean_s31 : (Eq let163 True) := by timed Eq.trans lean_r54 lean_s30
have lean_s32 : let163 := by timed trueElim lean_s31
let lean_s33 := by timed congr lean_s3 lean_s32
have lean_s34 : (Eq let239 let239) := by timed rfl
let lean_s35 := by timed congr lean_s3 lean_s34
have lean_s36 : (Eq let62 let62) := by timed rfl
let lean_s37 := by timed congr lean_s3 lean_s36
have lean_s38 : let236 := by timed rfl
let lean_s39 := by timed flipCongrArg lean_s38 [Eq]
have lean_s40 : (Eq let150 let236) := by timed congr lean_s39 lean_r71
have lean_s41 : (Eq let150 True) := by timed Eq.trans lean_s40 lean_r107
have lean_s42 : (Eq let151 True) := by timed Eq.trans lean_r47 lean_s41
have lean_s43 : let151 := by timed trueElim lean_s42
let lean_s44 := by timed congr lean_s37 lean_s43
let lean_s45 := by timed congr lean_s35 lean_s44
let lean_s46 := by timed congr lean_s33 lean_s45
let lean_s47 := by timed congr lean_s26 lean_s46
let lean_s48 := by timed congr lean_s19 lean_s47
let lean_s49 := by timed congr lean_s12 lean_s48
have lean_s50 : (Eq let273 let272) := by timed congr lean_s5 lean_s49
have lean_s51 : let272 := by timed eqResolve lean_s2 lean_s50
have lean_s52 : (Or let100 (Or let13 (Or let48 (Or let57 (Or let44 (Or let76 (Or let239 let62))))))) := by permutateOr lean_s51, [0, 1, 4, 7, 2, 3, 5, 6], (- 1)
have lean_s53 : (Or let103 (Or let238 (Or let149 (Or let239 (Or let161 (Or let214 (Or let185 let243))))))) :=
  (scope (fun lean_a118 : let62 =>
    (scope (fun lean_a119 : let195 =>
      (scope (fun lean_a120 : let58 =>
        (scope (fun lean_a121 : let174 =>
          (scope (fun lean_a122 : let49 =>
            (scope (fun lean_a123 : let77 =>
              (scope (fun lean_a124 : let45 =>
                (scope (fun lean_a125 : let99 =>
                  have lean_s53 : let243 :=
                    (scope (fun lean_a120 : let99 =>
                      have lean_s53 : let52 := by timed trueElim lean_r14
                      have lean_s54 : let271 := by timed And.intro lean_s53 lean_a120
                      have lean_s55 : (Implies let271 let270) := by arithMulNeg [let98, let6, let51], 3
                      have lean_s56 : let270 := by timed modusPonens lean_s54 lean_s55
                      have lean_s57 : let60 := by timed trueElim lean_r17
                      have lean_s58 : let269 := by timed Eq.symm lean_r12
                      have lean_s59 : let46 := by timed eqResolve lean_a124 lean_s58
                      have lean_s60 : let266 := by intTightUb lean_s59
                      have lean_s61 : let267 := by timed And.intro lean_s57 lean_s60
                      have lean_s62 : let268 := by arithMulPos [let43, let6, let32], 1
                      have lean_s63 : let265 := by timed modusPonens lean_s61 lean_s62
                      have lean_s64 : let127 := by timed trueElim lean_r40
                      have lean_s65 : let264 := by timed Eq.symm lean_r21
                      have lean_s66 : let78 := by timed eqResolve lean_a123 lean_s65
                      have lean_s67 : let261 := by intTightUb lean_s66
                      have lean_s68 : let262 := by timed And.intro lean_s64 lean_s67
                      have lean_s69 : let263 := by arithMulPos [let70, let1, let33], 1
                      have lean_s70 : let260 := by timed modusPonens lean_s68 lean_s69
                      have lean_s71 : let259 := by timed Eq.symm lean_r13
                      have lean_s72 : let50 := by timed eqResolve lean_a122 lean_s71
                      have lean_s73 : let128 := by intTightUb lean_s72
                      have lean_s74 : let257 := by timed And.intro lean_s64 lean_s73
                      have lean_s75 : let258 := by arithMulPos [let47, let7, let33], 1
                      have lean_s76 : let256 := by timed modusPonens lean_s74 lean_s75
                      have lean_s77 : let254 := by timed And.intro lean_s53 lean_a121
                      have lean_s78 : let255 := by arithMulNeg [let132, let7, let51], 3
                      have lean_s79 : let253 := by timed modusPonens lean_s77 lean_s78
                      have lean_s80 : let53 := by timed trueElim lean_r15
                      have lean_s81 : let252 := by timed Eq.symm lean_r16
                      have lean_s82 : let59 := by timed eqResolve lean_a120 lean_s81
                      have lean_s83 : let250 := by timed And.intro lean_s80 lean_s82
                      have lean_s84 : let251 := by arithMulPos [let56, let10, let35], 0
                      have lean_s85 : let249 := by timed modusPonens lean_s83 lean_s84
                      have lean_s86 : let107 := by timed trueElim lean_r36
                      have lean_s87 : let248 := by timed And.intro lean_s86 lean_a119
                      have lean_s88 : (Implies let248 let247) := by arithMulNeg [let136, let1, let92], 3
                      have lean_s89 : let247 := by timed modusPonens lean_s87 lean_s88
                      have lean_s90 : (Eq let62 let63) := by timed Eq.symm lean_r18
                      have lean_s91 : let63 := by timed eqResolve lean_a118 lean_s90
                      have lean_s92 : let245 := by intTightUb lean_s91
                      have lean_s93 : let246 := by timed And.intro lean_s57 lean_s92
                      have lean_s94 : (Implies let246 let244) := by arithMulPos [let22, let7, let32], 1
                      have lean_s95 : let244 := by timed modusPonens lean_s93 lean_s94
                      have lean_s96 : let144 := by sumBounds [lean_s56, lean_s63, lean_s70, lean_s76, lean_s79, lean_s85, lean_s89, lean_s95]
                      let lean_s97 := by timed congrHAdd lean_r84 lean_r20
                      let lean_s98 := by timed congrHAdd lean_r64 lean_s97
                      let lean_s99 := by timed congrHAdd lean_r58 lean_s98
                      let lean_s100 := by timed congrHAdd lean_r32 lean_s99
                      let lean_s101 := by timed congrHAdd lean_r19 lean_s100
                      let lean_s102 := by timed congrHAdd lean_r43 lean_s101
                      have lean_s103 : (Eq let141 let87) := by timed congrHAdd lean_r68 lean_s102
                      have lean_s104 : (Eq let141 let28) := by timed Eq.trans lean_s103 lean_r22
                      let lean_s105 := by timed flipCongrArg lean_s104 [GE.ge]
                      let lean_s106 := by timed congrHAdd lean_r27 lean_r28
                      let lean_s107 := by timed congrHAdd lean_r26 lean_s106
                      let lean_s108 := by timed congrHAdd lean_r60 lean_s107
                      let lean_s109 := by timed congrHAdd lean_r25 lean_s108
                      let lean_s110 := by timed congrHAdd lean_r24 lean_s109
                      let lean_s111 := by timed congrHAdd lean_r23 lean_s110
                      have lean_s112 : (Eq let135 let176) := by timed congrHAdd lean_r30 lean_s111
                      have lean_s113 : (Eq let135 let28) := by timed Eq.trans lean_s112 lean_r70
                      have lean_s114 : (Eq let142 let216) := by timed congr lean_s105 lean_s113
                      have lean_s115 : (Eq let142 True) := by timed Eq.trans lean_s114 lean_r98
                      have lean_s116 : (Eq let143 let95) := by timed flipCongrArg lean_s115 [Not]
                      have lean_s117 : (Eq let143 False) := by timed Eq.trans lean_s116 lean_r29
                      have lean_s118 : (Eq let144 False) := by timed Eq.trans lean_r45 lean_s117
                      show False from by timed eqResolve lean_s96 lean_s118
                    ))
                  have lean_s54 : let100 := by liftOrNToNeg lean_s53
                  have lean_s55 : (Eq let100 let101) := by timed Eq.symm lean_r31
                  have lean_s56 : let101 := by timed eqResolve lean_s54 lean_s55
                  have lean_s57 : let100 := by timed eqResolve lean_s56 lean_r31
                  show False from by timed contradiction lean_a125 lean_s57
  ))))))))))))))))
have lean_s54 : (Not (And let62 (And let195 (And let58 (And let174 (And let49 (And let77 (And let45 let99)))))))) := by liftOrNToNeg lean_s53
have lean_s55 : let241 := by timed flipNotAnd lean_s54 [let62, let195, let58, let174, let49, let77, let45, let99]
have lean_s56 : let242 := by timed rfl
have lean_s57 : let173 := by timed rfl
let lean_s58 := by timed flipCongrArg lean_s57 [Eq]
have lean_s59 : (Eq let104 let173) := by timed congr lean_s58 lean_r59
have lean_s60 : (Eq let104 True) := by timed Eq.trans lean_s59 lean_r65
have lean_s61 : (Eq let105 True) := by timed Eq.trans lean_r33 lean_s60
have lean_s62 : let105 := by timed trueElim lean_s61
let lean_s63 := by timed congr lean_s56 lean_s62
have lean_s64 : (Eq let238 let238) := by timed rfl
let lean_s65 := by timed congr lean_s56 lean_s64
let lean_s66 := by timed congr lean_s56 lean_s43
let lean_s67 := by timed congr lean_s56 lean_s34
let lean_s68 := by timed congr lean_s56 lean_s32
let lean_s69 := by timed congr lean_s56 lean_s25
let lean_s70 := by timed congr lean_s56 lean_s18
let lean_s71 := by timed congr lean_s70 lean_s4
let lean_s72 := by timed congr lean_s69 lean_s71
let lean_s73 := by timed congr lean_s68 lean_s72
let lean_s74 := by timed congr lean_s67 lean_s73
let lean_s75 := by timed congr lean_s66 lean_s74
let lean_s76 := by timed congr lean_s65 lean_s75
have lean_s77 : (Eq let241 let240) := by timed congr lean_s63 lean_s76
have lean_s78 : let240 := by timed eqResolve lean_s55 lean_s77
have lean_s79 : (Or let100 (Or let48 (Or let57 (Or let44 (Or let76 (Or let239 (Or let238 let61))))))) := by permutateOr lean_s78, [7, 4, 2, 6, 5, 3, 1, 0], (- 1)
have lean_s80 : (Eq And And) := by timed rfl
let lean_s81 := by timed congrHAdd lean_r100 lean_r96
let lean_s82 := by timed congrHAdd lean_r92 lean_s81
let lean_s83 := by timed congrHAdd lean_r95 lean_s82
let lean_s84 := by timed congrHAdd lean_r99 lean_s83
have lean_s85 : (Eq let220 let180) := by timed congrHAdd lean_r81 lean_s84
have lean_s86 : (Eq let220 let117) := by timed Eq.trans lean_s85 lean_r75
have lean_s87 : (Eq let221 let117) := by timed Eq.trans lean_r102 lean_s86
let lean_s88 := by timed flipCongrArg lean_s87 [GE.ge]
have lean_s89 : (Eq let1 let1) := by timed rfl
have lean_s90 : (Eq let231 let118) := by timed congr lean_s88 lean_s89
have lean_s91 : (Eq let231 let100) := by timed Eq.trans lean_s90 lean_r37
have lean_s92 : (Eq let232 let156) := by timed flipCongrArg lean_s91 [Not]
have lean_s93 : (Eq let232 let99) := by timed Eq.trans lean_s92 lean_r51
let lean_s94 := by timed congr lean_s80 lean_s93
have lean_s95 : (Eq let7 let7) := by timed rfl
let lean_s96 := by timed flipCongrArg lean_s95 [LE.le]
have lean_s97 : (Eq x6 x6) := by timed rfl
have lean_s98 : (Eq x9 x9) := by timed rfl
have lean_s99 : (Eq x8 x8) := by timed rfl
let lean_s100 := by timed congrHAdd lean_r57 lean_s99
let lean_s101 := by timed congrHAdd lean_s98 lean_s100
have lean_s102 : (Eq let120 let133) := by timed congrHAdd lean_s97 lean_s101
have lean_s103 : (Eq let120 let132) := by timed Eq.trans lean_s102 lean_r44
have lean_s104 : (Eq let122 let132) := by timed Eq.trans lean_r38 lean_s103
have lean_s105 : (Eq let230 let175) := by timed congr lean_s96 lean_s104
have lean_s106 : (Eq let230 let174) := by timed Eq.trans lean_s105 lean_r66
let lean_s107 := by timed congr lean_s80 lean_s106
have lean_s108 : (Eq x0 x0) := by timed rfl
have lean_s109 : (Eq x5 x5) := by timed rfl
let lean_s110 := by timed congrHAdd lean_s109 lean_r67
let lean_s111 := by timed congrHAdd lean_s108 lean_s110
have lean_s112 : (Eq let205 let155) := by timed congrHAdd lean_r79 lean_s111
have lean_s113 : (Eq let205 let12) := by timed Eq.trans lean_s112 lean_r50
have lean_s114 : (Eq let206 let12) := by timed Eq.trans lean_r90 lean_s113
let lean_s115 := by timed flipCongrArg lean_s114 [LE.le]
have lean_s116 : (Eq let229 let202) := by timed congr lean_s115 lean_s89
have lean_s117 : (Eq let229 let14) := by timed Eq.trans lean_s116 lean_r87
let lean_s118 := by timed congr lean_s80 lean_s117
let lean_s119 := by timed flipCongrArg lean_r91 [LE.le]
have lean_s120 : (Eq let228 let128) := by timed congr lean_s119 lean_s95
have lean_s121 : (Eq let228 let49) := by timed Eq.trans lean_s120 lean_r41
let lean_s122 := by timed congr lean_s80 lean_s121
let lean_s123 := by timed congrHAdd lean_r62 lean_r67
have lean_s124 : (Eq let209 let179) := by timed congrHAdd lean_r42 lean_s123
have lean_s125 : (Eq let209 let56) := by timed Eq.trans lean_s124 lean_r74
have lean_s126 : (Eq let210 let56) := by timed Eq.trans lean_r93 lean_s125
let lean_s127 := by timed flipCongrArg lean_s126 [LE.le]
have lean_s128 : (Eq let6 let6) := by timed rfl
have lean_s129 : (Eq let227 let106) := by timed congr lean_s127 lean_s128
have lean_s130 : (Eq let227 let58) := by timed Eq.trans lean_s129 lean_r34
let lean_s131 := by timed congr lean_s80 lean_s130
let lean_s132 := by timed flipCongrArg lean_s95 [LE.le]
let lean_s133 := by timed congrHAdd lean_r49 lean_r67
let lean_s134 := by timed congrHAdd lean_s98 lean_s133
have lean_s135 : (Eq let193 let164) := by timed congrHAdd lean_r48 lean_s134
have lean_s136 : (Eq let193 let157) := by timed Eq.trans lean_s135 lean_r55
have lean_s137 : (Eq let194 let157) := by timed Eq.trans lean_r83 lean_s136
have lean_s138 : (Eq let226 let158) := by timed congr lean_s132 lean_s137
have lean_s139 : (Eq let226 let45) := by timed Eq.trans lean_s138 lean_r52
let lean_s140 := by timed congr lean_s80 lean_s139
let lean_s141 := by timed flipCongrArg lean_s89 [LE.le]
have lean_s142 : (Eq x1 x1) := by timed rfl
let lean_s143 := by timed congrHAdd lean_s142 lean_r67
have lean_s144 : (Eq let147 let204) := by timed congrHAdd lean_r69 lean_s143
have lean_s145 : (Eq let147 let136) := by timed Eq.trans lean_s144 lean_r89
have lean_s146 : (Eq let148 let136) := by timed Eq.trans lean_r46 lean_s145
have lean_s147 : (Eq let225 let196) := by timed congr lean_s141 lean_s146
have lean_s148 : (Eq let225 let195) := by timed Eq.trans lean_s147 lean_r85
let lean_s149 := by timed congr lean_s80 lean_s148
let lean_s150 := by timed congrHAdd lean_s99 lean_r67
let lean_s151 := by timed congrHAdd lean_s109 lean_s150
let lean_s152 := by timed congrHAdd lean_s97 lean_s151
have lean_s153 : (Eq let189 let184) := by timed congrHAdd lean_r53 lean_s152
have lean_s154 : (Eq let189 let182) := by timed Eq.trans lean_s153 lean_r77
have lean_s155 : (Eq let190 let182) := by timed Eq.trans lean_r80 lean_s154
let lean_s156 := by timed flipCongrArg lean_s155 [LE.le]
have lean_s157 : (Eq let224 let183) := by timed congr lean_s156 lean_s95
have lean_s158 : (Eq let224 let181) := by timed Eq.trans lean_s157 lean_r76
let lean_s159 := by timed congr lean_s80 lean_s158
let lean_s160 := by timed flipCongrArg lean_s89 [LE.le]
have lean_s161 : (Eq x4 x4) := by timed rfl
have lean_s162 : (Eq x2 x2) := by timed rfl
let lean_s163 := by timed congrHAdd lean_r53 lean_s162
let lean_s164 := by timed congrHAdd lean_s97 lean_s163
let lean_s165 := by timed congrHAdd lean_s161 lean_s164
have lean_s166 : (Eq let171 let192) := by timed congrHAdd lean_s98 lean_s165
have lean_s167 : (Eq let171 let165) := by timed Eq.trans lean_s166 lean_r82
have lean_s168 : (Eq let172 let165) := by timed Eq.trans lean_r63 lean_s167
have lean_s169 : (Eq let223 let166) := by timed congr lean_s160 lean_s168
have lean_s170 : (Eq let223 let77) := by timed Eq.trans lean_s169 lean_r56
let lean_s171 := by timed congr lean_s80 lean_s170
let lean_s172 := by timed flipCongrArg lean_s128 [LE.le]
have lean_s173 : (Eq let222 let169) := by timed congr lean_s172 lean_r72
have lean_s174 : (Eq let222 let168) := by timed Eq.trans lean_s173 lean_r61
let lean_s175 := by timed congr lean_s171 lean_s174
let lean_s176 := by timed congr lean_s159 lean_s175
let lean_s177 := by timed congr lean_s149 lean_s176
let lean_s178 := by timed congr lean_s140 lean_s177
let lean_s179 := by timed congr lean_s131 lean_s178
let lean_s180 := by timed congr lean_s122 lean_s179
let lean_s181 := by timed congr lean_s118 lean_s180
let lean_s182 := by timed congr lean_s107 lean_s181
have lean_s183 : (Eq let233 let237) := by timed congr lean_s94 lean_s182
have lean_s184 : (Eq let234 let237) := by timed Eq.trans lean_r103 lean_s183
have lean_s185 : let237 := by timed eqResolve lean_a108 lean_s184
have lean_s186 : let99 := by andElim lean_s185, 0
let lean_s187 := by R2 lean_s79, lean_s186, let99, [(- 1), 0]
have lean_s188 : let49 := by andElim lean_s185, 3
let lean_s189 := by R1 lean_s187, lean_s188, let48, [(- 1), 0]
have lean_s190 : let58 := by andElim lean_s185, 4
let lean_s191 := by R1 lean_s189, lean_s190, let57, [(- 1), 0]
have lean_s192 : let45 := by andElim lean_s185, 5
let lean_s193 := by R1 lean_s191, lean_s192, let44, [(- 1), 0]
have lean_s194 : let77 := by andElim lean_s185, 8
let lean_s195 := by R1 lean_s193, lean_s194, let76, [(- 1), 0]
have lean_s196 : let174 := by andElim lean_s185, 1
let lean_s197 := by R2 lean_s195, lean_s196, let174, [(- 1), 0]
have lean_s198 : let195 := by andElim lean_s185, 6
have lean_s199 : let61 := by R2 lean_s197, lean_s198, let195, [(- 1), 0]
let lean_s200 := by R2 lean_s52, lean_s199, let61, [(- 1), 0]
let lean_s201 := by R1 lean_s200, lean_s194, let76, [(- 1), 0]
let lean_s202 := by R1 lean_s201, lean_s192, let44, [(- 1), 0]
let lean_s203 := by R1 lean_s202, lean_s190, let57, [(- 1), 0]
let lean_s204 := by R1 lean_s203, lean_s188, let48, [(- 1), 0]
have lean_s205 : let14 := by andElim lean_s185, 2
let lean_s206 := by R1 lean_s204, lean_s205, let13, [(- 1), 0]
let lean_s207 := by R2 lean_s206, lean_s196, let174, [(- 1), 0]
exact (show False from by R2 lean_s207, lean_s186, let99, [0, 0])


