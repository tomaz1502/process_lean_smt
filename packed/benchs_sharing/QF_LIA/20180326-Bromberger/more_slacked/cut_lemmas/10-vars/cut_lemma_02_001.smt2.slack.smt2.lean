open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x2x5fplus : Int}
variable {x2x5fminus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x6x5fplus : Int}
variable {x6x5fminus : Int}
variable {x7x5fplus : Int}
variable {x6x5fminus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x5x5fminus : Int}
variable {x7x5fplus : Int}
variable {x9x5fminus : Int}
variable {x7x5fminus : Int}
variable {x4x5fplus : Int}
variable {x1x5fplus : Int}
variable {x4x5fminus : Int}
variable {x9x5fplus : Int}
variable {x8x5fminus : Int}
variable {x1x5fplus : Int}
variable {x8x5fplus : Int}
variable {x1x5fminus : Int}
variable {x6x5fplus : Int}
variable {x5x5fplus : Int}
variable {x0x5fminus : Int}
variable {x0x5fplus : Int}
variable {x2x5fminus : Int}
variable {x2x5fplus : Int}
variable {x1x5fminus : Int}
variable {x8x5fplus : Int}
variable {x8x5fminus : Int}
variable {x4x5fminus : Int}
variable {x4x5fplus : Int}
variable {x9x5fminus : Int}
variable {x9x5fplus : Int}
variable {x7x5fminus : Int}

theorem th0 :
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x1x5fplus)
  let let4 := (binrel% HMul.hMul let2 x2x5fminus)
  let let5 := (binrel% HMul.hMul let2 x7x5fminus)
  let let6 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let3 x1x5fminus)))))
  let let7 := (binrel% GE.ge let6 let1)
  let let8 := (Not let7)
  let let9 := (binrel% LT.lt let6 let1)
  let let10 := (Int.ofNat 0)
  let let11 := (Rat.ofInt 1)
  let let12 := (binrel% GT.gt let11 let10)
  let let13 := (Int.ofNat 4)
  let let14 := (Int.ofNat 5)
  let let15 := (binrel% HDiv.hDiv let14 let13)
  let let16 := (Neg.neg let15)
  let let17 := (binrel% LT.lt let16 let10)
  let let18 := (Int.ofNat 2)
  let let19 := (Int.ofNat 3)
  let let20 := (binrel% HDiv.hDiv let19 let18)
  let let21 := (Neg.neg let20)
  let let22 := (binrel% LT.lt let21 let10)
  let let23 := (Rat.ofInt 2)
  let let24 := (binrel% GT.gt let23 let10)
  let let25 := (Neg.neg let18)
  let let26 := (binrel% HMul.hMul let25 x9x5fminus)
  let let27 := (binrel% HMul.hMul let18 x9x5fplus)
  let let28 := (binrel% HMul.hMul let2 x0x5fplus)
  let let29 := (binrel% HMul.hMul let18 x5x5fminus)
  let let30 := (binrel% HMul.hMul let25 x5x5fplus)
  let let31 := (Neg.neg let19)
  let let32 := (binrel% HMul.hMul let31 x8x5fminus)
  let let33 := (binrel% HMul.hMul let19 x8x5fplus)
  let let34 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd let27 let26)))))))))))
  let let35 := (binrel% GE.ge let34 let2)
  let let36 := (Not let35)
  let let37 := (binrel% LT.lt let34 let2)
  let let38 := (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x1x5fplus) (binrel% HMul.hMul let31 x1x5fminus))))))))
  let let39 := (binrel% HMul.hMul let18 x1x5fminus)
  let let40 := (binrel% HMul.hMul let25 x1x5fplus)
  let let41 := (binrel% HMul.hMul let2 x5x5fplus)
  let let42 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd let40 let39)))))))
  let let43 := (binrel% HMul.hMul let21 let42)
  let let44 := (Not let36)
  let let45 := (Eq let35 let44)
  let let46 := (Eq let44 let35)
  let let47 := (Int.ofNat 7)
  let let48 := (binrel% HDiv.hDiv let47 let13)
  let let49 := (Neg.neg let48)
  let let50 := (binrel% HDiv.hDiv let47 let18)
  let let51 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let50) x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let50 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let49 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let49 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let49 x9x5fplus) (binrel% HMul.hMul let48 x9x5fminus))))))))
  let let52 := (binrel% HMul.hMul let2 x9x5fminus)
  let let53 := (binrel% HAdd.hAdd x9x5fplus let52)
  let let54 := (binrel% HMul.hMul let2 x6x5fplus)
  let let55 := (binrel% HMul.hMul let2 x7x5fplus)
  let let56 := (binrel% HMul.hMul let25 x8x5fminus)
  let let57 := (binrel% HMul.hMul let18 x8x5fplus)
  let let58 := (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x6x5fminus let53))))))
  let let59 := (binrel% HMul.hMul let49 let58)
  let let60 := (binrel% HDiv.hDiv let1 let18)
  let let61 := (Neg.neg let60)
  let let62 := (binrel% HMul.hMul let60 x9x5fminus)
  let let63 := (binrel% HMul.hMul let61 x9x5fplus)
  let let64 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x4x5fplus) (binrel% HMul.hMul let61 x4x5fminus))))
  let let65 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x4x5fplus) x4x5fminus)))
  let let66 := (binrel% HMul.hMul let61 let65)
  let let67 := (binrel% LT.lt let61 let10)
  let let68 := (binrel% HAdd.hAdd let28 x0x5fminus)
  let let69 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 let68))))))
  let let70 := (binrel% HDiv.hDiv let14 let18)
  let let71 := (Neg.neg let70)
  let let72 := (binrel% HMul.hMul let15 x8x5fminus)
  let let73 := (binrel% HMul.hMul let16 x8x5fplus)
  let let74 := (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x5x5fplus) (binrel% HMul.hMul let71 x5x5fminus))))))
  let let75 := (binrel% HMul.hMul let2 x8x5fminus)
  let let76 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let30 let29)))))
  let let77 := (binrel% HMul.hMul let16 let76)
  let let78 := (binrel% HMul.hMul let49 let2)
  let let79 := (Not let8)
  let let80 := (Eq let79 let7)
  let let81 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let54 x6x5fminus)))))))
  let let82 := (binrel% HMul.hMul let25 x2x5fminus)
  let let83 := (binrel% HMul.hMul let18 x2x5fplus)
  let let84 := (binrel% HMul.hMul let2 x6x5fminus)
  let let85 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 let53))))))
  let let86 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let83 let82)))))))
  let let87 := (Eq let35 let35)
  let let88 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x1x5fminus let68))))))))))
  let let89 := (Neg.neg (Rat.ofInt 4))
  let let90 := (binrel% HMul.hMul let23 let25)
  let let91 := (binrel% LE.le let34 let25)
  let let92 := (binrel% LE.le let6 let10)
  let let93 := (Not let92)
  let let94 := (binrel% GT.gt let6 let10)
  let let95 := (Eq let94 let93)
  let let96 := (Eq let7 let7)
  let let97 := (Neg.neg let13)
  let let98 := (Int.ofNat 6)
  let let99 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let98) x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let97 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let25 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x0x5fminus) (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x9x5fplus) (binrel% HMul.hMul let97 x9x5fminus)))))))))))))
  let let100 := (binrel% HMul.hMul let23 let34)
  let let101 := (Rat.ofInt 0)
  let let102 := (binrel% HMul.hMul let11 let10)
  let let103 := (Neg.neg (binrel% HDiv.hDiv let1 let13))
  let let104 := (binrel% LE.le let101 let103)
  let let105 := (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let61 let48)))))))
  let let106 := (Rat.ofInt let6)
  let let107 := (binrel% HMul.hMul let11 let6)
  let let108 := (binrel% HMul.hMul let61 let10)
  let let109 := (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let71 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x9x5fplus) (binrel% HMul.hMul let15 x9x5fminus))))))))
  let let110 := (binrel% HMul.hMul let16 let85)
  let let111 := (Eq let7 let79)
  let let112 := (binrel% HMul.hMul let61 let1)
  let let113 := (binrel% HMul.hMul let21 let10)
  let let114 := (binrel% HMul.hMul let16 let2)
  let let115 := (binrel% LT.lt let49 let10)
  let let116 := (binrel% HMul.hMul let2 x4x5fminus)
  let let117 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x4x5fplus let116)))))))))
  let let118 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let4 let68))))))))
  let let119 := (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x2x5fminus) (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x4x5fplus) (binrel% HMul.hMul let60 x4x5fminus))))))))))
  let let120 := (binrel% HAdd.hAdd let106 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let99 (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let64 let51)))))))
  let let121 := (binrel% HMul.hMul let61 let117)
  let let122 := (binrel% LE.le let88 let25)
  let let123 := (binrel% GE.ge let118 let10)
  let let124 := (binrel% GE.ge let86 let2)
  let let125 := (binrel% GE.ge let69 let10)
  let let126 := (binrel% GE.ge let81 let2)
  let let127 := (binrel% GE.ge let76 let2)
  let let128 := (binrel% GE.ge let65 let1)
  let let129 := (binrel% GE.ge let117 let10)
  let let130 := (binrel% GE.ge let85 let2)
  let let131 := (binrel% GE.ge let42 let10)
  let let132 := (binrel% GE.ge let58 let2)
  let let133 := (Not let128)
  let let134 := (Not let127)
  let let135 := (Not let132)
  let let136 := (Not let131)
  let let137 := (Not let130)
  let let138 := (Not let129)
  let let139 := (Or let135 (Or let133 (Or let138 (Or let35 (Or let136 (Or let134 (Or let137 let7)))))))
  let let140 := (Or let135 (Or let133 (Or let138 (Or let44 (Or let136 (Or let134 (Or let137 let79)))))))
  let let141 := (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let112 let78)))))))
  let let142 := (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd let110 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let121 (binrel% HAdd.hAdd let66 let59)))))))
  let let143 := (binrel% LE.le let142 let141)
  let let144 := (binrel% LE.le let59 let78)
  let let145 := (And let115 let132)
  let let146 := (binrel% LE.le let66 let112)
  let let147 := (And let67 let128)
  let let148 := (binrel% LE.le let121 let108)
  let let149 := (And let67 let129)
  let let150 := (binrel% LE.le let100 let90)
  let let151 := (And let24 let91)
  let let152 := (binrel% LE.le let43 let113)
  let let153 := (And let22 let131)
  let let154 := (binrel% LE.le let77 let114)
  let let155 := (And let17 let127)
  let let156 := (binrel% LE.le let110 let114)
  let let157 := (And let17 let130)
  let let158 := (binrel% LE.le let107 let102)
  let let159 := (And let12 let92)
(Eq let9 let8) → (Eq let12 True) → (Eq let17 True) → (Eq let22 True) → (Eq let24 True) → (Eq let37 let36) → (Eq let43 let38) → (Eq let46 let45) → (Eq let59 let51) → (Eq let66 let64) → (Eq let67 True) → (Eq let69 let42) → (Eq let77 let74) → (Eq let78 let48) → let80 → (Eq let81 let58) → (Eq let86 let85) → (Eq let87 True) → (Eq let88 let34) → (Eq let90 let89) → (Eq let91 let36) → let95 → (Eq let96 True) → (Eq let100 let99) → (Eq let92 let8) → (Eq let102 let101) → let46 → (Eq let104 False) → (Eq let105 let103) → (Eq let107 let106) → (Eq let108 let101) → (Eq let110 let109) → (Eq let80 let111) → (Eq let112 let61) → (Eq let113 let101) → (Eq let114 let15) → (Eq let115 True) → (Eq let118 let117) → (Eq let120 let101) → (Eq let121 let119) → (binrel% GE.ge x8x5fplus let10) → (binrel% GE.ge x8x5fminus let10) → (binrel% GE.ge x7x5fplus let10) → (binrel% GE.ge x7x5fminus let10) → (binrel% GE.ge x6x5fplus let10) → (binrel% GE.ge x6x5fminus let10) → (binrel% GE.ge x5x5fplus let10) → (binrel% GE.ge x5x5fminus let10) → (binrel% GE.ge x0x5fplus let10) → (binrel% GE.ge x0x5fminus let10) → (binrel% GE.ge x2x5fplus let10) → (binrel% GE.ge x2x5fminus let10) → (binrel% GE.ge x1x5fplus let10) → (binrel% GE.ge x1x5fminus let10) → (binrel% GE.ge x9x5fplus let10) → (binrel% GE.ge x9x5fminus let10) → (binrel% GE.ge x4x5fplus let10) → (binrel% GE.ge x4x5fminus let10) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x5x5fminus) let68)))))))) let2) → let92 → let122 → let123 → let124 → let125 → let126 → let127 → let128 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd x1x5fplus (binrel% HMul.hMul let2 x1x5fminus)))) let1) → False :=
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x1x5fplus)
  let let4 := (binrel% HMul.hMul let2 x2x5fminus)
  let let5 := (binrel% HMul.hMul let2 x7x5fminus)
  let let6 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let3 x1x5fminus)))))
  let let7 := (binrel% GE.ge let6 let1)
  let let8 := (Not let7)
  let let9 := (binrel% LT.lt let6 let1)
  let let10 := (Int.ofNat 0)
  let let11 := (Rat.ofInt 1)
  let let12 := (binrel% GT.gt let11 let10)
  let let13 := (Int.ofNat 4)
  let let14 := (Int.ofNat 5)
  let let15 := (binrel% HDiv.hDiv let14 let13)
  let let16 := (Neg.neg let15)
  let let17 := (binrel% LT.lt let16 let10)
  let let18 := (Int.ofNat 2)
  let let19 := (Int.ofNat 3)
  let let20 := (binrel% HDiv.hDiv let19 let18)
  let let21 := (Neg.neg let20)
  let let22 := (binrel% LT.lt let21 let10)
  let let23 := (Rat.ofInt 2)
  let let24 := (binrel% GT.gt let23 let10)
  let let25 := (Neg.neg let18)
  let let26 := (binrel% HMul.hMul let25 x9x5fminus)
  let let27 := (binrel% HMul.hMul let18 x9x5fplus)
  let let28 := (binrel% HMul.hMul let2 x0x5fplus)
  let let29 := (binrel% HMul.hMul let18 x5x5fminus)
  let let30 := (binrel% HMul.hMul let25 x5x5fplus)
  let let31 := (Neg.neg let19)
  let let32 := (binrel% HMul.hMul let31 x8x5fminus)
  let let33 := (binrel% HMul.hMul let19 x8x5fplus)
  let let34 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd let27 let26)))))))))))
  let let35 := (binrel% GE.ge let34 let2)
  let let36 := (Not let35)
  let let37 := (binrel% LT.lt let34 let2)
  let let38 := (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x1x5fplus) (binrel% HMul.hMul let31 x1x5fminus))))))))
  let let39 := (binrel% HMul.hMul let18 x1x5fminus)
  let let40 := (binrel% HMul.hMul let25 x1x5fplus)
  let let41 := (binrel% HMul.hMul let2 x5x5fplus)
  let let42 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd let40 let39)))))))
  let let43 := (binrel% HMul.hMul let21 let42)
  let let44 := (Not let36)
  let let45 := (Eq let35 let44)
  let let46 := (Eq let44 let35)
  let let47 := (Int.ofNat 7)
  let let48 := (binrel% HDiv.hDiv let47 let13)
  let let49 := (Neg.neg let48)
  let let50 := (binrel% HDiv.hDiv let47 let18)
  let let51 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let50) x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let50 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let49 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let49 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let49 x9x5fplus) (binrel% HMul.hMul let48 x9x5fminus))))))))
  let let52 := (binrel% HMul.hMul let2 x9x5fminus)
  let let53 := (binrel% HAdd.hAdd x9x5fplus let52)
  let let54 := (binrel% HMul.hMul let2 x6x5fplus)
  let let55 := (binrel% HMul.hMul let2 x7x5fplus)
  let let56 := (binrel% HMul.hMul let25 x8x5fminus)
  let let57 := (binrel% HMul.hMul let18 x8x5fplus)
  let let58 := (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x6x5fminus let53))))))
  let let59 := (binrel% HMul.hMul let49 let58)
  let let60 := (binrel% HDiv.hDiv let1 let18)
  let let61 := (Neg.neg let60)
  let let62 := (binrel% HMul.hMul let60 x9x5fminus)
  let let63 := (binrel% HMul.hMul let61 x9x5fplus)
  let let64 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x4x5fplus) (binrel% HMul.hMul let61 x4x5fminus))))
  let let65 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x4x5fplus) x4x5fminus)))
  let let66 := (binrel% HMul.hMul let61 let65)
  let let67 := (binrel% LT.lt let61 let10)
  let let68 := (binrel% HAdd.hAdd let28 x0x5fminus)
  let let69 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 let68))))))
  let let70 := (binrel% HDiv.hDiv let14 let18)
  let let71 := (Neg.neg let70)
  let let72 := (binrel% HMul.hMul let15 x8x5fminus)
  let let73 := (binrel% HMul.hMul let16 x8x5fplus)
  let let74 := (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x5x5fplus) (binrel% HMul.hMul let71 x5x5fminus))))))
  let let75 := (binrel% HMul.hMul let2 x8x5fminus)
  let let76 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let30 let29)))))
  let let77 := (binrel% HMul.hMul let16 let76)
  let let78 := (binrel% HMul.hMul let49 let2)
  let let79 := (Not let8)
  let let80 := (Eq let79 let7)
  let let81 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let54 x6x5fminus)))))))
  let let82 := (binrel% HMul.hMul let25 x2x5fminus)
  let let83 := (binrel% HMul.hMul let18 x2x5fplus)
  let let84 := (binrel% HMul.hMul let2 x6x5fminus)
  let let85 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 let53))))))
  let let86 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let83 let82)))))))
  let let87 := (Eq let35 let35)
  let let88 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x1x5fminus let68))))))))))
  let let89 := (Neg.neg (Rat.ofInt 4))
  let let90 := (binrel% HMul.hMul let23 let25)
  let let91 := (binrel% LE.le let34 let25)
  let let92 := (binrel% LE.le let6 let10)
  let let93 := (Not let92)
  let let94 := (binrel% GT.gt let6 let10)
  let let95 := (Eq let94 let93)
  let let96 := (Eq let7 let7)
  let let97 := (Neg.neg let13)
  let let98 := (Int.ofNat 6)
  let let99 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let98) x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let97 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let25 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x0x5fminus) (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x9x5fplus) (binrel% HMul.hMul let97 x9x5fminus)))))))))))))
  let let100 := (binrel% HMul.hMul let23 let34)
  let let101 := (Rat.ofInt 0)
  let let102 := (binrel% HMul.hMul let11 let10)
  let let103 := (Neg.neg (binrel% HDiv.hDiv let1 let13))
  let let104 := (binrel% LE.le let101 let103)
  let let105 := (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let61 let48)))))))
  let let106 := (Rat.ofInt let6)
  let let107 := (binrel% HMul.hMul let11 let6)
  let let108 := (binrel% HMul.hMul let61 let10)
  let let109 := (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let71 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x9x5fplus) (binrel% HMul.hMul let15 x9x5fminus))))))))
  let let110 := (binrel% HMul.hMul let16 let85)
  let let111 := (Eq let7 let79)
  let let112 := (binrel% HMul.hMul let61 let1)
  let let113 := (binrel% HMul.hMul let21 let10)
  let let114 := (binrel% HMul.hMul let16 let2)
  let let115 := (binrel% LT.lt let49 let10)
  let let116 := (binrel% HMul.hMul let2 x4x5fminus)
  let let117 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x4x5fplus let116)))))))))
  let let118 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let4 let68))))))))
  let let119 := (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x2x5fminus) (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x4x5fplus) (binrel% HMul.hMul let60 x4x5fminus))))))))))
  let let120 := (binrel% HAdd.hAdd let106 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let99 (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let64 let51)))))))
  let let121 := (binrel% HMul.hMul let61 let117)
  let let122 := (binrel% LE.le let88 let25)
  let let123 := (binrel% GE.ge let118 let10)
  let let124 := (binrel% GE.ge let86 let2)
  let let125 := (binrel% GE.ge let69 let10)
  let let126 := (binrel% GE.ge let81 let2)
  let let127 := (binrel% GE.ge let76 let2)
  let let128 := (binrel% GE.ge let65 let1)
  let let129 := (binrel% GE.ge let117 let10)
  let let130 := (binrel% GE.ge let85 let2)
  let let131 := (binrel% GE.ge let42 let10)
  let let132 := (binrel% GE.ge let58 let2)
  let let133 := (Not let128)
  let let134 := (Not let127)
  let let135 := (Not let132)
  let let136 := (Not let131)
  let let137 := (Not let130)
  let let138 := (Not let129)
  let let139 := (Or let135 (Or let133 (Or let138 (Or let35 (Or let136 (Or let134 (Or let137 let7)))))))
  let let140 := (Or let135 (Or let133 (Or let138 (Or let44 (Or let136 (Or let134 (Or let137 let79)))))))
  let let141 := (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let112 let78)))))))
  let let142 := (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd let110 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let121 (binrel% HAdd.hAdd let66 let59)))))))
  let let143 := (binrel% LE.le let142 let141)
  let let144 := (binrel% LE.le let59 let78)
  let let145 := (And let115 let132)
  let let146 := (binrel% LE.le let66 let112)
  let let147 := (And let67 let128)
  let let148 := (binrel% LE.le let121 let108)
  let let149 := (And let67 let129)
  let let150 := (binrel% LE.le let100 let90)
  let let151 := (And let24 let91)
  let let152 := (binrel% LE.le let43 let113)
  let let153 := (And let22 let131)
  let let154 := (binrel% LE.le let77 let114)
  let let155 := (And let17 let127)
  let let156 := (binrel% LE.le let110 let114)
  let let157 := (And let17 let130)
  let let158 := (binrel% LE.le let107 let102)
  let let159 := (And let12 let92)
fun lean_r0 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let12 True) => -- EVALUATE
fun lean_r2 : (Eq let17 True) => -- EVALUATE
fun lean_r3 : (Eq let22 True) => -- EVALUATE
fun lean_r4 : (Eq let24 True) => -- EVALUATE
fun lean_r5 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let43 let38) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let46 let45) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let59 let51) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let66 let64) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let67 True) => -- EVALUATE
fun lean_r11 : (Eq let69 let42) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let77 let74) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let78 let48) => -- THEORY_REWRITE_ARITH
fun lean_r14 : let80 => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let81 let58) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let86 let85) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let87 True) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let88 let34) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let90 let89) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let91 let36) => -- THEORY_REWRITE_ARITH
fun lean_r21 : let95 => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let96 True) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let100 let99) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let92 let8) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let102 let101) => -- THEORY_REWRITE_ARITH
fun lean_r26 : let46 => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let104 False) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let105 let103) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let107 let106) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let108 let101) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let110 let109) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let80 let111) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let112 let61) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let113 let101) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let114 let15) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let115 True) => -- EVALUATE
fun lean_r37 : (Eq let118 let117) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let120 let101) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let121 let119) => -- THEORY_REWRITE_ARITH
fun lean_a40 : (binrel% GE.ge x8x5fplus let10) =>
fun lean_a41 : (binrel% GE.ge x8x5fminus let10) =>
fun lean_a42 : (binrel% GE.ge x7x5fplus let10) =>
fun lean_a43 : (binrel% GE.ge x7x5fminus let10) =>
fun lean_a44 : (binrel% GE.ge x6x5fplus let10) =>
fun lean_a45 : (binrel% GE.ge x6x5fminus let10) =>
fun lean_a46 : (binrel% GE.ge x5x5fplus let10) =>
fun lean_a47 : (binrel% GE.ge x5x5fminus let10) =>
fun lean_a48 : (binrel% GE.ge x0x5fplus let10) =>
fun lean_a49 : (binrel% GE.ge x0x5fminus let10) =>
fun lean_a50 : (binrel% GE.ge x2x5fplus let10) =>
fun lean_a51 : (binrel% GE.ge x2x5fminus let10) =>
fun lean_a52 : (binrel% GE.ge x1x5fplus let10) =>
fun lean_a53 : (binrel% GE.ge x1x5fminus let10) =>
fun lean_a54 : (binrel% GE.ge x9x5fplus let10) =>
fun lean_a55 : (binrel% GE.ge x9x5fminus let10) =>
fun lean_a56 : (binrel% GE.ge x4x5fplus let10) =>
fun lean_a57 : (binrel% GE.ge x4x5fminus let10) =>
fun lean_a58 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x5x5fminus) let68)))))))) let2) =>
fun lean_a59 : let92 =>
fun lean_a60 : let122 =>
fun lean_a61 : let123 =>
fun lean_a62 : let124 =>
fun lean_a63 : let125 =>
fun lean_a64 : let126 =>
fun lean_a65 : let127 =>
fun lean_a66 : let128 =>
fun lean_a67 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd x1x5fplus (binrel% HMul.hMul let2 x1x5fminus)))) let1) => by
have lean_s0 : (Or let135 (Or let133 (Or let138 (Or let44 (Or let136 (Or let134 (Or let137 (Or let79 False)))))))) :=
  (scope (fun lean_a68 : let132 =>
    (scope (fun lean_a69 : let128 =>
      (scope (fun lean_a70 : let129 =>
        (scope (fun lean_a71 : let36 =>
          (scope (fun lean_a72 : let131 =>
            (scope (fun lean_a73 : let127 =>
              (scope (fun lean_a74 : let130 =>
                (scope (fun lean_a75 : let8 =>
                  have lean_s0 : let8 := by timed eqResolve lean_a59 lean_r24
                  have lean_s1 : (Eq let8 let9) := by timed Eq.symm lean_r0
                  have lean_s2 : let9 := by timed eqResolve lean_s0 lean_s1
                  have lean_s3 : let92 := by intTightUb lean_s2
                  have lean_s4 : (Or let93 False) :=
                    (scope (fun lean_a74 : let92 =>
                      have lean_s4 : let12 := by timed trueElim lean_r1
                      have lean_s5 : let159 := by timed And.intro lean_s4 lean_a74
                      have lean_s6 : (Implies let159 let158) := by arithMulPos [let6, let10, let11], 1
                      have lean_s7 : let158 := by timed modusPonens lean_s5 lean_s6
                      have lean_s8 : let17 := by timed trueElim lean_r2
                      let lean_s9 := by timed flipCongrArg lean_r16 [GE.ge]
                      have lean_s10 : (Eq let2 let2) := by timed rfl
                      have lean_s11 : (Eq let124 let130) := by timed congr lean_s9 lean_s10
                      have lean_s12 : let130 := by timed eqResolve lean_a62 lean_s11
                      have lean_s13 : let157 := by timed And.intro lean_s8 lean_s12
                      have lean_s14 : (Implies let157 let156) := by arithMulNeg [let85, let2, let16], 3
                      have lean_s15 : let156 := by timed modusPonens lean_s13 lean_s14
                      have lean_s16 : let155 := by timed And.intro lean_s8 lean_a73
                      have lean_s17 : (Implies let155 let154) := by arithMulNeg [let76, let2, let16], 3
                      have lean_s18 : let154 := by timed modusPonens lean_s16 lean_s17
                      have lean_s19 : let22 := by timed trueElim lean_r3
                      let lean_s20 := by timed flipCongrArg lean_r11 [GE.ge]
                      have lean_s21 : (Eq let10 let10) := by timed rfl
                      have lean_s22 : (Eq let125 let131) := by timed congr lean_s20 lean_s21
                      have lean_s23 : let131 := by timed eqResolve lean_a63 lean_s22
                      have lean_s24 : let153 := by timed And.intro lean_s19 lean_s23
                      have lean_s25 : (Implies let153 let152) := by arithMulNeg [let42, let10, let21], 3
                      have lean_s26 : let152 := by timed modusPonens lean_s24 lean_s25
                      have lean_s27 : let24 := by timed trueElim lean_r4
                      let lean_s28 := by timed flipCongrArg lean_r18 [LE.le]
                      have lean_s29 : (Eq let25 let25) := by timed rfl
                      have lean_s30 : (Eq let122 let91) := by timed congr lean_s28 lean_s29
                      have lean_s31 : (Eq let122 let36) := by timed Eq.trans lean_s30 lean_r20
                      have lean_s32 : let36 := by timed eqResolve lean_a60 lean_s31
                      have lean_s33 : (Eq let36 let37) := by timed Eq.symm lean_r5
                      have lean_s34 : let37 := by timed eqResolve lean_s32 lean_s33
                      have lean_s35 : let91 := by intTightUb lean_s34
                      have lean_s36 : let151 := by timed And.intro lean_s27 lean_s35
                      have lean_s37 : (Implies let151 let150) := by arithMulPos [let34, let25, let23], 1
                      have lean_s38 : let150 := by timed modusPonens lean_s36 lean_s37
                      have lean_s39 : let67 := by timed trueElim lean_r10
                      let lean_s40 := by timed flipCongrArg lean_r37 [GE.ge]
                      have lean_s41 : (Eq let123 let129) := by timed congr lean_s40 lean_s21
                      have lean_s42 : let129 := by timed eqResolve lean_a61 lean_s41
                      have lean_s43 : let149 := by timed And.intro lean_s39 lean_s42
                      have lean_s44 : (Implies let149 let148) := by arithMulNeg [let117, let10, let61], 3
                      have lean_s45 : let148 := by timed modusPonens lean_s43 lean_s44
                      have lean_s46 : let147 := by timed And.intro lean_s39 lean_a69
                      have lean_s47 : (Implies let147 let146) := by arithMulNeg [let65, let1, let61], 3
                      have lean_s48 : let146 := by timed modusPonens lean_s46 lean_s47
                      have lean_s49 : let115 := by timed trueElim lean_r36
                      let lean_s50 := by timed flipCongrArg lean_r15 [GE.ge]
                      have lean_s51 : (Eq let126 let132) := by timed congr lean_s50 lean_s10
                      have lean_s52 : let132 := by timed eqResolve lean_a64 lean_s51
                      have lean_s53 : let145 := by timed And.intro lean_s49 lean_s52
                      have lean_s54 : (Implies let145 let144) := by arithMulNeg [let58, let2, let49], 3
                      have lean_s55 : let144 := by timed modusPonens lean_s53 lean_s54
                      have lean_s56 : let143 := by sumBounds [lean_s7, lean_s15, lean_s18, lean_s26, lean_s38, lean_s45, lean_s48, lean_s55]
                      let lean_s57 := by timed congrHAdd lean_r9 lean_r8
                      let lean_s58 := by timed congrHAdd lean_r39 lean_s57
                      let lean_s59 := by timed congrHAdd lean_r23 lean_s58
                      let lean_s60 := by timed congrHAdd lean_r6 lean_s59
                      let lean_s61 := by timed congrHAdd lean_r12 lean_s60
                      let lean_s62 := by timed congrHAdd lean_r31 lean_s61
                      have lean_s63 : (Eq let142 let120) := by timed congrHAdd lean_r29 lean_s62
                      have lean_s64 : (Eq let142 let101) := by timed Eq.trans lean_s63 lean_r38
                      let lean_s65 := by timed flipCongrArg lean_s64 [LE.le]
                      let lean_s66 := by timed congrHAdd lean_r33 lean_r13
                      let lean_s67 := by timed congrHAdd lean_r30 lean_s66
                      let lean_s68 := by timed congrHAdd lean_r19 lean_s67
                      let lean_s69 := by timed congrHAdd lean_r34 lean_s68
                      let lean_s70 := by timed congrHAdd lean_r35 lean_s69
                      let lean_s71 := by timed congrHAdd lean_r35 lean_s70
                      have lean_s72 : (Eq let141 let105) := by timed congrHAdd lean_r25 lean_s71
                      have lean_s73 : (Eq let141 let103) := by timed Eq.trans lean_s72 lean_r28
                      have lean_s74 : (Eq let143 let104) := by timed congr lean_s65 lean_s73
                      have lean_s75 : (Eq let143 False) := by timed Eq.trans lean_s74 lean_r27
                      show False from by timed eqResolve lean_s56 lean_s75
                    ))
                  have lean_s5 : let93 := by liftOrNToNeg lean_s4
                  have lean_s6 : (Eq let93 let79) := by timed flipCongrArg lean_r24 [Not]
                  have lean_s7 : (Eq let93 let7) := by timed Eq.trans lean_s6 lean_r14
                  have lean_s8 : (Eq let94 let7) := by timed Eq.trans lean_r21 lean_s7
                  have lean_s9 : (Eq let7 let94) := by timed Eq.symm lean_s8
                  have lean_s10 : (Eq let93 let94) := by timed Eq.trans lean_s7 lean_s9
                  have lean_s11 : let94 := by timed eqResolve lean_s5 lean_s10
                  have lean_s12 : (Eq let7 let93) := by timed Eq.symm lean_s7
                  have lean_s13 : let95 := by timed Eq.trans lean_s8 lean_s12
                  have lean_s14 : let93 := by timed eqResolve lean_s11 lean_s13
                  show False from by timed contradiction lean_s3 lean_s14
  ))))))))))))))))
have lean_s1 : (Not (And let132 (And let128 (And let129 (And let36 (And let131 (And let127 (And let130 let8)))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let140 := by timed flipNotAnd lean_s1 [let132, let128, let129, let36, let131, let127, let130, let8]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let135 let135) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let133 let133) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : (Eq let138 let138) := by timed rfl
let lean_s9 := by timed congr lean_s3 lean_s8
have lean_s10 : let87 := by timed rfl
let lean_s11 := by timed flipCongrArg lean_s10 [Eq]
have lean_s12 : (Eq let45 let87) := by timed congr lean_s11 lean_r26
have lean_s13 : (Eq let45 True) := by timed Eq.trans lean_s12 lean_r17
have lean_s14 : (Eq let46 True) := by timed Eq.trans lean_r7 lean_s13
have lean_s15 : let46 := by timed trueElim lean_s14
let lean_s16 := by timed congr lean_s3 lean_s15
have lean_s17 : (Eq let136 let136) := by timed rfl
let lean_s18 := by timed congr lean_s3 lean_s17
have lean_s19 : (Eq let134 let134) := by timed rfl
let lean_s20 := by timed congr lean_s3 lean_s19
have lean_s21 : (Eq let137 let137) := by timed rfl
let lean_s22 := by timed congr lean_s3 lean_s21
have lean_s23 : let96 := by timed rfl
let lean_s24 := by timed flipCongrArg lean_s23 [Eq]
have lean_s25 : (Eq let111 let96) := by timed congr lean_s24 lean_r14
have lean_s26 : (Eq let111 True) := by timed Eq.trans lean_s25 lean_r22
have lean_s27 : (Eq let80 True) := by timed Eq.trans lean_r32 lean_s26
have lean_s28 : let80 := by timed trueElim lean_s27
let lean_s29 := by timed congr lean_s22 lean_s28
let lean_s30 := by timed congr lean_s20 lean_s29
let lean_s31 := by timed congr lean_s18 lean_s30
let lean_s32 := by timed congr lean_s16 lean_s31
let lean_s33 := by timed congr lean_s9 lean_s32
let lean_s34 := by timed congr lean_s7 lean_s33
have lean_s35 : (Eq let140 let139) := by timed congr lean_s5 lean_s34
have lean_s36 : let139 := by timed eqResolve lean_s2 lean_s35
have lean_s37 : (Or let7 (Or let35 (Or let138 (Or let137 (Or let136 (Or let135 (Or let134 let133))))))) := by permutateOr lean_s36, [7, 3, 2, 6, 4, 0, 5, 1], (- 1)
let lean_s38 := by R2 lean_s37, lean_a66, let128, [(- 1), 0]
let lean_s39 := by R2 lean_s38, lean_a65, let127, [(- 1), 0]
let lean_s40 := by timed flipCongrArg lean_r15 [GE.ge]
have lean_s41 : (Eq let2 let2) := by timed rfl
have lean_s42 : (Eq let126 let132) := by timed congr lean_s40 lean_s41
have lean_s43 : let132 := by timed eqResolve lean_a64 lean_s42
let lean_s44 := by R2 lean_s39, lean_s43, let132, [(- 1), 0]
let lean_s45 := by timed flipCongrArg lean_r11 [GE.ge]
have lean_s46 : (Eq let10 let10) := by timed rfl
have lean_s47 : (Eq let125 let131) := by timed congr lean_s45 lean_s46
have lean_s48 : let131 := by timed eqResolve lean_a63 lean_s47
let lean_s49 := by R2 lean_s44, lean_s48, let131, [(- 1), 0]
let lean_s50 := by timed flipCongrArg lean_r16 [GE.ge]
have lean_s51 : (Eq let124 let130) := by timed congr lean_s50 lean_s41
have lean_s52 : let130 := by timed eqResolve lean_a62 lean_s51
let lean_s53 := by R2 lean_s49, lean_s52, let130, [(- 1), 0]
let lean_s54 := by timed flipCongrArg lean_r37 [GE.ge]
have lean_s55 : (Eq let123 let129) := by timed congr lean_s54 lean_s46
have lean_s56 : let129 := by timed eqResolve lean_a61 lean_s55
let lean_s57 := by R2 lean_s53, lean_s56, let129, [(- 1), 0]
let lean_s58 := by timed flipCongrArg lean_r18 [LE.le]
have lean_s59 : (Eq let25 let25) := by timed rfl
have lean_s60 : (Eq let122 let91) := by timed congr lean_s58 lean_s59
have lean_s61 : (Eq let122 let36) := by timed Eq.trans lean_s60 lean_r20
have lean_s62 : let36 := by timed eqResolve lean_a60 lean_s61
let lean_s63 := by R1 lean_s57, lean_s62, let35, [(- 1), 0]
have lean_s64 : let8 := by timed eqResolve lean_a59 lean_r24
exact (show False from by R1 lean_s63, lean_s64, let7, [0, 0])


