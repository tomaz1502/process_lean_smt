open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x7x5fplus : Int}
variable {x6x5fminus : Int}
variable {x6x5fminus : Int}
variable {x5x5fplus : Int}
variable {x7x5fplus : Int}
variable {x4x5fminus : Int}
variable {x2x5fplus : Int}
variable {x9x5fminus : Int}
variable {x6x5fplus : Int}
variable {x7x5fminus : Int}
variable {x4x5fplus : Int}
variable {x2x5fminus : Int}
variable {x4x5fminus : Int}
variable {x9x5fplus : Int}
variable {x7x5fminus : Int}
variable {x8x5fminus : Int}
variable {x1x5fplus : Int}
variable {x8x5fplus : Int}
variable {x4x5fplus : Int}
variable {x0x5fminus : Int}
variable {x1x5fminus : Int}
variable {x6x5fplus : Int}
variable {x5x5fminus : Int}
variable {x5x5fplus : Int}
variable {x0x5fplus : Int}
variable {x0x5fplus : Int}
variable {x2x5fminus : Int}
variable {x0x5fminus : Int}
variable {x5x5fminus : Int}
variable {x2x5fplus : Int}
variable {x1x5fminus : Int}
variable {x8x5fplus : Int}
variable {x1x5fplus : Int}
variable {x8x5fminus : Int}
variable {x9x5fminus : Int}
variable {x9x5fplus : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 x9x5fminus)
  let let5 := (binrel% HAdd.hAdd x9x5fplus let4)
  let let6 := (binrel% HMul.hMul let3 x2x5fminus)
  let let7 := (binrel% HMul.hMul let3 x8x5fminus)
  let let8 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 let5))))
  let let9 := (binrel% GE.ge let8 let1)
  let let10 := (Not let9)
  let let11 := (binrel% LT.lt let8 let1)
  let let12 := (Rat.ofInt 2)
  let let13 := (Neg.neg let12)
  let let14 := (binrel% LT.lt let13 let1)
  let let15 := (Rat.ofInt 1)
  let let16 := (binrel% GT.gt let15 let1)
  let let17 := (binrel% HMul.hMul let15 let1)
  let let18 := (binrel% HMul.hMul let13 let1)
  let let19 := (Rat.ofInt 3)
  let let20 := (binrel% HMul.hMul let19 let3)
  let let21 := (Neg.neg let15)
  let let22 := (binrel% HMul.hMul let21 let3)
  let let23 := (Neg.neg let19)
  let let24 := (binrel% HMul.hMul let23 let3)
  let let25 := (binrel% HMul.hMul let13 let2)
  let let26 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let18 let17))))))
  let let27 := (Int.ofNat 5)
  let let28 := (Neg.neg let27)
  let let29 := (binrel% HMul.hMul let28 x9x5fminus)
  let let30 := (binrel% HMul.hMul let27 x9x5fplus)
  let let31 := (Int.ofNat 2)
  let let32 := (binrel% HMul.hMul let31 x0x5fminus)
  let let33 := (Neg.neg let31)
  let let34 := (binrel% HMul.hMul let33 x0x5fplus)
  let let35 := (binrel% HMul.hMul let31 x5x5fminus)
  let let36 := (binrel% HMul.hMul let33 x5x5fplus)
  let let37 := (binrel% HMul.hMul let31 x7x5fminus)
  let let38 := (binrel% HMul.hMul let33 x7x5fplus)
  let let39 := (binrel% HMul.hMul let28 x8x5fminus)
  let let40 := (binrel% HMul.hMul let27 x8x5fplus)
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let30 let29)))))))))))
  let let42 := (binrel% HMul.hMul let15 let41)
  let let43 := (binrel% HMul.hMul let3 x4x5fminus)
  let let44 := (binrel% HMul.hMul let3 x0x5fplus)
  let let45 := (binrel% HMul.hMul let3 x6x5fminus)
  let let46 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x4x5fplus let43)))))))))
  let let47 := (binrel% HMul.hMul let13 let46)
  let let48 := (binrel% HMul.hMul let19 let8)
  let let49 := (binrel% HMul.hMul let33 x2x5fminus)
  let let50 := (binrel% HMul.hMul let31 x2x5fplus)
  let let51 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let49 let5))))))
  let let52 := (binrel% HMul.hMul let21 let51)
  let let53 := (binrel% HMul.hMul let3 x6x5fplus)
  let let54 := (binrel% HMul.hMul let3 x7x5fplus)
  let let55 := (binrel% HMul.hMul let33 x8x5fminus)
  let let56 := (binrel% HMul.hMul let31 x8x5fplus)
  let let57 := (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x6x5fminus let5))))))
  let let58 := (binrel% HMul.hMul let23 let57)
  let let59 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x4x5fplus) x4x5fminus)))
  let let60 := (binrel% HMul.hMul let13 let59)
  let let61 := (binrel% HMul.hMul let3 x7x5fminus)
  let let62 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let36 let35)))))
  let let63 := (binrel% HMul.hMul let21 let62)
  let let64 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd let47 let42))))))
  let let65 := (binrel% GE.ge let64 let26)
  let let66 := (Not let65)
  let let67 := (binrel% LT.lt let64 let26)
  let let68 := (binrel% HMul.hMul let3 x8x5fplus)
  let let69 := (Rat.ofInt (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x5x5fplus) (binrel% HMul.hMul let33 x5x5fminus)))))))
  let let70 := (binrel% HMul.hMul let31 x9x5fminus)
  let let71 := (binrel% HMul.hMul let33 x9x5fplus)
  let let72 := (Rat.ofInt (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x4x5fplus) (binrel% HMul.hMul let33 x4x5fminus)))))
  let let73 := (Int.ofNat 3)
  let let74 := (Neg.neg let73)
  let let75 := (Int.ofNat 6)
  let let76 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let75) x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x9x5fplus) (binrel% HMul.hMul let73 x9x5fminus)))))))))
  let let77 := (binrel% GT.gt let19 let1)
  let let78 := (Rat.ofInt 0)
  let let79 := (binrel% GT.gt let12 let1)
  let let80 := (binrel% HDiv.hDiv let2 let31)
  let let81 := (binrel% GT.gt let80 let1)
  let let82 := (binrel% GE.ge let41 let1)
  let let83 := (Not let82)
  let let84 := (Not let83)
  let let85 := (Eq let84 let82)
  let let86 := (Rat.ofInt let41)
  let let87 := (binrel% HMul.hMul let31 x2x5fminus)
  let let88 := (binrel% HMul.hMul let33 x2x5fplus)
  let let89 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x0x5fminus) (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x4x5fplus) (binrel% HMul.hMul let31 x4x5fminus)))))))))))
  let let90 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x9x5fplus) (binrel% HMul.hMul let74 x9x5fminus)))))))
  let let91 := (Rat.ofInt (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x9x5fplus) x9x5fminus))))))))
  let let92 := (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let89 let86))))))
  let let93 := (binrel% HDiv.hDiv let27 let31)
  let let94 := (Neg.neg let93)
  let let95 := (binrel% LT.lt let94 let1)
  let let96 := (Eq let82 let82)
  let let97 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x1x5fplus) x1x5fminus)))))
  let let98 := (binrel% GE.ge let97 let2)
  let let99 := (Not let98)
  let let100 := (Not let99)
  let let101 := (Eq let98 let100)
  let let102 := (Eq let100 let98)
  let let103 := (binrel% HMul.hMul let80 let1)
  let let104 := (binrel% HMul.hMul let94 let1)
  let let105 := (Eq let98 let98)
  let let106 := (binrel% LE.le let97 let1)
  let let107 := (binrel% LT.lt let23 let1)
  let let108 := (binrel% HMul.hMul let31 x1x5fminus)
  let let109 := (binrel% HMul.hMul let33 x1x5fplus)
  let let110 := (binrel% HAdd.hAdd let109 let108)
  let let111 := (binrel% HMul.hMul let3 x5x5fplus)
  let let112 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x0x5fminus let110))))))
  let let113 := (binrel% HAdd.hAdd let44 x0x5fminus)
  let let114 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 let113))))))
  let let115 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let50 let49)))))))
  let let116 := (Eq let82 let84)
  let let117 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 let113))))))))
  let let118 := (binrel% HAdd.hAdd let78 let78)
  let let119 := (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let23 let118)))))
  let let120 := (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let34 let32)))))))))))
  let let121 := (binrel% GE.ge let112 let1)
  let let122 := (Not let121)
  let let123 := (binrel% LT.lt let112 let1)
  let let124 := (binrel% LE.le let41 let3)
  let let125 := (Not True)
  let let126 := (binrel% GE.ge let78 let78)
  let let127 := (binrel% GE.ge let62 let3)
  let let128 := (Not let127)
  let let129 := (binrel% LT.lt let62 let3)
  let let130 := (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let78 let118))
  let let131 := (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let93 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let93 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x9x5fplus) (binrel% HMul.hMul let93 x9x5fminus))))))
  let let132 := (binrel% HMul.hMul let94 let8)
  let let133 := (binrel% HMul.hMul let12 let1)
  let let134 := (binrel% LT.lt let97 let2)
  let let135 := (binrel% HMul.hMul let21 let1)
  let let136 := (binrel% HAdd.hAdd (binrel% HMul.hMul let93 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x8x5fminus) (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let80) x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let93 x9x5fplus) (binrel% HMul.hMul let94 x9x5fminus))))))))))))
  let let137 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x7x5fminus) (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let49 let110)))))
  let let138 := (binrel% HMul.hMul let3 x5x5fminus)
  let let139 := (Rat.ofInt (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x1x5fplus) (binrel% HMul.hMul let33 x1x5fminus)))))))))
  let let140 := (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let136 let131)))
  let let141 := (Eq let9 let9)
  let let142 := (binrel% LT.lt let21 let1)
  let let143 := (binrel% HMul.hMul let80 let41)
  let let144 := (Not let10)
  let let145 := (Eq let144 let9)
  let let146 := (binrel% HMul.hMul let12 let97)
  let let147 := (Eq let9 let144)
  let let148 := (binrel% HMul.hMul let21 let112)
  let let149 := (binrel% HAdd.hAdd let135 (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let103 let104)))
  let let150 := (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd let143 let132)))
  let let151 := (binrel% GE.ge let150 let149)
  let let152 := (Not let151)
  let let153 := (binrel% LT.lt let150 let149)
  let let154 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let53 x6x5fminus)))))))
  let let155 := (binrel% LT.lt let41 let1)
  let let156 := (binrel% LE.le let120 let3)
  let let157 := (binrel% GE.ge let117 let1)
  let let158 := (binrel% GE.ge let115 let3)
  let let159 := (binrel% GE.ge let114 let1)
  let let160 := (binrel% GE.ge let154 let3)
  let let161 := (binrel% GE.ge let59 let2)
  let let162 := (binrel% GE.ge let46 let1)
  let let163 := (binrel% GE.ge let51 let3)
  let let164 := (binrel% GE.ge let57 let3)
  let let165 := (Or let10 (Or let82 (Or let98 let122)))
  let let166 := (Or let10 (Or let84 (Or let100 let122)))
  let let167 := (Eq Or Or)
  let let168 := (Or let122 False)
  let let169 := (binrel% LE.le let132 let104)
  let let170 := (And let95 let9)
  let let171 := (binrel% LT.lt let143 let103)
  let let172 := (And let81 let155)
  let let173 := (Eq let83 let155)
  let let174 := (binrel% LE.le let146 let133)
  let let175 := (And let79 let106)
  let let176 := (binrel% LE.le let148 let135)
  let let177 := (And let142 let121)
  let let178 := (Not let161)
  let let179 := (Not let164)
  let let180 := (Not let163)
  let let181 := (Not let162)
  let let182 := (Or let180 (Or let179 (Or let178 let128)))
  let let183 := (Or let82 (Or let181 (Or let9 let182)))
  let let184 := (Or let84 (Or let181 (Or let144 let182)))
  let let185 := (Or let128 False)
  let let186 := (binrel% LT.lt let42 let17)
  let let187 := (And let16 let155)
  let let188 := (binrel% LE.le let47 let18)
  let let189 := (And let14 let162)
  let let190 := (binrel% LE.le let48 let20)
  let let191 := (binrel% LE.le let8 let3)
  let let192 := (And let77 let191)
  let let193 := (binrel% LE.le let52 let22)
  let let194 := (And let142 let163)
  let let195 := (binrel% LE.le let58 let24)
  let let196 := (And let107 let164)
  let let197 := (binrel% LE.le let60 let25)
  let let198 := (And let14 let161)
  let let199 := (binrel% LE.le let63 let22)
  let let200 := (And let142 let127)
(Eq let11 let10) → (Eq let14 True) → (Eq let16 True) → (Eq let67 let66) → (Eq let63 let69) → (Eq let60 let72) → (Eq let58 let76) → (Eq let77 True) → (Eq let17 let78) → (Eq let25 let13) → (Eq let79 True) → (Eq let81 True) → let85 → (Eq let92 let78) → (Eq let95 True) → (Eq let96 True) → (Eq let47 let89) → (Eq let102 let101) → (Eq let20 let23) → (Eq let103 let78) → (Eq let42 let86) → let102 → (Eq let18 let78) → (Eq let104 let78) → (Eq let105 True) → (Eq let106 let99) → (Eq let107 True) → (Eq let52 let91) → (Eq let114 let112) → (Eq let115 let51) → (Eq let85 let116) → (Eq let117 let46) → (Eq let119 let78) → (Eq let120 let41) → (Eq let123 let122) → (Eq let124 let83) → (Eq let125 False) → (Eq let126 True) → (Eq let129 let128) → (Eq let130 let78) → (Eq let132 let131) → (Eq let22 let15) → (Eq let133 let78) → (Eq let24 let19) → (Eq let134 let99) → (Eq let135 let78) → (Eq let48 let90) → (Eq let140 let78) → (Eq let141 True) → (Eq let142 True) → (Eq let143 let136) → let145 → (Eq let146 let137) → (Eq let145 let147) → (Eq let148 let139) → (Eq let153 let152) → (Eq let154 let57) → (Eq let155 let83) → (binrel% GE.ge x8x5fplus let1) → (binrel% GE.ge x8x5fminus let1) → (binrel% GE.ge x7x5fplus let1) → (binrel% GE.ge x7x5fminus let1) → (binrel% GE.ge x6x5fplus let1) → (binrel% GE.ge x6x5fminus let1) → (binrel% GE.ge x5x5fplus let1) → (binrel% GE.ge x5x5fminus let1) → (binrel% GE.ge x0x5fplus let1) → (binrel% GE.ge x0x5fminus let1) → (binrel% GE.ge x2x5fplus let1) → (binrel% GE.ge x2x5fminus let1) → (binrel% GE.ge x1x5fplus let1) → (binrel% GE.ge x1x5fminus let1) → (binrel% GE.ge x9x5fplus let1) → (binrel% GE.ge x9x5fminus let1) → (binrel% GE.ge x4x5fplus let1) → (binrel% GE.ge x4x5fminus let1) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let138 let113)))))))) let3) → let106 → let156 → let157 → let158 → let159 → let160 → let127 → let161 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x1x5fplus (binrel% HMul.hMul let3 x1x5fminus)))) let2) → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 x9x5fminus)
  let let5 := (binrel% HAdd.hAdd x9x5fplus let4)
  let let6 := (binrel% HMul.hMul let3 x2x5fminus)
  let let7 := (binrel% HMul.hMul let3 x8x5fminus)
  let let8 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 let5))))
  let let9 := (binrel% GE.ge let8 let1)
  let let10 := (Not let9)
  let let11 := (binrel% LT.lt let8 let1)
  let let12 := (Rat.ofInt 2)
  let let13 := (Neg.neg let12)
  let let14 := (binrel% LT.lt let13 let1)
  let let15 := (Rat.ofInt 1)
  let let16 := (binrel% GT.gt let15 let1)
  let let17 := (binrel% HMul.hMul let15 let1)
  let let18 := (binrel% HMul.hMul let13 let1)
  let let19 := (Rat.ofInt 3)
  let let20 := (binrel% HMul.hMul let19 let3)
  let let21 := (Neg.neg let15)
  let let22 := (binrel% HMul.hMul let21 let3)
  let let23 := (Neg.neg let19)
  let let24 := (binrel% HMul.hMul let23 let3)
  let let25 := (binrel% HMul.hMul let13 let2)
  let let26 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let18 let17))))))
  let let27 := (Int.ofNat 5)
  let let28 := (Neg.neg let27)
  let let29 := (binrel% HMul.hMul let28 x9x5fminus)
  let let30 := (binrel% HMul.hMul let27 x9x5fplus)
  let let31 := (Int.ofNat 2)
  let let32 := (binrel% HMul.hMul let31 x0x5fminus)
  let let33 := (Neg.neg let31)
  let let34 := (binrel% HMul.hMul let33 x0x5fplus)
  let let35 := (binrel% HMul.hMul let31 x5x5fminus)
  let let36 := (binrel% HMul.hMul let33 x5x5fplus)
  let let37 := (binrel% HMul.hMul let31 x7x5fminus)
  let let38 := (binrel% HMul.hMul let33 x7x5fplus)
  let let39 := (binrel% HMul.hMul let28 x8x5fminus)
  let let40 := (binrel% HMul.hMul let27 x8x5fplus)
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let30 let29)))))))))))
  let let42 := (binrel% HMul.hMul let15 let41)
  let let43 := (binrel% HMul.hMul let3 x4x5fminus)
  let let44 := (binrel% HMul.hMul let3 x0x5fplus)
  let let45 := (binrel% HMul.hMul let3 x6x5fminus)
  let let46 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x4x5fplus let43)))))))))
  let let47 := (binrel% HMul.hMul let13 let46)
  let let48 := (binrel% HMul.hMul let19 let8)
  let let49 := (binrel% HMul.hMul let33 x2x5fminus)
  let let50 := (binrel% HMul.hMul let31 x2x5fplus)
  let let51 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let49 let5))))))
  let let52 := (binrel% HMul.hMul let21 let51)
  let let53 := (binrel% HMul.hMul let3 x6x5fplus)
  let let54 := (binrel% HMul.hMul let3 x7x5fplus)
  let let55 := (binrel% HMul.hMul let33 x8x5fminus)
  let let56 := (binrel% HMul.hMul let31 x8x5fplus)
  let let57 := (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x6x5fminus let5))))))
  let let58 := (binrel% HMul.hMul let23 let57)
  let let59 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x4x5fplus) x4x5fminus)))
  let let60 := (binrel% HMul.hMul let13 let59)
  let let61 := (binrel% HMul.hMul let3 x7x5fminus)
  let let62 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let36 let35)))))
  let let63 := (binrel% HMul.hMul let21 let62)
  let let64 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd let47 let42))))))
  let let65 := (binrel% GE.ge let64 let26)
  let let66 := (Not let65)
  let let67 := (binrel% LT.lt let64 let26)
  let let68 := (binrel% HMul.hMul let3 x8x5fplus)
  let let69 := (Rat.ofInt (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x5x5fplus) (binrel% HMul.hMul let33 x5x5fminus)))))))
  let let70 := (binrel% HMul.hMul let31 x9x5fminus)
  let let71 := (binrel% HMul.hMul let33 x9x5fplus)
  let let72 := (Rat.ofInt (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x4x5fplus) (binrel% HMul.hMul let33 x4x5fminus)))))
  let let73 := (Int.ofNat 3)
  let let74 := (Neg.neg let73)
  let let75 := (Int.ofNat 6)
  let let76 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let75) x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x9x5fplus) (binrel% HMul.hMul let73 x9x5fminus)))))))))
  let let77 := (binrel% GT.gt let19 let1)
  let let78 := (Rat.ofInt 0)
  let let79 := (binrel% GT.gt let12 let1)
  let let80 := (binrel% HDiv.hDiv let2 let31)
  let let81 := (binrel% GT.gt let80 let1)
  let let82 := (binrel% GE.ge let41 let1)
  let let83 := (Not let82)
  let let84 := (Not let83)
  let let85 := (Eq let84 let82)
  let let86 := (Rat.ofInt let41)
  let let87 := (binrel% HMul.hMul let31 x2x5fminus)
  let let88 := (binrel% HMul.hMul let33 x2x5fplus)
  let let89 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x0x5fminus) (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x4x5fplus) (binrel% HMul.hMul let31 x4x5fminus)))))))))))
  let let90 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let73 x9x5fplus) (binrel% HMul.hMul let74 x9x5fminus)))))))
  let let91 := (Rat.ofInt (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x9x5fplus) x9x5fminus))))))))
  let let92 := (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let89 let86))))))
  let let93 := (binrel% HDiv.hDiv let27 let31)
  let let94 := (Neg.neg let93)
  let let95 := (binrel% LT.lt let94 let1)
  let let96 := (Eq let82 let82)
  let let97 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x1x5fplus) x1x5fminus)))))
  let let98 := (binrel% GE.ge let97 let2)
  let let99 := (Not let98)
  let let100 := (Not let99)
  let let101 := (Eq let98 let100)
  let let102 := (Eq let100 let98)
  let let103 := (binrel% HMul.hMul let80 let1)
  let let104 := (binrel% HMul.hMul let94 let1)
  let let105 := (Eq let98 let98)
  let let106 := (binrel% LE.le let97 let1)
  let let107 := (binrel% LT.lt let23 let1)
  let let108 := (binrel% HMul.hMul let31 x1x5fminus)
  let let109 := (binrel% HMul.hMul let33 x1x5fplus)
  let let110 := (binrel% HAdd.hAdd let109 let108)
  let let111 := (binrel% HMul.hMul let3 x5x5fplus)
  let let112 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x0x5fminus let110))))))
  let let113 := (binrel% HAdd.hAdd let44 x0x5fminus)
  let let114 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 let113))))))
  let let115 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let50 let49)))))))
  let let116 := (Eq let82 let84)
  let let117 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 let113))))))))
  let let118 := (binrel% HAdd.hAdd let78 let78)
  let let119 := (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let23 let118)))))
  let let120 := (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let34 let32)))))))))))
  let let121 := (binrel% GE.ge let112 let1)
  let let122 := (Not let121)
  let let123 := (binrel% LT.lt let112 let1)
  let let124 := (binrel% LE.le let41 let3)
  let let125 := (Not True)
  let let126 := (binrel% GE.ge let78 let78)
  let let127 := (binrel% GE.ge let62 let3)
  let let128 := (Not let127)
  let let129 := (binrel% LT.lt let62 let3)
  let let130 := (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let78 let118))
  let let131 := (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let93 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let93 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x9x5fplus) (binrel% HMul.hMul let93 x9x5fminus))))))
  let let132 := (binrel% HMul.hMul let94 let8)
  let let133 := (binrel% HMul.hMul let12 let1)
  let let134 := (binrel% LT.lt let97 let2)
  let let135 := (binrel% HMul.hMul let21 let1)
  let let136 := (binrel% HAdd.hAdd (binrel% HMul.hMul let93 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x8x5fminus) (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let80) x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let93 x9x5fplus) (binrel% HMul.hMul let94 x9x5fminus))))))))))))
  let let137 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x7x5fminus) (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let49 let110)))))
  let let138 := (binrel% HMul.hMul let3 x5x5fminus)
  let let139 := (Rat.ofInt (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x1x5fplus) (binrel% HMul.hMul let33 x1x5fminus)))))))))
  let let140 := (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let136 let131)))
  let let141 := (Eq let9 let9)
  let let142 := (binrel% LT.lt let21 let1)
  let let143 := (binrel% HMul.hMul let80 let41)
  let let144 := (Not let10)
  let let145 := (Eq let144 let9)
  let let146 := (binrel% HMul.hMul let12 let97)
  let let147 := (Eq let9 let144)
  let let148 := (binrel% HMul.hMul let21 let112)
  let let149 := (binrel% HAdd.hAdd let135 (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let103 let104)))
  let let150 := (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd let143 let132)))
  let let151 := (binrel% GE.ge let150 let149)
  let let152 := (Not let151)
  let let153 := (binrel% LT.lt let150 let149)
  let let154 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let53 x6x5fminus)))))))
  let let155 := (binrel% LT.lt let41 let1)
  let let156 := (binrel% LE.le let120 let3)
  let let157 := (binrel% GE.ge let117 let1)
  let let158 := (binrel% GE.ge let115 let3)
  let let159 := (binrel% GE.ge let114 let1)
  let let160 := (binrel% GE.ge let154 let3)
  let let161 := (binrel% GE.ge let59 let2)
  let let162 := (binrel% GE.ge let46 let1)
  let let163 := (binrel% GE.ge let51 let3)
  let let164 := (binrel% GE.ge let57 let3)
  let let165 := (Or let10 (Or let82 (Or let98 let122)))
  let let166 := (Or let10 (Or let84 (Or let100 let122)))
  let let167 := (Eq Or Or)
  let let168 := (Or let122 False)
  let let169 := (binrel% LE.le let132 let104)
  let let170 := (And let95 let9)
  let let171 := (binrel% LT.lt let143 let103)
  let let172 := (And let81 let155)
  let let173 := (Eq let83 let155)
  let let174 := (binrel% LE.le let146 let133)
  let let175 := (And let79 let106)
  let let176 := (binrel% LE.le let148 let135)
  let let177 := (And let142 let121)
  let let178 := (Not let161)
  let let179 := (Not let164)
  let let180 := (Not let163)
  let let181 := (Not let162)
  let let182 := (Or let180 (Or let179 (Or let178 let128)))
  let let183 := (Or let82 (Or let181 (Or let9 let182)))
  let let184 := (Or let84 (Or let181 (Or let144 let182)))
  let let185 := (Or let128 False)
  let let186 := (binrel% LT.lt let42 let17)
  let let187 := (And let16 let155)
  let let188 := (binrel% LE.le let47 let18)
  let let189 := (And let14 let162)
  let let190 := (binrel% LE.le let48 let20)
  let let191 := (binrel% LE.le let8 let3)
  let let192 := (And let77 let191)
  let let193 := (binrel% LE.le let52 let22)
  let let194 := (And let142 let163)
  let let195 := (binrel% LE.le let58 let24)
  let let196 := (And let107 let164)
  let let197 := (binrel% LE.le let60 let25)
  let let198 := (And let14 let161)
  let let199 := (binrel% LE.le let63 let22)
  let let200 := (And let142 let127)
fun lean_r0 : (Eq let11 let10) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let14 True) => -- EVALUATE
fun lean_r2 : (Eq let16 True) => -- EVALUATE
fun lean_r3 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let63 let69) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let60 let72) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let58 let76) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let77 True) => -- EVALUATE
fun lean_r8 : (Eq let17 let78) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let25 let13) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let79 True) => -- EVALUATE
fun lean_r11 : (Eq let81 True) => -- EVALUATE
fun lean_r12 : let85 => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let92 let78) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let95 True) => -- EVALUATE
fun lean_r15 : (Eq let96 True) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let47 let89) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let102 let101) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let20 let23) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let103 let78) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let42 let86) => -- THEORY_REWRITE_ARITH
fun lean_r21 : let102 => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let18 let78) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let104 let78) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let105 True) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let106 let99) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let107 True) => -- EVALUATE
fun lean_r27 : (Eq let52 let91) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let114 let112) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let115 let51) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let85 let116) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let117 let46) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let119 let78) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let120 let41) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let123 let122) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let124 let83) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let125 False) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let126 True) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let129 let128) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let130 let78) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let132 let131) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let22 let15) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let133 let78) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let24 let19) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let134 let99) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let135 let78) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let48 let90) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let140 let78) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let141 True) => -- THEORY_REWRITE_BOOL
fun lean_r49 : (Eq let142 True) => -- EVALUATE
fun lean_r50 : (Eq let143 let136) => -- THEORY_REWRITE_ARITH
fun lean_r51 : let145 => -- THEORY_REWRITE_BOOL
fun lean_r52 : (Eq let146 let137) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let145 let147) => -- THEORY_REWRITE_BOOL
fun lean_r54 : (Eq let148 let139) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let153 let152) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let154 let57) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let155 let83) => -- THEORY_REWRITE_ARITH
fun lean_a58 : (binrel% GE.ge x8x5fplus let1) =>
fun lean_a59 : (binrel% GE.ge x8x5fminus let1) =>
fun lean_a60 : (binrel% GE.ge x7x5fplus let1) =>
fun lean_a61 : (binrel% GE.ge x7x5fminus let1) =>
fun lean_a62 : (binrel% GE.ge x6x5fplus let1) =>
fun lean_a63 : (binrel% GE.ge x6x5fminus let1) =>
fun lean_a64 : (binrel% GE.ge x5x5fplus let1) =>
fun lean_a65 : (binrel% GE.ge x5x5fminus let1) =>
fun lean_a66 : (binrel% GE.ge x0x5fplus let1) =>
fun lean_a67 : (binrel% GE.ge x0x5fminus let1) =>
fun lean_a68 : (binrel% GE.ge x2x5fplus let1) =>
fun lean_a69 : (binrel% GE.ge x2x5fminus let1) =>
fun lean_a70 : (binrel% GE.ge x1x5fplus let1) =>
fun lean_a71 : (binrel% GE.ge x1x5fminus let1) =>
fun lean_a72 : (binrel% GE.ge x9x5fplus let1) =>
fun lean_a73 : (binrel% GE.ge x9x5fminus let1) =>
fun lean_a74 : (binrel% GE.ge x4x5fplus let1) =>
fun lean_a75 : (binrel% GE.ge x4x5fminus let1) =>
fun lean_a76 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let138 let113)))))))) let3) =>
fun lean_a77 : let106 =>
fun lean_a78 : let156 =>
fun lean_a79 : let157 =>
fun lean_a80 : let158 =>
fun lean_a81 : let159 =>
fun lean_a82 : let160 =>
fun lean_a83 : let127 =>
fun lean_a84 : let161 =>
fun lean_a85 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x1x5fplus (binrel% HMul.hMul let3 x1x5fminus)))) let2) => by
have lean_s0 : (Or let84 (Or let181 (Or let144 (Or let180 (Or let179 (Or let178 let185)))))) :=
  (scope (fun lean_a86 : let83 =>
    (scope (fun lean_a87 : let162 =>
      (scope (fun lean_a88 : let10 =>
        (scope (fun lean_a89 : let163 =>
          (scope (fun lean_a90 : let164 =>
            (scope (fun lean_a91 : let161 =>
              (scope (fun lean_a92 : let127 =>
                have lean_s0 : let185 :=
                  (scope (fun lean_a91 : let127 =>
                    have lean_s0 : let142 := by timed trueElim lean_r49
                    have lean_s1 : let200 := by timed And.intro lean_s0 lean_a91
                    have lean_s2 : (Implies let200 let199) := by arithMulNeg [let62, let3, let21], 3
                    have lean_s3 : let199 := by timed modusPonens lean_s1 lean_s2
                    have lean_s4 : let14 := by timed trueElim lean_r1
                    have lean_s5 : let198 := by timed And.intro lean_s4 lean_a91
                    have lean_s6 : (Implies let198 let197) := by arithMulNeg [let59, let2, let13], 3
                    have lean_s7 : let197 := by timed modusPonens lean_s5 lean_s6
                    have lean_s8 : let107 := by timed trueElim lean_r26
                    let lean_s9 := by timed flipCongrArg lean_r56 [GE.ge]
                    have lean_s10 : (Eq let3 let3) := by timed rfl
                    have lean_s11 : (Eq let160 let164) := by timed congr lean_s9 lean_s10
                    have lean_s12 : let164 := by timed eqResolve lean_a82 lean_s11
                    have lean_s13 : let196 := by timed And.intro lean_s8 lean_s12
                    have lean_s14 : (Implies let196 let195) := by arithMulNeg [let57, let3, let23], 3
                    have lean_s15 : let195 := by timed modusPonens lean_s13 lean_s14
                    let lean_s16 := by timed flipCongrArg lean_r29 [GE.ge]
                    have lean_s17 : (Eq let158 let163) := by timed congr lean_s16 lean_s10
                    have lean_s18 : let163 := by timed eqResolve lean_a80 lean_s17
                    have lean_s19 : let194 := by timed And.intro lean_s0 lean_s18
                    have lean_s20 : (Implies let194 let193) := by arithMulNeg [let51, let3, let21], 3
                    have lean_s21 : let193 := by timed modusPonens lean_s19 lean_s20
                    have lean_s22 : let77 := by timed trueElim lean_r7
                    have lean_s23 : (Eq let10 let11) := by timed Eq.symm lean_r0
                    have lean_s24 : let11 := by timed eqResolve lean_a88 lean_s23
                    have lean_s25 : let191 := by intTightUb lean_s24
                    have lean_s26 : let192 := by timed And.intro lean_s22 lean_s25
                    have lean_s27 : (Implies let192 let190) := by arithMulPos [let8, let3, let19], 1
                    have lean_s28 : let190 := by timed modusPonens lean_s26 lean_s27
                    let lean_s29 := by timed flipCongrArg lean_r31 [GE.ge]
                    have lean_s30 : (Eq let1 let1) := by timed rfl
                    have lean_s31 : (Eq let157 let162) := by timed congr lean_s29 lean_s30
                    have lean_s32 : let162 := by timed eqResolve lean_a79 lean_s31
                    have lean_s33 : let189 := by timed And.intro lean_s4 lean_s32
                    have lean_s34 : (Implies let189 let188) := by arithMulNeg [let46, let1, let13], 3
                    have lean_s35 : let188 := by timed modusPonens lean_s33 lean_s34
                    have lean_s36 : let16 := by timed trueElim lean_r2
                    let lean_s37 := by timed flipCongrArg lean_r33 [LE.le]
                    have lean_s38 : (Eq let156 let124) := by timed congr lean_s37 lean_s10
                    have lean_s39 : (Eq let156 let83) := by timed Eq.trans lean_s38 lean_r35
                    have lean_s40 : let83 := by timed eqResolve lean_a78 lean_s39
                    have lean_s41 : let173 := by timed Eq.symm lean_r57
                    have lean_s42 : let155 := by timed eqResolve lean_s40 lean_s41
                    have lean_s43 : let187 := by timed And.intro lean_s36 lean_s42
                    have lean_s44 : (Implies let187 let186) := by arithMulPos [let41, let1, let15], 0
                    have lean_s45 : let186 := by timed modusPonens lean_s43 lean_s44
                    have lean_s46 : let67 := by sumBounds [lean_s3, lean_s7, lean_s15, lean_s21, lean_s28, lean_s35, lean_s45]
                    let lean_s47 := by timed congrHAdd lean_r16 lean_r20
                    let lean_s48 := by timed congrHAdd lean_r46 lean_s47
                    let lean_s49 := by timed congrHAdd lean_r27 lean_s48
                    let lean_s50 := by timed congrHAdd lean_r6 lean_s49
                    let lean_s51 := by timed congrHAdd lean_r5 lean_s50
                    have lean_s52 : (Eq let64 let92) := by timed congrHAdd lean_r4 lean_s51
                    have lean_s53 : (Eq let64 let78) := by timed Eq.trans lean_s52 lean_r13
                    let lean_s54 := by timed flipCongrArg lean_s53 [GE.ge]
                    let lean_s55 := by timed congrHAdd lean_r22 lean_r8
                    let lean_s56 := by timed congrHAdd lean_r18 lean_s55
                    let lean_s57 := by timed congrHAdd lean_r41 lean_s56
                    let lean_s58 := by timed congrHAdd lean_r43 lean_s57
                    let lean_s59 := by timed congrHAdd lean_r9 lean_s58
                    have lean_s60 : (Eq let26 let119) := by timed congrHAdd lean_r41 lean_s59
                    have lean_s61 : (Eq let26 let78) := by timed Eq.trans lean_s60 lean_r32
                    have lean_s62 : (Eq let65 let126) := by timed congr lean_s54 lean_s61
                    have lean_s63 : (Eq let65 True) := by timed Eq.trans lean_s62 lean_r37
                    have lean_s64 : (Eq let66 let125) := by timed flipCongrArg lean_s63 [Not]
                    have lean_s65 : (Eq let66 False) := by timed Eq.trans lean_s64 lean_r36
                    have lean_s66 : (Eq let67 False) := by timed Eq.trans lean_r3 lean_s65
                    show False from by timed eqResolve lean_s46 lean_s66
                  ))
                have lean_s1 : let128 := by liftOrNToNeg lean_s0
                have lean_s2 : (Eq let128 let129) := by timed Eq.symm lean_r38
                have lean_s3 : let129 := by timed eqResolve lean_s1 lean_s2
                have lean_s4 : let128 := by timed eqResolve lean_s3 lean_r38
                show False from by timed contradiction lean_a92 lean_s4
  ))))))))))))))
have lean_s1 : (Not (And let83 (And let162 (And let10 (And let163 (And let164 (And let161 let127))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let184 := by timed flipNotAnd lean_s1 [let83, let162, let10, let163, let164, let161, let127]
have lean_s3 : let167 := by timed rfl
have lean_s4 : let96 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let116 let96) := by timed congr lean_s5 lean_r12
have lean_s7 : (Eq let116 True) := by timed Eq.trans lean_s6 lean_r15
have lean_s8 : (Eq let85 True) := by timed Eq.trans lean_r30 lean_s7
have lean_s9 : let85 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq let181 let181) := by timed rfl
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let141 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let147 let141) := by timed congr lean_s14 lean_r51
have lean_s16 : (Eq let147 True) := by timed Eq.trans lean_s15 lean_r48
have lean_s17 : (Eq let145 True) := by timed Eq.trans lean_r53 lean_s16
have lean_s18 : let145 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s3 lean_s18
have lean_s20 : (Eq let180 let180) := by timed rfl
let lean_s21 := by timed congr lean_s3 lean_s20
have lean_s22 : (Eq let179 let179) := by timed rfl
let lean_s23 := by timed congr lean_s3 lean_s22
have lean_s24 : (Eq let178 let178) := by timed rfl
let lean_s25 := by timed congr lean_s3 lean_s24
have lean_s26 : (Eq let128 let128) := by timed rfl
let lean_s27 := by timed congr lean_s25 lean_s26
let lean_s28 := by timed congr lean_s23 lean_s27
let lean_s29 := by timed congr lean_s21 lean_s28
let lean_s30 := by timed congr lean_s19 lean_s29
let lean_s31 := by timed congr lean_s12 lean_s30
have lean_s32 : (Eq let184 let183) := by timed congr lean_s10 lean_s31
have lean_s33 : let183 := by timed eqResolve lean_s2 lean_s32
have lean_s34 : (Or let82 (Or let181 (Or let180 (Or let179 (Or let128 (Or let178 let9)))))) := by permutateOr lean_s33, [0, 1, 3, 4, 6, 5, 2], (- 1)
have lean_s35 : (Or let10 (Or let84 (Or let100 let168))) :=
  (scope (fun lean_a91 : let9 =>
    (scope (fun lean_a92 : let83 =>
      (scope (fun lean_a93 : let99 =>
        (scope (fun lean_a94 : let121 =>
          let lean_s35 := by timed flipCongrArg lean_r28 [GE.ge]
          have lean_s36 : (Eq let1 let1) := by timed rfl
          have lean_s37 : (Eq let159 let121) := by timed congr lean_s35 lean_s36
          have lean_s38 : let121 := by timed eqResolve lean_a81 lean_s37
          have lean_s39 : let168 :=
            (scope (fun lean_a94 : let121 =>
              have lean_s39 : let142 := by timed trueElim lean_r49
              have lean_s40 : let121 := by timed eqResolve lean_a81 lean_s37
              have lean_s41 : let177 := by timed And.intro lean_s39 lean_s40
              have lean_s42 : (Implies let177 let176) := by arithMulNeg [let112, let1, let21], 3
              have lean_s43 : let176 := by timed modusPonens lean_s41 lean_s42
              have lean_s44 : let79 := by timed trueElim lean_r10
              have lean_s45 : let99 := by timed eqResolve lean_a77 lean_r25
              have lean_s46 : (Eq let99 let134) := by timed Eq.symm lean_r44
              have lean_s47 : let134 := by timed eqResolve lean_s45 lean_s46
              have lean_s48 : let106 := by intTightUb lean_s47
              have lean_s49 : let175 := by timed And.intro lean_s44 lean_s48
              have lean_s50 : (Implies let175 let174) := by arithMulPos [let97, let1, let12], 1
              have lean_s51 : let174 := by timed modusPonens lean_s49 lean_s50
              have lean_s52 : let81 := by timed trueElim lean_r11
              let lean_s53 := by timed flipCongrArg lean_r33 [LE.le]
              have lean_s54 : (Eq let3 let3) := by timed rfl
              have lean_s55 : (Eq let156 let124) := by timed congr lean_s53 lean_s54
              have lean_s56 : (Eq let156 let83) := by timed Eq.trans lean_s55 lean_r35
              have lean_s57 : let83 := by timed eqResolve lean_a78 lean_s56
              have lean_s58 : let173 := by timed Eq.symm lean_r57
              have lean_s59 : let155 := by timed eqResolve lean_s57 lean_s58
              have lean_s60 : let172 := by timed And.intro lean_s52 lean_s59
              have lean_s61 : (Implies let172 let171) := by arithMulPos [let41, let1, let80], 0
              have lean_s62 : let171 := by timed modusPonens lean_s60 lean_s61
              have lean_s63 : let95 := by timed trueElim lean_r14
              have lean_s64 : let170 := by timed And.intro lean_s63 lean_a91
              have lean_s65 : (Implies let170 let169) := by arithMulNeg [let8, let1, let94], 3
              have lean_s66 : let169 := by timed modusPonens lean_s64 lean_s65
              have lean_s67 : let153 := by sumBounds [lean_s43, lean_s51, lean_s62, lean_s66]
              let lean_s68 := by timed congrHAdd lean_r50 lean_r40
              let lean_s69 := by timed congrHAdd lean_r52 lean_s68
              have lean_s70 : (Eq let150 let140) := by timed congrHAdd lean_r54 lean_s69
              have lean_s71 : (Eq let150 let78) := by timed Eq.trans lean_s70 lean_r47
              let lean_s72 := by timed flipCongrArg lean_s71 [GE.ge]
              let lean_s73 := by timed congrHAdd lean_r19 lean_r23
              let lean_s74 := by timed congrHAdd lean_r42 lean_s73
              have lean_s75 : (Eq let149 let130) := by timed congrHAdd lean_r45 lean_s74
              have lean_s76 : (Eq let149 let78) := by timed Eq.trans lean_s75 lean_r39
              have lean_s77 : (Eq let151 let126) := by timed congr lean_s72 lean_s76
              have lean_s78 : (Eq let151 True) := by timed Eq.trans lean_s77 lean_r37
              have lean_s79 : (Eq let152 let125) := by timed flipCongrArg lean_s78 [Not]
              have lean_s80 : (Eq let152 False) := by timed Eq.trans lean_s79 lean_r36
              have lean_s81 : (Eq let153 False) := by timed Eq.trans lean_r55 lean_s80
              show False from by timed eqResolve lean_s67 lean_s81
            ))
          have lean_s40 : let122 := by liftOrNToNeg lean_s39
          have lean_s41 : (Eq let122 let123) := by timed Eq.symm lean_r34
          have lean_s42 : let123 := by timed eqResolve lean_s40 lean_s41
          have lean_s43 : let122 := by timed eqResolve lean_s42 lean_r34
          show False from by timed contradiction lean_s38 lean_s43
  ))))))))
have lean_s36 : (Not (And let9 (And let83 (And let99 let121)))) := by liftOrNToNeg lean_s35
have lean_s37 : let166 := by timed flipNotAnd lean_s36 [let9, let83, let99, let121]
have lean_s38 : let167 := by timed rfl
have lean_s39 : (Eq let10 let10) := by timed rfl
let lean_s40 := by timed congr lean_s38 lean_s39
let lean_s41 := by timed congr lean_s38 lean_s9
have lean_s42 : let105 := by timed rfl
let lean_s43 := by timed flipCongrArg lean_s42 [Eq]
have lean_s44 : (Eq let101 let105) := by timed congr lean_s43 lean_r21
have lean_s45 : (Eq let101 True) := by timed Eq.trans lean_s44 lean_r24
have lean_s46 : (Eq let102 True) := by timed Eq.trans lean_r17 lean_s45
have lean_s47 : let102 := by timed trueElim lean_s46
let lean_s48 := by timed congr lean_s38 lean_s47
have lean_s49 : (Eq let122 let122) := by timed rfl
let lean_s50 := by timed congr lean_s48 lean_s49
let lean_s51 := by timed congr lean_s41 lean_s50
have lean_s52 : (Eq let166 let165) := by timed congr lean_s40 lean_s51
have lean_s53 : let165 := by timed eqResolve lean_s37 lean_s52
have lean_s54 : (Or let98 (Or let82 (Or let122 let10))) := by permutateOr lean_s53, [2, 1, 3, 0], (- 1)
have lean_s55 : let99 := by timed eqResolve lean_a77 lean_r25
let lean_s56 := by R1 lean_s54, lean_s55, let98, [(- 1), 0]
let lean_s57 := by timed flipCongrArg lean_r33 [LE.le]
have lean_s58 : (Eq let3 let3) := by timed rfl
have lean_s59 : (Eq let156 let124) := by timed congr lean_s57 lean_s58
have lean_s60 : (Eq let156 let83) := by timed Eq.trans lean_s59 lean_r35
have lean_s61 : let83 := by timed eqResolve lean_a78 lean_s60
let lean_s62 := by R1 lean_s56, lean_s61, let82, [(- 1), 0]
let lean_s63 := by timed flipCongrArg lean_r28 [GE.ge]
have lean_s64 : (Eq let1 let1) := by timed rfl
have lean_s65 : (Eq let159 let121) := by timed congr lean_s63 lean_s64
have lean_s66 : let121 := by timed eqResolve lean_a81 lean_s65
have lean_s67 : let10 := by R2 lean_s62, lean_s66, let121, [(- 1), 0]
let lean_s68 := by R1 lean_s34, lean_s67, let9, [(- 1), 0]
let lean_s69 := by R2 lean_s68, lean_a84, let161, [(- 1), 0]
let lean_s70 := by R2 lean_s69, lean_a83, let127, [(- 1), 0]
let lean_s71 := by timed flipCongrArg lean_r56 [GE.ge]
have lean_s72 : (Eq let160 let164) := by timed congr lean_s71 lean_s58
have lean_s73 : let164 := by timed eqResolve lean_a82 lean_s72
let lean_s74 := by R2 lean_s70, lean_s73, let164, [(- 1), 0]
let lean_s75 := by timed flipCongrArg lean_r29 [GE.ge]
have lean_s76 : (Eq let158 let163) := by timed congr lean_s75 lean_s58
have lean_s77 : let163 := by timed eqResolve lean_a80 lean_s76
let lean_s78 := by R2 lean_s74, lean_s77, let163, [(- 1), 0]
let lean_s79 := by timed flipCongrArg lean_r31 [GE.ge]
have lean_s80 : (Eq let157 let162) := by timed congr lean_s79 lean_s64
have lean_s81 : let162 := by timed eqResolve lean_a79 lean_s80
let lean_s82 := by R2 lean_s78, lean_s81, let162, [(- 1), 0]
exact (show False from by R1 lean_s82, lean_s61, let82, [0, 0])


