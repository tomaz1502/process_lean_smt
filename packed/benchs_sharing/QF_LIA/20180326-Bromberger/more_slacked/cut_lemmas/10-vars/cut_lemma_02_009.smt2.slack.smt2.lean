open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x3x5fplus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x6x5fplus : Int}
variable {x6x5fminus : Int}
variable {x7x5fplus : Int}
variable {x7x5fminus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x1x5fplus : Int}
variable {x2x5fplus : Int}
variable {x7x5fminus : Int}
variable {x9x5fplus : Int}
variable {x9x5fminus : Int}
variable {x4x5fminus : Int}
variable {x2x5fminus : Int}
variable {x6x5fminus : Int}
variable {x8x5fplus : Int}
variable {x4x5fplus : Int}
variable {x5x5fplus : Int}
variable {x4x5fminus : Int}
variable {x8x5fplus : Int}
variable {x3x5fminus : Int}
variable {x8x5fminus : Int}
variable {x1x5fplus : Int}
variable {x7x5fplus : Int}
variable {x1x5fminus : Int}
variable {x4x5fplus : Int}
variable {x6x5fplus : Int}
variable {x0x5fminus : Int}
variable {x1x5fminus : Int}
variable {x0x5fplus : Int}
variable {x2x5fminus : Int}
variable {x9x5fminus : Int}
variable {x2x5fplus : Int}
variable {x3x5fminus : Int}
variable {x9x5fplus : Int}
variable {x3x5fplus : Int}
variable {x8x5fminus : Int}
variable {x5x5fminus : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 2)
  let let5 := (Int.ofNat 1)
  let let6 := (binrel% HDiv.hDiv let5 let4)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% LT.lt let7 let1)
  let let9 := (Int.ofNat 3)
  let let10 := (binrel% HDiv.hDiv let9 let4)
  let let11 := (Neg.neg let10)
  let let12 := (binrel% LT.lt let11 let1)
  let let13 := (Rat.ofInt 2)
  let let14 := (binrel% GT.gt let13 let1)
  let let15 := (Neg.neg let5)
  let let16 := (binrel% HMul.hMul let15 x1x5fplus)
  let let17 := (binrel% HMul.hMul let15 x2x5fminus)
  let let18 := (binrel% HMul.hMul let15 x7x5fminus)
  let let19 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 x1x5fminus)))))
  let let20 := (binrel% GE.ge let19 let5)
  let let21 := (Not let20)
  let let22 := (Not let21)
  let let23 := (Eq let20 let22)
  let let24 := (Eq let22 let20)
  let let25 := (binrel% LT.lt let19 let5)
  let let26 := (binrel% HMul.hMul let4 x1x5fminus)
  let let27 := (Neg.neg let4)
  let let28 := (binrel% HMul.hMul let27 x1x5fplus)
  let let29 := (binrel% HMul.hMul let15 x0x5fplus)
  let let30 := (binrel% HMul.hMul let15 x5x5fplus)
  let let31 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd let28 let26)))))))
  let let32 := (binrel% HAdd.hAdd let29 x0x5fminus)
  let let33 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let26 let32))))))
  let let34 := (binrel% HMul.hMul let27 x9x5fminus)
  let let35 := (binrel% HMul.hMul let4 x9x5fplus)
  let let36 := (binrel% HMul.hMul let4 x5x5fminus)
  let let37 := (binrel% HMul.hMul let27 x5x5fplus)
  let let38 := (Neg.neg let9)
  let let39 := (binrel% HMul.hMul let38 x8x5fminus)
  let let40 := (binrel% HMul.hMul let9 x8x5fplus)
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd let35 let34)))))))))))
  let let42 := (binrel% GE.ge let41 let15)
  let let43 := (Not let42)
  let let44 := (binrel% LT.lt let41 let15)
  let let45 := (binrel% HMul.hMul let15 x9x5fminus)
  let let46 := (binrel% HAdd.hAdd x9x5fplus let45)
  let let47 := (binrel% HMul.hMul let15 x6x5fplus)
  let let48 := (binrel% HMul.hMul let15 x7x5fplus)
  let let49 := (binrel% HMul.hMul let27 x8x5fminus)
  let let50 := (binrel% HMul.hMul let4 x8x5fplus)
  let let51 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x6x5fminus let46))))))
  let let52 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let47 x6x5fminus)))))))
  let let53 := (binrel% HMul.hMul let15 x4x5fminus)
  let let54 := (binrel% HMul.hMul let15 x6x5fminus)
  let let55 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x4x5fplus let53)))))))))
  let let56 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let17 let32))))))))
  let let57 := (Neg.neg (Rat.ofInt 4))
  let let58 := (binrel% HMul.hMul let13 let27)
  let let59 := (Eq let42 let42)
  let let60 := (binrel% HMul.hMul let7 let5)
  let let61 := (binrel% HMul.hMul let27 x2x5fminus)
  let let62 := (binrel% HMul.hMul let4 x2x5fplus)
  let let63 := (binrel% HMul.hMul let15 x8x5fminus)
  let let64 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let61 let46))))))
  let let65 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let62 let61)))))))
  let let66 := (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd x1x5fminus let32))))))))))
  let let67 := (Int.ofNat 4)
  let let68 := (Int.ofNat 5)
  let let69 := (binrel% HDiv.hDiv let68 let67)
  let let70 := (Neg.neg let69)
  let let71 := (binrel% HDiv.hDiv let68 let4)
  let let72 := (Neg.neg let71)
  let let73 := (binrel% HMul.hMul let69 x8x5fminus)
  let let74 := (binrel% HMul.hMul let70 x8x5fplus)
  let let75 := (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let71 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x9x5fplus) (binrel% HMul.hMul let69 x9x5fminus))))))))
  let let76 := (binrel% HMul.hMul let70 let64)
  let let77 := (binrel% HMul.hMul let70 let15)
  let let78 := (binrel% LE.le let41 let27)
  let let79 := (Neg.neg let67)
  let let80 := (Int.ofNat 6)
  let let81 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let80) x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let67 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x0x5fminus) (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd (binrel% HMul.hMul let67 x9x5fplus) (binrel% HMul.hMul let79 x9x5fminus)))))))))))))
  let let82 := (binrel% HMul.hMul let13 let41)
  let let83 := (binrel% LE.le let19 let1)
  let let84 := (Not let83)
  let let85 := (binrel% GT.gt let19 let1)
  let let86 := (Eq let85 let84)
  let let87 := (binrel% LT.lt let70 let1)
  let let88 := (Rat.ofInt 0)
  let let89 := (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let71 x5x5fplus) (binrel% HMul.hMul let72 x5x5fminus))))))
  let let90 := (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x1x5fplus) (binrel% HMul.hMul let38 x1x5fminus))))))))
  let let91 := (binrel% HMul.hMul let6 x9x5fminus)
  let let92 := (binrel% HMul.hMul let7 x9x5fplus)
  let let93 := (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x2x5fminus) (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x4x5fplus) (binrel% HMul.hMul let6 x4x5fminus))))))))))
  let let94 := (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x4x5fplus) (binrel% HMul.hMul let7 x4x5fminus))))
  let let95 := (Int.ofNat 7)
  let let96 := (binrel% HDiv.hDiv let95 let67)
  let let97 := (Neg.neg let96)
  let let98 := (binrel% HDiv.hDiv let95 let4)
  let let99 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let98) x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let97 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let97 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let97 x9x5fplus) (binrel% HMul.hMul let96 x9x5fminus))))))))
  let let100 := (Rat.ofInt let19)
  let let101 := (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let99 (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let94 (binrel% HAdd.hAdd let93 (binrel% HAdd.hAdd let90 let89)))))))
  let let102 := (binrel% LT.lt let97 let1)
  let let103 := (Neg.neg (binrel% HDiv.hDiv let5 let67))
  let let104 := (binrel% LE.le let88 let103)
  let let105 := (Not let43)
  let let106 := (Eq let105 let42)
  let let107 := (binrel% HMul.hMul let97 let15)
  let let108 := (Eq let20 let20)
  let let109 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let37 let36)))))
  let let110 := (binrel% HMul.hMul let70 let109)
  let let111 := (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let88 let69)))))))
  let let112 := (binrel% HMul.hMul let97 let51)
  let let113 := (binrel% HMul.hMul let11 let1)
  let let114 := (binrel% HMul.hMul let2 let19)
  let let115 := (binrel% HMul.hMul let7 let1)
  let let116 := (Eq let42 let105)
  let let117 := (binrel% HMul.hMul let2 let1)
  let let118 := (binrel% HMul.hMul let11 let31)
  let let119 := (binrel% HMul.hMul let7 let55)
  let let120 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x4x5fplus) x4x5fminus)))
  let let121 := (binrel% HMul.hMul let7 let120)
  let let122 := (binrel% HMul.hMul let15 x5x5fminus)
  let let123 := (binrel% LE.le let66 let27)
  let let124 := (binrel% GE.ge let56 let1)
  let let125 := (binrel% GE.ge let65 let15)
  let let126 := (binrel% GE.ge let33 let1)
  let let127 := (binrel% GE.ge let52 let15)
  let let128 := (binrel% GE.ge let109 let15)
  let let129 := (binrel% GE.ge let120 let5)
  let let130 := (binrel% GE.ge let55 let1)
  let let131 := (binrel% GE.ge let64 let15)
  let let132 := (binrel% GE.ge let31 let1)
  let let133 := (binrel% GE.ge let51 let15)
  let let134 := (Not let129)
  let let135 := (Not let128)
  let let136 := (Not let133)
  let let137 := (Not let132)
  let let138 := (Not let131)
  let let139 := (Not let130)
  let let140 := (Or let135 (Or let137 (Or let139 (Or let134 (Or let42 (Or let138 (Or let136 let20)))))))
  let let141 := (Or let135 (Or let137 (Or let139 (Or let134 (Or let105 (Or let138 (Or let136 let22)))))))
  let let142 := (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let113 let77)))))))
  let let143 := (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let121 (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let118 let110)))))))
  let let144 := (binrel% LE.le let143 let142)
  let let145 := (binrel% LE.le let110 let77)
  let let146 := (And let87 let128)
  let let147 := (binrel% LE.le let118 let113)
  let let148 := (And let12 let132)
  let let149 := (binrel% LE.le let119 let115)
  let let150 := (And let8 let130)
  let let151 := (binrel% LE.le let121 let60)
  let let152 := (And let8 let129)
  let let153 := (binrel% LE.le let82 let58)
  let let154 := (And let14 let78)
  let let155 := (binrel% LE.le let76 let77)
  let let156 := (And let87 let131)
  let let157 := (binrel% LE.le let112 let107)
  let let158 := (And let102 let133)
  let let159 := (binrel% LE.le let114 let117)
  let let160 := (And let3 let83)
(Eq let3 True) → (Eq let8 True) → (Eq let12 True) → (Eq let14 True) → (Eq let24 let23) → (Eq let25 let21) → (Eq let33 let31) → (Eq let44 let43) → let24 → (Eq let52 let51) → (Eq let56 let55) → (Eq let58 let57) → (Eq let59 True) → (Eq let60 let7) → (Eq let65 let64) → (Eq let66 let41) → (Eq let76 let75) → (Eq let77 let69) → (Eq let78 let43) → (Eq let82 let81) → let86 → (Eq let87 True) → (Eq let101 let88) → (Eq let102 True) → (Eq let104 False) → let106 → (Eq let107 let96) → (Eq let108 True) → (Eq let83 let21) → (Eq let110 let89) → (Eq let111 let103) → (Eq let112 let99) → (Eq let113 let88) → (Eq let114 let100) → (Eq let115 let88) → (Eq let106 let116) → (Eq let117 let88) → (Eq let118 let90) → (Eq let119 let93) → (Eq let121 let94) → (binrel% GE.ge x8x5fplus let1) → (binrel% GE.ge x8x5fminus let1) → (binrel% GE.ge x7x5fplus let1) → (binrel% GE.ge x7x5fminus let1) → (binrel% GE.ge x6x5fplus let1) → (binrel% GE.ge x6x5fminus let1) → (binrel% GE.ge x5x5fplus let1) → (binrel% GE.ge x5x5fminus let1) → (binrel% GE.ge x0x5fplus let1) → (binrel% GE.ge x0x5fminus let1) → (binrel% GE.ge x3x5fplus let1) → (binrel% GE.ge x3x5fminus let1) → (binrel% GE.ge x2x5fplus let1) → (binrel% GE.ge x2x5fminus let1) → (binrel% GE.ge x1x5fplus let1) → (binrel% GE.ge x1x5fminus let1) → (binrel% GE.ge x9x5fplus let1) → (binrel% GE.ge x9x5fminus let1) → (binrel% GE.ge x4x5fplus let1) → (binrel% GE.ge x4x5fminus let1) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let122 let32)))))))) let15) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let122 (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x3x5fplus) (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x2x5fplus) x2x5fminus))))))) let1) → let83 → let123 → let124 → let125 → let126 → let127 → let128 → let129 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x1x5fplus (binrel% HMul.hMul let15 x1x5fminus)))) let5) → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 2)
  let let5 := (Int.ofNat 1)
  let let6 := (binrel% HDiv.hDiv let5 let4)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% LT.lt let7 let1)
  let let9 := (Int.ofNat 3)
  let let10 := (binrel% HDiv.hDiv let9 let4)
  let let11 := (Neg.neg let10)
  let let12 := (binrel% LT.lt let11 let1)
  let let13 := (Rat.ofInt 2)
  let let14 := (binrel% GT.gt let13 let1)
  let let15 := (Neg.neg let5)
  let let16 := (binrel% HMul.hMul let15 x1x5fplus)
  let let17 := (binrel% HMul.hMul let15 x2x5fminus)
  let let18 := (binrel% HMul.hMul let15 x7x5fminus)
  let let19 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 x1x5fminus)))))
  let let20 := (binrel% GE.ge let19 let5)
  let let21 := (Not let20)
  let let22 := (Not let21)
  let let23 := (Eq let20 let22)
  let let24 := (Eq let22 let20)
  let let25 := (binrel% LT.lt let19 let5)
  let let26 := (binrel% HMul.hMul let4 x1x5fminus)
  let let27 := (Neg.neg let4)
  let let28 := (binrel% HMul.hMul let27 x1x5fplus)
  let let29 := (binrel% HMul.hMul let15 x0x5fplus)
  let let30 := (binrel% HMul.hMul let15 x5x5fplus)
  let let31 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd let28 let26)))))))
  let let32 := (binrel% HAdd.hAdd let29 x0x5fminus)
  let let33 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let26 let32))))))
  let let34 := (binrel% HMul.hMul let27 x9x5fminus)
  let let35 := (binrel% HMul.hMul let4 x9x5fplus)
  let let36 := (binrel% HMul.hMul let4 x5x5fminus)
  let let37 := (binrel% HMul.hMul let27 x5x5fplus)
  let let38 := (Neg.neg let9)
  let let39 := (binrel% HMul.hMul let38 x8x5fminus)
  let let40 := (binrel% HMul.hMul let9 x8x5fplus)
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd let35 let34)))))))))))
  let let42 := (binrel% GE.ge let41 let15)
  let let43 := (Not let42)
  let let44 := (binrel% LT.lt let41 let15)
  let let45 := (binrel% HMul.hMul let15 x9x5fminus)
  let let46 := (binrel% HAdd.hAdd x9x5fplus let45)
  let let47 := (binrel% HMul.hMul let15 x6x5fplus)
  let let48 := (binrel% HMul.hMul let15 x7x5fplus)
  let let49 := (binrel% HMul.hMul let27 x8x5fminus)
  let let50 := (binrel% HMul.hMul let4 x8x5fplus)
  let let51 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x6x5fminus let46))))))
  let let52 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let47 x6x5fminus)))))))
  let let53 := (binrel% HMul.hMul let15 x4x5fminus)
  let let54 := (binrel% HMul.hMul let15 x6x5fminus)
  let let55 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x4x5fplus let53)))))))))
  let let56 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let17 let32))))))))
  let let57 := (Neg.neg (Rat.ofInt 4))
  let let58 := (binrel% HMul.hMul let13 let27)
  let let59 := (Eq let42 let42)
  let let60 := (binrel% HMul.hMul let7 let5)
  let let61 := (binrel% HMul.hMul let27 x2x5fminus)
  let let62 := (binrel% HMul.hMul let4 x2x5fplus)
  let let63 := (binrel% HMul.hMul let15 x8x5fminus)
  let let64 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let61 let46))))))
  let let65 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let62 let61)))))))
  let let66 := (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd x1x5fminus let32))))))))))
  let let67 := (Int.ofNat 4)
  let let68 := (Int.ofNat 5)
  let let69 := (binrel% HDiv.hDiv let68 let67)
  let let70 := (Neg.neg let69)
  let let71 := (binrel% HDiv.hDiv let68 let4)
  let let72 := (Neg.neg let71)
  let let73 := (binrel% HMul.hMul let69 x8x5fminus)
  let let74 := (binrel% HMul.hMul let70 x8x5fplus)
  let let75 := (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let71 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x9x5fplus) (binrel% HMul.hMul let69 x9x5fminus))))))))
  let let76 := (binrel% HMul.hMul let70 let64)
  let let77 := (binrel% HMul.hMul let70 let15)
  let let78 := (binrel% LE.le let41 let27)
  let let79 := (Neg.neg let67)
  let let80 := (Int.ofNat 6)
  let let81 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let80) x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let67 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x0x5fminus) (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd (binrel% HMul.hMul let67 x9x5fplus) (binrel% HMul.hMul let79 x9x5fminus)))))))))))))
  let let82 := (binrel% HMul.hMul let13 let41)
  let let83 := (binrel% LE.le let19 let1)
  let let84 := (Not let83)
  let let85 := (binrel% GT.gt let19 let1)
  let let86 := (Eq let85 let84)
  let let87 := (binrel% LT.lt let70 let1)
  let let88 := (Rat.ofInt 0)
  let let89 := (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let71 x5x5fplus) (binrel% HMul.hMul let72 x5x5fminus))))))
  let let90 := (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x1x5fplus) (binrel% HMul.hMul let38 x1x5fminus))))))))
  let let91 := (binrel% HMul.hMul let6 x9x5fminus)
  let let92 := (binrel% HMul.hMul let7 x9x5fplus)
  let let93 := (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x2x5fminus) (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x4x5fplus) (binrel% HMul.hMul let6 x4x5fminus))))))))))
  let let94 := (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x4x5fplus) (binrel% HMul.hMul let7 x4x5fminus))))
  let let95 := (Int.ofNat 7)
  let let96 := (binrel% HDiv.hDiv let95 let67)
  let let97 := (Neg.neg let96)
  let let98 := (binrel% HDiv.hDiv let95 let4)
  let let99 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let98) x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let97 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let97 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let97 x9x5fplus) (binrel% HMul.hMul let96 x9x5fminus))))))))
  let let100 := (Rat.ofInt let19)
  let let101 := (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let99 (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let94 (binrel% HAdd.hAdd let93 (binrel% HAdd.hAdd let90 let89)))))))
  let let102 := (binrel% LT.lt let97 let1)
  let let103 := (Neg.neg (binrel% HDiv.hDiv let5 let67))
  let let104 := (binrel% LE.le let88 let103)
  let let105 := (Not let43)
  let let106 := (Eq let105 let42)
  let let107 := (binrel% HMul.hMul let97 let15)
  let let108 := (Eq let20 let20)
  let let109 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let37 let36)))))
  let let110 := (binrel% HMul.hMul let70 let109)
  let let111 := (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let88 let69)))))))
  let let112 := (binrel% HMul.hMul let97 let51)
  let let113 := (binrel% HMul.hMul let11 let1)
  let let114 := (binrel% HMul.hMul let2 let19)
  let let115 := (binrel% HMul.hMul let7 let1)
  let let116 := (Eq let42 let105)
  let let117 := (binrel% HMul.hMul let2 let1)
  let let118 := (binrel% HMul.hMul let11 let31)
  let let119 := (binrel% HMul.hMul let7 let55)
  let let120 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x4x5fplus) x4x5fminus)))
  let let121 := (binrel% HMul.hMul let7 let120)
  let let122 := (binrel% HMul.hMul let15 x5x5fminus)
  let let123 := (binrel% LE.le let66 let27)
  let let124 := (binrel% GE.ge let56 let1)
  let let125 := (binrel% GE.ge let65 let15)
  let let126 := (binrel% GE.ge let33 let1)
  let let127 := (binrel% GE.ge let52 let15)
  let let128 := (binrel% GE.ge let109 let15)
  let let129 := (binrel% GE.ge let120 let5)
  let let130 := (binrel% GE.ge let55 let1)
  let let131 := (binrel% GE.ge let64 let15)
  let let132 := (binrel% GE.ge let31 let1)
  let let133 := (binrel% GE.ge let51 let15)
  let let134 := (Not let129)
  let let135 := (Not let128)
  let let136 := (Not let133)
  let let137 := (Not let132)
  let let138 := (Not let131)
  let let139 := (Not let130)
  let let140 := (Or let135 (Or let137 (Or let139 (Or let134 (Or let42 (Or let138 (Or let136 let20)))))))
  let let141 := (Or let135 (Or let137 (Or let139 (Or let134 (Or let105 (Or let138 (Or let136 let22)))))))
  let let142 := (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let113 let77)))))))
  let let143 := (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let121 (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let118 let110)))))))
  let let144 := (binrel% LE.le let143 let142)
  let let145 := (binrel% LE.le let110 let77)
  let let146 := (And let87 let128)
  let let147 := (binrel% LE.le let118 let113)
  let let148 := (And let12 let132)
  let let149 := (binrel% LE.le let119 let115)
  let let150 := (And let8 let130)
  let let151 := (binrel% LE.le let121 let60)
  let let152 := (And let8 let129)
  let let153 := (binrel% LE.le let82 let58)
  let let154 := (And let14 let78)
  let let155 := (binrel% LE.le let76 let77)
  let let156 := (And let87 let131)
  let let157 := (binrel% LE.le let112 let107)
  let let158 := (And let102 let133)
  let let159 := (binrel% LE.le let114 let117)
  let let160 := (And let3 let83)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let8 True) => -- EVALUATE
fun lean_r2 : (Eq let12 True) => -- EVALUATE
fun lean_r3 : (Eq let14 True) => -- EVALUATE
fun lean_r4 : (Eq let24 let23) => -- THEORY_REWRITE_BOOL
fun lean_r5 : (Eq let25 let21) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let33 let31) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r8 : let24 => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let56 let55) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let58 let57) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let59 True) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let60 let7) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let65 let64) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let66 let41) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let76 let75) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let77 let69) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let78 let43) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let82 let81) => -- THEORY_REWRITE_ARITH
fun lean_r20 : let86 => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let87 True) => -- EVALUATE
fun lean_r22 : (Eq let101 let88) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let102 True) => -- EVALUATE
fun lean_r24 : (Eq let104 False) => -- THEORY_REWRITE_ARITH
fun lean_r25 : let106 => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let107 let96) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let108 True) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let83 let21) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let110 let89) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let111 let103) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let112 let99) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let113 let88) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let114 let100) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let115 let88) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let106 let116) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let117 let88) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let118 let90) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let119 let93) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let121 let94) => -- THEORY_REWRITE_ARITH
fun lean_a40 : (binrel% GE.ge x8x5fplus let1) =>
fun lean_a41 : (binrel% GE.ge x8x5fminus let1) =>
fun lean_a42 : (binrel% GE.ge x7x5fplus let1) =>
fun lean_a43 : (binrel% GE.ge x7x5fminus let1) =>
fun lean_a44 : (binrel% GE.ge x6x5fplus let1) =>
fun lean_a45 : (binrel% GE.ge x6x5fminus let1) =>
fun lean_a46 : (binrel% GE.ge x5x5fplus let1) =>
fun lean_a47 : (binrel% GE.ge x5x5fminus let1) =>
fun lean_a48 : (binrel% GE.ge x0x5fplus let1) =>
fun lean_a49 : (binrel% GE.ge x0x5fminus let1) =>
fun lean_a50 : (binrel% GE.ge x3x5fplus let1) =>
fun lean_a51 : (binrel% GE.ge x3x5fminus let1) =>
fun lean_a52 : (binrel% GE.ge x2x5fplus let1) =>
fun lean_a53 : (binrel% GE.ge x2x5fminus let1) =>
fun lean_a54 : (binrel% GE.ge x1x5fplus let1) =>
fun lean_a55 : (binrel% GE.ge x1x5fminus let1) =>
fun lean_a56 : (binrel% GE.ge x9x5fplus let1) =>
fun lean_a57 : (binrel% GE.ge x9x5fminus let1) =>
fun lean_a58 : (binrel% GE.ge x4x5fplus let1) =>
fun lean_a59 : (binrel% GE.ge x4x5fminus let1) =>
fun lean_a60 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let122 let32)))))))) let15) =>
fun lean_a61 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let122 (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x3x5fplus) (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x2x5fplus) x2x5fminus))))))) let1) =>
fun lean_a62 : let83 =>
fun lean_a63 : let123 =>
fun lean_a64 : let124 =>
fun lean_a65 : let125 =>
fun lean_a66 : let126 =>
fun lean_a67 : let127 =>
fun lean_a68 : let128 =>
fun lean_a69 : let129 =>
fun lean_a70 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x1x5fplus (binrel% HMul.hMul let15 x1x5fminus)))) let5) => by
have lean_s0 : (Or let135 (Or let137 (Or let139 (Or let134 (Or let105 (Or let138 (Or let136 (Or let22 False)))))))) :=
  (scope (fun lean_a71 : let128 =>
    (scope (fun lean_a72 : let132 =>
      (scope (fun lean_a73 : let130 =>
        (scope (fun lean_a74 : let129 =>
          (scope (fun lean_a75 : let43 =>
            (scope (fun lean_a76 : let131 =>
              (scope (fun lean_a77 : let133 =>
                (scope (fun lean_a78 : let21 =>
                  have lean_s0 : let21 := by timed eqResolve lean_a62 lean_r28
                  have lean_s1 : (Eq let21 let25) := by timed Eq.symm lean_r5
                  have lean_s2 : let25 := by timed eqResolve lean_s0 lean_s1
                  have lean_s3 : let83 := by intTightUb lean_s2
                  have lean_s4 : (Or let84 False) :=
                    (scope (fun lean_a77 : let83 =>
                      have lean_s4 : let3 := by timed trueElim lean_r0
                      have lean_s5 : let160 := by timed And.intro lean_s4 lean_a77
                      have lean_s6 : (Implies let160 let159) := by arithMulPos [let19, let1, let2], 1
                      have lean_s7 : let159 := by timed modusPonens lean_s5 lean_s6
                      have lean_s8 : let102 := by timed trueElim lean_r23
                      let lean_s9 := by timed flipCongrArg lean_r9 [GE.ge]
                      have lean_s10 : (Eq let15 let15) := by timed rfl
                      have lean_s11 : (Eq let127 let133) := by timed congr lean_s9 lean_s10
                      have lean_s12 : let133 := by timed eqResolve lean_a67 lean_s11
                      have lean_s13 : let158 := by timed And.intro lean_s8 lean_s12
                      have lean_s14 : (Implies let158 let157) := by arithMulNeg [let51, let15, let97], 3
                      have lean_s15 : let157 := by timed modusPonens lean_s13 lean_s14
                      have lean_s16 : let87 := by timed trueElim lean_r21
                      let lean_s17 := by timed flipCongrArg lean_r14 [GE.ge]
                      have lean_s18 : (Eq let125 let131) := by timed congr lean_s17 lean_s10
                      have lean_s19 : let131 := by timed eqResolve lean_a65 lean_s18
                      have lean_s20 : let156 := by timed And.intro lean_s16 lean_s19
                      have lean_s21 : (Implies let156 let155) := by arithMulNeg [let64, let15, let70], 3
                      have lean_s22 : let155 := by timed modusPonens lean_s20 lean_s21
                      have lean_s23 : let14 := by timed trueElim lean_r3
                      let lean_s24 := by timed flipCongrArg lean_r15 [LE.le]
                      have lean_s25 : (Eq let27 let27) := by timed rfl
                      have lean_s26 : (Eq let123 let78) := by timed congr lean_s24 lean_s25
                      have lean_s27 : (Eq let123 let43) := by timed Eq.trans lean_s26 lean_r18
                      have lean_s28 : let43 := by timed eqResolve lean_a63 lean_s27
                      have lean_s29 : (Eq let43 let44) := by timed Eq.symm lean_r7
                      have lean_s30 : let44 := by timed eqResolve lean_s28 lean_s29
                      have lean_s31 : let78 := by intTightUb lean_s30
                      have lean_s32 : let154 := by timed And.intro lean_s23 lean_s31
                      have lean_s33 : (Implies let154 let153) := by arithMulPos [let41, let27, let13], 1
                      have lean_s34 : let153 := by timed modusPonens lean_s32 lean_s33
                      have lean_s35 : let8 := by timed trueElim lean_r1
                      have lean_s36 : let152 := by timed And.intro lean_s35 lean_a74
                      have lean_s37 : (Implies let152 let151) := by arithMulNeg [let120, let5, let7], 3
                      have lean_s38 : let151 := by timed modusPonens lean_s36 lean_s37
                      let lean_s39 := by timed flipCongrArg lean_r10 [GE.ge]
                      have lean_s40 : (Eq let1 let1) := by timed rfl
                      have lean_s41 : (Eq let124 let130) := by timed congr lean_s39 lean_s40
                      have lean_s42 : let130 := by timed eqResolve lean_a64 lean_s41
                      have lean_s43 : let150 := by timed And.intro lean_s35 lean_s42
                      have lean_s44 : (Implies let150 let149) := by arithMulNeg [let55, let1, let7], 3
                      have lean_s45 : let149 := by timed modusPonens lean_s43 lean_s44
                      have lean_s46 : let12 := by timed trueElim lean_r2
                      let lean_s47 := by timed flipCongrArg lean_r6 [GE.ge]
                      have lean_s48 : (Eq let126 let132) := by timed congr lean_s47 lean_s40
                      have lean_s49 : let132 := by timed eqResolve lean_a66 lean_s48
                      have lean_s50 : let148 := by timed And.intro lean_s46 lean_s49
                      have lean_s51 : (Implies let148 let147) := by arithMulNeg [let31, let1, let11], 3
                      have lean_s52 : let147 := by timed modusPonens lean_s50 lean_s51
                      have lean_s53 : let146 := by timed And.intro lean_s16 lean_a71
                      have lean_s54 : (Implies let146 let145) := by arithMulNeg [let109, let15, let70], 3
                      have lean_s55 : let145 := by timed modusPonens lean_s53 lean_s54
                      have lean_s56 : let144 := by sumBounds [lean_s7, lean_s15, lean_s22, lean_s34, lean_s38, lean_s45, lean_s52, lean_s55]
                      let lean_s57 := by timed congrHAdd lean_r37 lean_r29
                      let lean_s58 := by timed congrHAdd lean_r38 lean_s57
                      let lean_s59 := by timed congrHAdd lean_r39 lean_s58
                      let lean_s60 := by timed congrHAdd lean_r19 lean_s59
                      let lean_s61 := by timed congrHAdd lean_r16 lean_s60
                      let lean_s62 := by timed congrHAdd lean_r31 lean_s61
                      have lean_s63 : (Eq let143 let101) := by timed congrHAdd lean_r33 lean_s62
                      have lean_s64 : (Eq let143 let88) := by timed Eq.trans lean_s63 lean_r22
                      let lean_s65 := by timed flipCongrArg lean_s64 [LE.le]
                      let lean_s66 := by timed congrHAdd lean_r32 lean_r17
                      let lean_s67 := by timed congrHAdd lean_r34 lean_s66
                      let lean_s68 := by timed congrHAdd lean_r13 lean_s67
                      let lean_s69 := by timed congrHAdd lean_r11 lean_s68
                      let lean_s70 := by timed congrHAdd lean_r17 lean_s69
                      let lean_s71 := by timed congrHAdd lean_r26 lean_s70
                      have lean_s72 : (Eq let142 let111) := by timed congrHAdd lean_r36 lean_s71
                      have lean_s73 : (Eq let142 let103) := by timed Eq.trans lean_s72 lean_r30
                      have lean_s74 : (Eq let144 let104) := by timed congr lean_s65 lean_s73
                      have lean_s75 : (Eq let144 False) := by timed Eq.trans lean_s74 lean_r24
                      show False from by timed eqResolve lean_s56 lean_s75
                    ))
                  have lean_s5 : let84 := by liftOrNToNeg lean_s4
                  have lean_s6 : (Eq let84 let22) := by timed flipCongrArg lean_r28 [Not]
                  have lean_s7 : (Eq let84 let20) := by timed Eq.trans lean_s6 lean_r8
                  have lean_s8 : (Eq let85 let20) := by timed Eq.trans lean_r20 lean_s7
                  have lean_s9 : (Eq let20 let85) := by timed Eq.symm lean_s8
                  have lean_s10 : (Eq let84 let85) := by timed Eq.trans lean_s7 lean_s9
                  have lean_s11 : let85 := by timed eqResolve lean_s5 lean_s10
                  have lean_s12 : (Eq let20 let84) := by timed Eq.symm lean_s7
                  have lean_s13 : let86 := by timed Eq.trans lean_s8 lean_s12
                  have lean_s14 : let84 := by timed eqResolve lean_s11 lean_s13
                  show False from by timed contradiction lean_s3 lean_s14
  ))))))))))))))))
have lean_s1 : (Not (And let128 (And let132 (And let130 (And let129 (And let43 (And let131 (And let133 let21)))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let141 := by timed flipNotAnd lean_s1 [let128, let132, let130, let129, let43, let131, let133, let21]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let135 let135) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let137 let137) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : (Eq let139 let139) := by timed rfl
let lean_s9 := by timed congr lean_s3 lean_s8
have lean_s10 : (Eq let134 let134) := by timed rfl
let lean_s11 := by timed congr lean_s3 lean_s10
have lean_s12 : let59 := by timed rfl
let lean_s13 := by timed flipCongrArg lean_s12 [Eq]
have lean_s14 : (Eq let116 let59) := by timed congr lean_s13 lean_r25
have lean_s15 : (Eq let116 True) := by timed Eq.trans lean_s14 lean_r12
have lean_s16 : (Eq let106 True) := by timed Eq.trans lean_r35 lean_s15
have lean_s17 : let106 := by timed trueElim lean_s16
let lean_s18 := by timed congr lean_s3 lean_s17
have lean_s19 : (Eq let138 let138) := by timed rfl
let lean_s20 := by timed congr lean_s3 lean_s19
have lean_s21 : (Eq let136 let136) := by timed rfl
let lean_s22 := by timed congr lean_s3 lean_s21
have lean_s23 : let108 := by timed rfl
let lean_s24 := by timed flipCongrArg lean_s23 [Eq]
have lean_s25 : (Eq let23 let108) := by timed congr lean_s24 lean_r8
have lean_s26 : (Eq let23 True) := by timed Eq.trans lean_s25 lean_r27
have lean_s27 : (Eq let24 True) := by timed Eq.trans lean_r4 lean_s26
have lean_s28 : let24 := by timed trueElim lean_s27
let lean_s29 := by timed congr lean_s22 lean_s28
let lean_s30 := by timed congr lean_s20 lean_s29
let lean_s31 := by timed congr lean_s18 lean_s30
let lean_s32 := by timed congr lean_s11 lean_s31
let lean_s33 := by timed congr lean_s9 lean_s32
let lean_s34 := by timed congr lean_s7 lean_s33
have lean_s35 : (Eq let141 let140) := by timed congr lean_s5 lean_s34
have lean_s36 : let140 := by timed eqResolve lean_s2 lean_s35
have lean_s37 : (Or let20 (Or let42 (Or let139 (Or let138 (Or let137 (Or let136 (Or let135 let134))))))) := by permutateOr lean_s36, [7, 4, 2, 5, 1, 6, 0, 3], (- 1)
let lean_s38 := by R2 lean_s37, lean_a69, let129, [(- 1), 0]
let lean_s39 := by R2 lean_s38, lean_a68, let128, [(- 1), 0]
let lean_s40 := by timed flipCongrArg lean_r9 [GE.ge]
have lean_s41 : (Eq let15 let15) := by timed rfl
have lean_s42 : (Eq let127 let133) := by timed congr lean_s40 lean_s41
have lean_s43 : let133 := by timed eqResolve lean_a67 lean_s42
let lean_s44 := by R2 lean_s39, lean_s43, let133, [(- 1), 0]
let lean_s45 := by timed flipCongrArg lean_r6 [GE.ge]
have lean_s46 : (Eq let1 let1) := by timed rfl
have lean_s47 : (Eq let126 let132) := by timed congr lean_s45 lean_s46
have lean_s48 : let132 := by timed eqResolve lean_a66 lean_s47
let lean_s49 := by R2 lean_s44, lean_s48, let132, [(- 1), 0]
let lean_s50 := by timed flipCongrArg lean_r14 [GE.ge]
have lean_s51 : (Eq let125 let131) := by timed congr lean_s50 lean_s41
have lean_s52 : let131 := by timed eqResolve lean_a65 lean_s51
let lean_s53 := by R2 lean_s49, lean_s52, let131, [(- 1), 0]
let lean_s54 := by timed flipCongrArg lean_r10 [GE.ge]
have lean_s55 : (Eq let124 let130) := by timed congr lean_s54 lean_s46
have lean_s56 : let130 := by timed eqResolve lean_a64 lean_s55
let lean_s57 := by R2 lean_s53, lean_s56, let130, [(- 1), 0]
let lean_s58 := by timed flipCongrArg lean_r15 [LE.le]
have lean_s59 : (Eq let27 let27) := by timed rfl
have lean_s60 : (Eq let123 let78) := by timed congr lean_s58 lean_s59
have lean_s61 : (Eq let123 let43) := by timed Eq.trans lean_s60 lean_r18
have lean_s62 : let43 := by timed eqResolve lean_a63 lean_s61
let lean_s63 := by R1 lean_s57, lean_s62, let42, [(- 1), 0]
have lean_s64 : let21 := by timed eqResolve lean_a62 lean_r28
exact (show False from by R1 lean_s63, lean_s64, let20, [0, 0])


