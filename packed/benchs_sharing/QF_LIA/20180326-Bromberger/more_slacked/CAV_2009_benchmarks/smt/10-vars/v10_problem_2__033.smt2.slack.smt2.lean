open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x3x5fplus : Int}
variable {x3x5fminus : Int}
variable {x2x5fplus : Int}
variable {x2x5fminus : Int}
variable {x6x5fplus : Int}
variable {x9x5fminus : Int}
variable {x0x5fplus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x9x5fplus : Int}
variable {x8x5fplus : Int}
variable {x4x5fminus : Int}
variable {x4x5fplus : Int}
variable {x4x5fminus : Int}
variable {x8x5fminus : Int}
variable {x4x5fplus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x7x5fminus : Int}
variable {x9x5fminus : Int}
variable {x1x5fplus : Int}
variable {x1x5fminus : Int}
variable {x0x5fminus : Int}
variable {x9x5fplus : Int}
variable {x6x5fminus : Int}
variable {x7x5fplus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x6x5fplus : Int}
variable {x2x5fminus : Int}
variable {x6x5fminus : Int}
variable {x2x5fplus : Int}
variable {x3x5fminus : Int}
variable {x8x5fplus : Int}
variable {x3x5fplus : Int}
variable {x1x5fminus : Int}
variable {x1x5fplus : Int}
variable {x7x5fminus : Int}
variable {x7x5fplus : Int}
variable {x8x5fminus : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Int.ofNat 2)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x1x5fplus) (binrel% HMul.hMul let5 x1x5fminus))
  let let8 := (Int.ofNat 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% HMul.hMul let9 x8x5fminus)
  let let11 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 let7))
  let let12 := (binrel% HMul.hMul let9 x9x5fminus)
  let let13 := (binrel% HMul.hMul let9 x4x5fminus)
  let let14 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 let11))))
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let1)
  let let18 := (binrel% HMul.hMul let9 x8x5fplus)
  let let19 := (binrel% HAdd.hAdd let18 x8x5fminus)
  let let20 := (binrel% HMul.hMul let9 x6x5fplus)
  let let21 := (Rat.ofInt (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus let19)))))
  let let22 := (binrel% HAdd.hAdd x8x5fplus let10)
  let let23 := (binrel% HMul.hMul let9 x6x5fminus)
  let let24 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 let22))))
  let let25 := (binrel% HMul.hMul let3 let24)
  let let26 := (Int.ofNat 3)
  let let27 := (binrel% HDiv.hDiv (Int.ofNat 8) let26)
  let let28 := (binrel% HDiv.hDiv (Int.ofNat 4) let26)
  let let29 := (Neg.neg let28)
  let let30 := (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let28 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let28 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let28 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x1x5fplus) (binrel% HMul.hMul (Neg.neg let27) x1x5fminus))))))))
  let let31 := (binrel% HMul.hMul let9 x5x5fplus)
  let let32 := (binrel% HMul.hMul let9 x2x5fminus)
  let let33 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fminus let11))))
  let let34 := (binrel% HMul.hMul let29 let33)
  let let35 := (binrel% HDiv.hDiv let8 let26)
  let let36 := (Neg.neg let35)
  let let37 := (binrel% LT.lt let36 let1)
  let let38 := (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x1x5fplus) (binrel% HMul.hMul let36 x1x5fminus))))))))
  let let39 := (binrel% HMul.hMul let9 x1x5fplus)
  let let40 := (binrel% HAdd.hAdd let39 x1x5fminus)
  let let41 := (binrel% HMul.hMul let9 x5x5fminus)
  let let42 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd x8x5fminus let40))))))
  let let43 := (binrel% HMul.hMul let36 let42)
  let let44 := (Rat.ofInt 0)
  let let45 := (binrel% HMul.hMul let9 x3x5fminus)
  let let46 := (binrel% HAdd.hAdd x3x5fplus let45)
  let let47 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fminus let46))))))
  let let48 := (Rat.ofInt let47)
  let let49 := (Rat.ofInt let14)
  let let50 := (binrel% HDiv.hDiv let5 let26)
  let let51 := (Neg.neg let50)
  let let52 := (binrel% HAdd.hAdd (binrel% HMul.hMul let50 x2x5fplus) (binrel% HMul.hMul let51 x2x5fminus))
  let let53 := (binrel% HMul.hMul let9 x4x5fplus)
  let let54 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x4x5fminus let22))))
  let let55 := (Rat.ofInt let54)
  let let56 := (binrel% HMul.hMul let9 x3x5fplus)
  let let57 := (binrel% HAdd.hAdd let56 x3x5fminus)
  let let58 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x1x5fminus let57))))
  let let59 := (Rat.ofInt let58)
  let let60 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let49 let48)))))))
  let let61 := (binrel% HMul.hMul let3 let1)
  let let62 := (binrel% HMul.hMul let3 let8)
  let let63 := (binrel% GT.gt let50 let1)
  let let64 := (binrel% HMul.hMul let50 let8)
  let let65 := (binrel% HMul.hMul let2 let1)
  let let66 := (binrel% HMul.hMul let2 let8)
  let let67 := (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let44 let2)))))))
  let let68 := (binrel% HAdd.hAdd x2x5fplus let32)
  let let69 := (binrel% GE.ge let68 let8)
  let let70 := (Not let69)
  let let71 := (binrel% LT.lt let68 let8)
  let let72 := (binrel% HMul.hMul let29 let8)
  let let73 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let32 let7))))))
  let let74 := (binrel% GT.gt let2 let1)
  let let75 := (binrel% GE.ge let47 let8)
  let let76 := (Not let75)
  let let77 := (Not let76)
  let let78 := (Eq let77 let75)
  let let79 := (binrel% HMul.hMul let2 let14)
  let let80 := (binrel% GE.ge let58 let1)
  let let81 := (Not let80)
  let let82 := (Not let81)
  let let83 := (Eq let80 let82)
  let let84 := (Eq let82 let80)
  let let85 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let13 let7))))))
  let let86 := (binrel% HMul.hMul let50 let68)
  let let87 := (Eq let69 let69)
  let let88 := (binrel% LE.le let58 let9)
  let let89 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x6x5fplus let23)))))
  let let90 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x3x5fminus let40))))
  let let91 := (binrel% LE.le let68 let1)
  let let92 := (Not let16)
  let let93 := (Eq let92 let15)
  let let94 := (binrel% HMul.hMul let9 x1x5fminus)
  let let95 := (binrel% HAdd.hAdd x1x5fplus let94)
  let let96 := (binrel% HMul.hMul let9 x2x5fplus)
  let let97 := (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 let95))))))
  let let98 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x2x5fminus let95))))))
  let let99 := (Eq let15 let15)
  let let100 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let45 let68))))))
  let let101 := (binrel% HMul.hMul let36 let1)
  let let102 := (Not True)
  let let103 := (binrel% GE.ge let42 let1)
  let let104 := (binrel% LE.le let97 let1)
  let let105 := (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let65 let66)))))))
  let let106 := (binrel% HMul.hMul let2 let47)
  let let107 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let13 let19))))
  let let108 := (binrel% HMul.hMul let3 let107)
  let let109 := (binrel% HMul.hMul let2 let58)
  let let110 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let79 let106)))))))
  let let111 := (binrel% GE.ge let110 let105)
  let let112 := (Not let111)
  let let113 := (binrel% LT.lt let110 let105)
  let let114 := (binrel% LE.le let47 let1)
  let let115 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let53 x4x5fminus)))))
  let let116 := (Not let70)
  let let117 := (Eq let69 let116)
  let let118 := (Eq let116 let69)
  let let119 := (binrel% HSub.hSub x2x5fplus x2x5fminus)
  let let120 := (binrel% LT.lt let29 let1)
  let let121 := (binrel% GE.ge let107 let8)
  let let122 := (binrel% LE.le let54 let9)
  let let123 := (binrel% GE.ge let24 let1)
  let let124 := (Not let123)
  let let125 := (binrel% LT.lt let24 let1)
  let let126 := (Eq let80 let80)
  let let127 := (binrel% LE.le let14 let9)
  let let128 := (Eq let15 let92)
  let let129 := (binrel% LT.lt let47 let8)
  let let130 := (Eq let75 let75)
  let let131 := (binrel% LT.lt let58 let1)
  let let132 := (Eq let75 let77)
  let let133 := (binrel% GE.ge let44 let51)
  let let134 := (binrel% LE.le let119 let1)
  let let135 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let9 x0x5fminus))
  let let136 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let13 let135))
  let let137 := (binrel% HMul.hMul let9 x7x5fminus)
  let let138 := (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x1x5fplus) (binrel% HMul.hMul let6 x1x5fminus))
  let let139 := (binrel% HMul.hMul let9 x7x5fplus)
  let let140 := (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x0x5fplus) x0x5fminus)
  let let141 := (binrel% HMul.hMul let6 x5x5fminus)
  let let142 := (binrel% HMul.hMul let5 x5x5fplus)
  let let143 := (binrel% LE.le let100 let1)
  let let144 := (binrel% LE.le let85 let9)
  let let145 := (binrel% LE.le let98 let1)
  let let146 := (binrel% LE.le let90 let9)
  let let147 := (binrel% LE.le let115 let9)
  let let148 := (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x2x5fminus let140))
  let let149 := (binrel% GE.ge let73 let8)
  let let150 := (binrel% GE.ge let89 let1)
  let let151 := (binrel% GE.ge let33 let8)
  let let152 := (Not let151)
  let let153 := (Not let121)
  let let154 := (Not let103)
  let let155 := (Or let75 (Or let15 (Or let154 (Or let152 (Or let69 (Or let153 (Or let80 let124)))))))
  let let156 := (Or let77 (Or let92 (Or let154 (Or let152 (Or let116 (Or let153 (Or let82 let124)))))))
  let let157 := (Or let124 False)
  let let158 := (binrel% LT.lt let106 let66)
  let let159 := (And let74 let129)
  let let160 := (binrel% LT.lt let79 let65)
  let let161 := (And let74 let17)
  let let162 := (binrel% LE.le let43 let101)
  let let163 := (And let37 let103)
  let let164 := (binrel% LE.le let34 let72)
  let let165 := (And let120 let151)
  let let166 := (binrel% LT.lt let86 let64)
  let let167 := (And let63 let71)
  let let168 := (binrel% LE.le let108 let62)
  let let169 := (And let4 let121)
  let let170 := (binrel% LT.lt let109 let65)
  let let171 := (And let74 let131)
  let let172 := (binrel% LE.le let25 let61)
  let let173 := (And let4 let123)
(Eq let4 True) → (Eq let17 let16) → (Eq let25 let21) → (Eq let34 let30) → (Eq let37 True) → (Eq let43 let38) → (Eq let60 let44) → (Eq let61 let44) → (Eq let62 let3) → (Eq let63 True) → (Eq let64 let50) → (Eq let65 let44) → (Eq let66 let2) → (Eq let67 let51) → (Eq let71 let70) → (Eq let72 let29) → (Eq let73 let33) → (Eq let74 True) → let78 → (Eq let79 let49) → (Eq let84 let83) → (Eq let85 let14) → (Eq let86 let52) → (Eq let87 True) → (Eq let88 let81) → (Eq let89 let24) → (Eq let90 let58) → (Eq let91 let70) → let93 → (Eq let98 let97) → (Eq let99 True) → (Eq let100 let47) → (Eq let101 let44) → (Eq let102 False) → (Eq let104 let103) → (Eq let113 let112) → (Eq let114 let76) → (Eq let109 let59) → (Eq let115 let54) → (Eq let118 let117) → (Eq let119 let68) → (Eq let120 True) → (Eq let108 let55) → let118 → (Eq let122 let121) → (Eq let125 let124) → (Eq let126 True) → (Eq let106 let48) → let84 → (Eq let127 let16) → (Eq let93 let128) → (Eq let129 let76) → (Eq let130 True) → (Eq let131 let81) → (Eq let78 let132) → (Eq let133 True) → (binrel% GE.ge x2x5fplus let1) → (binrel% GE.ge x2x5fminus let1) → (binrel% GE.ge x7x5fplus let1) → (binrel% GE.ge x7x5fminus let1) → (binrel% GE.ge x6x5fplus let1) → (binrel% GE.ge x6x5fminus let1) → (binrel% GE.ge x5x5fplus let1) → (binrel% GE.ge x5x5fminus let1) → (binrel% GE.ge x4x5fplus let1) → (binrel% GE.ge x4x5fminus let1) → (binrel% GE.ge x0x5fplus let1) → (binrel% GE.ge x0x5fminus let1) → (binrel% GE.ge x9x5fplus let1) → (binrel% GE.ge x9x5fminus let1) → (binrel% GE.ge x8x5fplus let1) → (binrel% GE.ge x8x5fminus let1) → (binrel% GE.ge x1x5fplus let1) → (binrel% GE.ge x1x5fminus let1) → (binrel% GE.ge x3x5fplus let1) → (binrel% GE.ge x3x5fminus let1) → let134 → (binrel% GE.ge (binrel% HSub.hSub x1x5fplus x1x5fminus) let9) → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let41 let136)))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x4x5fminus let95)))))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let45 let95)))))))) let8) → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let96 x2x5fminus))))))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let32 let135)))))))) let8) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x6x5fminus let57)))))))) let8) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x4x5fminus let138)))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x1x5fminus let140)))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let141 let135)))))) let8) → let143 → let144 → (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x8x5fminus) (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd x7x5fminus let136)))) let8) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let45 let140)))))) let1) → let145 → let146 → let147 → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x5x5fminus) let68)))) let1) → (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x4x5fminus) (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x3x5fminus let135)))) let1) → (binrel% LE.le (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let141 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x4x5fminus let46)))) let1) → (binrel% LE.le (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let141 let95)) let8) → (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let41 let57)) let8) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x2x5fminus let40)))))))) let8) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let32 let95)))))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let141 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let45 let148)))) let8) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x4x5fminus) let148)))) let8) → let149 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x2x5fminus let135)))))) let8) → let150 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 let40)))) let8) → (binrel% GE.ge (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let94 let140)))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd x4x5fplus let13))))) let8) → (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 let7)) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let41 let138)) let9) → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Int.ofNat 2)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x1x5fplus) (binrel% HMul.hMul let5 x1x5fminus))
  let let8 := (Int.ofNat 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% HMul.hMul let9 x8x5fminus)
  let let11 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 let7))
  let let12 := (binrel% HMul.hMul let9 x9x5fminus)
  let let13 := (binrel% HMul.hMul let9 x4x5fminus)
  let let14 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 let11))))
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let1)
  let let18 := (binrel% HMul.hMul let9 x8x5fplus)
  let let19 := (binrel% HAdd.hAdd let18 x8x5fminus)
  let let20 := (binrel% HMul.hMul let9 x6x5fplus)
  let let21 := (Rat.ofInt (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus let19)))))
  let let22 := (binrel% HAdd.hAdd x8x5fplus let10)
  let let23 := (binrel% HMul.hMul let9 x6x5fminus)
  let let24 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 let22))))
  let let25 := (binrel% HMul.hMul let3 let24)
  let let26 := (Int.ofNat 3)
  let let27 := (binrel% HDiv.hDiv (Int.ofNat 8) let26)
  let let28 := (binrel% HDiv.hDiv (Int.ofNat 4) let26)
  let let29 := (Neg.neg let28)
  let let30 := (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let28 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let28 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let28 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x1x5fplus) (binrel% HMul.hMul (Neg.neg let27) x1x5fminus))))))))
  let let31 := (binrel% HMul.hMul let9 x5x5fplus)
  let let32 := (binrel% HMul.hMul let9 x2x5fminus)
  let let33 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fminus let11))))
  let let34 := (binrel% HMul.hMul let29 let33)
  let let35 := (binrel% HDiv.hDiv let8 let26)
  let let36 := (Neg.neg let35)
  let let37 := (binrel% LT.lt let36 let1)
  let let38 := (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x1x5fplus) (binrel% HMul.hMul let36 x1x5fminus))))))))
  let let39 := (binrel% HMul.hMul let9 x1x5fplus)
  let let40 := (binrel% HAdd.hAdd let39 x1x5fminus)
  let let41 := (binrel% HMul.hMul let9 x5x5fminus)
  let let42 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd x8x5fminus let40))))))
  let let43 := (binrel% HMul.hMul let36 let42)
  let let44 := (Rat.ofInt 0)
  let let45 := (binrel% HMul.hMul let9 x3x5fminus)
  let let46 := (binrel% HAdd.hAdd x3x5fplus let45)
  let let47 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fminus let46))))))
  let let48 := (Rat.ofInt let47)
  let let49 := (Rat.ofInt let14)
  let let50 := (binrel% HDiv.hDiv let5 let26)
  let let51 := (Neg.neg let50)
  let let52 := (binrel% HAdd.hAdd (binrel% HMul.hMul let50 x2x5fplus) (binrel% HMul.hMul let51 x2x5fminus))
  let let53 := (binrel% HMul.hMul let9 x4x5fplus)
  let let54 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x4x5fminus let22))))
  let let55 := (Rat.ofInt let54)
  let let56 := (binrel% HMul.hMul let9 x3x5fplus)
  let let57 := (binrel% HAdd.hAdd let56 x3x5fminus)
  let let58 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x1x5fminus let57))))
  let let59 := (Rat.ofInt let58)
  let let60 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let49 let48)))))))
  let let61 := (binrel% HMul.hMul let3 let1)
  let let62 := (binrel% HMul.hMul let3 let8)
  let let63 := (binrel% GT.gt let50 let1)
  let let64 := (binrel% HMul.hMul let50 let8)
  let let65 := (binrel% HMul.hMul let2 let1)
  let let66 := (binrel% HMul.hMul let2 let8)
  let let67 := (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let44 let2)))))))
  let let68 := (binrel% HAdd.hAdd x2x5fplus let32)
  let let69 := (binrel% GE.ge let68 let8)
  let let70 := (Not let69)
  let let71 := (binrel% LT.lt let68 let8)
  let let72 := (binrel% HMul.hMul let29 let8)
  let let73 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let32 let7))))))
  let let74 := (binrel% GT.gt let2 let1)
  let let75 := (binrel% GE.ge let47 let8)
  let let76 := (Not let75)
  let let77 := (Not let76)
  let let78 := (Eq let77 let75)
  let let79 := (binrel% HMul.hMul let2 let14)
  let let80 := (binrel% GE.ge let58 let1)
  let let81 := (Not let80)
  let let82 := (Not let81)
  let let83 := (Eq let80 let82)
  let let84 := (Eq let82 let80)
  let let85 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let13 let7))))))
  let let86 := (binrel% HMul.hMul let50 let68)
  let let87 := (Eq let69 let69)
  let let88 := (binrel% LE.le let58 let9)
  let let89 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x6x5fplus let23)))))
  let let90 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x3x5fminus let40))))
  let let91 := (binrel% LE.le let68 let1)
  let let92 := (Not let16)
  let let93 := (Eq let92 let15)
  let let94 := (binrel% HMul.hMul let9 x1x5fminus)
  let let95 := (binrel% HAdd.hAdd x1x5fplus let94)
  let let96 := (binrel% HMul.hMul let9 x2x5fplus)
  let let97 := (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 let95))))))
  let let98 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x2x5fminus let95))))))
  let let99 := (Eq let15 let15)
  let let100 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let45 let68))))))
  let let101 := (binrel% HMul.hMul let36 let1)
  let let102 := (Not True)
  let let103 := (binrel% GE.ge let42 let1)
  let let104 := (binrel% LE.le let97 let1)
  let let105 := (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let65 let66)))))))
  let let106 := (binrel% HMul.hMul let2 let47)
  let let107 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let13 let19))))
  let let108 := (binrel% HMul.hMul let3 let107)
  let let109 := (binrel% HMul.hMul let2 let58)
  let let110 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let79 let106)))))))
  let let111 := (binrel% GE.ge let110 let105)
  let let112 := (Not let111)
  let let113 := (binrel% LT.lt let110 let105)
  let let114 := (binrel% LE.le let47 let1)
  let let115 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let53 x4x5fminus)))))
  let let116 := (Not let70)
  let let117 := (Eq let69 let116)
  let let118 := (Eq let116 let69)
  let let119 := (binrel% HSub.hSub x2x5fplus x2x5fminus)
  let let120 := (binrel% LT.lt let29 let1)
  let let121 := (binrel% GE.ge let107 let8)
  let let122 := (binrel% LE.le let54 let9)
  let let123 := (binrel% GE.ge let24 let1)
  let let124 := (Not let123)
  let let125 := (binrel% LT.lt let24 let1)
  let let126 := (Eq let80 let80)
  let let127 := (binrel% LE.le let14 let9)
  let let128 := (Eq let15 let92)
  let let129 := (binrel% LT.lt let47 let8)
  let let130 := (Eq let75 let75)
  let let131 := (binrel% LT.lt let58 let1)
  let let132 := (Eq let75 let77)
  let let133 := (binrel% GE.ge let44 let51)
  let let134 := (binrel% LE.le let119 let1)
  let let135 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let9 x0x5fminus))
  let let136 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let13 let135))
  let let137 := (binrel% HMul.hMul let9 x7x5fminus)
  let let138 := (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x1x5fplus) (binrel% HMul.hMul let6 x1x5fminus))
  let let139 := (binrel% HMul.hMul let9 x7x5fplus)
  let let140 := (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x0x5fplus) x0x5fminus)
  let let141 := (binrel% HMul.hMul let6 x5x5fminus)
  let let142 := (binrel% HMul.hMul let5 x5x5fplus)
  let let143 := (binrel% LE.le let100 let1)
  let let144 := (binrel% LE.le let85 let9)
  let let145 := (binrel% LE.le let98 let1)
  let let146 := (binrel% LE.le let90 let9)
  let let147 := (binrel% LE.le let115 let9)
  let let148 := (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x2x5fminus let140))
  let let149 := (binrel% GE.ge let73 let8)
  let let150 := (binrel% GE.ge let89 let1)
  let let151 := (binrel% GE.ge let33 let8)
  let let152 := (Not let151)
  let let153 := (Not let121)
  let let154 := (Not let103)
  let let155 := (Or let75 (Or let15 (Or let154 (Or let152 (Or let69 (Or let153 (Or let80 let124)))))))
  let let156 := (Or let77 (Or let92 (Or let154 (Or let152 (Or let116 (Or let153 (Or let82 let124)))))))
  let let157 := (Or let124 False)
  let let158 := (binrel% LT.lt let106 let66)
  let let159 := (And let74 let129)
  let let160 := (binrel% LT.lt let79 let65)
  let let161 := (And let74 let17)
  let let162 := (binrel% LE.le let43 let101)
  let let163 := (And let37 let103)
  let let164 := (binrel% LE.le let34 let72)
  let let165 := (And let120 let151)
  let let166 := (binrel% LT.lt let86 let64)
  let let167 := (And let63 let71)
  let let168 := (binrel% LE.le let108 let62)
  let let169 := (And let4 let121)
  let let170 := (binrel% LT.lt let109 let65)
  let let171 := (And let74 let131)
  let let172 := (binrel% LE.le let25 let61)
  let let173 := (And let4 let123)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let25 let21) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let34 let30) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let37 True) => -- EVALUATE
fun lean_r5 : (Eq let43 let38) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let60 let44) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let61 let44) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let62 let3) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let63 True) => -- EVALUATE
fun lean_r10 : (Eq let64 let50) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let65 let44) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let66 let2) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let67 let51) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let71 let70) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let72 let29) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let73 let33) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let74 True) => -- EVALUATE
fun lean_r18 : let78 => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let79 let49) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let84 let83) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let85 let14) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let86 let52) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let87 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let88 let81) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let89 let24) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let90 let58) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let91 let70) => -- THEORY_REWRITE_ARITH
fun lean_r28 : let93 => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let98 let97) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let99 True) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let100 let47) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let101 let44) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let102 False) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let104 let103) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let113 let112) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let114 let76) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let109 let59) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let115 let54) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let118 let117) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let119 let68) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let120 True) => -- EVALUATE
fun lean_r42 : (Eq let108 let55) => -- THEORY_REWRITE_ARITH
fun lean_r43 : let118 => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let122 let121) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let125 let124) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let126 True) => -- THEORY_REWRITE_BOOL
fun lean_r47 : (Eq let106 let48) => -- THEORY_REWRITE_ARITH
fun lean_r48 : let84 => -- THEORY_REWRITE_BOOL
fun lean_r49 : (Eq let127 let16) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let93 let128) => -- THEORY_REWRITE_BOOL
fun lean_r51 : (Eq let129 let76) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let130 True) => -- THEORY_REWRITE_BOOL
fun lean_r53 : (Eq let131 let81) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let78 let132) => -- THEORY_REWRITE_BOOL
fun lean_r55 : (Eq let133 True) => -- THEORY_REWRITE_ARITH
fun lean_a56 : (binrel% GE.ge x2x5fplus let1) =>
fun lean_a57 : (binrel% GE.ge x2x5fminus let1) =>
fun lean_a58 : (binrel% GE.ge x7x5fplus let1) =>
fun lean_a59 : (binrel% GE.ge x7x5fminus let1) =>
fun lean_a60 : (binrel% GE.ge x6x5fplus let1) =>
fun lean_a61 : (binrel% GE.ge x6x5fminus let1) =>
fun lean_a62 : (binrel% GE.ge x5x5fplus let1) =>
fun lean_a63 : (binrel% GE.ge x5x5fminus let1) =>
fun lean_a64 : (binrel% GE.ge x4x5fplus let1) =>
fun lean_a65 : (binrel% GE.ge x4x5fminus let1) =>
fun lean_a66 : (binrel% GE.ge x0x5fplus let1) =>
fun lean_a67 : (binrel% GE.ge x0x5fminus let1) =>
fun lean_a68 : (binrel% GE.ge x9x5fplus let1) =>
fun lean_a69 : (binrel% GE.ge x9x5fminus let1) =>
fun lean_a70 : (binrel% GE.ge x8x5fplus let1) =>
fun lean_a71 : (binrel% GE.ge x8x5fminus let1) =>
fun lean_a72 : (binrel% GE.ge x1x5fplus let1) =>
fun lean_a73 : (binrel% GE.ge x1x5fminus let1) =>
fun lean_a74 : (binrel% GE.ge x3x5fplus let1) =>
fun lean_a75 : (binrel% GE.ge x3x5fminus let1) =>
fun lean_a76 : let134 =>
fun lean_a77 : (binrel% GE.ge (binrel% HSub.hSub x1x5fplus x1x5fminus) let9) =>
fun lean_a78 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let41 let136)))))) let1) =>
fun lean_a79 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x4x5fminus let95)))))))) let1) =>
fun lean_a80 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let45 let95)))))))) let8) =>
fun lean_a81 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let96 x2x5fminus))))))))) let1) =>
fun lean_a82 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let32 let135)))))))) let8) =>
fun lean_a83 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x6x5fminus let57)))))))) let8) =>
fun lean_a84 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x4x5fminus let138)))))) let1) =>
fun lean_a85 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x1x5fminus let140)))))) let1) =>
fun lean_a86 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let141 let135)))))) let8) =>
fun lean_a87 : let143 =>
fun lean_a88 : let144 =>
fun lean_a89 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x8x5fminus) (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd x7x5fminus let136)))) let8) =>
fun lean_a90 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let45 let140)))))) let1) =>
fun lean_a91 : let145 =>
fun lean_a92 : let146 =>
fun lean_a93 : let147 =>
fun lean_a94 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x5x5fminus) let68)))) let1) =>
fun lean_a95 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x4x5fminus) (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x3x5fminus let135)))) let1) =>
fun lean_a96 : (binrel% LE.le (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let141 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x4x5fminus let46)))) let1) =>
fun lean_a97 : (binrel% LE.le (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let141 let95)) let8) =>
fun lean_a98 : (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let41 let57)) let8) =>
fun lean_a99 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x2x5fminus let40)))))))) let8) =>
fun lean_a100 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let32 let95)))))))) let1) =>
fun lean_a101 : (binrel% GE.ge (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let141 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let45 let148)))) let8) =>
fun lean_a102 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x4x5fminus) let148)))) let8) =>
fun lean_a103 : let149 =>
fun lean_a104 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x2x5fminus let135)))))) let8) =>
fun lean_a105 : let150 =>
fun lean_a106 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 let40)))) let8) =>
fun lean_a107 : (binrel% GE.ge (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let94 let140)))) let1) =>
fun lean_a108 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd x4x5fplus let13))))) let8) =>
fun lean_a109 : (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let137 let7)) let1) =>
fun lean_a110 : (binrel% GE.ge (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let41 let138)) let9) => by
have lean_s0 : (Or let77 (Or let92 (Or let154 (Or let152 (Or let116 (Or let153 (Or let82 let157))))))) :=
  (scope (fun lean_a111 : let76 =>
    (scope (fun lean_a112 : let16 =>
      (scope (fun lean_a113 : let103 =>
        (scope (fun lean_a114 : let151 =>
          (scope (fun lean_a115 : let70 =>
            (scope (fun lean_a116 : let121 =>
              (scope (fun lean_a117 : let81 =>
                (scope (fun lean_a118 : let123 =>
                  let lean_s0 := by timed flipCongrArg lean_r25 [GE.ge]
                  have lean_s1 : (Eq let1 let1) := by timed rfl
                  have lean_s2 : (Eq let150 let123) := by timed congr lean_s0 lean_s1
                  have lean_s3 : let123 := by timed eqResolve lean_a105 lean_s2
                  have lean_s4 : let157 :=
                    (scope (fun lean_a119 : let123 =>
                      have lean_s4 : let4 := by timed trueElim lean_r0
                      have lean_s5 : let123 := by timed eqResolve lean_a105 lean_s2
                      have lean_s6 : let173 := by timed And.intro lean_s4 lean_s5
                      have lean_s7 : (Implies let173 let172) := by arithMulNeg [let24, let1, let3], 3
                      have lean_s8 : let172 := by timed modusPonens lean_s6 lean_s7
                      have lean_s9 : let74 := by timed trueElim lean_r17
                      let lean_s10 := by timed flipCongrArg lean_r26 [LE.le]
                      have lean_s11 : (Eq let9 let9) := by timed rfl
                      have lean_s12 : (Eq let146 let88) := by timed congr lean_s10 lean_s11
                      have lean_s13 : (Eq let146 let81) := by timed Eq.trans lean_s12 lean_r24
                      have lean_s14 : let81 := by timed eqResolve lean_a92 lean_s13
                      have lean_s15 : (Eq let81 let131) := by timed Eq.symm lean_r53
                      have lean_s16 : let131 := by timed eqResolve lean_s14 lean_s15
                      have lean_s17 : let171 := by timed And.intro lean_s9 lean_s16
                      have lean_s18 : (Implies let171 let170) := by arithMulPos [let58, let1, let2], 0
                      have lean_s19 : let170 := by timed modusPonens lean_s17 lean_s18
                      let lean_s20 := by timed flipCongrArg lean_r38 [LE.le]
                      have lean_s21 : (Eq let147 let122) := by timed congr lean_s20 lean_s11
                      have lean_s22 : (Eq let147 let121) := by timed Eq.trans lean_s21 lean_r44
                      have lean_s23 : let121 := by timed eqResolve lean_a93 lean_s22
                      have lean_s24 : let169 := by timed And.intro lean_s4 lean_s23
                      have lean_s25 : (Implies let169 let168) := by arithMulNeg [let107, let8, let3], 3
                      have lean_s26 : let168 := by timed modusPonens lean_s24 lean_s25
                      have lean_s27 : let63 := by timed trueElim lean_r9
                      let lean_s28 := by timed flipCongrArg lean_r40 [LE.le]
                      have lean_s29 : (Eq let134 let91) := by timed congr lean_s28 lean_s1
                      have lean_s30 : (Eq let134 let70) := by timed Eq.trans lean_s29 lean_r27
                      have lean_s31 : let70 := by timed eqResolve lean_a76 lean_s30
                      have lean_s32 : (Eq let70 let71) := by timed Eq.symm lean_r14
                      have lean_s33 : let71 := by timed eqResolve lean_s31 lean_s32
                      have lean_s34 : let167 := by timed And.intro lean_s27 lean_s33
                      have lean_s35 : (Implies let167 let166) := by arithMulPos [let68, let8, let50], 0
                      have lean_s36 : let166 := by timed modusPonens lean_s34 lean_s35
                      have lean_s37 : let120 := by timed trueElim lean_r41
                      let lean_s38 := by timed flipCongrArg lean_r16 [GE.ge]
                      have lean_s39 : (Eq let8 let8) := by timed rfl
                      have lean_s40 : (Eq let149 let151) := by timed congr lean_s38 lean_s39
                      have lean_s41 : let151 := by timed eqResolve lean_a103 lean_s40
                      have lean_s42 : let165 := by timed And.intro lean_s37 lean_s41
                      have lean_s43 : (Implies let165 let164) := by arithMulNeg [let33, let8, let29], 3
                      have lean_s44 : let164 := by timed modusPonens lean_s42 lean_s43
                      have lean_s45 : let37 := by timed trueElim lean_r4
                      let lean_s46 := by timed flipCongrArg lean_r29 [LE.le]
                      have lean_s47 : (Eq let145 let104) := by timed congr lean_s46 lean_s1
                      have lean_s48 : (Eq let145 let103) := by timed Eq.trans lean_s47 lean_r34
                      have lean_s49 : let103 := by timed eqResolve lean_a91 lean_s48
                      have lean_s50 : let163 := by timed And.intro lean_s45 lean_s49
                      have lean_s51 : (Implies let163 let162) := by arithMulNeg [let42, let1, let36], 3
                      have lean_s52 : let162 := by timed modusPonens lean_s50 lean_s51
                      let lean_s53 := by timed flipCongrArg lean_r21 [LE.le]
                      have lean_s54 : (Eq let144 let127) := by timed congr lean_s53 lean_s11
                      have lean_s55 : (Eq let144 let16) := by timed Eq.trans lean_s54 lean_r49
                      have lean_s56 : let16 := by timed eqResolve lean_a88 lean_s55
                      have lean_s57 : (Eq let16 let17) := by timed Eq.symm lean_r1
                      have lean_s58 : let17 := by timed eqResolve lean_s56 lean_s57
                      have lean_s59 : let161 := by timed And.intro lean_s9 lean_s58
                      have lean_s60 : (Implies let161 let160) := by arithMulPos [let14, let1, let2], 0
                      have lean_s61 : let160 := by timed modusPonens lean_s59 lean_s60
                      let lean_s62 := by timed flipCongrArg lean_r31 [LE.le]
                      have lean_s63 : (Eq let143 let114) := by timed congr lean_s62 lean_s1
                      have lean_s64 : (Eq let143 let76) := by timed Eq.trans lean_s63 lean_r36
                      have lean_s65 : let76 := by timed eqResolve lean_a87 lean_s64
                      have lean_s66 : (Eq let76 let129) := by timed Eq.symm lean_r51
                      have lean_s67 : let129 := by timed eqResolve lean_s65 lean_s66
                      have lean_s68 : let159 := by timed And.intro lean_s9 lean_s67
                      have lean_s69 : (Implies let159 let158) := by arithMulPos [let47, let8, let2], 0
                      have lean_s70 : let158 := by timed modusPonens lean_s68 lean_s69
                      have lean_s71 : let113 := by sumBounds [lean_s8, lean_s19, lean_s26, lean_s36, lean_s44, lean_s52, lean_s61, lean_s70]
                      let lean_s72 := by timed congrHAdd lean_r19 lean_r47
                      let lean_s73 := by timed congrHAdd lean_r5 lean_s72
                      let lean_s74 := by timed congrHAdd lean_r3 lean_s73
                      let lean_s75 := by timed congrHAdd lean_r22 lean_s74
                      let lean_s76 := by timed congrHAdd lean_r42 lean_s75
                      let lean_s77 := by timed congrHAdd lean_r37 lean_s76
                      have lean_s78 : (Eq let110 let60) := by timed congrHAdd lean_r2 lean_s77
                      have lean_s79 : (Eq let110 let44) := by timed Eq.trans lean_s78 lean_r6
                      let lean_s80 := by timed flipCongrArg lean_s79 [GE.ge]
                      let lean_s81 := by timed congrHAdd lean_r11 lean_r12
                      let lean_s82 := by timed congrHAdd lean_r32 lean_s81
                      let lean_s83 := by timed congrHAdd lean_r15 lean_s82
                      let lean_s84 := by timed congrHAdd lean_r10 lean_s83
                      let lean_s85 := by timed congrHAdd lean_r8 lean_s84
                      let lean_s86 := by timed congrHAdd lean_r11 lean_s85
                      have lean_s87 : (Eq let105 let67) := by timed congrHAdd lean_r7 lean_s86
                      have lean_s88 : (Eq let105 let51) := by timed Eq.trans lean_s87 lean_r13
                      have lean_s89 : (Eq let111 let133) := by timed congr lean_s80 lean_s88
                      have lean_s90 : (Eq let111 True) := by timed Eq.trans lean_s89 lean_r55
                      have lean_s91 : (Eq let112 let102) := by timed flipCongrArg lean_s90 [Not]
                      have lean_s92 : (Eq let112 False) := by timed Eq.trans lean_s91 lean_r33
                      have lean_s93 : (Eq let113 False) := by timed Eq.trans lean_r35 lean_s92
                      show False from by timed eqResolve lean_s71 lean_s93
                    ))
                  have lean_s5 : let124 := by liftOrNToNeg lean_s4
                  have lean_s6 : (Eq let124 let125) := by timed Eq.symm lean_r45
                  have lean_s7 : let125 := by timed eqResolve lean_s5 lean_s6
                  have lean_s8 : let124 := by timed eqResolve lean_s7 lean_r45
                  show False from by timed contradiction lean_s3 lean_s8
  ))))))))))))))))
have lean_s1 : (Not (And let76 (And let16 (And let103 (And let151 (And let70 (And let121 (And let81 let123)))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let156 := by timed flipNotAnd lean_s1 [let76, let16, let103, let151, let70, let121, let81, let123]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let130 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let132 let130) := by timed congr lean_s5 lean_r18
have lean_s7 : (Eq let132 True) := by timed Eq.trans lean_s6 lean_r52
have lean_s8 : (Eq let78 True) := by timed Eq.trans lean_r54 lean_s7
have lean_s9 : let78 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let99 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let128 let99) := by timed congr lean_s12 lean_r28
have lean_s14 : (Eq let128 True) := by timed Eq.trans lean_s13 lean_r30
have lean_s15 : (Eq let93 True) := by timed Eq.trans lean_r50 lean_s14
have lean_s16 : let93 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq let154 let154) := by timed rfl
let lean_s19 := by timed congr lean_s3 lean_s18
have lean_s20 : (Eq let152 let152) := by timed rfl
let lean_s21 := by timed congr lean_s3 lean_s20
have lean_s22 : let87 := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [Eq]
have lean_s24 : (Eq let117 let87) := by timed congr lean_s23 lean_r43
have lean_s25 : (Eq let117 True) := by timed Eq.trans lean_s24 lean_r23
have lean_s26 : (Eq let118 True) := by timed Eq.trans lean_r39 lean_s25
have lean_s27 : let118 := by timed trueElim lean_s26
let lean_s28 := by timed congr lean_s3 lean_s27
have lean_s29 : (Eq let153 let153) := by timed rfl
let lean_s30 := by timed congr lean_s3 lean_s29
have lean_s31 : let126 := by timed rfl
let lean_s32 := by timed flipCongrArg lean_s31 [Eq]
have lean_s33 : (Eq let83 let126) := by timed congr lean_s32 lean_r48
have lean_s34 : (Eq let83 True) := by timed Eq.trans lean_s33 lean_r46
have lean_s35 : (Eq let84 True) := by timed Eq.trans lean_r20 lean_s34
have lean_s36 : let84 := by timed trueElim lean_s35
let lean_s37 := by timed congr lean_s3 lean_s36
have lean_s38 : (Eq let124 let124) := by timed rfl
let lean_s39 := by timed congr lean_s37 lean_s38
let lean_s40 := by timed congr lean_s30 lean_s39
let lean_s41 := by timed congr lean_s28 lean_s40
let lean_s42 := by timed congr lean_s21 lean_s41
let lean_s43 := by timed congr lean_s19 lean_s42
let lean_s44 := by timed congr lean_s17 lean_s43
have lean_s45 : (Eq let156 let155) := by timed congr lean_s10 lean_s44
have lean_s46 : let155 := by timed eqResolve lean_s2 lean_s45
have lean_s47 : (Or let69 (Or let75 (Or let15 (Or let80 (Or let154 (Or let153 (Or let152 let124))))))) := by permutateOr lean_s46, [4, 0, 1, 6, 2, 5, 3, 7], (- 1)
let lean_s48 := by timed flipCongrArg lean_r25 [GE.ge]
have lean_s49 : (Eq let1 let1) := by timed rfl
have lean_s50 : (Eq let150 let123) := by timed congr lean_s48 lean_s49
have lean_s51 : let123 := by timed eqResolve lean_a105 lean_s50
let lean_s52 := by R2 lean_s47, lean_s51, let123, [(- 1), 0]
let lean_s53 := by timed flipCongrArg lean_r16 [GE.ge]
have lean_s54 : (Eq let8 let8) := by timed rfl
have lean_s55 : (Eq let149 let151) := by timed congr lean_s53 lean_s54
have lean_s56 : let151 := by timed eqResolve lean_a103 lean_s55
let lean_s57 := by R2 lean_s52, lean_s56, let151, [(- 1), 0]
let lean_s58 := by timed flipCongrArg lean_r38 [LE.le]
have lean_s59 : (Eq let9 let9) := by timed rfl
have lean_s60 : (Eq let147 let122) := by timed congr lean_s58 lean_s59
have lean_s61 : (Eq let147 let121) := by timed Eq.trans lean_s60 lean_r44
have lean_s62 : let121 := by timed eqResolve lean_a93 lean_s61
let lean_s63 := by R2 lean_s57, lean_s62, let121, [(- 1), 0]
let lean_s64 := by timed flipCongrArg lean_r26 [LE.le]
have lean_s65 : (Eq let146 let88) := by timed congr lean_s64 lean_s59
have lean_s66 : (Eq let146 let81) := by timed Eq.trans lean_s65 lean_r24
have lean_s67 : let81 := by timed eqResolve lean_a92 lean_s66
let lean_s68 := by R1 lean_s63, lean_s67, let80, [(- 1), 0]
let lean_s69 := by timed flipCongrArg lean_r29 [LE.le]
have lean_s70 : (Eq let145 let104) := by timed congr lean_s69 lean_s49
have lean_s71 : (Eq let145 let103) := by timed Eq.trans lean_s70 lean_r34
have lean_s72 : let103 := by timed eqResolve lean_a91 lean_s71
let lean_s73 := by R2 lean_s68, lean_s72, let103, [(- 1), 0]
let lean_s74 := by timed flipCongrArg lean_r21 [LE.le]
have lean_s75 : (Eq let144 let127) := by timed congr lean_s74 lean_s59
have lean_s76 : (Eq let144 let16) := by timed Eq.trans lean_s75 lean_r49
have lean_s77 : let16 := by timed eqResolve lean_a88 lean_s76
let lean_s78 := by R1 lean_s73, lean_s77, let15, [(- 1), 0]
let lean_s79 := by timed flipCongrArg lean_r31 [LE.le]
have lean_s80 : (Eq let143 let114) := by timed congr lean_s79 lean_s49
have lean_s81 : (Eq let143 let76) := by timed Eq.trans lean_s80 lean_r36
have lean_s82 : let76 := by timed eqResolve lean_a87 lean_s81
let lean_s83 := by R1 lean_s78, lean_s82, let75, [(- 1), 0]
let lean_s84 := by timed flipCongrArg lean_r40 [LE.le]
have lean_s85 : (Eq let134 let91) := by timed congr lean_s84 lean_s49
have lean_s86 : (Eq let134 let70) := by timed Eq.trans lean_s85 lean_r27
have lean_s87 : let70 := by timed eqResolve lean_a76 lean_s86
exact (show False from by R1 lean_s83, lean_s87, let69, [0, 0])


