open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x8x5fplus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x9x5fplus : Int}
variable {x9x5fminus : Int}
variable {x3x5fminus : Int}
variable {x1x5fplus : Int}
variable {x3x5fplus : Int}
variable {x8x5fminus : Int}
variable {x9x5fminus : Int}
variable {x1x5fplus : Int}
variable {x7x5fminus : Int}
variable {x7x5fminus : Int}
variable {x0x5fplus : Int}
variable {x4x5fplus : Int}
variable {x7x5fplus : Int}
variable {x1x5fminus : Int}
variable {x2x5fplus : Int}
variable {x4x5fminus : Int}
variable {x6x5fminus : Int}
variable {x2x5fminus : Int}
variable {x9x5fplus : Int}
variable {x6x5fplus : Int}
variable {x6x5fminus : Int}
variable {x6x5fplus : Int}
variable {x4x5fplus : Int}
variable {x3x5fplus : Int}
variable {x5x5fminus : Int}
variable {x0x5fminus : Int}
variable {x2x5fplus : Int}
variable {x5x5fplus : Int}
variable {x7x5fplus : Int}
variable {x8x5fminus : Int}
variable {x8x5fplus : Int}
variable {x3x5fminus : Int}
variable {x2x5fminus : Int}
variable {x4x5fminus : Int}
variable {x0x5fminus : Int}
variable {x1x5fminus : Int}
variable {x0x5fplus : Int}

theorem th0 :
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x1x5fplus)
  let let4 := (binrel% HAdd.hAdd let3 x1x5fminus)
  let let5 := (binrel% HMul.hMul let2 x3x5fminus)
  let let6 := (binrel% HMul.hMul let2 x2x5fminus)
  let let7 := (binrel% HMul.hMul let2 x6x5fplus)
  let let8 := (binrel% HMul.hMul let2 x8x5fminus)
  let let9 := (binrel% HMul.hMul let2 x9x5fminus)
  let let10 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let5 let4))))))))))
  let let11 := (binrel% GE.ge let10 let1)
  let let12 := (Not let11)
  let let13 := (binrel% LT.lt let10 let1)
  let let14 := (Int.ofNat 0)
  let let15 := (Int.ofNat 17)
  let let16 := (binrel% HDiv.hDiv (Int.ofNat 166) let15)
  let let17 := (Neg.neg let16)
  let let18 := (binrel% LT.lt let17 let14)
  let let19 := (binrel% HDiv.hDiv (Int.ofNat 23) let15)
  let let20 := (binrel% GT.gt let19 let14)
  let let21 := (binrel% HMul.hMul let2 x4x5fminus)
  let let22 := (binrel% HAdd.hAdd x4x5fplus let21)
  let let23 := (binrel% HMul.hMul let2 x0x5fminus)
  let let24 := (binrel% HMul.hMul let2 x6x5fminus)
  let let25 := (binrel% HMul.hMul let2 x8x5fplus)
  let let26 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let23 let22))))))))
  let let27 := (binrel% GE.ge let26 let1)
  let let28 := (Not let27)
  let let29 := (binrel% LT.lt let26 let1)
  let let30 := (Rat.ofInt 0)
  let let31 := (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 let30))))))))))
  let let32 := (binrel% HMul.hMul let2 x4x5fplus)
  let let33 := (binrel% HAdd.hAdd let32 x4x5fminus)
  let let34 := (Int.ofNat 2)
  let let35 := (Neg.neg let34)
  let let36 := (binrel% HMul.hMul let35 x1x5fminus)
  let let37 := (binrel% HMul.hMul let34 x1x5fplus)
  let let38 := (binrel% HMul.hMul let2 x2x5fplus)
  let let39 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 let33))))))
  let let40 := (binrel% GE.ge let39 let14)
  let let41 := (Not let40)
  let let42 := (binrel% LE.le let39 let2)
  let let43 := (binrel% HDiv.hDiv (Int.ofNat 53) let15)
  let let44 := (binrel% GT.gt let43 let14)
  let let45 := (binrel% HDiv.hDiv (Int.ofNat 47) let15)
  let let46 := (Neg.neg let45)
  let let47 := (binrel% HDiv.hDiv (Int.ofNat 94) let15)
  let let48 := (Neg.neg let47)
  let let49 := (binrel% HAdd.hAdd (binrel% HMul.hMul let46 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let45 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let45 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let46 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let45 x5x5fplus) (binrel% HMul.hMul let46 x5x5fminus))))))))))
  let let50 := (binrel% HMul.hMul let2 x5x5fplus)
  let let51 := (binrel% HAdd.hAdd let50 x5x5fminus)
  let let52 := (binrel% HMul.hMul let34 x2x5fminus)
  let let53 := (binrel% HMul.hMul let35 x2x5fplus)
  let let54 := (binrel% HMul.hMul let35 x6x5fminus)
  let let55 := (binrel% HMul.hMul let34 x6x5fplus)
  let let56 := (binrel% HMul.hMul let2 x7x5fplus)
  let let57 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let52 let51))))))))
  let let58 := (binrel% HMul.hMul let46 let57)
  let let59 := (binrel% LT.lt let39 let14)
  let let60 := (binrel% HDiv.hDiv (Int.ofNat 11) let15)
  let let61 := (Neg.neg let60)
  let let62 := (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x5x5fplus) (binrel% HMul.hMul let61 x5x5fminus))))))))
  let let63 := (binrel% HMul.hMul let2 x7x5fminus)
  let let64 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let21 let51))))))
  let let65 := (binrel% HMul.hMul let61 let64)
  let let66 := (Not let41)
  let let67 := (Eq let66 let40)
  let let68 := (Not let12)
  let let69 := (Eq let11 let68)
  let let70 := (Eq let68 let11)
  let let71 := (Eq let40 let40)
  let let72 := (binrel% HMul.hMul let2 x5x5fminus)
  let let73 := (binrel% HMul.hMul let2 x1x5fminus)
  let let74 := (binrel% HMul.hMul let2 x3x5fplus)
  let let75 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd x5x5fplus let72)))))))))
  let let76 := (binrel% HAdd.hAdd x1x5fplus let73)
  let let77 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 let76))))))))
  let let78 := (binrel% LT.lt let46 let14)
  let let79 := (binrel% HAdd.hAdd x3x5fplus let5)
  let let80 := (binrel% HSub.hSub x3x5fplus x3x5fminus)
  let let81 := (binrel% HMul.hMul let43 let14)
  let let82 := (binrel% HAdd.hAdd let37 let36)
  let let83 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x2x5fminus let82))))))
  let let84 := (Rat.ofInt 4)
  let let85 := (binrel% GT.gt let84 let14)
  let let86 := (Not True)
  let let87 := (binrel% LE.le let10 let14)
  let let88 := (Int.ofNat 4)
  let let89 := (Neg.neg let88)
  let let90 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let89 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let89 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let89 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x1x5fplus) (binrel% HMul.hMul let89 x1x5fminus)))))))))
  let let91 := (binrel% HDiv.hDiv (Int.ofNat 18) let15)
  let let92 := (binrel% HDiv.hDiv (Int.ofNat 9) let15)
  let let93 := (Neg.neg let92)
  let let94 := (binrel% HAdd.hAdd (binrel% HMul.hMul let93 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let92 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let93 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let92 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let91 x4x5fplus) (binrel% HMul.hMul (Neg.neg let91) x4x5fminus))))))
  let let95 := (binrel% HDiv.hDiv (Int.ofNat 58) let15)
  let let96 := (Neg.neg let95)
  let let97 := (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let95 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let95 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let95 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let95 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x5x5fplus) (binrel% HMul.hMul let95 x5x5fminus))))))))))
  let let98 := (Neg.neg let19)
  let let99 := (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x4x5fplus) (binrel% HMul.hMul let98 x4x5fminus))
  let let100 := (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x3x5fminus) let99))))
  let let101 := (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x0x5fminus) let99))))))))
  let let102 := (binrel% HAdd.hAdd (binrel% HMul.hMul let17 x3x5fplus) (binrel% HMul.hMul let16 x3x5fminus))
  let let103 := (Neg.neg let43)
  let let104 := (binrel% HDiv.hDiv (Int.ofNat 106) let15)
  let let105 := (binrel% HAdd.hAdd (binrel% HMul.hMul let43 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let103 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let103 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let43 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let104 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let104) x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let103 x4x5fplus) (binrel% HMul.hMul let43 x4x5fminus))))))))
  let let106 := (binrel% HDiv.hDiv (Int.ofNat 99) let15)
  let let107 := (Neg.neg let106)
  let let108 := (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let106 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let106 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let106 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x1x5fplus) (binrel% HMul.hMul let106 x1x5fminus))))))))
  let let109 := (Rat.ofInt let10)
  let let110 := (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let105 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let97 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let94 let90))))))))))
  let let111 := (binrel% LE.le let26 let14)
  let let112 := (Not let87)
  let let113 := (binrel% GT.gt let10 let14)
  let let114 := (Eq let113 let112)
  let let115 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 let4))
  let let116 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let5 let115))))))))
  let let117 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let5 let76))))))
  let let118 := (binrel% GE.ge let117 let1)
  let let119 := (Not let118)
  let let120 := (Not let119)
  let let121 := (Eq let118 let120)
  let let122 := (Eq let120 let118)
  let let123 := (Eq let11 let11)
  let let124 := (binrel% LT.lt let61 let14)
  let let125 := (binrel% LT.lt let98 let14)
  let let126 := (binrel% HAdd.hAdd x0x5fplus let23)
  let let127 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let21 let126))))))))
  let let128 := (Eq let27 let27)
  let let129 := (binrel% LE.le let117 let14)
  let let130 := (Not let28)
  let let131 := (Eq let130 let27)
  let let132 := (Eq let27 let130)
  let let133 := (binrel% LT.lt let96 let14)
  let let134 := (binrel% GE.ge let30 let30)
  let let135 := (binrel% LT.lt let93 let14)
  let let136 := (Eq let40 let66)
  let let137 := (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd x3x5fminus let33))))
  let let138 := (binrel% GE.ge let137 let14)
  let let139 := (binrel% HMul.hMul let2 x0x5fplus)
  let let140 := (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let5 let22))))
  let let141 := (binrel% LE.le let140 let14)
  let let142 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let53 let52)))))))))
  let let143 := (binrel% HMul.hMul let17 let14)
  let let144 := (binrel% HMul.hMul let96 let75)
  let let145 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x5x5fminus let22))))))
  let let146 := (binrel% LT.lt let107 let14)
  let let147 := (binrel% HMul.hMul let19 let26)
  let let148 := (binrel% HMul.hMul let93 let14)
  let let149 := (binrel% HAdd.hAdd let139 x0x5fminus)
  let let150 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let5 let149))))
  let let151 := (binrel% HMul.hMul let84 let117)
  let let152 := (binrel% HMul.hMul let17 let79)
  let let153 := (binrel% HMul.hMul let61 let14)
  let let154 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x4x5fplus) (binrel% HMul.hMul let34 x4x5fminus))))))
  let let155 := (binrel% HMul.hMul let93 let154)
  let let156 := (binrel% HMul.hMul let84 let14)
  let let157 := (binrel% HMul.hMul let98 let137)
  let let158 := (Eq let118 let118)
  let let159 := (binrel% HMul.hMul let107 let14)
  let let160 := (binrel% HMul.hMul let46 let14)
  let let161 := (binrel% HMul.hMul let43 let39)
  let let162 := (Rat.ofInt 1)
  let let163 := (binrel% HMul.hMul let162 let14)
  let let164 := (binrel% GT.gt let162 let14)
  let let165 := (binrel% HMul.hMul let96 let14)
  let let166 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fminus let76))))))
  let let167 := (binrel% HMul.hMul let107 let166)
  let let168 := (binrel% HMul.hMul let98 let14)
  let let169 := (binrel% HMul.hMul let162 let10)
  let let170 := (binrel% HMul.hMul let19 let14)
  let let171 := (binrel% HAdd.hAdd let163 (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let170 (binrel% HAdd.hAdd let168 (binrel% HAdd.hAdd let165 (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let148 let156))))))))))
  let let172 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let167 (binrel% HAdd.hAdd let161 (binrel% HAdd.hAdd let152 (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let157 (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let155 let151))))))))))
  let let173 := (binrel% GE.ge let172 let171)
  let let174 := (Not let173)
  let let175 := (binrel% LT.lt let172 let171)
  let let176 := (binrel% LT.lt let117 let1)
  let let177 := (binrel% GE.ge let80 let14)
  let let178 := (binrel% HMul.hMul let35 x7x5fminus)
  let let179 := (binrel% HMul.hMul let34 x7x5fplus)
  let let180 := (binrel% LE.le let116 let14)
  let let181 := (binrel% LE.le let127 let14)
  let let182 := (binrel% LE.le let83 let2)
  let let183 := (binrel% LE.le let150 let14)
  let let184 := (binrel% GE.ge let142 let14)
  let let185 := (binrel% GE.ge let77 let14)
  let let186 := (binrel% GE.ge let145 let14)
  let let187 := (binrel% GE.ge let166 let14)
  let let188 := (binrel% GE.ge let154 let14)
  let let189 := (binrel% GE.ge let79 let14)
  let let190 := (binrel% GE.ge let57 let14)
  let let191 := (binrel% GE.ge let75 let14)
  let let192 := (binrel% GE.ge let64 let14)
  let let193 := (Not let188)
  let let194 := (Not let187)
  let let195 := (Not let192)
  let let196 := (Not let191)
  let let197 := (Not let190)
  let let198 := (Not let138)
  let let199 := (Not let189)
  let let200 := (Or let118 (Or let193 (Or let195 (Or let197 (Or let196 (Or let198 (Or let27 (Or let199 (Or let40 (Or let194 let11))))))))))
  let let201 := (Or let120 (Or let193 (Or let195 (Or let197 (Or let196 (Or let198 (Or let130 (Or let199 (Or let66 (Or let194 let68))))))))))
  let let202 := (binrel% LE.le let151 let156)
  let let203 := (And let85 let129)
  let let204 := (binrel% LE.le let155 let148)
  let let205 := (And let135 let188)
  let let206 := (binrel% LE.le let65 let153)
  let let207 := (And let124 let192)
  let let208 := (binrel% LE.le let58 let160)
  let let209 := (And let78 let190)
  let let210 := (binrel% LE.le let144 let165)
  let let211 := (And let133 let191)
  let let212 := (binrel% LE.le let157 let168)
  let let213 := (And let125 let138)
  let let214 := (binrel% LE.le let147 let170)
  let let215 := (And let20 let111)
  let let216 := (binrel% LE.le let152 let143)
  let let217 := (And let18 let189)
  let let218 := (binrel% LT.lt let161 let81)
  let let219 := (And let44 let59)
  let let220 := (binrel% LE.le let167 let159)
  let let221 := (And let146 let187)
  let let222 := (binrel% LE.le let169 let163)
  let let223 := (And let164 let87)
(Eq let13 let12) → (Eq let18 True) → (Eq let20 True) → (Eq let29 let28) → (Eq let31 let30) → (Eq let42 let41) → (Eq let44 True) → (Eq let58 let49) → (Eq let59 let41) → (Eq let65 let62) → let67 → (Eq let70 let69) → (Eq let71 True) → (Eq let77 let75) → (Eq let78 True) → (Eq let80 let79) → (Eq let81 let30) → (Eq let83 let39) → (Eq let85 True) → (Eq let86 False) → (Eq let87 let12) → (Eq let110 let30) → (Eq let111 let28) → let114 → (Eq let116 let10) → (Eq let122 let121) → (Eq let123 True) → (Eq let124 True) → (Eq let125 True) → (Eq let127 let26) → (Eq let128 True) → (Eq let129 let119) → let131 → (Eq let131 let132) → (Eq let133 True) → (Eq let134 True) → (Eq let135 True) → (Eq let67 let136) → let70 → (Eq let141 let138) → (Eq let142 let57) → (Eq let143 let30) → (Eq let144 let97) → (Eq let145 let64) → (Eq let146 True) → (Eq let147 let101) → (Eq let148 let30) → (Eq let150 let140) → (Eq let151 let90) → (Eq let152 let102) → (Eq let153 let30) → (Eq let155 let94) → (Eq let156 let30) → (Eq let157 let100) → (Eq let158 True) → (Eq let159 let30) → (Eq let160 let30) → (Eq let161 let105) → let122 → (Eq let163 let30) → (Eq let164 True) → (Eq let165 let30) → (Eq let167 let108) → (Eq let168 let30) → (Eq let169 let109) → (Eq let170 let30) → (Eq let175 let174) → (Eq let176 let119) → (binrel% GE.ge x9x5fplus let14) → (binrel% GE.ge x9x5fminus let14) → (binrel% GE.ge x8x5fplus let14) → (binrel% GE.ge x8x5fminus let14) → (binrel% GE.ge x7x5fplus let14) → (binrel% GE.ge x7x5fminus let14) → (binrel% GE.ge x6x5fplus let14) → (binrel% GE.ge x6x5fminus let14) → (binrel% GE.ge x2x5fplus let14) → (binrel% GE.ge x2x5fminus let14) → (binrel% GE.ge x0x5fplus let14) → (binrel% GE.ge x0x5fminus let14) → (binrel% GE.ge x3x5fplus let14) → (binrel% GE.ge x3x5fminus let14) → (binrel% GE.ge x1x5fplus let14) → (binrel% GE.ge x1x5fminus let14) → (binrel% GE.ge x4x5fplus let14) → (binrel% GE.ge x4x5fminus let14) → (binrel% GE.ge x5x5fplus let14) → (binrel% GE.ge x5x5fminus let14) → (binrel% GE.ge (binrel% HSub.hSub x2x5fplus x2x5fminus) let1) → let177 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x2x5fminus let126)))))))))) let14) → let180 → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let34 x3x5fminus) let115)))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd x3x5fminus let149)))))))) let14) → let181 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let34 x7x5fminus) let76)))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x2x5fminus let76)))))) let14) → (binrel% LE.le (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let74 x3x5fminus))))))) let14) → let129 → let182 → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd x3x5fminus let76)))))) let14) → (binrel% LE.le (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x0x5fplus) (binrel% HMul.hMul let34 x0x5fminus)))))) let1) → let183 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let34 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x5x5fminus) (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus let149)))))))) let2) → let184 → let185 → let186 → let187 → let188 → (binrel% GE.ge (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x1x5fminus let126)))) let2) → (binrel% GE.ge (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let21 let82)) let2) → (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 let126)) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let38 x2x5fminus))) let14) → False :=
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x1x5fplus)
  let let4 := (binrel% HAdd.hAdd let3 x1x5fminus)
  let let5 := (binrel% HMul.hMul let2 x3x5fminus)
  let let6 := (binrel% HMul.hMul let2 x2x5fminus)
  let let7 := (binrel% HMul.hMul let2 x6x5fplus)
  let let8 := (binrel% HMul.hMul let2 x8x5fminus)
  let let9 := (binrel% HMul.hMul let2 x9x5fminus)
  let let10 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let5 let4))))))))))
  let let11 := (binrel% GE.ge let10 let1)
  let let12 := (Not let11)
  let let13 := (binrel% LT.lt let10 let1)
  let let14 := (Int.ofNat 0)
  let let15 := (Int.ofNat 17)
  let let16 := (binrel% HDiv.hDiv (Int.ofNat 166) let15)
  let let17 := (Neg.neg let16)
  let let18 := (binrel% LT.lt let17 let14)
  let let19 := (binrel% HDiv.hDiv (Int.ofNat 23) let15)
  let let20 := (binrel% GT.gt let19 let14)
  let let21 := (binrel% HMul.hMul let2 x4x5fminus)
  let let22 := (binrel% HAdd.hAdd x4x5fplus let21)
  let let23 := (binrel% HMul.hMul let2 x0x5fminus)
  let let24 := (binrel% HMul.hMul let2 x6x5fminus)
  let let25 := (binrel% HMul.hMul let2 x8x5fplus)
  let let26 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let23 let22))))))))
  let let27 := (binrel% GE.ge let26 let1)
  let let28 := (Not let27)
  let let29 := (binrel% LT.lt let26 let1)
  let let30 := (Rat.ofInt 0)
  let let31 := (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 let30))))))))))
  let let32 := (binrel% HMul.hMul let2 x4x5fplus)
  let let33 := (binrel% HAdd.hAdd let32 x4x5fminus)
  let let34 := (Int.ofNat 2)
  let let35 := (Neg.neg let34)
  let let36 := (binrel% HMul.hMul let35 x1x5fminus)
  let let37 := (binrel% HMul.hMul let34 x1x5fplus)
  let let38 := (binrel% HMul.hMul let2 x2x5fplus)
  let let39 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 let33))))))
  let let40 := (binrel% GE.ge let39 let14)
  let let41 := (Not let40)
  let let42 := (binrel% LE.le let39 let2)
  let let43 := (binrel% HDiv.hDiv (Int.ofNat 53) let15)
  let let44 := (binrel% GT.gt let43 let14)
  let let45 := (binrel% HDiv.hDiv (Int.ofNat 47) let15)
  let let46 := (Neg.neg let45)
  let let47 := (binrel% HDiv.hDiv (Int.ofNat 94) let15)
  let let48 := (Neg.neg let47)
  let let49 := (binrel% HAdd.hAdd (binrel% HMul.hMul let46 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let45 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let45 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let46 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let45 x5x5fplus) (binrel% HMul.hMul let46 x5x5fminus))))))))))
  let let50 := (binrel% HMul.hMul let2 x5x5fplus)
  let let51 := (binrel% HAdd.hAdd let50 x5x5fminus)
  let let52 := (binrel% HMul.hMul let34 x2x5fminus)
  let let53 := (binrel% HMul.hMul let35 x2x5fplus)
  let let54 := (binrel% HMul.hMul let35 x6x5fminus)
  let let55 := (binrel% HMul.hMul let34 x6x5fplus)
  let let56 := (binrel% HMul.hMul let2 x7x5fplus)
  let let57 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let52 let51))))))))
  let let58 := (binrel% HMul.hMul let46 let57)
  let let59 := (binrel% LT.lt let39 let14)
  let let60 := (binrel% HDiv.hDiv (Int.ofNat 11) let15)
  let let61 := (Neg.neg let60)
  let let62 := (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let61 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let60 x5x5fplus) (binrel% HMul.hMul let61 x5x5fminus))))))))
  let let63 := (binrel% HMul.hMul let2 x7x5fminus)
  let let64 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let21 let51))))))
  let let65 := (binrel% HMul.hMul let61 let64)
  let let66 := (Not let41)
  let let67 := (Eq let66 let40)
  let let68 := (Not let12)
  let let69 := (Eq let11 let68)
  let let70 := (Eq let68 let11)
  let let71 := (Eq let40 let40)
  let let72 := (binrel% HMul.hMul let2 x5x5fminus)
  let let73 := (binrel% HMul.hMul let2 x1x5fminus)
  let let74 := (binrel% HMul.hMul let2 x3x5fplus)
  let let75 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd x5x5fplus let72)))))))))
  let let76 := (binrel% HAdd.hAdd x1x5fplus let73)
  let let77 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 let76))))))))
  let let78 := (binrel% LT.lt let46 let14)
  let let79 := (binrel% HAdd.hAdd x3x5fplus let5)
  let let80 := (binrel% HSub.hSub x3x5fplus x3x5fminus)
  let let81 := (binrel% HMul.hMul let43 let14)
  let let82 := (binrel% HAdd.hAdd let37 let36)
  let let83 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x2x5fminus let82))))))
  let let84 := (Rat.ofInt 4)
  let let85 := (binrel% GT.gt let84 let14)
  let let86 := (Not True)
  let let87 := (binrel% LE.le let10 let14)
  let let88 := (Int.ofNat 4)
  let let89 := (Neg.neg let88)
  let let90 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let89 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let89 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let89 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x1x5fplus) (binrel% HMul.hMul let89 x1x5fminus)))))))))
  let let91 := (binrel% HDiv.hDiv (Int.ofNat 18) let15)
  let let92 := (binrel% HDiv.hDiv (Int.ofNat 9) let15)
  let let93 := (Neg.neg let92)
  let let94 := (binrel% HAdd.hAdd (binrel% HMul.hMul let93 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let92 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let93 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let92 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let91 x4x5fplus) (binrel% HMul.hMul (Neg.neg let91) x4x5fminus))))))
  let let95 := (binrel% HDiv.hDiv (Int.ofNat 58) let15)
  let let96 := (Neg.neg let95)
  let let97 := (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let95 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let95 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let95 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let95 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let96 x5x5fplus) (binrel% HMul.hMul let95 x5x5fminus))))))))))
  let let98 := (Neg.neg let19)
  let let99 := (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x4x5fplus) (binrel% HMul.hMul let98 x4x5fminus))
  let let100 := (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x3x5fminus) let99))))
  let let101 := (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x0x5fminus) let99))))))))
  let let102 := (binrel% HAdd.hAdd (binrel% HMul.hMul let17 x3x5fplus) (binrel% HMul.hMul let16 x3x5fminus))
  let let103 := (Neg.neg let43)
  let let104 := (binrel% HDiv.hDiv (Int.ofNat 106) let15)
  let let105 := (binrel% HAdd.hAdd (binrel% HMul.hMul let43 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let103 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let103 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let43 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let104 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let104) x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let103 x4x5fplus) (binrel% HMul.hMul let43 x4x5fminus))))))))
  let let106 := (binrel% HDiv.hDiv (Int.ofNat 99) let15)
  let let107 := (Neg.neg let106)
  let let108 := (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let106 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let106 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let106 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x1x5fplus) (binrel% HMul.hMul let106 x1x5fminus))))))))
  let let109 := (Rat.ofInt let10)
  let let110 := (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let105 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let97 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let94 let90))))))))))
  let let111 := (binrel% LE.le let26 let14)
  let let112 := (Not let87)
  let let113 := (binrel% GT.gt let10 let14)
  let let114 := (Eq let113 let112)
  let let115 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let6 let4))
  let let116 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let5 let115))))))))
  let let117 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let5 let76))))))
  let let118 := (binrel% GE.ge let117 let1)
  let let119 := (Not let118)
  let let120 := (Not let119)
  let let121 := (Eq let118 let120)
  let let122 := (Eq let120 let118)
  let let123 := (Eq let11 let11)
  let let124 := (binrel% LT.lt let61 let14)
  let let125 := (binrel% LT.lt let98 let14)
  let let126 := (binrel% HAdd.hAdd x0x5fplus let23)
  let let127 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let21 let126))))))))
  let let128 := (Eq let27 let27)
  let let129 := (binrel% LE.le let117 let14)
  let let130 := (Not let28)
  let let131 := (Eq let130 let27)
  let let132 := (Eq let27 let130)
  let let133 := (binrel% LT.lt let96 let14)
  let let134 := (binrel% GE.ge let30 let30)
  let let135 := (binrel% LT.lt let93 let14)
  let let136 := (Eq let40 let66)
  let let137 := (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd x3x5fminus let33))))
  let let138 := (binrel% GE.ge let137 let14)
  let let139 := (binrel% HMul.hMul let2 x0x5fplus)
  let let140 := (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let5 let22))))
  let let141 := (binrel% LE.le let140 let14)
  let let142 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let53 let52)))))))))
  let let143 := (binrel% HMul.hMul let17 let14)
  let let144 := (binrel% HMul.hMul let96 let75)
  let let145 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x5x5fminus let22))))))
  let let146 := (binrel% LT.lt let107 let14)
  let let147 := (binrel% HMul.hMul let19 let26)
  let let148 := (binrel% HMul.hMul let93 let14)
  let let149 := (binrel% HAdd.hAdd let139 x0x5fminus)
  let let150 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let5 let149))))
  let let151 := (binrel% HMul.hMul let84 let117)
  let let152 := (binrel% HMul.hMul let17 let79)
  let let153 := (binrel% HMul.hMul let61 let14)
  let let154 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x4x5fplus) (binrel% HMul.hMul let34 x4x5fminus))))))
  let let155 := (binrel% HMul.hMul let93 let154)
  let let156 := (binrel% HMul.hMul let84 let14)
  let let157 := (binrel% HMul.hMul let98 let137)
  let let158 := (Eq let118 let118)
  let let159 := (binrel% HMul.hMul let107 let14)
  let let160 := (binrel% HMul.hMul let46 let14)
  let let161 := (binrel% HMul.hMul let43 let39)
  let let162 := (Rat.ofInt 1)
  let let163 := (binrel% HMul.hMul let162 let14)
  let let164 := (binrel% GT.gt let162 let14)
  let let165 := (binrel% HMul.hMul let96 let14)
  let let166 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fminus let76))))))
  let let167 := (binrel% HMul.hMul let107 let166)
  let let168 := (binrel% HMul.hMul let98 let14)
  let let169 := (binrel% HMul.hMul let162 let10)
  let let170 := (binrel% HMul.hMul let19 let14)
  let let171 := (binrel% HAdd.hAdd let163 (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let170 (binrel% HAdd.hAdd let168 (binrel% HAdd.hAdd let165 (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let148 let156))))))))))
  let let172 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let167 (binrel% HAdd.hAdd let161 (binrel% HAdd.hAdd let152 (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let157 (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let155 let151))))))))))
  let let173 := (binrel% GE.ge let172 let171)
  let let174 := (Not let173)
  let let175 := (binrel% LT.lt let172 let171)
  let let176 := (binrel% LT.lt let117 let1)
  let let177 := (binrel% GE.ge let80 let14)
  let let178 := (binrel% HMul.hMul let35 x7x5fminus)
  let let179 := (binrel% HMul.hMul let34 x7x5fplus)
  let let180 := (binrel% LE.le let116 let14)
  let let181 := (binrel% LE.le let127 let14)
  let let182 := (binrel% LE.le let83 let2)
  let let183 := (binrel% LE.le let150 let14)
  let let184 := (binrel% GE.ge let142 let14)
  let let185 := (binrel% GE.ge let77 let14)
  let let186 := (binrel% GE.ge let145 let14)
  let let187 := (binrel% GE.ge let166 let14)
  let let188 := (binrel% GE.ge let154 let14)
  let let189 := (binrel% GE.ge let79 let14)
  let let190 := (binrel% GE.ge let57 let14)
  let let191 := (binrel% GE.ge let75 let14)
  let let192 := (binrel% GE.ge let64 let14)
  let let193 := (Not let188)
  let let194 := (Not let187)
  let let195 := (Not let192)
  let let196 := (Not let191)
  let let197 := (Not let190)
  let let198 := (Not let138)
  let let199 := (Not let189)
  let let200 := (Or let118 (Or let193 (Or let195 (Or let197 (Or let196 (Or let198 (Or let27 (Or let199 (Or let40 (Or let194 let11))))))))))
  let let201 := (Or let120 (Or let193 (Or let195 (Or let197 (Or let196 (Or let198 (Or let130 (Or let199 (Or let66 (Or let194 let68))))))))))
  let let202 := (binrel% LE.le let151 let156)
  let let203 := (And let85 let129)
  let let204 := (binrel% LE.le let155 let148)
  let let205 := (And let135 let188)
  let let206 := (binrel% LE.le let65 let153)
  let let207 := (And let124 let192)
  let let208 := (binrel% LE.le let58 let160)
  let let209 := (And let78 let190)
  let let210 := (binrel% LE.le let144 let165)
  let let211 := (And let133 let191)
  let let212 := (binrel% LE.le let157 let168)
  let let213 := (And let125 let138)
  let let214 := (binrel% LE.le let147 let170)
  let let215 := (And let20 let111)
  let let216 := (binrel% LE.le let152 let143)
  let let217 := (And let18 let189)
  let let218 := (binrel% LT.lt let161 let81)
  let let219 := (And let44 let59)
  let let220 := (binrel% LE.le let167 let159)
  let let221 := (And let146 let187)
  let let222 := (binrel% LE.le let169 let163)
  let let223 := (And let164 let87)
fun lean_r0 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let18 True) => -- EVALUATE
fun lean_r2 : (Eq let20 True) => -- EVALUATE
fun lean_r3 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let44 True) => -- EVALUATE
fun lean_r7 : (Eq let58 let49) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let59 let41) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let65 let62) => -- THEORY_REWRITE_ARITH
fun lean_r10 : let67 => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let70 let69) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let71 True) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let77 let75) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let78 True) => -- EVALUATE
fun lean_r15 : (Eq let80 let79) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let81 let30) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let83 let39) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let85 True) => -- EVALUATE
fun lean_r19 : (Eq let86 False) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let87 let12) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let110 let30) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let111 let28) => -- THEORY_REWRITE_ARITH
fun lean_r23 : let114 => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let116 let10) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let122 let121) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let123 True) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let124 True) => -- EVALUATE
fun lean_r28 : (Eq let125 True) => -- EVALUATE
fun lean_r29 : (Eq let127 let26) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let128 True) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let129 let119) => -- THEORY_REWRITE_ARITH
fun lean_r32 : let131 => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let131 let132) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let133 True) => -- EVALUATE
fun lean_r35 : (Eq let134 True) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let135 True) => -- EVALUATE
fun lean_r37 : (Eq let67 let136) => -- THEORY_REWRITE_BOOL
fun lean_r38 : let70 => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let141 let138) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let142 let57) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let143 let30) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let144 let97) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let145 let64) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let146 True) => -- EVALUATE
fun lean_r45 : (Eq let147 let101) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let148 let30) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let150 let140) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let151 let90) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let152 let102) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let153 let30) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let155 let94) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let156 let30) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let157 let100) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let158 True) => -- THEORY_REWRITE_BOOL
fun lean_r55 : (Eq let159 let30) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let160 let30) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let161 let105) => -- THEORY_REWRITE_ARITH
fun lean_r58 : let122 => -- THEORY_REWRITE_BOOL
fun lean_r59 : (Eq let163 let30) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let164 True) => -- EVALUATE
fun lean_r61 : (Eq let165 let30) => -- THEORY_REWRITE_ARITH
fun lean_r62 : (Eq let167 let108) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let168 let30) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq let169 let109) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let170 let30) => -- THEORY_REWRITE_ARITH
fun lean_r66 : (Eq let175 let174) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq let176 let119) => -- THEORY_REWRITE_ARITH
fun lean_a68 : (binrel% GE.ge x9x5fplus let14) =>
fun lean_a69 : (binrel% GE.ge x9x5fminus let14) =>
fun lean_a70 : (binrel% GE.ge x8x5fplus let14) =>
fun lean_a71 : (binrel% GE.ge x8x5fminus let14) =>
fun lean_a72 : (binrel% GE.ge x7x5fplus let14) =>
fun lean_a73 : (binrel% GE.ge x7x5fminus let14) =>
fun lean_a74 : (binrel% GE.ge x6x5fplus let14) =>
fun lean_a75 : (binrel% GE.ge x6x5fminus let14) =>
fun lean_a76 : (binrel% GE.ge x2x5fplus let14) =>
fun lean_a77 : (binrel% GE.ge x2x5fminus let14) =>
fun lean_a78 : (binrel% GE.ge x0x5fplus let14) =>
fun lean_a79 : (binrel% GE.ge x0x5fminus let14) =>
fun lean_a80 : (binrel% GE.ge x3x5fplus let14) =>
fun lean_a81 : (binrel% GE.ge x3x5fminus let14) =>
fun lean_a82 : (binrel% GE.ge x1x5fplus let14) =>
fun lean_a83 : (binrel% GE.ge x1x5fminus let14) =>
fun lean_a84 : (binrel% GE.ge x4x5fplus let14) =>
fun lean_a85 : (binrel% GE.ge x4x5fminus let14) =>
fun lean_a86 : (binrel% GE.ge x5x5fplus let14) =>
fun lean_a87 : (binrel% GE.ge x5x5fminus let14) =>
fun lean_a88 : (binrel% GE.ge (binrel% HSub.hSub x2x5fplus x2x5fminus) let1) =>
fun lean_a89 : let177 =>
fun lean_a90 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x2x5fminus let126)))))))))) let14) =>
fun lean_a91 : let180 =>
fun lean_a92 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let34 x3x5fminus) let115)))))) let1) =>
fun lean_a93 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd x3x5fminus let149)))))))) let14) =>
fun lean_a94 : let181 =>
fun lean_a95 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let34 x7x5fminus) let76)))))) let1) =>
fun lean_a96 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x2x5fminus let76)))))) let14) =>
fun lean_a97 : (binrel% LE.le (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let74 x3x5fminus))))))) let14) =>
fun lean_a98 : let129 =>
fun lean_a99 : let182 =>
fun lean_a100 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd x3x5fminus let76)))))) let14) =>
fun lean_a101 : (binrel% LE.le (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x0x5fplus) (binrel% HMul.hMul let34 x0x5fminus)))))) let1) =>
fun lean_a102 : let183 =>
fun lean_a103 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let34 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x5x5fminus) (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus let149)))))))) let2) =>
fun lean_a104 : let184 =>
fun lean_a105 : let185 =>
fun lean_a106 : let186 =>
fun lean_a107 : let187 =>
fun lean_a108 : let188 =>
fun lean_a109 : (binrel% GE.ge (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x1x5fminus let126)))) let2) =>
fun lean_a110 : (binrel% GE.ge (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let21 let82)) let2) =>
fun lean_a111 : (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let63 let126)) let1) =>
fun lean_a112 : (binrel% GE.ge (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let38 x2x5fminus))) let14) => by
have lean_s0 : (Or let120 (Or let193 (Or let195 (Or let197 (Or let196 (Or let198 (Or let130 (Or let199 (Or let66 (Or let194 (Or let68 False))))))))))) :=
  (scope (fun lean_a113 : let119 =>
    (scope (fun lean_a114 : let188 =>
      (scope (fun lean_a115 : let192 =>
        (scope (fun lean_a116 : let190 =>
          (scope (fun lean_a117 : let191 =>
            (scope (fun lean_a118 : let138 =>
              (scope (fun lean_a119 : let28 =>
                (scope (fun lean_a120 : let189 =>
                  (scope (fun lean_a121 : let41 =>
                    (scope (fun lean_a122 : let187 =>
                      (scope (fun lean_a123 : let12 =>
                        let lean_s0 := by timed flipCongrArg lean_r24 [LE.le]
                        have lean_s1 : (Eq let14 let14) := by timed rfl
                        have lean_s2 : (Eq let180 let87) := by timed congr lean_s0 lean_s1
                        have lean_s3 : (Eq let180 let12) := by timed Eq.trans lean_s2 lean_r20
                        have lean_s4 : let12 := by timed eqResolve lean_a91 lean_s3
                        have lean_s5 : (Eq let12 let13) := by timed Eq.symm lean_r0
                        have lean_s6 : let13 := by timed eqResolve lean_s4 lean_s5
                        have lean_s7 : let87 := by intTightUb lean_s6
                        have lean_s8 : (Or let112 False) :=
                          (scope (fun lean_a122 : let87 =>
                            have lean_s8 : let164 := by timed trueElim lean_r60
                            have lean_s9 : let223 := by timed And.intro lean_s8 lean_a122
                            have lean_s10 : (Implies let223 let222) := by arithMulPos [let10, let14, let162], 1
                            have lean_s11 : let222 := by timed modusPonens lean_s9 lean_s10
                            have lean_s12 : let146 := by timed trueElim lean_r44
                            have lean_s13 : let221 := by timed And.intro lean_s12 lean_a122
                            have lean_s14 : (Implies let221 let220) := by arithMulNeg [let166, let14, let107], 3
                            have lean_s15 : let220 := by timed modusPonens lean_s13 lean_s14
                            have lean_s16 : let44 := by timed trueElim lean_r6
                            let lean_s17 := by timed flipCongrArg lean_r17 [LE.le]
                            have lean_s18 : (Eq let2 let2) := by timed rfl
                            have lean_s19 : (Eq let182 let42) := by timed congr lean_s17 lean_s18
                            have lean_s20 : (Eq let182 let41) := by timed Eq.trans lean_s19 lean_r5
                            have lean_s21 : let41 := by timed eqResolve lean_a99 lean_s20
                            have lean_s22 : (Eq let41 let59) := by timed Eq.symm lean_r8
                            have lean_s23 : let59 := by timed eqResolve lean_s21 lean_s22
                            have lean_s24 : let219 := by timed And.intro lean_s16 lean_s23
                            have lean_s25 : (Implies let219 let218) := by arithMulPos [let39, let14, let43], 0
                            have lean_s26 : let218 := by timed modusPonens lean_s24 lean_s25
                            have lean_s27 : let18 := by timed trueElim lean_r1
                            let lean_s28 := by timed flipCongrArg lean_r15 [GE.ge]
                            have lean_s29 : (Eq let177 let189) := by timed congr lean_s28 lean_s1
                            have lean_s30 : let189 := by timed eqResolve lean_a89 lean_s29
                            have lean_s31 : let217 := by timed And.intro lean_s27 lean_s30
                            have lean_s32 : (Implies let217 let216) := by arithMulNeg [let79, let14, let17], 3
                            have lean_s33 : let216 := by timed modusPonens lean_s31 lean_s32
                            have lean_s34 : let20 := by timed trueElim lean_r2
                            let lean_s35 := by timed flipCongrArg lean_r29 [LE.le]
                            have lean_s36 : (Eq let181 let111) := by timed congr lean_s35 lean_s1
                            have lean_s37 : (Eq let181 let28) := by timed Eq.trans lean_s36 lean_r22
                            have lean_s38 : let28 := by timed eqResolve lean_a94 lean_s37
                            have lean_s39 : (Eq let28 let29) := by timed Eq.symm lean_r3
                            have lean_s40 : let29 := by timed eqResolve lean_s38 lean_s39
                            have lean_s41 : let111 := by intTightUb lean_s40
                            have lean_s42 : let215 := by timed And.intro lean_s34 lean_s41
                            have lean_s43 : (Implies let215 let214) := by arithMulPos [let26, let14, let19], 1
                            have lean_s44 : let214 := by timed modusPonens lean_s42 lean_s43
                            have lean_s45 : let125 := by timed trueElim lean_r28
                            let lean_s46 := by timed flipCongrArg lean_r47 [LE.le]
                            have lean_s47 : (Eq let183 let141) := by timed congr lean_s46 lean_s1
                            have lean_s48 : (Eq let183 let138) := by timed Eq.trans lean_s47 lean_r39
                            have lean_s49 : let138 := by timed eqResolve lean_a102 lean_s48
                            have lean_s50 : let213 := by timed And.intro lean_s45 lean_s49
                            have lean_s51 : (Implies let213 let212) := by arithMulNeg [let137, let14, let98], 3
                            have lean_s52 : let212 := by timed modusPonens lean_s50 lean_s51
                            have lean_s53 : let133 := by timed trueElim lean_r34
                            let lean_s54 := by timed flipCongrArg lean_r13 [GE.ge]
                            have lean_s55 : (Eq let185 let191) := by timed congr lean_s54 lean_s1
                            have lean_s56 : let191 := by timed eqResolve lean_a105 lean_s55
                            have lean_s57 : let211 := by timed And.intro lean_s53 lean_s56
                            have lean_s58 : (Implies let211 let210) := by arithMulNeg [let75, let14, let96], 3
                            have lean_s59 : let210 := by timed modusPonens lean_s57 lean_s58
                            have lean_s60 : let78 := by timed trueElim lean_r14
                            let lean_s61 := by timed flipCongrArg lean_r40 [GE.ge]
                            have lean_s62 : (Eq let184 let190) := by timed congr lean_s61 lean_s1
                            have lean_s63 : let190 := by timed eqResolve lean_a104 lean_s62
                            have lean_s64 : let209 := by timed And.intro lean_s60 lean_s63
                            have lean_s65 : (Implies let209 let208) := by arithMulNeg [let57, let14, let46], 3
                            have lean_s66 : let208 := by timed modusPonens lean_s64 lean_s65
                            have lean_s67 : let124 := by timed trueElim lean_r27
                            let lean_s68 := by timed flipCongrArg lean_r43 [GE.ge]
                            have lean_s69 : (Eq let186 let192) := by timed congr lean_s68 lean_s1
                            have lean_s70 : let192 := by timed eqResolve lean_a106 lean_s69
                            have lean_s71 : let207 := by timed And.intro lean_s67 lean_s70
                            have lean_s72 : (Implies let207 let206) := by arithMulNeg [let64, let14, let61], 3
                            have lean_s73 : let206 := by timed modusPonens lean_s71 lean_s72
                            have lean_s74 : let135 := by timed trueElim lean_r36
                            have lean_s75 : let205 := by timed And.intro lean_s74 lean_a114
                            have lean_s76 : (Implies let205 let204) := by arithMulNeg [let154, let14, let93], 3
                            have lean_s77 : let204 := by timed modusPonens lean_s75 lean_s76
                            have lean_s78 : let85 := by timed trueElim lean_r18
                            have lean_s79 : let119 := by timed eqResolve lean_a98 lean_r31
                            have lean_s80 : (Eq let119 let176) := by timed Eq.symm lean_r67
                            have lean_s81 : let176 := by timed eqResolve lean_s79 lean_s80
                            have lean_s82 : let129 := by intTightUb lean_s81
                            have lean_s83 : let203 := by timed And.intro lean_s78 lean_s82
                            have lean_s84 : (Implies let203 let202) := by arithMulPos [let117, let14, let84], 1
                            have lean_s85 : let202 := by timed modusPonens lean_s83 lean_s84
                            have lean_s86 : let175 := by sumBounds [lean_s11, lean_s15, lean_s26, lean_s33, lean_s44, lean_s52, lean_s59, lean_s66, lean_s73, lean_s77, lean_s85]
                            let lean_s87 := by timed congrHAdd lean_r51 lean_r48
                            let lean_s88 := by timed congrHAdd lean_r9 lean_s87
                            let lean_s89 := by timed congrHAdd lean_r7 lean_s88
                            let lean_s90 := by timed congrHAdd lean_r42 lean_s89
                            let lean_s91 := by timed congrHAdd lean_r53 lean_s90
                            let lean_s92 := by timed congrHAdd lean_r45 lean_s91
                            let lean_s93 := by timed congrHAdd lean_r49 lean_s92
                            let lean_s94 := by timed congrHAdd lean_r57 lean_s93
                            let lean_s95 := by timed congrHAdd lean_r62 lean_s94
                            have lean_s96 : (Eq let172 let110) := by timed congrHAdd lean_r64 lean_s95
                            have lean_s97 : (Eq let172 let30) := by timed Eq.trans lean_s96 lean_r21
                            let lean_s98 := by timed flipCongrArg lean_s97 [GE.ge]
                            let lean_s99 := by timed congrHAdd lean_r46 lean_r52
                            let lean_s100 := by timed congrHAdd lean_r50 lean_s99
                            let lean_s101 := by timed congrHAdd lean_r56 lean_s100
                            let lean_s102 := by timed congrHAdd lean_r61 lean_s101
                            let lean_s103 := by timed congrHAdd lean_r63 lean_s102
                            let lean_s104 := by timed congrHAdd lean_r65 lean_s103
                            let lean_s105 := by timed congrHAdd lean_r41 lean_s104
                            let lean_s106 := by timed congrHAdd lean_r16 lean_s105
                            let lean_s107 := by timed congrHAdd lean_r55 lean_s106
                            have lean_s108 : (Eq let171 let31) := by timed congrHAdd lean_r59 lean_s107
                            have lean_s109 : (Eq let171 let30) := by timed Eq.trans lean_s108 lean_r4
                            have lean_s110 : (Eq let173 let134) := by timed congr lean_s98 lean_s109
                            have lean_s111 : (Eq let173 True) := by timed Eq.trans lean_s110 lean_r35
                            have lean_s112 : (Eq let174 let86) := by timed flipCongrArg lean_s111 [Not]
                            have lean_s113 : (Eq let174 False) := by timed Eq.trans lean_s112 lean_r19
                            have lean_s114 : (Eq let175 False) := by timed Eq.trans lean_r66 lean_s113
                            show False from by timed eqResolve lean_s86 lean_s114
                          ))
                        have lean_s9 : let112 := by liftOrNToNeg lean_s8
                        have lean_s10 : (Eq let112 let68) := by timed flipCongrArg lean_r20 [Not]
                        have lean_s11 : (Eq let112 let11) := by timed Eq.trans lean_s10 lean_r38
                        have lean_s12 : (Eq let113 let11) := by timed Eq.trans lean_r23 lean_s11
                        have lean_s13 : (Eq let11 let113) := by timed Eq.symm lean_s12
                        have lean_s14 : (Eq let112 let113) := by timed Eq.trans lean_s11 lean_s13
                        have lean_s15 : let113 := by timed eqResolve lean_s9 lean_s14
                        have lean_s16 : (Eq let11 let112) := by timed Eq.symm lean_s11
                        have lean_s17 : let114 := by timed Eq.trans lean_s12 lean_s16
                        have lean_s18 : let112 := by timed eqResolve lean_s15 lean_s17
                        show False from by timed contradiction lean_s7 lean_s18
  ))))))))))))))))))))))
have lean_s1 : (Not (And let119 (And let188 (And let192 (And let190 (And let191 (And let138 (And let28 (And let189 (And let41 (And let187 let12))))))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let201 := by timed flipNotAnd lean_s1 [let119, let188, let192, let190, let191, let138, let28, let189, let41, let187, let12]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let158 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let121 let158) := by timed congr lean_s5 lean_r58
have lean_s7 : (Eq let121 True) := by timed Eq.trans lean_s6 lean_r54
have lean_s8 : (Eq let122 True) := by timed Eq.trans lean_r25 lean_s7
have lean_s9 : let122 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq let193 let193) := by timed rfl
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq let195 let195) := by timed rfl
let lean_s14 := by timed congr lean_s3 lean_s13
have lean_s15 : (Eq let197 let197) := by timed rfl
let lean_s16 := by timed congr lean_s3 lean_s15
have lean_s17 : (Eq let196 let196) := by timed rfl
let lean_s18 := by timed congr lean_s3 lean_s17
have lean_s19 : (Eq let198 let198) := by timed rfl
let lean_s20 := by timed congr lean_s3 lean_s19
have lean_s21 : let128 := by timed rfl
let lean_s22 := by timed flipCongrArg lean_s21 [Eq]
have lean_s23 : (Eq let132 let128) := by timed congr lean_s22 lean_r32
have lean_s24 : (Eq let132 True) := by timed Eq.trans lean_s23 lean_r30
have lean_s25 : (Eq let131 True) := by timed Eq.trans lean_r33 lean_s24
have lean_s26 : let131 := by timed trueElim lean_s25
let lean_s27 := by timed congr lean_s3 lean_s26
have lean_s28 : (Eq let199 let199) := by timed rfl
let lean_s29 := by timed congr lean_s3 lean_s28
have lean_s30 : let71 := by timed rfl
let lean_s31 := by timed flipCongrArg lean_s30 [Eq]
have lean_s32 : (Eq let136 let71) := by timed congr lean_s31 lean_r10
have lean_s33 : (Eq let136 True) := by timed Eq.trans lean_s32 lean_r12
have lean_s34 : (Eq let67 True) := by timed Eq.trans lean_r37 lean_s33
have lean_s35 : let67 := by timed trueElim lean_s34
let lean_s36 := by timed congr lean_s3 lean_s35
have lean_s37 : (Eq let194 let194) := by timed rfl
let lean_s38 := by timed congr lean_s3 lean_s37
have lean_s39 : let123 := by timed rfl
let lean_s40 := by timed flipCongrArg lean_s39 [Eq]
have lean_s41 : (Eq let69 let123) := by timed congr lean_s40 lean_r38
have lean_s42 : (Eq let69 True) := by timed Eq.trans lean_s41 lean_r26
have lean_s43 : (Eq let70 True) := by timed Eq.trans lean_r11 lean_s42
have lean_s44 : let70 := by timed trueElim lean_s43
let lean_s45 := by timed congr lean_s38 lean_s44
let lean_s46 := by timed congr lean_s36 lean_s45
let lean_s47 := by timed congr lean_s29 lean_s46
let lean_s48 := by timed congr lean_s27 lean_s47
let lean_s49 := by timed congr lean_s20 lean_s48
let lean_s50 := by timed congr lean_s18 lean_s49
let lean_s51 := by timed congr lean_s16 lean_s50
let lean_s52 := by timed congr lean_s14 lean_s51
let lean_s53 := by timed congr lean_s12 lean_s52
have lean_s54 : (Eq let201 let200) := by timed congr lean_s10 lean_s53
have lean_s55 : let200 := by timed eqResolve lean_s2 lean_s54
have lean_s56 : (Or let11 (Or let27 (Or let118 (Or let40 (Or let199 (Or let198 (Or let197 (Or let196 (Or let195 (Or let194 let193)))))))))) := by permutateOr lean_s55, [10, 6, 0, 8, 7, 5, 3, 4, 2, 9, 1], (- 1)
let lean_s57 := by R2 lean_s56, lean_a108, let188, [(- 1), 0]
let lean_s58 := by R2 lean_s57, lean_a107, let187, [(- 1), 0]
let lean_s59 := by timed flipCongrArg lean_r43 [GE.ge]
have lean_s60 : (Eq let14 let14) := by timed rfl
have lean_s61 : (Eq let186 let192) := by timed congr lean_s59 lean_s60
have lean_s62 : let192 := by timed eqResolve lean_a106 lean_s61
let lean_s63 := by R2 lean_s58, lean_s62, let192, [(- 1), 0]
let lean_s64 := by timed flipCongrArg lean_r13 [GE.ge]
have lean_s65 : (Eq let185 let191) := by timed congr lean_s64 lean_s60
have lean_s66 : let191 := by timed eqResolve lean_a105 lean_s65
let lean_s67 := by R2 lean_s63, lean_s66, let191, [(- 1), 0]
let lean_s68 := by timed flipCongrArg lean_r40 [GE.ge]
have lean_s69 : (Eq let184 let190) := by timed congr lean_s68 lean_s60
have lean_s70 : let190 := by timed eqResolve lean_a104 lean_s69
let lean_s71 := by R2 lean_s67, lean_s70, let190, [(- 1), 0]
let lean_s72 := by timed flipCongrArg lean_r47 [LE.le]
have lean_s73 : (Eq let183 let141) := by timed congr lean_s72 lean_s60
have lean_s74 : (Eq let183 let138) := by timed Eq.trans lean_s73 lean_r39
have lean_s75 : let138 := by timed eqResolve lean_a102 lean_s74
let lean_s76 := by R2 lean_s71, lean_s75, let138, [(- 1), 0]
let lean_s77 := by timed flipCongrArg lean_r17 [LE.le]
have lean_s78 : (Eq let2 let2) := by timed rfl
have lean_s79 : (Eq let182 let42) := by timed congr lean_s77 lean_s78
have lean_s80 : (Eq let182 let41) := by timed Eq.trans lean_s79 lean_r5
have lean_s81 : let41 := by timed eqResolve lean_a99 lean_s80
let lean_s82 := by R1 lean_s76, lean_s81, let40, [(- 1), 0]
have lean_s83 : let119 := by timed eqResolve lean_a98 lean_r31
let lean_s84 := by R1 lean_s82, lean_s83, let118, [(- 1), 0]
let lean_s85 := by timed flipCongrArg lean_r29 [LE.le]
have lean_s86 : (Eq let181 let111) := by timed congr lean_s85 lean_s60
have lean_s87 : (Eq let181 let28) := by timed Eq.trans lean_s86 lean_r22
have lean_s88 : let28 := by timed eqResolve lean_a94 lean_s87
let lean_s89 := by R1 lean_s84, lean_s88, let27, [(- 1), 0]
let lean_s90 := by timed flipCongrArg lean_r24 [LE.le]
have lean_s91 : (Eq let180 let87) := by timed congr lean_s90 lean_s60
have lean_s92 : (Eq let180 let12) := by timed Eq.trans lean_s91 lean_r20
have lean_s93 : let12 := by timed eqResolve lean_a91 lean_s92
let lean_s94 := by R1 lean_s89, lean_s93, let11, [(- 1), 0]
let lean_s95 := by timed flipCongrArg lean_r15 [GE.ge]
have lean_s96 : (Eq let177 let189) := by timed congr lean_s95 lean_s60
have lean_s97 : let189 := by timed eqResolve lean_a89 lean_s96
exact (show False from by R2 lean_s94, lean_s97, let189, [0, 0])


