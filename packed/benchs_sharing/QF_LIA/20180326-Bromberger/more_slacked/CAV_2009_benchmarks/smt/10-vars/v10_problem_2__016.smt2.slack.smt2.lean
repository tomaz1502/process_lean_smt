open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x8x5fplus : Int}
variable {x8x5fminus : Int}
variable {x2x5fplus : Int}
variable {x8x5fminus : Int}
variable {x9x5fplus : Int}
variable {x4x5fplus : Int}
variable {x2x5fplus : Int}
variable {x2x5fminus : Int}
variable {x2x5fminus : Int}
variable {x6x5fminus : Int}
variable {x9x5fminus : Int}
variable {x3x5fminus : Int}
variable {x7x5fplus : Int}
variable {x6x5fplus : Int}
variable {x4x5fminus : Int}
variable {x1x5fplus : Int}
variable {x9x5fplus : Int}
variable {x1x5fplus : Int}
variable {x1x5fminus : Int}
variable {x6x5fminus : Int}
variable {x0x5fminus : Int}
variable {x5x5fminus : Int}
variable {x7x5fminus : Int}
variable {x5x5fplus : Int}
variable {x4x5fminus : Int}
variable {x3x5fminus : Int}
variable {x4x5fplus : Int}
variable {x7x5fminus : Int}
variable {x3x5fplus : Int}
variable {x7x5fplus : Int}
variable {x8x5fplus : Int}
variable {x1x5fminus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x3x5fplus : Int}
variable {x0x5fplus : Int}
variable {x6x5fplus : Int}
variable {x9x5fminus : Int}

theorem th0 :
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x2x5fplus)
  let let4 := (binrel% HMul.hMul let2 x6x5fminus)
  let let5 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let2 x0x5fminus))))))
  let let6 := (binrel% GE.ge let5 let1)
  let let7 := (Not let6)
  let let8 := (binrel% LT.lt let5 let1)
  let let9 := (Int.ofNat 0)
  let let10 := (Int.ofNat 3)
  let let11 := (binrel% HDiv.hDiv (Int.ofNat 7) let10)
  let let12 := (binrel% GT.gt let11 let9)
  let let13 := (binrel% HMul.hMul let2 x1x5fminus)
  let let14 := (binrel% HAdd.hAdd x1x5fplus let13)
  let let15 := (Int.ofNat 2)
  let let16 := (Neg.neg let15)
  let let17 := (binrel% HMul.hMul let2 x9x5fminus)
  let let18 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x8x5fplus) (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x2x5fminus) let14))))))))))
  let let19 := (binrel% GE.ge let18 let1)
  let let20 := (Not let19)
  let let21 := (binrel% LT.lt let18 let1)
  let let22 := (Not True)
  let let23 := (binrel% HMul.hMul let2 x4x5fminus)
  let let24 := (binrel% HAdd.hAdd x4x5fplus let23)
  let let25 := (binrel% HMul.hMul let2 x5x5fplus)
  let let26 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let13 let24))))))))
  let let27 := (binrel% GE.ge let26 let2)
  let let28 := (Not let27)
  let let29 := (binrel% LT.lt let26 let2)
  let let30 := (Neg.neg let11)
  let let31 := (binrel% HDiv.hDiv (Int.ofNat 14) let10)
  let let32 := (Neg.neg let31)
  let let33 := (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x1x5fplus) (binrel% HMul.hMul let30 x1x5fminus))))))))))))
  let let34 := (binrel% HMul.hMul let11 let18)
  let let35 := (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x0x5fplus) x0x5fminus)
  let let36 := (binrel% HMul.hMul let2 x2x5fminus)
  let let37 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let23 let35))))))
  let let38 := (binrel% GE.ge let37 let9)
  let let39 := (Not let38)
  let let40 := (Not let39)
  let let41 := (Eq let38 let40)
  let let42 := (Eq let40 let38)
  let let43 := (Eq let38 let38)
  let let44 := (binrel% HMul.hMul let2 x4x5fplus)
  let let45 := (binrel% HAdd.hAdd let44 x4x5fminus)
  let let46 := (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x9x5fminus) (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x5x5fminus let45))))
  let let47 := (binrel% GE.ge let46 let1)
  let let48 := (Not let47)
  let let49 := (Not let48)
  let let50 := (Eq let47 let49)
  let let51 := (Eq let49 let47)
  let let52 := (Int.ofNat 9)
  let let53 := (binrel% HDiv.hDiv (Int.ofNat 46) let52)
  let let54 := (binrel% GT.gt let53 let9)
  let let55 := (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x0x5fplus) (binrel% HMul.hMul let15 x0x5fminus))
  let let56 := (binrel% HMul.hMul let2 x7x5fminus)
  let let57 := (binrel% HMul.hMul let2 x5x5fminus)
  let let58 := (binrel% HMul.hMul let2 x8x5fminus)
  let let59 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let56 let55))))))
  let let60 := (binrel% GE.ge let59 let9)
  let let61 := (Not let60)
  let let62 := (Not let61)
  let let63 := (Eq let60 let62)
  let let64 := (Eq let62 let60)
  let let65 := (binrel% HDiv.hDiv (Int.ofNat 55) let52)
  let let66 := (Neg.neg let65)
  let let67 := (binrel% HMul.hMul let65 let2)
  let let68 := (binrel% HDiv.hDiv (Int.ofNat 64) let52)
  let let69 := (Neg.neg let68)
  let let70 := (binrel% LT.lt let69 let9)
  let let71 := (binrel% LE.le let18 let9)
  let let72 := (binrel% HAdd.hAdd x7x5fplus let56)
  let let73 := (binrel% HMul.hMul let2 x1x5fplus)
  let let74 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd x1x5fminus let72))))))))
  let let75 := (binrel% HAdd.hAdd let73 x1x5fminus)
  let let76 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 let75))))))))
  let let77 := (Rat.ofInt 0)
  let let78 := (Int.ofNat 26)
  let let79 := (binrel% HDiv.hDiv let78 let52)
  let let80 := (Neg.neg let79)
  let let81 := (binrel% HMul.hMul let80 let9)
  let let82 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let57 let55))
  let let83 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let56 let82))))
  let let84 := (binrel% HMul.hMul let2 x6x5fplus)
  let let85 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 let72))))
  let let86 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x2x5fplus let36)))))
  let let87 := (binrel% HDiv.hDiv let78 let10)
  let let88 := (Neg.neg let87)
  let let89 := (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let87 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let87 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let87 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let87 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x7x5fplus) (binrel% HMul.hMul let87 x7x5fminus))))))))))
  let let90 := (binrel% HMul.hMul let88 let74)
  let let91 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 let35))))))
  let let92 := (Rat.ofInt 1)
  let let93 := (Neg.neg let92)
  let let94 := (binrel% LT.lt let93 let9)
  let let95 := (binrel% HMul.hMul let2 x7x5fplus)
  let let96 := (binrel% HAdd.hAdd let95 x7x5fminus)
  let let97 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x2x5fminus let96))))
  let let98 := (binrel% GE.ge let97 let9)
  let let99 := (binrel% LE.le let85 let9)
  let let100 := (binrel% HMul.hMul let93 let2)
  let let101 := (binrel% LE.le let46 let9)
  let let102 := (binrel% LE.le let59 let2)
  let let103 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 13) let52))
  let let104 := (binrel% GE.ge let77 let103)
  let let105 := (Not let7)
  let let106 := (Eq let6 let105)
  let let107 := (Eq let105 let6)
  let let108 := (binrel% HDiv.hDiv (Int.ofNat 11) let10)
  let let109 := (Neg.neg let108)
  let let110 := (binrel% HAdd.hAdd (binrel% HMul.hMul let108 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let109 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let109 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let108 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let108 x0x5fplus) (binrel% HMul.hMul let109 x0x5fminus))))))
  let let111 := (binrel% HMul.hMul let108 let5)
  let let112 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let13 let96))))))))
  let let113 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 let14))))
  let let114 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let95 (binrel% HAdd.hAdd x7x5fminus let113))))
  let let115 := (Eq let60 let60)
  let let116 := (binrel% GT.gt let108 let9)
  let let117 := (binrel% LE.le let5 let9)
  let let118 := (Eq let19 let19)
  let let119 := (binrel% HMul.hMul let69 let9)
  let let120 := (binrel% LE.le let37 let2)
  let let121 := (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let66 let77)))))))))
  let let122 := (binrel% HMul.hMul let88 let9)
  let let123 := (binrel% HMul.hMul let53 let9)
  let let124 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x2x5fminus let14))))))))
  let let125 := (binrel% HDiv.hDiv (Int.ofNat 31) let52)
  let let126 := (Neg.neg let125)
  let let127 := (binrel% HMul.hMul let126 let9)
  let let128 := (Not let20)
  let let129 := (Eq let128 let19)
  let let130 := (binrel% HMul.hMul let11 let9)
  let let131 := (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x7x5fplus) (binrel% HMul.hMul let80 x7x5fminus))))))))))
  let let132 := (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x0x5fplus) (binrel% HMul.hMul let65 x0x5fminus))))))))
  let let133 := (Neg.neg let53)
  let let134 := (binrel% HDiv.hDiv (Int.ofNat 92) let52)
  let let135 := (binrel% HAdd.hAdd (binrel% HMul.hMul let134 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let134) x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let133 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let53 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let133 x4x5fplus) (binrel% HMul.hMul let53 x4x5fminus))))))
  let let136 := (binrel% HAdd.hAdd (binrel% HMul.hMul let126 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let125 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let125 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let126 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let125 x7x5fplus) (binrel% HMul.hMul let126 x7x5fminus))))))
  let let137 := (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let68 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let68 x0x5fplus) (binrel% HMul.hMul let69 x0x5fminus))))
  let let138 := (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x0x5fplus) (binrel% HMul.hMul let31 x0x5fminus))))))))
  let let139 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd x1x5fminus let45)))))))))
  let let140 := (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let110 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let136 (binrel% HAdd.hAdd let135 (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let132 let131)))))))))
  let let141 := (Eq let19 let128)
  let let142 := (binrel% HMul.hMul let108 let1)
  let let143 := (binrel% LT.lt let59 let9)
  let let144 := (binrel% HMul.hMul let80 let112)
  let let145 := (binrel% LT.lt let37 let9)
  let let146 := (binrel% HMul.hMul let65 let37)
  let let147 := (Eq let47 let47)
  let let148 := (binrel% GT.gt let65 let9)
  let let149 := (binrel% HMul.hMul let53 let46)
  let let150 := (binrel% HMul.hMul let126 let97)
  let let151 := (binrel% LT.lt let88 let9)
  let let152 := (Eq let6 let6)
  let let153 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let13 let35))
  let let154 := (binrel% HMul.hMul let69 let153)
  let let155 := (binrel% HMul.hMul let11 let59)
  let let156 := (binrel% HMul.hMul let93 let26)
  let let157 := (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let122 (binrel% HAdd.hAdd let67 let81)))))))))
  let let158 := (binrel% HAdd.hAdd let156 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd let155 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let154 (binrel% HAdd.hAdd let150 (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let146 let144)))))))))
  let let159 := (binrel% GE.ge let158 let157)
  let let160 := (Not let159)
  let let161 := (binrel% LT.lt let158 let157)
  let let162 := (binrel% LT.lt let80 let9)
  let let163 := (binrel% LT.lt let46 let1)
  let let164 := (binrel% LT.lt let126 let9)
  let let165 := (binrel% HMul.hMul let16 x4x5fminus)
  let let166 := (binrel% HMul.hMul let15 x4x5fplus)
  let let167 := (binrel% LE.le let83 let2)
  let let168 := (binrel% LE.le let91 let2)
  let let169 := (binrel% HMul.hMul let2 x3x5fplus)
  let let170 := (binrel% LE.le let86 let9)
  let let171 := (binrel% GE.ge let76 let9)
  let let172 := (binrel% GE.ge let114 let9)
  let let173 := (binrel% GE.ge let124 let2)
  let let174 := (binrel% GE.ge let153 let9)
  let let175 := (binrel% GE.ge let74 let9)
  let let176 := (binrel% GE.ge let112 let9)
  let let177 := (Not let174)
  let let178 := (Not let176)
  let let179 := (Not let175)
  let let180 := (Not let98)
  let let181 := (Or let178 (Or let38 (Or let179 (Or let47 (Or let180 (Or let177 (Or let19 (Or let60 (Or let6 let28)))))))))
  let let182 := (Or let178 (Or let40 (Or let179 (Or let49 (Or let180 (Or let177 (Or let128 (Or let62 (Or let105 let28)))))))))
  let let183 := (Or let28 False)
  let let184 := (binrel% LE.le let144 let81)
  let let185 := (And let162 let176)
  let let186 := (binrel% LE.le let146 let67)
  let let187 := (And let148 let120)
  let let188 := (binrel% LE.le let90 let122)
  let let189 := (And let151 let175)
  let let190 := (binrel% LE.le let149 let123)
  let let191 := (And let54 let101)
  let let192 := (binrel% LE.le let150 let127)
  let let193 := (And let164 let98)
  let let194 := (binrel% LE.le let154 let119)
  let let195 := (And let70 let174)
  let let196 := (binrel% LE.le let34 let130)
  let let197 := (And let12 let71)
  let let198 := (binrel% LT.lt let155 let130)
  let let199 := (And let12 let143)
  let let200 := (binrel% LT.lt let111 let142)
  let let201 := (And let116 let8)
  let let202 := (binrel% LE.le let156 let100)
  let let203 := (And let94 let27)
(Eq let8 let7) → (Eq let12 True) → (Eq let21 let20) → (Eq let22 False) → (Eq let29 let28) → (Eq let34 let33) → (Eq let42 let41) → let42 → (Eq let43 True) → (Eq let51 let50) → let51 → (Eq let54 True) → (Eq let64 let63) → (Eq let67 let66) → (Eq let70 True) → (Eq let71 let20) → let64 → (Eq let76 let74) → (Eq let81 let77) → (Eq let83 let59) → (Eq let86 let85) → (Eq let90 let89) → (Eq let91 let37) → (Eq let94 True) → (Eq let99 let98) → (Eq let100 let92) → (Eq let101 let48) → (Eq let102 let61) → (Eq let104 True) → (Eq let107 let106) → (Eq let111 let110) → (Eq let114 let112) → (Eq let115 True) → (Eq let116 True) → (Eq let117 let7) → (Eq let118 True) → (Eq let119 let77) → (Eq let120 let39) → (Eq let121 let103) → (Eq let122 let77) → (Eq let123 let77) → (Eq let124 let26) → (Eq let127 let77) → let129 → (Eq let130 let77) → (Eq let140 let77) → (Eq let129 let141) → (Eq let142 let108) → (Eq let143 let61) → (Eq let144 let131) → (Eq let145 let39) → (Eq let146 let132) → (Eq let147 True) → (Eq let148 True) → (Eq let149 let135) → (Eq let150 let136) → (Eq let151 True) → (Eq let152 True) → (Eq let154 let137) → let107 → (Eq let155 let138) → (Eq let156 let139) → (Eq let161 let160) → (Eq let162 True) → (Eq let163 let48) → (Eq let164 True) → (binrel% GE.ge x9x5fplus let9) → (binrel% GE.ge x9x5fminus let9) → (binrel% GE.ge x8x5fplus let9) → (binrel% GE.ge x8x5fminus let9) → (binrel% GE.ge x6x5fplus let9) → (binrel% GE.ge x6x5fminus let9) → (binrel% GE.ge x5x5fplus let9) → (binrel% GE.ge x5x5fminus let9) → (binrel% GE.ge x2x5fplus let9) → (binrel% GE.ge x2x5fminus let9) → (binrel% GE.ge x1x5fplus let9) → (binrel% GE.ge x1x5fminus let9) → (binrel% GE.ge x7x5fplus let9) → (binrel% GE.ge x7x5fminus let9) → (binrel% GE.ge x4x5fplus let9) → (binrel% GE.ge x4x5fminus let9) → (binrel% GE.ge x3x5fplus let9) → (binrel% GE.ge x3x5fminus let9) → (binrel% GE.ge x0x5fplus let9) → (binrel% GE.ge x0x5fminus let9) → let71 → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let166 (binrel% HAdd.hAdd let165 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x3x5fminus) let14)))))))) let9) → let167 → let168 → let101 → let117 → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let58 let82)) let9) → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let169 x3x5fminus))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x8x5fminus) (binrel% HAdd.hAdd let95 (binrel% HAdd.hAdd x7x5fminus let24)))) let9) → let170 → let171 → let172 → let173 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let166 (binrel% HAdd.hAdd let165 let35)))))) let9) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let23 let75)))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x4x5fminus let35)))))) let9) → (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 let113)) let2) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x2x5fplus) (binrel% HMul.hMul let15 x2x5fminus)))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let84 x6x5fminus))) let2) → let174 → False :=
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x2x5fplus)
  let let4 := (binrel% HMul.hMul let2 x6x5fminus)
  let let5 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let2 x0x5fminus))))))
  let let6 := (binrel% GE.ge let5 let1)
  let let7 := (Not let6)
  let let8 := (binrel% LT.lt let5 let1)
  let let9 := (Int.ofNat 0)
  let let10 := (Int.ofNat 3)
  let let11 := (binrel% HDiv.hDiv (Int.ofNat 7) let10)
  let let12 := (binrel% GT.gt let11 let9)
  let let13 := (binrel% HMul.hMul let2 x1x5fminus)
  let let14 := (binrel% HAdd.hAdd x1x5fplus let13)
  let let15 := (Int.ofNat 2)
  let let16 := (Neg.neg let15)
  let let17 := (binrel% HMul.hMul let2 x9x5fminus)
  let let18 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x8x5fplus) (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x2x5fminus) let14))))))))))
  let let19 := (binrel% GE.ge let18 let1)
  let let20 := (Not let19)
  let let21 := (binrel% LT.lt let18 let1)
  let let22 := (Not True)
  let let23 := (binrel% HMul.hMul let2 x4x5fminus)
  let let24 := (binrel% HAdd.hAdd x4x5fplus let23)
  let let25 := (binrel% HMul.hMul let2 x5x5fplus)
  let let26 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let13 let24))))))))
  let let27 := (binrel% GE.ge let26 let2)
  let let28 := (Not let27)
  let let29 := (binrel% LT.lt let26 let2)
  let let30 := (Neg.neg let11)
  let let31 := (binrel% HDiv.hDiv (Int.ofNat 14) let10)
  let let32 := (Neg.neg let31)
  let let33 := (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x1x5fplus) (binrel% HMul.hMul let30 x1x5fminus))))))))))))
  let let34 := (binrel% HMul.hMul let11 let18)
  let let35 := (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x0x5fplus) x0x5fminus)
  let let36 := (binrel% HMul.hMul let2 x2x5fminus)
  let let37 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let23 let35))))))
  let let38 := (binrel% GE.ge let37 let9)
  let let39 := (Not let38)
  let let40 := (Not let39)
  let let41 := (Eq let38 let40)
  let let42 := (Eq let40 let38)
  let let43 := (Eq let38 let38)
  let let44 := (binrel% HMul.hMul let2 x4x5fplus)
  let let45 := (binrel% HAdd.hAdd let44 x4x5fminus)
  let let46 := (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x9x5fminus) (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x5x5fminus let45))))
  let let47 := (binrel% GE.ge let46 let1)
  let let48 := (Not let47)
  let let49 := (Not let48)
  let let50 := (Eq let47 let49)
  let let51 := (Eq let49 let47)
  let let52 := (Int.ofNat 9)
  let let53 := (binrel% HDiv.hDiv (Int.ofNat 46) let52)
  let let54 := (binrel% GT.gt let53 let9)
  let let55 := (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x0x5fplus) (binrel% HMul.hMul let15 x0x5fminus))
  let let56 := (binrel% HMul.hMul let2 x7x5fminus)
  let let57 := (binrel% HMul.hMul let2 x5x5fminus)
  let let58 := (binrel% HMul.hMul let2 x8x5fminus)
  let let59 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let56 let55))))))
  let let60 := (binrel% GE.ge let59 let9)
  let let61 := (Not let60)
  let let62 := (Not let61)
  let let63 := (Eq let60 let62)
  let let64 := (Eq let62 let60)
  let let65 := (binrel% HDiv.hDiv (Int.ofNat 55) let52)
  let let66 := (Neg.neg let65)
  let let67 := (binrel% HMul.hMul let65 let2)
  let let68 := (binrel% HDiv.hDiv (Int.ofNat 64) let52)
  let let69 := (Neg.neg let68)
  let let70 := (binrel% LT.lt let69 let9)
  let let71 := (binrel% LE.le let18 let9)
  let let72 := (binrel% HAdd.hAdd x7x5fplus let56)
  let let73 := (binrel% HMul.hMul let2 x1x5fplus)
  let let74 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd x1x5fminus let72))))))))
  let let75 := (binrel% HAdd.hAdd let73 x1x5fminus)
  let let76 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 let75))))))))
  let let77 := (Rat.ofInt 0)
  let let78 := (Int.ofNat 26)
  let let79 := (binrel% HDiv.hDiv let78 let52)
  let let80 := (Neg.neg let79)
  let let81 := (binrel% HMul.hMul let80 let9)
  let let82 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let57 let55))
  let let83 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let56 let82))))
  let let84 := (binrel% HMul.hMul let2 x6x5fplus)
  let let85 := (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 let72))))
  let let86 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x2x5fplus let36)))))
  let let87 := (binrel% HDiv.hDiv let78 let10)
  let let88 := (Neg.neg let87)
  let let89 := (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let87 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let87 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let87 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let87 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let88 x7x5fplus) (binrel% HMul.hMul let87 x7x5fminus))))))))))
  let let90 := (binrel% HMul.hMul let88 let74)
  let let91 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 let35))))))
  let let92 := (Rat.ofInt 1)
  let let93 := (Neg.neg let92)
  let let94 := (binrel% LT.lt let93 let9)
  let let95 := (binrel% HMul.hMul let2 x7x5fplus)
  let let96 := (binrel% HAdd.hAdd let95 x7x5fminus)
  let let97 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x2x5fminus let96))))
  let let98 := (binrel% GE.ge let97 let9)
  let let99 := (binrel% LE.le let85 let9)
  let let100 := (binrel% HMul.hMul let93 let2)
  let let101 := (binrel% LE.le let46 let9)
  let let102 := (binrel% LE.le let59 let2)
  let let103 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 13) let52))
  let let104 := (binrel% GE.ge let77 let103)
  let let105 := (Not let7)
  let let106 := (Eq let6 let105)
  let let107 := (Eq let105 let6)
  let let108 := (binrel% HDiv.hDiv (Int.ofNat 11) let10)
  let let109 := (Neg.neg let108)
  let let110 := (binrel% HAdd.hAdd (binrel% HMul.hMul let108 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let109 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let109 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let108 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let108 x0x5fplus) (binrel% HMul.hMul let109 x0x5fminus))))))
  let let111 := (binrel% HMul.hMul let108 let5)
  let let112 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let13 let96))))))))
  let let113 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 let14))))
  let let114 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let95 (binrel% HAdd.hAdd x7x5fminus let113))))
  let let115 := (Eq let60 let60)
  let let116 := (binrel% GT.gt let108 let9)
  let let117 := (binrel% LE.le let5 let9)
  let let118 := (Eq let19 let19)
  let let119 := (binrel% HMul.hMul let69 let9)
  let let120 := (binrel% LE.le let37 let2)
  let let121 := (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let66 let77)))))))))
  let let122 := (binrel% HMul.hMul let88 let9)
  let let123 := (binrel% HMul.hMul let53 let9)
  let let124 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x2x5fminus let14))))))))
  let let125 := (binrel% HDiv.hDiv (Int.ofNat 31) let52)
  let let126 := (Neg.neg let125)
  let let127 := (binrel% HMul.hMul let126 let9)
  let let128 := (Not let20)
  let let129 := (Eq let128 let19)
  let let130 := (binrel% HMul.hMul let11 let9)
  let let131 := (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x7x5fplus) (binrel% HMul.hMul let80 x7x5fminus))))))))))
  let let132 := (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x0x5fplus) (binrel% HMul.hMul let65 x0x5fminus))))))))
  let let133 := (Neg.neg let53)
  let let134 := (binrel% HDiv.hDiv (Int.ofNat 92) let52)
  let let135 := (binrel% HAdd.hAdd (binrel% HMul.hMul let134 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let134) x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let133 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let53 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let133 x4x5fplus) (binrel% HMul.hMul let53 x4x5fminus))))))
  let let136 := (binrel% HAdd.hAdd (binrel% HMul.hMul let126 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let125 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let125 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let126 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let125 x7x5fplus) (binrel% HMul.hMul let126 x7x5fminus))))))
  let let137 := (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let68 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let68 x0x5fplus) (binrel% HMul.hMul let69 x0x5fminus))))
  let let138 := (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let30 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x0x5fplus) (binrel% HMul.hMul let31 x0x5fminus))))))))
  let let139 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd x1x5fminus let45)))))))))
  let let140 := (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let110 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let136 (binrel% HAdd.hAdd let135 (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let132 let131)))))))))
  let let141 := (Eq let19 let128)
  let let142 := (binrel% HMul.hMul let108 let1)
  let let143 := (binrel% LT.lt let59 let9)
  let let144 := (binrel% HMul.hMul let80 let112)
  let let145 := (binrel% LT.lt let37 let9)
  let let146 := (binrel% HMul.hMul let65 let37)
  let let147 := (Eq let47 let47)
  let let148 := (binrel% GT.gt let65 let9)
  let let149 := (binrel% HMul.hMul let53 let46)
  let let150 := (binrel% HMul.hMul let126 let97)
  let let151 := (binrel% LT.lt let88 let9)
  let let152 := (Eq let6 let6)
  let let153 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let13 let35))
  let let154 := (binrel% HMul.hMul let69 let153)
  let let155 := (binrel% HMul.hMul let11 let59)
  let let156 := (binrel% HMul.hMul let93 let26)
  let let157 := (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let122 (binrel% HAdd.hAdd let67 let81)))))))))
  let let158 := (binrel% HAdd.hAdd let156 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd let155 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let154 (binrel% HAdd.hAdd let150 (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let146 let144)))))))))
  let let159 := (binrel% GE.ge let158 let157)
  let let160 := (Not let159)
  let let161 := (binrel% LT.lt let158 let157)
  let let162 := (binrel% LT.lt let80 let9)
  let let163 := (binrel% LT.lt let46 let1)
  let let164 := (binrel% LT.lt let126 let9)
  let let165 := (binrel% HMul.hMul let16 x4x5fminus)
  let let166 := (binrel% HMul.hMul let15 x4x5fplus)
  let let167 := (binrel% LE.le let83 let2)
  let let168 := (binrel% LE.le let91 let2)
  let let169 := (binrel% HMul.hMul let2 x3x5fplus)
  let let170 := (binrel% LE.le let86 let9)
  let let171 := (binrel% GE.ge let76 let9)
  let let172 := (binrel% GE.ge let114 let9)
  let let173 := (binrel% GE.ge let124 let2)
  let let174 := (binrel% GE.ge let153 let9)
  let let175 := (binrel% GE.ge let74 let9)
  let let176 := (binrel% GE.ge let112 let9)
  let let177 := (Not let174)
  let let178 := (Not let176)
  let let179 := (Not let175)
  let let180 := (Not let98)
  let let181 := (Or let178 (Or let38 (Or let179 (Or let47 (Or let180 (Or let177 (Or let19 (Or let60 (Or let6 let28)))))))))
  let let182 := (Or let178 (Or let40 (Or let179 (Or let49 (Or let180 (Or let177 (Or let128 (Or let62 (Or let105 let28)))))))))
  let let183 := (Or let28 False)
  let let184 := (binrel% LE.le let144 let81)
  let let185 := (And let162 let176)
  let let186 := (binrel% LE.le let146 let67)
  let let187 := (And let148 let120)
  let let188 := (binrel% LE.le let90 let122)
  let let189 := (And let151 let175)
  let let190 := (binrel% LE.le let149 let123)
  let let191 := (And let54 let101)
  let let192 := (binrel% LE.le let150 let127)
  let let193 := (And let164 let98)
  let let194 := (binrel% LE.le let154 let119)
  let let195 := (And let70 let174)
  let let196 := (binrel% LE.le let34 let130)
  let let197 := (And let12 let71)
  let let198 := (binrel% LT.lt let155 let130)
  let let199 := (And let12 let143)
  let let200 := (binrel% LT.lt let111 let142)
  let let201 := (And let116 let8)
  let let202 := (binrel% LE.le let156 let100)
  let let203 := (And let94 let27)
fun lean_r0 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let12 True) => -- EVALUATE
fun lean_r2 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let22 False) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let42 let41) => -- THEORY_REWRITE_BOOL
fun lean_r7 : let42 => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let43 True) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let51 let50) => -- THEORY_REWRITE_BOOL
fun lean_r10 : let51 => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let54 True) => -- EVALUATE
fun lean_r12 : (Eq let64 let63) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let70 True) => -- EVALUATE
fun lean_r15 : (Eq let71 let20) => -- THEORY_REWRITE_ARITH
fun lean_r16 : let64 => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let76 let74) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let81 let77) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let83 let59) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let86 let85) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let90 let89) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let91 let37) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let94 True) => -- EVALUATE
fun lean_r24 : (Eq let99 let98) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let100 let92) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let101 let48) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let102 let61) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let104 True) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let107 let106) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let111 let110) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let114 let112) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let115 True) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let116 True) => -- EVALUATE
fun lean_r34 : (Eq let117 let7) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let118 True) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let119 let77) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let120 let39) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let121 let103) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let122 let77) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let123 let77) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let124 let26) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let127 let77) => -- THEORY_REWRITE_ARITH
fun lean_r43 : let129 => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let130 let77) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let140 let77) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let129 let141) => -- THEORY_REWRITE_BOOL
fun lean_r47 : (Eq let142 let108) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let143 let61) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let144 let131) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let145 let39) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let146 let132) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let147 True) => -- THEORY_REWRITE_BOOL
fun lean_r53 : (Eq let148 True) => -- EVALUATE
fun lean_r54 : (Eq let149 let135) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let150 let136) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let151 True) => -- EVALUATE
fun lean_r57 : (Eq let152 True) => -- THEORY_REWRITE_BOOL
fun lean_r58 : (Eq let154 let137) => -- THEORY_REWRITE_ARITH
fun lean_r59 : let107 => -- THEORY_REWRITE_BOOL
fun lean_r60 : (Eq let155 let138) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let156 let139) => -- THEORY_REWRITE_ARITH
fun lean_r62 : (Eq let161 let160) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let162 True) => -- EVALUATE
fun lean_r64 : (Eq let163 let48) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let164 True) => -- EVALUATE
fun lean_a66 : (binrel% GE.ge x9x5fplus let9) =>
fun lean_a67 : (binrel% GE.ge x9x5fminus let9) =>
fun lean_a68 : (binrel% GE.ge x8x5fplus let9) =>
fun lean_a69 : (binrel% GE.ge x8x5fminus let9) =>
fun lean_a70 : (binrel% GE.ge x6x5fplus let9) =>
fun lean_a71 : (binrel% GE.ge x6x5fminus let9) =>
fun lean_a72 : (binrel% GE.ge x5x5fplus let9) =>
fun lean_a73 : (binrel% GE.ge x5x5fminus let9) =>
fun lean_a74 : (binrel% GE.ge x2x5fplus let9) =>
fun lean_a75 : (binrel% GE.ge x2x5fminus let9) =>
fun lean_a76 : (binrel% GE.ge x1x5fplus let9) =>
fun lean_a77 : (binrel% GE.ge x1x5fminus let9) =>
fun lean_a78 : (binrel% GE.ge x7x5fplus let9) =>
fun lean_a79 : (binrel% GE.ge x7x5fminus let9) =>
fun lean_a80 : (binrel% GE.ge x4x5fplus let9) =>
fun lean_a81 : (binrel% GE.ge x4x5fminus let9) =>
fun lean_a82 : (binrel% GE.ge x3x5fplus let9) =>
fun lean_a83 : (binrel% GE.ge x3x5fminus let9) =>
fun lean_a84 : (binrel% GE.ge x0x5fplus let9) =>
fun lean_a85 : (binrel% GE.ge x0x5fminus let9) =>
fun lean_a86 : let71 =>
fun lean_a87 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let166 (binrel% HAdd.hAdd let165 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x3x5fminus) let14)))))))) let9) =>
fun lean_a88 : let167 =>
fun lean_a89 : let168 =>
fun lean_a90 : let101 =>
fun lean_a91 : let117 =>
fun lean_a92 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let58 let82)) let9) =>
fun lean_a93 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let169 x3x5fminus))))) let1) =>
fun lean_a94 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let15 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x8x5fminus) (binrel% HAdd.hAdd let95 (binrel% HAdd.hAdd x7x5fminus let24)))) let9) =>
fun lean_a95 : let170 =>
fun lean_a96 : let171 =>
fun lean_a97 : let172 =>
fun lean_a98 : let173 =>
fun lean_a99 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let166 (binrel% HAdd.hAdd let165 let35)))))) let9) =>
fun lean_a100 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let23 let75)))))) let1) =>
fun lean_a101 : (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x4x5fminus let35)))))) let9) =>
fun lean_a102 : (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let4 let113)) let2) =>
fun lean_a103 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x2x5fplus) (binrel% HMul.hMul let15 x2x5fminus)))))) let1) =>
fun lean_a104 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let84 x6x5fminus))) let2) =>
fun lean_a105 : let174 => by
have lean_s0 : (Or let178 (Or let40 (Or let179 (Or let49 (Or let180 (Or let177 (Or let128 (Or let62 (Or let105 let183))))))))) :=
  (scope (fun lean_a106 : let176 =>
    (scope (fun lean_a107 : let39 =>
      (scope (fun lean_a108 : let175 =>
        (scope (fun lean_a109 : let48 =>
          (scope (fun lean_a110 : let98 =>
            (scope (fun lean_a111 : let174 =>
              (scope (fun lean_a112 : let20 =>
                (scope (fun lean_a113 : let61 =>
                  (scope (fun lean_a114 : let7 =>
                    (scope (fun lean_a115 : let27 =>
                      let lean_s0 := by timed flipCongrArg lean_r41 [GE.ge]
                      have lean_s1 : (Eq let2 let2) := by timed rfl
                      have lean_s2 : (Eq let173 let27) := by timed congr lean_s0 lean_s1
                      have lean_s3 : let27 := by timed eqResolve lean_a98 lean_s2
                      have lean_s4 : let183 :=
                        (scope (fun lean_a115 : let27 =>
                          have lean_s4 : let94 := by timed trueElim lean_r23
                          have lean_s5 : let27 := by timed eqResolve lean_a98 lean_s2
                          have lean_s6 : let203 := by timed And.intro lean_s4 lean_s5
                          have lean_s7 : (Implies let203 let202) := by arithMulNeg [let26, let2, let93], 3
                          have lean_s8 : let202 := by timed modusPonens lean_s6 lean_s7
                          have lean_s9 : let116 := by timed trueElim lean_r33
                          have lean_s10 : let7 := by timed eqResolve lean_a91 lean_r34
                          have lean_s11 : (Eq let7 let8) := by timed Eq.symm lean_r0
                          have lean_s12 : let8 := by timed eqResolve lean_s10 lean_s11
                          have lean_s13 : let201 := by timed And.intro lean_s9 lean_s12
                          have lean_s14 : (Implies let201 let200) := by arithMulPos [let5, let1, let108], 0
                          have lean_s15 : let200 := by timed modusPonens lean_s13 lean_s14
                          have lean_s16 : let12 := by timed trueElim lean_r1
                          let lean_s17 := by timed flipCongrArg lean_r19 [LE.le]
                          have lean_s18 : (Eq let167 let102) := by timed congr lean_s17 lean_s1
                          have lean_s19 : (Eq let167 let61) := by timed Eq.trans lean_s18 lean_r27
                          have lean_s20 : let61 := by timed eqResolve lean_a88 lean_s19
                          have lean_s21 : (Eq let61 let143) := by timed Eq.symm lean_r48
                          have lean_s22 : let143 := by timed eqResolve lean_s20 lean_s21
                          have lean_s23 : let199 := by timed And.intro lean_s16 lean_s22
                          have lean_s24 : (Implies let199 let198) := by arithMulPos [let59, let9, let11], 0
                          have lean_s25 : let198 := by timed modusPonens lean_s23 lean_s24
                          have lean_s26 : let20 := by timed eqResolve lean_a86 lean_r15
                          have lean_s27 : (Eq let20 let21) := by timed Eq.symm lean_r2
                          have lean_s28 : let21 := by timed eqResolve lean_s26 lean_s27
                          have lean_s29 : let71 := by intTightUb lean_s28
                          have lean_s30 : let197 := by timed And.intro lean_s16 lean_s29
                          have lean_s31 : (Implies let197 let196) := by arithMulPos [let18, let9, let11], 1
                          have lean_s32 : let196 := by timed modusPonens lean_s30 lean_s31
                          have lean_s33 : let70 := by timed trueElim lean_r14
                          have lean_s34 : let195 := by timed And.intro lean_s33 lean_a111
                          have lean_s35 : (Implies let195 let194) := by arithMulNeg [let153, let9, let69], 3
                          have lean_s36 : let194 := by timed modusPonens lean_s34 lean_s35
                          have lean_s37 : let164 := by timed trueElim lean_r65
                          let lean_s38 := by timed flipCongrArg lean_r20 [LE.le]
                          have lean_s39 : (Eq let9 let9) := by timed rfl
                          have lean_s40 : (Eq let170 let99) := by timed congr lean_s38 lean_s39
                          have lean_s41 : (Eq let170 let98) := by timed Eq.trans lean_s40 lean_r24
                          have lean_s42 : let98 := by timed eqResolve lean_a95 lean_s41
                          have lean_s43 : let193 := by timed And.intro lean_s37 lean_s42
                          have lean_s44 : (Implies let193 let192) := by arithMulNeg [let97, let9, let126], 3
                          have lean_s45 : let192 := by timed modusPonens lean_s43 lean_s44
                          have lean_s46 : let54 := by timed trueElim lean_r11
                          have lean_s47 : let48 := by timed eqResolve lean_a90 lean_r26
                          have lean_s48 : (Eq let48 let163) := by timed Eq.symm lean_r64
                          have lean_s49 : let163 := by timed eqResolve lean_s47 lean_s48
                          have lean_s50 : let101 := by intTightUb lean_s49
                          have lean_s51 : let191 := by timed And.intro lean_s46 lean_s50
                          have lean_s52 : (Implies let191 let190) := by arithMulPos [let46, let9, let53], 1
                          have lean_s53 : let190 := by timed modusPonens lean_s51 lean_s52
                          have lean_s54 : let151 := by timed trueElim lean_r56
                          let lean_s55 := by timed flipCongrArg lean_r17 [GE.ge]
                          have lean_s56 : (Eq let171 let175) := by timed congr lean_s55 lean_s39
                          have lean_s57 : let175 := by timed eqResolve lean_a96 lean_s56
                          have lean_s58 : let189 := by timed And.intro lean_s54 lean_s57
                          have lean_s59 : (Implies let189 let188) := by arithMulNeg [let74, let9, let88], 3
                          have lean_s60 : let188 := by timed modusPonens lean_s58 lean_s59
                          have lean_s61 : let148 := by timed trueElim lean_r53
                          let lean_s62 := by timed flipCongrArg lean_r22 [LE.le]
                          have lean_s63 : (Eq let168 let120) := by timed congr lean_s62 lean_s1
                          have lean_s64 : (Eq let168 let39) := by timed Eq.trans lean_s63 lean_r37
                          have lean_s65 : let39 := by timed eqResolve lean_a89 lean_s64
                          have lean_s66 : (Eq let39 let145) := by timed Eq.symm lean_r50
                          have lean_s67 : let145 := by timed eqResolve lean_s65 lean_s66
                          have lean_s68 : let120 := by intTightUb lean_s67
                          have lean_s69 : let187 := by timed And.intro lean_s61 lean_s68
                          have lean_s70 : (Implies let187 let186) := by arithMulPos [let37, let2, let65], 1
                          have lean_s71 : let186 := by timed modusPonens lean_s69 lean_s70
                          have lean_s72 : let162 := by timed trueElim lean_r63
                          let lean_s73 := by timed flipCongrArg lean_r31 [GE.ge]
                          have lean_s74 : (Eq let172 let176) := by timed congr lean_s73 lean_s39
                          have lean_s75 : let176 := by timed eqResolve lean_a97 lean_s74
                          have lean_s76 : let185 := by timed And.intro lean_s72 lean_s75
                          have lean_s77 : (Implies let185 let184) := by arithMulNeg [let112, let9, let80], 3
                          have lean_s78 : let184 := by timed modusPonens lean_s76 lean_s77
                          have lean_s79 : let161 := by sumBounds [lean_s8, lean_s15, lean_s25, lean_s32, lean_s36, lean_s45, lean_s53, lean_s60, lean_s71, lean_s78]
                          let lean_s80 := by timed congrHAdd lean_r51 lean_r49
                          let lean_s81 := by timed congrHAdd lean_r21 lean_s80
                          let lean_s82 := by timed congrHAdd lean_r54 lean_s81
                          let lean_s83 := by timed congrHAdd lean_r55 lean_s82
                          let lean_s84 := by timed congrHAdd lean_r58 lean_s83
                          let lean_s85 := by timed congrHAdd lean_r5 lean_s84
                          let lean_s86 := by timed congrHAdd lean_r60 lean_s85
                          let lean_s87 := by timed congrHAdd lean_r30 lean_s86
                          have lean_s88 : (Eq let158 let140) := by timed congrHAdd lean_r61 lean_s87
                          have lean_s89 : (Eq let158 let77) := by timed Eq.trans lean_s88 lean_r45
                          let lean_s90 := by timed flipCongrArg lean_s89 [GE.ge]
                          let lean_s91 := by timed congrHAdd lean_r13 lean_r18
                          let lean_s92 := by timed congrHAdd lean_r39 lean_s91
                          let lean_s93 := by timed congrHAdd lean_r40 lean_s92
                          let lean_s94 := by timed congrHAdd lean_r42 lean_s93
                          let lean_s95 := by timed congrHAdd lean_r36 lean_s94
                          let lean_s96 := by timed congrHAdd lean_r44 lean_s95
                          let lean_s97 := by timed congrHAdd lean_r44 lean_s96
                          let lean_s98 := by timed congrHAdd lean_r47 lean_s97
                          have lean_s99 : (Eq let157 let121) := by timed congrHAdd lean_r25 lean_s98
                          have lean_s100 : (Eq let157 let103) := by timed Eq.trans lean_s99 lean_r38
                          have lean_s101 : (Eq let159 let104) := by timed congr lean_s90 lean_s100
                          have lean_s102 : (Eq let159 True) := by timed Eq.trans lean_s101 lean_r28
                          have lean_s103 : (Eq let160 let22) := by timed flipCongrArg lean_s102 [Not]
                          have lean_s104 : (Eq let160 False) := by timed Eq.trans lean_s103 lean_r3
                          have lean_s105 : (Eq let161 False) := by timed Eq.trans lean_r62 lean_s104
                          show False from by timed eqResolve lean_s79 lean_s105
                        ))
                      have lean_s5 : let28 := by liftOrNToNeg lean_s4
                      have lean_s6 : (Eq let28 let29) := by timed Eq.symm lean_r4
                      have lean_s7 : let29 := by timed eqResolve lean_s5 lean_s6
                      have lean_s8 : let28 := by timed eqResolve lean_s7 lean_r4
                      show False from by timed contradiction lean_s3 lean_s8
  ))))))))))))))))))))
have lean_s1 : (Not (And let176 (And let39 (And let175 (And let48 (And let98 (And let174 (And let20 (And let61 (And let7 let27)))))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let182 := by timed flipNotAnd lean_s1 [let176, let39, let175, let48, let98, let174, let20, let61, let7, let27]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let178 let178) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let43 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let41 let43) := by timed congr lean_s7 lean_r7
have lean_s9 : (Eq let41 True) := by timed Eq.trans lean_s8 lean_r8
have lean_s10 : (Eq let42 True) := by timed Eq.trans lean_r6 lean_s9
have lean_s11 : let42 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq let179 let179) := by timed rfl
let lean_s14 := by timed congr lean_s3 lean_s13
have lean_s15 : let147 := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [Eq]
have lean_s17 : (Eq let50 let147) := by timed congr lean_s16 lean_r10
have lean_s18 : (Eq let50 True) := by timed Eq.trans lean_s17 lean_r52
have lean_s19 : (Eq let51 True) := by timed Eq.trans lean_r9 lean_s18
have lean_s20 : let51 := by timed trueElim lean_s19
let lean_s21 := by timed congr lean_s3 lean_s20
have lean_s22 : (Eq let180 let180) := by timed rfl
let lean_s23 := by timed congr lean_s3 lean_s22
have lean_s24 : (Eq let177 let177) := by timed rfl
let lean_s25 := by timed congr lean_s3 lean_s24
have lean_s26 : let118 := by timed rfl
let lean_s27 := by timed flipCongrArg lean_s26 [Eq]
have lean_s28 : (Eq let141 let118) := by timed congr lean_s27 lean_r43
have lean_s29 : (Eq let141 True) := by timed Eq.trans lean_s28 lean_r35
have lean_s30 : (Eq let129 True) := by timed Eq.trans lean_r46 lean_s29
have lean_s31 : let129 := by timed trueElim lean_s30
let lean_s32 := by timed congr lean_s3 lean_s31
have lean_s33 : let115 := by timed rfl
let lean_s34 := by timed flipCongrArg lean_s33 [Eq]
have lean_s35 : (Eq let63 let115) := by timed congr lean_s34 lean_r16
have lean_s36 : (Eq let63 True) := by timed Eq.trans lean_s35 lean_r32
have lean_s37 : (Eq let64 True) := by timed Eq.trans lean_r12 lean_s36
have lean_s38 : let64 := by timed trueElim lean_s37
let lean_s39 := by timed congr lean_s3 lean_s38
have lean_s40 : let152 := by timed rfl
let lean_s41 := by timed flipCongrArg lean_s40 [Eq]
have lean_s42 : (Eq let106 let152) := by timed congr lean_s41 lean_r59
have lean_s43 : (Eq let106 True) := by timed Eq.trans lean_s42 lean_r57
have lean_s44 : (Eq let107 True) := by timed Eq.trans lean_r29 lean_s43
have lean_s45 : let107 := by timed trueElim lean_s44
let lean_s46 := by timed congr lean_s3 lean_s45
have lean_s47 : (Eq let28 let28) := by timed rfl
let lean_s48 := by timed congr lean_s46 lean_s47
let lean_s49 := by timed congr lean_s39 lean_s48
let lean_s50 := by timed congr lean_s32 lean_s49
let lean_s51 := by timed congr lean_s25 lean_s50
let lean_s52 := by timed congr lean_s23 lean_s51
let lean_s53 := by timed congr lean_s21 lean_s52
let lean_s54 := by timed congr lean_s14 lean_s53
let lean_s55 := by timed congr lean_s12 lean_s54
have lean_s56 : (Eq let182 let181) := by timed congr lean_s5 lean_s55
have lean_s57 : let181 := by timed eqResolve lean_s2 lean_s56
have lean_s58 : (Or let19 (Or let60 (Or let38 (Or let47 (Or let6 (Or let180 (Or let179 (Or let178 (Or let28 let177))))))))) := by permutateOr lean_s57, [6, 7, 1, 3, 8, 4, 2, 0, 9, 5], (- 1)
let lean_s59 := by R2 lean_s58, lean_a105, let174, [(- 1), 0]
let lean_s60 := by timed flipCongrArg lean_r41 [GE.ge]
have lean_s61 : (Eq let2 let2) := by timed rfl
have lean_s62 : (Eq let173 let27) := by timed congr lean_s60 lean_s61
have lean_s63 : let27 := by timed eqResolve lean_a98 lean_s62
let lean_s64 := by R2 lean_s59, lean_s63, let27, [(- 1), 0]
let lean_s65 := by timed flipCongrArg lean_r31 [GE.ge]
have lean_s66 : (Eq let9 let9) := by timed rfl
have lean_s67 : (Eq let172 let176) := by timed congr lean_s65 lean_s66
have lean_s68 : let176 := by timed eqResolve lean_a97 lean_s67
let lean_s69 := by R2 lean_s64, lean_s68, let176, [(- 1), 0]
let lean_s70 := by timed flipCongrArg lean_r17 [GE.ge]
have lean_s71 : (Eq let171 let175) := by timed congr lean_s70 lean_s66
have lean_s72 : let175 := by timed eqResolve lean_a96 lean_s71
let lean_s73 := by R2 lean_s69, lean_s72, let175, [(- 1), 0]
let lean_s74 := by timed flipCongrArg lean_r20 [LE.le]
have lean_s75 : (Eq let170 let99) := by timed congr lean_s74 lean_s66
have lean_s76 : (Eq let170 let98) := by timed Eq.trans lean_s75 lean_r24
have lean_s77 : let98 := by timed eqResolve lean_a95 lean_s76
let lean_s78 := by R2 lean_s73, lean_s77, let98, [(- 1), 0]
have lean_s79 : let7 := by timed eqResolve lean_a91 lean_r34
let lean_s80 := by R1 lean_s78, lean_s79, let6, [(- 1), 0]
have lean_s81 : let48 := by timed eqResolve lean_a90 lean_r26
let lean_s82 := by R1 lean_s80, lean_s81, let47, [(- 1), 0]
let lean_s83 := by timed flipCongrArg lean_r22 [LE.le]
have lean_s84 : (Eq let168 let120) := by timed congr lean_s83 lean_s61
have lean_s85 : (Eq let168 let39) := by timed Eq.trans lean_s84 lean_r37
have lean_s86 : let39 := by timed eqResolve lean_a89 lean_s85
let lean_s87 := by R1 lean_s82, lean_s86, let38, [(- 1), 0]
let lean_s88 := by timed flipCongrArg lean_r19 [LE.le]
have lean_s89 : (Eq let167 let102) := by timed congr lean_s88 lean_s61
have lean_s90 : (Eq let167 let61) := by timed Eq.trans lean_s89 lean_r27
have lean_s91 : let61 := by timed eqResolve lean_a88 lean_s90
let lean_s92 := by R1 lean_s87, lean_s91, let60, [(- 1), 0]
have lean_s93 : let20 := by timed eqResolve lean_a86 lean_r15
exact (show False from by R1 lean_s92, lean_s93, let19, [0, 0])


