open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x3x5fplus : Int}
variable {x3x5fminus : Int}
variable {x2x5fplus : Int}
variable {x2x5fminus : Int}
variable {x1x5fplus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x8x5fplus : Int}
variable {x0x5fminus : Int}
variable {x8x5fminus : Int}
variable {x1x5fplus : Int}
variable {x9x5fplus : Int}
variable {x1x5fminus : Int}
variable {x7x5fminus : Int}
variable {x9x5fminus : Int}
variable {x7x5fplus : Int}
variable {x6x5fminus : Int}
variable {x1x5fminus : Int}
variable {x4x5fminus : Int}
variable {x6x5fplus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x5x5fminus : Int}
variable {x4x5fplus : Int}
variable {x6x5fplus : Int}
variable {x8x5fplus : Int}
variable {x4x5fminus : Int}
variable {x0x5fplus : Int}
variable {x8x5fminus : Int}
variable {x2x5fminus : Int}
variable {x2x5fplus : Int}
variable {x3x5fminus : Int}
variable {x4x5fplus : Int}
variable {x3x5fplus : Int}
variable {x7x5fminus : Int}
variable {x5x5fplus : Int}
variable {x7x5fplus : Int}
variable {x6x5fminus : Int}
variable {x9x5fminus : Int}
variable {x9x5fplus : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 (Int.ofNat 3))
  let let4 := (binrel% GT.gt let3 let1)
  let let5 := (Neg.neg let2)
  let let6 := (binrel% HMul.hMul let5 x8x5fminus)
  let let7 := (binrel% HAdd.hAdd x8x5fplus let6)
  let let8 := (binrel% HMul.hMul let5 x7x5fminus)
  let let9 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 let7))
  let let10 := (binrel% GE.ge let9 let1)
  let let11 := (Not let10)
  let let12 := (binrel% LT.lt let9 let1)
  let let13 := (Neg.neg let3)
  let let14 := (binrel% LT.lt let13 let1)
  let let15 := (Int.ofNat 6)
  let let16 := (binrel% HDiv.hDiv let2 let15)
  let let17 := (Neg.neg let16)
  let let18 := (binrel% LT.lt let17 let1)
  let let19 := (binrel% HMul.hMul let17 let5)
  let let20 := (binrel% HMul.hMul let13 let2)
  let let21 := (binrel% HMul.hMul let13 let1)
  let let22 := (binrel% HMul.hMul let3 let5)
  let let23 := (binrel% HMul.hMul let3 let2)
  let let24 := (binrel% HDiv.hDiv (Int.ofNat 5) let15)
  let let25 := (binrel% HMul.hMul let24 let5)
  let let26 := (Rat.ofInt 1)
  let let27 := (Neg.neg let26)
  let let28 := (binrel% HMul.hMul let27 let5)
  let let29 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let20 let19))))))
  let let30 := (Int.ofNat 2)
  let let31 := (binrel% HMul.hMul (Neg.neg let30) x5x5fminus)
  let let32 := (binrel% HMul.hMul let30 x5x5fplus)
  let let33 := (binrel% HMul.hMul let5 x6x5fminus)
  let let34 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let32 let31)))
  let let35 := (binrel% HMul.hMul let17 let34)
  let let36 := (binrel% HMul.hMul let5 x4x5fplus)
  let let37 := (binrel% HAdd.hAdd let36 x4x5fminus)
  let let38 := (binrel% HMul.hMul let5 x9x5fminus)
  let let39 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 let37))))
  let let40 := (binrel% HMul.hMul let13 let39)
  let let41 := (binrel% HAdd.hAdd x4x5fplus (binrel% HMul.hMul let5 x4x5fminus))
  let let42 := (binrel% HMul.hMul let5 x8x5fplus)
  let let43 := (binrel% HMul.hMul let5 x5x5fplus)
  let let44 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x8x5fminus let41))))))
  let let45 := (binrel% HMul.hMul let13 let44)
  let let46 := (binrel% HMul.hMul let3 let9)
  let let47 := (binrel% HMul.hMul let5 x7x5fplus)
  let let48 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x7x5fminus let7))))
  let let49 := (binrel% HMul.hMul let3 let48)
  let let50 := (binrel% HAdd.hAdd x6x5fplus let33)
  let let51 := (binrel% HMul.hMul let24 let50)
  let let52 := (binrel% HMul.hMul let27 let7)
  let let53 := (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let40 let35))))))
  let let54 := (binrel% GE.ge let53 let29)
  let let55 := (Not let54)
  let let56 := (binrel% LT.lt let53 let29)
  let let57 := (Neg.neg let24)
  let let58 := (binrel% HAdd.hAdd (binrel% HMul.hMul let24 x6x5fplus) (binrel% HMul.hMul let57 x6x5fminus))
  let let59 := (binrel% HMul.hMul let13 x8x5fminus)
  let let60 := (binrel% HMul.hMul let3 x8x5fplus)
  let let61 := (binrel% HAdd.hAdd let60 let59)
  let let62 := (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x7x5fminus) let61))))
  let let63 := (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x7x5fminus) let61))
  let let64 := (binrel% HMul.hMul let3 x6x5fminus)
  let let65 := (binrel% HMul.hMul let13 x6x5fplus)
  let let66 := (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x4x5fplus) (binrel% HMul.hMul let13 x4x5fminus))))))
  let let67 := (binrel% HAdd.hAdd (binrel% HMul.hMul let17 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x5x5fplus) (binrel% HMul.hMul let3 x5x5fminus))))
  let let68 := (binrel% GE.ge let50 let1)
  let let69 := (Not let68)
  let let70 := (Not let69)
  let let71 := (Eq let68 let70)
  let let72 := (Eq let70 let68)
  let let73 := (binrel% GE.ge let48 let2)
  let let74 := (Not let73)
  let let75 := (binrel% LT.lt let48 let2)
  let let76 := (Rat.ofInt (binrel% HAdd.hAdd let42 x8x5fminus))
  let let77 := (Eq let68 let68)
  let let78 := (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x5x5fminus) (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x4x5fplus) (binrel% HMul.hMul let3 x4x5fminus))))))))
  let let79 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 let37))))
  let let80 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x7x5fplus let8)))
  let let81 := (Rat.ofInt 0)
  let let82 := (binrel% LE.le let48 let1)
  let let83 := (binrel% HSub.hSub x6x5fplus x6x5fminus)
  let let84 := (binrel% GE.ge let81 let81)
  let let85 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let66 let67))))))
  let let86 := (binrel% HMul.hMul let5 x5x5fminus)
  let let87 := (binrel% HMul.hMul let5 x6x5fplus)
  let let88 := (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 let37))))))
  let let89 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let86 let37))))))
  let let90 := (Not let74)
  let let91 := (Eq let90 let73)
  let let92 := (binrel% HAdd.hAdd let47 x7x5fminus)
  let let93 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 let92))))
  let let94 := (binrel% HSub.hSub x8x5fplus x8x5fminus)
  let let95 := (binrel% LE.le let9 let5)
  let let96 := (binrel% LE.le let50 let5)
  let let97 := (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let13 let16))))))
  let let98 := (binrel% GE.ge let44 let1)
  let let99 := (binrel% LE.le let88 let1)
  let let100 := (Eq let73 let73)
  let let101 := (binrel% GT.gt let24 let1)
  let let102 := (binrel% LT.lt let27 let1)
  let let103 := (Eq let73 let90)
  let let104 := (Eq let10 let10)
  let let105 := (Not let11)
  let let106 := (Eq let105 let10)
  let let107 := (binrel% GE.ge let7 let5)
  let let108 := (Not let107)
  let let109 := (binrel% LT.lt let7 let5)
  let let110 := (Eq let10 let105)
  let let111 := (Not True)
  let let112 := (binrel% LT.lt let50 let1)
  let let113 := (binrel% LE.le let83 let5)
  let let114 := (binrel% GE.ge let94 let5)
  let let115 := (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x0x5fplus) x0x5fminus)
  let let116 := (binrel% LE.le let89 let1)
  let let117 := (binrel% LE.le let93 let1)
  let let118 := (binrel% HMul.hMul let5 x2x5fplus)
  let let119 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let5 x0x5fminus))
  let let120 := (binrel% LE.le let80 let5)
  let let121 := (binrel% HMul.hMul let5 x1x5fminus)
  let let122 := (binrel% GE.ge let79 let2)
  let let123 := (binrel% GE.ge let34 let5)
  let let124 := (binrel% GE.ge let39 let2)
  let let125 := (Not let123)
  let let126 := (Not let124)
  let let127 := (Not let98)
  let let128 := (Or let125 (Or let126 (Or let127 (Or let10 (Or let73 (Or let68 let108))))))
  let let129 := (Or let125 (Or let126 (Or let127 (Or let105 (Or let90 (Or let70 let108))))))
  let let130 := (Or let108 False)
  let let131 := (binrel% LE.le let35 let19)
  let let132 := (And let18 let123)
  let let133 := (binrel% LE.le let40 let20)
  let let134 := (And let14 let124)
  let let135 := (binrel% LE.le let45 let21)
  let let136 := (And let14 let98)
  let let137 := (binrel% LE.le let46 let22)
  let let138 := (And let4 let95)
  let let139 := (binrel% LT.lt let49 let23)
  let let140 := (And let4 let75)
  let let141 := (binrel% LE.le let51 let25)
  let let142 := (And let101 let96)
  let let143 := (binrel% LE.le let52 let28)
  let let144 := (And let102 let107)
(Eq let4 True) → (Eq let12 let11) → (Eq let14 True) → (Eq let18 True) → (Eq let56 let55) → (Eq let51 let58) → (Eq let49 let62) → (Eq let46 let63) → (Eq let40 let66) → (Eq let35 let67) → (Eq let72 let71) → (Eq let75 let74) → (Eq let52 let76) → (Eq let77 True) → (Eq let45 let78) → (Eq let79 let39) → (Eq let80 let9) → (Eq let21 let81) → (Eq let82 let74) → (Eq let83 let50) → (Eq let84 True) → (Eq let85 let81) → (Eq let89 let88) → (Eq let28 let26) → let91 → (Eq let93 let48) → let72 → (Eq let94 let7) → (Eq let95 let11) → (Eq let96 let69) → (Eq let97 let81) → (Eq let25 let57) → (Eq let99 let98) → (Eq let100 True) → (Eq let101 True) → (Eq let23 let3) → (Eq let102 True) → (Eq let91 let103) → (Eq let104 True) → let106 → (Eq let109 let108) → (Eq let19 let16) → (Eq let106 let110) → (Eq let20 let13) → (Eq let111 False) → (Eq let112 let69) → (Eq let22 let13) → (binrel% GE.ge x6x5fplus let1) → (binrel% GE.ge x6x5fminus let1) → (binrel% GE.ge x9x5fplus let1) → (binrel% GE.ge x9x5fminus let1) → (binrel% GE.ge x7x5fplus let1) → (binrel% GE.ge x7x5fminus let1) → (binrel% GE.ge x5x5fplus let1) → (binrel% GE.ge x5x5fminus let1) → (binrel% GE.ge x0x5fplus let1) → (binrel% GE.ge x0x5fminus let1) → (binrel% GE.ge x8x5fplus let1) → (binrel% GE.ge x8x5fminus let1) → (binrel% GE.ge x4x5fplus let1) → (binrel% GE.ge x4x5fminus let1) → (binrel% GE.ge x2x5fplus let1) → (binrel% GE.ge x2x5fminus let1) → (binrel% GE.ge x3x5fplus let1) → (binrel% GE.ge x3x5fminus let1) → (binrel% GE.ge x1x5fplus let1) → (binrel% GE.ge x1x5fminus let1) → let113 → let114 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x5x5fminus let115)))))))) let1) → let116 → let117 → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let118 x2x5fminus))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd x2x5fminus let119)))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 let92)) let2) → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 let115)) let5) → let120 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x3x5fminus) (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x2x5fminus) (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let121 let119)))))))))) let5) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x1x5fplus let121))))))))) let1) → let122 → let123 → (binrel% GE.ge (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let86 let41)) let1) → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 (Int.ofNat 3))
  let let4 := (binrel% GT.gt let3 let1)
  let let5 := (Neg.neg let2)
  let let6 := (binrel% HMul.hMul let5 x8x5fminus)
  let let7 := (binrel% HAdd.hAdd x8x5fplus let6)
  let let8 := (binrel% HMul.hMul let5 x7x5fminus)
  let let9 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 let7))
  let let10 := (binrel% GE.ge let9 let1)
  let let11 := (Not let10)
  let let12 := (binrel% LT.lt let9 let1)
  let let13 := (Neg.neg let3)
  let let14 := (binrel% LT.lt let13 let1)
  let let15 := (Int.ofNat 6)
  let let16 := (binrel% HDiv.hDiv let2 let15)
  let let17 := (Neg.neg let16)
  let let18 := (binrel% LT.lt let17 let1)
  let let19 := (binrel% HMul.hMul let17 let5)
  let let20 := (binrel% HMul.hMul let13 let2)
  let let21 := (binrel% HMul.hMul let13 let1)
  let let22 := (binrel% HMul.hMul let3 let5)
  let let23 := (binrel% HMul.hMul let3 let2)
  let let24 := (binrel% HDiv.hDiv (Int.ofNat 5) let15)
  let let25 := (binrel% HMul.hMul let24 let5)
  let let26 := (Rat.ofInt 1)
  let let27 := (Neg.neg let26)
  let let28 := (binrel% HMul.hMul let27 let5)
  let let29 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let20 let19))))))
  let let30 := (Int.ofNat 2)
  let let31 := (binrel% HMul.hMul (Neg.neg let30) x5x5fminus)
  let let32 := (binrel% HMul.hMul let30 x5x5fplus)
  let let33 := (binrel% HMul.hMul let5 x6x5fminus)
  let let34 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let32 let31)))
  let let35 := (binrel% HMul.hMul let17 let34)
  let let36 := (binrel% HMul.hMul let5 x4x5fplus)
  let let37 := (binrel% HAdd.hAdd let36 x4x5fminus)
  let let38 := (binrel% HMul.hMul let5 x9x5fminus)
  let let39 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 let37))))
  let let40 := (binrel% HMul.hMul let13 let39)
  let let41 := (binrel% HAdd.hAdd x4x5fplus (binrel% HMul.hMul let5 x4x5fminus))
  let let42 := (binrel% HMul.hMul let5 x8x5fplus)
  let let43 := (binrel% HMul.hMul let5 x5x5fplus)
  let let44 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x8x5fminus let41))))))
  let let45 := (binrel% HMul.hMul let13 let44)
  let let46 := (binrel% HMul.hMul let3 let9)
  let let47 := (binrel% HMul.hMul let5 x7x5fplus)
  let let48 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x7x5fminus let7))))
  let let49 := (binrel% HMul.hMul let3 let48)
  let let50 := (binrel% HAdd.hAdd x6x5fplus let33)
  let let51 := (binrel% HMul.hMul let24 let50)
  let let52 := (binrel% HMul.hMul let27 let7)
  let let53 := (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let40 let35))))))
  let let54 := (binrel% GE.ge let53 let29)
  let let55 := (Not let54)
  let let56 := (binrel% LT.lt let53 let29)
  let let57 := (Neg.neg let24)
  let let58 := (binrel% HAdd.hAdd (binrel% HMul.hMul let24 x6x5fplus) (binrel% HMul.hMul let57 x6x5fminus))
  let let59 := (binrel% HMul.hMul let13 x8x5fminus)
  let let60 := (binrel% HMul.hMul let3 x8x5fplus)
  let let61 := (binrel% HAdd.hAdd let60 let59)
  let let62 := (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x7x5fminus) let61))))
  let let63 := (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x7x5fminus) let61))
  let let64 := (binrel% HMul.hMul let3 x6x5fminus)
  let let65 := (binrel% HMul.hMul let13 x6x5fplus)
  let let66 := (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x4x5fplus) (binrel% HMul.hMul let13 x4x5fminus))))))
  let let67 := (binrel% HAdd.hAdd (binrel% HMul.hMul let17 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let16 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x5x5fplus) (binrel% HMul.hMul let3 x5x5fminus))))
  let let68 := (binrel% GE.ge let50 let1)
  let let69 := (Not let68)
  let let70 := (Not let69)
  let let71 := (Eq let68 let70)
  let let72 := (Eq let70 let68)
  let let73 := (binrel% GE.ge let48 let2)
  let let74 := (Not let73)
  let let75 := (binrel% LT.lt let48 let2)
  let let76 := (Rat.ofInt (binrel% HAdd.hAdd let42 x8x5fminus))
  let let77 := (Eq let68 let68)
  let let78 := (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x5x5fminus) (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x4x5fplus) (binrel% HMul.hMul let3 x4x5fminus))))))))
  let let79 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 let37))))
  let let80 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x7x5fplus let8)))
  let let81 := (Rat.ofInt 0)
  let let82 := (binrel% LE.le let48 let1)
  let let83 := (binrel% HSub.hSub x6x5fplus x6x5fminus)
  let let84 := (binrel% GE.ge let81 let81)
  let let85 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let66 let67))))))
  let let86 := (binrel% HMul.hMul let5 x5x5fminus)
  let let87 := (binrel% HMul.hMul let5 x6x5fplus)
  let let88 := (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 let37))))))
  let let89 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let86 let37))))))
  let let90 := (Not let74)
  let let91 := (Eq let90 let73)
  let let92 := (binrel% HAdd.hAdd let47 x7x5fminus)
  let let93 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 let92))))
  let let94 := (binrel% HSub.hSub x8x5fplus x8x5fminus)
  let let95 := (binrel% LE.le let9 let5)
  let let96 := (binrel% LE.le let50 let5)
  let let97 := (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let13 let16))))))
  let let98 := (binrel% GE.ge let44 let1)
  let let99 := (binrel% LE.le let88 let1)
  let let100 := (Eq let73 let73)
  let let101 := (binrel% GT.gt let24 let1)
  let let102 := (binrel% LT.lt let27 let1)
  let let103 := (Eq let73 let90)
  let let104 := (Eq let10 let10)
  let let105 := (Not let11)
  let let106 := (Eq let105 let10)
  let let107 := (binrel% GE.ge let7 let5)
  let let108 := (Not let107)
  let let109 := (binrel% LT.lt let7 let5)
  let let110 := (Eq let10 let105)
  let let111 := (Not True)
  let let112 := (binrel% LT.lt let50 let1)
  let let113 := (binrel% LE.le let83 let5)
  let let114 := (binrel% GE.ge let94 let5)
  let let115 := (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x0x5fplus) x0x5fminus)
  let let116 := (binrel% LE.le let89 let1)
  let let117 := (binrel% LE.le let93 let1)
  let let118 := (binrel% HMul.hMul let5 x2x5fplus)
  let let119 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let5 x0x5fminus))
  let let120 := (binrel% LE.le let80 let5)
  let let121 := (binrel% HMul.hMul let5 x1x5fminus)
  let let122 := (binrel% GE.ge let79 let2)
  let let123 := (binrel% GE.ge let34 let5)
  let let124 := (binrel% GE.ge let39 let2)
  let let125 := (Not let123)
  let let126 := (Not let124)
  let let127 := (Not let98)
  let let128 := (Or let125 (Or let126 (Or let127 (Or let10 (Or let73 (Or let68 let108))))))
  let let129 := (Or let125 (Or let126 (Or let127 (Or let105 (Or let90 (Or let70 let108))))))
  let let130 := (Or let108 False)
  let let131 := (binrel% LE.le let35 let19)
  let let132 := (And let18 let123)
  let let133 := (binrel% LE.le let40 let20)
  let let134 := (And let14 let124)
  let let135 := (binrel% LE.le let45 let21)
  let let136 := (And let14 let98)
  let let137 := (binrel% LE.le let46 let22)
  let let138 := (And let4 let95)
  let let139 := (binrel% LT.lt let49 let23)
  let let140 := (And let4 let75)
  let let141 := (binrel% LE.le let51 let25)
  let let142 := (And let101 let96)
  let let143 := (binrel% LE.le let52 let28)
  let let144 := (And let102 let107)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let12 let11) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let14 True) => -- EVALUATE
fun lean_r3 : (Eq let18 True) => -- EVALUATE
fun lean_r4 : (Eq let56 let55) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let51 let58) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let49 let62) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let46 let63) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let40 let66) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let35 let67) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let72 let71) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let75 let74) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let52 let76) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let77 True) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let45 let78) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let79 let39) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let80 let9) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let21 let81) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let82 let74) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let83 let50) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let84 True) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let85 let81) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let89 let88) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let28 let26) => -- THEORY_REWRITE_ARITH
fun lean_r24 : let91 => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let93 let48) => -- THEORY_REWRITE_ARITH
fun lean_r26 : let72 => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let94 let7) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let95 let11) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let96 let69) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let97 let81) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let25 let57) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let99 let98) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let100 True) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let101 True) => -- EVALUATE
fun lean_r35 : (Eq let23 let3) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let102 True) => -- EVALUATE
fun lean_r37 : (Eq let91 let103) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let104 True) => -- THEORY_REWRITE_BOOL
fun lean_r39 : let106 => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let109 let108) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let19 let16) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let106 let110) => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq let20 let13) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let111 False) => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let112 let69) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let22 let13) => -- THEORY_REWRITE_ARITH
fun lean_a47 : (binrel% GE.ge x6x5fplus let1) =>
fun lean_a48 : (binrel% GE.ge x6x5fminus let1) =>
fun lean_a49 : (binrel% GE.ge x9x5fplus let1) =>
fun lean_a50 : (binrel% GE.ge x9x5fminus let1) =>
fun lean_a51 : (binrel% GE.ge x7x5fplus let1) =>
fun lean_a52 : (binrel% GE.ge x7x5fminus let1) =>
fun lean_a53 : (binrel% GE.ge x5x5fplus let1) =>
fun lean_a54 : (binrel% GE.ge x5x5fminus let1) =>
fun lean_a55 : (binrel% GE.ge x0x5fplus let1) =>
fun lean_a56 : (binrel% GE.ge x0x5fminus let1) =>
fun lean_a57 : (binrel% GE.ge x8x5fplus let1) =>
fun lean_a58 : (binrel% GE.ge x8x5fminus let1) =>
fun lean_a59 : (binrel% GE.ge x4x5fplus let1) =>
fun lean_a60 : (binrel% GE.ge x4x5fminus let1) =>
fun lean_a61 : (binrel% GE.ge x2x5fplus let1) =>
fun lean_a62 : (binrel% GE.ge x2x5fminus let1) =>
fun lean_a63 : (binrel% GE.ge x3x5fplus let1) =>
fun lean_a64 : (binrel% GE.ge x3x5fminus let1) =>
fun lean_a65 : (binrel% GE.ge x1x5fplus let1) =>
fun lean_a66 : (binrel% GE.ge x1x5fminus let1) =>
fun lean_a67 : let113 =>
fun lean_a68 : let114 =>
fun lean_a69 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x5x5fminus let115)))))))) let1) =>
fun lean_a70 : let116 =>
fun lean_a71 : let117 =>
fun lean_a72 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let118 x2x5fminus))))) let1) =>
fun lean_a73 : (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd x2x5fminus let119)))) let1) =>
fun lean_a74 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 let92)) let2) =>
fun lean_a75 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 let115)) let5) =>
fun lean_a76 : let120 =>
fun lean_a77 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x3x5fminus) (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x2x5fminus) (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let121 let119)))))))))) let5) =>
fun lean_a78 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x1x5fplus let121))))))))) let1) =>
fun lean_a79 : let122 =>
fun lean_a80 : let123 =>
fun lean_a81 : (binrel% GE.ge (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let86 let41)) let1) => by
have lean_s0 : (Or let125 (Or let126 (Or let127 (Or let105 (Or let90 (Or let70 let130)))))) :=
  (scope (fun lean_a82 : let123 =>
    (scope (fun lean_a83 : let124 =>
      (scope (fun lean_a84 : let98 =>
        (scope (fun lean_a85 : let11 =>
          (scope (fun lean_a86 : let74 =>
            (scope (fun lean_a87 : let69 =>
              (scope (fun lean_a88 : let107 =>
                let lean_s0 := by timed flipCongrArg lean_r27 [GE.ge]
                have lean_s1 : (Eq let5 let5) := by timed rfl
                have lean_s2 : (Eq let114 let107) := by timed congr lean_s0 lean_s1
                have lean_s3 : let107 := by timed eqResolve lean_a68 lean_s2
                have lean_s4 : let130 :=
                  (scope (fun lean_a88 : let107 =>
                    have lean_s4 : let102 := by timed trueElim lean_r36
                    have lean_s5 : let107 := by timed eqResolve lean_a68 lean_s2
                    have lean_s6 : let144 := by timed And.intro lean_s4 lean_s5
                    have lean_s7 : (Implies let144 let143) := by arithMulNeg [let7, let5, let27], 3
                    have lean_s8 : let143 := by timed modusPonens lean_s6 lean_s7
                    have lean_s9 : let101 := by timed trueElim lean_r34
                    let lean_s10 := by timed flipCongrArg lean_r19 [LE.le]
                    have lean_s11 : (Eq let113 let96) := by timed congr lean_s10 lean_s1
                    have lean_s12 : (Eq let113 let69) := by timed Eq.trans lean_s11 lean_r29
                    have lean_s13 : let69 := by timed eqResolve lean_a67 lean_s12
                    have lean_s14 : (Eq let69 let112) := by timed Eq.symm lean_r45
                    have lean_s15 : let112 := by timed eqResolve lean_s13 lean_s14
                    have lean_s16 : let96 := by intTightUb lean_s15
                    have lean_s17 : let142 := by timed And.intro lean_s9 lean_s16
                    have lean_s18 : (Implies let142 let141) := by arithMulPos [let50, let5, let24], 1
                    have lean_s19 : let141 := by timed modusPonens lean_s17 lean_s18
                    have lean_s20 : let4 := by timed trueElim lean_r0
                    let lean_s21 := by timed flipCongrArg lean_r25 [LE.le]
                    have lean_s22 : (Eq let1 let1) := by timed rfl
                    have lean_s23 : (Eq let117 let82) := by timed congr lean_s21 lean_s22
                    have lean_s24 : (Eq let117 let74) := by timed Eq.trans lean_s23 lean_r18
                    have lean_s25 : let74 := by timed eqResolve lean_a71 lean_s24
                    have lean_s26 : (Eq let74 let75) := by timed Eq.symm lean_r11
                    have lean_s27 : let75 := by timed eqResolve lean_s25 lean_s26
                    have lean_s28 : let140 := by timed And.intro lean_s20 lean_s27
                    have lean_s29 : (Implies let140 let139) := by arithMulPos [let48, let2, let3], 0
                    have lean_s30 : let139 := by timed modusPonens lean_s28 lean_s29
                    let lean_s31 := by timed flipCongrArg lean_r16 [LE.le]
                    have lean_s32 : (Eq let120 let95) := by timed congr lean_s31 lean_s1
                    have lean_s33 : (Eq let120 let11) := by timed Eq.trans lean_s32 lean_r28
                    have lean_s34 : let11 := by timed eqResolve lean_a76 lean_s33
                    have lean_s35 : (Eq let11 let12) := by timed Eq.symm lean_r1
                    have lean_s36 : let12 := by timed eqResolve lean_s34 lean_s35
                    have lean_s37 : let95 := by intTightUb lean_s36
                    have lean_s38 : let138 := by timed And.intro lean_s20 lean_s37
                    have lean_s39 : (Implies let138 let137) := by arithMulPos [let9, let5, let3], 1
                    have lean_s40 : let137 := by timed modusPonens lean_s38 lean_s39
                    have lean_s41 : let14 := by timed trueElim lean_r2
                    let lean_s42 := by timed flipCongrArg lean_r22 [LE.le]
                    have lean_s43 : (Eq let116 let99) := by timed congr lean_s42 lean_s22
                    have lean_s44 : (Eq let116 let98) := by timed Eq.trans lean_s43 lean_r32
                    have lean_s45 : let98 := by timed eqResolve lean_a70 lean_s44
                    have lean_s46 : let136 := by timed And.intro lean_s41 lean_s45
                    have lean_s47 : (Implies let136 let135) := by arithMulNeg [let44, let1, let13], 3
                    have lean_s48 : let135 := by timed modusPonens lean_s46 lean_s47
                    let lean_s49 := by timed flipCongrArg lean_r15 [GE.ge]
                    have lean_s50 : (Eq let2 let2) := by timed rfl
                    have lean_s51 : (Eq let122 let124) := by timed congr lean_s49 lean_s50
                    have lean_s52 : let124 := by timed eqResolve lean_a79 lean_s51
                    have lean_s53 : let134 := by timed And.intro lean_s41 lean_s52
                    have lean_s54 : (Implies let134 let133) := by arithMulNeg [let39, let2, let13], 3
                    have lean_s55 : let133 := by timed modusPonens lean_s53 lean_s54
                    have lean_s56 : let18 := by timed trueElim lean_r3
                    have lean_s57 : let132 := by timed And.intro lean_s56 lean_a82
                    have lean_s58 : (Implies let132 let131) := by arithMulNeg [let34, let5, let17], 3
                    have lean_s59 : let131 := by timed modusPonens lean_s57 lean_s58
                    have lean_s60 : let56 := by sumBounds [lean_s8, lean_s19, lean_s30, lean_s40, lean_s48, lean_s55, lean_s59]
                    let lean_s61 := by timed congrHAdd lean_r8 lean_r9
                    let lean_s62 := by timed congrHAdd lean_r14 lean_s61
                    let lean_s63 := by timed congrHAdd lean_r7 lean_s62
                    let lean_s64 := by timed congrHAdd lean_r6 lean_s63
                    let lean_s65 := by timed congrHAdd lean_r5 lean_s64
                    have lean_s66 : (Eq let53 let85) := by timed congrHAdd lean_r12 lean_s65
                    have lean_s67 : (Eq let53 let81) := by timed Eq.trans lean_s66 lean_r21
                    let lean_s68 := by timed flipCongrArg lean_s67 [GE.ge]
                    let lean_s69 := by timed congrHAdd lean_r43 lean_r41
                    let lean_s70 := by timed congrHAdd lean_r17 lean_s69
                    let lean_s71 := by timed congrHAdd lean_r46 lean_s70
                    let lean_s72 := by timed congrHAdd lean_r35 lean_s71
                    let lean_s73 := by timed congrHAdd lean_r31 lean_s72
                    have lean_s74 : (Eq let29 let97) := by timed congrHAdd lean_r23 lean_s73
                    have lean_s75 : (Eq let29 let81) := by timed Eq.trans lean_s74 lean_r30
                    have lean_s76 : (Eq let54 let84) := by timed congr lean_s68 lean_s75
                    have lean_s77 : (Eq let54 True) := by timed Eq.trans lean_s76 lean_r20
                    have lean_s78 : (Eq let55 let111) := by timed flipCongrArg lean_s77 [Not]
                    have lean_s79 : (Eq let55 False) := by timed Eq.trans lean_s78 lean_r44
                    have lean_s80 : (Eq let56 False) := by timed Eq.trans lean_r4 lean_s79
                    show False from by timed eqResolve lean_s60 lean_s80
                  ))
                have lean_s5 : let108 := by liftOrNToNeg lean_s4
                have lean_s6 : (Eq let108 let109) := by timed Eq.symm lean_r40
                have lean_s7 : let109 := by timed eqResolve lean_s5 lean_s6
                have lean_s8 : let108 := by timed eqResolve lean_s7 lean_r40
                show False from by timed contradiction lean_s3 lean_s8
  ))))))))))))))
have lean_s1 : (Not (And let123 (And let124 (And let98 (And let11 (And let74 (And let69 let107))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let129 := by timed flipNotAnd lean_s1 [let123, let124, let98, let11, let74, let69, let107]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let125 let125) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let126 let126) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : (Eq let127 let127) := by timed rfl
let lean_s9 := by timed congr lean_s3 lean_s8
have lean_s10 : let104 := by timed rfl
let lean_s11 := by timed flipCongrArg lean_s10 [Eq]
have lean_s12 : (Eq let110 let104) := by timed congr lean_s11 lean_r39
have lean_s13 : (Eq let110 True) := by timed Eq.trans lean_s12 lean_r38
have lean_s14 : (Eq let106 True) := by timed Eq.trans lean_r42 lean_s13
have lean_s15 : let106 := by timed trueElim lean_s14
let lean_s16 := by timed congr lean_s3 lean_s15
have lean_s17 : let100 := by timed rfl
let lean_s18 := by timed flipCongrArg lean_s17 [Eq]
have lean_s19 : (Eq let103 let100) := by timed congr lean_s18 lean_r24
have lean_s20 : (Eq let103 True) := by timed Eq.trans lean_s19 lean_r33
have lean_s21 : (Eq let91 True) := by timed Eq.trans lean_r37 lean_s20
have lean_s22 : let91 := by timed trueElim lean_s21
let lean_s23 := by timed congr lean_s3 lean_s22
have lean_s24 : let77 := by timed rfl
let lean_s25 := by timed flipCongrArg lean_s24 [Eq]
have lean_s26 : (Eq let71 let77) := by timed congr lean_s25 lean_r26
have lean_s27 : (Eq let71 True) := by timed Eq.trans lean_s26 lean_r13
have lean_s28 : (Eq let72 True) := by timed Eq.trans lean_r10 lean_s27
have lean_s29 : let72 := by timed trueElim lean_s28
let lean_s30 := by timed congr lean_s3 lean_s29
have lean_s31 : (Eq let108 let108) := by timed rfl
let lean_s32 := by timed congr lean_s30 lean_s31
let lean_s33 := by timed congr lean_s23 lean_s32
let lean_s34 := by timed congr lean_s16 lean_s33
let lean_s35 := by timed congr lean_s9 lean_s34
let lean_s36 := by timed congr lean_s7 lean_s35
have lean_s37 : (Eq let129 let128) := by timed congr lean_s5 lean_s36
have lean_s38 : let128 := by timed eqResolve lean_s2 lean_s37
have lean_s39 : (Or let68 (Or let73 (Or let10 (Or let108 (Or let127 (Or let126 let125)))))) := by permutateOr lean_s38, [5, 4, 3, 6, 2, 1, 0], (- 1)
let lean_s40 := by R2 lean_s39, lean_a80, let123, [(- 1), 0]
let lean_s41 := by timed flipCongrArg lean_r15 [GE.ge]
have lean_s42 : (Eq let2 let2) := by timed rfl
have lean_s43 : (Eq let122 let124) := by timed congr lean_s41 lean_s42
have lean_s44 : let124 := by timed eqResolve lean_a79 lean_s43
let lean_s45 := by R2 lean_s40, lean_s44, let124, [(- 1), 0]
let lean_s46 := by timed flipCongrArg lean_r16 [LE.le]
have lean_s47 : (Eq let5 let5) := by timed rfl
have lean_s48 : (Eq let120 let95) := by timed congr lean_s46 lean_s47
have lean_s49 : (Eq let120 let11) := by timed Eq.trans lean_s48 lean_r28
have lean_s50 : let11 := by timed eqResolve lean_a76 lean_s49
let lean_s51 := by R1 lean_s45, lean_s50, let10, [(- 1), 0]
let lean_s52 := by timed flipCongrArg lean_r25 [LE.le]
have lean_s53 : (Eq let1 let1) := by timed rfl
have lean_s54 : (Eq let117 let82) := by timed congr lean_s52 lean_s53
have lean_s55 : (Eq let117 let74) := by timed Eq.trans lean_s54 lean_r18
have lean_s56 : let74 := by timed eqResolve lean_a71 lean_s55
let lean_s57 := by R1 lean_s51, lean_s56, let73, [(- 1), 0]
let lean_s58 := by timed flipCongrArg lean_r22 [LE.le]
have lean_s59 : (Eq let116 let99) := by timed congr lean_s58 lean_s53
have lean_s60 : (Eq let116 let98) := by timed Eq.trans lean_s59 lean_r32
have lean_s61 : let98 := by timed eqResolve lean_a70 lean_s60
let lean_s62 := by R2 lean_s57, lean_s61, let98, [(- 1), 0]
let lean_s63 := by timed flipCongrArg lean_r27 [GE.ge]
have lean_s64 : (Eq let114 let107) := by timed congr lean_s63 lean_s47
have lean_s65 : let107 := by timed eqResolve lean_a68 lean_s64
let lean_s66 := by R2 lean_s62, lean_s65, let107, [(- 1), 0]
let lean_s67 := by timed flipCongrArg lean_r19 [LE.le]
have lean_s68 : (Eq let113 let96) := by timed congr lean_s67 lean_s47
have lean_s69 : (Eq let113 let69) := by timed Eq.trans lean_s68 lean_r29
have lean_s70 : let69 := by timed eqResolve lean_a67 lean_s69
exact (show False from by R1 lean_s66, lean_s70, let68, [0, 0])


