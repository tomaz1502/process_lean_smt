open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x8x5fplus : Int}
variable {x9x5fplus : Int}
variable {x9x5fminus : Int}
variable {x1x5fminus : Int}
variable {x6x5fminus : Int}
variable {x5x5fplus : Int}
variable {x4x5fplus : Int}
variable {x4x5fminus : Int}
variable {x1x5fminus : Int}
variable {x3x5fplus : Int}
variable {x0x5fminus : Int}
variable {x3x5fminus : Int}
variable {x5x5fminus : Int}
variable {x2x5fplus : Int}
variable {x7x5fminus : Int}
variable {x7x5fplus : Int}
variable {x4x5fminus : Int}
variable {x2x5fminus : Int}
variable {x7x5fminus : Int}
variable {x6x5fplus : Int}
variable {x6x5fplus : Int}
variable {x2x5fplus : Int}
variable {x0x5fminus : Int}
variable {x6x5fminus : Int}
variable {x1x5fplus : Int}
variable {x2x5fminus : Int}
variable {x9x5fminus : Int}
variable {x8x5fminus : Int}
variable {x9x5fplus : Int}
variable {x3x5fminus : Int}
variable {x5x5fminus : Int}
variable {x1x5fplus : Int}
variable {x5x5fplus : Int}
variable {x0x5fplus : Int}
variable {x8x5fminus : Int}
variable {x7x5fplus : Int}
variable {x8x5fplus : Int}
variable {x4x5fplus : Int}
variable {x0x5fplus : Int}
variable {x3x5fplus : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 21)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (Rat.ofInt 9)
  let let7 := (binrel% HMul.hMul let6 let1)
  let let8 := (Int.ofNat 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% HMul.hMul let9 x2x5fplus)
  let let11 := (binrel% HAdd.hAdd let10 x2x5fminus)
  let let12 := (binrel% HMul.hMul let9 x4x5fminus)
  let let13 := (binrel% HMul.hMul let9 x6x5fminus)
  let let14 := (binrel% HMul.hMul let9 x9x5fminus)
  let let15 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 let11))))))
  let let16 := (binrel% GE.ge let15 let1)
  let let17 := (Not let16)
  let let18 := (binrel% LT.lt let15 let1)
  let let19 := (Neg.neg (Rat.ofInt 12))
  let let20 := (binrel% GE.ge let5 let19)
  let let21 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let9 x0x5fminus))
  let let22 := (binrel% HMul.hMul let9 x5x5fminus)
  let let23 := (binrel% HMul.hMul let9 x6x5fplus)
  let let24 := (binrel% HMul.hMul let9 x7x5fplus)
  let let25 := (Rat.ofInt (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x2x5fminus let21)))))))))
  let let26 := (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x0x5fplus) x0x5fminus)
  let let27 := (binrel% HMul.hMul let9 x2x5fminus)
  let let28 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let27 let26))
  let let29 := (binrel% HMul.hMul let9 x5x5fplus)
  let let30 := (binrel% HMul.hMul let9 x7x5fminus)
  let let31 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus let28))))))
  let let32 := (Neg.neg (Rat.ofInt 1))
  let let33 := (binrel% HMul.hMul let32 let31)
  let let34 := (Not True)
  let let35 := (Int.ofNat 2)
  let let36 := (Neg.neg let35)
  let let37 := (binrel% HMul.hMul let36 x8x5fminus)
  let let38 := (binrel% HMul.hMul let35 x8x5fplus)
  let let39 := (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let23 x6x5fminus)))
  let let40 := (binrel% GE.ge let39 let8)
  let let41 := (Not let40)
  let let42 := (Not let41)
  let let43 := (Eq let42 let40)
  let let44 := (Eq let40 let40)
  let let45 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let24 x7x5fminus)))))
  let let46 := (binrel% GE.ge let45 let35)
  let let47 := (Eq let46 let46)
  let let48 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 let26))
  let let49 := (binrel% GE.ge let48 let1)
  let let50 := (Not let49)
  let let51 := (Not let50)
  let let52 := (Eq let49 let51)
  let let53 := (Eq let51 let49)
  let let54 := (Rat.ofInt 31)
  let let55 := (Rat.ofInt 19)
  let let56 := (Neg.neg let55)
  let let57 := (Rat.ofInt 4)
  let let58 := (Neg.neg (Rat.ofInt 38))
  let let59 := (Neg.neg (Rat.ofInt 28))
  let let60 := (Rat.ofInt 18)
  let let61 := (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let5 let5))))))))))
  let let62 := (Eq let49 let49)
  let let63 := (binrel% LE.le let15 let9)
  let let64 := (binrel% GE.ge let31 let8)
  let let65 := (Not let64)
  let let66 := (binrel% LT.lt let31 let8)
  let let67 := (binrel% LT.lt let58 let1)
  let let68 := (Rat.ofInt 2)
  let let69 := (binrel% HMul.hMul let68 let35)
  let let70 := (binrel% HMul.hMul let54 let1)
  let let71 := (Not let46)
  let let72 := (Not let71)
  let let73 := (Eq let46 let72)
  let let74 := (Eq let72 let46)
  let let75 := (binrel% HMul.hMul let9 x3x5fminus)
  let let76 := (binrel% HMul.hMul let9 x1x5fplus)
  let let77 := (binrel% HMul.hMul let9 x8x5fminus)
  let let78 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let75 let21))))))))))
  let let79 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x1x5fminus let21))))))))))
  let let80 := (binrel% GT.gt let6 let1)
  let let81 := (binrel% GT.gt let68 let1)
  let let82 := (binrel% HMul.hMul let9 x3x5fplus)
  let let83 := (binrel% HAdd.hAdd let82 x3x5fminus)
  let let84 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus let83))))))
  let let85 := (binrel% HAdd.hAdd let76 x1x5fminus)
  let let86 := (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd x3x5fminus let85))
  let let87 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus let86))))
  let let88 := (Not let17)
  let let89 := (Eq let16 let88)
  let let90 := (Eq let88 let16)
  let let91 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x1x5fminus let83))))))
  let let92 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus let86))))
  let let93 := (binrel% GE.ge let84 let35)
  let let94 := (Not let93)
  let let95 := (Not let94)
  let let96 := (Eq let93 let95)
  let let97 := (Eq let95 let93)
  let let98 := (Int.ofNat 28)
  let let99 := (Neg.neg let98)
  let let100 := (Int.ofNat 56)
  let let101 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let99 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let100) x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let100 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let99 x4x5fplus) (binrel% HMul.hMul let98 x4x5fminus)))))))
  let let102 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x6x5fminus) (binrel% HAdd.hAdd x4x5fplus let12)))))
  let let103 := (binrel% HMul.hMul let59 let102)
  let let104 := (binrel% LE.le let84 let8)
  let let105 := (Eq let40 let42)
  let let106 := (binrel% LE.le let39 let1)
  let let107 := (Eq let16 let16)
  let let108 := (Neg.neg let60)
  let let109 := (binrel% LT.lt let108 let1)
  let let110 := (Int.ofNat 10)
  let let111 := (Neg.neg let110)
  let let112 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let110 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let110 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let110 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let110 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let110 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x0x5fplus) (binrel% HMul.hMul let110 x0x5fminus)))))))))))))
  let let113 := (Neg.neg (Rat.ofInt 10))
  let let114 := (binrel% HMul.hMul let113 let78)
  let let115 := (binrel% LE.le let45 let8)
  let let116 := (binrel% HMul.hMul let3 let9)
  let let117 := (Int.ofNat 31)
  let let118 := (Neg.neg let117)
  let let119 := (Int.ofNat 62)
  let let120 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let119 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let119) x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let118 x6x5fplus) (binrel% HMul.hMul let117 x6x5fminus)))))
  let let121 := (binrel% HMul.hMul let54 let39)
  let let122 := (Int.ofNat 18)
  let let123 := (Neg.neg let122)
  let let124 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let122 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let122 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let122 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let122 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let122 x0x5fplus) (binrel% HMul.hMul let123 x0x5fminus)))))))))))
  let let125 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let75 let28))))))
  let let126 := (binrel% HMul.hMul let108 let125)
  let let127 := (binrel% HMul.hMul let54 let8)
  let let128 := (binrel% GT.gt let55 let1)
  let let129 := (binrel% LE.le let48 let9)
  let let130 := (binrel% HMul.hMul let55 let9)
  let let131 := (binrel% LT.lt let39 let8)
  let let132 := (binrel% GT.gt let54 let1)
  let let133 := (binrel% LT.lt let113 let1)
  let let134 := (Int.ofNat 21)
  let let135 := (Neg.neg let134)
  let let136 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let135 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let134 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let134 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let135 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let134 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let135 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let134 x3x5fplus) (binrel% HMul.hMul let135 x3x5fminus)))))))))
  let let137 := (binrel% HMul.hMul let3 let91)
  let let138 := (Eq let93 let93)
  let let139 := (binrel% HMul.hMul let32 let8)
  let let140 := (Int.ofNat 9)
  let let141 := (Neg.neg let140)
  let let142 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let140 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let141 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let141 x0x5fplus) (binrel% HMul.hMul let140 x0x5fminus)))))
  let let143 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let117 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let118 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let118 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let117 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let118 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let117 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let118 x3x5fplus) (binrel% HMul.hMul let117 x3x5fminus)))))))))
  let let144 := (Int.ofNat 19)
  let let145 := (Neg.neg let144)
  let let146 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let144 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let145 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let144 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let145 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let144 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let145 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let145 x2x5fplus) (binrel% HMul.hMul let144 x2x5fminus)))))))))
  let let147 := (Int.ofNat 4)
  let let148 := (binrel% HMul.hMul let36 x9x5fminus)
  let let149 := (binrel% HMul.hMul let35 x9x5fplus)
  let let150 := (Rat.ofInt (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd (binrel% HMul.hMul let147 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let147) x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x7x5fplus) (binrel% HMul.hMul let35 x7x5fminus)))))))
  let let151 := (Int.ofNat 38)
  let let152 := (Neg.neg let151)
  let let153 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let152 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let151 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let151 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let152 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let151 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let152 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let151 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let152 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let151 x2x5fplus) (binrel% HMul.hMul let152 x2x5fminus)))))))))))
  let let154 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let124 (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let136 (binrel% HAdd.hAdd let150 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let142 let120))))))))))
  let let155 := (binrel% HMul.hMul let58 let8)
  let let156 := (binrel% HMul.hMul let6 let48)
  let let157 := (binrel% LT.lt let59 let1)
  let let158 := (binrel% HMul.hMul let59 let8)
  let let159 := (binrel% HMul.hMul let54 let84)
  let let160 := (binrel% HMul.hMul let113 let1)
  let let161 := (binrel% HMul.hMul let55 let15)
  let let162 := (binrel% HMul.hMul let108 let9)
  let let163 := (binrel% HMul.hMul let68 let45)
  let let164 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd x3x5fminus let11))))))))
  let let165 := (binrel% HMul.hMul let58 let164)
  let let166 := (binrel% LT.lt let84 let35)
  let let167 := (binrel% LT.lt let32 let1)
  let let168 := (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let162 (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd let155 (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let7 let70))))))))))
  let let169 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let103 (binrel% HAdd.hAdd let165 (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let163 (binrel% HAdd.hAdd let161 (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd let156 let121))))))))))
  let let170 := (binrel% GE.ge let169 let168)
  let let171 := (Not let170)
  let let172 := (binrel% LT.lt let169 let168)
  let let173 := (binrel% LT.lt let48 let1)
  let let174 := (binrel% LT.lt let45 let35)
  let let175 := (binrel% LE.le let87 let8)
  let let176 := (Int.ofNat 3)
  let let177 := (binrel% GE.ge let79 let1)
  let let178 := (binrel% GE.ge let164 let8)
  let let179 := (binrel% GE.ge let125 let9)
  let let180 := (binrel% GE.ge let92 let9)
  let let181 := (binrel% GE.ge let102 let8)
  let let182 := (binrel% GE.ge let78 let1)
  let let183 := (binrel% GE.ge let91 let9)
  let let184 := (Not let181)
  let let185 := (Not let183)
  let let186 := (Not let179)
  let let187 := (Not let178)
  let let188 := (Not let182)
  let let189 := (Or let185 (Or let187 (Or let184 (Or let188 (Or let186 let65)))))
  let let190 := (Or let40 (Or let49 (Or let93 (Or let16 (Or let46 let189)))))
  let let191 := (Or let42 (Or let51 (Or let95 (Or let88 (Or let72 let189)))))
  let let192 := (Or let65 False)
  let let193 := (binrel% LE.le let121 let70)
  let let194 := (And let132 let106)
  let let195 := (binrel% LT.lt let156 let7)
  let let196 := (And let80 let173)
  let let197 := (binrel% LE.le let159 let127)
  let let198 := (And let132 let104)
  let let199 := (binrel% LE.le let161 let130)
  let let200 := (And let128 let63)
  let let201 := (binrel% LT.lt let163 let69)
  let let202 := (And let81 let174)
  let let203 := (binrel% LE.le let137 let116)
  let let204 := (And let4 let183)
  let let205 := (binrel% LE.le let165 let155)
  let let206 := (And let67 let178)
  let let207 := (binrel% LE.le let103 let158)
  let let208 := (And let157 let181)
  let let209 := (binrel% LE.le let114 let160)
  let let210 := (And let133 let182)
  let let211 := (binrel% LE.le let126 let162)
  let let212 := (And let109 let179)
  let let213 := (binrel% LE.le let33 let139)
  let let214 := (And let167 let64)
(Eq let4 True) → (Eq let7 let5) → (Eq let18 let17) → (Eq let20 True) → (Eq let33 let25) → (Eq let34 False) → let43 → (Eq let44 True) → (Eq let47 True) → (Eq let53 let52) → (Eq let61 let19) → (Eq let62 True) → let53 → (Eq let63 let17) → (Eq let66 let65) → (Eq let67 True) → (Eq let69 let57) → (Eq let70 let5) → (Eq let74 let73) → (Eq let79 let78) → (Eq let80 True) → (Eq let81 True) → (Eq let87 let84) → (Eq let90 let89) → (Eq let92 let91) → (Eq let97 let96) → (Eq let103 let101) → (Eq let104 let94) → (Eq let43 let105) → (Eq let106 let41) → let74 → (Eq let107 True) → (Eq let109 True) → (Eq let114 let112) → (Eq let115 let71) → (Eq let116 let2) → (Eq let121 let120) → let90 → (Eq let126 let124) → (Eq let127 let54) → (Eq let128 True) → (Eq let129 let50) → (Eq let130 let56) → (Eq let131 let41) → (Eq let132 True) → (Eq let133 True) → (Eq let137 let136) → (Eq let138 True) → (Eq let139 let32) → (Eq let154 let5) → (Eq let155 let58) → (Eq let156 let142) → (Eq let157 True) → (Eq let158 let59) → (Eq let159 let143) → (Eq let160 let5) → (Eq let161 let146) → (Eq let162 let60) → (Eq let163 let150) → let97 → (Eq let165 let153) → (Eq let166 let94) → (Eq let167 True) → (Eq let172 let171) → (Eq let173 let50) → (Eq let174 let71) → (binrel% GE.ge x9x5fplus let1) → (binrel% GE.ge x9x5fminus let1) → (binrel% GE.ge x8x5fplus let1) → (binrel% GE.ge x8x5fminus let1) → (binrel% GE.ge x7x5fplus let1) → (binrel% GE.ge x7x5fminus let1) → (binrel% GE.ge x6x5fplus let1) → (binrel% GE.ge x6x5fminus let1) → (binrel% GE.ge x1x5fplus let1) → (binrel% GE.ge x1x5fminus let1) → (binrel% GE.ge x5x5fplus let1) → (binrel% GE.ge x5x5fminus let1) → (binrel% GE.ge x3x5fplus let1) → (binrel% GE.ge x3x5fminus let1) → (binrel% GE.ge x4x5fplus let1) → (binrel% GE.ge x4x5fminus let1) → (binrel% GE.ge x2x5fplus let1) → (binrel% GE.ge x2x5fminus let1) → (binrel% GE.ge x0x5fplus let1) → (binrel% GE.ge x0x5fminus let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x7x5fminus) (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x1x5fplus (binrel% HMul.hMul let9 x1x5fminus)))))))))) let1) → let175 → let63 → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x2x5fplus let27))))))) let9) → let115 → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus let75))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 let83)))) let1) → let106 → let129 → (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let176 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let176) x4x5fminus) let26)) let8) → let177 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x2x5fminus let85)))))))) let1) → let178 → let179 → let64 → let180 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x0x5fplus) (binrel% HMul.hMul let35 x0x5fminus)))))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x4x5fplus) (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x1x5fplus) (binrel% HMul.hMul let35 x1x5fminus)))))) let1) → let181 → (binrel% GE.ge (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let27 let21)))) let1) → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 21)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (Rat.ofInt 9)
  let let7 := (binrel% HMul.hMul let6 let1)
  let let8 := (Int.ofNat 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% HMul.hMul let9 x2x5fplus)
  let let11 := (binrel% HAdd.hAdd let10 x2x5fminus)
  let let12 := (binrel% HMul.hMul let9 x4x5fminus)
  let let13 := (binrel% HMul.hMul let9 x6x5fminus)
  let let14 := (binrel% HMul.hMul let9 x9x5fminus)
  let let15 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 let11))))))
  let let16 := (binrel% GE.ge let15 let1)
  let let17 := (Not let16)
  let let18 := (binrel% LT.lt let15 let1)
  let let19 := (Neg.neg (Rat.ofInt 12))
  let let20 := (binrel% GE.ge let5 let19)
  let let21 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let9 x0x5fminus))
  let let22 := (binrel% HMul.hMul let9 x5x5fminus)
  let let23 := (binrel% HMul.hMul let9 x6x5fplus)
  let let24 := (binrel% HMul.hMul let9 x7x5fplus)
  let let25 := (Rat.ofInt (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x2x5fminus let21)))))))))
  let let26 := (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x0x5fplus) x0x5fminus)
  let let27 := (binrel% HMul.hMul let9 x2x5fminus)
  let let28 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let27 let26))
  let let29 := (binrel% HMul.hMul let9 x5x5fplus)
  let let30 := (binrel% HMul.hMul let9 x7x5fminus)
  let let31 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus let28))))))
  let let32 := (Neg.neg (Rat.ofInt 1))
  let let33 := (binrel% HMul.hMul let32 let31)
  let let34 := (Not True)
  let let35 := (Int.ofNat 2)
  let let36 := (Neg.neg let35)
  let let37 := (binrel% HMul.hMul let36 x8x5fminus)
  let let38 := (binrel% HMul.hMul let35 x8x5fplus)
  let let39 := (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let23 x6x5fminus)))
  let let40 := (binrel% GE.ge let39 let8)
  let let41 := (Not let40)
  let let42 := (Not let41)
  let let43 := (Eq let42 let40)
  let let44 := (Eq let40 let40)
  let let45 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let24 x7x5fminus)))))
  let let46 := (binrel% GE.ge let45 let35)
  let let47 := (Eq let46 let46)
  let let48 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 let26))
  let let49 := (binrel% GE.ge let48 let1)
  let let50 := (Not let49)
  let let51 := (Not let50)
  let let52 := (Eq let49 let51)
  let let53 := (Eq let51 let49)
  let let54 := (Rat.ofInt 31)
  let let55 := (Rat.ofInt 19)
  let let56 := (Neg.neg let55)
  let let57 := (Rat.ofInt 4)
  let let58 := (Neg.neg (Rat.ofInt 38))
  let let59 := (Neg.neg (Rat.ofInt 28))
  let let60 := (Rat.ofInt 18)
  let let61 := (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let5 let5))))))))))
  let let62 := (Eq let49 let49)
  let let63 := (binrel% LE.le let15 let9)
  let let64 := (binrel% GE.ge let31 let8)
  let let65 := (Not let64)
  let let66 := (binrel% LT.lt let31 let8)
  let let67 := (binrel% LT.lt let58 let1)
  let let68 := (Rat.ofInt 2)
  let let69 := (binrel% HMul.hMul let68 let35)
  let let70 := (binrel% HMul.hMul let54 let1)
  let let71 := (Not let46)
  let let72 := (Not let71)
  let let73 := (Eq let46 let72)
  let let74 := (Eq let72 let46)
  let let75 := (binrel% HMul.hMul let9 x3x5fminus)
  let let76 := (binrel% HMul.hMul let9 x1x5fplus)
  let let77 := (binrel% HMul.hMul let9 x8x5fminus)
  let let78 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let75 let21))))))))))
  let let79 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x1x5fminus let21))))))))))
  let let80 := (binrel% GT.gt let6 let1)
  let let81 := (binrel% GT.gt let68 let1)
  let let82 := (binrel% HMul.hMul let9 x3x5fplus)
  let let83 := (binrel% HAdd.hAdd let82 x3x5fminus)
  let let84 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus let83))))))
  let let85 := (binrel% HAdd.hAdd let76 x1x5fminus)
  let let86 := (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd x3x5fminus let85))
  let let87 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus let86))))
  let let88 := (Not let17)
  let let89 := (Eq let16 let88)
  let let90 := (Eq let88 let16)
  let let91 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x1x5fminus let83))))))
  let let92 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus let86))))
  let let93 := (binrel% GE.ge let84 let35)
  let let94 := (Not let93)
  let let95 := (Not let94)
  let let96 := (Eq let93 let95)
  let let97 := (Eq let95 let93)
  let let98 := (Int.ofNat 28)
  let let99 := (Neg.neg let98)
  let let100 := (Int.ofNat 56)
  let let101 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let99 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let98 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let100) x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let100 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let99 x4x5fplus) (binrel% HMul.hMul let98 x4x5fminus)))))))
  let let102 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x6x5fminus) (binrel% HAdd.hAdd x4x5fplus let12)))))
  let let103 := (binrel% HMul.hMul let59 let102)
  let let104 := (binrel% LE.le let84 let8)
  let let105 := (Eq let40 let42)
  let let106 := (binrel% LE.le let39 let1)
  let let107 := (Eq let16 let16)
  let let108 := (Neg.neg let60)
  let let109 := (binrel% LT.lt let108 let1)
  let let110 := (Int.ofNat 10)
  let let111 := (Neg.neg let110)
  let let112 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let110 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let110 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let110 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let110 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let110 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x0x5fplus) (binrel% HMul.hMul let110 x0x5fminus)))))))))))))
  let let113 := (Neg.neg (Rat.ofInt 10))
  let let114 := (binrel% HMul.hMul let113 let78)
  let let115 := (binrel% LE.le let45 let8)
  let let116 := (binrel% HMul.hMul let3 let9)
  let let117 := (Int.ofNat 31)
  let let118 := (Neg.neg let117)
  let let119 := (Int.ofNat 62)
  let let120 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let119 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let119) x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let118 x6x5fplus) (binrel% HMul.hMul let117 x6x5fminus)))))
  let let121 := (binrel% HMul.hMul let54 let39)
  let let122 := (Int.ofNat 18)
  let let123 := (Neg.neg let122)
  let let124 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let122 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let122 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let122 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let122 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let122 x0x5fplus) (binrel% HMul.hMul let123 x0x5fminus)))))))))))
  let let125 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let75 let28))))))
  let let126 := (binrel% HMul.hMul let108 let125)
  let let127 := (binrel% HMul.hMul let54 let8)
  let let128 := (binrel% GT.gt let55 let1)
  let let129 := (binrel% LE.le let48 let9)
  let let130 := (binrel% HMul.hMul let55 let9)
  let let131 := (binrel% LT.lt let39 let8)
  let let132 := (binrel% GT.gt let54 let1)
  let let133 := (binrel% LT.lt let113 let1)
  let let134 := (Int.ofNat 21)
  let let135 := (Neg.neg let134)
  let let136 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let135 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let134 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let134 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let135 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let134 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let135 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let134 x3x5fplus) (binrel% HMul.hMul let135 x3x5fminus)))))))))
  let let137 := (binrel% HMul.hMul let3 let91)
  let let138 := (Eq let93 let93)
  let let139 := (binrel% HMul.hMul let32 let8)
  let let140 := (Int.ofNat 9)
  let let141 := (Neg.neg let140)
  let let142 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let140 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let141 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let141 x0x5fplus) (binrel% HMul.hMul let140 x0x5fminus)))))
  let let143 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let117 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let118 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let118 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let117 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let118 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let117 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let118 x3x5fplus) (binrel% HMul.hMul let117 x3x5fminus)))))))))
  let let144 := (Int.ofNat 19)
  let let145 := (Neg.neg let144)
  let let146 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let144 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let145 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let144 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let145 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let144 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let145 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let145 x2x5fplus) (binrel% HMul.hMul let144 x2x5fminus)))))))))
  let let147 := (Int.ofNat 4)
  let let148 := (binrel% HMul.hMul let36 x9x5fminus)
  let let149 := (binrel% HMul.hMul let35 x9x5fplus)
  let let150 := (Rat.ofInt (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd (binrel% HMul.hMul let147 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let147) x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x7x5fplus) (binrel% HMul.hMul let35 x7x5fminus)))))))
  let let151 := (Int.ofNat 38)
  let let152 := (Neg.neg let151)
  let let153 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let152 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let151 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let151 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let152 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let151 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let152 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let151 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let152 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let151 x2x5fplus) (binrel% HMul.hMul let152 x2x5fminus)))))))))))
  let let154 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let124 (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let136 (binrel% HAdd.hAdd let150 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let142 let120))))))))))
  let let155 := (binrel% HMul.hMul let58 let8)
  let let156 := (binrel% HMul.hMul let6 let48)
  let let157 := (binrel% LT.lt let59 let1)
  let let158 := (binrel% HMul.hMul let59 let8)
  let let159 := (binrel% HMul.hMul let54 let84)
  let let160 := (binrel% HMul.hMul let113 let1)
  let let161 := (binrel% HMul.hMul let55 let15)
  let let162 := (binrel% HMul.hMul let108 let9)
  let let163 := (binrel% HMul.hMul let68 let45)
  let let164 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd x3x5fminus let11))))))))
  let let165 := (binrel% HMul.hMul let58 let164)
  let let166 := (binrel% LT.lt let84 let35)
  let let167 := (binrel% LT.lt let32 let1)
  let let168 := (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let162 (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd let155 (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let7 let70))))))))))
  let let169 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let103 (binrel% HAdd.hAdd let165 (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let163 (binrel% HAdd.hAdd let161 (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd let156 let121))))))))))
  let let170 := (binrel% GE.ge let169 let168)
  let let171 := (Not let170)
  let let172 := (binrel% LT.lt let169 let168)
  let let173 := (binrel% LT.lt let48 let1)
  let let174 := (binrel% LT.lt let45 let35)
  let let175 := (binrel% LE.le let87 let8)
  let let176 := (Int.ofNat 3)
  let let177 := (binrel% GE.ge let79 let1)
  let let178 := (binrel% GE.ge let164 let8)
  let let179 := (binrel% GE.ge let125 let9)
  let let180 := (binrel% GE.ge let92 let9)
  let let181 := (binrel% GE.ge let102 let8)
  let let182 := (binrel% GE.ge let78 let1)
  let let183 := (binrel% GE.ge let91 let9)
  let let184 := (Not let181)
  let let185 := (Not let183)
  let let186 := (Not let179)
  let let187 := (Not let178)
  let let188 := (Not let182)
  let let189 := (Or let185 (Or let187 (Or let184 (Or let188 (Or let186 let65)))))
  let let190 := (Or let40 (Or let49 (Or let93 (Or let16 (Or let46 let189)))))
  let let191 := (Or let42 (Or let51 (Or let95 (Or let88 (Or let72 let189)))))
  let let192 := (Or let65 False)
  let let193 := (binrel% LE.le let121 let70)
  let let194 := (And let132 let106)
  let let195 := (binrel% LT.lt let156 let7)
  let let196 := (And let80 let173)
  let let197 := (binrel% LE.le let159 let127)
  let let198 := (And let132 let104)
  let let199 := (binrel% LE.le let161 let130)
  let let200 := (And let128 let63)
  let let201 := (binrel% LT.lt let163 let69)
  let let202 := (And let81 let174)
  let let203 := (binrel% LE.le let137 let116)
  let let204 := (And let4 let183)
  let let205 := (binrel% LE.le let165 let155)
  let let206 := (And let67 let178)
  let let207 := (binrel% LE.le let103 let158)
  let let208 := (And let157 let181)
  let let209 := (binrel% LE.le let114 let160)
  let let210 := (And let133 let182)
  let let211 := (binrel% LE.le let126 let162)
  let let212 := (And let109 let179)
  let let213 := (binrel% LE.le let33 let139)
  let let214 := (And let167 let64)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let5) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let20 True) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let33 let25) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let34 False) => -- THEORY_REWRITE_BOOL
fun lean_r6 : let43 => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let44 True) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let47 True) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let53 let52) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let61 let19) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let62 True) => -- THEORY_REWRITE_BOOL
fun lean_r12 : let53 => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let63 let17) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let66 let65) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let67 True) => -- EVALUATE
fun lean_r16 : (Eq let69 let57) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let70 let5) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let74 let73) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let79 let78) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let80 True) => -- EVALUATE
fun lean_r21 : (Eq let81 True) => -- EVALUATE
fun lean_r22 : (Eq let87 let84) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let90 let89) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let92 let91) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let97 let96) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let103 let101) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let104 let94) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let43 let105) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let106 let41) => -- THEORY_REWRITE_ARITH
fun lean_r30 : let74 => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let107 True) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let109 True) => -- EVALUATE
fun lean_r33 : (Eq let114 let112) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let115 let71) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let116 let2) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let121 let120) => -- THEORY_REWRITE_ARITH
fun lean_r37 : let90 => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let126 let124) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let127 let54) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let128 True) => -- EVALUATE
fun lean_r41 : (Eq let129 let50) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let130 let56) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let131 let41) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let132 True) => -- EVALUATE
fun lean_r45 : (Eq let133 True) => -- EVALUATE
fun lean_r46 : (Eq let137 let136) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let138 True) => -- THEORY_REWRITE_BOOL
fun lean_r48 : (Eq let139 let32) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let154 let5) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let155 let58) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let156 let142) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let157 True) => -- EVALUATE
fun lean_r53 : (Eq let158 let59) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let159 let143) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let160 let5) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let161 let146) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let162 let60) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let163 let150) => -- THEORY_REWRITE_ARITH
fun lean_r59 : let97 => -- THEORY_REWRITE_BOOL
fun lean_r60 : (Eq let165 let153) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let166 let94) => -- THEORY_REWRITE_ARITH
fun lean_r62 : (Eq let167 True) => -- EVALUATE
fun lean_r63 : (Eq let172 let171) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq let173 let50) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let174 let71) => -- THEORY_REWRITE_ARITH
fun lean_a66 : (binrel% GE.ge x9x5fplus let1) =>
fun lean_a67 : (binrel% GE.ge x9x5fminus let1) =>
fun lean_a68 : (binrel% GE.ge x8x5fplus let1) =>
fun lean_a69 : (binrel% GE.ge x8x5fminus let1) =>
fun lean_a70 : (binrel% GE.ge x7x5fplus let1) =>
fun lean_a71 : (binrel% GE.ge x7x5fminus let1) =>
fun lean_a72 : (binrel% GE.ge x6x5fplus let1) =>
fun lean_a73 : (binrel% GE.ge x6x5fminus let1) =>
fun lean_a74 : (binrel% GE.ge x1x5fplus let1) =>
fun lean_a75 : (binrel% GE.ge x1x5fminus let1) =>
fun lean_a76 : (binrel% GE.ge x5x5fplus let1) =>
fun lean_a77 : (binrel% GE.ge x5x5fminus let1) =>
fun lean_a78 : (binrel% GE.ge x3x5fplus let1) =>
fun lean_a79 : (binrel% GE.ge x3x5fminus let1) =>
fun lean_a80 : (binrel% GE.ge x4x5fplus let1) =>
fun lean_a81 : (binrel% GE.ge x4x5fminus let1) =>
fun lean_a82 : (binrel% GE.ge x2x5fplus let1) =>
fun lean_a83 : (binrel% GE.ge x2x5fminus let1) =>
fun lean_a84 : (binrel% GE.ge x0x5fplus let1) =>
fun lean_a85 : (binrel% GE.ge x0x5fminus let1) =>
fun lean_a86 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd (binrel% HMul.hMul let35 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x7x5fminus) (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x1x5fplus (binrel% HMul.hMul let9 x1x5fminus)))))))))) let1) =>
fun lean_a87 : let175 =>
fun lean_a88 : let63 =>
fun lean_a89 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x2x5fplus let27))))))) let9) =>
fun lean_a90 : let115 =>
fun lean_a91 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus let75))))) let1) =>
fun lean_a92 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 let83)))) let1) =>
fun lean_a93 : let106 =>
fun lean_a94 : let129 =>
fun lean_a95 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let176 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let176) x4x5fminus) let26)) let8) =>
fun lean_a96 : let177 =>
fun lean_a97 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x2x5fminus let85)))))))) let1) =>
fun lean_a98 : let178 =>
fun lean_a99 : let179 =>
fun lean_a100 : let64 =>
fun lean_a101 : let180 =>
fun lean_a102 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x0x5fplus) (binrel% HMul.hMul let35 x0x5fminus)))))))) let1) =>
fun lean_a103 : (binrel% GE.ge (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x4x5fplus) (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x1x5fplus) (binrel% HMul.hMul let35 x1x5fminus)))))) let1) =>
fun lean_a104 : let181 =>
fun lean_a105 : (binrel% GE.ge (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let27 let21)))) let1) => by
have lean_s0 : (Or let42 (Or let51 (Or let95 (Or let88 (Or let72 (Or let185 (Or let187 (Or let184 (Or let188 (Or let186 let192)))))))))) :=
  (scope (fun lean_a106 : let41 =>
    (scope (fun lean_a107 : let50 =>
      (scope (fun lean_a108 : let94 =>
        (scope (fun lean_a109 : let17 =>
          (scope (fun lean_a110 : let71 =>
            (scope (fun lean_a111 : let183 =>
              (scope (fun lean_a112 : let178 =>
                (scope (fun lean_a113 : let181 =>
                  (scope (fun lean_a114 : let182 =>
                    (scope (fun lean_a115 : let179 =>
                      (scope (fun lean_a116 : let64 =>
                        have lean_s0 : let192 :=
                          (scope (fun lean_a113 : let64 =>
                            have lean_s0 : let167 := by timed trueElim lean_r62
                            have lean_s1 : let214 := by timed And.intro lean_s0 lean_a113
                            have lean_s2 : (Implies let214 let213) := by arithMulNeg [let31, let8, let32], 3
                            have lean_s3 : let213 := by timed modusPonens lean_s1 lean_s2
                            have lean_s4 : let109 := by timed trueElim lean_r32
                            have lean_s5 : let212 := by timed And.intro lean_s4 lean_a115
                            have lean_s6 : (Implies let212 let211) := by arithMulNeg [let125, let9, let108], 3
                            have lean_s7 : let211 := by timed modusPonens lean_s5 lean_s6
                            have lean_s8 : let133 := by timed trueElim lean_r45
                            let lean_s9 := by timed flipCongrArg lean_r19 [GE.ge]
                            have lean_s10 : (Eq let1 let1) := by timed rfl
                            have lean_s11 : (Eq let177 let182) := by timed congr lean_s9 lean_s10
                            have lean_s12 : let182 := by timed eqResolve lean_a96 lean_s11
                            have lean_s13 : let210 := by timed And.intro lean_s8 lean_s12
                            have lean_s14 : (Implies let210 let209) := by arithMulNeg [let78, let1, let113], 3
                            have lean_s15 : let209 := by timed modusPonens lean_s13 lean_s14
                            have lean_s16 : let157 := by timed trueElim lean_r52
                            have lean_s17 : let208 := by timed And.intro lean_s16 lean_a113
                            have lean_s18 : (Implies let208 let207) := by arithMulNeg [let102, let8, let59], 3
                            have lean_s19 : let207 := by timed modusPonens lean_s17 lean_s18
                            have lean_s20 : let67 := by timed trueElim lean_r15
                            have lean_s21 : let206 := by timed And.intro lean_s20 lean_a112
                            have lean_s22 : (Implies let206 let205) := by arithMulNeg [let164, let8, let58], 3
                            have lean_s23 : let205 := by timed modusPonens lean_s21 lean_s22
                            have lean_s24 : let4 := by timed trueElim lean_r0
                            let lean_s25 := by timed flipCongrArg lean_r24 [GE.ge]
                            have lean_s26 : (Eq let9 let9) := by timed rfl
                            have lean_s27 : (Eq let180 let183) := by timed congr lean_s25 lean_s26
                            have lean_s28 : let183 := by timed eqResolve lean_a101 lean_s27
                            have lean_s29 : let204 := by timed And.intro lean_s24 lean_s28
                            have lean_s30 : (Implies let204 let203) := by arithMulNeg [let91, let9, let3], 3
                            have lean_s31 : let203 := by timed modusPonens lean_s29 lean_s30
                            have lean_s32 : let81 := by timed trueElim lean_r21
                            have lean_s33 : let71 := by timed eqResolve lean_a90 lean_r34
                            have lean_s34 : (Eq let71 let174) := by timed Eq.symm lean_r65
                            have lean_s35 : let174 := by timed eqResolve lean_s33 lean_s34
                            have lean_s36 : let202 := by timed And.intro lean_s32 lean_s35
                            have lean_s37 : (Implies let202 let201) := by arithMulPos [let45, let35, let68], 0
                            have lean_s38 : let201 := by timed modusPonens lean_s36 lean_s37
                            have lean_s39 : let128 := by timed trueElim lean_r40
                            have lean_s40 : let17 := by timed eqResolve lean_a88 lean_r13
                            have lean_s41 : (Eq let17 let18) := by timed Eq.symm lean_r2
                            have lean_s42 : let18 := by timed eqResolve lean_s40 lean_s41
                            have lean_s43 : let63 := by intTightUb lean_s42
                            have lean_s44 : let200 := by timed And.intro lean_s39 lean_s43
                            have lean_s45 : (Implies let200 let199) := by arithMulPos [let15, let9, let55], 1
                            have lean_s46 : let199 := by timed modusPonens lean_s44 lean_s45
                            have lean_s47 : let132 := by timed trueElim lean_r44
                            let lean_s48 := by timed flipCongrArg lean_r22 [LE.le]
                            have lean_s49 : (Eq let8 let8) := by timed rfl
                            have lean_s50 : (Eq let175 let104) := by timed congr lean_s48 lean_s49
                            have lean_s51 : (Eq let175 let94) := by timed Eq.trans lean_s50 lean_r27
                            have lean_s52 : let94 := by timed eqResolve lean_a87 lean_s51
                            have lean_s53 : (Eq let94 let166) := by timed Eq.symm lean_r61
                            have lean_s54 : let166 := by timed eqResolve lean_s52 lean_s53
                            have lean_s55 : let104 := by intTightUb lean_s54
                            have lean_s56 : let198 := by timed And.intro lean_s47 lean_s55
                            have lean_s57 : (Implies let198 let197) := by arithMulPos [let84, let8, let54], 1
                            have lean_s58 : let197 := by timed modusPonens lean_s56 lean_s57
                            have lean_s59 : let80 := by timed trueElim lean_r20
                            have lean_s60 : let50 := by timed eqResolve lean_a94 lean_r41
                            have lean_s61 : (Eq let50 let173) := by timed Eq.symm lean_r64
                            have lean_s62 : let173 := by timed eqResolve lean_s60 lean_s61
                            have lean_s63 : let196 := by timed And.intro lean_s59 lean_s62
                            have lean_s64 : (Implies let196 let195) := by arithMulPos [let48, let1, let6], 0
                            have lean_s65 : let195 := by timed modusPonens lean_s63 lean_s64
                            have lean_s66 : let41 := by timed eqResolve lean_a93 lean_r29
                            have lean_s67 : (Eq let41 let131) := by timed Eq.symm lean_r43
                            have lean_s68 : let131 := by timed eqResolve lean_s66 lean_s67
                            have lean_s69 : let106 := by intTightUb lean_s68
                            have lean_s70 : let194 := by timed And.intro lean_s47 lean_s69
                            have lean_s71 : (Implies let194 let193) := by arithMulPos [let39, let1, let54], 1
                            have lean_s72 : let193 := by timed modusPonens lean_s70 lean_s71
                            have lean_s73 : let172 := by sumBounds [lean_s3, lean_s7, lean_s15, lean_s19, lean_s23, lean_s31, lean_s38, lean_s46, lean_s58, lean_s65, lean_s72]
                            let lean_s74 := by timed congrHAdd lean_r51 lean_r36
                            let lean_s75 := by timed congrHAdd lean_r54 lean_s74
                            let lean_s76 := by timed congrHAdd lean_r56 lean_s75
                            let lean_s77 := by timed congrHAdd lean_r58 lean_s76
                            let lean_s78 := by timed congrHAdd lean_r46 lean_s77
                            let lean_s79 := by timed congrHAdd lean_r60 lean_s78
                            let lean_s80 := by timed congrHAdd lean_r26 lean_s79
                            let lean_s81 := by timed congrHAdd lean_r33 lean_s80
                            let lean_s82 := by timed congrHAdd lean_r38 lean_s81
                            have lean_s83 : (Eq let169 let154) := by timed congrHAdd lean_r4 lean_s82
                            have lean_s84 : (Eq let169 let5) := by timed Eq.trans lean_s83 lean_r49
                            let lean_s85 := by timed flipCongrArg lean_s84 [GE.ge]
                            let lean_s86 := by timed congrHAdd lean_r1 lean_r17
                            let lean_s87 := by timed congrHAdd lean_r39 lean_s86
                            let lean_s88 := by timed congrHAdd lean_r42 lean_s87
                            let lean_s89 := by timed congrHAdd lean_r16 lean_s88
                            let lean_s90 := by timed congrHAdd lean_r35 lean_s89
                            let lean_s91 := by timed congrHAdd lean_r50 lean_s90
                            let lean_s92 := by timed congrHAdd lean_r53 lean_s91
                            let lean_s93 := by timed congrHAdd lean_r55 lean_s92
                            let lean_s94 := by timed congrHAdd lean_r57 lean_s93
                            have lean_s95 : (Eq let168 let61) := by timed congrHAdd lean_r48 lean_s94
                            have lean_s96 : (Eq let168 let19) := by timed Eq.trans lean_s95 lean_r10
                            have lean_s97 : (Eq let170 let20) := by timed congr lean_s85 lean_s96
                            have lean_s98 : (Eq let170 True) := by timed Eq.trans lean_s97 lean_r3
                            have lean_s99 : (Eq let171 let34) := by timed flipCongrArg lean_s98 [Not]
                            have lean_s100 : (Eq let171 False) := by timed Eq.trans lean_s99 lean_r5
                            have lean_s101 : (Eq let172 False) := by timed Eq.trans lean_r63 lean_s100
                            show False from by timed eqResolve lean_s73 lean_s101
                          ))
                        have lean_s1 : let65 := by liftOrNToNeg lean_s0
                        have lean_s2 : (Eq let65 let66) := by timed Eq.symm lean_r14
                        have lean_s3 : let66 := by timed eqResolve lean_s1 lean_s2
                        have lean_s4 : let65 := by timed eqResolve lean_s3 lean_r14
                        show False from by timed contradiction lean_a116 lean_s4
  ))))))))))))))))))))))
have lean_s1 : (Not (And let41 (And let50 (And let94 (And let17 (And let71 (And let183 (And let178 (And let181 (And let182 (And let179 let64))))))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let191 := by timed flipNotAnd lean_s1 [let41, let50, let94, let17, let71, let183, let178, let181, let182, let179, let64]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let44 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let105 let44) := by timed congr lean_s5 lean_r6
have lean_s7 : (Eq let105 True) := by timed Eq.trans lean_s6 lean_r7
have lean_s8 : (Eq let43 True) := by timed Eq.trans lean_r28 lean_s7
have lean_s9 : let43 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let62 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let52 let62) := by timed congr lean_s12 lean_r12
have lean_s14 : (Eq let52 True) := by timed Eq.trans lean_s13 lean_r11
have lean_s15 : (Eq let53 True) := by timed Eq.trans lean_r9 lean_s14
have lean_s16 : let53 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let138 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let96 let138) := by timed congr lean_s19 lean_r59
have lean_s21 : (Eq let96 True) := by timed Eq.trans lean_s20 lean_r47
have lean_s22 : (Eq let97 True) := by timed Eq.trans lean_r25 lean_s21
have lean_s23 : let97 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : let107 := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq let89 let107) := by timed congr lean_s26 lean_r37
have lean_s28 : (Eq let89 True) := by timed Eq.trans lean_s27 lean_r31
have lean_s29 : (Eq let90 True) := by timed Eq.trans lean_r23 lean_s28
have lean_s30 : let90 := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s3 lean_s30
have lean_s32 : let47 := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [Eq]
have lean_s34 : (Eq let73 let47) := by timed congr lean_s33 lean_r30
have lean_s35 : (Eq let73 True) := by timed Eq.trans lean_s34 lean_r8
have lean_s36 : (Eq let74 True) := by timed Eq.trans lean_r18 lean_s35
have lean_s37 : let74 := by timed trueElim lean_s36
let lean_s38 := by timed congr lean_s3 lean_s37
have lean_s39 : (Eq let185 let185) := by timed rfl
let lean_s40 := by timed congr lean_s3 lean_s39
have lean_s41 : (Eq let187 let187) := by timed rfl
let lean_s42 := by timed congr lean_s3 lean_s41
have lean_s43 : (Eq let184 let184) := by timed rfl
let lean_s44 := by timed congr lean_s3 lean_s43
have lean_s45 : (Eq let188 let188) := by timed rfl
let lean_s46 := by timed congr lean_s3 lean_s45
have lean_s47 : (Eq let186 let186) := by timed rfl
let lean_s48 := by timed congr lean_s3 lean_s47
have lean_s49 : (Eq let65 let65) := by timed rfl
let lean_s50 := by timed congr lean_s48 lean_s49
let lean_s51 := by timed congr lean_s46 lean_s50
let lean_s52 := by timed congr lean_s44 lean_s51
let lean_s53 := by timed congr lean_s42 lean_s52
let lean_s54 := by timed congr lean_s40 lean_s53
let lean_s55 := by timed congr lean_s38 lean_s54
let lean_s56 := by timed congr lean_s31 lean_s55
let lean_s57 := by timed congr lean_s24 lean_s56
let lean_s58 := by timed congr lean_s17 lean_s57
have lean_s59 : (Eq let191 let190) := by timed congr lean_s10 lean_s58
have lean_s60 : let190 := by timed eqResolve lean_s2 lean_s59
have lean_s61 : (Or let93 (Or let16 (Or let46 (Or let40 (Or let49 (Or let188 (Or let187 (Or let186 (Or let65 (Or let185 let184)))))))))) := by permutateOr lean_s60, [2, 3, 4, 0, 1, 8, 6, 9, 10, 5, 7], (- 1)
let lean_s62 := by R2 lean_s61, lean_a104, let181, [(- 1), 0]
let lean_s63 := by timed flipCongrArg lean_r24 [GE.ge]
have lean_s64 : (Eq let9 let9) := by timed rfl
have lean_s65 : (Eq let180 let183) := by timed congr lean_s63 lean_s64
have lean_s66 : let183 := by timed eqResolve lean_a101 lean_s65
let lean_s67 := by R2 lean_s62, lean_s66, let183, [(- 1), 0]
let lean_s68 := by R2 lean_s67, lean_a100, let64, [(- 1), 0]
let lean_s69 := by R2 lean_s68, lean_a99, let179, [(- 1), 0]
let lean_s70 := by R2 lean_s69, lean_a98, let178, [(- 1), 0]
let lean_s71 := by timed flipCongrArg lean_r19 [GE.ge]
have lean_s72 : (Eq let1 let1) := by timed rfl
have lean_s73 : (Eq let177 let182) := by timed congr lean_s71 lean_s72
have lean_s74 : let182 := by timed eqResolve lean_a96 lean_s73
let lean_s75 := by R2 lean_s70, lean_s74, let182, [(- 1), 0]
have lean_s76 : let50 := by timed eqResolve lean_a94 lean_r41
let lean_s77 := by R1 lean_s75, lean_s76, let49, [(- 1), 0]
have lean_s78 : let41 := by timed eqResolve lean_a93 lean_r29
let lean_s79 := by R1 lean_s77, lean_s78, let40, [(- 1), 0]
have lean_s80 : let71 := by timed eqResolve lean_a90 lean_r34
let lean_s81 := by R1 lean_s79, lean_s80, let46, [(- 1), 0]
have lean_s82 : let17 := by timed eqResolve lean_a88 lean_r13
let lean_s83 := by R1 lean_s81, lean_s82, let16, [(- 1), 0]
let lean_s84 := by timed flipCongrArg lean_r22 [LE.le]
have lean_s85 : (Eq let8 let8) := by timed rfl
have lean_s86 : (Eq let175 let104) := by timed congr lean_s84 lean_s85
have lean_s87 : (Eq let175 let94) := by timed Eq.trans lean_s86 lean_r27
have lean_s88 : let94 := by timed eqResolve lean_a87 lean_s87
exact (show False from by R1 lean_s83, lean_s88, let93, [0, 0])


