open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x9x5fplus : Int}
variable {x9x5fminus : Int}
variable {x7x5fplus : Int}
variable {x7x5fminus : Int}
variable {x6x5fplus : Int}
variable {x6x5fminus : Int}
variable {x6x5fplus : Int}
variable {x5x5fplus : Int}
variable {x6x5fminus : Int}
variable {x0x5fminus : Int}
variable {x5x5fplus : Int}
variable {x2x5fplus : Int}
variable {x5x5fminus : Int}
variable {x4x5fplus : Int}
variable {x2x5fminus : Int}
variable {x4x5fminus : Int}
variable {x1x5fminus : Int}
variable {x1x5fminus : Int}
variable {x3x5fplus : Int}
variable {x5x5fminus : Int}
variable {x3x5fminus : Int}
variable {x8x5fplus : Int}
variable {x0x5fplus : Int}
variable {x1x5fplus : Int}
variable {x1x5fplus : Int}
variable {x2x5fminus : Int}
variable {x2x5fplus : Int}
variable {x4x5fminus : Int}
variable {x7x5fminus : Int}
variable {x7x5fplus : Int}
variable {x4x5fplus : Int}
variable {x9x5fminus : Int}
variable {x9x5fplus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x8x5fminus : Int}
variable {x8x5fminus : Int}
variable {x8x5fplus : Int}
variable {x3x5fminus : Int}
variable {x3x5fplus : Int}

theorem th0 :
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x6x5fminus)
  let let4 := (binrel% HAdd.hAdd x6x5fplus let3)
  let let5 := (binrel% GE.ge let4 let1)
  let let6 := (Not let5)
  let let7 := (binrel% LT.lt let4 let1)
  let let8 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let2 x0x5fminus))
  let let9 := (binrel% HMul.hMul let2 x1x5fminus)
  let let10 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let9 let8))
  let let11 := (binrel% HMul.hMul let2 x2x5fminus)
  let let12 := (binrel% HMul.hMul let2 x4x5fplus)
  let let13 := (binrel% HMul.hMul let2 x9x5fminus)
  let let14 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let11 let10))))))
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let1)
  let let18 := (Int.ofNat 0)
  let let19 := (binrel% HAdd.hAdd x2x5fplus let11)
  let let20 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x4x5fminus let19))
  let let21 := (binrel% HMul.hMul let2 x7x5fminus)
  let let22 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 let20))
  let let23 := (binrel% GE.ge let22 let18)
  let let24 := (Not let23)
  let let25 := (binrel% LT.lt let22 let18)
  let let26 := (Rat.ofInt 4)
  let let27 := (binrel% GT.gt let26 let18)
  let let28 := (binrel% HMul.hMul let2 x3x5fminus)
  let let29 := (binrel% HAdd.hAdd x3x5fplus let28)
  let let30 := (binrel% GE.ge let29 let18)
  let let31 := (Not let30)
  let let32 := (binrel% LT.lt let29 let18)
  let let33 := (Rat.ofInt 1)
  let let34 := (binrel% GT.gt let33 let18)
  let let35 := (binrel% HMul.hMul let33 let18)
  let let36 := (Rat.ofInt 2)
  let let37 := (Neg.neg let36)
  let let38 := (binrel% HMul.hMul let37 let18)
  let let39 := (binrel% HMul.hMul let26 let18)
  let let40 := (Neg.neg let26)
  let let41 := (binrel% HMul.hMul let40 let18)
  let let42 := (Rat.ofInt 5)
  let let43 := (binrel% HMul.hMul let42 let2)
  let let44 := (Neg.neg let33)
  let let45 := (binrel% HMul.hMul let44 let2)
  let let46 := (binrel% HMul.hMul let36 let1)
  let let47 := (binrel% HMul.hMul let33 let1)
  let let48 := (binrel% HMul.hMul let33 let2)
  let let49 := (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let38 let35)))))))))
  let let50 := (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x0x5fplus) x0x5fminus)
  let let51 := (binrel% HMul.hMul let2 x8x5fplus)
  let let52 := (binrel% HMul.hMul let2 x4x5fminus)
  let let53 := (binrel% HMul.hMul let2 x7x5fplus)
  let let54 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x8x5fminus let50))))))))
  let let55 := (binrel% HMul.hMul let33 let54)
  let let56 := (binrel% HAdd.hAdd x1x5fplus let9)
  let let57 := (binrel% HMul.hMul let2 x5x5fplus)
  let let58 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fminus let56))))))))
  let let59 := (binrel% HMul.hMul let37 let58)
  let let60 := (binrel% HMul.hMul let26 let29)
  let let61 := (binrel% HMul.hMul let2 x5x5fminus)
  let let62 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 let20))))))))
  let let63 := (binrel% HMul.hMul let40 let62)
  let let64 := (binrel% HMul.hMul let42 let22)
  let let65 := (Int.ofNat 2)
  let let66 := (Neg.neg let65)
  let let67 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x2x5fminus) (binrel% HAdd.hAdd let51 x8x5fminus)))))
  let let68 := (binrel% HMul.hMul let44 let67)
  let let69 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x5x5fplus let61)))))))
  let let70 := (binrel% HMul.hMul let36 let69)
  let let71 := (binrel% HMul.hMul let33 let14)
  let let72 := (binrel% HMul.hMul let36 let4)
  let let73 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 let56))))
  let let74 := (binrel% HMul.hMul let33 let73)
  let let75 := (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let59 let55)))))))))
  let let76 := (binrel% GE.ge let75 let49)
  let let77 := (Not let76)
  let let78 := (binrel% LT.lt let75 let49)
  let let79 := (Rat.ofInt let73)
  let let80 := (binrel% GE.ge let73 let18)
  let let81 := (Not let80)
  let let82 := (binrel% LT.lt let73 let18)
  let let83 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x6x5fplus) (binrel% HMul.hMul let66 x6x5fminus)))
  let let84 := (binrel% GE.ge let69 let1)
  let let85 := (Not let84)
  let let86 := (Not let85)
  let let87 := (Eq let84 let86)
  let let88 := (Eq let86 let84)
  let let89 := (Eq let84 let84)
  let let90 := (Not let16)
  let let91 := (Eq let90 let15)
  let let92 := (binrel% GE.ge let54 let1)
  let let93 := (Not let92)
  let let94 := (Not let93)
  let let95 := (Eq let94 let92)
  let let96 := (Rat.ofInt 0)
  let let97 := (binrel% GT.gt let36 let18)
  let let98 := (Not let6)
  let let99 := (Eq let5 let98)
  let let100 := (Eq let98 let5)
  let let101 := (Eq let5 let5)
  let let102 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 let19))))))))))
  let let103 := (binrel% LT.lt let44 let18)
  let let104 := (Not let81)
  let let105 := (Eq let80 let104)
  let let106 := (Eq let104 let80)
  let let107 := (Int.ofNat 5)
  let let108 := (Neg.neg let107)
  let let109 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let108 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let108 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x2x5fplus) (binrel% HMul.hMul let108 x2x5fminus)))))))
  let let110 := (binrel% LE.le let22 let2)
  let let111 := (Int.ofNat 4)
  let let112 := (Neg.neg let111)
  let let113 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x2x5fplus) (binrel% HMul.hMul let111 x2x5fminus)))))))))))))
  let let114 := (binrel% LE.le let4 let18)
  let let115 := (binrel% LT.lt let69 let1)
  let let116 := (binrel% HSub.hSub x6x5fplus x6x5fminus)
  let let117 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 let29))
  let let118 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus let117))))
  let let119 := (binrel% LT.lt let54 let1)
  let let120 := (binrel% LE.le let29 let2)
  let let121 := (binrel% GT.gt let42 let18)
  let let122 := (Eq let80 let80)
  let let123 := (binrel% HMul.hMul let66 x5x5fminus)
  let let124 := (binrel% HMul.hMul let65 x5x5fplus)
  let let125 := (binrel% HMul.hMul let66 x7x5fminus)
  let let126 := (binrel% HMul.hMul let65 x7x5fplus)
  let let127 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x3x5fminus) (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd let124 (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x1x5fplus) (binrel% HMul.hMul let65 x1x5fminus)))))))))))
  let let128 := (Eq let23 let23)
  let let129 := (binrel% LT.lt let37 let18)
  let let130 := (Eq let92 let92)
  let let131 := (binrel% HSub.hSub x3x5fplus x3x5fminus)
  let let132 := (Eq let15 let90)
  let let133 := (Eq let92 let94)
  let let134 := (Neg.neg let42)
  let let135 := (binrel% LE.le let73 let2)
  let let136 := (binrel% LE.le let54 let18)
  let let137 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 let50))))))))
  let let138 := (binrel% HMul.hMul let66 x9x5fminus)
  let let139 := (binrel% HMul.hMul let65 x9x5fplus)
  let let140 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x3x5fminus) (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x7x5fminus) (binrel% HAdd.hAdd let124 let123))))))))
  let let141 := (Rat.ofInt let54)
  let let142 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x3x5fplus) (binrel% HMul.hMul let112 x3x5fminus)))
  let let143 := (binrel% HMul.hMul let2 x8x5fminus)
  let let144 := (binrel% HMul.hMul let65 x2x5fminus)
  let let145 := (binrel% HMul.hMul let66 x2x5fplus)
  let let146 := (binrel% HMul.hMul let2 x6x5fplus)
  let let147 := (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let145 (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd x8x5fplus let143)))))
  let let148 := (Rat.ofInt let147)
  let let149 := (Rat.ofInt let14)
  let let150 := (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let127 let141)))))))))
  let let151 := (binrel% LT.lt let40 let18)
  let let152 := (binrel% LE.le let14 let18)
  let let153 := (binrel% GE.ge let96 let96)
  let let154 := (binrel% LE.le let69 let18)
  let let155 := (binrel% GE.ge let67 let2)
  let let156 := (binrel% LE.le let147 let1)
  let let157 := (binrel% HMul.hMul let2 x1x5fplus)
  let let158 := (binrel% HAdd.hAdd let157 x1x5fminus)
  let let159 := (binrel% HMul.hMul let2 x3x5fplus)
  let let160 := (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 let158))))))))
  let let161 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x3x5fminus let158))))))))
  let let162 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let145 let144)))))
  let let163 := (Not let24)
  let let164 := (Eq let163 let23)
  let let165 := (Eq let23 let163)
  let let166 := (Eq let30 let30)
  let let167 := (Not True)
  let let168 := (Not let31)
  let let169 := (Eq let168 let30)
  let let170 := (Eq let30 let168)
  let let171 := (binrel% GE.ge let58 let18)
  let let172 := (binrel% LE.le let160 let18)
  let let173 := (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let134 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let96 let96)))))))))
  let let174 := (Not let135)
  let let175 := (binrel% GT.gt let73 let2)
  let let176 := (Eq let175 let174)
  let let177 := (Eq let15 let15)
  let let178 := (binrel% LE.le let116 let18)
  let let179 := (binrel% LE.le let131 let2)
  let let180 := (binrel% LE.le let137 let18)
  let let181 := (binrel% LE.le let161 let18)
  let let182 := (binrel% HMul.hMul let2 x2x5fplus)
  let let183 := (binrel% LE.le let118 let18)
  let let184 := (binrel% LE.le let162 let1)
  let let185 := (binrel% HAdd.hAdd let146 x6x5fminus)
  let let186 := (binrel% GE.ge let102 let18)
  let let187 := (binrel% HAdd.hAdd let182 (binrel% HAdd.hAdd x2x5fminus let158))
  let let188 := (binrel% HAdd.hAdd let159 x3x5fminus)
  let let189 := (binrel% GE.ge let62 let18)
  let let190 := (Not let189)
  let let191 := (Not let155)
  let let192 := (Not let171)
  let let193 := (Or let92 (Or let192 (Or let30 (Or let190 (Or let23 (Or let191 (Or let84 (Or let15 (Or let5 let80)))))))))
  let let194 := (Or let94 (Or let192 (Or let168 (Or let190 (Or let163 (Or let191 (Or let86 (Or let90 (Or let98 let104)))))))))
  let let195 := (binrel% LE.le let55 let35)
  let let196 := (And let34 let136)
  let let197 := (binrel% LE.le let59 let38)
  let let198 := (And let129 let171)
  let let199 := (binrel% LT.lt let60 let39)
  let let200 := (And let27 let32)
  let let201 := (binrel% LE.le let63 let41)
  let let202 := (And let151 let189)
  let let203 := (binrel% LE.le let64 let43)
  let let204 := (And let121 let110)
  let let205 := (binrel% LE.le let68 let45)
  let let206 := (And let103 let155)
  let let207 := (binrel% LT.lt let70 let46)
  let let208 := (And let97 let115)
  let let209 := (binrel% LT.lt let71 let47)
  let let210 := (And let34 let17)
  let let211 := (binrel% LT.lt let72 let46)
  let let212 := (And let97 let7)
  let let213 := (binrel% LE.le let74 let48)
  let let214 := (And let34 let135)
(Eq let7 let6) → (Eq let17 let16) → (Eq let25 let24) → (Eq let27 True) → (Eq let32 let31) → (Eq let34 True) → (Eq let78 let77) → (Eq let74 let79) → (Eq let82 let81) → (Eq let72 let83) → (Eq let88 let87) → let88 → (Eq let89 True) → let91 → let95 → (Eq let41 let96) → (Eq let97 True) → (Eq let100 let99) → (Eq let101 True) → (Eq let102 let62) → (Eq let103 True) → (Eq let106 let105) → (Eq let64 let109) → (Eq let110 let24) → (Eq let63 let113) → (Eq let114 let6) → (Eq let45 let33) → (Eq let115 let85) → let100 → (Eq let116 let4) → (Eq let118 let69) → (Eq let47 let33) → (Eq let119 let93) → (Eq let120 let31) → (Eq let121 True) → (Eq let122 True) → (Eq let59 let127) → (Eq let128 True) → (Eq let129 True) → (Eq let130 True) → (Eq let39 let96) → (Eq let131 let29) → (Eq let91 let132) → (Eq let95 let133) → (Eq let43 let134) → (Eq let135 let81) → (Eq let136 let93) → (Eq let137 let54) → (Eq let70 let140) → (Eq let38 let96) → (Eq let150 let96) → (Eq let151 True) → (Eq let152 let16) → (Eq let153 True) → (Eq let154 let85) → let106 → (Eq let156 let155) → (Eq let55 let141) → (Eq let161 let160) → (Eq let162 let147) → let164 → (Eq let164 let165) → (Eq let166 True) → (Eq let167 False) → let169 → (Eq let169 let170) → (Eq let172 let171) → (Eq let173 let96) → let176 → (Eq let35 let96) → (Eq let46 let36) → (Eq let177 True) → (Eq let48 let44) → (Eq let60 let142) → (Eq let68 let148) → (Eq let71 let149) → (binrel% GE.ge x6x5fplus let18) → (binrel% GE.ge x6x5fminus let18) → (binrel% GE.ge x3x5fplus let18) → (binrel% GE.ge x3x5fminus let18) → (binrel% GE.ge x9x5fplus let18) → (binrel% GE.ge x9x5fminus let18) → (binrel% GE.ge x7x5fplus let18) → (binrel% GE.ge x7x5fminus let18) → (binrel% GE.ge x5x5fplus let18) → (binrel% GE.ge x5x5fminus let18) → (binrel% GE.ge x4x5fplus let18) → (binrel% GE.ge x4x5fminus let18) → (binrel% GE.ge x2x5fplus let18) → (binrel% GE.ge x2x5fminus let18) → (binrel% GE.ge x1x5fplus let18) → (binrel% GE.ge x1x5fminus let18) → (binrel% GE.ge x8x5fplus let18) → (binrel% GE.ge x8x5fminus let18) → (binrel% GE.ge x0x5fplus let18) → (binrel% GE.ge x0x5fminus let18) → let178 → let179 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let11 let56)))))))))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let11 let8)))))))) let2) → let180 → let181 → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let157 (binrel% HAdd.hAdd x1x5fminus let50)))))))) let18) → let152 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let182 x2x5fminus))))))) let18) → let183 → (binrel% LE.le (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x4x5fminus let8)))))) let18) → let184 → (binrel% LE.le (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 let10)) let18) → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 let158)))) let18) → let110 → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus let158)))) let18) → let135 → (binrel% LE.le (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let138 let56)) let18) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 let185)) let1) → (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x8x5fminus) (binrel% HAdd.hAdd let53 x7x5fminus))) let2) → let186 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let182 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let157 (binrel% HAdd.hAdd x1x5fminus let8)))))))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x4x5fminus) (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x3x5fminus let8)))))))) let18) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fminus let187)))))) let18) → (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let124 (binrel% HAdd.hAdd let123 let158)))))) let18) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 let10)))) let18) → (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 let187)))) let18) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus let185)))))) let18) → (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 let50)))))) let18) → (binrel% GE.ge (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 let188)))) let18) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 let19)))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let11 let158)))) let2) → (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 let117)) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 let188)) let18) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 let50)) let18) → False :=
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x6x5fminus)
  let let4 := (binrel% HAdd.hAdd x6x5fplus let3)
  let let5 := (binrel% GE.ge let4 let1)
  let let6 := (Not let5)
  let let7 := (binrel% LT.lt let4 let1)
  let let8 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let2 x0x5fminus))
  let let9 := (binrel% HMul.hMul let2 x1x5fminus)
  let let10 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let9 let8))
  let let11 := (binrel% HMul.hMul let2 x2x5fminus)
  let let12 := (binrel% HMul.hMul let2 x4x5fplus)
  let let13 := (binrel% HMul.hMul let2 x9x5fminus)
  let let14 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let11 let10))))))
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let1)
  let let18 := (Int.ofNat 0)
  let let19 := (binrel% HAdd.hAdd x2x5fplus let11)
  let let20 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x4x5fminus let19))
  let let21 := (binrel% HMul.hMul let2 x7x5fminus)
  let let22 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 let20))
  let let23 := (binrel% GE.ge let22 let18)
  let let24 := (Not let23)
  let let25 := (binrel% LT.lt let22 let18)
  let let26 := (Rat.ofInt 4)
  let let27 := (binrel% GT.gt let26 let18)
  let let28 := (binrel% HMul.hMul let2 x3x5fminus)
  let let29 := (binrel% HAdd.hAdd x3x5fplus let28)
  let let30 := (binrel% GE.ge let29 let18)
  let let31 := (Not let30)
  let let32 := (binrel% LT.lt let29 let18)
  let let33 := (Rat.ofInt 1)
  let let34 := (binrel% GT.gt let33 let18)
  let let35 := (binrel% HMul.hMul let33 let18)
  let let36 := (Rat.ofInt 2)
  let let37 := (Neg.neg let36)
  let let38 := (binrel% HMul.hMul let37 let18)
  let let39 := (binrel% HMul.hMul let26 let18)
  let let40 := (Neg.neg let26)
  let let41 := (binrel% HMul.hMul let40 let18)
  let let42 := (Rat.ofInt 5)
  let let43 := (binrel% HMul.hMul let42 let2)
  let let44 := (Neg.neg let33)
  let let45 := (binrel% HMul.hMul let44 let2)
  let let46 := (binrel% HMul.hMul let36 let1)
  let let47 := (binrel% HMul.hMul let33 let1)
  let let48 := (binrel% HMul.hMul let33 let2)
  let let49 := (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let38 let35)))))))))
  let let50 := (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x0x5fplus) x0x5fminus)
  let let51 := (binrel% HMul.hMul let2 x8x5fplus)
  let let52 := (binrel% HMul.hMul let2 x4x5fminus)
  let let53 := (binrel% HMul.hMul let2 x7x5fplus)
  let let54 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x8x5fminus let50))))))))
  let let55 := (binrel% HMul.hMul let33 let54)
  let let56 := (binrel% HAdd.hAdd x1x5fplus let9)
  let let57 := (binrel% HMul.hMul let2 x5x5fplus)
  let let58 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fminus let56))))))))
  let let59 := (binrel% HMul.hMul let37 let58)
  let let60 := (binrel% HMul.hMul let26 let29)
  let let61 := (binrel% HMul.hMul let2 x5x5fminus)
  let let62 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 let20))))))))
  let let63 := (binrel% HMul.hMul let40 let62)
  let let64 := (binrel% HMul.hMul let42 let22)
  let let65 := (Int.ofNat 2)
  let let66 := (Neg.neg let65)
  let let67 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x2x5fminus) (binrel% HAdd.hAdd let51 x8x5fminus)))))
  let let68 := (binrel% HMul.hMul let44 let67)
  let let69 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x5x5fplus let61)))))))
  let let70 := (binrel% HMul.hMul let36 let69)
  let let71 := (binrel% HMul.hMul let33 let14)
  let let72 := (binrel% HMul.hMul let36 let4)
  let let73 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 let56))))
  let let74 := (binrel% HMul.hMul let33 let73)
  let let75 := (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let59 let55)))))))))
  let let76 := (binrel% GE.ge let75 let49)
  let let77 := (Not let76)
  let let78 := (binrel% LT.lt let75 let49)
  let let79 := (Rat.ofInt let73)
  let let80 := (binrel% GE.ge let73 let18)
  let let81 := (Not let80)
  let let82 := (binrel% LT.lt let73 let18)
  let let83 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x6x5fplus) (binrel% HMul.hMul let66 x6x5fminus)))
  let let84 := (binrel% GE.ge let69 let1)
  let let85 := (Not let84)
  let let86 := (Not let85)
  let let87 := (Eq let84 let86)
  let let88 := (Eq let86 let84)
  let let89 := (Eq let84 let84)
  let let90 := (Not let16)
  let let91 := (Eq let90 let15)
  let let92 := (binrel% GE.ge let54 let1)
  let let93 := (Not let92)
  let let94 := (Not let93)
  let let95 := (Eq let94 let92)
  let let96 := (Rat.ofInt 0)
  let let97 := (binrel% GT.gt let36 let18)
  let let98 := (Not let6)
  let let99 := (Eq let5 let98)
  let let100 := (Eq let98 let5)
  let let101 := (Eq let5 let5)
  let let102 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 let19))))))))))
  let let103 := (binrel% LT.lt let44 let18)
  let let104 := (Not let81)
  let let105 := (Eq let80 let104)
  let let106 := (Eq let104 let80)
  let let107 := (Int.ofNat 5)
  let let108 := (Neg.neg let107)
  let let109 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let108 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let108 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let107 x2x5fplus) (binrel% HMul.hMul let108 x2x5fminus)))))))
  let let110 := (binrel% LE.le let22 let2)
  let let111 := (Int.ofNat 4)
  let let112 := (Neg.neg let111)
  let let113 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x2x5fplus) (binrel% HMul.hMul let111 x2x5fminus)))))))))))))
  let let114 := (binrel% LE.le let4 let18)
  let let115 := (binrel% LT.lt let69 let1)
  let let116 := (binrel% HSub.hSub x6x5fplus x6x5fminus)
  let let117 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 let29))
  let let118 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus let117))))
  let let119 := (binrel% LT.lt let54 let1)
  let let120 := (binrel% LE.le let29 let2)
  let let121 := (binrel% GT.gt let42 let18)
  let let122 := (Eq let80 let80)
  let let123 := (binrel% HMul.hMul let66 x5x5fminus)
  let let124 := (binrel% HMul.hMul let65 x5x5fplus)
  let let125 := (binrel% HMul.hMul let66 x7x5fminus)
  let let126 := (binrel% HMul.hMul let65 x7x5fplus)
  let let127 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x3x5fminus) (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd let124 (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x1x5fplus) (binrel% HMul.hMul let65 x1x5fminus)))))))))))
  let let128 := (Eq let23 let23)
  let let129 := (binrel% LT.lt let37 let18)
  let let130 := (Eq let92 let92)
  let let131 := (binrel% HSub.hSub x3x5fplus x3x5fminus)
  let let132 := (Eq let15 let90)
  let let133 := (Eq let92 let94)
  let let134 := (Neg.neg let42)
  let let135 := (binrel% LE.le let73 let2)
  let let136 := (binrel% LE.le let54 let18)
  let let137 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 let50))))))))
  let let138 := (binrel% HMul.hMul let66 x9x5fminus)
  let let139 := (binrel% HMul.hMul let65 x9x5fplus)
  let let140 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x3x5fminus) (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x7x5fminus) (binrel% HAdd.hAdd let124 let123))))))))
  let let141 := (Rat.ofInt let54)
  let let142 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let111 x3x5fplus) (binrel% HMul.hMul let112 x3x5fminus)))
  let let143 := (binrel% HMul.hMul let2 x8x5fminus)
  let let144 := (binrel% HMul.hMul let65 x2x5fminus)
  let let145 := (binrel% HMul.hMul let66 x2x5fplus)
  let let146 := (binrel% HMul.hMul let2 x6x5fplus)
  let let147 := (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let145 (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd x8x5fplus let143)))))
  let let148 := (Rat.ofInt let147)
  let let149 := (Rat.ofInt let14)
  let let150 := (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let127 let141)))))))))
  let let151 := (binrel% LT.lt let40 let18)
  let let152 := (binrel% LE.le let14 let18)
  let let153 := (binrel% GE.ge let96 let96)
  let let154 := (binrel% LE.le let69 let18)
  let let155 := (binrel% GE.ge let67 let2)
  let let156 := (binrel% LE.le let147 let1)
  let let157 := (binrel% HMul.hMul let2 x1x5fplus)
  let let158 := (binrel% HAdd.hAdd let157 x1x5fminus)
  let let159 := (binrel% HMul.hMul let2 x3x5fplus)
  let let160 := (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 let158))))))))
  let let161 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x3x5fminus let158))))))))
  let let162 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let145 let144)))))
  let let163 := (Not let24)
  let let164 := (Eq let163 let23)
  let let165 := (Eq let23 let163)
  let let166 := (Eq let30 let30)
  let let167 := (Not True)
  let let168 := (Not let31)
  let let169 := (Eq let168 let30)
  let let170 := (Eq let30 let168)
  let let171 := (binrel% GE.ge let58 let18)
  let let172 := (binrel% LE.le let160 let18)
  let let173 := (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let134 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let96 let96)))))))))
  let let174 := (Not let135)
  let let175 := (binrel% GT.gt let73 let2)
  let let176 := (Eq let175 let174)
  let let177 := (Eq let15 let15)
  let let178 := (binrel% LE.le let116 let18)
  let let179 := (binrel% LE.le let131 let2)
  let let180 := (binrel% LE.le let137 let18)
  let let181 := (binrel% LE.le let161 let18)
  let let182 := (binrel% HMul.hMul let2 x2x5fplus)
  let let183 := (binrel% LE.le let118 let18)
  let let184 := (binrel% LE.le let162 let1)
  let let185 := (binrel% HAdd.hAdd let146 x6x5fminus)
  let let186 := (binrel% GE.ge let102 let18)
  let let187 := (binrel% HAdd.hAdd let182 (binrel% HAdd.hAdd x2x5fminus let158))
  let let188 := (binrel% HAdd.hAdd let159 x3x5fminus)
  let let189 := (binrel% GE.ge let62 let18)
  let let190 := (Not let189)
  let let191 := (Not let155)
  let let192 := (Not let171)
  let let193 := (Or let92 (Or let192 (Or let30 (Or let190 (Or let23 (Or let191 (Or let84 (Or let15 (Or let5 let80)))))))))
  let let194 := (Or let94 (Or let192 (Or let168 (Or let190 (Or let163 (Or let191 (Or let86 (Or let90 (Or let98 let104)))))))))
  let let195 := (binrel% LE.le let55 let35)
  let let196 := (And let34 let136)
  let let197 := (binrel% LE.le let59 let38)
  let let198 := (And let129 let171)
  let let199 := (binrel% LT.lt let60 let39)
  let let200 := (And let27 let32)
  let let201 := (binrel% LE.le let63 let41)
  let let202 := (And let151 let189)
  let let203 := (binrel% LE.le let64 let43)
  let let204 := (And let121 let110)
  let let205 := (binrel% LE.le let68 let45)
  let let206 := (And let103 let155)
  let let207 := (binrel% LT.lt let70 let46)
  let let208 := (And let97 let115)
  let let209 := (binrel% LT.lt let71 let47)
  let let210 := (And let34 let17)
  let let211 := (binrel% LT.lt let72 let46)
  let let212 := (And let97 let7)
  let let213 := (binrel% LE.le let74 let48)
  let let214 := (And let34 let135)
fun lean_r0 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let27 True) => -- EVALUATE
fun lean_r4 : (Eq let32 let31) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let34 True) => -- EVALUATE
fun lean_r6 : (Eq let78 let77) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let74 let79) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let82 let81) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let72 let83) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let88 let87) => -- THEORY_REWRITE_BOOL
fun lean_r11 : let88 => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let89 True) => -- THEORY_REWRITE_BOOL
fun lean_r13 : let91 => -- THEORY_REWRITE_BOOL
fun lean_r14 : let95 => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let41 let96) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let97 True) => -- EVALUATE
fun lean_r17 : (Eq let100 let99) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let101 True) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let102 let62) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let103 True) => -- EVALUATE
fun lean_r21 : (Eq let106 let105) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let64 let109) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let110 let24) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let63 let113) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let114 let6) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let45 let33) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let115 let85) => -- THEORY_REWRITE_ARITH
fun lean_r28 : let100 => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let116 let4) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let118 let69) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let47 let33) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let119 let93) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let120 let31) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let121 True) => -- EVALUATE
fun lean_r35 : (Eq let122 True) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let59 let127) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let128 True) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let129 True) => -- EVALUATE
fun lean_r39 : (Eq let130 True) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let39 let96) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let131 let29) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let91 let132) => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq let95 let133) => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let43 let134) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let135 let81) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let136 let93) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let137 let54) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let70 let140) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let38 let96) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let150 let96) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let151 True) => -- EVALUATE
fun lean_r52 : (Eq let152 let16) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let153 True) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let154 let85) => -- THEORY_REWRITE_ARITH
fun lean_r55 : let106 => -- THEORY_REWRITE_BOOL
fun lean_r56 : (Eq let156 let155) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let55 let141) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let161 let160) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let162 let147) => -- THEORY_REWRITE_ARITH
fun lean_r60 : let164 => -- THEORY_REWRITE_BOOL
fun lean_r61 : (Eq let164 let165) => -- THEORY_REWRITE_BOOL
fun lean_r62 : (Eq let166 True) => -- THEORY_REWRITE_BOOL
fun lean_r63 : (Eq let167 False) => -- THEORY_REWRITE_BOOL
fun lean_r64 : let169 => -- THEORY_REWRITE_BOOL
fun lean_r65 : (Eq let169 let170) => -- THEORY_REWRITE_BOOL
fun lean_r66 : (Eq let172 let171) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq let173 let96) => -- THEORY_REWRITE_ARITH
fun lean_r68 : let176 => -- THEORY_REWRITE_ARITH
fun lean_r69 : (Eq let35 let96) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq let46 let36) => -- THEORY_REWRITE_ARITH
fun lean_r71 : (Eq let177 True) => -- THEORY_REWRITE_BOOL
fun lean_r72 : (Eq let48 let44) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let60 let142) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let68 let148) => -- THEORY_REWRITE_ARITH
fun lean_r75 : (Eq let71 let149) => -- THEORY_REWRITE_ARITH
fun lean_a76 : (binrel% GE.ge x6x5fplus let18) =>
fun lean_a77 : (binrel% GE.ge x6x5fminus let18) =>
fun lean_a78 : (binrel% GE.ge x3x5fplus let18) =>
fun lean_a79 : (binrel% GE.ge x3x5fminus let18) =>
fun lean_a80 : (binrel% GE.ge x9x5fplus let18) =>
fun lean_a81 : (binrel% GE.ge x9x5fminus let18) =>
fun lean_a82 : (binrel% GE.ge x7x5fplus let18) =>
fun lean_a83 : (binrel% GE.ge x7x5fminus let18) =>
fun lean_a84 : (binrel% GE.ge x5x5fplus let18) =>
fun lean_a85 : (binrel% GE.ge x5x5fminus let18) =>
fun lean_a86 : (binrel% GE.ge x4x5fplus let18) =>
fun lean_a87 : (binrel% GE.ge x4x5fminus let18) =>
fun lean_a88 : (binrel% GE.ge x2x5fplus let18) =>
fun lean_a89 : (binrel% GE.ge x2x5fminus let18) =>
fun lean_a90 : (binrel% GE.ge x1x5fplus let18) =>
fun lean_a91 : (binrel% GE.ge x1x5fminus let18) =>
fun lean_a92 : (binrel% GE.ge x8x5fplus let18) =>
fun lean_a93 : (binrel% GE.ge x8x5fminus let18) =>
fun lean_a94 : (binrel% GE.ge x0x5fplus let18) =>
fun lean_a95 : (binrel% GE.ge x0x5fminus let18) =>
fun lean_a96 : let178 =>
fun lean_a97 : let179 =>
fun lean_a98 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let11 let56)))))))))))) let1) =>
fun lean_a99 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let11 let8)))))))) let2) =>
fun lean_a100 : let180 =>
fun lean_a101 : let181 =>
fun lean_a102 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let157 (binrel% HAdd.hAdd x1x5fminus let50)))))))) let18) =>
fun lean_a103 : let152 =>
fun lean_a104 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let182 x2x5fminus))))))) let18) =>
fun lean_a105 : let183 =>
fun lean_a106 : (binrel% LE.le (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x4x5fminus let8)))))) let18) =>
fun lean_a107 : let184 =>
fun lean_a108 : (binrel% LE.le (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 let10)) let18) =>
fun lean_a109 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 let158)))) let18) =>
fun lean_a110 : let110 =>
fun lean_a111 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus let158)))) let18) =>
fun lean_a112 : let135 =>
fun lean_a113 : (binrel% LE.le (binrel% HAdd.hAdd let139 (binrel% HAdd.hAdd let138 let56)) let18) =>
fun lean_a114 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 let185)) let1) =>
fun lean_a115 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x8x5fminus) (binrel% HAdd.hAdd let53 x7x5fminus))) let2) =>
fun lean_a116 : let186 =>
fun lean_a117 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let182 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let157 (binrel% HAdd.hAdd x1x5fminus let8)))))))))) let1) =>
fun lean_a118 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x4x5fminus) (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd x3x5fminus let8)))))))) let18) =>
fun lean_a119 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fminus let187)))))) let18) =>
fun lean_a120 : (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let124 (binrel% HAdd.hAdd let123 let158)))))) let18) =>
fun lean_a121 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 let10)))) let18) =>
fun lean_a122 : (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let28 let187)))) let18) =>
fun lean_a123 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x7x5fminus let185)))))) let18) =>
fun lean_a124 : (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 let50)))))) let18) =>
fun lean_a125 : (binrel% GE.ge (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 let188)))) let18) =>
fun lean_a126 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 let19)))) let1) =>
fun lean_a127 : (binrel% GE.ge (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let11 let158)))) let2) =>
fun lean_a128 : (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let3 let117)) let1) =>
fun lean_a129 : (binrel% GE.ge (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let52 let188)) let18) =>
fun lean_a130 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let143 let50)) let18) => by
have lean_s0 : (Or let94 (Or let192 (Or let168 (Or let190 (Or let163 (Or let191 (Or let86 (Or let90 (Or let98 (Or let104 False)))))))))) :=
  (scope (fun lean_a131 : let93 =>
    (scope (fun lean_a132 : let171 =>
      (scope (fun lean_a133 : let31 =>
        (scope (fun lean_a134 : let189 =>
          (scope (fun lean_a135 : let24 =>
            (scope (fun lean_a136 : let155 =>
              (scope (fun lean_a137 : let85 =>
                (scope (fun lean_a138 : let16 =>
                  (scope (fun lean_a139 : let6 =>
                    (scope (fun lean_a140 : let81 =>
                      have lean_s0 : let81 := by timed eqResolve lean_a112 lean_r45
                      have lean_s1 : (Eq let81 let82) := by timed Eq.symm lean_r8
                      have lean_s2 : let82 := by timed eqResolve lean_s0 lean_s1
                      have lean_s3 : let135 := by intTightUb lean_s2
                      have lean_s4 : (Or let174 False) :=
                        (scope (fun lean_a141 : let135 =>
                          have lean_s4 : let34 := by timed trueElim lean_r5
                          have lean_s5 : let214 := by timed And.intro lean_s4 lean_a141
                          have lean_s6 : (Implies let214 let213) := by arithMulPos [let73, let2, let33], 1
                          have lean_s7 : let213 := by timed modusPonens lean_s5 lean_s6
                          have lean_s8 : let97 := by timed trueElim lean_r16
                          let lean_s9 := by timed flipCongrArg lean_r29 [LE.le]
                          have lean_s10 : (Eq let18 let18) := by timed rfl
                          have lean_s11 : (Eq let178 let114) := by timed congr lean_s9 lean_s10
                          have lean_s12 : (Eq let178 let6) := by timed Eq.trans lean_s11 lean_r25
                          have lean_s13 : let6 := by timed eqResolve lean_a96 lean_s12
                          have lean_s14 : (Eq let6 let7) := by timed Eq.symm lean_r0
                          have lean_s15 : let7 := by timed eqResolve lean_s13 lean_s14
                          have lean_s16 : let212 := by timed And.intro lean_s8 lean_s15
                          have lean_s17 : (Implies let212 let211) := by arithMulPos [let4, let1, let36], 0
                          have lean_s18 : let211 := by timed modusPonens lean_s16 lean_s17
                          have lean_s19 : let16 := by timed eqResolve lean_a103 lean_r52
                          have lean_s20 : (Eq let16 let17) := by timed Eq.symm lean_r1
                          have lean_s21 : let17 := by timed eqResolve lean_s19 lean_s20
                          have lean_s22 : let210 := by timed And.intro lean_s4 lean_s21
                          have lean_s23 : (Implies let210 let209) := by arithMulPos [let14, let1, let33], 0
                          have lean_s24 : let209 := by timed modusPonens lean_s22 lean_s23
                          let lean_s25 := by timed flipCongrArg lean_r30 [LE.le]
                          have lean_s26 : (Eq let183 let154) := by timed congr lean_s25 lean_s10
                          have lean_s27 : (Eq let183 let85) := by timed Eq.trans lean_s26 lean_r54
                          have lean_s28 : let85 := by timed eqResolve lean_a105 lean_s27
                          have lean_s29 : (Eq let85 let115) := by timed Eq.symm lean_r27
                          have lean_s30 : let115 := by timed eqResolve lean_s28 lean_s29
                          have lean_s31 : let208 := by timed And.intro lean_s8 lean_s30
                          have lean_s32 : (Implies let208 let207) := by arithMulPos [let69, let1, let36], 0
                          have lean_s33 : let207 := by timed modusPonens lean_s31 lean_s32
                          have lean_s34 : let103 := by timed trueElim lean_r20
                          let lean_s35 := by timed flipCongrArg lean_r59 [LE.le]
                          have lean_s36 : (Eq let1 let1) := by timed rfl
                          have lean_s37 : (Eq let184 let156) := by timed congr lean_s35 lean_s36
                          have lean_s38 : (Eq let184 let155) := by timed Eq.trans lean_s37 lean_r56
                          have lean_s39 : let155 := by timed eqResolve lean_a107 lean_s38
                          have lean_s40 : let206 := by timed And.intro lean_s34 lean_s39
                          have lean_s41 : (Implies let206 let205) := by arithMulNeg [let67, let2, let44], 3
                          have lean_s42 : let205 := by timed modusPonens lean_s40 lean_s41
                          have lean_s43 : let121 := by timed trueElim lean_r34
                          have lean_s44 : let24 := by timed eqResolve lean_a110 lean_r23
                          have lean_s45 : (Eq let24 let25) := by timed Eq.symm lean_r2
                          have lean_s46 : let25 := by timed eqResolve lean_s44 lean_s45
                          have lean_s47 : let110 := by intTightUb lean_s46
                          have lean_s48 : let204 := by timed And.intro lean_s43 lean_s47
                          have lean_s49 : (Implies let204 let203) := by arithMulPos [let22, let2, let42], 1
                          have lean_s50 : let203 := by timed modusPonens lean_s48 lean_s49
                          have lean_s51 : let151 := by timed trueElim lean_r51
                          let lean_s52 := by timed flipCongrArg lean_r19 [GE.ge]
                          have lean_s53 : (Eq let186 let189) := by timed congr lean_s52 lean_s10
                          have lean_s54 : let189 := by timed eqResolve lean_a116 lean_s53
                          have lean_s55 : let202 := by timed And.intro lean_s51 lean_s54
                          have lean_s56 : (Implies let202 let201) := by arithMulNeg [let62, let18, let40], 3
                          have lean_s57 : let201 := by timed modusPonens lean_s55 lean_s56
                          have lean_s58 : let27 := by timed trueElim lean_r3
                          let lean_s59 := by timed flipCongrArg lean_r41 [LE.le]
                          have lean_s60 : (Eq let2 let2) := by timed rfl
                          have lean_s61 : (Eq let179 let120) := by timed congr lean_s59 lean_s60
                          have lean_s62 : (Eq let179 let31) := by timed Eq.trans lean_s61 lean_r33
                          have lean_s63 : let31 := by timed eqResolve lean_a97 lean_s62
                          have lean_s64 : (Eq let31 let32) := by timed Eq.symm lean_r4
                          have lean_s65 : let32 := by timed eqResolve lean_s63 lean_s64
                          have lean_s66 : let200 := by timed And.intro lean_s58 lean_s65
                          have lean_s67 : (Implies let200 let199) := by arithMulPos [let29, let18, let26], 0
                          have lean_s68 : let199 := by timed modusPonens lean_s66 lean_s67
                          have lean_s69 : let129 := by timed trueElim lean_r38
                          let lean_s70 := by timed flipCongrArg lean_r58 [LE.le]
                          have lean_s71 : (Eq let181 let172) := by timed congr lean_s70 lean_s10
                          have lean_s72 : (Eq let181 let171) := by timed Eq.trans lean_s71 lean_r66
                          have lean_s73 : let171 := by timed eqResolve lean_a101 lean_s72
                          have lean_s74 : let198 := by timed And.intro lean_s69 lean_s73
                          have lean_s75 : (Implies let198 let197) := by arithMulNeg [let58, let18, let37], 3
                          have lean_s76 : let197 := by timed modusPonens lean_s74 lean_s75
                          let lean_s77 := by timed flipCongrArg lean_r47 [LE.le]
                          have lean_s78 : (Eq let180 let136) := by timed congr lean_s77 lean_s10
                          have lean_s79 : (Eq let180 let93) := by timed Eq.trans lean_s78 lean_r46
                          have lean_s80 : let93 := by timed eqResolve lean_a100 lean_s79
                          have lean_s81 : (Eq let93 let119) := by timed Eq.symm lean_r32
                          have lean_s82 : let119 := by timed eqResolve lean_s80 lean_s81
                          have lean_s83 : let136 := by intTightUb lean_s82
                          have lean_s84 : let196 := by timed And.intro lean_s4 lean_s83
                          have lean_s85 : (Implies let196 let195) := by arithMulPos [let54, let18, let33], 1
                          have lean_s86 : let195 := by timed modusPonens lean_s84 lean_s85
                          have lean_s87 : let78 := by sumBounds [lean_s7, lean_s18, lean_s24, lean_s33, lean_s42, lean_s50, lean_s57, lean_s68, lean_s76, lean_s86]
                          let lean_s88 := by timed congrHAdd lean_r36 lean_r57
                          let lean_s89 := by timed congrHAdd lean_r73 lean_s88
                          let lean_s90 := by timed congrHAdd lean_r24 lean_s89
                          let lean_s91 := by timed congrHAdd lean_r22 lean_s90
                          let lean_s92 := by timed congrHAdd lean_r74 lean_s91
                          let lean_s93 := by timed congrHAdd lean_r48 lean_s92
                          let lean_s94 := by timed congrHAdd lean_r75 lean_s93
                          let lean_s95 := by timed congrHAdd lean_r9 lean_s94
                          have lean_s96 : (Eq let75 let150) := by timed congrHAdd lean_r7 lean_s95
                          have lean_s97 : (Eq let75 let96) := by timed Eq.trans lean_s96 lean_r50
                          let lean_s98 := by timed flipCongrArg lean_s97 [GE.ge]
                          let lean_s99 := by timed congrHAdd lean_r49 lean_r69
                          let lean_s100 := by timed congrHAdd lean_r40 lean_s99
                          let lean_s101 := by timed congrHAdd lean_r15 lean_s100
                          let lean_s102 := by timed congrHAdd lean_r44 lean_s101
                          let lean_s103 := by timed congrHAdd lean_r26 lean_s102
                          let lean_s104 := by timed congrHAdd lean_r70 lean_s103
                          let lean_s105 := by timed congrHAdd lean_r31 lean_s104
                          let lean_s106 := by timed congrHAdd lean_r70 lean_s105
                          have lean_s107 : (Eq let49 let173) := by timed congrHAdd lean_r72 lean_s106
                          have lean_s108 : (Eq let49 let96) := by timed Eq.trans lean_s107 lean_r67
                          have lean_s109 : (Eq let76 let153) := by timed congr lean_s98 lean_s108
                          have lean_s110 : (Eq let76 True) := by timed Eq.trans lean_s109 lean_r53
                          have lean_s111 : (Eq let77 let167) := by timed flipCongrArg lean_s110 [Not]
                          have lean_s112 : (Eq let77 False) := by timed Eq.trans lean_s111 lean_r63
                          have lean_s113 : (Eq let78 False) := by timed Eq.trans lean_r6 lean_s112
                          show False from by timed eqResolve lean_s87 lean_s113
                        ))
                      have lean_s5 : let174 := by liftOrNToNeg lean_s4
                      have lean_s6 : (Eq let174 let104) := by timed flipCongrArg lean_r45 [Not]
                      have lean_s7 : (Eq let174 let80) := by timed Eq.trans lean_s6 lean_r55
                      have lean_s8 : (Eq let175 let80) := by timed Eq.trans lean_r68 lean_s7
                      have lean_s9 : (Eq let80 let175) := by timed Eq.symm lean_s8
                      have lean_s10 : (Eq let174 let175) := by timed Eq.trans lean_s7 lean_s9
                      have lean_s11 : let175 := by timed eqResolve lean_s5 lean_s10
                      have lean_s12 : (Eq let80 let174) := by timed Eq.symm lean_s7
                      have lean_s13 : let176 := by timed Eq.trans lean_s8 lean_s12
                      have lean_s14 : let174 := by timed eqResolve lean_s11 lean_s13
                      show False from by timed contradiction lean_s3 lean_s14
  ))))))))))))))))))))
have lean_s1 : (Not (And let93 (And let171 (And let31 (And let189 (And let24 (And let155 (And let85 (And let16 (And let6 let81)))))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let194 := by timed flipNotAnd lean_s1 [let93, let171, let31, let189, let24, let155, let85, let16, let6, let81]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let130 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let133 let130) := by timed congr lean_s5 lean_r14
have lean_s7 : (Eq let133 True) := by timed Eq.trans lean_s6 lean_r39
have lean_s8 : (Eq let95 True) := by timed Eq.trans lean_r43 lean_s7
have lean_s9 : let95 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq let192 let192) := by timed rfl
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let166 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let170 let166) := by timed congr lean_s14 lean_r64
have lean_s16 : (Eq let170 True) := by timed Eq.trans lean_s15 lean_r62
have lean_s17 : (Eq let169 True) := by timed Eq.trans lean_r65 lean_s16
have lean_s18 : let169 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s3 lean_s18
have lean_s20 : (Eq let190 let190) := by timed rfl
let lean_s21 := by timed congr lean_s3 lean_s20
have lean_s22 : let128 := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [Eq]
have lean_s24 : (Eq let165 let128) := by timed congr lean_s23 lean_r60
have lean_s25 : (Eq let165 True) := by timed Eq.trans lean_s24 lean_r37
have lean_s26 : (Eq let164 True) := by timed Eq.trans lean_r61 lean_s25
have lean_s27 : let164 := by timed trueElim lean_s26
let lean_s28 := by timed congr lean_s3 lean_s27
have lean_s29 : (Eq let191 let191) := by timed rfl
let lean_s30 := by timed congr lean_s3 lean_s29
have lean_s31 : let89 := by timed rfl
let lean_s32 := by timed flipCongrArg lean_s31 [Eq]
have lean_s33 : (Eq let87 let89) := by timed congr lean_s32 lean_r11
have lean_s34 : (Eq let87 True) := by timed Eq.trans lean_s33 lean_r12
have lean_s35 : (Eq let88 True) := by timed Eq.trans lean_r10 lean_s34
have lean_s36 : let88 := by timed trueElim lean_s35
let lean_s37 := by timed congr lean_s3 lean_s36
have lean_s38 : let177 := by timed rfl
let lean_s39 := by timed flipCongrArg lean_s38 [Eq]
have lean_s40 : (Eq let132 let177) := by timed congr lean_s39 lean_r13
have lean_s41 : (Eq let132 True) := by timed Eq.trans lean_s40 lean_r71
have lean_s42 : (Eq let91 True) := by timed Eq.trans lean_r42 lean_s41
have lean_s43 : let91 := by timed trueElim lean_s42
let lean_s44 := by timed congr lean_s3 lean_s43
have lean_s45 : let101 := by timed rfl
let lean_s46 := by timed flipCongrArg lean_s45 [Eq]
have lean_s47 : (Eq let99 let101) := by timed congr lean_s46 lean_r28
have lean_s48 : (Eq let99 True) := by timed Eq.trans lean_s47 lean_r18
have lean_s49 : (Eq let100 True) := by timed Eq.trans lean_r17 lean_s48
have lean_s50 : let100 := by timed trueElim lean_s49
let lean_s51 := by timed congr lean_s3 lean_s50
have lean_s52 : let122 := by timed rfl
let lean_s53 := by timed flipCongrArg lean_s52 [Eq]
have lean_s54 : (Eq let105 let122) := by timed congr lean_s53 lean_r55
have lean_s55 : (Eq let105 True) := by timed Eq.trans lean_s54 lean_r35
have lean_s56 : (Eq let106 True) := by timed Eq.trans lean_r21 lean_s55
have lean_s57 : let106 := by timed trueElim lean_s56
let lean_s58 := by timed congr lean_s51 lean_s57
let lean_s59 := by timed congr lean_s44 lean_s58
let lean_s60 := by timed congr lean_s37 lean_s59
let lean_s61 := by timed congr lean_s30 lean_s60
let lean_s62 := by timed congr lean_s28 lean_s61
let lean_s63 := by timed congr lean_s21 lean_s62
let lean_s64 := by timed congr lean_s19 lean_s63
let lean_s65 := by timed congr lean_s12 lean_s64
have lean_s66 : (Eq let194 let193) := by timed congr lean_s10 lean_s65
have lean_s67 : let193 := by timed eqResolve lean_s2 lean_s66
have lean_s68 : (Or let5 (Or let30 (Or let92 (Or let15 (Or let84 (Or let23 (Or let80 (Or let192 (Or let191 let190))))))))) := by permutateOr lean_s67, [8, 2, 0, 7, 6, 4, 9, 1, 5, 3], (- 1)
let lean_s69 := by timed flipCongrArg lean_r19 [GE.ge]
have lean_s70 : (Eq let18 let18) := by timed rfl
have lean_s71 : (Eq let186 let189) := by timed congr lean_s69 lean_s70
have lean_s72 : let189 := by timed eqResolve lean_a116 lean_s71
let lean_s73 := by R2 lean_s68, lean_s72, let189, [(- 1), 0]
have lean_s74 : let81 := by timed eqResolve lean_a112 lean_r45
let lean_s75 := by R1 lean_s73, lean_s74, let80, [(- 1), 0]
have lean_s76 : let24 := by timed eqResolve lean_a110 lean_r23
let lean_s77 := by R1 lean_s75, lean_s76, let23, [(- 1), 0]
let lean_s78 := by timed flipCongrArg lean_r59 [LE.le]
have lean_s79 : (Eq let1 let1) := by timed rfl
have lean_s80 : (Eq let184 let156) := by timed congr lean_s78 lean_s79
have lean_s81 : (Eq let184 let155) := by timed Eq.trans lean_s80 lean_r56
have lean_s82 : let155 := by timed eqResolve lean_a107 lean_s81
let lean_s83 := by R2 lean_s77, lean_s82, let155, [(- 1), 0]
let lean_s84 := by timed flipCongrArg lean_r30 [LE.le]
have lean_s85 : (Eq let183 let154) := by timed congr lean_s84 lean_s70
have lean_s86 : (Eq let183 let85) := by timed Eq.trans lean_s85 lean_r54
have lean_s87 : let85 := by timed eqResolve lean_a105 lean_s86
let lean_s88 := by R1 lean_s83, lean_s87, let84, [(- 1), 0]
have lean_s89 : let16 := by timed eqResolve lean_a103 lean_r52
let lean_s90 := by R1 lean_s88, lean_s89, let15, [(- 1), 0]
let lean_s91 := by timed flipCongrArg lean_r58 [LE.le]
have lean_s92 : (Eq let181 let172) := by timed congr lean_s91 lean_s70
have lean_s93 : (Eq let181 let171) := by timed Eq.trans lean_s92 lean_r66
have lean_s94 : let171 := by timed eqResolve lean_a101 lean_s93
let lean_s95 := by R2 lean_s90, lean_s94, let171, [(- 1), 0]
let lean_s96 := by timed flipCongrArg lean_r47 [LE.le]
have lean_s97 : (Eq let180 let136) := by timed congr lean_s96 lean_s70
have lean_s98 : (Eq let180 let93) := by timed Eq.trans lean_s97 lean_r46
have lean_s99 : let93 := by timed eqResolve lean_a100 lean_s98
let lean_s100 := by R1 lean_s95, lean_s99, let92, [(- 1), 0]
let lean_s101 := by timed flipCongrArg lean_r41 [LE.le]
have lean_s102 : (Eq let2 let2) := by timed rfl
have lean_s103 : (Eq let179 let120) := by timed congr lean_s101 lean_s102
have lean_s104 : (Eq let179 let31) := by timed Eq.trans lean_s103 lean_r33
have lean_s105 : let31 := by timed eqResolve lean_a97 lean_s104
let lean_s106 := by R1 lean_s100, lean_s105, let30, [(- 1), 0]
let lean_s107 := by timed flipCongrArg lean_r29 [LE.le]
have lean_s108 : (Eq let178 let114) := by timed congr lean_s107 lean_s70
have lean_s109 : (Eq let178 let6) := by timed Eq.trans lean_s108 lean_r25
have lean_s110 : let6 := by timed eqResolve lean_a96 lean_s109
exact (show False from by R1 lean_s106, lean_s110, let5, [0, 0])


