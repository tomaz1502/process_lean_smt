open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x6x5fplus : Int}
variable {x7x5fplus : Int}
variable {x7x5fminus : Int}
variable {x3x5fplus : Int}
variable {x3x5fminus : Int}
variable {x1x5fplus : Int}
variable {x1x5fminus : Int}
variable {x8x5fplus : Int}
variable {x1x5fplus : Int}
variable {x1x5fminus : Int}
variable {x2x5fminus : Int}
variable {x2x5fplus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x8x5fminus : Int}
variable {x8x5fminus : Int}
variable {x9x5fminus : Int}
variable {x4x5fplus : Int}
variable {x4x5fminus : Int}
variable {x9x5fminus : Int}
variable {x0x5fplus : Int}
variable {x6x5fminus : Int}
variable {x9x5fplus : Int}
variable {x0x5fminus : Int}
variable {x5x5fplus : Int}
variable {x2x5fplus : Int}
variable {x3x5fminus : Int}
variable {x2x5fminus : Int}
variable {x3x5fplus : Int}
variable {x7x5fminus : Int}
variable {x4x5fminus : Int}
variable {x7x5fplus : Int}
variable {x8x5fplus : Int}
variable {x4x5fplus : Int}
variable {x6x5fminus : Int}
variable {x5x5fminus : Int}
variable {x6x5fplus : Int}
variable {x0x5fminus : Int}
variable {x9x5fplus : Int}
variable {x0x5fplus : Int}

theorem th0 :
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x3x5fplus)
  let let4 := (binrel% HAdd.hAdd let3 x3x5fminus)
  let let5 := (binrel% HMul.hMul let2 x7x5fminus)
  let let6 := (binrel% HMul.hMul let2 x8x5fminus)
  let let7 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 let4))))
  let let8 := (binrel% GE.ge let7 let1)
  let let9 := (Not let8)
  let let10 := (binrel% LT.lt let7 let1)
  let let11 := (Int.ofNat 0)
  let let12 := (Rat.ofInt 3)
  let let13 := (binrel% HMul.hMul let12 let11)
  let let14 := (Rat.ofInt 5)
  let let15 := (binrel% HMul.hMul let14 let11)
  let let16 := (Neg.neg (Rat.ofInt 6))
  let let17 := (binrel% HMul.hMul let16 let11)
  let let18 := (binrel% HMul.hMul let12 let2)
  let let19 := (Neg.neg let12)
  let let20 := (binrel% HMul.hMul let19 let1)
  let let21 := (Rat.ofInt 1)
  let let22 := (binrel% HMul.hMul let21 let1)
  let let23 := (binrel% HMul.hMul let19 let2)
  let let24 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let15 let13))))))))
  let let25 := (binrel% HMul.hMul let2 x2x5fminus)
  let let26 := (binrel% HAdd.hAdd x2x5fplus let25)
  let let27 := (binrel% HMul.hMul let2 x3x5fminus)
  let let28 := (binrel% HMul.hMul let2 x5x5fminus)
  let let29 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let27 let26))))))
  let let30 := (binrel% HMul.hMul let12 let29)
  let let31 := (Int.ofNat 2)
  let let32 := (Neg.neg let31)
  let let33 := (binrel% HMul.hMul let2 x8x5fplus)
  let let34 := (binrel% HMul.hMul let2 x9x5fminus)
  let let35 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x5x5fminus) let4))))))))
  let let36 := (binrel% HMul.hMul let14 let35)
  let let37 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let2 x0x5fminus))
  let let38 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 let37))
  let let39 := (binrel% HMul.hMul let16 let38)
  let let40 := (binrel% HMul.hMul let2 x1x5fplus)
  let let41 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x7x5fplus) (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd x1x5fminus let37))))))))
  let let42 := (binrel% HMul.hMul let12 let41)
  let let43 := (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x0x5fplus) x0x5fminus)
  let let44 := (binrel% HMul.hMul let2 x5x5fplus)
  let let45 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x5x5fminus let43))))
  let let46 := (binrel% HMul.hMul let19 let45)
  let let47 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x6x5fplus (binrel% HMul.hMul let2 x6x5fminus))))
  let let48 := (binrel% HMul.hMul let21 let47)
  let let49 := (binrel% HMul.hMul let21 let7)
  let let50 := (binrel% HMul.hMul let31 x3x5fminus)
  let let51 := (binrel% HMul.hMul let32 x3x5fplus)
  let let52 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd x1x5fminus let26))))))))
  let let53 := (binrel% HMul.hMul let19 let52)
  let let54 := (binrel% HMul.hMul let2 x6x5fplus)
  let let55 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let54 x6x5fminus)))))
  let let56 := (binrel% HMul.hMul let21 let55)
  let let57 := (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let36 let30))))))))
  let let58 := (binrel% GE.ge let57 let24)
  let let59 := (Not let58)
  let let60 := (binrel% LT.lt let57 let24)
  let let61 := (Rat.ofInt let55)
  let let62 := (Int.ofNat 3)
  let let63 := (Neg.neg let62)
  let let64 := (Int.ofNat 6)
  let let65 := (Neg.neg let64)
  let let66 := (binrel% HMul.hMul let63 x5x5fminus)
  let let67 := (binrel% HMul.hMul let62 x5x5fplus)
  let let68 := (binrel% HMul.hMul let62 x7x5fminus)
  let let69 := (binrel% HMul.hMul let63 x7x5fplus)
  let let70 := (Rat.ofInt (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x2x5fplus) (binrel% HMul.hMul let62 x2x5fminus)))))))))))
  let let71 := (Rat.ofInt let47)
  let let72 := (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x0x5fplus) (binrel% HMul.hMul let63 x0x5fminus))
  let let73 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x8x5fminus) (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let66 let72)))))
  let let74 := (binrel% HMul.hMul let63 x8x5fminus)
  let let75 := (binrel% HMul.hMul let62 x8x5fplus)
  let let76 := (Rat.ofInt (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x1x5fminus) let72)))))))))
  let let77 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x0x5fplus) (binrel% HMul.hMul let64 x0x5fminus)))))
  let let78 := (binrel% GT.gt let14 let11)
  let let79 := (Int.ofNat 5)
  let let80 := (Neg.neg let79)
  let let81 := (Int.ofNat 10)
  let let82 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let81) x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x3x5fplus) (binrel% HMul.hMul let79 x3x5fminus)))))))))))
  let let83 := (binrel% GE.ge let35 let1)
  let let84 := (Not let83)
  let let85 := (binrel% LT.lt let35 let1)
  let let86 := (Rat.ofInt (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x2x5fplus) (binrel% HMul.hMul let63 x2x5fminus)))))))))
  let let87 := (binrel% LT.lt let19 let11)
  let let88 := (Rat.ofInt 0)
  let let89 := (binrel% GE.ge let41 let11)
  let let90 := (Not let89)
  let let91 := (binrel% LT.lt let41 let11)
  let let92 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let88 let88))))))))
  let let93 := (Not let90)
  let let94 := (Eq let93 let89)
  let let95 := (binrel% GE.ge let29 let1)
  let let96 := (Not let95)
  let let97 := (binrel% LT.lt let29 let1)
  let let98 := (Not let96)
  let let99 := (Eq let98 let95)
  let let100 := (binrel% GE.ge let47 let1)
  let let101 := (Not let100)
  let let102 := (Not let101)
  let let103 := (Eq let102 let100)
  let let104 := (binrel% HAdd.hAdd let40 x1x5fminus)
  let let105 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let25 let104))
  let let106 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 let105))))))
  let let107 := (binrel% GT.gt let21 let11)
  let let108 := (Not let9)
  let let109 := (Eq let108 let8)
  let let110 := (binrel% LE.le let47 let11)
  let let111 := (binrel% GE.ge let55 let1)
  let let112 := (Not let111)
  let let113 := (binrel% LE.le let55 let11)
  let let114 := (Eq let111 let111)
  let let115 := (binrel% LT.lt let55 let1)
  let let116 := (Eq let100 let102)
  let let117 := (binrel% LE.le let7 let11)
  let let118 := (Eq let8 let108)
  let let119 := (Eq let89 let93)
  let let120 := (binrel% GT.gt let12 let11)
  let let121 := (Eq let95 let98)
  let let122 := (binrel% LT.lt let47 let1)
  let let123 := (Eq let8 let8)
  let let124 := (binrel% LT.lt let16 let11)
  let let125 := (Eq let89 let89)
  let let126 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus let28)))))
  let let127 := (Eq let95 let95)
  let let128 := (Rat.ofInt let7)
  let let129 := (binrel% LE.le let29 let11)
  let let130 := (binrel% LE.le let41 let2)
  let let131 := (binrel% LE.le let35 let11)
  let let132 := (Eq let100 let100)
  let let133 := (Not True)
  let let134 := (Eq let83 let83)
  let let135 := (Not let112)
  let let136 := (Eq let135 let111)
  let let137 := (Not let84)
  let let138 := (Eq let137 let83)
  let let139 := (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let128 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let82 let86))))))))
  let let140 := (Eq let111 let135)
  let let141 := (Eq let83 let137)
  let let142 := (binrel% GE.ge let88 let88)
  let let143 := (binrel% HMul.hMul let2 x4x5fminus)
  let let144 := (binrel% HMul.hMul let32 x9x5fminus)
  let let145 := (binrel% HMul.hMul let31 x9x5fplus)
  let let146 := (binrel% LE.le let126 let11)
  let let147 := (binrel% GE.ge let106 let2)
  let let148 := (binrel% HMul.hMul let2 x4x5fplus)
  let let149 := (binrel% GE.ge let45 let1)
  let let150 := (binrel% GE.ge let38 let11)
  let let151 := (binrel% GE.ge let52 let2)
  let let152 := (Not let150)
  let let153 := (Not let149)
  let let154 := (Not let151)
  let let155 := (Or let95 (Or let83 (Or let152 (Or let89 (Or let153 (Or let100 (Or let8 (Or let154 let111))))))))
  let let156 := (Or let98 (Or let137 (Or let152 (Or let93 (Or let153 (Or let102 (Or let108 (Or let154 let135))))))))
  let let157 := (Not let115)
  let let158 := (binrel% LE.le let30 let13)
  let let159 := (And let120 let129)
  let let160 := (binrel% LE.le let36 let15)
  let let161 := (And let78 let131)
  let let162 := (binrel% LE.le let39 let17)
  let let163 := (And let124 let150)
  let let164 := (binrel% LE.le let42 let18)
  let let165 := (And let120 let130)
  let let166 := (binrel% LE.le let46 let20)
  let let167 := (And let87 let149)
  let let168 := (binrel% LT.lt let48 let22)
  let let169 := (And let107 let122)
  let let170 := (binrel% LT.lt let49 let22)
  let let171 := (And let107 let10)
  let let172 := (binrel% LE.le let53 let23)
  let let173 := (And let87 let151)
  let let174 := (binrel% LT.lt let56 let22)
  let let175 := (And let107 let115)
(Eq let10 let9) → (Eq let60 let59) → (Eq let56 let61) → (Eq let53 let70) → (Eq let48 let71) → (Eq let46 let73) → (Eq let42 let76) → (Eq let39 let77) → (Eq let78 True) → (Eq let36 let82) → (Eq let85 let84) → (Eq let30 let86) → (Eq let23 let12) → (Eq let22 let21) → (Eq let87 True) → (Eq let20 let19) → (Eq let17 let88) → (Eq let91 let90) → (Eq let15 let88) → (Eq let13 let88) → (Eq let92 let88) → let94 → (Eq let97 let96) → let99 → let103 → (Eq let106 let52) → (Eq let107 True) → let109 → (Eq let110 let101) → (Eq let18 let19) → (Eq let113 let112) → (Eq let114 True) → (Eq let115 let112) → (Eq let103 let116) → (Eq let117 let9) → (Eq let109 let118) → (Eq let94 let119) → (Eq let120 True) → (Eq let99 let121) → (Eq let122 let101) → (Eq let123 True) → (Eq let124 True) → (Eq let125 True) → (Eq let126 let55) → (Eq let127 True) → (Eq let49 let128) → (Eq let129 let96) → (Eq let130 let90) → (Eq let131 let84) → (Eq let132 True) → (Eq let133 False) → (Eq let134 True) → let136 → let138 → (Eq let139 let88) → (Eq let136 let140) → (Eq let138 let141) → (Eq let142 True) → (binrel% GE.ge x9x5fplus let11) → (binrel% GE.ge x9x5fminus let11) → (binrel% GE.ge x8x5fplus let11) → (binrel% GE.ge x8x5fminus let11) → (binrel% GE.ge x7x5fplus let11) → (binrel% GE.ge x7x5fminus let11) → (binrel% GE.ge x5x5fplus let11) → (binrel% GE.ge x5x5fminus let11) → (binrel% GE.ge x3x5fplus let11) → (binrel% GE.ge x3x5fminus let11) → (binrel% GE.ge x1x5fplus let11) → (binrel% GE.ge x1x5fminus let11) → (binrel% GE.ge x0x5fplus let11) → (binrel% GE.ge x0x5fminus let11) → (binrel% GE.ge x6x5fplus let11) → (binrel% GE.ge x6x5fminus let11) → (binrel% GE.ge x4x5fplus let11) → (binrel% GE.ge x4x5fminus let11) → (binrel% GE.ge x2x5fplus let11) → (binrel% GE.ge x2x5fminus let11) → let131 → let130 → (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x6x5fminus) (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd x1x5fplus (binrel% HMul.hMul let2 x1x5fminus)))))))))) let2) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let44 x5x5fminus))))))) let11) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x5x5fminus let37)))))) let11) → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let28 let105)))) let11) → (binrel% LE.le (binrel% HAdd.hAdd let145 (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x3x5fplus) (binrel% HMul.hMul let32 x3x5fminus)))))))) let11) → let129 → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x5x5fminus) let37)))))) let2) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 let104)))))) let2) → let117 → (binrel% LE.le (binrel% HAdd.hAdd let145 (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x2x5fplus) x2x5fminus))))) let11) → let146 → let110 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x3x5fminus let43)))))))))))) let11) → let147 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd x4x5fminus let37)))) let11) → let149 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let148 x4x5fminus))))) let11) → let150 → False :=
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x3x5fplus)
  let let4 := (binrel% HAdd.hAdd let3 x3x5fminus)
  let let5 := (binrel% HMul.hMul let2 x7x5fminus)
  let let6 := (binrel% HMul.hMul let2 x8x5fminus)
  let let7 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 let4))))
  let let8 := (binrel% GE.ge let7 let1)
  let let9 := (Not let8)
  let let10 := (binrel% LT.lt let7 let1)
  let let11 := (Int.ofNat 0)
  let let12 := (Rat.ofInt 3)
  let let13 := (binrel% HMul.hMul let12 let11)
  let let14 := (Rat.ofInt 5)
  let let15 := (binrel% HMul.hMul let14 let11)
  let let16 := (Neg.neg (Rat.ofInt 6))
  let let17 := (binrel% HMul.hMul let16 let11)
  let let18 := (binrel% HMul.hMul let12 let2)
  let let19 := (Neg.neg let12)
  let let20 := (binrel% HMul.hMul let19 let1)
  let let21 := (Rat.ofInt 1)
  let let22 := (binrel% HMul.hMul let21 let1)
  let let23 := (binrel% HMul.hMul let19 let2)
  let let24 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let15 let13))))))))
  let let25 := (binrel% HMul.hMul let2 x2x5fminus)
  let let26 := (binrel% HAdd.hAdd x2x5fplus let25)
  let let27 := (binrel% HMul.hMul let2 x3x5fminus)
  let let28 := (binrel% HMul.hMul let2 x5x5fminus)
  let let29 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let27 let26))))))
  let let30 := (binrel% HMul.hMul let12 let29)
  let let31 := (Int.ofNat 2)
  let let32 := (Neg.neg let31)
  let let33 := (binrel% HMul.hMul let2 x8x5fplus)
  let let34 := (binrel% HMul.hMul let2 x9x5fminus)
  let let35 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x5x5fminus) let4))))))))
  let let36 := (binrel% HMul.hMul let14 let35)
  let let37 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let2 x0x5fminus))
  let let38 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 let37))
  let let39 := (binrel% HMul.hMul let16 let38)
  let let40 := (binrel% HMul.hMul let2 x1x5fplus)
  let let41 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x7x5fplus) (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd x1x5fminus let37))))))))
  let let42 := (binrel% HMul.hMul let12 let41)
  let let43 := (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x0x5fplus) x0x5fminus)
  let let44 := (binrel% HMul.hMul let2 x5x5fplus)
  let let45 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x5x5fminus let43))))
  let let46 := (binrel% HMul.hMul let19 let45)
  let let47 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x6x5fplus (binrel% HMul.hMul let2 x6x5fminus))))
  let let48 := (binrel% HMul.hMul let21 let47)
  let let49 := (binrel% HMul.hMul let21 let7)
  let let50 := (binrel% HMul.hMul let31 x3x5fminus)
  let let51 := (binrel% HMul.hMul let32 x3x5fplus)
  let let52 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd x1x5fminus let26))))))))
  let let53 := (binrel% HMul.hMul let19 let52)
  let let54 := (binrel% HMul.hMul let2 x6x5fplus)
  let let55 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let54 x6x5fminus)))))
  let let56 := (binrel% HMul.hMul let21 let55)
  let let57 := (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let36 let30))))))))
  let let58 := (binrel% GE.ge let57 let24)
  let let59 := (Not let58)
  let let60 := (binrel% LT.lt let57 let24)
  let let61 := (Rat.ofInt let55)
  let let62 := (Int.ofNat 3)
  let let63 := (Neg.neg let62)
  let let64 := (Int.ofNat 6)
  let let65 := (Neg.neg let64)
  let let66 := (binrel% HMul.hMul let63 x5x5fminus)
  let let67 := (binrel% HMul.hMul let62 x5x5fplus)
  let let68 := (binrel% HMul.hMul let62 x7x5fminus)
  let let69 := (binrel% HMul.hMul let63 x7x5fplus)
  let let70 := (Rat.ofInt (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x2x5fplus) (binrel% HMul.hMul let62 x2x5fminus)))))))))))
  let let71 := (Rat.ofInt let47)
  let let72 := (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x0x5fplus) (binrel% HMul.hMul let63 x0x5fminus))
  let let73 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x8x5fminus) (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let66 let72)))))
  let let74 := (binrel% HMul.hMul let63 x8x5fminus)
  let let75 := (binrel% HMul.hMul let62 x8x5fplus)
  let let76 := (Rat.ofInt (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x1x5fminus) let72)))))))))
  let let77 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x0x5fplus) (binrel% HMul.hMul let64 x0x5fminus)))))
  let let78 := (binrel% GT.gt let14 let11)
  let let79 := (Int.ofNat 5)
  let let80 := (Neg.neg let79)
  let let81 := (Int.ofNat 10)
  let let82 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let81) x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x3x5fplus) (binrel% HMul.hMul let79 x3x5fminus)))))))))))
  let let83 := (binrel% GE.ge let35 let1)
  let let84 := (Not let83)
  let let85 := (binrel% LT.lt let35 let1)
  let let86 := (Rat.ofInt (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let62 x2x5fplus) (binrel% HMul.hMul let63 x2x5fminus)))))))))
  let let87 := (binrel% LT.lt let19 let11)
  let let88 := (Rat.ofInt 0)
  let let89 := (binrel% GE.ge let41 let11)
  let let90 := (Not let89)
  let let91 := (binrel% LT.lt let41 let11)
  let let92 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let88 let88))))))))
  let let93 := (Not let90)
  let let94 := (Eq let93 let89)
  let let95 := (binrel% GE.ge let29 let1)
  let let96 := (Not let95)
  let let97 := (binrel% LT.lt let29 let1)
  let let98 := (Not let96)
  let let99 := (Eq let98 let95)
  let let100 := (binrel% GE.ge let47 let1)
  let let101 := (Not let100)
  let let102 := (Not let101)
  let let103 := (Eq let102 let100)
  let let104 := (binrel% HAdd.hAdd let40 x1x5fminus)
  let let105 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let25 let104))
  let let106 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 let105))))))
  let let107 := (binrel% GT.gt let21 let11)
  let let108 := (Not let9)
  let let109 := (Eq let108 let8)
  let let110 := (binrel% LE.le let47 let11)
  let let111 := (binrel% GE.ge let55 let1)
  let let112 := (Not let111)
  let let113 := (binrel% LE.le let55 let11)
  let let114 := (Eq let111 let111)
  let let115 := (binrel% LT.lt let55 let1)
  let let116 := (Eq let100 let102)
  let let117 := (binrel% LE.le let7 let11)
  let let118 := (Eq let8 let108)
  let let119 := (Eq let89 let93)
  let let120 := (binrel% GT.gt let12 let11)
  let let121 := (Eq let95 let98)
  let let122 := (binrel% LT.lt let47 let1)
  let let123 := (Eq let8 let8)
  let let124 := (binrel% LT.lt let16 let11)
  let let125 := (Eq let89 let89)
  let let126 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus let28)))))
  let let127 := (Eq let95 let95)
  let let128 := (Rat.ofInt let7)
  let let129 := (binrel% LE.le let29 let11)
  let let130 := (binrel% LE.le let41 let2)
  let let131 := (binrel% LE.le let35 let11)
  let let132 := (Eq let100 let100)
  let let133 := (Not True)
  let let134 := (Eq let83 let83)
  let let135 := (Not let112)
  let let136 := (Eq let135 let111)
  let let137 := (Not let84)
  let let138 := (Eq let137 let83)
  let let139 := (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let128 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let82 let86))))))))
  let let140 := (Eq let111 let135)
  let let141 := (Eq let83 let137)
  let let142 := (binrel% GE.ge let88 let88)
  let let143 := (binrel% HMul.hMul let2 x4x5fminus)
  let let144 := (binrel% HMul.hMul let32 x9x5fminus)
  let let145 := (binrel% HMul.hMul let31 x9x5fplus)
  let let146 := (binrel% LE.le let126 let11)
  let let147 := (binrel% GE.ge let106 let2)
  let let148 := (binrel% HMul.hMul let2 x4x5fplus)
  let let149 := (binrel% GE.ge let45 let1)
  let let150 := (binrel% GE.ge let38 let11)
  let let151 := (binrel% GE.ge let52 let2)
  let let152 := (Not let150)
  let let153 := (Not let149)
  let let154 := (Not let151)
  let let155 := (Or let95 (Or let83 (Or let152 (Or let89 (Or let153 (Or let100 (Or let8 (Or let154 let111))))))))
  let let156 := (Or let98 (Or let137 (Or let152 (Or let93 (Or let153 (Or let102 (Or let108 (Or let154 let135))))))))
  let let157 := (Not let115)
  let let158 := (binrel% LE.le let30 let13)
  let let159 := (And let120 let129)
  let let160 := (binrel% LE.le let36 let15)
  let let161 := (And let78 let131)
  let let162 := (binrel% LE.le let39 let17)
  let let163 := (And let124 let150)
  let let164 := (binrel% LE.le let42 let18)
  let let165 := (And let120 let130)
  let let166 := (binrel% LE.le let46 let20)
  let let167 := (And let87 let149)
  let let168 := (binrel% LT.lt let48 let22)
  let let169 := (And let107 let122)
  let let170 := (binrel% LT.lt let49 let22)
  let let171 := (And let107 let10)
  let let172 := (binrel% LE.le let53 let23)
  let let173 := (And let87 let151)
  let let174 := (binrel% LT.lt let56 let22)
  let let175 := (And let107 let115)
fun lean_r0 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let60 let59) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let56 let61) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let53 let70) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let48 let71) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let46 let73) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let42 let76) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let39 let77) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let78 True) => -- EVALUATE
fun lean_r9 : (Eq let36 let82) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let85 let84) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let30 let86) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let23 let12) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let87 True) => -- EVALUATE
fun lean_r15 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let17 let88) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let91 let90) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let15 let88) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let13 let88) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let92 let88) => -- THEORY_REWRITE_ARITH
fun lean_r21 : let94 => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let97 let96) => -- THEORY_REWRITE_ARITH
fun lean_r23 : let99 => -- THEORY_REWRITE_BOOL
fun lean_r24 : let103 => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let106 let52) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let107 True) => -- EVALUATE
fun lean_r27 : let109 => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let110 let101) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let18 let19) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let113 let112) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let114 True) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let115 let112) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let103 let116) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let117 let9) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let109 let118) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let94 let119) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let120 True) => -- EVALUATE
fun lean_r38 : (Eq let99 let121) => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let122 let101) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let123 True) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let124 True) => -- EVALUATE
fun lean_r42 : (Eq let125 True) => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq let126 let55) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let127 True) => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let49 let128) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let129 let96) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let130 let90) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let131 let84) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let132 True) => -- THEORY_REWRITE_BOOL
fun lean_r50 : (Eq let133 False) => -- THEORY_REWRITE_BOOL
fun lean_r51 : (Eq let134 True) => -- THEORY_REWRITE_BOOL
fun lean_r52 : let136 => -- THEORY_REWRITE_BOOL
fun lean_r53 : let138 => -- THEORY_REWRITE_BOOL
fun lean_r54 : (Eq let139 let88) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let136 let140) => -- THEORY_REWRITE_BOOL
fun lean_r56 : (Eq let138 let141) => -- THEORY_REWRITE_BOOL
fun lean_r57 : (Eq let142 True) => -- THEORY_REWRITE_ARITH
fun lean_a58 : (binrel% GE.ge x9x5fplus let11) =>
fun lean_a59 : (binrel% GE.ge x9x5fminus let11) =>
fun lean_a60 : (binrel% GE.ge x8x5fplus let11) =>
fun lean_a61 : (binrel% GE.ge x8x5fminus let11) =>
fun lean_a62 : (binrel% GE.ge x7x5fplus let11) =>
fun lean_a63 : (binrel% GE.ge x7x5fminus let11) =>
fun lean_a64 : (binrel% GE.ge x5x5fplus let11) =>
fun lean_a65 : (binrel% GE.ge x5x5fminus let11) =>
fun lean_a66 : (binrel% GE.ge x3x5fplus let11) =>
fun lean_a67 : (binrel% GE.ge x3x5fminus let11) =>
fun lean_a68 : (binrel% GE.ge x1x5fplus let11) =>
fun lean_a69 : (binrel% GE.ge x1x5fminus let11) =>
fun lean_a70 : (binrel% GE.ge x0x5fplus let11) =>
fun lean_a71 : (binrel% GE.ge x0x5fminus let11) =>
fun lean_a72 : (binrel% GE.ge x6x5fplus let11) =>
fun lean_a73 : (binrel% GE.ge x6x5fminus let11) =>
fun lean_a74 : (binrel% GE.ge x4x5fplus let11) =>
fun lean_a75 : (binrel% GE.ge x4x5fminus let11) =>
fun lean_a76 : (binrel% GE.ge x2x5fplus let11) =>
fun lean_a77 : (binrel% GE.ge x2x5fminus let11) =>
fun lean_a78 : let131 =>
fun lean_a79 : let130 =>
fun lean_a80 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x6x5fminus) (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd x1x5fplus (binrel% HMul.hMul let2 x1x5fminus)))))))))) let2) =>
fun lean_a81 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let44 x5x5fminus))))))) let11) =>
fun lean_a82 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x5x5fminus let37)))))) let11) =>
fun lean_a83 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let28 let105)))) let11) =>
fun lean_a84 : (binrel% LE.le (binrel% HAdd.hAdd let145 (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x3x5fplus) (binrel% HMul.hMul let32 x3x5fminus)))))))) let11) =>
fun lean_a85 : let129 =>
fun lean_a86 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x5x5fminus) let37)))))) let2) =>
fun lean_a87 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 let104)))))) let2) =>
fun lean_a88 : let117 =>
fun lean_a89 : (binrel% LE.le (binrel% HAdd.hAdd let145 (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x2x5fplus) x2x5fminus))))) let11) =>
fun lean_a90 : let146 =>
fun lean_a91 : let110 =>
fun lean_a92 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x3x5fminus let43)))))))))))) let11) =>
fun lean_a93 : let147 =>
fun lean_a94 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd x4x5fminus let37)))) let11) =>
fun lean_a95 : let149 =>
fun lean_a96 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let148 x4x5fminus))))) let11) =>
fun lean_a97 : let150 => by
have lean_s0 : (Or let98 (Or let137 (Or let152 (Or let93 (Or let153 (Or let102 (Or let108 (Or let154 (Or let135 False))))))))) :=
  (scope (fun lean_a98 : let96 =>
    (scope (fun lean_a99 : let84 =>
      (scope (fun lean_a100 : let150 =>
        (scope (fun lean_a101 : let90 =>
          (scope (fun lean_a102 : let149 =>
            (scope (fun lean_a103 : let101 =>
              (scope (fun lean_a104 : let9 =>
                (scope (fun lean_a105 : let151 =>
                  (scope (fun lean_a106 : let112 =>
                    let lean_s0 := by timed flipCongrArg lean_r43 [LE.le]
                    have lean_s1 : (Eq let11 let11) := by timed rfl
                    have lean_s2 : (Eq let146 let113) := by timed congr lean_s0 lean_s1
                    have lean_s3 : (Eq let146 let112) := by timed Eq.trans lean_s2 lean_r30
                    have lean_s4 : let112 := by timed eqResolve lean_a90 lean_s3
                    have lean_s5 : (Eq let112 let115) := by timed Eq.symm lean_r32
                    have lean_s6 : let115 := by timed eqResolve lean_s4 lean_s5
                    have lean_s7 : (Or let157 False) :=
                      (scope (fun lean_a105 : let115 =>
                        have lean_s7 : let107 := by timed trueElim lean_r26
                        have lean_s8 : let175 := by timed And.intro lean_s7 lean_a105
                        have lean_s9 : (Implies let175 let174) := by arithMulPos [let55, let1, let21], 0
                        have lean_s10 : let174 := by timed modusPonens lean_s8 lean_s9
                        have lean_s11 : let87 := by timed trueElim lean_r14
                        let lean_s12 := by timed flipCongrArg lean_r25 [GE.ge]
                        have lean_s13 : (Eq let2 let2) := by timed rfl
                        have lean_s14 : (Eq let147 let151) := by timed congr lean_s12 lean_s13
                        have lean_s15 : let151 := by timed eqResolve lean_a93 lean_s14
                        have lean_s16 : let173 := by timed And.intro lean_s11 lean_s15
                        have lean_s17 : (Implies let173 let172) := by arithMulNeg [let52, let2, let19], 3
                        have lean_s18 : let172 := by timed modusPonens lean_s16 lean_s17
                        have lean_s19 : let9 := by timed eqResolve lean_a88 lean_r34
                        have lean_s20 : (Eq let9 let10) := by timed Eq.symm lean_r0
                        have lean_s21 : let10 := by timed eqResolve lean_s19 lean_s20
                        have lean_s22 : let171 := by timed And.intro lean_s7 lean_s21
                        have lean_s23 : (Implies let171 let170) := by arithMulPos [let7, let1, let21], 0
                        have lean_s24 : let170 := by timed modusPonens lean_s22 lean_s23
                        have lean_s25 : let101 := by timed eqResolve lean_a91 lean_r28
                        have lean_s26 : (Eq let101 let122) := by timed Eq.symm lean_r39
                        have lean_s27 : let122 := by timed eqResolve lean_s25 lean_s26
                        have lean_s28 : let169 := by timed And.intro lean_s7 lean_s27
                        have lean_s29 : (Implies let169 let168) := by arithMulPos [let47, let1, let21], 0
                        have lean_s30 : let168 := by timed modusPonens lean_s28 lean_s29
                        have lean_s31 : let167 := by timed And.intro lean_s11 lean_a102
                        have lean_s32 : (Implies let167 let166) := by arithMulNeg [let45, let1, let19], 3
                        have lean_s33 : let166 := by timed modusPonens lean_s31 lean_s32
                        have lean_s34 : let120 := by timed trueElim lean_r37
                        have lean_s35 : let90 := by timed eqResolve lean_a79 lean_r47
                        have lean_s36 : (Eq let90 let91) := by timed Eq.symm lean_r17
                        have lean_s37 : let91 := by timed eqResolve lean_s35 lean_s36
                        have lean_s38 : let130 := by intTightUb lean_s37
                        have lean_s39 : let165 := by timed And.intro lean_s34 lean_s38
                        have lean_s40 : (Implies let165 let164) := by arithMulPos [let41, let2, let12], 1
                        have lean_s41 : let164 := by timed modusPonens lean_s39 lean_s40
                        have lean_s42 : let124 := by timed trueElim lean_r41
                        have lean_s43 : let163 := by timed And.intro lean_s42 lean_a100
                        have lean_s44 : (Implies let163 let162) := by arithMulNeg [let38, let11, let16], 3
                        have lean_s45 : let162 := by timed modusPonens lean_s43 lean_s44
                        have lean_s46 : let78 := by timed trueElim lean_r8
                        have lean_s47 : let84 := by timed eqResolve lean_a78 lean_r48
                        have lean_s48 : (Eq let84 let85) := by timed Eq.symm lean_r10
                        have lean_s49 : let85 := by timed eqResolve lean_s47 lean_s48
                        have lean_s50 : let131 := by intTightUb lean_s49
                        have lean_s51 : let161 := by timed And.intro lean_s46 lean_s50
                        have lean_s52 : (Implies let161 let160) := by arithMulPos [let35, let11, let14], 1
                        have lean_s53 : let160 := by timed modusPonens lean_s51 lean_s52
                        have lean_s54 : let96 := by timed eqResolve lean_a85 lean_r46
                        have lean_s55 : (Eq let96 let97) := by timed Eq.symm lean_r22
                        have lean_s56 : let97 := by timed eqResolve lean_s54 lean_s55
                        have lean_s57 : let129 := by intTightUb lean_s56
                        have lean_s58 : let159 := by timed And.intro lean_s34 lean_s57
                        have lean_s59 : (Implies let159 let158) := by arithMulPos [let29, let11, let12], 1
                        have lean_s60 : let158 := by timed modusPonens lean_s58 lean_s59
                        have lean_s61 : let60 := by sumBounds [lean_s10, lean_s18, lean_s24, lean_s30, lean_s33, lean_s41, lean_s45, lean_s53, lean_s60]
                        let lean_s62 := by timed congrHAdd lean_r9 lean_r11
                        let lean_s63 := by timed congrHAdd lean_r7 lean_s62
                        let lean_s64 := by timed congrHAdd lean_r6 lean_s63
                        let lean_s65 := by timed congrHAdd lean_r5 lean_s64
                        let lean_s66 := by timed congrHAdd lean_r4 lean_s65
                        let lean_s67 := by timed congrHAdd lean_r45 lean_s66
                        let lean_s68 := by timed congrHAdd lean_r3 lean_s67
                        have lean_s69 : (Eq let57 let139) := by timed congrHAdd lean_r2 lean_s68
                        have lean_s70 : (Eq let57 let88) := by timed Eq.trans lean_s69 lean_r54
                        let lean_s71 := by timed flipCongrArg lean_s70 [GE.ge]
                        let lean_s72 := by timed congrHAdd lean_r18 lean_r19
                        let lean_s73 := by timed congrHAdd lean_r16 lean_s72
                        let lean_s74 := by timed congrHAdd lean_r29 lean_s73
                        let lean_s75 := by timed congrHAdd lean_r15 lean_s74
                        let lean_s76 := by timed congrHAdd lean_r13 lean_s75
                        let lean_s77 := by timed congrHAdd lean_r13 lean_s76
                        let lean_s78 := by timed congrHAdd lean_r12 lean_s77
                        have lean_s79 : (Eq let24 let92) := by timed congrHAdd lean_r13 lean_s78
                        have lean_s80 : (Eq let24 let88) := by timed Eq.trans lean_s79 lean_r20
                        have lean_s81 : (Eq let58 let142) := by timed congr lean_s71 lean_s80
                        have lean_s82 : (Eq let58 True) := by timed Eq.trans lean_s81 lean_r57
                        have lean_s83 : (Eq let59 let133) := by timed flipCongrArg lean_s82 [Not]
                        have lean_s84 : (Eq let59 False) := by timed Eq.trans lean_s83 lean_r50
                        have lean_s85 : (Eq let60 False) := by timed Eq.trans lean_r1 lean_s84
                        show False from by timed eqResolve lean_s61 lean_s85
                      ))
                    have lean_s8 : let157 := by liftOrNToNeg lean_s7
                    have lean_s9 : (Eq let157 let135) := by timed flipCongrArg lean_r32 [Not]
                    have lean_s10 : (Eq let157 let111) := by timed Eq.trans lean_s9 lean_r52
                    have lean_s11 : let111 := by timed eqResolve lean_s8 lean_s10
                    have lean_s12 : (Eq let111 let157) := by timed Eq.symm lean_s10
                    have lean_s13 : let157 := by timed eqResolve lean_s11 lean_s12
                    show False from by timed contradiction lean_s6 lean_s13
  ))))))))))))))))))
have lean_s1 : (Not (And let96 (And let84 (And let150 (And let90 (And let149 (And let101 (And let9 (And let151 let112))))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let156 := by timed flipNotAnd lean_s1 [let96, let84, let150, let90, let149, let101, let9, let151, let112]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let127 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let121 let127) := by timed congr lean_s5 lean_r23
have lean_s7 : (Eq let121 True) := by timed Eq.trans lean_s6 lean_r44
have lean_s8 : (Eq let99 True) := by timed Eq.trans lean_r38 lean_s7
have lean_s9 : let99 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let134 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let141 let134) := by timed congr lean_s12 lean_r53
have lean_s14 : (Eq let141 True) := by timed Eq.trans lean_s13 lean_r51
have lean_s15 : (Eq let138 True) := by timed Eq.trans lean_r56 lean_s14
have lean_s16 : let138 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq let152 let152) := by timed rfl
let lean_s19 := by timed congr lean_s3 lean_s18
have lean_s20 : let125 := by timed rfl
let lean_s21 := by timed flipCongrArg lean_s20 [Eq]
have lean_s22 : (Eq let119 let125) := by timed congr lean_s21 lean_r21
have lean_s23 : (Eq let119 True) := by timed Eq.trans lean_s22 lean_r42
have lean_s24 : (Eq let94 True) := by timed Eq.trans lean_r36 lean_s23
have lean_s25 : let94 := by timed trueElim lean_s24
let lean_s26 := by timed congr lean_s3 lean_s25
have lean_s27 : (Eq let153 let153) := by timed rfl
let lean_s28 := by timed congr lean_s3 lean_s27
have lean_s29 : let132 := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [Eq]
have lean_s31 : (Eq let116 let132) := by timed congr lean_s30 lean_r24
have lean_s32 : (Eq let116 True) := by timed Eq.trans lean_s31 lean_r49
have lean_s33 : (Eq let103 True) := by timed Eq.trans lean_r33 lean_s32
have lean_s34 : let103 := by timed trueElim lean_s33
let lean_s35 := by timed congr lean_s3 lean_s34
have lean_s36 : let123 := by timed rfl
let lean_s37 := by timed flipCongrArg lean_s36 [Eq]
have lean_s38 : (Eq let118 let123) := by timed congr lean_s37 lean_r27
have lean_s39 : (Eq let118 True) := by timed Eq.trans lean_s38 lean_r40
have lean_s40 : (Eq let109 True) := by timed Eq.trans lean_r35 lean_s39
have lean_s41 : let109 := by timed trueElim lean_s40
let lean_s42 := by timed congr lean_s3 lean_s41
have lean_s43 : (Eq let154 let154) := by timed rfl
let lean_s44 := by timed congr lean_s3 lean_s43
have lean_s45 : let114 := by timed rfl
let lean_s46 := by timed flipCongrArg lean_s45 [Eq]
have lean_s47 : (Eq let140 let114) := by timed congr lean_s46 lean_r52
have lean_s48 : (Eq let140 True) := by timed Eq.trans lean_s47 lean_r31
have lean_s49 : (Eq let136 True) := by timed Eq.trans lean_r55 lean_s48
have lean_s50 : let136 := by timed trueElim lean_s49
let lean_s51 := by timed congr lean_s44 lean_s50
let lean_s52 := by timed congr lean_s42 lean_s51
let lean_s53 := by timed congr lean_s35 lean_s52
let lean_s54 := by timed congr lean_s28 lean_s53
let lean_s55 := by timed congr lean_s26 lean_s54
let lean_s56 := by timed congr lean_s19 lean_s55
let lean_s57 := by timed congr lean_s17 lean_s56
have lean_s58 : (Eq let156 let155) := by timed congr lean_s10 lean_s57
have lean_s59 : let155 := by timed eqResolve lean_s2 lean_s58
have lean_s60 : (Or let83 (Or let89 (Or let95 (Or let8 (Or let111 (Or let100 (Or let154 (Or let153 let152)))))))) := by permutateOr lean_s59, [1, 3, 0, 6, 8, 5, 7, 4, 2], (- 1)
let lean_s61 := by R2 lean_s60, lean_a97, let150, [(- 1), 0]
let lean_s62 := by R2 lean_s61, lean_a95, let149, [(- 1), 0]
let lean_s63 := by timed flipCongrArg lean_r25 [GE.ge]
have lean_s64 : (Eq let2 let2) := by timed rfl
have lean_s65 : (Eq let147 let151) := by timed congr lean_s63 lean_s64
have lean_s66 : let151 := by timed eqResolve lean_a93 lean_s65
let lean_s67 := by R2 lean_s62, lean_s66, let151, [(- 1), 0]
have lean_s68 : let101 := by timed eqResolve lean_a91 lean_r28
let lean_s69 := by R1 lean_s67, lean_s68, let100, [(- 1), 0]
let lean_s70 := by timed flipCongrArg lean_r43 [LE.le]
have lean_s71 : (Eq let11 let11) := by timed rfl
have lean_s72 : (Eq let146 let113) := by timed congr lean_s70 lean_s71
have lean_s73 : (Eq let146 let112) := by timed Eq.trans lean_s72 lean_r30
have lean_s74 : let112 := by timed eqResolve lean_a90 lean_s73
let lean_s75 := by R1 lean_s69, lean_s74, let111, [(- 1), 0]
have lean_s76 : let9 := by timed eqResolve lean_a88 lean_r34
let lean_s77 := by R1 lean_s75, lean_s76, let8, [(- 1), 0]
have lean_s78 : let96 := by timed eqResolve lean_a85 lean_r46
let lean_s79 := by R1 lean_s77, lean_s78, let95, [(- 1), 0]
have lean_s80 : let90 := by timed eqResolve lean_a79 lean_r47
let lean_s81 := by R1 lean_s79, lean_s80, let89, [(- 1), 0]
have lean_s82 : let84 := by timed eqResolve lean_a78 lean_r48
exact (show False from by R1 lean_s81, lean_s82, let83, [0, 0])


