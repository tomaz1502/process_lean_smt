open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x9x5fplus : Int}
variable {x9x5fminus : Int}
variable {x8x5fplus : Int}
variable {x8x5fminus : Int}
variable {x4x5fplus : Int}
variable {x4x5fminus : Int}
variable {x3x5fplus : Int}
variable {x3x5fminus : Int}
variable {x4x5fminus : Int}
variable {x3x5fplus : Int}
variable {x7x5fminus : Int}
variable {x2x5fplus : Int}
variable {x2x5fminus : Int}
variable {x7x5fplus : Int}
variable {x2x5fminus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x6x5fplus : Int}
variable {x5x5fminus : Int}
variable {x6x5fminus : Int}
variable {x1x5fplus : Int}
variable {x5x5fplus : Int}
variable {x1x5fminus : Int}
variable {x7x5fplus : Int}
variable {x4x5fplus : Int}
variable {x2x5fplus : Int}
variable {x8x5fplus : Int}
variable {x9x5fminus : Int}
variable {x9x5fplus : Int}
variable {x1x5fplus : Int}
variable {x0x5fminus : Int}
variable {x3x5fminus : Int}
variable {x7x5fminus : Int}
variable {x0x5fplus : Int}
variable {x8x5fminus : Int}
variable {x1x5fminus : Int}
variable {x6x5fminus : Int}
variable {x6x5fplus : Int}

theorem th0 :
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x8x5fplus)
  let let4 := (binrel% HMul.hMul let2 x3x5fminus)
  let let5 := (binrel% HMul.hMul let2 x2x5fplus)
  let let6 := (binrel% HMul.hMul let2 x5x5fminus)
  let let7 := (binrel% HMul.hMul let2 x6x5fminus)
  let let8 := (binrel% HMul.hMul let2 x7x5fminus)
  let let9 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let3 x8x5fminus)))))))))))
  let let10 := (binrel% GE.ge let9 let1)
  let let11 := (Not let10)
  let let12 := (binrel% LT.lt let9 let1)
  let let13 := (Int.ofNat 0)
  let let14 := (Rat.ofInt 2)
  let let15 := (Neg.neg let14)
  let let16 := (binrel% LT.lt let15 let13)
  let let17 := (Rat.ofInt let9)
  let let18 := (Rat.ofInt 1)
  let let19 := (binrel% HMul.hMul let18 let9)
  let let20 := (Int.ofNat 2)
  let let21 := (Neg.neg let20)
  let let22 := (binrel% HMul.hMul let21 x6x5fminus)
  let let23 := (binrel% HMul.hMul let20 x6x5fplus)
  let let24 := (Rat.ofInt (binrel% HAdd.hAdd let23 let22))
  let let25 := (binrel% HAdd.hAdd x6x5fplus let7)
  let let26 := (binrel% HMul.hMul let14 let25)
  let let27 := (binrel% HMul.hMul let20 x5x5fminus)
  let let28 := (binrel% HMul.hMul let21 x5x5fplus)
  let let29 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x1x5fminus) (binrel% HAdd.hAdd let28 let27))))
  let let30 := (binrel% HMul.hMul let2 x1x5fminus)
  let let31 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd x5x5fplus let6)))
  let let32 := (binrel% HMul.hMul let15 let31)
  let let33 := (binrel% HMul.hMul let2 x2x5fminus)
  let let34 := (binrel% HAdd.hAdd x2x5fplus let33)
  let let35 := (binrel% HMul.hMul let2 x6x5fplus)
  let let36 := (binrel% HMul.hMul let2 x7x5fplus)
  let let37 := (Rat.ofInt (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x6x5fminus let34)))))
  let let38 := (binrel% HAdd.hAdd let5 x2x5fminus)
  let let39 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let7 let38))))
  let let40 := (Neg.neg let18)
  let let41 := (binrel% HMul.hMul let40 let39)
  let let42 := (Rat.ofInt 0)
  let let43 := (binrel% HMul.hMul let2 x8x5fminus)
  let let44 := (binrel% HAdd.hAdd x8x5fplus let43)
  let let45 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 let44))))
  let let46 := (Rat.ofInt let45)
  let let47 := (binrel% HMul.hMul let2 x9x5fminus)
  let let48 := (binrel% HMul.hMul let20 x6x5fminus)
  let let49 := (binrel% HMul.hMul let21 x6x5fplus)
  let let50 := (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 let38))))
  let let51 := (Rat.ofInt let50)
  let let52 := (binrel% HMul.hMul let2 x3x5fplus)
  let let53 := (binrel% HMul.hMul let2 x9x5fplus)
  let let54 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let52 x3x5fminus)))))))
  let let55 := (Rat.ofInt let54)
  let let56 := (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let29 let37))))))
  let let57 := (binrel% HMul.hMul let18 let13)
  let let58 := (binrel% HMul.hMul let18 let1)
  let let59 := (binrel% HMul.hMul let14 let2)
  let let60 := (binrel% GT.gt let14 let13)
  let let61 := (binrel% HMul.hMul let15 let13)
  let let62 := (binrel% LT.lt let40 let13)
  let let63 := (binrel% HAdd.hAdd x1x5fplus let30)
  let let64 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 let63))
  let let65 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x9x5fminus let34))))
  let let66 := (binrel% GE.ge let65 let13)
  let let67 := (binrel% LE.le let50 let13)
  let let68 := (binrel% GT.gt let18 let13)
  let let69 := (binrel% HMul.hMul let2 x5x5fplus)
  let let70 := (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x3x5fminus let44))))))))))
  let let71 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x3x5fminus let34))))))))))
  let let72 := (binrel% HAdd.hAdd x3x5fplus let4)
  let let73 := (binrel% HMul.hMul let2 x1x5fplus)
  let let74 := (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus let72))))))
  let let75 := (binrel% HAdd.hAdd let73 x1x5fminus)
  let let76 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus let75))
  let let77 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let4 let76))))
  let let78 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let43 let64))
  let let79 := (binrel% GE.ge let54 let1)
  let let80 := (Eq let79 let79)
  let let81 := (binrel% GE.ge let45 let1)
  let let82 := (Not let81)
  let let83 := (binrel% LE.le let45 let13)
  let let84 := (Not let79)
  let let85 := (Not let84)
  let let86 := (Eq let85 let79)
  let let87 := (Not let82)
  let let88 := (Eq let87 let81)
  let let89 := (binrel% HMul.hMul let18 let45)
  let let90 := (binrel% GE.ge let70 let13)
  let let91 := (Eq let10 let10)
  let let92 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let48 let38))))
  let let93 := (Not let11)
  let let94 := (Eq let93 let10)
  let let95 := (binrel% GE.ge let74 let13)
  let let96 := (binrel% HSub.hSub x6x5fplus x6x5fminus)
  let let97 := (binrel% GE.ge let42 let42)
  let let98 := (binrel% LT.lt let54 let1)
  let let99 := (binrel% GE.ge let25 let13)
  let let100 := (Not let99)
  let let101 := (Not let100)
  let let102 := (Eq let99 let101)
  let let103 := (Eq let101 let99)
  let let104 := (Eq let79 let85)
  let let105 := (Eq let81 let87)
  let let106 := (binrel% LT.lt let45 let1)
  let let107 := (Eq let10 let93)
  let let108 := (Eq let99 let99)
  let let109 := (binrel% HMul.hMul let18 let54)
  let let110 := (binrel% LE.le let54 let13)
  let let111 := (binrel% HMul.hMul let40 let13)
  let let112 := (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd let61 let111))))))
  let let113 := (binrel% HMul.hMul let40 let65)
  let let114 := (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let32 let41))))))
  let let115 := (binrel% GE.ge let114 let112)
  let let116 := (Not let115)
  let let117 := (binrel% LT.lt let114 let112)
  let let118 := (Eq let81 let81)
  let let119 := (Not let110)
  let let120 := (binrel% GT.gt let54 let13)
  let let121 := (Eq let120 let119)
  let let122 := (binrel% LE.le let25 let2)
  let let123 := (Not True)
  let let124 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let42 let42))))))
  let let125 := (binrel% LT.lt let25 let13)
  let let126 := (binrel% LE.le let96 let2)
  let let127 := (binrel% HMul.hMul let2 x4x5fminus)
  let let128 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let2 x0x5fminus))
  let let129 := (binrel% HMul.hMul let2 x4x5fplus)
  let let130 := (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x0x5fplus) x0x5fminus)
  let let131 := (binrel% LE.le let92 let13)
  let let132 := (binrel% LE.le let78 let13)
  let let133 := (binrel% HMul.hMul let21 x9x5fminus)
  let let134 := (binrel% HMul.hMul let20 x9x5fplus)
  let let135 := (binrel% GE.ge let71 let13)
  let let136 := (binrel% GE.ge let77 let13)
  let let137 := (binrel% GE.ge let39 let13)
  let let138 := (binrel% GE.ge let64 let13)
  let let139 := (binrel% GE.ge let31 let13)
  let let140 := (Not let139)
  let let141 := (Not let137)
  let let142 := (Not let66)
  let let143 := (Or let141 (Or let140 (Or let99 (Or let81 (Or let10 (Or let142 let79))))))
  let let144 := (Or let141 (Or let140 (Or let101 (Or let87 (Or let93 (Or let142 let85))))))
  let let145 := (binrel% LE.le let41 let111)
  let let146 := (And let62 let137)
  let let147 := (binrel% LE.le let32 let61)
  let let148 := (And let16 let139)
  let let149 := (binrel% LE.le let26 let59)
  let let150 := (And let60 let122)
  let let151 := (binrel% LT.lt let89 let58)
  let let152 := (And let68 let106)
  let let153 := (binrel% LT.lt let19 let58)
  let let154 := (And let68 let12)
  let let155 := (binrel% LE.le let113 let111)
  let let156 := (And let62 let66)
  let let157 := (binrel% LE.le let109 let57)
  let let158 := (And let68 let110)
(Eq let12 let11) → (Eq let16 True) → (Eq let19 let17) → (Eq let26 let24) → (Eq let32 let29) → (Eq let41 let37) → (Eq let56 let42) → (Eq let57 let42) → (Eq let58 let18) → (Eq let59 let15) → (Eq let60 True) → (Eq let61 let42) → (Eq let62 True) → (Eq let64 let31) → (Eq let67 let66) → (Eq let68 True) → (Eq let71 let70) → (Eq let77 let74) → (Eq let78 let45) → (Eq let80 True) → (Eq let83 let82) → let86 → let88 → (Eq let89 let46) → (Eq let90 let11) → (Eq let91 True) → (Eq let92 let50) → let94 → (Eq let95 let84) → (Eq let96 let25) → (Eq let97 True) → (Eq let98 let84) → (Eq let103 let102) → (Eq let86 let104) → (Eq let88 let105) → (Eq let106 let82) → (Eq let94 let107) → (Eq let108 True) → (Eq let109 let55) → (Eq let110 let84) → (Eq let117 let116) → (Eq let118 True) → let121 → (Eq let113 let51) → (Eq let122 let100) → (Eq let123 False) → let103 → (Eq let124 let42) → (Eq let125 let100) → (Eq let111 let42) → (binrel% GE.ge x7x5fplus let13) → (binrel% GE.ge x7x5fminus let13) → (binrel% GE.ge x1x5fplus let13) → (binrel% GE.ge x1x5fminus let13) → (binrel% GE.ge x6x5fplus let13) → (binrel% GE.ge x6x5fminus let13) → (binrel% GE.ge x9x5fplus let13) → (binrel% GE.ge x9x5fminus let13) → (binrel% GE.ge x5x5fplus let13) → (binrel% GE.ge x5x5fminus let13) → (binrel% GE.ge x4x5fplus let13) → (binrel% GE.ge x4x5fminus let13) → (binrel% GE.ge x2x5fplus let13) → (binrel% GE.ge x2x5fminus let13) → (binrel% GE.ge x3x5fplus let13) → (binrel% GE.ge x3x5fminus let13) → (binrel% GE.ge x0x5fplus let13) → (binrel% GE.ge x0x5fminus let13) → (binrel% GE.ge x8x5fplus let13) → (binrel% GE.ge x8x5fminus let13) → (binrel% LE.le (binrel% HSub.hSub x7x5fplus x7x5fminus) let13) → (binrel% LE.le (binrel% HSub.hSub x1x5fplus x1x5fminus) let13) → let126 → (binrel% GE.ge (binrel% HSub.hSub x5x5fplus x5x5fminus) let13) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let127 let76)))))))))) let13) → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x0x5fplus) (binrel% HMul.hMul let20 x0x5fminus)))))))))) let13) → (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd x1x5fminus let128)))))))) let13) → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let129 (binrel% HAdd.hAdd x4x5fminus let34)))))))) let13) → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let30 let130)))))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let4 let128)))))))) let2) → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let127 let75)))))) let13) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x0x5fplus) (binrel% HMul.hMul let21 x0x5fminus)))))))) let13) → (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x3x5fminus) (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let33 let63)))))) let13) → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 let72)))) let13) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x7x5fminus) (binrel% HAdd.hAdd x4x5fplus let127))))) let2) → let131 → let132 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x3x5fplus) (binrel% HMul.hMul let20 x3x5fminus)))) let1) → (binrel% LE.le (binrel% HAdd.hAdd let134 (binrel% HAdd.hAdd let133 let63)) let2) → let135 → (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd x1x5fminus let130)))))))) let13) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 let38)))))))) let2) → (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus let130)))))) let1) → let136 → (binrel% GE.ge (binrel% HAdd.hAdd let134 (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 let75)))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd let134 (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let129 (binrel% HAdd.hAdd x4x5fminus let75)))))) let13) → (binrel% GE.ge (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let33 let75)))) let1) → let137 → let138 → (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let7 let75)) let13) → False :=
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x8x5fplus)
  let let4 := (binrel% HMul.hMul let2 x3x5fminus)
  let let5 := (binrel% HMul.hMul let2 x2x5fplus)
  let let6 := (binrel% HMul.hMul let2 x5x5fminus)
  let let7 := (binrel% HMul.hMul let2 x6x5fminus)
  let let8 := (binrel% HMul.hMul let2 x7x5fminus)
  let let9 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let3 x8x5fminus)))))))))))
  let let10 := (binrel% GE.ge let9 let1)
  let let11 := (Not let10)
  let let12 := (binrel% LT.lt let9 let1)
  let let13 := (Int.ofNat 0)
  let let14 := (Rat.ofInt 2)
  let let15 := (Neg.neg let14)
  let let16 := (binrel% LT.lt let15 let13)
  let let17 := (Rat.ofInt let9)
  let let18 := (Rat.ofInt 1)
  let let19 := (binrel% HMul.hMul let18 let9)
  let let20 := (Int.ofNat 2)
  let let21 := (Neg.neg let20)
  let let22 := (binrel% HMul.hMul let21 x6x5fminus)
  let let23 := (binrel% HMul.hMul let20 x6x5fplus)
  let let24 := (Rat.ofInt (binrel% HAdd.hAdd let23 let22))
  let let25 := (binrel% HAdd.hAdd x6x5fplus let7)
  let let26 := (binrel% HMul.hMul let14 let25)
  let let27 := (binrel% HMul.hMul let20 x5x5fminus)
  let let28 := (binrel% HMul.hMul let21 x5x5fplus)
  let let29 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x1x5fminus) (binrel% HAdd.hAdd let28 let27))))
  let let30 := (binrel% HMul.hMul let2 x1x5fminus)
  let let31 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd x5x5fplus let6)))
  let let32 := (binrel% HMul.hMul let15 let31)
  let let33 := (binrel% HMul.hMul let2 x2x5fminus)
  let let34 := (binrel% HAdd.hAdd x2x5fplus let33)
  let let35 := (binrel% HMul.hMul let2 x6x5fplus)
  let let36 := (binrel% HMul.hMul let2 x7x5fplus)
  let let37 := (Rat.ofInt (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x6x5fminus let34)))))
  let let38 := (binrel% HAdd.hAdd let5 x2x5fminus)
  let let39 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let7 let38))))
  let let40 := (Neg.neg let18)
  let let41 := (binrel% HMul.hMul let40 let39)
  let let42 := (Rat.ofInt 0)
  let let43 := (binrel% HMul.hMul let2 x8x5fminus)
  let let44 := (binrel% HAdd.hAdd x8x5fplus let43)
  let let45 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 let44))))
  let let46 := (Rat.ofInt let45)
  let let47 := (binrel% HMul.hMul let2 x9x5fminus)
  let let48 := (binrel% HMul.hMul let20 x6x5fminus)
  let let49 := (binrel% HMul.hMul let21 x6x5fplus)
  let let50 := (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 let38))))
  let let51 := (Rat.ofInt let50)
  let let52 := (binrel% HMul.hMul let2 x3x5fplus)
  let let53 := (binrel% HMul.hMul let2 x9x5fplus)
  let let54 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let52 x3x5fminus)))))))
  let let55 := (Rat.ofInt let54)
  let let56 := (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let29 let37))))))
  let let57 := (binrel% HMul.hMul let18 let13)
  let let58 := (binrel% HMul.hMul let18 let1)
  let let59 := (binrel% HMul.hMul let14 let2)
  let let60 := (binrel% GT.gt let14 let13)
  let let61 := (binrel% HMul.hMul let15 let13)
  let let62 := (binrel% LT.lt let40 let13)
  let let63 := (binrel% HAdd.hAdd x1x5fplus let30)
  let let64 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 let63))
  let let65 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd x9x5fminus let34))))
  let let66 := (binrel% GE.ge let65 let13)
  let let67 := (binrel% LE.le let50 let13)
  let let68 := (binrel% GT.gt let18 let13)
  let let69 := (binrel% HMul.hMul let2 x5x5fplus)
  let let70 := (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x3x5fminus let44))))))))))
  let let71 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x3x5fminus let34))))))))))
  let let72 := (binrel% HAdd.hAdd x3x5fplus let4)
  let let73 := (binrel% HMul.hMul let2 x1x5fplus)
  let let74 := (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus let72))))))
  let let75 := (binrel% HAdd.hAdd let73 x1x5fminus)
  let let76 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus let75))
  let let77 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let4 let76))))
  let let78 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let43 let64))
  let let79 := (binrel% GE.ge let54 let1)
  let let80 := (Eq let79 let79)
  let let81 := (binrel% GE.ge let45 let1)
  let let82 := (Not let81)
  let let83 := (binrel% LE.le let45 let13)
  let let84 := (Not let79)
  let let85 := (Not let84)
  let let86 := (Eq let85 let79)
  let let87 := (Not let82)
  let let88 := (Eq let87 let81)
  let let89 := (binrel% HMul.hMul let18 let45)
  let let90 := (binrel% GE.ge let70 let13)
  let let91 := (Eq let10 let10)
  let let92 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let48 let38))))
  let let93 := (Not let11)
  let let94 := (Eq let93 let10)
  let let95 := (binrel% GE.ge let74 let13)
  let let96 := (binrel% HSub.hSub x6x5fplus x6x5fminus)
  let let97 := (binrel% GE.ge let42 let42)
  let let98 := (binrel% LT.lt let54 let1)
  let let99 := (binrel% GE.ge let25 let13)
  let let100 := (Not let99)
  let let101 := (Not let100)
  let let102 := (Eq let99 let101)
  let let103 := (Eq let101 let99)
  let let104 := (Eq let79 let85)
  let let105 := (Eq let81 let87)
  let let106 := (binrel% LT.lt let45 let1)
  let let107 := (Eq let10 let93)
  let let108 := (Eq let99 let99)
  let let109 := (binrel% HMul.hMul let18 let54)
  let let110 := (binrel% LE.le let54 let13)
  let let111 := (binrel% HMul.hMul let40 let13)
  let let112 := (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd let61 let111))))))
  let let113 := (binrel% HMul.hMul let40 let65)
  let let114 := (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let32 let41))))))
  let let115 := (binrel% GE.ge let114 let112)
  let let116 := (Not let115)
  let let117 := (binrel% LT.lt let114 let112)
  let let118 := (Eq let81 let81)
  let let119 := (Not let110)
  let let120 := (binrel% GT.gt let54 let13)
  let let121 := (Eq let120 let119)
  let let122 := (binrel% LE.le let25 let2)
  let let123 := (Not True)
  let let124 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let42 let42))))))
  let let125 := (binrel% LT.lt let25 let13)
  let let126 := (binrel% LE.le let96 let2)
  let let127 := (binrel% HMul.hMul let2 x4x5fminus)
  let let128 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let2 x0x5fminus))
  let let129 := (binrel% HMul.hMul let2 x4x5fplus)
  let let130 := (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x0x5fplus) x0x5fminus)
  let let131 := (binrel% LE.le let92 let13)
  let let132 := (binrel% LE.le let78 let13)
  let let133 := (binrel% HMul.hMul let21 x9x5fminus)
  let let134 := (binrel% HMul.hMul let20 x9x5fplus)
  let let135 := (binrel% GE.ge let71 let13)
  let let136 := (binrel% GE.ge let77 let13)
  let let137 := (binrel% GE.ge let39 let13)
  let let138 := (binrel% GE.ge let64 let13)
  let let139 := (binrel% GE.ge let31 let13)
  let let140 := (Not let139)
  let let141 := (Not let137)
  let let142 := (Not let66)
  let let143 := (Or let141 (Or let140 (Or let99 (Or let81 (Or let10 (Or let142 let79))))))
  let let144 := (Or let141 (Or let140 (Or let101 (Or let87 (Or let93 (Or let142 let85))))))
  let let145 := (binrel% LE.le let41 let111)
  let let146 := (And let62 let137)
  let let147 := (binrel% LE.le let32 let61)
  let let148 := (And let16 let139)
  let let149 := (binrel% LE.le let26 let59)
  let let150 := (And let60 let122)
  let let151 := (binrel% LT.lt let89 let58)
  let let152 := (And let68 let106)
  let let153 := (binrel% LT.lt let19 let58)
  let let154 := (And let68 let12)
  let let155 := (binrel% LE.le let113 let111)
  let let156 := (And let62 let66)
  let let157 := (binrel% LE.le let109 let57)
  let let158 := (And let68 let110)
fun lean_r0 : (Eq let12 let11) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let16 True) => -- EVALUATE
fun lean_r2 : (Eq let19 let17) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let26 let24) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let32 let29) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let41 let37) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let56 let42) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let57 let42) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let58 let18) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let59 let15) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let60 True) => -- EVALUATE
fun lean_r11 : (Eq let61 let42) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let62 True) => -- EVALUATE
fun lean_r13 : (Eq let64 let31) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let68 True) => -- EVALUATE
fun lean_r16 : (Eq let71 let70) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let77 let74) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let78 let45) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let80 True) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let83 let82) => -- THEORY_REWRITE_ARITH
fun lean_r21 : let86 => -- THEORY_REWRITE_BOOL
fun lean_r22 : let88 => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let89 let46) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let90 let11) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let91 True) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let92 let50) => -- THEORY_REWRITE_ARITH
fun lean_r27 : let94 => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let95 let84) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let96 let25) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let97 True) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let98 let84) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let103 let102) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let86 let104) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let88 let105) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let106 let82) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let94 let107) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let108 True) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let109 let55) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let110 let84) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let117 let116) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let118 True) => -- THEORY_REWRITE_BOOL
fun lean_r42 : let121 => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let113 let51) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let122 let100) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let123 False) => -- THEORY_REWRITE_BOOL
fun lean_r46 : let103 => -- THEORY_REWRITE_BOOL
fun lean_r47 : (Eq let124 let42) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let125 let100) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let111 let42) => -- THEORY_REWRITE_ARITH
fun lean_a50 : (binrel% GE.ge x7x5fplus let13) =>
fun lean_a51 : (binrel% GE.ge x7x5fminus let13) =>
fun lean_a52 : (binrel% GE.ge x1x5fplus let13) =>
fun lean_a53 : (binrel% GE.ge x1x5fminus let13) =>
fun lean_a54 : (binrel% GE.ge x6x5fplus let13) =>
fun lean_a55 : (binrel% GE.ge x6x5fminus let13) =>
fun lean_a56 : (binrel% GE.ge x9x5fplus let13) =>
fun lean_a57 : (binrel% GE.ge x9x5fminus let13) =>
fun lean_a58 : (binrel% GE.ge x5x5fplus let13) =>
fun lean_a59 : (binrel% GE.ge x5x5fminus let13) =>
fun lean_a60 : (binrel% GE.ge x4x5fplus let13) =>
fun lean_a61 : (binrel% GE.ge x4x5fminus let13) =>
fun lean_a62 : (binrel% GE.ge x2x5fplus let13) =>
fun lean_a63 : (binrel% GE.ge x2x5fminus let13) =>
fun lean_a64 : (binrel% GE.ge x3x5fplus let13) =>
fun lean_a65 : (binrel% GE.ge x3x5fminus let13) =>
fun lean_a66 : (binrel% GE.ge x0x5fplus let13) =>
fun lean_a67 : (binrel% GE.ge x0x5fminus let13) =>
fun lean_a68 : (binrel% GE.ge x8x5fplus let13) =>
fun lean_a69 : (binrel% GE.ge x8x5fminus let13) =>
fun lean_a70 : (binrel% LE.le (binrel% HSub.hSub x7x5fplus x7x5fminus) let13) =>
fun lean_a71 : (binrel% LE.le (binrel% HSub.hSub x1x5fplus x1x5fminus) let13) =>
fun lean_a72 : let126 =>
fun lean_a73 : (binrel% GE.ge (binrel% HSub.hSub x5x5fplus x5x5fminus) let13) =>
fun lean_a74 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let127 let76)))))))))) let13) =>
fun lean_a75 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x0x5fplus) (binrel% HMul.hMul let20 x0x5fminus)))))))))) let13) =>
fun lean_a76 : (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd x1x5fminus let128)))))))) let13) =>
fun lean_a77 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let129 (binrel% HAdd.hAdd x4x5fminus let34)))))))) let13) =>
fun lean_a78 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let30 let130)))))))) let1) =>
fun lean_a79 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let4 let128)))))))) let2) =>
fun lean_a80 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let127 let75)))))) let13) =>
fun lean_a81 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x0x5fplus) (binrel% HMul.hMul let21 x0x5fminus)))))))) let13) =>
fun lean_a82 : (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x3x5fminus) (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let33 let63)))))) let13) =>
fun lean_a83 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 let72)))) let13) =>
fun lean_a84 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd (binrel% HMul.hMul let20 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x7x5fminus) (binrel% HAdd.hAdd x4x5fplus let127))))) let2) =>
fun lean_a85 : let131 =>
fun lean_a86 : let132 =>
fun lean_a87 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd (binrel% HMul.hMul let21 x3x5fplus) (binrel% HMul.hMul let20 x3x5fminus)))) let1) =>
fun lean_a88 : (binrel% LE.le (binrel% HAdd.hAdd let134 (binrel% HAdd.hAdd let133 let63)) let2) =>
fun lean_a89 : let135 =>
fun lean_a90 : (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd x1x5fminus let130)))))))) let13) =>
fun lean_a91 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 let38)))))))) let2) =>
fun lean_a92 : (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x2x5fminus let130)))))) let1) =>
fun lean_a93 : let136 =>
fun lean_a94 : (binrel% GE.ge (binrel% HAdd.hAdd let134 (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let6 let75)))))) let1) =>
fun lean_a95 : (binrel% GE.ge (binrel% HAdd.hAdd let134 (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let129 (binrel% HAdd.hAdd x4x5fminus let75)))))) let13) =>
fun lean_a96 : (binrel% GE.ge (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let33 let75)))) let1) =>
fun lean_a97 : let137 =>
fun lean_a98 : let138 =>
fun lean_a99 : (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let7 let75)) let13) => by
have lean_s0 : (Or let141 (Or let140 (Or let101 (Or let87 (Or let93 (Or let142 (Or let85 False))))))) :=
  (scope (fun lean_a100 : let137 =>
    (scope (fun lean_a101 : let139 =>
      (scope (fun lean_a102 : let100 =>
        (scope (fun lean_a103 : let82 =>
          (scope (fun lean_a104 : let11 =>
            (scope (fun lean_a105 : let66 =>
              (scope (fun lean_a106 : let84 =>
                let lean_s0 := by timed flipCongrArg lean_r17 [GE.ge]
                have lean_s1 : (Eq let13 let13) := by timed rfl
                have lean_s2 : (Eq let136 let95) := by timed congr lean_s0 lean_s1
                have lean_s3 : (Eq let136 let84) := by timed Eq.trans lean_s2 lean_r28
                have lean_s4 : let84 := by timed eqResolve lean_a93 lean_s3
                have lean_s5 : (Eq let84 let98) := by timed Eq.symm lean_r31
                have lean_s6 : let98 := by timed eqResolve lean_s4 lean_s5
                have lean_s7 : let110 := by intTightUb lean_s6
                have lean_s8 : (Or let119 False) :=
                  (scope (fun lean_a106 : let110 =>
                    have lean_s8 : let68 := by timed trueElim lean_r15
                    have lean_s9 : let158 := by timed And.intro lean_s8 lean_a106
                    have lean_s10 : (Implies let158 let157) := by arithMulPos [let54, let13, let18], 1
                    have lean_s11 : let157 := by timed modusPonens lean_s9 lean_s10
                    have lean_s12 : let62 := by timed trueElim lean_r12
                    let lean_s13 := by timed flipCongrArg lean_r26 [LE.le]
                    have lean_s14 : (Eq let131 let67) := by timed congr lean_s13 lean_s1
                    have lean_s15 : (Eq let131 let66) := by timed Eq.trans lean_s14 lean_r14
                    have lean_s16 : let66 := by timed eqResolve lean_a85 lean_s15
                    have lean_s17 : let156 := by timed And.intro lean_s12 lean_s16
                    have lean_s18 : (Implies let156 let155) := by arithMulNeg [let65, let13, let40], 3
                    have lean_s19 : let155 := by timed modusPonens lean_s17 lean_s18
                    let lean_s20 := by timed flipCongrArg lean_r16 [GE.ge]
                    have lean_s21 : (Eq let135 let90) := by timed congr lean_s20 lean_s1
                    have lean_s22 : (Eq let135 let11) := by timed Eq.trans lean_s21 lean_r24
                    have lean_s23 : let11 := by timed eqResolve lean_a89 lean_s22
                    have lean_s24 : (Eq let11 let12) := by timed Eq.symm lean_r0
                    have lean_s25 : let12 := by timed eqResolve lean_s23 lean_s24
                    have lean_s26 : let154 := by timed And.intro lean_s8 lean_s25
                    have lean_s27 : (Implies let154 let153) := by arithMulPos [let9, let1, let18], 0
                    have lean_s28 : let153 := by timed modusPonens lean_s26 lean_s27
                    let lean_s29 := by timed flipCongrArg lean_r18 [LE.le]
                    have lean_s30 : (Eq let132 let83) := by timed congr lean_s29 lean_s1
                    have lean_s31 : (Eq let132 let82) := by timed Eq.trans lean_s30 lean_r20
                    have lean_s32 : let82 := by timed eqResolve lean_a86 lean_s31
                    have lean_s33 : (Eq let82 let106) := by timed Eq.symm lean_r35
                    have lean_s34 : let106 := by timed eqResolve lean_s32 lean_s33
                    have lean_s35 : let152 := by timed And.intro lean_s8 lean_s34
                    have lean_s36 : (Implies let152 let151) := by arithMulPos [let45, let1, let18], 0
                    have lean_s37 : let151 := by timed modusPonens lean_s35 lean_s36
                    have lean_s38 : let60 := by timed trueElim lean_r10
                    let lean_s39 := by timed flipCongrArg lean_r29 [LE.le]
                    have lean_s40 : (Eq let2 let2) := by timed rfl
                    have lean_s41 : (Eq let126 let122) := by timed congr lean_s39 lean_s40
                    have lean_s42 : (Eq let126 let100) := by timed Eq.trans lean_s41 lean_r44
                    have lean_s43 : let100 := by timed eqResolve lean_a72 lean_s42
                    have lean_s44 : (Eq let100 let125) := by timed Eq.symm lean_r48
                    have lean_s45 : let125 := by timed eqResolve lean_s43 lean_s44
                    have lean_s46 : let122 := by intTightUb lean_s45
                    have lean_s47 : let150 := by timed And.intro lean_s38 lean_s46
                    have lean_s48 : (Implies let150 let149) := by arithMulPos [let25, let2, let14], 1
                    have lean_s49 : let149 := by timed modusPonens lean_s47 lean_s48
                    have lean_s50 : let16 := by timed trueElim lean_r1
                    let lean_s51 := by timed flipCongrArg lean_r13 [GE.ge]
                    have lean_s52 : (Eq let138 let139) := by timed congr lean_s51 lean_s1
                    have lean_s53 : let139 := by timed eqResolve lean_a98 lean_s52
                    have lean_s54 : let148 := by timed And.intro lean_s50 lean_s53
                    have lean_s55 : (Implies let148 let147) := by arithMulNeg [let31, let13, let15], 3
                    have lean_s56 : let147 := by timed modusPonens lean_s54 lean_s55
                    have lean_s57 : let146 := by timed And.intro lean_s12 lean_a100
                    have lean_s58 : (Implies let146 let145) := by arithMulNeg [let39, let13, let40], 3
                    have lean_s59 : let145 := by timed modusPonens lean_s57 lean_s58
                    have lean_s60 : let117 := by sumBounds [lean_s11, lean_s19, lean_s28, lean_s37, lean_s49, lean_s56, lean_s59]
                    let lean_s61 := by timed congrHAdd lean_r4 lean_r5
                    let lean_s62 := by timed congrHAdd lean_r3 lean_s61
                    let lean_s63 := by timed congrHAdd lean_r23 lean_s62
                    let lean_s64 := by timed congrHAdd lean_r2 lean_s63
                    let lean_s65 := by timed congrHAdd lean_r43 lean_s64
                    have lean_s66 : (Eq let114 let56) := by timed congrHAdd lean_r38 lean_s65
                    have lean_s67 : (Eq let114 let42) := by timed Eq.trans lean_s66 lean_r6
                    let lean_s68 := by timed flipCongrArg lean_s67 [GE.ge]
                    let lean_s69 := by timed congrHAdd lean_r11 lean_r49
                    let lean_s70 := by timed congrHAdd lean_r9 lean_s69
                    let lean_s71 := by timed congrHAdd lean_r8 lean_s70
                    let lean_s72 := by timed congrHAdd lean_r8 lean_s71
                    let lean_s73 := by timed congrHAdd lean_r49 lean_s72
                    have lean_s74 : (Eq let112 let124) := by timed congrHAdd lean_r7 lean_s73
                    have lean_s75 : (Eq let112 let42) := by timed Eq.trans lean_s74 lean_r47
                    have lean_s76 : (Eq let115 let97) := by timed congr lean_s68 lean_s75
                    have lean_s77 : (Eq let115 True) := by timed Eq.trans lean_s76 lean_r30
                    have lean_s78 : (Eq let116 let123) := by timed flipCongrArg lean_s77 [Not]
                    have lean_s79 : (Eq let116 False) := by timed Eq.trans lean_s78 lean_r45
                    have lean_s80 : (Eq let117 False) := by timed Eq.trans lean_r40 lean_s79
                    show False from by timed eqResolve lean_s60 lean_s80
                  ))
                have lean_s9 : let119 := by liftOrNToNeg lean_s8
                have lean_s10 : (Eq let119 let85) := by timed flipCongrArg lean_r39 [Not]
                have lean_s11 : (Eq let119 let79) := by timed Eq.trans lean_s10 lean_r21
                have lean_s12 : (Eq let120 let79) := by timed Eq.trans lean_r42 lean_s11
                have lean_s13 : (Eq let79 let120) := by timed Eq.symm lean_s12
                have lean_s14 : (Eq let119 let120) := by timed Eq.trans lean_s11 lean_s13
                have lean_s15 : let120 := by timed eqResolve lean_s9 lean_s14
                have lean_s16 : (Eq let79 let119) := by timed Eq.symm lean_s11
                have lean_s17 : let121 := by timed Eq.trans lean_s12 lean_s16
                have lean_s18 : let119 := by timed eqResolve lean_s15 lean_s17
                show False from by timed contradiction lean_s7 lean_s18
  ))))))))))))))
have lean_s1 : (Not (And let137 (And let139 (And let100 (And let82 (And let11 (And let66 let84))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let144 := by timed flipNotAnd lean_s1 [let137, let139, let100, let82, let11, let66, let84]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let141 let141) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let140 let140) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : let108 := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [Eq]
have lean_s10 : (Eq let102 let108) := by timed congr lean_s9 lean_r46
have lean_s11 : (Eq let102 True) := by timed Eq.trans lean_s10 lean_r37
have lean_s12 : (Eq let103 True) := by timed Eq.trans lean_r32 lean_s11
have lean_s13 : let103 := by timed trueElim lean_s12
let lean_s14 := by timed congr lean_s3 lean_s13
have lean_s15 : let118 := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [Eq]
have lean_s17 : (Eq let105 let118) := by timed congr lean_s16 lean_r22
have lean_s18 : (Eq let105 True) := by timed Eq.trans lean_s17 lean_r41
have lean_s19 : (Eq let88 True) := by timed Eq.trans lean_r34 lean_s18
have lean_s20 : let88 := by timed trueElim lean_s19
let lean_s21 := by timed congr lean_s3 lean_s20
have lean_s22 : let91 := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [Eq]
have lean_s24 : (Eq let107 let91) := by timed congr lean_s23 lean_r27
have lean_s25 : (Eq let107 True) := by timed Eq.trans lean_s24 lean_r25
have lean_s26 : (Eq let94 True) := by timed Eq.trans lean_r36 lean_s25
have lean_s27 : let94 := by timed trueElim lean_s26
let lean_s28 := by timed congr lean_s3 lean_s27
have lean_s29 : (Eq let142 let142) := by timed rfl
let lean_s30 := by timed congr lean_s3 lean_s29
have lean_s31 : let80 := by timed rfl
let lean_s32 := by timed flipCongrArg lean_s31 [Eq]
have lean_s33 : (Eq let104 let80) := by timed congr lean_s32 lean_r21
have lean_s34 : (Eq let104 True) := by timed Eq.trans lean_s33 lean_r19
have lean_s35 : (Eq let86 True) := by timed Eq.trans lean_r33 lean_s34
have lean_s36 : let86 := by timed trueElim lean_s35
let lean_s37 := by timed congr lean_s30 lean_s36
let lean_s38 := by timed congr lean_s28 lean_s37
let lean_s39 := by timed congr lean_s21 lean_s38
let lean_s40 := by timed congr lean_s14 lean_s39
let lean_s41 := by timed congr lean_s7 lean_s40
have lean_s42 : (Eq let144 let143) := by timed congr lean_s5 lean_s41
have lean_s43 : let143 := by timed eqResolve lean_s2 lean_s42
have lean_s44 : (Or let99 (Or let81 (Or let10 (Or let79 (Or let142 (Or let141 let140)))))) := by permutateOr lean_s43, [2, 3, 4, 6, 5, 0, 1], (- 1)
let lean_s45 := by timed flipCongrArg lean_r13 [GE.ge]
have lean_s46 : (Eq let13 let13) := by timed rfl
have lean_s47 : (Eq let138 let139) := by timed congr lean_s45 lean_s46
have lean_s48 : let139 := by timed eqResolve lean_a98 lean_s47
let lean_s49 := by R2 lean_s44, lean_s48, let139, [(- 1), 0]
let lean_s50 := by R2 lean_s49, lean_a97, let137, [(- 1), 0]
let lean_s51 := by timed flipCongrArg lean_r17 [GE.ge]
have lean_s52 : (Eq let136 let95) := by timed congr lean_s51 lean_s46
have lean_s53 : (Eq let136 let84) := by timed Eq.trans lean_s52 lean_r28
have lean_s54 : let84 := by timed eqResolve lean_a93 lean_s53
let lean_s55 := by R1 lean_s50, lean_s54, let79, [(- 1), 0]
let lean_s56 := by timed flipCongrArg lean_r16 [GE.ge]
have lean_s57 : (Eq let135 let90) := by timed congr lean_s56 lean_s46
have lean_s58 : (Eq let135 let11) := by timed Eq.trans lean_s57 lean_r24
have lean_s59 : let11 := by timed eqResolve lean_a89 lean_s58
let lean_s60 := by R1 lean_s55, lean_s59, let10, [(- 1), 0]
let lean_s61 := by timed flipCongrArg lean_r18 [LE.le]
have lean_s62 : (Eq let132 let83) := by timed congr lean_s61 lean_s46
have lean_s63 : (Eq let132 let82) := by timed Eq.trans lean_s62 lean_r20
have lean_s64 : let82 := by timed eqResolve lean_a86 lean_s63
let lean_s65 := by R1 lean_s60, lean_s64, let81, [(- 1), 0]
let lean_s66 := by timed flipCongrArg lean_r26 [LE.le]
have lean_s67 : (Eq let131 let67) := by timed congr lean_s66 lean_s46
have lean_s68 : (Eq let131 let66) := by timed Eq.trans lean_s67 lean_r14
have lean_s69 : let66 := by timed eqResolve lean_a85 lean_s68
let lean_s70 := by R2 lean_s65, lean_s69, let66, [(- 1), 0]
let lean_s71 := by timed flipCongrArg lean_r29 [LE.le]
have lean_s72 : (Eq let2 let2) := by timed rfl
have lean_s73 : (Eq let126 let122) := by timed congr lean_s71 lean_s72
have lean_s74 : (Eq let126 let100) := by timed Eq.trans lean_s73 lean_r44
have lean_s75 : let100 := by timed eqResolve lean_a72 lean_s74
exact (show False from by R1 lean_s70, lean_s75, let99, [0, 0])


