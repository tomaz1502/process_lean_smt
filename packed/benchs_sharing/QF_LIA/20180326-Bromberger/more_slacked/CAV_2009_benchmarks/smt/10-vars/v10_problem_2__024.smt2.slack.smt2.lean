open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x3x5fplus : Int}
variable {x3x5fminus : Int}
variable {x2x5fplus : Int}
variable {x2x5fminus : Int}
variable {x4x5fplus : Int}
variable {x4x5fminus : Int}
variable {x7x5fplus : Int}
variable {x7x5fminus : Int}
variable {x6x5fplus : Int}
variable {x4x5fminus : Int}
variable {x9x5fminus : Int}
variable {x7x5fminus : Int}
variable {x1x5fminus : Int}
variable {x6x5fplus : Int}
variable {x5x5fminus : Int}
variable {x9x5fplus : Int}
variable {x1x5fplus : Int}
variable {x1x5fminus : Int}
variable {x8x5fplus : Int}
variable {x7x5fplus : Int}
variable {x8x5fminus : Int}
variable {x5x5fplus : Int}
variable {x6x5fminus : Int}
variable {x5x5fminus : Int}
variable {x0x5fplus : Int}
variable {x5x5fplus : Int}
variable {x4x5fplus : Int}
variable {x2x5fminus : Int}
variable {x1x5fplus : Int}
variable {x2x5fplus : Int}
variable {x9x5fminus : Int}
variable {x6x5fminus : Int}
variable {x9x5fplus : Int}
variable {x0x5fminus : Int}
variable {x3x5fminus : Int}
variable {x3x5fplus : Int}
variable {x0x5fplus : Int}
variable {x8x5fminus : Int}
variable {x0x5fminus : Int}
variable {x8x5fplus : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 2)
  let let3 := (binrel% HDiv.hDiv (Int.ofNat 5) let2)
  let let4 := (Neg.neg let3)
  let let5 := (binrel% LT.lt let4 let1)
  let let6 := (Int.ofNat 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 x3x5fminus)
  let let9 := (binrel% HAdd.hAdd x3x5fplus let8)
  let let10 := (binrel% HMul.hMul let7 x6x5fminus)
  let let11 := (Neg.neg let2)
  let let12 := (binrel% HMul.hMul let11 x9x5fminus)
  let let13 := (binrel% HMul.hMul let2 x9x5fplus)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 let9))))
  let let15 := (binrel% GE.ge let14 let6)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let6)
  let let18 := (Rat.ofInt 3)
  let let19 := (binrel% GT.gt let18 let1)
  let let20 := (binrel% HMul.hMul let7 x1x5fminus)
  let let21 := (binrel% HAdd.hAdd x1x5fplus let20)
  let let22 := (binrel% HMul.hMul let7 x5x5fminus)
  let let23 := (binrel% HMul.hMul let7 x6x5fplus)
  let let24 := (binrel% HMul.hMul let7 x9x5fminus)
  let let25 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 let21))))))
  let let26 := (binrel% GE.ge let25 let6)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let6)
  let let29 := (Neg.neg let18)
  let let30 := (binrel% LT.lt let29 let1)
  let let31 := (binrel% HDiv.hDiv let6 let2)
  let let32 := (Neg.neg let31)
  let let33 := (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x0x5fplus) (binrel% HMul.hMul let32 x0x5fminus))))))
  let let34 := (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x0x5fplus) x0x5fminus)
  let let35 := (binrel% HMul.hMul let7 x2x5fplus)
  let let36 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x2x5fminus let34))))
  let let37 := (binrel% HMul.hMul let32 let36)
  let let38 := (Rat.ofInt 0)
  let let39 := (binrel% GE.ge let38 let38)
  let let40 := (Not let27)
  let let41 := (Eq let26 let40)
  let let42 := (Eq let40 let26)
  let let43 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let7 x0x5fminus))
  let let44 := (binrel% HMul.hMul let7 x2x5fminus)
  let let45 := (binrel% HMul.hMul let7 x1x5fplus)
  let let46 := (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let44 let43))))
  let let47 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x1x5fminus let43))))
  let let48 := (Eq let26 let26)
  let let49 := (binrel% HMul.hMul let7 x7x5fminus)
  let let50 := (binrel% HAdd.hAdd x7x5fplus let49)
  let let51 := (binrel% HMul.hMul let7 x8x5fminus)
  let let52 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x1x5fminus let50))))
  let let53 := (binrel% GE.ge let52 let1)
  let let54 := (Not let53)
  let let55 := (Not let54)
  let let56 := (Eq let53 let55)
  let let57 := (Eq let55 let53)
  let let58 := (binrel% HMul.hMul let7 x3x5fplus)
  let let59 := (binrel% HAdd.hAdd let58 x3x5fminus)
  let let60 := (binrel% HMul.hMul let7 x4x5fminus)
  let let61 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let60 let59))))
  let let62 := (binrel% GE.ge let61 let1)
  let let63 := (Not let62)
  let let64 := (binrel% LE.le let61 let7)
  let let65 := (Not let63)
  let let66 := (Eq let62 let65)
  let let67 := (Eq let65 let62)
  let let68 := (binrel% HMul.hMul let11 x6x5fminus)
  let let69 := (binrel% HMul.hMul let2 x6x5fplus)
  let let70 := (Rat.ofInt (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x3x5fplus) (binrel% HMul.hMul let2 x3x5fminus)))))))
  let let71 := (Rat.ofInt 2)
  let let72 := (binrel% HMul.hMul let71 let61)
  let let73 := (Eq let53 let53)
  let let74 := (binrel% LE.le let25 let1)
  let let75 := (binrel% HAdd.hAdd let45 x1x5fminus)
  let let76 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 let75))))
  let let77 := (binrel% LE.le let14 let1)
  let let78 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let60 let50))))
  let let79 := (binrel% GE.ge let78 let6)
  let let80 := (Not let79)
  let let81 := (binrel% LT.lt let78 let6)
  let let82 := (binrel% GE.ge let36 let1)
  let let83 := (binrel% LE.le let46 let1)
  let let84 := (Int.ofNat 3)
  let let85 := (binrel% HDiv.hDiv let84 let2)
  let let86 := (Neg.neg let85)
  let let87 := (binrel% HAdd.hAdd (binrel% HMul.hMul let86 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let85 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let85 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let86 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let86 x0x5fplus) (binrel% HMul.hMul let85 x0x5fminus))))))
  let let88 := (binrel% HMul.hMul let7 x4x5fplus)
  let let89 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd x4x5fminus let43))))
  let let90 := (binrel% HMul.hMul let86 let89)
  let let91 := (binrel% LT.lt let52 let1)
  let let92 := (Eq let62 let62)
  let let93 := (Rat.ofInt 1)
  let let94 := (binrel% GT.gt let93 let1)
  let let95 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 let43)))))))
  let let96 := (binrel% HMul.hMul let7 x7x5fplus)
  let let97 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x7x5fminus let34))))))
  let let98 := (Neg.neg let93)
  let let99 := (binrel% HMul.hMul let98 let97)
  let let100 := (Not True)
  let let101 := (binrel% HMul.hMul let11 x7x5fminus)
  let let102 := (binrel% HMul.hMul let2 x7x5fplus)
  let let103 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let102 let101)))))))
  let let104 := (binrel% HAdd.hAdd let35 x2x5fminus)
  let let105 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus let104))))))
  let let106 := (binrel% HAdd.hAdd let96 x7x5fminus)
  let let107 := (binrel% HMul.hMul let7 x8x5fplus)
  let let108 := (Rat.ofInt (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd x4x5fminus let106)))))
  let let109 := (binrel% HMul.hMul let98 let78)
  let let110 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 let106))))
  let let111 := (binrel% GE.ge let110 let6)
  let let112 := (binrel% HMul.hMul let7 x5x5fplus)
  let let113 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd x5x5fminus let50))))
  let let114 := (binrel% LE.le let113 let7)
  let let115 := (Neg.neg let71)
  let let116 := (binrel% HMul.hMul let115 let1)
  let let117 := (binrel% HAdd.hAdd x4x5fplus let60)
  let let118 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 let117))))
  let let119 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x1x5fminus let34))))))
  let let120 := (binrel% HMul.hMul let32 let1)
  let let121 := (Eq let15 let15)
  let let122 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let112 x5x5fminus)))
  let let123 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 let122))
  let let124 := (binrel% HMul.hMul let29 let6)
  let let125 := (binrel% HMul.hMul let18 let6)
  let let126 := (binrel% HMul.hMul let98 let1)
  let let127 := (binrel% LT.lt let61 let1)
  let let128 := (binrel% HMul.hMul let71 let1)
  let let129 := (binrel% GT.gt let71 let1)
  let let130 := (Not let16)
  let let131 := (Eq let15 let130)
  let let132 := (Eq let130 let15)
  let let133 := (binrel% HMul.hMul let71 let6)
  let let134 := (binrel% HAdd.hAdd x2x5fplus let44)
  let let135 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let20 let134))))))
  let let136 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let44 let21))))))
  let let137 := (binrel% HMul.hMul let4 let6)
  let let138 := (binrel% HMul.hMul let86 let7)
  let let139 := (binrel% LT.lt let115 let1)
  let let140 := (Int.ofNat 4)
  let let141 := (Neg.neg let140)
  let let142 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x9x5fminus) (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let141 x7x5fplus) (binrel% HMul.hMul let140 x7x5fminus)))))))))
  let let143 := (Neg.neg let84)
  let let144 := (binrel% HMul.hMul let84 x6x5fminus)
  let let145 := (binrel% HMul.hMul let143 x6x5fplus)
  let let146 := (Rat.ofInt (binrel% HAdd.hAdd let145 (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd (binrel% HMul.hMul let143 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let84 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let84 x7x5fplus) (binrel% HMul.hMul let143 x7x5fminus)))))))
  let let147 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let84 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let143 x9x5fminus) (binrel% HAdd.hAdd let145 (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd (binrel% HMul.hMul let84 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let143 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let84 x1x5fplus) (binrel% HMul.hMul let143 x1x5fminus)))))))))
  let let148 := (Rat.ofInt let52)
  let let149 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let140 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let141 x9x5fminus) (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x3x5fplus) (binrel% HMul.hMul let11 x3x5fminus)))))))
  let let150 := (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x2x5fplus) (binrel% HMul.hMul let3 x2x5fminus))))))))
  let let151 := (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let150 (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let70 let95))))))))))
  let let152 := (binrel% HMul.hMul let115 let103)
  let let153 := (binrel% HMul.hMul let29 let110)
  let let154 := (binrel% HMul.hMul let18 let25)
  let let155 := (binrel% HMul.hMul let93 let52)
  let let156 := (binrel% HMul.hMul let71 let14)
  let let157 := (binrel% HAdd.hAdd let98 (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let38 let38))))))))))
  let let158 := (binrel% LE.le let52 let7)
  let let159 := (binrel% HMul.hMul let4 let135)
  let let160 := (binrel% HMul.hMul let93 let1)
  let let161 := (binrel% HMul.hMul let98 let6)
  let let162 := (binrel% HAdd.hAdd let161 (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd let124 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let120 (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let128 let126))))))))))
  let let163 := (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd let156 (binrel% HAdd.hAdd let155 (binrel% HAdd.hAdd let154 (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let152 (binrel% HAdd.hAdd let72 let99))))))))))
  let let164 := (binrel% GE.ge let163 let162)
  let let165 := (Not let164)
  let let166 := (binrel% LT.lt let163 let162)
  let let167 := (binrel% LT.lt let98 let1)
  let let168 := (binrel% LT.lt let32 let1)
  let let169 := (binrel% LT.lt let86 let1)
  let let170 := (binrel% LE.le let76 let7)
  let let171 := (binrel% LE.le let47 let1)
  let let172 := (binrel% LE.le let123 let7)
  let let173 := (binrel% GE.ge let105 let1)
  let let174 := (binrel% GE.ge let136 let6)
  let let175 := (binrel% GE.ge let119 let1)
  let let176 := (binrel% GE.ge let89 let7)
  let let177 := (binrel% GE.ge let118 let6)
  let let178 := (binrel% GE.ge let103 let1)
  let let179 := (binrel% GE.ge let135 let6)
  let let180 := (binrel% GE.ge let97 let1)
  let let181 := (Not let176)
  let let182 := (Not let180)
  let let183 := (Not let179)
  let let184 := (Not let178)
  let let185 := (Not let111)
  let let186 := (Not let82)
  let let187 := (Or let183 let80)
  let let188 := (Or let182 (Or let62 (Or let184 (Or let186 (Or let181 (Or let185 (Or let26 (Or let53 (Or let15 let187)))))))))
  let let189 := (Or let182 (Or let65 (Or let184 (Or let186 (Or let181 (Or let185 (Or let40 (Or let55 (Or let130 let187)))))))))
  let let190 := (Or let80 False)
  let let191 := (binrel% LE.le let99 let126)
  let let192 := (And let167 let180)
  let let193 := (binrel% LT.lt let72 let128)
  let let194 := (And let129 let127)
  let let195 := (binrel% LE.le let152 let116)
  let let196 := (And let139 let178)
  let let197 := (binrel% LE.le let37 let120)
  let let198 := (And let168 let82)
  let let199 := (binrel% LE.le let90 let138)
  let let200 := (And let169 let176)
  let let201 := (binrel% LE.le let153 let124)
  let let202 := (And let30 let111)
  let let203 := (binrel% LT.lt let154 let125)
  let let204 := (And let19 let28)
  let let205 := (binrel% LT.lt let155 let160)
  let let206 := (And let94 let91)
  let let207 := (binrel% LT.lt let156 let133)
  let let208 := (And let129 let17)
  let let209 := (binrel% LE.le let159 let137)
  let let210 := (And let5 let179)
  let let211 := (binrel% LE.le let109 let161)
  let let212 := (And let167 let79)
(Eq let5 True) → (Eq let17 let16) → (Eq let19 True) → (Eq let28 let27) → (Eq let30 True) → (Eq let37 let33) → (Eq let39 True) → (Eq let42 let41) → (Eq let47 let46) → (Eq let48 True) → (Eq let57 let56) → (Eq let64 let63) → (Eq let67 let66) → (Eq let72 let70) → (Eq let73 True) → (Eq let74 let27) → (Eq let76 let52) → (Eq let77 let16) → (Eq let81 let80) → (Eq let83 let82) → (Eq let90 let87) → (Eq let91 let54) → (Eq let92 True) → (Eq let94 True) → let67 → (Eq let99 let95) → (Eq let100 False) → (Eq let105 let103) → (Eq let109 let108) → (Eq let114 let111) → (Eq let116 let38) → let57 → (Eq let118 let78) → let42 → (Eq let119 let97) → (Eq let120 let38) → (Eq let121 True) → (Eq let123 let113) → (Eq let124 let29) → (Eq let125 let18) → (Eq let126 let38) → (Eq let127 let63) → (Eq let128 let38) → (Eq let129 True) → (Eq let132 let131) → (Eq let133 let71) → (Eq let136 let135) → (Eq let137 let4) → (Eq let138 let85) → (Eq let139 True) → (Eq let151 let38) → (Eq let152 let142) → (Eq let153 let146) → (Eq let154 let147) → (Eq let155 let148) → (Eq let156 let149) → (Eq let157 let38) → (Eq let158 let54) → (Eq let159 let150) → (Eq let166 let165) → (Eq let167 True) → let132 → (Eq let160 let38) → (Eq let168 True) → (Eq let161 let98) → (Eq let169 True) → (binrel% GE.ge x9x5fplus let1) → (binrel% GE.ge x9x5fminus let1) → (binrel% GE.ge x8x5fplus let1) → (binrel% GE.ge x8x5fminus let1) → (binrel% GE.ge x6x5fplus let1) → (binrel% GE.ge x6x5fminus let1) → (binrel% GE.ge x5x5fplus let1) → (binrel% GE.ge x5x5fminus let1) → (binrel% GE.ge x4x5fplus let1) → (binrel% GE.ge x4x5fminus let1) → (binrel% GE.ge x3x5fplus let1) → (binrel% GE.ge x3x5fminus let1) → (binrel% GE.ge x1x5fplus let1) → (binrel% GE.ge x1x5fminus let1) → (binrel% GE.ge x2x5fplus let1) → (binrel% GE.ge x2x5fminus let1) → (binrel% GE.ge x7x5fplus let1) → (binrel% GE.ge x7x5fminus let1) → (binrel% GE.ge x0x5fplus let1) → (binrel% GE.ge x0x5fminus let1) → (binrel% LE.le (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let60 let9)))))))))) let1) → let74 → (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x8x5fminus) (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let8 let104)))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x7x5fminus let59)))) let6) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 let117)))) let1) → let170 → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 let59)))) let7) → let77 → let64 → let171 → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 let117)))) let7) → let172 → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x2x5fminus let21)))) let6) → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 let43)) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x2x5fplus) (binrel% HMul.hMul let2 x2x5fminus)))))))))))) let7) → let173 → let174 → let175 → (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd x3x5fminus let75)))))) let1) → let176 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd x5x5fminus let134)))) let6) → let177 → (binrel% GE.ge (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let101 let122)) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 let21)) let7) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 let43)) let1) → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 2)
  let let3 := (binrel% HDiv.hDiv (Int.ofNat 5) let2)
  let let4 := (Neg.neg let3)
  let let5 := (binrel% LT.lt let4 let1)
  let let6 := (Int.ofNat 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 x3x5fminus)
  let let9 := (binrel% HAdd.hAdd x3x5fplus let8)
  let let10 := (binrel% HMul.hMul let7 x6x5fminus)
  let let11 := (Neg.neg let2)
  let let12 := (binrel% HMul.hMul let11 x9x5fminus)
  let let13 := (binrel% HMul.hMul let2 x9x5fplus)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 let9))))
  let let15 := (binrel% GE.ge let14 let6)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let6)
  let let18 := (Rat.ofInt 3)
  let let19 := (binrel% GT.gt let18 let1)
  let let20 := (binrel% HMul.hMul let7 x1x5fminus)
  let let21 := (binrel% HAdd.hAdd x1x5fplus let20)
  let let22 := (binrel% HMul.hMul let7 x5x5fminus)
  let let23 := (binrel% HMul.hMul let7 x6x5fplus)
  let let24 := (binrel% HMul.hMul let7 x9x5fminus)
  let let25 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 let21))))))
  let let26 := (binrel% GE.ge let25 let6)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let6)
  let let29 := (Neg.neg let18)
  let let30 := (binrel% LT.lt let29 let1)
  let let31 := (binrel% HDiv.hDiv let6 let2)
  let let32 := (Neg.neg let31)
  let let33 := (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let32 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let31 x0x5fplus) (binrel% HMul.hMul let32 x0x5fminus))))))
  let let34 := (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x0x5fplus) x0x5fminus)
  let let35 := (binrel% HMul.hMul let7 x2x5fplus)
  let let36 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x2x5fminus let34))))
  let let37 := (binrel% HMul.hMul let32 let36)
  let let38 := (Rat.ofInt 0)
  let let39 := (binrel% GE.ge let38 let38)
  let let40 := (Not let27)
  let let41 := (Eq let26 let40)
  let let42 := (Eq let40 let26)
  let let43 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let7 x0x5fminus))
  let let44 := (binrel% HMul.hMul let7 x2x5fminus)
  let let45 := (binrel% HMul.hMul let7 x1x5fplus)
  let let46 := (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let44 let43))))
  let let47 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x1x5fminus let43))))
  let let48 := (Eq let26 let26)
  let let49 := (binrel% HMul.hMul let7 x7x5fminus)
  let let50 := (binrel% HAdd.hAdd x7x5fplus let49)
  let let51 := (binrel% HMul.hMul let7 x8x5fminus)
  let let52 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x1x5fminus let50))))
  let let53 := (binrel% GE.ge let52 let1)
  let let54 := (Not let53)
  let let55 := (Not let54)
  let let56 := (Eq let53 let55)
  let let57 := (Eq let55 let53)
  let let58 := (binrel% HMul.hMul let7 x3x5fplus)
  let let59 := (binrel% HAdd.hAdd let58 x3x5fminus)
  let let60 := (binrel% HMul.hMul let7 x4x5fminus)
  let let61 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let60 let59))))
  let let62 := (binrel% GE.ge let61 let1)
  let let63 := (Not let62)
  let let64 := (binrel% LE.le let61 let7)
  let let65 := (Not let63)
  let let66 := (Eq let62 let65)
  let let67 := (Eq let65 let62)
  let let68 := (binrel% HMul.hMul let11 x6x5fminus)
  let let69 := (binrel% HMul.hMul let2 x6x5fplus)
  let let70 := (Rat.ofInt (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x3x5fplus) (binrel% HMul.hMul let2 x3x5fminus)))))))
  let let71 := (Rat.ofInt 2)
  let let72 := (binrel% HMul.hMul let71 let61)
  let let73 := (Eq let53 let53)
  let let74 := (binrel% LE.le let25 let1)
  let let75 := (binrel% HAdd.hAdd let45 x1x5fminus)
  let let76 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 let75))))
  let let77 := (binrel% LE.le let14 let1)
  let let78 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let60 let50))))
  let let79 := (binrel% GE.ge let78 let6)
  let let80 := (Not let79)
  let let81 := (binrel% LT.lt let78 let6)
  let let82 := (binrel% GE.ge let36 let1)
  let let83 := (binrel% LE.le let46 let1)
  let let84 := (Int.ofNat 3)
  let let85 := (binrel% HDiv.hDiv let84 let2)
  let let86 := (Neg.neg let85)
  let let87 := (binrel% HAdd.hAdd (binrel% HMul.hMul let86 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let85 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let85 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let86 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let86 x0x5fplus) (binrel% HMul.hMul let85 x0x5fminus))))))
  let let88 := (binrel% HMul.hMul let7 x4x5fplus)
  let let89 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd x4x5fminus let43))))
  let let90 := (binrel% HMul.hMul let86 let89)
  let let91 := (binrel% LT.lt let52 let1)
  let let92 := (Eq let62 let62)
  let let93 := (Rat.ofInt 1)
  let let94 := (binrel% GT.gt let93 let1)
  let let95 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let7 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 let43)))))))
  let let96 := (binrel% HMul.hMul let7 x7x5fplus)
  let let97 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x7x5fminus let34))))))
  let let98 := (Neg.neg let93)
  let let99 := (binrel% HMul.hMul let98 let97)
  let let100 := (Not True)
  let let101 := (binrel% HMul.hMul let11 x7x5fminus)
  let let102 := (binrel% HMul.hMul let2 x7x5fplus)
  let let103 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let102 let101)))))))
  let let104 := (binrel% HAdd.hAdd let35 x2x5fminus)
  let let105 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus let104))))))
  let let106 := (binrel% HAdd.hAdd let96 x7x5fminus)
  let let107 := (binrel% HMul.hMul let7 x8x5fplus)
  let let108 := (Rat.ofInt (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd x4x5fminus let106)))))
  let let109 := (binrel% HMul.hMul let98 let78)
  let let110 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 let106))))
  let let111 := (binrel% GE.ge let110 let6)
  let let112 := (binrel% HMul.hMul let7 x5x5fplus)
  let let113 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd x5x5fminus let50))))
  let let114 := (binrel% LE.le let113 let7)
  let let115 := (Neg.neg let71)
  let let116 := (binrel% HMul.hMul let115 let1)
  let let117 := (binrel% HAdd.hAdd x4x5fplus let60)
  let let118 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 let117))))
  let let119 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x1x5fminus let34))))))
  let let120 := (binrel% HMul.hMul let32 let1)
  let let121 := (Eq let15 let15)
  let let122 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let112 x5x5fminus)))
  let let123 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 let122))
  let let124 := (binrel% HMul.hMul let29 let6)
  let let125 := (binrel% HMul.hMul let18 let6)
  let let126 := (binrel% HMul.hMul let98 let1)
  let let127 := (binrel% LT.lt let61 let1)
  let let128 := (binrel% HMul.hMul let71 let1)
  let let129 := (binrel% GT.gt let71 let1)
  let let130 := (Not let16)
  let let131 := (Eq let15 let130)
  let let132 := (Eq let130 let15)
  let let133 := (binrel% HMul.hMul let71 let6)
  let let134 := (binrel% HAdd.hAdd x2x5fplus let44)
  let let135 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let20 let134))))))
  let let136 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let44 let21))))))
  let let137 := (binrel% HMul.hMul let4 let6)
  let let138 := (binrel% HMul.hMul let86 let7)
  let let139 := (binrel% LT.lt let115 let1)
  let let140 := (Int.ofNat 4)
  let let141 := (Neg.neg let140)
  let let142 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x9x5fminus) (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let141 x7x5fplus) (binrel% HMul.hMul let140 x7x5fminus)))))))))
  let let143 := (Neg.neg let84)
  let let144 := (binrel% HMul.hMul let84 x6x5fminus)
  let let145 := (binrel% HMul.hMul let143 x6x5fplus)
  let let146 := (Rat.ofInt (binrel% HAdd.hAdd let145 (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd (binrel% HMul.hMul let143 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let84 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let84 x7x5fplus) (binrel% HMul.hMul let143 x7x5fminus)))))))
  let let147 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let84 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let143 x9x5fminus) (binrel% HAdd.hAdd let145 (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd (binrel% HMul.hMul let84 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let143 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let84 x1x5fplus) (binrel% HMul.hMul let143 x1x5fminus)))))))))
  let let148 := (Rat.ofInt let52)
  let let149 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let140 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let141 x9x5fminus) (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x3x5fplus) (binrel% HMul.hMul let11 x3x5fminus)))))))
  let let150 := (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x2x5fplus) (binrel% HMul.hMul let3 x2x5fminus))))))))
  let let151 := (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let150 (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let142 (binrel% HAdd.hAdd let70 let95))))))))))
  let let152 := (binrel% HMul.hMul let115 let103)
  let let153 := (binrel% HMul.hMul let29 let110)
  let let154 := (binrel% HMul.hMul let18 let25)
  let let155 := (binrel% HMul.hMul let93 let52)
  let let156 := (binrel% HMul.hMul let71 let14)
  let let157 := (binrel% HAdd.hAdd let98 (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let38 let38))))))))))
  let let158 := (binrel% LE.le let52 let7)
  let let159 := (binrel% HMul.hMul let4 let135)
  let let160 := (binrel% HMul.hMul let93 let1)
  let let161 := (binrel% HMul.hMul let98 let6)
  let let162 := (binrel% HAdd.hAdd let161 (binrel% HAdd.hAdd let137 (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd let124 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let120 (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let128 let126))))))))))
  let let163 := (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd let156 (binrel% HAdd.hAdd let155 (binrel% HAdd.hAdd let154 (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let152 (binrel% HAdd.hAdd let72 let99))))))))))
  let let164 := (binrel% GE.ge let163 let162)
  let let165 := (Not let164)
  let let166 := (binrel% LT.lt let163 let162)
  let let167 := (binrel% LT.lt let98 let1)
  let let168 := (binrel% LT.lt let32 let1)
  let let169 := (binrel% LT.lt let86 let1)
  let let170 := (binrel% LE.le let76 let7)
  let let171 := (binrel% LE.le let47 let1)
  let let172 := (binrel% LE.le let123 let7)
  let let173 := (binrel% GE.ge let105 let1)
  let let174 := (binrel% GE.ge let136 let6)
  let let175 := (binrel% GE.ge let119 let1)
  let let176 := (binrel% GE.ge let89 let7)
  let let177 := (binrel% GE.ge let118 let6)
  let let178 := (binrel% GE.ge let103 let1)
  let let179 := (binrel% GE.ge let135 let6)
  let let180 := (binrel% GE.ge let97 let1)
  let let181 := (Not let176)
  let let182 := (Not let180)
  let let183 := (Not let179)
  let let184 := (Not let178)
  let let185 := (Not let111)
  let let186 := (Not let82)
  let let187 := (Or let183 let80)
  let let188 := (Or let182 (Or let62 (Or let184 (Or let186 (Or let181 (Or let185 (Or let26 (Or let53 (Or let15 let187)))))))))
  let let189 := (Or let182 (Or let65 (Or let184 (Or let186 (Or let181 (Or let185 (Or let40 (Or let55 (Or let130 let187)))))))))
  let let190 := (Or let80 False)
  let let191 := (binrel% LE.le let99 let126)
  let let192 := (And let167 let180)
  let let193 := (binrel% LT.lt let72 let128)
  let let194 := (And let129 let127)
  let let195 := (binrel% LE.le let152 let116)
  let let196 := (And let139 let178)
  let let197 := (binrel% LE.le let37 let120)
  let let198 := (And let168 let82)
  let let199 := (binrel% LE.le let90 let138)
  let let200 := (And let169 let176)
  let let201 := (binrel% LE.le let153 let124)
  let let202 := (And let30 let111)
  let let203 := (binrel% LT.lt let154 let125)
  let let204 := (And let19 let28)
  let let205 := (binrel% LT.lt let155 let160)
  let let206 := (And let94 let91)
  let let207 := (binrel% LT.lt let156 let133)
  let let208 := (And let129 let17)
  let let209 := (binrel% LE.le let159 let137)
  let let210 := (And let5 let179)
  let let211 := (binrel% LE.le let109 let161)
  let let212 := (And let167 let79)
fun lean_r0 : (Eq let5 True) => -- EVALUATE
fun lean_r1 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let19 True) => -- EVALUATE
fun lean_r3 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let30 True) => -- EVALUATE
fun lean_r5 : (Eq let37 let33) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let39 True) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let42 let41) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let47 let46) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let48 True) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let57 let56) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let64 let63) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let67 let66) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let72 let70) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let73 True) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let74 let27) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let76 let52) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let77 let16) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let81 let80) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let83 let82) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let90 let87) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let91 let54) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let92 True) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let94 True) => -- EVALUATE
fun lean_r24 : let67 => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let99 let95) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let100 False) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let105 let103) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let109 let108) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let114 let111) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let116 let38) => -- THEORY_REWRITE_ARITH
fun lean_r31 : let57 => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let118 let78) => -- THEORY_REWRITE_ARITH
fun lean_r33 : let42 => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let119 let97) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let120 let38) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let121 True) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let123 let113) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let124 let29) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let125 let18) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let126 let38) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let127 let63) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let128 let38) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let129 True) => -- EVALUATE
fun lean_r44 : (Eq let132 let131) => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let133 let71) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let136 let135) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let137 let4) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let138 let85) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let139 True) => -- EVALUATE
fun lean_r50 : (Eq let151 let38) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let152 let142) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let153 let146) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let154 let147) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let155 let148) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let156 let149) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let157 let38) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let158 let54) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let159 let150) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let166 let165) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let167 True) => -- EVALUATE
fun lean_r61 : let132 => -- THEORY_REWRITE_BOOL
fun lean_r62 : (Eq let160 let38) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let168 True) => -- EVALUATE
fun lean_r64 : (Eq let161 let98) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let169 True) => -- EVALUATE
fun lean_a66 : (binrel% GE.ge x9x5fplus let1) =>
fun lean_a67 : (binrel% GE.ge x9x5fminus let1) =>
fun lean_a68 : (binrel% GE.ge x8x5fplus let1) =>
fun lean_a69 : (binrel% GE.ge x8x5fminus let1) =>
fun lean_a70 : (binrel% GE.ge x6x5fplus let1) =>
fun lean_a71 : (binrel% GE.ge x6x5fminus let1) =>
fun lean_a72 : (binrel% GE.ge x5x5fplus let1) =>
fun lean_a73 : (binrel% GE.ge x5x5fminus let1) =>
fun lean_a74 : (binrel% GE.ge x4x5fplus let1) =>
fun lean_a75 : (binrel% GE.ge x4x5fminus let1) =>
fun lean_a76 : (binrel% GE.ge x3x5fplus let1) =>
fun lean_a77 : (binrel% GE.ge x3x5fminus let1) =>
fun lean_a78 : (binrel% GE.ge x1x5fplus let1) =>
fun lean_a79 : (binrel% GE.ge x1x5fminus let1) =>
fun lean_a80 : (binrel% GE.ge x2x5fplus let1) =>
fun lean_a81 : (binrel% GE.ge x2x5fminus let1) =>
fun lean_a82 : (binrel% GE.ge x7x5fplus let1) =>
fun lean_a83 : (binrel% GE.ge x7x5fminus let1) =>
fun lean_a84 : (binrel% GE.ge x0x5fplus let1) =>
fun lean_a85 : (binrel% GE.ge x0x5fminus let1) =>
fun lean_a86 : (binrel% LE.le (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let60 let9)))))))))) let1) =>
fun lean_a87 : let74 =>
fun lean_a88 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x8x5fminus) (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let8 let104)))))) let1) =>
fun lean_a89 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd x7x5fminus let59)))) let6) =>
fun lean_a90 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 let117)))) let1) =>
fun lean_a91 : let170 =>
fun lean_a92 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 let59)))) let7) =>
fun lean_a93 : let77 =>
fun lean_a94 : let64 =>
fun lean_a95 : let171 =>
fun lean_a96 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 let117)))) let7) =>
fun lean_a97 : let172 =>
fun lean_a98 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x2x5fminus let21)))) let6) =>
fun lean_a99 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 let43)) let1) =>
fun lean_a100 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x2x5fplus) (binrel% HMul.hMul let2 x2x5fminus)))))))))))) let7) =>
fun lean_a101 : let173 =>
fun lean_a102 : let174 =>
fun lean_a103 : let175 =>
fun lean_a104 : (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd x3x5fminus let75)))))) let1) =>
fun lean_a105 : let176 =>
fun lean_a106 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd x5x5fminus let134)))) let6) =>
fun lean_a107 : let177 =>
fun lean_a108 : (binrel% GE.ge (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let101 let122)) let1) =>
fun lean_a109 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 let21)) let7) =>
fun lean_a110 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let51 let43)) let1) => by
have lean_s0 : (Or let182 (Or let65 (Or let184 (Or let186 (Or let181 (Or let185 (Or let40 (Or let55 (Or let130 (Or let183 let190)))))))))) :=
  (scope (fun lean_a111 : let180 =>
    (scope (fun lean_a112 : let63 =>
      (scope (fun lean_a113 : let178 =>
        (scope (fun lean_a114 : let82 =>
          (scope (fun lean_a115 : let176 =>
            (scope (fun lean_a116 : let111 =>
              (scope (fun lean_a117 : let27 =>
                (scope (fun lean_a118 : let54 =>
                  (scope (fun lean_a119 : let16 =>
                    (scope (fun lean_a120 : let179 =>
                      (scope (fun lean_a121 : let79 =>
                        let lean_s0 := by timed flipCongrArg lean_r32 [GE.ge]
                        have lean_s1 : (Eq let6 let6) := by timed rfl
                        have lean_s2 : (Eq let177 let79) := by timed congr lean_s0 lean_s1
                        have lean_s3 : let79 := by timed eqResolve lean_a107 lean_s2
                        have lean_s4 : let190 :=
                          (scope (fun lean_a121 : let79 =>
                            have lean_s4 : let167 := by timed trueElim lean_r60
                            have lean_s5 : let79 := by timed eqResolve lean_a107 lean_s2
                            have lean_s6 : let212 := by timed And.intro lean_s4 lean_s5
                            have lean_s7 : (Implies let212 let211) := by arithMulNeg [let78, let6, let98], 3
                            have lean_s8 : let211 := by timed modusPonens lean_s6 lean_s7
                            have lean_s9 : let5 := by timed trueElim lean_r0
                            let lean_s10 := by timed flipCongrArg lean_r46 [GE.ge]
                            have lean_s11 : (Eq let174 let179) := by timed congr lean_s10 lean_s1
                            have lean_s12 : let179 := by timed eqResolve lean_a102 lean_s11
                            have lean_s13 : let210 := by timed And.intro lean_s9 lean_s12
                            have lean_s14 : (Implies let210 let209) := by arithMulNeg [let135, let6, let4], 3
                            have lean_s15 : let209 := by timed modusPonens lean_s13 lean_s14
                            have lean_s16 : let129 := by timed trueElim lean_r43
                            have lean_s17 : let16 := by timed eqResolve lean_a93 lean_r17
                            have lean_s18 : (Eq let16 let17) := by timed Eq.symm lean_r1
                            have lean_s19 : let17 := by timed eqResolve lean_s17 lean_s18
                            have lean_s20 : let208 := by timed And.intro lean_s16 lean_s19
                            have lean_s21 : (Implies let208 let207) := by arithMulPos [let14, let6, let71], 0
                            have lean_s22 : let207 := by timed modusPonens lean_s20 lean_s21
                            have lean_s23 : let94 := by timed trueElim lean_r23
                            let lean_s24 := by timed flipCongrArg lean_r16 [LE.le]
                            have lean_s25 : (Eq let7 let7) := by timed rfl
                            have lean_s26 : (Eq let170 let158) := by timed congr lean_s24 lean_s25
                            have lean_s27 : (Eq let170 let54) := by timed Eq.trans lean_s26 lean_r57
                            have lean_s28 : let54 := by timed eqResolve lean_a91 lean_s27
                            have lean_s29 : (Eq let54 let91) := by timed Eq.symm lean_r21
                            have lean_s30 : let91 := by timed eqResolve lean_s28 lean_s29
                            have lean_s31 : let206 := by timed And.intro lean_s23 lean_s30
                            have lean_s32 : (Implies let206 let205) := by arithMulPos [let52, let1, let93], 0
                            have lean_s33 : let205 := by timed modusPonens lean_s31 lean_s32
                            have lean_s34 : let19 := by timed trueElim lean_r2
                            have lean_s35 : let27 := by timed eqResolve lean_a87 lean_r15
                            have lean_s36 : (Eq let27 let28) := by timed Eq.symm lean_r3
                            have lean_s37 : let28 := by timed eqResolve lean_s35 lean_s36
                            have lean_s38 : let204 := by timed And.intro lean_s34 lean_s37
                            have lean_s39 : (Implies let204 let203) := by arithMulPos [let25, let6, let18], 0
                            have lean_s40 : let203 := by timed modusPonens lean_s38 lean_s39
                            have lean_s41 : let30 := by timed trueElim lean_r4
                            let lean_s42 := by timed flipCongrArg lean_r37 [LE.le]
                            have lean_s43 : (Eq let172 let114) := by timed congr lean_s42 lean_s25
                            have lean_s44 : (Eq let172 let111) := by timed Eq.trans lean_s43 lean_r29
                            have lean_s45 : let111 := by timed eqResolve lean_a97 lean_s44
                            have lean_s46 : let202 := by timed And.intro lean_s41 lean_s45
                            have lean_s47 : (Implies let202 let201) := by arithMulNeg [let110, let6, let29], 3
                            have lean_s48 : let201 := by timed modusPonens lean_s46 lean_s47
                            have lean_s49 : let169 := by timed trueElim lean_r65
                            have lean_s50 : let200 := by timed And.intro lean_s49 lean_a115
                            have lean_s51 : (Implies let200 let199) := by arithMulNeg [let89, let7, let86], 3
                            have lean_s52 : let199 := by timed modusPonens lean_s50 lean_s51
                            have lean_s53 : let168 := by timed trueElim lean_r63
                            let lean_s54 := by timed flipCongrArg lean_r8 [LE.le]
                            have lean_s55 : (Eq let1 let1) := by timed rfl
                            have lean_s56 : (Eq let171 let83) := by timed congr lean_s54 lean_s55
                            have lean_s57 : (Eq let171 let82) := by timed Eq.trans lean_s56 lean_r19
                            have lean_s58 : let82 := by timed eqResolve lean_a95 lean_s57
                            have lean_s59 : let198 := by timed And.intro lean_s53 lean_s58
                            have lean_s60 : (Implies let198 let197) := by arithMulNeg [let36, let1, let32], 3
                            have lean_s61 : let197 := by timed modusPonens lean_s59 lean_s60
                            have lean_s62 : let139 := by timed trueElim lean_r49
                            let lean_s63 := by timed flipCongrArg lean_r27 [GE.ge]
                            have lean_s64 : (Eq let173 let178) := by timed congr lean_s63 lean_s55
                            have lean_s65 : let178 := by timed eqResolve lean_a101 lean_s64
                            have lean_s66 : let196 := by timed And.intro lean_s62 lean_s65
                            have lean_s67 : (Implies let196 let195) := by arithMulNeg [let103, let1, let115], 3
                            have lean_s68 : let195 := by timed modusPonens lean_s66 lean_s67
                            have lean_s69 : let63 := by timed eqResolve lean_a94 lean_r11
                            have lean_s70 : (Eq let63 let127) := by timed Eq.symm lean_r41
                            have lean_s71 : let127 := by timed eqResolve lean_s69 lean_s70
                            have lean_s72 : let194 := by timed And.intro lean_s16 lean_s71
                            have lean_s73 : (Implies let194 let193) := by arithMulPos [let61, let1, let71], 0
                            have lean_s74 : let193 := by timed modusPonens lean_s72 lean_s73
                            let lean_s75 := by timed flipCongrArg lean_r34 [GE.ge]
                            have lean_s76 : (Eq let175 let180) := by timed congr lean_s75 lean_s55
                            have lean_s77 : let180 := by timed eqResolve lean_a103 lean_s76
                            have lean_s78 : let192 := by timed And.intro lean_s4 lean_s77
                            have lean_s79 : (Implies let192 let191) := by arithMulNeg [let97, let1, let98], 3
                            have lean_s80 : let191 := by timed modusPonens lean_s78 lean_s79
                            have lean_s81 : let166 := by sumBounds [lean_s8, lean_s15, lean_s22, lean_s33, lean_s40, lean_s48, lean_s52, lean_s61, lean_s68, lean_s74, lean_s80]
                            let lean_s82 := by timed congrHAdd lean_r13 lean_r25
                            let lean_s83 := by timed congrHAdd lean_r51 lean_s82
                            let lean_s84 := by timed congrHAdd lean_r5 lean_s83
                            let lean_s85 := by timed congrHAdd lean_r20 lean_s84
                            let lean_s86 := by timed congrHAdd lean_r52 lean_s85
                            let lean_s87 := by timed congrHAdd lean_r53 lean_s86
                            let lean_s88 := by timed congrHAdd lean_r54 lean_s87
                            let lean_s89 := by timed congrHAdd lean_r55 lean_s88
                            let lean_s90 := by timed congrHAdd lean_r58 lean_s89
                            have lean_s91 : (Eq let163 let151) := by timed congrHAdd lean_r28 lean_s90
                            have lean_s92 : (Eq let163 let38) := by timed Eq.trans lean_s91 lean_r50
                            let lean_s93 := by timed flipCongrArg lean_s92 [GE.ge]
                            let lean_s94 := by timed congrHAdd lean_r42 lean_r40
                            let lean_s95 := by timed congrHAdd lean_r30 lean_s94
                            let lean_s96 := by timed congrHAdd lean_r35 lean_s95
                            let lean_s97 := by timed congrHAdd lean_r48 lean_s96
                            let lean_s98 := by timed congrHAdd lean_r38 lean_s97
                            let lean_s99 := by timed congrHAdd lean_r39 lean_s98
                            let lean_s100 := by timed congrHAdd lean_r62 lean_s99
                            let lean_s101 := by timed congrHAdd lean_r45 lean_s100
                            let lean_s102 := by timed congrHAdd lean_r47 lean_s101
                            have lean_s103 : (Eq let162 let157) := by timed congrHAdd lean_r64 lean_s102
                            have lean_s104 : (Eq let162 let38) := by timed Eq.trans lean_s103 lean_r56
                            have lean_s105 : (Eq let164 let39) := by timed congr lean_s93 lean_s104
                            have lean_s106 : (Eq let164 True) := by timed Eq.trans lean_s105 lean_r6
                            have lean_s107 : (Eq let165 let100) := by timed flipCongrArg lean_s106 [Not]
                            have lean_s108 : (Eq let165 False) := by timed Eq.trans lean_s107 lean_r26
                            have lean_s109 : (Eq let166 False) := by timed Eq.trans lean_r59 lean_s108
                            show False from by timed eqResolve lean_s81 lean_s109
                          ))
                        have lean_s5 : let80 := by liftOrNToNeg lean_s4
                        have lean_s6 : (Eq let80 let81) := by timed Eq.symm lean_r18
                        have lean_s7 : let81 := by timed eqResolve lean_s5 lean_s6
                        have lean_s8 : let80 := by timed eqResolve lean_s7 lean_r18
                        show False from by timed contradiction lean_s3 lean_s8
  ))))))))))))))))))))))
have lean_s1 : (Not (And let180 (And let63 (And let178 (And let82 (And let176 (And let111 (And let27 (And let54 (And let16 (And let179 let79))))))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let189 := by timed flipNotAnd lean_s1 [let180, let63, let178, let82, let176, let111, let27, let54, let16, let179, let79]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let182 let182) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let92 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let66 let92) := by timed congr lean_s7 lean_r24
have lean_s9 : (Eq let66 True) := by timed Eq.trans lean_s8 lean_r22
have lean_s10 : (Eq let67 True) := by timed Eq.trans lean_r12 lean_s9
have lean_s11 : let67 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq let184 let184) := by timed rfl
let lean_s14 := by timed congr lean_s3 lean_s13
have lean_s15 : (Eq let186 let186) := by timed rfl
let lean_s16 := by timed congr lean_s3 lean_s15
have lean_s17 : (Eq let181 let181) := by timed rfl
let lean_s18 := by timed congr lean_s3 lean_s17
have lean_s19 : (Eq let185 let185) := by timed rfl
let lean_s20 := by timed congr lean_s3 lean_s19
have lean_s21 : let48 := by timed rfl
let lean_s22 := by timed flipCongrArg lean_s21 [Eq]
have lean_s23 : (Eq let41 let48) := by timed congr lean_s22 lean_r33
have lean_s24 : (Eq let41 True) := by timed Eq.trans lean_s23 lean_r9
have lean_s25 : (Eq let42 True) := by timed Eq.trans lean_r7 lean_s24
have lean_s26 : let42 := by timed trueElim lean_s25
let lean_s27 := by timed congr lean_s3 lean_s26
have lean_s28 : let73 := by timed rfl
let lean_s29 := by timed flipCongrArg lean_s28 [Eq]
have lean_s30 : (Eq let56 let73) := by timed congr lean_s29 lean_r31
have lean_s31 : (Eq let56 True) := by timed Eq.trans lean_s30 lean_r14
have lean_s32 : (Eq let57 True) := by timed Eq.trans lean_r10 lean_s31
have lean_s33 : let57 := by timed trueElim lean_s32
let lean_s34 := by timed congr lean_s3 lean_s33
have lean_s35 : let121 := by timed rfl
let lean_s36 := by timed flipCongrArg lean_s35 [Eq]
have lean_s37 : (Eq let131 let121) := by timed congr lean_s36 lean_r61
have lean_s38 : (Eq let131 True) := by timed Eq.trans lean_s37 lean_r36
have lean_s39 : (Eq let132 True) := by timed Eq.trans lean_r44 lean_s38
have lean_s40 : let132 := by timed trueElim lean_s39
let lean_s41 := by timed congr lean_s3 lean_s40
have lean_s42 : (Eq let183 let183) := by timed rfl
let lean_s43 := by timed congr lean_s3 lean_s42
have lean_s44 : (Eq let80 let80) := by timed rfl
let lean_s45 := by timed congr lean_s43 lean_s44
let lean_s46 := by timed congr lean_s41 lean_s45
let lean_s47 := by timed congr lean_s34 lean_s46
let lean_s48 := by timed congr lean_s27 lean_s47
let lean_s49 := by timed congr lean_s20 lean_s48
let lean_s50 := by timed congr lean_s18 lean_s49
let lean_s51 := by timed congr lean_s16 lean_s50
let lean_s52 := by timed congr lean_s14 lean_s51
let lean_s53 := by timed congr lean_s12 lean_s52
have lean_s54 : (Eq let189 let188) := by timed congr lean_s5 lean_s53
have lean_s55 : let188 := by timed eqResolve lean_s2 lean_s54
have lean_s56 : (Or let26 (Or let53 (Or let15 (Or let62 (Or let186 (Or let185 (Or let184 (Or let183 (Or let182 (Or let181 let80)))))))))) := by permutateOr lean_s55, [6, 7, 8, 1, 3, 5, 2, 9, 0, 4, 10], (- 1)
let lean_s57 := by timed flipCongrArg lean_r32 [GE.ge]
have lean_s58 : (Eq let6 let6) := by timed rfl
have lean_s59 : (Eq let177 let79) := by timed congr lean_s57 lean_s58
have lean_s60 : let79 := by timed eqResolve lean_a107 lean_s59
let lean_s61 := by R2 lean_s56, lean_s60, let79, [(- 1), 0]
let lean_s62 := by R2 lean_s61, lean_a105, let176, [(- 1), 0]
let lean_s63 := by timed flipCongrArg lean_r34 [GE.ge]
have lean_s64 : (Eq let1 let1) := by timed rfl
have lean_s65 : (Eq let175 let180) := by timed congr lean_s63 lean_s64
have lean_s66 : let180 := by timed eqResolve lean_a103 lean_s65
let lean_s67 := by R2 lean_s62, lean_s66, let180, [(- 1), 0]
let lean_s68 := by timed flipCongrArg lean_r46 [GE.ge]
have lean_s69 : (Eq let174 let179) := by timed congr lean_s68 lean_s58
have lean_s70 : let179 := by timed eqResolve lean_a102 lean_s69
let lean_s71 := by R2 lean_s67, lean_s70, let179, [(- 1), 0]
let lean_s72 := by timed flipCongrArg lean_r27 [GE.ge]
have lean_s73 : (Eq let173 let178) := by timed congr lean_s72 lean_s64
have lean_s74 : let178 := by timed eqResolve lean_a101 lean_s73
let lean_s75 := by R2 lean_s71, lean_s74, let178, [(- 1), 0]
let lean_s76 := by timed flipCongrArg lean_r37 [LE.le]
have lean_s77 : (Eq let7 let7) := by timed rfl
have lean_s78 : (Eq let172 let114) := by timed congr lean_s76 lean_s77
have lean_s79 : (Eq let172 let111) := by timed Eq.trans lean_s78 lean_r29
have lean_s80 : let111 := by timed eqResolve lean_a97 lean_s79
let lean_s81 := by R2 lean_s75, lean_s80, let111, [(- 1), 0]
let lean_s82 := by timed flipCongrArg lean_r8 [LE.le]
have lean_s83 : (Eq let171 let83) := by timed congr lean_s82 lean_s64
have lean_s84 : (Eq let171 let82) := by timed Eq.trans lean_s83 lean_r19
have lean_s85 : let82 := by timed eqResolve lean_a95 lean_s84
let lean_s86 := by R2 lean_s81, lean_s85, let82, [(- 1), 0]
have lean_s87 : let63 := by timed eqResolve lean_a94 lean_r11
let lean_s88 := by R1 lean_s86, lean_s87, let62, [(- 1), 0]
have lean_s89 : let16 := by timed eqResolve lean_a93 lean_r17
let lean_s90 := by R1 lean_s88, lean_s89, let15, [(- 1), 0]
let lean_s91 := by timed flipCongrArg lean_r16 [LE.le]
have lean_s92 : (Eq let170 let158) := by timed congr lean_s91 lean_s77
have lean_s93 : (Eq let170 let54) := by timed Eq.trans lean_s92 lean_r57
have lean_s94 : let54 := by timed eqResolve lean_a91 lean_s93
let lean_s95 := by R1 lean_s90, lean_s94, let53, [(- 1), 0]
have lean_s96 : let27 := by timed eqResolve lean_a87 lean_r15
exact (show False from by R1 lean_s95, lean_s96, let26, [0, 0])


