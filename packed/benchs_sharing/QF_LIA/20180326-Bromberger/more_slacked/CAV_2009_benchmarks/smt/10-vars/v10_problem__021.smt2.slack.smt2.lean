open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x2x5fplus : Int}
variable {x2x5fminus : Int}
variable {x3x5fplus : Int}
variable {x3x5fminus : Int}
variable {x1x5fplus : Int}
variable {x1x5fminus : Int}
variable {x7x5fplus : Int}
variable {x7x5fminus : Int}
variable {x0x5fplus : Int}
variable {x7x5fplus : Int}
variable {x8x5fplus : Int}
variable {x0x5fminus : Int}
variable {x8x5fminus : Int}
variable {x7x5fminus : Int}
variable {x6x5fplus : Int}
variable {x6x5fminus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x9x5fplus : Int}
variable {x4x5fplus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x9x5fminus : Int}
variable {x4x5fminus : Int}
variable {x1x5fplus : Int}
variable {x3x5fminus : Int}
variable {x3x5fplus : Int}
variable {x4x5fplus : Int}
variable {x9x5fplus : Int}
variable {x9x5fminus : Int}
variable {x2x5fminus : Int}
variable {x2x5fplus : Int}
variable {x8x5fminus : Int}
variable {x8x5fplus : Int}
variable {x4x5fminus : Int}
variable {x5x5fminus : Int}
variable {x5x5fplus : Int}
variable {x6x5fminus : Int}
variable {x1x5fminus : Int}
variable {x6x5fplus : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Neg.neg (Rat.ofInt 1))
  let let3 := (binrel% LT.lt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% GE.ge let4 let4)
  let let6 := (Int.ofNat 7)
  let let7 := (Int.ofNat 1)
  let let8 := (binrel% HDiv.hDiv let7 let6)
  let let9 := (binrel% HMul.hMul let8 let7)
  let let10 := (Int.ofNat 2)
  let let11 := (Neg.neg let7)
  let let12 := (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x1x5fplus) x1x5fminus)
  let let13 := (binrel% HMul.hMul let11 x2x5fminus)
  let let14 := (binrel% HMul.hMul let11 x8x5fminus)
  let let15 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let13 let12))))
  let let16 := (binrel% GE.ge let15 let10)
  let let17 := (Not let16)
  let let18 := (Not let17)
  let let19 := (Eq let16 let18)
  let let20 := (Eq let18 let16)
  let let21 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let11 x0x5fminus))
  let let22 := (binrel% HMul.hMul let11 x2x5fplus)
  let let23 := (Neg.neg let10)
  let let24 := (binrel% HMul.hMul let11 x9x5fminus)
  let let25 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x4x5fminus) (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x2x5fminus let21))))))))
  let let26 := (binrel% GE.ge let25 let7)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let7)
  let let29 := (Eq let16 let16)
  let let30 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let13 let21))
  let let31 := (binrel% GE.ge let30 let1)
  let let32 := (Not let31)
  let let33 := (Not let32)
  let let34 := (Eq let31 let33)
  let let35 := (Eq let33 let31)
  let let36 := (binrel% HMul.hMul let11 x1x5fminus)
  let let37 := (binrel% HAdd.hAdd x1x5fplus let36)
  let let38 := (binrel% HMul.hMul let11 x7x5fplus)
  let let39 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x7x5fminus let37))))))
  let let40 := (binrel% GE.ge let39 let7)
  let let41 := (Not let40)
  let let42 := (binrel% LE.le let39 let1)
  let let43 := (binrel% HMul.hMul let11 x7x5fminus)
  let let44 := (binrel% HAdd.hAdd x7x5fplus let43)
  let let45 := (binrel% HMul.hMul let11 x0x5fplus)
  let let46 := (binrel% HMul.hMul let11 x8x5fplus)
  let let47 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x0x5fminus let44))))))))
  let let48 := (binrel% GE.ge let47 let7)
  let let49 := (Not let48)
  let let50 := (Not let49)
  let let51 := (Eq let48 let50)
  let let52 := (Eq let50 let48)
  let let53 := (Eq let48 let48)
  let let54 := (binrel% LT.lt let39 let7)
  let let55 := (binrel% HMul.hMul let11 x4x5fplus)
  let let56 := (binrel% HMul.hMul let11 x5x5fplus)
  let let57 := (binrel% HMul.hMul let11 x6x5fminus)
  let let58 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let38 x7x5fminus)))))))))
  let let59 := (binrel% GE.ge let58 let7)
  let let60 := (Not let59)
  let let61 := (Not let60)
  let let62 := (Eq let59 let61)
  let let63 := (Eq let61 let59)
  let let64 := (binrel% HDiv.hDiv (Int.ofNat 4) let6)
  let let65 := (binrel% GT.gt let64 let1)
  let let66 := (binrel% HDiv.hDiv let10 let6)
  let let67 := (binrel% HMul.hMul let8 let10)
  let let68 := (Not let27)
  let let69 := (Eq let26 let68)
  let let70 := (Eq let68 let26)
  let let71 := (binrel% LE.le let25 let1)
  let let72 := (Neg.neg let64)
  let let73 := (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x7x5fplus) (binrel% HMul.hMul let72 x7x5fminus))))))))))
  let let74 := (binrel% HMul.hMul let64 let47)
  let let75 := (binrel% HMul.hMul let11 x4x5fminus)
  let let76 := (binrel% HMul.hMul let11 x5x5fminus)
  let let77 := (binrel% HMul.hMul let11 x6x5fplus)
  let let78 := (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x2x5fminus let44))))))))
  let let79 := (binrel% GE.ge let78 let1)
  let let80 := (binrel% GT.gt let66 let1)
  let let81 := (binrel% HDiv.hDiv (Int.ofNat 3) let6)
  let let82 := (Neg.neg let81)
  let let83 := (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x7x5fplus) (binrel% HMul.hMul let81 x7x5fminus))))))))))
  let let84 := (binrel% HMul.hMul let81 let58)
  let let85 := (Not let41)
  let let86 := (Eq let40 let85)
  let let87 := (Eq let85 let40)
  let let88 := (Eq let40 let40)
  let let89 := (binrel% HAdd.hAdd let55 x4x5fminus)
  let let90 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 let89))
  let let91 := (binrel% GE.ge let90 let1)
  let let92 := (Not let91)
  let let93 := (binrel% LT.lt let90 let1)
  let let94 := (Neg.neg let66)
  let let95 := (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x0x5fplus) (binrel% HMul.hMul let94 x0x5fminus))
  let let96 := (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x2x5fminus) let95))))))))
  let let97 := (binrel% HMul.hMul let66 let25)
  let let98 := (Eq let59 let59)
  let let99 := (binrel% LE.le let47 let1)
  let let100 := (Not True)
  let let101 := (Eq let26 let26)
  let let102 := (binrel% LE.le let15 let7)
  let let103 := (binrel% GT.gt let81 let1)
  let let104 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let94 let66)))))))
  let let105 := (Eq let31 let31)
  let let106 := (binrel% LT.lt let30 let1)
  let let107 := (binrel% HMul.hMul let66 let11)
  let let108 := (binrel% HMul.hMul let82 let7)
  let let109 := (binrel% HMul.hMul let64 let1)
  let let110 := (binrel% HMul.hMul let66 let7)
  let let111 := (binrel% HMul.hMul let81 let1)
  let let112 := (Neg.neg let8)
  let let113 := (binrel% HMul.hMul let112 x8x5fminus)
  let let114 := (binrel% HMul.hMul let8 x8x5fplus)
  let let115 := (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x1x5fplus) (binrel% HMul.hMul let8 x1x5fminus))))))
  let let116 := (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x2x5fminus) let95))
  let let117 := (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x5x5fplus) (binrel% HMul.hMul let82 x5x5fminus))))
  let let118 := (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x9x5fminus) (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x1x5fplus) (binrel% HMul.hMul let112 x1x5fminus))))))))
  let let119 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd x4x5fplus let75))))
  let let120 := (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let116 let115)))))))
  let let121 := (binrel% LT.lt let47 let7)
  let let122 := (binrel% HMul.hMul let2 let1)
  let let123 := (binrel% HMul.hMul let8 let15)
  let let124 := (binrel% HMul.hMul let66 let30)
  let let125 := (binrel% HAdd.hAdd let45 x0x5fminus)
  let let126 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x2x5fminus let125))
  let let127 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let43 let126))))))
  let let128 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let56 x5x5fminus)))
  let let129 := (binrel% HMul.hMul let82 let128)
  let let130 := (binrel% HMul.hMul let8 let39)
  let let131 := (binrel% LE.le let30 let11)
  let let132 := (binrel% HMul.hMul let2 let90)
  let let133 := (binrel% HAdd.hAdd let122 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let110 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd let107 let67)))))))
  let let134 := (binrel% HAdd.hAdd let132 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let97 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let129 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let124 let123)))))))
  let let135 := (binrel% GE.ge let134 let133)
  let let136 := (Not let135)
  let let137 := (binrel% LT.lt let134 let133)
  let let138 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let22 x2x5fminus)))))))))
  let let139 := (binrel% LT.lt let15 let10)
  let let140 := (binrel% GT.gt let8 let1)
  let let141 := (binrel% LT.lt let58 let7)
  let let142 := (binrel% LT.lt let82 let1)
  let let143 := (binrel% HMul.hMul let11 x3x5fplus)
  let let144 := (binrel% HMul.hMul let11 x3x5fminus)
  let let145 := (binrel% HAdd.hAdd x3x5fplus let144)
  let let146 := (binrel% HMul.hMul let23 x6x5fminus)
  let let147 := (binrel% HMul.hMul let10 x6x5fplus)
  let let148 := (binrel% LE.le let127 let1)
  let let149 := (binrel% HAdd.hAdd x2x5fplus let13)
  let let150 := (binrel% GE.ge let138 let1)
  let let151 := (binrel% GE.ge let128 let7)
  let let152 := (Not let151)
  let let153 := (Or let16 (Or let31 (Or let59 (Or let152 (Or let48 (Or let26 (Or let40 let92)))))))
  let let154 := (Or let18 (Or let33 (Or let61 (Or let152 (Or let50 (Or let68 (Or let85 let92)))))))
  let let155 := (Or let92 False)
  let let156 := (binrel% LT.lt let123 let67)
  let let157 := (And let140 let139)
  let let158 := (binrel% LE.le let124 let107)
  let let159 := (And let80 let131)
  let let160 := (binrel% LE.le let84 let111)
  let let161 := (binrel% LE.le let58 let1)
  let let162 := (And let103 let161)
  let let163 := (binrel% LE.le let129 let108)
  let let164 := (And let142 let151)
  let let165 := (binrel% LE.le let74 let109)
  let let166 := (And let65 let99)
  let let167 := (binrel% LT.lt let97 let110)
  let let168 := (And let80 let28)
  let let169 := (binrel% LT.lt let130 let9)
  let let170 := (And let140 let54)
  let let171 := (binrel% LE.le let132 let122)
  let let172 := (And let3 let91)
(Eq let3 True) → (Eq let5 True) → (Eq let9 let8) → (Eq let20 let19) → (Eq let28 let27) → let20 → (Eq let29 True) → (Eq let35 let34) → (Eq let42 let41) → (Eq let52 let51) → (Eq let53 True) → (Eq let54 let41) → (Eq let63 let62) → (Eq let65 True) → (Eq let67 let66) → (Eq let70 let69) → (Eq let71 let27) → (Eq let74 let73) → (Eq let79 let60) → (Eq let80 True) → let35 → let52 → (Eq let84 let83) → (Eq let87 let86) → (Eq let88 True) → (Eq let93 let92) → (Eq let97 let96) → (Eq let98 True) → (Eq let99 let49) → (Eq let100 False) → let63 → (Eq let101 True) → (Eq let102 let17) → let70 → (Eq let103 True) → (Eq let104 let4) → (Eq let105 True) → (Eq let106 let32) → (Eq let107 let94) → (Eq let108 let82) → (Eq let109 let4) → (Eq let110 let66) → (Eq let111 let4) → (Eq let120 let4) → (Eq let121 let49) → (Eq let122 let4) → (Eq let123 let115) → let87 → (Eq let124 let116) → (Eq let127 let47) → (Eq let129 let117) → (Eq let130 let118) → (Eq let131 let32) → (Eq let132 let119) → (Eq let137 let136) → (Eq let138 let78) → (Eq let139 let17) → (Eq let140 True) → (Eq let141 let60) → (Eq let142 True) → (binrel% GE.ge x9x5fplus let1) → (binrel% GE.ge x9x5fminus let1) → (binrel% GE.ge x8x5fplus let1) → (binrel% GE.ge x8x5fminus let1) → (binrel% GE.ge x6x5fplus let1) → (binrel% GE.ge x6x5fminus let1) → (binrel% GE.ge x5x5fplus let1) → (binrel% GE.ge x5x5fminus let1) → (binrel% GE.ge x4x5fplus let1) → (binrel% GE.ge x4x5fminus let1) → (binrel% GE.ge x3x5fplus let1) → (binrel% GE.ge x3x5fminus let1) → (binrel% GE.ge x2x5fplus let1) → (binrel% GE.ge x2x5fminus let1) → (binrel% GE.ge x0x5fplus let1) → (binrel% GE.ge x0x5fminus let1) → (binrel% GE.ge x7x5fplus let1) → (binrel% GE.ge x7x5fminus let1) → (binrel% GE.ge x1x5fplus let1) → (binrel% GE.ge x1x5fminus let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd x3x5fminus let30)))))))))))) let1) → let71 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let75 let145)))))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus let37)))))))) let1) → let148 → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let13 let125)))))) let11) → let42 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let76 let21)))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x7x5fminus) (binrel% HAdd.hAdd let77 x6x5fminus))))) let7) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let76 let125)))) let1) → let102 → (binrel% LE.le (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let36 let21)))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let75 let149)))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x1x5fplus) (binrel% HMul.hMul let10 x1x5fminus)))))) let7) → (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x8x5fminus) let145)) let7) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 let149)) let11) → let131 → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let57 let89)) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus let126)))))))) let11) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let143 x3x5fminus))))))))) let1) → let150 → (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let144 let12)))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x9x5fminus) (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x6x5fminus) let125)))))) let1) → let151 → let91 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Neg.neg (Rat.ofInt 1))
  let let3 := (binrel% LT.lt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% GE.ge let4 let4)
  let let6 := (Int.ofNat 7)
  let let7 := (Int.ofNat 1)
  let let8 := (binrel% HDiv.hDiv let7 let6)
  let let9 := (binrel% HMul.hMul let8 let7)
  let let10 := (Int.ofNat 2)
  let let11 := (Neg.neg let7)
  let let12 := (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x1x5fplus) x1x5fminus)
  let let13 := (binrel% HMul.hMul let11 x2x5fminus)
  let let14 := (binrel% HMul.hMul let11 x8x5fminus)
  let let15 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let13 let12))))
  let let16 := (binrel% GE.ge let15 let10)
  let let17 := (Not let16)
  let let18 := (Not let17)
  let let19 := (Eq let16 let18)
  let let20 := (Eq let18 let16)
  let let21 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let11 x0x5fminus))
  let let22 := (binrel% HMul.hMul let11 x2x5fplus)
  let let23 := (Neg.neg let10)
  let let24 := (binrel% HMul.hMul let11 x9x5fminus)
  let let25 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x4x5fminus) (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x2x5fminus let21))))))))
  let let26 := (binrel% GE.ge let25 let7)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let7)
  let let29 := (Eq let16 let16)
  let let30 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let13 let21))
  let let31 := (binrel% GE.ge let30 let1)
  let let32 := (Not let31)
  let let33 := (Not let32)
  let let34 := (Eq let31 let33)
  let let35 := (Eq let33 let31)
  let let36 := (binrel% HMul.hMul let11 x1x5fminus)
  let let37 := (binrel% HAdd.hAdd x1x5fplus let36)
  let let38 := (binrel% HMul.hMul let11 x7x5fplus)
  let let39 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x7x5fminus let37))))))
  let let40 := (binrel% GE.ge let39 let7)
  let let41 := (Not let40)
  let let42 := (binrel% LE.le let39 let1)
  let let43 := (binrel% HMul.hMul let11 x7x5fminus)
  let let44 := (binrel% HAdd.hAdd x7x5fplus let43)
  let let45 := (binrel% HMul.hMul let11 x0x5fplus)
  let let46 := (binrel% HMul.hMul let11 x8x5fplus)
  let let47 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x2x5fminus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x0x5fminus let44))))))))
  let let48 := (binrel% GE.ge let47 let7)
  let let49 := (Not let48)
  let let50 := (Not let49)
  let let51 := (Eq let48 let50)
  let let52 := (Eq let50 let48)
  let let53 := (Eq let48 let48)
  let let54 := (binrel% LT.lt let39 let7)
  let let55 := (binrel% HMul.hMul let11 x4x5fplus)
  let let56 := (binrel% HMul.hMul let11 x5x5fplus)
  let let57 := (binrel% HMul.hMul let11 x6x5fminus)
  let let58 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let38 x7x5fminus)))))))))
  let let59 := (binrel% GE.ge let58 let7)
  let let60 := (Not let59)
  let let61 := (Not let60)
  let let62 := (Eq let59 let61)
  let let63 := (Eq let61 let59)
  let let64 := (binrel% HDiv.hDiv (Int.ofNat 4) let6)
  let let65 := (binrel% GT.gt let64 let1)
  let let66 := (binrel% HDiv.hDiv let10 let6)
  let let67 := (binrel% HMul.hMul let8 let10)
  let let68 := (Not let27)
  let let69 := (Eq let26 let68)
  let let70 := (Eq let68 let26)
  let let71 := (binrel% LE.le let25 let1)
  let let72 := (Neg.neg let64)
  let let73 := (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x7x5fplus) (binrel% HMul.hMul let72 x7x5fminus))))))))))
  let let74 := (binrel% HMul.hMul let64 let47)
  let let75 := (binrel% HMul.hMul let11 x4x5fminus)
  let let76 := (binrel% HMul.hMul let11 x5x5fminus)
  let let77 := (binrel% HMul.hMul let11 x6x5fplus)
  let let78 := (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x2x5fminus let44))))))))
  let let79 := (binrel% GE.ge let78 let1)
  let let80 := (binrel% GT.gt let66 let1)
  let let81 := (binrel% HDiv.hDiv (Int.ofNat 3) let6)
  let let82 := (Neg.neg let81)
  let let83 := (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x7x5fplus) (binrel% HMul.hMul let81 x7x5fminus))))))))))
  let let84 := (binrel% HMul.hMul let81 let58)
  let let85 := (Not let41)
  let let86 := (Eq let40 let85)
  let let87 := (Eq let85 let40)
  let let88 := (Eq let40 let40)
  let let89 := (binrel% HAdd.hAdd let55 x4x5fminus)
  let let90 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 let89))
  let let91 := (binrel% GE.ge let90 let1)
  let let92 := (Not let91)
  let let93 := (binrel% LT.lt let90 let1)
  let let94 := (Neg.neg let66)
  let let95 := (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x0x5fplus) (binrel% HMul.hMul let94 x0x5fminus))
  let let96 := (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let72 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let64 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x2x5fminus) let95))))))))
  let let97 := (binrel% HMul.hMul let66 let25)
  let let98 := (Eq let59 let59)
  let let99 := (binrel% LE.le let47 let1)
  let let100 := (Not True)
  let let101 := (Eq let26 let26)
  let let102 := (binrel% LE.le let15 let7)
  let let103 := (binrel% GT.gt let81 let1)
  let let104 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let94 let66)))))))
  let let105 := (Eq let31 let31)
  let let106 := (binrel% LT.lt let30 let1)
  let let107 := (binrel% HMul.hMul let66 let11)
  let let108 := (binrel% HMul.hMul let82 let7)
  let let109 := (binrel% HMul.hMul let64 let1)
  let let110 := (binrel% HMul.hMul let66 let7)
  let let111 := (binrel% HMul.hMul let81 let1)
  let let112 := (Neg.neg let8)
  let let113 := (binrel% HMul.hMul let112 x8x5fminus)
  let let114 := (binrel% HMul.hMul let8 x8x5fplus)
  let let115 := (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x2x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x1x5fplus) (binrel% HMul.hMul let8 x1x5fminus))))))
  let let116 := (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let94 x2x5fminus) let95))
  let let117 := (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let81 x5x5fplus) (binrel% HMul.hMul let82 x5x5fminus))))
  let let118 := (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x9x5fminus) (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd (binrel% HMul.hMul let112 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x1x5fplus) (binrel% HMul.hMul let112 x1x5fminus))))))))
  let let119 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd x4x5fplus let75))))
  let let120 := (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let117 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let116 let115)))))))
  let let121 := (binrel% LT.lt let47 let7)
  let let122 := (binrel% HMul.hMul let2 let1)
  let let123 := (binrel% HMul.hMul let8 let15)
  let let124 := (binrel% HMul.hMul let66 let30)
  let let125 := (binrel% HAdd.hAdd let45 x0x5fminus)
  let let126 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x2x5fminus let125))
  let let127 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let43 let126))))))
  let let128 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let56 x5x5fminus)))
  let let129 := (binrel% HMul.hMul let82 let128)
  let let130 := (binrel% HMul.hMul let8 let39)
  let let131 := (binrel% LE.le let30 let11)
  let let132 := (binrel% HMul.hMul let2 let90)
  let let133 := (binrel% HAdd.hAdd let122 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let110 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd let107 let67)))))))
  let let134 := (binrel% HAdd.hAdd let132 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let97 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let129 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let124 let123)))))))
  let let135 := (binrel% GE.ge let134 let133)
  let let136 := (Not let135)
  let let137 := (binrel% LT.lt let134 let133)
  let let138 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let22 x2x5fminus)))))))))
  let let139 := (binrel% LT.lt let15 let10)
  let let140 := (binrel% GT.gt let8 let1)
  let let141 := (binrel% LT.lt let58 let7)
  let let142 := (binrel% LT.lt let82 let1)
  let let143 := (binrel% HMul.hMul let11 x3x5fplus)
  let let144 := (binrel% HMul.hMul let11 x3x5fminus)
  let let145 := (binrel% HAdd.hAdd x3x5fplus let144)
  let let146 := (binrel% HMul.hMul let23 x6x5fminus)
  let let147 := (binrel% HMul.hMul let10 x6x5fplus)
  let let148 := (binrel% LE.le let127 let1)
  let let149 := (binrel% HAdd.hAdd x2x5fplus let13)
  let let150 := (binrel% GE.ge let138 let1)
  let let151 := (binrel% GE.ge let128 let7)
  let let152 := (Not let151)
  let let153 := (Or let16 (Or let31 (Or let59 (Or let152 (Or let48 (Or let26 (Or let40 let92)))))))
  let let154 := (Or let18 (Or let33 (Or let61 (Or let152 (Or let50 (Or let68 (Or let85 let92)))))))
  let let155 := (Or let92 False)
  let let156 := (binrel% LT.lt let123 let67)
  let let157 := (And let140 let139)
  let let158 := (binrel% LE.le let124 let107)
  let let159 := (And let80 let131)
  let let160 := (binrel% LE.le let84 let111)
  let let161 := (binrel% LE.le let58 let1)
  let let162 := (And let103 let161)
  let let163 := (binrel% LE.le let129 let108)
  let let164 := (And let142 let151)
  let let165 := (binrel% LE.le let74 let109)
  let let166 := (And let65 let99)
  let let167 := (binrel% LT.lt let97 let110)
  let let168 := (And let80 let28)
  let let169 := (binrel% LT.lt let130 let9)
  let let170 := (And let140 let54)
  let let171 := (binrel% LE.le let132 let122)
  let let172 := (And let3 let91)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let5 True) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let20 let19) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r5 : let20 => -- THEORY_REWRITE_BOOL
fun lean_r6 : (Eq let29 True) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let35 let34) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let52 let51) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let53 True) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let54 let41) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let63 let62) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let65 True) => -- EVALUATE
fun lean_r14 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let70 let69) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let71 let27) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let74 let73) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let79 let60) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let80 True) => -- EVALUATE
fun lean_r20 : let35 => -- THEORY_REWRITE_BOOL
fun lean_r21 : let52 => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let84 let83) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let87 let86) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let88 True) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let93 let92) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let97 let96) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let98 True) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let99 let49) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let100 False) => -- THEORY_REWRITE_BOOL
fun lean_r30 : let63 => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let101 True) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let102 let17) => -- THEORY_REWRITE_ARITH
fun lean_r33 : let70 => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let103 True) => -- EVALUATE
fun lean_r35 : (Eq let104 let4) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let105 True) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let106 let32) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let107 let94) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let108 let82) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let109 let4) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let110 let66) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let111 let4) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let120 let4) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let121 let49) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let122 let4) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let123 let115) => -- THEORY_REWRITE_ARITH
fun lean_r47 : let87 => -- THEORY_REWRITE_BOOL
fun lean_r48 : (Eq let124 let116) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let127 let47) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let129 let117) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let130 let118) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let131 let32) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let132 let119) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let137 let136) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let138 let78) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let139 let17) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let140 True) => -- EVALUATE
fun lean_r58 : (Eq let141 let60) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let142 True) => -- EVALUATE
fun lean_a60 : (binrel% GE.ge x9x5fplus let1) =>
fun lean_a61 : (binrel% GE.ge x9x5fminus let1) =>
fun lean_a62 : (binrel% GE.ge x8x5fplus let1) =>
fun lean_a63 : (binrel% GE.ge x8x5fminus let1) =>
fun lean_a64 : (binrel% GE.ge x6x5fplus let1) =>
fun lean_a65 : (binrel% GE.ge x6x5fminus let1) =>
fun lean_a66 : (binrel% GE.ge x5x5fplus let1) =>
fun lean_a67 : (binrel% GE.ge x5x5fminus let1) =>
fun lean_a68 : (binrel% GE.ge x4x5fplus let1) =>
fun lean_a69 : (binrel% GE.ge x4x5fminus let1) =>
fun lean_a70 : (binrel% GE.ge x3x5fplus let1) =>
fun lean_a71 : (binrel% GE.ge x3x5fminus let1) =>
fun lean_a72 : (binrel% GE.ge x2x5fplus let1) =>
fun lean_a73 : (binrel% GE.ge x2x5fminus let1) =>
fun lean_a74 : (binrel% GE.ge x0x5fplus let1) =>
fun lean_a75 : (binrel% GE.ge x0x5fminus let1) =>
fun lean_a76 : (binrel% GE.ge x7x5fplus let1) =>
fun lean_a77 : (binrel% GE.ge x7x5fminus let1) =>
fun lean_a78 : (binrel% GE.ge x1x5fplus let1) =>
fun lean_a79 : (binrel% GE.ge x1x5fminus let1) =>
fun lean_a80 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd x3x5fminus let30)))))))))))) let1) =>
fun lean_a81 : let71 =>
fun lean_a82 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let75 let145)))))))) let1) =>
fun lean_a83 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus let37)))))))) let1) =>
fun lean_a84 : let148 =>
fun lean_a85 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let13 let125)))))) let11) =>
fun lean_a86 : let42 =>
fun lean_a87 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let76 let21)))))) let1) =>
fun lean_a88 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x7x5fminus) (binrel% HAdd.hAdd let77 x6x5fminus))))) let7) =>
fun lean_a89 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let76 let125)))) let1) =>
fun lean_a90 : let102 =>
fun lean_a91 : (binrel% LE.le (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let36 let21)))) let1) =>
fun lean_a92 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let75 let149)))) let1) =>
fun lean_a93 : (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x1x5fplus) (binrel% HMul.hMul let10 x1x5fminus)))))) let7) =>
fun lean_a94 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x8x5fminus) let145)) let7) =>
fun lean_a95 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 let149)) let11) =>
fun lean_a96 : let131 =>
fun lean_a97 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let57 let89)) let1) =>
fun lean_a98 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus let126)))))))) let11) =>
fun lean_a99 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let143 x3x5fminus))))))))) let1) =>
fun lean_a100 : let150 =>
fun lean_a101 : (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let144 let12)))))) let1) =>
fun lean_a102 : (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x9x5fminus) (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd (binrel% HMul.hMul let23 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let10 x6x5fminus) let125)))))) let1) =>
fun lean_a103 : let151 =>
fun lean_a104 : let91 => by
have lean_s0 : (Or let18 (Or let33 (Or let61 (Or let152 (Or let50 (Or let68 (Or let85 let155))))))) :=
  (scope (fun lean_a105 : let17 =>
    (scope (fun lean_a106 : let32 =>
      (scope (fun lean_a107 : let60 =>
        (scope (fun lean_a108 : let151 =>
          (scope (fun lean_a109 : let49 =>
            (scope (fun lean_a110 : let27 =>
              (scope (fun lean_a111 : let41 =>
                (scope (fun lean_a112 : let91 =>
                  have lean_s0 : let155 :=
                    (scope (fun lean_a111 : let91 =>
                      have lean_s0 : let3 := by timed trueElim lean_r0
                      have lean_s1 : let172 := by timed And.intro lean_s0 lean_a111
                      have lean_s2 : (Implies let172 let171) := by arithMulNeg [let90, let1, let2], 3
                      have lean_s3 : let171 := by timed modusPonens lean_s1 lean_s2
                      have lean_s4 : let140 := by timed trueElim lean_r57
                      have lean_s5 : let41 := by timed eqResolve lean_a86 lean_r8
                      have lean_s6 : (Eq let41 let54) := by timed Eq.symm lean_r11
                      have lean_s7 : let54 := by timed eqResolve lean_s5 lean_s6
                      have lean_s8 : let170 := by timed And.intro lean_s4 lean_s7
                      have lean_s9 : (Implies let170 let169) := by arithMulPos [let39, let7, let8], 0
                      have lean_s10 : let169 := by timed modusPonens lean_s8 lean_s9
                      have lean_s11 : let80 := by timed trueElim lean_r19
                      have lean_s12 : let27 := by timed eqResolve lean_a81 lean_r16
                      have lean_s13 : (Eq let27 let28) := by timed Eq.symm lean_r4
                      have lean_s14 : let28 := by timed eqResolve lean_s12 lean_s13
                      have lean_s15 : let168 := by timed And.intro lean_s11 lean_s14
                      have lean_s16 : (Implies let168 let167) := by arithMulPos [let25, let7, let66], 0
                      have lean_s17 : let167 := by timed modusPonens lean_s15 lean_s16
                      have lean_s18 : let65 := by timed trueElim lean_r13
                      let lean_s19 := by timed flipCongrArg lean_r49 [LE.le]
                      have lean_s20 : (Eq let1 let1) := by timed rfl
                      have lean_s21 : (Eq let148 let99) := by timed congr lean_s19 lean_s20
                      have lean_s22 : (Eq let148 let49) := by timed Eq.trans lean_s21 lean_r28
                      have lean_s23 : let49 := by timed eqResolve lean_a84 lean_s22
                      have lean_s24 : (Eq let49 let121) := by timed Eq.symm lean_r44
                      have lean_s25 : let121 := by timed eqResolve lean_s23 lean_s24
                      have lean_s26 : let99 := by intTightUb lean_s25
                      have lean_s27 : let166 := by timed And.intro lean_s18 lean_s26
                      have lean_s28 : (Implies let166 let165) := by arithMulPos [let47, let1, let64], 1
                      have lean_s29 : let165 := by timed modusPonens lean_s27 lean_s28
                      have lean_s30 : let142 := by timed trueElim lean_r59
                      have lean_s31 : let164 := by timed And.intro lean_s30 lean_a108
                      have lean_s32 : (Implies let164 let163) := by arithMulNeg [let128, let7, let82], 3
                      have lean_s33 : let163 := by timed modusPonens lean_s31 lean_s32
                      have lean_s34 : let103 := by timed trueElim lean_r34
                      let lean_s35 := by timed flipCongrArg lean_r55 [GE.ge]
                      have lean_s36 : (Eq let150 let79) := by timed congr lean_s35 lean_s20
                      have lean_s37 : (Eq let150 let60) := by timed Eq.trans lean_s36 lean_r18
                      have lean_s38 : let60 := by timed eqResolve lean_a100 lean_s37
                      have lean_s39 : (Eq let60 let141) := by timed Eq.symm lean_r58
                      have lean_s40 : let141 := by timed eqResolve lean_s38 lean_s39
                      have lean_s41 : let161 := by intTightUb lean_s40
                      have lean_s42 : let162 := by timed And.intro lean_s34 lean_s41
                      have lean_s43 : (Implies let162 let160) := by arithMulPos [let58, let1, let81], 1
                      have lean_s44 : let160 := by timed modusPonens lean_s42 lean_s43
                      have lean_s45 : let32 := by timed eqResolve lean_a96 lean_r52
                      have lean_s46 : (Eq let32 let106) := by timed Eq.symm lean_r37
                      have lean_s47 : let106 := by timed eqResolve lean_s45 lean_s46
                      have lean_s48 : let131 := by intTightUb lean_s47
                      have lean_s49 : let159 := by timed And.intro lean_s11 lean_s48
                      have lean_s50 : (Implies let159 let158) := by arithMulPos [let30, let11, let66], 1
                      have lean_s51 : let158 := by timed modusPonens lean_s49 lean_s50
                      have lean_s52 : let17 := by timed eqResolve lean_a90 lean_r32
                      have lean_s53 : (Eq let17 let139) := by timed Eq.symm lean_r56
                      have lean_s54 : let139 := by timed eqResolve lean_s52 lean_s53
                      have lean_s55 : let157 := by timed And.intro lean_s4 lean_s54
                      have lean_s56 : (Implies let157 let156) := by arithMulPos [let15, let10, let8], 0
                      have lean_s57 : let156 := by timed modusPonens lean_s55 lean_s56
                      have lean_s58 : let137 := by sumBounds [lean_s3, lean_s10, lean_s17, lean_s29, lean_s33, lean_s44, lean_s51, lean_s57]
                      let lean_s59 := by timed congrHAdd lean_r48 lean_r46
                      let lean_s60 := by timed congrHAdd lean_r22 lean_s59
                      let lean_s61 := by timed congrHAdd lean_r50 lean_s60
                      let lean_s62 := by timed congrHAdd lean_r17 lean_s61
                      let lean_s63 := by timed congrHAdd lean_r26 lean_s62
                      let lean_s64 := by timed congrHAdd lean_r51 lean_s63
                      have lean_s65 : (Eq let134 let120) := by timed congrHAdd lean_r53 lean_s64
                      have lean_s66 : (Eq let134 let4) := by timed Eq.trans lean_s65 lean_r43
                      let lean_s67 := by timed flipCongrArg lean_s66 [GE.ge]
                      let lean_s68 := by timed congrHAdd lean_r38 lean_r14
                      let lean_s69 := by timed congrHAdd lean_r42 lean_s68
                      let lean_s70 := by timed congrHAdd lean_r39 lean_s69
                      let lean_s71 := by timed congrHAdd lean_r40 lean_s70
                      let lean_s72 := by timed congrHAdd lean_r41 lean_s71
                      let lean_s73 := by timed congrHAdd lean_r2 lean_s72
                      have lean_s74 : (Eq let133 let104) := by timed congrHAdd lean_r45 lean_s73
                      have lean_s75 : (Eq let133 let4) := by timed Eq.trans lean_s74 lean_r35
                      have lean_s76 : (Eq let135 let5) := by timed congr lean_s67 lean_s75
                      have lean_s77 : (Eq let135 True) := by timed Eq.trans lean_s76 lean_r1
                      have lean_s78 : (Eq let136 let100) := by timed flipCongrArg lean_s77 [Not]
                      have lean_s79 : (Eq let136 False) := by timed Eq.trans lean_s78 lean_r29
                      have lean_s80 : (Eq let137 False) := by timed Eq.trans lean_r54 lean_s79
                      show False from by timed eqResolve lean_s58 lean_s80
                    ))
                  have lean_s1 : let92 := by liftOrNToNeg lean_s0
                  have lean_s2 : (Eq let92 let93) := by timed Eq.symm lean_r25
                  have lean_s3 : let93 := by timed eqResolve lean_s1 lean_s2
                  have lean_s4 : let92 := by timed eqResolve lean_s3 lean_r25
                  show False from by timed contradiction lean_a112 lean_s4
  ))))))))))))))))
have lean_s1 : (Not (And let17 (And let32 (And let60 (And let151 (And let49 (And let27 (And let41 let91)))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let154 := by timed flipNotAnd lean_s1 [let17, let32, let60, let151, let49, let27, let41, let91]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let29 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let19 let29) := by timed congr lean_s5 lean_r5
have lean_s7 : (Eq let19 True) := by timed Eq.trans lean_s6 lean_r6
have lean_s8 : (Eq let20 True) := by timed Eq.trans lean_r3 lean_s7
have lean_s9 : let20 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let105 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let34 let105) := by timed congr lean_s12 lean_r20
have lean_s14 : (Eq let34 True) := by timed Eq.trans lean_s13 lean_r36
have lean_s15 : (Eq let35 True) := by timed Eq.trans lean_r7 lean_s14
have lean_s16 : let35 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let98 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let62 let98) := by timed congr lean_s19 lean_r30
have lean_s21 : (Eq let62 True) := by timed Eq.trans lean_s20 lean_r27
have lean_s22 : (Eq let63 True) := by timed Eq.trans lean_r12 lean_s21
have lean_s23 : let63 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : (Eq let152 let152) := by timed rfl
let lean_s26 := by timed congr lean_s3 lean_s25
have lean_s27 : let53 := by timed rfl
let lean_s28 := by timed flipCongrArg lean_s27 [Eq]
have lean_s29 : (Eq let51 let53) := by timed congr lean_s28 lean_r21
have lean_s30 : (Eq let51 True) := by timed Eq.trans lean_s29 lean_r10
have lean_s31 : (Eq let52 True) := by timed Eq.trans lean_r9 lean_s30
have lean_s32 : let52 := by timed trueElim lean_s31
let lean_s33 := by timed congr lean_s3 lean_s32
have lean_s34 : let101 := by timed rfl
let lean_s35 := by timed flipCongrArg lean_s34 [Eq]
have lean_s36 : (Eq let69 let101) := by timed congr lean_s35 lean_r33
have lean_s37 : (Eq let69 True) := by timed Eq.trans lean_s36 lean_r31
have lean_s38 : (Eq let70 True) := by timed Eq.trans lean_r15 lean_s37
have lean_s39 : let70 := by timed trueElim lean_s38
let lean_s40 := by timed congr lean_s3 lean_s39
have lean_s41 : let88 := by timed rfl
let lean_s42 := by timed flipCongrArg lean_s41 [Eq]
have lean_s43 : (Eq let86 let88) := by timed congr lean_s42 lean_r47
have lean_s44 : (Eq let86 True) := by timed Eq.trans lean_s43 lean_r24
have lean_s45 : (Eq let87 True) := by timed Eq.trans lean_r23 lean_s44
have lean_s46 : let87 := by timed trueElim lean_s45
let lean_s47 := by timed congr lean_s3 lean_s46
have lean_s48 : (Eq let92 let92) := by timed rfl
let lean_s49 := by timed congr lean_s47 lean_s48
let lean_s50 := by timed congr lean_s40 lean_s49
let lean_s51 := by timed congr lean_s33 lean_s50
let lean_s52 := by timed congr lean_s26 lean_s51
let lean_s53 := by timed congr lean_s24 lean_s52
let lean_s54 := by timed congr lean_s17 lean_s53
have lean_s55 : (Eq let154 let153) := by timed congr lean_s10 lean_s54
have lean_s56 : let153 := by timed eqResolve lean_s2 lean_s55
have lean_s57 : (Or let26 (Or let48 (Or let40 (Or let16 (Or let31 (Or let59 (Or let152 let92))))))) := by permutateOr lean_s56, [5, 4, 6, 0, 1, 2, 3, 7], (- 1)
let lean_s58 := by R2 lean_s57, lean_a104, let91, [(- 1), 0]
let lean_s59 := by R2 lean_s58, lean_a103, let151, [(- 1), 0]
let lean_s60 := by timed flipCongrArg lean_r55 [GE.ge]
have lean_s61 : (Eq let1 let1) := by timed rfl
have lean_s62 : (Eq let150 let79) := by timed congr lean_s60 lean_s61
have lean_s63 : (Eq let150 let60) := by timed Eq.trans lean_s62 lean_r18
have lean_s64 : let60 := by timed eqResolve lean_a100 lean_s63
let lean_s65 := by R1 lean_s59, lean_s64, let59, [(- 1), 0]
have lean_s66 : let32 := by timed eqResolve lean_a96 lean_r52
let lean_s67 := by R1 lean_s65, lean_s66, let31, [(- 1), 0]
have lean_s68 : let17 := by timed eqResolve lean_a90 lean_r32
let lean_s69 := by R1 lean_s67, lean_s68, let16, [(- 1), 0]
have lean_s70 : let41 := by timed eqResolve lean_a86 lean_r8
let lean_s71 := by R1 lean_s69, lean_s70, let40, [(- 1), 0]
let lean_s72 := by timed flipCongrArg lean_r49 [LE.le]
have lean_s73 : (Eq let148 let99) := by timed congr lean_s72 lean_s61
have lean_s74 : (Eq let148 let49) := by timed Eq.trans lean_s73 lean_r28
have lean_s75 : let49 := by timed eqResolve lean_a84 lean_s74
let lean_s76 := by R1 lean_s71, lean_s75, let48, [(- 1), 0]
have lean_s77 : let27 := by timed eqResolve lean_a81 lean_r16
exact (show False from by R1 lean_s76, lean_s77, let26, [0, 0])


