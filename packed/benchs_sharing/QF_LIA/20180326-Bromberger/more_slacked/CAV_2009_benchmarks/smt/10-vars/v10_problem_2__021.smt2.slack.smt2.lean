open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x7x5fplus : Int}
variable {x7x5fminus : Int}
variable {x6x5fplus : Int}
variable {x6x5fminus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x8x5fplus : Int}
variable {x8x5fminus : Int}
variable {x4x5fplus : Int}
variable {x1x5fplus : Int}
variable {x5x5fminus : Int}
variable {x4x5fplus : Int}
variable {x8x5fminus : Int}
variable {x3x5fplus : Int}
variable {x4x5fminus : Int}
variable {x9x5fplus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x9x5fminus : Int}
variable {x9x5fplus : Int}
variable {x2x5fminus : Int}
variable {x3x5fplus : Int}
variable {x8x5fplus : Int}
variable {x3x5fminus : Int}
variable {x2x5fplus : Int}
variable {x9x5fminus : Int}
variable {x0x5fminus : Int}
variable {x1x5fminus : Int}
variable {x2x5fminus : Int}
variable {x5x5fplus : Int}
variable {x3x5fminus : Int}
variable {x6x5fminus : Int}
variable {x6x5fplus : Int}
variable {x4x5fminus : Int}
variable {x0x5fplus : Int}
variable {x7x5fminus : Int}
variable {x7x5fplus : Int}
variable {x2x5fplus : Int}
variable {x1x5fminus : Int}
variable {x1x5fplus : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 4)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 x5x5fplus)
  let let7 := (binrel% HAdd.hAdd let6 x5x5fminus)
  let let8 := (Int.ofNat 2)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% HMul.hMul let5 x7x5fminus)
  let let11 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x6x5fminus) let7))))
  let let12 := (binrel% GE.ge let11 let4)
  let let13 := (Not let12)
  let let14 := (binrel% LT.lt let11 let4)
  let let15 := (Rat.ofInt 1)
  let let16 := (binrel% HMul.hMul let15 let5)
  let let17 := (Neg.neg let2)
  let let18 := (binrel% HMul.hMul let17 let1)
  let let19 := (Rat.ofInt 3)
  let let20 := (binrel% HMul.hMul let19 let5)
  let let21 := (Neg.neg let19)
  let let22 := (binrel% HMul.hMul let21 let5)
  let let23 := (Rat.ofInt 2)
  let let24 := (binrel% HMul.hMul let23 let5)
  let let25 := (binrel% HMul.hMul let2 let4)
  let let26 := (Neg.neg let15)
  let let27 := (binrel% HMul.hMul let26 let4)
  let let28 := (binrel% HMul.hMul let15 let1)
  let let29 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let18 let16))))))))
  let let30 := (binrel% HAdd.hAdd x7x5fplus let10)
  let let31 := (binrel% HMul.hMul let15 let30)
  let let32 := (binrel% HMul.hMul let5 x6x5fplus)
  let let33 := (binrel% HMul.hMul let5 x9x5fminus)
  let let34 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x6x5fminus let7))))
  let let35 := (binrel% HMul.hMul let17 let34)
  let let36 := (binrel% HMul.hMul let5 x3x5fplus)
  let let37 := (binrel% HAdd.hAdd let36 x3x5fminus)
  let let38 := (binrel% HMul.hMul let5 x0x5fminus)
  let let39 := (binrel% HMul.hMul let5 x4x5fplus)
  let let40 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let38 let37))))))
  let let41 := (binrel% HMul.hMul let19 let40)
  let let42 := (binrel% HMul.hMul let5 x8x5fplus)
  let let43 := (binrel% HMul.hMul let9 x9x5fminus)
  let let44 := (binrel% HMul.hMul let8 x9x5fplus)
  let let45 := (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x4x5fminus let37))))))
  let let46 := (binrel% HMul.hMul let21 let45)
  let let47 := (binrel% HAdd.hAdd x0x5fplus let38)
  let let48 := (binrel% HMul.hMul let5 x4x5fminus)
  let let49 := (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let48 let47))))
  let let50 := (binrel% HMul.hMul let5 x6x5fminus)
  let let51 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 let49))))
  let let52 := (binrel% HMul.hMul let23 let51)
  let let53 := (binrel% HMul.hMul let5 x8x5fminus)
  let let54 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let53 let49))))))
  let let55 := (binrel% HMul.hMul let17 let54)
  let let56 := (binrel% HMul.hMul let2 let11)
  let let57 := (binrel% HMul.hMul let9 x5x5fminus)
  let let58 := (binrel% HMul.hMul let8 x5x5fplus)
  let let59 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x4x5fminus let47))))))))
  let let60 := (binrel% HMul.hMul let26 let59)
  let let61 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x4x5fplus let48)))
  let let62 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let53 let61))))
  let let63 := (binrel% HMul.hMul let15 let62)
  let let64 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let35 let31))))))))
  let let65 := (binrel% GE.ge let64 let29)
  let let66 := (Not let65)
  let let67 := (binrel% LT.lt let64 let29)
  let let68 := (Rat.ofInt let62)
  let let69 := (Int.ofNat 3)
  let let70 := (Neg.neg let69)
  let let71 := (Int.ofNat 6)
  let let72 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let71) x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let71 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x3x5fplus) (binrel% HMul.hMul let70 x3x5fminus)))))))))
  let let73 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x3x5fplus) (binrel% HMul.hMul let69 x3x5fminus)))))))))
  let let74 := (Int.ofNat 4)
  let let75 := (Neg.neg let74)
  let let76 := (binrel% HMul.hMul let75 x5x5fminus)
  let let77 := (binrel% HMul.hMul let74 x5x5fplus)
  let let78 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x6x5fminus) (binrel% HAdd.hAdd let77 let76))))))
  let let79 := (Rat.ofInt let30)
  let let80 := (Rat.ofInt 0)
  let let81 := (binrel% HMul.hMul let9 x4x5fminus)
  let let82 := (binrel% HMul.hMul let8 x4x5fplus)
  let let83 := (binrel% HMul.hMul let8 x5x5fminus)
  let let84 := (binrel% HMul.hMul let9 x5x5fplus)
  let let85 := (binrel% HMul.hMul let9 x6x5fminus)
  let let86 := (binrel% HMul.hMul let8 x6x5fplus)
  let let87 := (Rat.ofInt (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x0x5fplus) (binrel% HMul.hMul let9 x0x5fminus)))))))))))
  let let88 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x8x5fminus) (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x0x5fplus) (binrel% HMul.hMul let74 x0x5fminus)))))))))))))
  let let89 := (Int.ofNat 8)
  let let90 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let89) x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let89 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x5x5fplus) (binrel% HMul.hMul let74 x5x5fminus)))))))
  let let91 := (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x0x5fplus) x0x5fminus)
  let let92 := (binrel% HMul.hMul let5 x7x5fplus)
  let let93 := (Rat.ofInt (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let48 let91)))))))))
  let let94 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let93 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let78 let79))))))))
  let let95 := (binrel% GT.gt let19 let1)
  let let96 := (binrel% GE.ge let40 let1)
  let let97 := (Not let96)
  let let98 := (binrel% LT.lt let40 let1)
  let let99 := (binrel% GE.ge let62 let4)
  let let100 := (Not let99)
  let let101 := (Not let100)
  let let102 := (Eq let101 let99)
  let let103 := (binrel% LT.lt let62 let4)
  let let104 := (binrel% GE.ge let80 let80)
  let let105 := (binrel% LE.le let11 let1)
  let let106 := (Eq let99 let99)
  let let107 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x3x5fminus let47))))))
  let let108 := (binrel% LE.le let40 let5)
  let let109 := (binrel% GE.ge let51 let1)
  let let110 := (Not let109)
  let let111 := (binrel% LT.lt let51 let1)
  let let112 := (Not let13)
  let let113 := (Eq let112 let12)
  let let114 := (binrel% LE.le let51 let5)
  let let115 := (binrel% LT.lt let21 let1)
  let let116 := (binrel% GE.ge let30 let1)
  let let117 := (Not let116)
  let let118 := (Not let117)
  let let119 := (Eq let116 let118)
  let let120 := (Eq let118 let116)
  let let121 := (Eq let99 let101)
  let let122 := (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x4x5fminus let91))
  let let123 := (binrel% HMul.hMul let5 x5x5fminus)
  let let124 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let123 let122))
  let let125 := (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x8x5fminus let124))))))
  let let126 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd x7x5fminus let124))))))
  let let127 := (binrel% GT.gt let15 let1)
  let let128 := (Not let110)
  let let129 := (Eq let128 let109)
  let let130 := (binrel% LE.le let62 let1)
  let let131 := (Eq let12 let12)
  let let132 := (binrel% LT.lt let17 let1)
  let let133 := (Not let130)
  let let134 := (binrel% GT.gt let62 let1)
  let let135 := (Eq let134 let133)
  let let136 := (binrel% LT.lt let26 let1)
  let let137 := (binrel% HSub.hSub x7x5fplus x7x5fminus)
  let let138 := (binrel% LT.lt let30 let1)
  let let139 := (Eq let109 let109)
  let let140 := (binrel% LE.le let30 let5)
  let let141 := (Eq let109 let128)
  let let142 := (Eq let96 let96)
  let let143 := (Not let97)
  let let144 := (Eq let143 let96)
  let let145 := (Neg.neg let23)
  let let146 := (binrel% GE.ge let54 let1)
  let let147 := (binrel% LE.le let125 let1)
  let let148 := (Eq let116 let116)
  let let149 := (Eq let96 let143)
  let let150 := (Not True)
  let let151 := (binrel% GT.gt let23 let1)
  let let152 := (Eq let12 let112)
  let let153 := (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let145 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let80 let26))))))))
  let let154 := (binrel% LE.le let137 let5)
  let let155 := (binrel% HMul.hMul let5 x2x5fminus)
  let let156 := (binrel% HAdd.hAdd x2x5fplus let155)
  let let157 := (binrel% LE.le let126 let1)
  let let158 := (binrel% HMul.hMul let5 x2x5fplus)
  let let159 := (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x1x5fplus) x1x5fminus)
  let let160 := (binrel% LE.le let107 let5)
  let let161 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let155 (binrel% HAdd.hAdd x1x5fplus (binrel% HMul.hMul let5 x1x5fminus))))
  let let162 := (binrel% GE.ge let59 let4)
  let let163 := (binrel% GE.ge let45 let5)
  let let164 := (binrel% GE.ge let34 let1)
  let let165 := (Not let164)
  let let166 := (Not let163)
  let let167 := (Not let162)
  let let168 := (Not let146)
  let let169 := (Or let116 (Or let165 (Or let96 (Or let166 (Or let109 (Or let168 (Or let12 (Or let167 let99))))))))
  let let170 := (Or let118 (Or let165 (Or let143 (Or let166 (Or let128 (Or let168 (Or let112 (Or let167 let101))))))))
  let let171 := (binrel% LE.le let31 let16)
  let let172 := (And let127 let140)
  let let173 := (binrel% LE.le let35 let18)
  let let174 := (And let132 let164)
  let let175 := (binrel% LE.le let41 let20)
  let let176 := (And let95 let108)
  let let177 := (binrel% LE.le let46 let22)
  let let178 := (And let115 let163)
  let let179 := (binrel% LE.le let52 let24)
  let let180 := (And let151 let114)
  let let181 := (binrel% LE.le let55 let18)
  let let182 := (And let132 let146)
  let let183 := (binrel% LT.lt let56 let25)
  let let184 := (And let3 let14)
  let let185 := (binrel% LE.le let60 let27)
  let let186 := (And let136 let162)
  let let187 := (binrel% LE.le let63 let28)
  let let188 := (And let127 let130)
(Eq let3 True) → (Eq let14 let13) → (Eq let67 let66) → (Eq let63 let68) → (Eq let46 let72) → (Eq let41 let73) → (Eq let35 let78) → (Eq let31 let79) → (Eq let94 let80) → (Eq let95 True) → (Eq let22 let19) → (Eq let98 let97) → (Eq let20 let21) → (Eq let56 let90) → let102 → (Eq let103 let100) → (Eq let55 let88) → (Eq let104 True) → (Eq let105 let13) → (Eq let52 let87) → (Eq let106 True) → (Eq let107 let40) → (Eq let108 let97) → (Eq let111 let110) → let113 → (Eq let28 let80) → (Eq let114 let110) → (Eq let115 True) → (Eq let27 let26) → (Eq let120 let119) → (Eq let60 let93) → (Eq let102 let121) → (Eq let126 let125) → (Eq let127 True) → let129 → (Eq let130 let100) → (Eq let131 True) → (Eq let132 True) → let135 → (Eq let136 True) → (Eq let137 let30) → (Eq let138 let117) → (Eq let139 True) → (Eq let140 let117) → (Eq let129 let141) → (Eq let142 True) → (Eq let16 let26) → let144 → (Eq let24 let145) → (Eq let147 let146) → (Eq let148 True) → (Eq let25 let2) → let120 → (Eq let18 let80) → (Eq let144 let149) → (Eq let150 False) → (Eq let151 True) → (Eq let113 let152) → (Eq let153 let80) → (binrel% GE.ge x7x5fplus let1) → (binrel% GE.ge x7x5fminus let1) → (binrel% GE.ge x9x5fplus let1) → (binrel% GE.ge x9x5fminus let1) → (binrel% GE.ge x8x5fplus let1) → (binrel% GE.ge x8x5fminus let1) → (binrel% GE.ge x6x5fplus let1) → (binrel% GE.ge x6x5fminus let1) → (binrel% GE.ge x5x5fplus let1) → (binrel% GE.ge x5x5fminus let1) → (binrel% GE.ge x2x5fplus let1) → (binrel% GE.ge x2x5fminus let1) → (binrel% GE.ge x4x5fplus let1) → (binrel% GE.ge x4x5fminus let1) → (binrel% GE.ge x0x5fplus let1) → (binrel% GE.ge x0x5fminus let1) → (binrel% GE.ge x3x5fplus let1) → (binrel% GE.ge x3x5fminus let1) → (binrel% GE.ge x1x5fplus let1) → (binrel% GE.ge x1x5fminus let1) → let154 → (binrel% GE.ge (binrel% HSub.hSub x5x5fplus x5x5fminus) let4) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fminus let156)))))))))) let5) → let157 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let48 let37)))))))))) let1) → let114 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let123 let47)))))) let1) → let130 → (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x7x5fminus) (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x3x5fminus) (binrel% HAdd.hAdd let158 x2x5fminus))))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x3x5fminus let159)))))) let1) → let160 → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd let84 let83))))) let5) → (binrel% LE.le (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let85 let161)) let1) → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x3x5fminus) let47)))) let5) → (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let123 let161)) let1) → let105 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let39 x4x5fminus))) let5) → let162 → (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x2x5fminus let47)))))))) let5) → (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x3x5fminus) let159)))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd x7x5fminus let61)))) let1) → let163 → let164 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let53 let122)) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x3x5fminus let156)))) let1) → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 4)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 x5x5fplus)
  let let7 := (binrel% HAdd.hAdd let6 x5x5fminus)
  let let8 := (Int.ofNat 2)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% HMul.hMul let5 x7x5fminus)
  let let11 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x6x5fminus) let7))))
  let let12 := (binrel% GE.ge let11 let4)
  let let13 := (Not let12)
  let let14 := (binrel% LT.lt let11 let4)
  let let15 := (Rat.ofInt 1)
  let let16 := (binrel% HMul.hMul let15 let5)
  let let17 := (Neg.neg let2)
  let let18 := (binrel% HMul.hMul let17 let1)
  let let19 := (Rat.ofInt 3)
  let let20 := (binrel% HMul.hMul let19 let5)
  let let21 := (Neg.neg let19)
  let let22 := (binrel% HMul.hMul let21 let5)
  let let23 := (Rat.ofInt 2)
  let let24 := (binrel% HMul.hMul let23 let5)
  let let25 := (binrel% HMul.hMul let2 let4)
  let let26 := (Neg.neg let15)
  let let27 := (binrel% HMul.hMul let26 let4)
  let let28 := (binrel% HMul.hMul let15 let1)
  let let29 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let18 let16))))))))
  let let30 := (binrel% HAdd.hAdd x7x5fplus let10)
  let let31 := (binrel% HMul.hMul let15 let30)
  let let32 := (binrel% HMul.hMul let5 x6x5fplus)
  let let33 := (binrel% HMul.hMul let5 x9x5fminus)
  let let34 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x6x5fminus let7))))
  let let35 := (binrel% HMul.hMul let17 let34)
  let let36 := (binrel% HMul.hMul let5 x3x5fplus)
  let let37 := (binrel% HAdd.hAdd let36 x3x5fminus)
  let let38 := (binrel% HMul.hMul let5 x0x5fminus)
  let let39 := (binrel% HMul.hMul let5 x4x5fplus)
  let let40 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let38 let37))))))
  let let41 := (binrel% HMul.hMul let19 let40)
  let let42 := (binrel% HMul.hMul let5 x8x5fplus)
  let let43 := (binrel% HMul.hMul let9 x9x5fminus)
  let let44 := (binrel% HMul.hMul let8 x9x5fplus)
  let let45 := (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x4x5fminus let37))))))
  let let46 := (binrel% HMul.hMul let21 let45)
  let let47 := (binrel% HAdd.hAdd x0x5fplus let38)
  let let48 := (binrel% HMul.hMul let5 x4x5fminus)
  let let49 := (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let48 let47))))
  let let50 := (binrel% HMul.hMul let5 x6x5fminus)
  let let51 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 let49))))
  let let52 := (binrel% HMul.hMul let23 let51)
  let let53 := (binrel% HMul.hMul let5 x8x5fminus)
  let let54 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let53 let49))))))
  let let55 := (binrel% HMul.hMul let17 let54)
  let let56 := (binrel% HMul.hMul let2 let11)
  let let57 := (binrel% HMul.hMul let9 x5x5fminus)
  let let58 := (binrel% HMul.hMul let8 x5x5fplus)
  let let59 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x4x5fminus let47))))))))
  let let60 := (binrel% HMul.hMul let26 let59)
  let let61 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x4x5fplus let48)))
  let let62 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let53 let61))))
  let let63 := (binrel% HMul.hMul let15 let62)
  let let64 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let35 let31))))))))
  let let65 := (binrel% GE.ge let64 let29)
  let let66 := (Not let65)
  let let67 := (binrel% LT.lt let64 let29)
  let let68 := (Rat.ofInt let62)
  let let69 := (Int.ofNat 3)
  let let70 := (Neg.neg let69)
  let let71 := (Int.ofNat 6)
  let let72 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let71) x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let71 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x3x5fplus) (binrel% HMul.hMul let70 x3x5fminus)))))))))
  let let73 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x3x5fplus) (binrel% HMul.hMul let69 x3x5fminus)))))))))
  let let74 := (Int.ofNat 4)
  let let75 := (Neg.neg let74)
  let let76 := (binrel% HMul.hMul let75 x5x5fminus)
  let let77 := (binrel% HMul.hMul let74 x5x5fplus)
  let let78 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x6x5fminus) (binrel% HAdd.hAdd let77 let76))))))
  let let79 := (Rat.ofInt let30)
  let let80 := (Rat.ofInt 0)
  let let81 := (binrel% HMul.hMul let9 x4x5fminus)
  let let82 := (binrel% HMul.hMul let8 x4x5fplus)
  let let83 := (binrel% HMul.hMul let8 x5x5fminus)
  let let84 := (binrel% HMul.hMul let9 x5x5fplus)
  let let85 := (binrel% HMul.hMul let9 x6x5fminus)
  let let86 := (binrel% HMul.hMul let8 x6x5fplus)
  let let87 := (Rat.ofInt (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x0x5fplus) (binrel% HMul.hMul let9 x0x5fminus)))))))))))
  let let88 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x9x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x8x5fminus) (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x0x5fplus) (binrel% HMul.hMul let74 x0x5fminus)))))))))))))
  let let89 := (Int.ofNat 8)
  let let90 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let89) x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let89 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let75 x5x5fplus) (binrel% HMul.hMul let74 x5x5fminus)))))))
  let let91 := (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x0x5fplus) x0x5fminus)
  let let92 := (binrel% HMul.hMul let5 x7x5fplus)
  let let93 := (Rat.ofInt (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let48 let91)))))))))
  let let94 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let93 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let78 let79))))))))
  let let95 := (binrel% GT.gt let19 let1)
  let let96 := (binrel% GE.ge let40 let1)
  let let97 := (Not let96)
  let let98 := (binrel% LT.lt let40 let1)
  let let99 := (binrel% GE.ge let62 let4)
  let let100 := (Not let99)
  let let101 := (Not let100)
  let let102 := (Eq let101 let99)
  let let103 := (binrel% LT.lt let62 let4)
  let let104 := (binrel% GE.ge let80 let80)
  let let105 := (binrel% LE.le let11 let1)
  let let106 := (Eq let99 let99)
  let let107 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x3x5fminus let47))))))
  let let108 := (binrel% LE.le let40 let5)
  let let109 := (binrel% GE.ge let51 let1)
  let let110 := (Not let109)
  let let111 := (binrel% LT.lt let51 let1)
  let let112 := (Not let13)
  let let113 := (Eq let112 let12)
  let let114 := (binrel% LE.le let51 let5)
  let let115 := (binrel% LT.lt let21 let1)
  let let116 := (binrel% GE.ge let30 let1)
  let let117 := (Not let116)
  let let118 := (Not let117)
  let let119 := (Eq let116 let118)
  let let120 := (Eq let118 let116)
  let let121 := (Eq let99 let101)
  let let122 := (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x4x5fminus let91))
  let let123 := (binrel% HMul.hMul let5 x5x5fminus)
  let let124 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let123 let122))
  let let125 := (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x8x5fminus let124))))))
  let let126 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd x7x5fminus let124))))))
  let let127 := (binrel% GT.gt let15 let1)
  let let128 := (Not let110)
  let let129 := (Eq let128 let109)
  let let130 := (binrel% LE.le let62 let1)
  let let131 := (Eq let12 let12)
  let let132 := (binrel% LT.lt let17 let1)
  let let133 := (Not let130)
  let let134 := (binrel% GT.gt let62 let1)
  let let135 := (Eq let134 let133)
  let let136 := (binrel% LT.lt let26 let1)
  let let137 := (binrel% HSub.hSub x7x5fplus x7x5fminus)
  let let138 := (binrel% LT.lt let30 let1)
  let let139 := (Eq let109 let109)
  let let140 := (binrel% LE.le let30 let5)
  let let141 := (Eq let109 let128)
  let let142 := (Eq let96 let96)
  let let143 := (Not let97)
  let let144 := (Eq let143 let96)
  let let145 := (Neg.neg let23)
  let let146 := (binrel% GE.ge let54 let1)
  let let147 := (binrel% LE.le let125 let1)
  let let148 := (Eq let116 let116)
  let let149 := (Eq let96 let143)
  let let150 := (Not True)
  let let151 := (binrel% GT.gt let23 let1)
  let let152 := (Eq let12 let112)
  let let153 := (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let80 (binrel% HAdd.hAdd let145 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let80 let26))))))))
  let let154 := (binrel% LE.le let137 let5)
  let let155 := (binrel% HMul.hMul let5 x2x5fminus)
  let let156 := (binrel% HAdd.hAdd x2x5fplus let155)
  let let157 := (binrel% LE.le let126 let1)
  let let158 := (binrel% HMul.hMul let5 x2x5fplus)
  let let159 := (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x1x5fplus) x1x5fminus)
  let let160 := (binrel% LE.le let107 let5)
  let let161 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let155 (binrel% HAdd.hAdd x1x5fplus (binrel% HMul.hMul let5 x1x5fminus))))
  let let162 := (binrel% GE.ge let59 let4)
  let let163 := (binrel% GE.ge let45 let5)
  let let164 := (binrel% GE.ge let34 let1)
  let let165 := (Not let164)
  let let166 := (Not let163)
  let let167 := (Not let162)
  let let168 := (Not let146)
  let let169 := (Or let116 (Or let165 (Or let96 (Or let166 (Or let109 (Or let168 (Or let12 (Or let167 let99))))))))
  let let170 := (Or let118 (Or let165 (Or let143 (Or let166 (Or let128 (Or let168 (Or let112 (Or let167 let101))))))))
  let let171 := (binrel% LE.le let31 let16)
  let let172 := (And let127 let140)
  let let173 := (binrel% LE.le let35 let18)
  let let174 := (And let132 let164)
  let let175 := (binrel% LE.le let41 let20)
  let let176 := (And let95 let108)
  let let177 := (binrel% LE.le let46 let22)
  let let178 := (And let115 let163)
  let let179 := (binrel% LE.le let52 let24)
  let let180 := (And let151 let114)
  let let181 := (binrel% LE.le let55 let18)
  let let182 := (And let132 let146)
  let let183 := (binrel% LT.lt let56 let25)
  let let184 := (And let3 let14)
  let let185 := (binrel% LE.le let60 let27)
  let let186 := (And let136 let162)
  let let187 := (binrel% LE.le let63 let28)
  let let188 := (And let127 let130)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let14 let13) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let63 let68) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let46 let72) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let41 let73) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let35 let78) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let31 let79) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let94 let80) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let95 True) => -- EVALUATE
fun lean_r10 : (Eq let22 let19) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let98 let97) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let20 let21) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let56 let90) => -- THEORY_REWRITE_ARITH
fun lean_r14 : let102 => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let103 let100) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let55 let88) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let104 True) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let105 let13) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let52 let87) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let106 True) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let107 let40) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let108 let97) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let111 let110) => -- THEORY_REWRITE_ARITH
fun lean_r24 : let113 => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let28 let80) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let114 let110) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let115 True) => -- EVALUATE
fun lean_r28 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let120 let119) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let60 let93) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let102 let121) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let126 let125) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let127 True) => -- EVALUATE
fun lean_r34 : let129 => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let130 let100) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let131 True) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let132 True) => -- EVALUATE
fun lean_r38 : let135 => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let136 True) => -- EVALUATE
fun lean_r40 : (Eq let137 let30) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let138 let117) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let139 True) => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq let140 let117) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let129 let141) => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let142 True) => -- THEORY_REWRITE_BOOL
fun lean_r46 : (Eq let16 let26) => -- THEORY_REWRITE_ARITH
fun lean_r47 : let144 => -- THEORY_REWRITE_BOOL
fun lean_r48 : (Eq let24 let145) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let147 let146) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let148 True) => -- THEORY_REWRITE_BOOL
fun lean_r51 : (Eq let25 let2) => -- THEORY_REWRITE_ARITH
fun lean_r52 : let120 => -- THEORY_REWRITE_BOOL
fun lean_r53 : (Eq let18 let80) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let144 let149) => -- THEORY_REWRITE_BOOL
fun lean_r55 : (Eq let150 False) => -- THEORY_REWRITE_BOOL
fun lean_r56 : (Eq let151 True) => -- EVALUATE
fun lean_r57 : (Eq let113 let152) => -- THEORY_REWRITE_BOOL
fun lean_r58 : (Eq let153 let80) => -- THEORY_REWRITE_ARITH
fun lean_a59 : (binrel% GE.ge x7x5fplus let1) =>
fun lean_a60 : (binrel% GE.ge x7x5fminus let1) =>
fun lean_a61 : (binrel% GE.ge x9x5fplus let1) =>
fun lean_a62 : (binrel% GE.ge x9x5fminus let1) =>
fun lean_a63 : (binrel% GE.ge x8x5fplus let1) =>
fun lean_a64 : (binrel% GE.ge x8x5fminus let1) =>
fun lean_a65 : (binrel% GE.ge x6x5fplus let1) =>
fun lean_a66 : (binrel% GE.ge x6x5fminus let1) =>
fun lean_a67 : (binrel% GE.ge x5x5fplus let1) =>
fun lean_a68 : (binrel% GE.ge x5x5fminus let1) =>
fun lean_a69 : (binrel% GE.ge x2x5fplus let1) =>
fun lean_a70 : (binrel% GE.ge x2x5fminus let1) =>
fun lean_a71 : (binrel% GE.ge x4x5fplus let1) =>
fun lean_a72 : (binrel% GE.ge x4x5fminus let1) =>
fun lean_a73 : (binrel% GE.ge x0x5fplus let1) =>
fun lean_a74 : (binrel% GE.ge x0x5fminus let1) =>
fun lean_a75 : (binrel% GE.ge x3x5fplus let1) =>
fun lean_a76 : (binrel% GE.ge x3x5fminus let1) =>
fun lean_a77 : (binrel% GE.ge x1x5fplus let1) =>
fun lean_a78 : (binrel% GE.ge x1x5fminus let1) =>
fun lean_a79 : let154 =>
fun lean_a80 : (binrel% GE.ge (binrel% HSub.hSub x5x5fplus x5x5fminus) let4) =>
fun lean_a81 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fminus let156)))))))))) let5) =>
fun lean_a82 : let157 =>
fun lean_a83 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let48 let37)))))))))) let1) =>
fun lean_a84 : let114 =>
fun lean_a85 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let123 let47)))))) let1) =>
fun lean_a86 : let130 =>
fun lean_a87 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x7x5fminus) (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x3x5fminus) (binrel% HAdd.hAdd let158 x2x5fminus))))))) let1) =>
fun lean_a88 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x3x5fminus let159)))))) let1) =>
fun lean_a89 : let160 =>
fun lean_a90 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd let84 let83))))) let5) =>
fun lean_a91 : (binrel% LE.le (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let85 let161)) let1) =>
fun lean_a92 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x3x5fminus) let47)))) let5) =>
fun lean_a93 : (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let123 let161)) let1) =>
fun lean_a94 : let105 =>
fun lean_a95 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let39 x4x5fminus))) let5) =>
fun lean_a96 : let162 =>
fun lean_a97 : (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x2x5fminus let47)))))))) let5) =>
fun lean_a98 : (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x3x5fminus) let159)))))) let1) =>
fun lean_a99 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd x7x5fminus let61)))) let1) =>
fun lean_a100 : let163 =>
fun lean_a101 : let164 =>
fun lean_a102 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let53 let122)) let1) =>
fun lean_a103 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x3x5fminus let156)))) let1) => by
have lean_s0 : (Or let118 (Or let165 (Or let143 (Or let166 (Or let128 (Or let168 (Or let112 (Or let167 (Or let101 False))))))))) :=
  (scope (fun lean_a104 : let117 =>
    (scope (fun lean_a105 : let164 =>
      (scope (fun lean_a106 : let97 =>
        (scope (fun lean_a107 : let163 =>
          (scope (fun lean_a108 : let110 =>
            (scope (fun lean_a109 : let146 =>
              (scope (fun lean_a110 : let13 =>
                (scope (fun lean_a111 : let162 =>
                  (scope (fun lean_a112 : let100 =>
                    have lean_s0 : let100 := by timed eqResolve lean_a86 lean_r35
                    have lean_s1 : (Eq let100 let103) := by timed Eq.symm lean_r15
                    have lean_s2 : let103 := by timed eqResolve lean_s0 lean_s1
                    have lean_s3 : let130 := by intTightUb lean_s2
                    have lean_s4 : (Or let133 False) :=
                      (scope (fun lean_a110 : let130 =>
                        have lean_s4 : let127 := by timed trueElim lean_r33
                        have lean_s5 : let188 := by timed And.intro lean_s4 lean_a110
                        have lean_s6 : (Implies let188 let187) := by arithMulPos [let62, let1, let15], 1
                        have lean_s7 : let187 := by timed modusPonens lean_s5 lean_s6
                        have lean_s8 : let136 := by timed trueElim lean_r39
                        have lean_s9 : let186 := by timed And.intro lean_s8 lean_a111
                        have lean_s10 : (Implies let186 let185) := by arithMulNeg [let59, let4, let26], 3
                        have lean_s11 : let185 := by timed modusPonens lean_s9 lean_s10
                        have lean_s12 : let3 := by timed trueElim lean_r0
                        have lean_s13 : let13 := by timed eqResolve lean_a94 lean_r18
                        have lean_s14 : (Eq let13 let14) := by timed Eq.symm lean_r1
                        have lean_s15 : let14 := by timed eqResolve lean_s13 lean_s14
                        have lean_s16 : let184 := by timed And.intro lean_s12 lean_s15
                        have lean_s17 : (Implies let184 let183) := by arithMulPos [let11, let4, let2], 0
                        have lean_s18 : let183 := by timed modusPonens lean_s16 lean_s17
                        have lean_s19 : let132 := by timed trueElim lean_r37
                        let lean_s20 := by timed flipCongrArg lean_r32 [LE.le]
                        have lean_s21 : (Eq let1 let1) := by timed rfl
                        have lean_s22 : (Eq let157 let147) := by timed congr lean_s20 lean_s21
                        have lean_s23 : (Eq let157 let146) := by timed Eq.trans lean_s22 lean_r49
                        have lean_s24 : let146 := by timed eqResolve lean_a82 lean_s23
                        have lean_s25 : let182 := by timed And.intro lean_s19 lean_s24
                        have lean_s26 : (Implies let182 let181) := by arithMulNeg [let54, let1, let17], 3
                        have lean_s27 : let181 := by timed modusPonens lean_s25 lean_s26
                        have lean_s28 : let151 := by timed trueElim lean_r56
                        have lean_s29 : let110 := by timed eqResolve lean_a84 lean_r26
                        have lean_s30 : (Eq let110 let111) := by timed Eq.symm lean_r23
                        have lean_s31 : let111 := by timed eqResolve lean_s29 lean_s30
                        have lean_s32 : let114 := by intTightUb lean_s31
                        have lean_s33 : let180 := by timed And.intro lean_s28 lean_s32
                        have lean_s34 : (Implies let180 let179) := by arithMulPos [let51, let5, let23], 1
                        have lean_s35 : let179 := by timed modusPonens lean_s33 lean_s34
                        have lean_s36 : let115 := by timed trueElim lean_r27
                        have lean_s37 : let178 := by timed And.intro lean_s36 lean_a107
                        have lean_s38 : (Implies let178 let177) := by arithMulNeg [let45, let5, let21], 3
                        have lean_s39 : let177 := by timed modusPonens lean_s37 lean_s38
                        have lean_s40 : let95 := by timed trueElim lean_r9
                        let lean_s41 := by timed flipCongrArg lean_r21 [LE.le]
                        have lean_s42 : (Eq let5 let5) := by timed rfl
                        have lean_s43 : (Eq let160 let108) := by timed congr lean_s41 lean_s42
                        have lean_s44 : (Eq let160 let97) := by timed Eq.trans lean_s43 lean_r22
                        have lean_s45 : let97 := by timed eqResolve lean_a89 lean_s44
                        have lean_s46 : (Eq let97 let98) := by timed Eq.symm lean_r11
                        have lean_s47 : let98 := by timed eqResolve lean_s45 lean_s46
                        have lean_s48 : let108 := by intTightUb lean_s47
                        have lean_s49 : let176 := by timed And.intro lean_s40 lean_s48
                        have lean_s50 : (Implies let176 let175) := by arithMulPos [let40, let5, let19], 1
                        have lean_s51 : let175 := by timed modusPonens lean_s49 lean_s50
                        have lean_s52 : let174 := by timed And.intro lean_s19 lean_a105
                        have lean_s53 : (Implies let174 let173) := by arithMulNeg [let34, let1, let17], 3
                        have lean_s54 : let173 := by timed modusPonens lean_s52 lean_s53
                        let lean_s55 := by timed flipCongrArg lean_r40 [LE.le]
                        have lean_s56 : (Eq let154 let140) := by timed congr lean_s55 lean_s42
                        have lean_s57 : (Eq let154 let117) := by timed Eq.trans lean_s56 lean_r43
                        have lean_s58 : let117 := by timed eqResolve lean_a79 lean_s57
                        have lean_s59 : (Eq let117 let138) := by timed Eq.symm lean_r41
                        have lean_s60 : let138 := by timed eqResolve lean_s58 lean_s59
                        have lean_s61 : let140 := by intTightUb lean_s60
                        have lean_s62 : let172 := by timed And.intro lean_s4 lean_s61
                        have lean_s63 : (Implies let172 let171) := by arithMulPos [let30, let5, let15], 1
                        have lean_s64 : let171 := by timed modusPonens lean_s62 lean_s63
                        have lean_s65 : let67 := by sumBounds [lean_s7, lean_s11, lean_s18, lean_s27, lean_s35, lean_s39, lean_s51, lean_s54, lean_s64]
                        let lean_s66 := by timed congrHAdd lean_r6 lean_r7
                        let lean_s67 := by timed congrHAdd lean_r5 lean_s66
                        let lean_s68 := by timed congrHAdd lean_r4 lean_s67
                        let lean_s69 := by timed congrHAdd lean_r19 lean_s68
                        let lean_s70 := by timed congrHAdd lean_r16 lean_s69
                        let lean_s71 := by timed congrHAdd lean_r13 lean_s70
                        let lean_s72 := by timed congrHAdd lean_r30 lean_s71
                        have lean_s73 : (Eq let64 let94) := by timed congrHAdd lean_r3 lean_s72
                        have lean_s74 : (Eq let64 let80) := by timed Eq.trans lean_s73 lean_r8
                        let lean_s75 := by timed flipCongrArg lean_s74 [GE.ge]
                        let lean_s76 := by timed congrHAdd lean_r53 lean_r46
                        let lean_s77 := by timed congrHAdd lean_r12 lean_s76
                        let lean_s78 := by timed congrHAdd lean_r10 lean_s77
                        let lean_s79 := by timed congrHAdd lean_r48 lean_s78
                        let lean_s80 := by timed congrHAdd lean_r53 lean_s79
                        let lean_s81 := by timed congrHAdd lean_r51 lean_s80
                        let lean_s82 := by timed congrHAdd lean_r28 lean_s81
                        have lean_s83 : (Eq let29 let153) := by timed congrHAdd lean_r25 lean_s82
                        have lean_s84 : (Eq let29 let80) := by timed Eq.trans lean_s83 lean_r58
                        have lean_s85 : (Eq let65 let104) := by timed congr lean_s75 lean_s84
                        have lean_s86 : (Eq let65 True) := by timed Eq.trans lean_s85 lean_r17
                        have lean_s87 : (Eq let66 let150) := by timed flipCongrArg lean_s86 [Not]
                        have lean_s88 : (Eq let66 False) := by timed Eq.trans lean_s87 lean_r55
                        have lean_s89 : (Eq let67 False) := by timed Eq.trans lean_r2 lean_s88
                        show False from by timed eqResolve lean_s65 lean_s89
                      ))
                    have lean_s5 : let133 := by liftOrNToNeg lean_s4
                    have lean_s6 : (Eq let133 let101) := by timed flipCongrArg lean_r35 [Not]
                    have lean_s7 : (Eq let133 let99) := by timed Eq.trans lean_s6 lean_r14
                    have lean_s8 : (Eq let134 let99) := by timed Eq.trans lean_r38 lean_s7
                    have lean_s9 : (Eq let99 let134) := by timed Eq.symm lean_s8
                    have lean_s10 : (Eq let133 let134) := by timed Eq.trans lean_s7 lean_s9
                    have lean_s11 : let134 := by timed eqResolve lean_s5 lean_s10
                    have lean_s12 : (Eq let99 let133) := by timed Eq.symm lean_s7
                    have lean_s13 : let135 := by timed Eq.trans lean_s8 lean_s12
                    have lean_s14 : let133 := by timed eqResolve lean_s11 lean_s13
                    show False from by timed contradiction lean_s3 lean_s14
  ))))))))))))))))))
have lean_s1 : (Not (And let117 (And let164 (And let97 (And let163 (And let110 (And let146 (And let13 (And let162 let100))))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let170 := by timed flipNotAnd lean_s1 [let117, let164, let97, let163, let110, let146, let13, let162, let100]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let148 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let119 let148) := by timed congr lean_s5 lean_r52
have lean_s7 : (Eq let119 True) := by timed Eq.trans lean_s6 lean_r50
have lean_s8 : (Eq let120 True) := by timed Eq.trans lean_r29 lean_s7
have lean_s9 : let120 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq let165 let165) := by timed rfl
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let142 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let149 let142) := by timed congr lean_s14 lean_r47
have lean_s16 : (Eq let149 True) := by timed Eq.trans lean_s15 lean_r45
have lean_s17 : (Eq let144 True) := by timed Eq.trans lean_r54 lean_s16
have lean_s18 : let144 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s3 lean_s18
have lean_s20 : (Eq let166 let166) := by timed rfl
let lean_s21 := by timed congr lean_s3 lean_s20
have lean_s22 : let139 := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [Eq]
have lean_s24 : (Eq let141 let139) := by timed congr lean_s23 lean_r34
have lean_s25 : (Eq let141 True) := by timed Eq.trans lean_s24 lean_r42
have lean_s26 : (Eq let129 True) := by timed Eq.trans lean_r44 lean_s25
have lean_s27 : let129 := by timed trueElim lean_s26
let lean_s28 := by timed congr lean_s3 lean_s27
have lean_s29 : (Eq let168 let168) := by timed rfl
let lean_s30 := by timed congr lean_s3 lean_s29
have lean_s31 : let131 := by timed rfl
let lean_s32 := by timed flipCongrArg lean_s31 [Eq]
have lean_s33 : (Eq let152 let131) := by timed congr lean_s32 lean_r24
have lean_s34 : (Eq let152 True) := by timed Eq.trans lean_s33 lean_r36
have lean_s35 : (Eq let113 True) := by timed Eq.trans lean_r57 lean_s34
have lean_s36 : let113 := by timed trueElim lean_s35
let lean_s37 := by timed congr lean_s3 lean_s36
have lean_s38 : (Eq let167 let167) := by timed rfl
let lean_s39 := by timed congr lean_s3 lean_s38
have lean_s40 : let106 := by timed rfl
let lean_s41 := by timed flipCongrArg lean_s40 [Eq]
have lean_s42 : (Eq let121 let106) := by timed congr lean_s41 lean_r14
have lean_s43 : (Eq let121 True) := by timed Eq.trans lean_s42 lean_r20
have lean_s44 : (Eq let102 True) := by timed Eq.trans lean_r31 lean_s43
have lean_s45 : let102 := by timed trueElim lean_s44
let lean_s46 := by timed congr lean_s39 lean_s45
let lean_s47 := by timed congr lean_s37 lean_s46
let lean_s48 := by timed congr lean_s30 lean_s47
let lean_s49 := by timed congr lean_s28 lean_s48
let lean_s50 := by timed congr lean_s21 lean_s49
let lean_s51 := by timed congr lean_s19 lean_s50
let lean_s52 := by timed congr lean_s12 lean_s51
have lean_s53 : (Eq let170 let169) := by timed congr lean_s10 lean_s52
have lean_s54 : let169 := by timed eqResolve lean_s2 lean_s53
have lean_s55 : (Or let116 (Or let109 (Or let99 (Or let96 (Or let12 (Or let168 (Or let167 (Or let166 let165)))))))) := by permutateOr lean_s54, [0, 4, 8, 2, 6, 5, 7, 3, 1], (- 1)
let lean_s56 := by R2 lean_s55, lean_a101, let164, [(- 1), 0]
let lean_s57 := by R2 lean_s56, lean_a100, let163, [(- 1), 0]
let lean_s58 := by R2 lean_s57, lean_a96, let162, [(- 1), 0]
have lean_s59 : let13 := by timed eqResolve lean_a94 lean_r18
let lean_s60 := by R1 lean_s58, lean_s59, let12, [(- 1), 0]
let lean_s61 := by timed flipCongrArg lean_r21 [LE.le]
have lean_s62 : (Eq let5 let5) := by timed rfl
have lean_s63 : (Eq let160 let108) := by timed congr lean_s61 lean_s62
have lean_s64 : (Eq let160 let97) := by timed Eq.trans lean_s63 lean_r22
have lean_s65 : let97 := by timed eqResolve lean_a89 lean_s64
let lean_s66 := by R1 lean_s60, lean_s65, let96, [(- 1), 0]
have lean_s67 : let100 := by timed eqResolve lean_a86 lean_r35
let lean_s68 := by R1 lean_s66, lean_s67, let99, [(- 1), 0]
have lean_s69 : let110 := by timed eqResolve lean_a84 lean_r26
let lean_s70 := by R1 lean_s68, lean_s69, let109, [(- 1), 0]
let lean_s71 := by timed flipCongrArg lean_r32 [LE.le]
have lean_s72 : (Eq let1 let1) := by timed rfl
have lean_s73 : (Eq let157 let147) := by timed congr lean_s71 lean_s72
have lean_s74 : (Eq let157 let146) := by timed Eq.trans lean_s73 lean_r49
have lean_s75 : let146 := by timed eqResolve lean_a82 lean_s74
let lean_s76 := by R2 lean_s70, lean_s75, let146, [(- 1), 0]
let lean_s77 := by timed flipCongrArg lean_r40 [LE.le]
have lean_s78 : (Eq let154 let140) := by timed congr lean_s77 lean_s62
have lean_s79 : (Eq let154 let117) := by timed Eq.trans lean_s78 lean_r43
have lean_s80 : let117 := by timed eqResolve lean_a79 lean_s79
exact (show False from by R1 lean_s76, lean_s80, let116, [0, 0])


