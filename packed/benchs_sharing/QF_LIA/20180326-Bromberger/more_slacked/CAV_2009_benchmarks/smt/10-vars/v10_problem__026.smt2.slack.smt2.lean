open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x4x5fplus : Int}
variable {x4x5fminus : Int}
variable {x2x5fplus : Int}
variable {x2x5fminus : Int}
variable {x9x5fplus : Int}
variable {x9x5fminus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x3x5fplus : Int}
variable {x5x5fminus : Int}
variable {x3x5fplus : Int}
variable {x3x5fminus : Int}
variable {x8x5fminus : Int}
variable {x1x5fplus : Int}
variable {x1x5fminus : Int}
variable {x8x5fplus : Int}
variable {x0x5fplus : Int}
variable {x8x5fplus : Int}
variable {x6x5fminus : Int}
variable {x8x5fminus : Int}
variable {x0x5fminus : Int}
variable {x7x5fminus : Int}
variable {x7x5fplus : Int}
variable {x3x5fminus : Int}
variable {x7x5fminus : Int}
variable {x6x5fplus : Int}
variable {x6x5fminus : Int}
variable {x5x5fplus : Int}
variable {x9x5fminus : Int}
variable {x1x5fminus : Int}
variable {x2x5fminus : Int}
variable {x7x5fplus : Int}
variable {x2x5fplus : Int}
variable {x9x5fplus : Int}
variable {x6x5fplus : Int}
variable {x4x5fminus : Int}
variable {x4x5fplus : Int}
variable {x1x5fplus : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 2)
  let let3 := (binrel% HDiv.hDiv (Int.ofNat 7) let2)
  let let4 := (binrel% GT.gt let3 let1)
  let let5 := (Rat.ofInt 10)
  let let6 := (binrel% GT.gt let5 let1)
  let let7 := (Int.ofNat 1)
  let let8 := (Neg.neg let7)
  let let9 := (binrel% HMul.hMul let8 x2x5fplus)
  let let10 := (binrel% HMul.hMul let8 x3x5fminus)
  let let11 := (binrel% HMul.hMul let8 x1x5fplus)
  let let12 := (binrel% HMul.hMul let8 x4x5fminus)
  let let13 := (binrel% HMul.hMul let8 x7x5fminus)
  let let14 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 x2x5fminus)))))))))
  let let15 := (binrel% GE.ge let14 let2)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let2)
  let let18 := (binrel% HDiv.hDiv (Int.ofNat 11) let2)
  let let19 := (binrel% GT.gt let18 let1)
  let let20 := (binrel% HMul.hMul let8 x2x5fminus)
  let let21 := (binrel% HAdd.hAdd x2x5fplus let20)
  let let22 := (binrel% HMul.hMul let8 x1x5fminus)
  let let23 := (binrel% HMul.hMul let8 x5x5fplus)
  let let24 := (binrel% HMul.hMul let8 x8x5fminus)
  let let25 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let22 let21))))))))
  let let26 := (binrel% GE.ge let25 let1)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let1)
  let let29 := (binrel% HDiv.hDiv let7 let2)
  let let30 := (binrel% GT.gt let29 let1)
  let let31 := (binrel% HAdd.hAdd x1x5fplus let22)
  let let32 := (binrel% HMul.hMul let8 x4x5fplus)
  let let33 := (binrel% HMul.hMul let8 x8x5fplus)
  let let34 := (binrel% HMul.hMul let8 x9x5fminus)
  let let35 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus let31))))))))))
  let let36 := (binrel% GE.ge let35 let2)
  let let37 := (Not let36)
  let let38 := (Not let37)
  let let39 := (Eq let36 let38)
  let let40 := (Eq let38 let36)
  let let41 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let10 let21))
  let let42 := (binrel% GE.ge let41 let7)
  let let43 := (Not let42)
  let let44 := (Not let43)
  let let45 := (Eq let44 let42)
  let let46 := (Int.ofNat 15)
  let let47 := (binrel% HDiv.hDiv let46 let2)
  let let48 := (Neg.neg let47)
  let let49 := (Neg.neg let46)
  let let50 := (binrel% HMul.hMul let47 x7x5fminus)
  let let51 := (binrel% HMul.hMul let48 x7x5fplus)
  let let52 := (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x8x5fminus) (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd (binrel% HMul.hMul let46 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let49 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x6x5fplus) (binrel% HMul.hMul let47 x6x5fminus))))))))))
  let let53 := (binrel% HMul.hMul let8 x6x5fminus)
  let let54 := (binrel% HAdd.hAdd x6x5fplus let53)
  let let55 := (binrel% HMul.hMul let8 x0x5fplus)
  let let56 := (binrel% HMul.hMul let2 x5x5fminus)
  let let57 := (Neg.neg let2)
  let let58 := (binrel% HMul.hMul let57 x5x5fplus)
  let let59 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x0x5fminus let54))))))))
  let let60 := (binrel% HMul.hMul let48 let59)
  let let61 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 let31))))))
  let let62 := (binrel% GE.ge let61 let2)
  let let63 := (Not let62)
  let let64 := (binrel% LT.lt let61 let2)
  let let65 := (binrel% HDiv.hDiv (Int.ofNat 5) let2)
  let let66 := (Neg.neg let65)
  let let67 := (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x3x5fplus) (binrel% HMul.hMul let66 x3x5fminus))))))))
  let let68 := (binrel% HAdd.hAdd x3x5fplus let10)
  let let69 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let22 let68))))))
  let let70 := (binrel% HMul.hMul let65 let69)
  let let71 := (Eq let36 let36)
  let let72 := (Eq let42 let42)
  let let73 := (binrel% HMul.hMul let8 x0x5fminus)
  let let74 := (binrel% HAdd.hAdd x0x5fplus let73)
  let let75 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let22 let74))))
  let let76 := (binrel% HMul.hMul let8 x7x5fplus)
  let let77 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x7x5fminus let75)))))
  let let78 := (binrel% HAdd.hAdd let55 x0x5fminus)
  let let79 := (binrel% HMul.hMul let8 x5x5fminus)
  let let80 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x1x5fminus let78))))))))
  let let81 := (Rat.ofInt 1)
  let let82 := (Neg.neg let81)
  let let83 := (binrel% HMul.hMul let82 let80)
  let let84 := (Not let63)
  let let85 := (Eq let62 let84)
  let let86 := (Eq let84 let62)
  let let87 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let20 let31))))))))
  let let88 := (Not let27)
  let let89 := (Eq let26 let88)
  let let90 := (Eq let88 let26)
  let let91 := (binrel% HAdd.hAdd let11 x1x5fminus)
  let let92 := (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x2x5fminus let91))
  let let93 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let10 let92))))))
  let let94 := (binrel% HMul.hMul let5 let7)
  let let95 := (binrel% GE.ge let69 let7)
  let let96 := (Not let95)
  let let97 := (Not let96)
  let let98 := (Eq let95 let97)
  let let99 := (Eq let97 let95)
  let let100 := (Rat.ofInt 0)
  let let101 := (binrel% HMul.hMul let65 let1)
  let let102 := (Not let16)
  let let103 := (Eq let15 let102)
  let let104 := (Eq let102 let15)
  let let105 := (Eq let42 let44)
  let let106 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let49 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let46 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x6x5fplus) (binrel% HMul.hMul let48 x6x5fminus))))))))))))
  let let107 := (binrel% HMul.hMul let8 x6x5fplus)
  let let108 := (binrel% HMul.hMul let57 x3x5fminus)
  let let109 := (binrel% HMul.hMul let2 x3x5fplus)
  let let110 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let107 x6x5fminus)))))))))))
  let let111 := (binrel% HMul.hMul let48 let110)
  let let112 := (binrel% LE.le let35 let7)
  let let113 := (Neg.neg let18)
  let let114 := (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let113 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let113 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let113 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let113 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x2x5fplus) (binrel% HMul.hMul let113 x2x5fminus))))))))))
  let let115 := (binrel% HMul.hMul let18 let25)
  let let116 := (binrel% LT.lt let41 let7)
  let let117 := (binrel% LE.le let14 let7)
  let let118 := (Neg.neg let3)
  let let119 := (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let118 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x2x5fplus) (binrel% HMul.hMul let118 x2x5fminus))))
  let let120 := (binrel% HMul.hMul let3 let41)
  let let121 := (binrel% HMul.hMul let18 let8)
  let let122 := (Eq let26 let26)
  let let123 := (Neg.neg let29)
  let let124 := (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x1x5fplus) (binrel% HMul.hMul let123 x1x5fminus))
  let let125 := (binrel% HMul.hMul let29 x5x5fminus)
  let let126 := (binrel% HMul.hMul let123 x5x5fplus)
  let let127 := (binrel% HMul.hMul let123 x9x5fminus)
  let let128 := (binrel% HMul.hMul let29 x9x5fplus)
  let let129 := (binrel% HAdd.hAdd let128 (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x7x5fminus) (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x4x5fminus) let124))))))))))
  let let130 := (binrel% HAdd.hAdd let128 (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x4x5fminus) let124))))))
  let let131 := (Int.ofNat 10)
  let let132 := (Neg.neg let131)
  let let133 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let131 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let132 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let131 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let132 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let132 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let131 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let131 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let132 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let132 x2x5fplus) (binrel% HMul.hMul let131 x2x5fminus)))))))))))
  let let134 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let20 let78))
  let let135 := (binrel% HMul.hMul let8 x3x5fplus)
  let let136 := (Rat.ofInt (binrel% HAdd.hAdd let135 (binrel% HAdd.hAdd x3x5fminus let134)))
  let let137 := (binrel% HAdd.hAdd let136 (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let129 (binrel% HAdd.hAdd let106 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let67 let77)))))))))
  let let138 := (binrel% HMul.hMul let29 let2)
  let let139 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let10 let31))))))
  let let140 := (binrel% LE.le let25 let8)
  let let141 := (binrel% HMul.hMul let82 let1)
  let let142 := (Eq let62 let62)
  let let143 := (binrel% HMul.hMul let29 let61)
  let let144 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let56 let78))))))))
  let let145 := (Not True)
  let let146 := (binrel% HMul.hMul let82 let8)
  let let147 := (binrel% LE.le let61 let7)
  let let148 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x2x5fminus let74))))
  let let149 := (binrel% GE.ge let148 let1)
  let let150 := (Not let149)
  let let151 := (binrel% LT.lt let148 let1)
  let let152 := (Eq let95 let95)
  let let153 := (binrel% LE.le let69 let1)
  let let154 := (Eq let15 let15)
  let let155 := (binrel% LE.le let41 let1)
  let let156 := (binrel% GE.ge let100 let100)
  let let157 := (binrel% HMul.hMul let48 let1)
  let let158 := (binrel% HMul.hMul let48 let7)
  let let159 := (binrel% HMul.hMul let3 let1)
  let let160 := (binrel% HAdd.hAdd let141 (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd let94 (binrel% HAdd.hAdd let121 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd let157 (binrel% HAdd.hAdd let101 let146)))))))))
  let let161 := (binrel% HMul.hMul let29 let35)
  let let162 := (binrel% HMul.hMul let5 let14)
  let let163 := (binrel% HMul.hMul let82 let148)
  let let164 := (binrel% HAdd.hAdd let163 (binrel% HAdd.hAdd let120 (binrel% HAdd.hAdd let162 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let161 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let70 let83)))))))))
  let let165 := (binrel% GE.ge let164 let160)
  let let166 := (Not let165)
  let let167 := (binrel% LT.lt let164 let160)
  let let168 := (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let100 let81)))))))))
  let let169 := (binrel% LT.lt let82 let1)
  let let170 := (binrel% LT.lt let69 let7)
  let let171 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 let74))))))))))
  let let172 := (binrel% GT.gt let65 let1)
  let let173 := (binrel% LT.lt let48 let1)
  let let174 := (binrel% LT.lt let35 let2)
  let let175 := (binrel% LE.le let93 let7)
  let let176 := (binrel% LE.le let87 let8)
  let let177 := (binrel% HAdd.hAdd let135 (binrel% HAdd.hAdd x3x5fminus let31))
  let let178 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus let74))
  let let179 := (binrel% HMul.hMul let57 x8x5fminus)
  let let180 := (binrel% HMul.hMul let2 x8x5fplus)
  let let181 := (binrel% LE.le let139 let1)
  let let182 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let135 x3x5fminus)))
  let let183 := (binrel% GE.ge let171 let7)
  let let184 := (binrel% GE.ge let144 let1)
  let let185 := (binrel% GE.ge let80 let8)
  let let186 := (binrel% GE.ge let110 let7)
  let let187 := (binrel% GE.ge let59 let1)
  let let188 := (Not let185)
  let let189 := (Not let187)
  let let190 := (Not let186)
  let let191 := (Or let188 (Or let95 (Or let189 (Or let190 (Or let36 (Or let62 (Or let26 (Or let15 (Or let42 let150)))))))))
  let let192 := (Or let188 (Or let97 (Or let189 (Or let190 (Or let38 (Or let84 (Or let88 (Or let102 (Or let44 let150)))))))))
  let let193 := (Or let150 False)
  let let194 := (binrel% LE.le let83 let146)
  let let195 := (And let169 let185)
  let let196 := (binrel% LE.le let70 let101)
  let let197 := (And let172 let153)
  let let198 := (binrel% LE.le let60 let157)
  let let199 := (And let173 let187)
  let let200 := (binrel% LE.le let111 let158)
  let let201 := (And let173 let186)
  let let202 := (binrel% LT.lt let161 let138)
  let let203 := (And let30 let174)
  let let204 := (binrel% LT.lt let143 let138)
  let let205 := (And let30 let64)
  let let206 := (binrel% LE.le let115 let121)
  let let207 := (And let19 let140)
  let let208 := (binrel% LE.le let162 let94)
  let let209 := (And let6 let117)
  let let210 := (binrel% LE.le let120 let159)
  let let211 := (And let4 let155)
  let let212 := (binrel% LE.le let163 let141)
  let let213 := (And let169 let149)
(Eq let4 True) → (Eq let6 True) → (Eq let17 let16) → (Eq let19 True) → (Eq let28 let27) → (Eq let30 True) → (Eq let40 let39) → let45 → (Eq let60 let52) → (Eq let64 let63) → let40 → (Eq let70 let67) → (Eq let71 True) → (Eq let72 True) → (Eq let83 let77) → (Eq let86 let85) → let86 → (Eq let87 let25) → (Eq let90 let89) → (Eq let93 let14) → (Eq let94 let5) → (Eq let99 let98) → (Eq let101 let100) → (Eq let104 let103) → (Eq let45 let105) → (Eq let111 let106) → (Eq let112 let37) → (Eq let115 let114) → (Eq let116 let43) → (Eq let117 let16) → (Eq let120 let119) → let90 → (Eq let121 let113) → (Eq let122 True) → (Eq let137 let100) → (Eq let138 let81) → (Eq let139 let69) → (Eq let140 let27) → (Eq let141 let100) → (Eq let142 True) → (Eq let143 let130) → let99 → (Eq let144 let59) → (Eq let145 False) → (Eq let146 let81) → let104 → (Eq let147 let63) → (Eq let151 let150) → (Eq let152 True) → (Eq let153 let96) → (Eq let154 True) → (Eq let155 let43) → (Eq let156 True) → (Eq let167 let166) → (Eq let168 let100) → (Eq let169 True) → (Eq let157 let100) → (Eq let158 let48) → (Eq let159 let100) → (Eq let161 let129) → (Eq let162 let133) → (Eq let163 let136) → (Eq let170 let96) → (Eq let171 let110) → (Eq let172 True) → (Eq let173 True) → (Eq let174 let37) → (binrel% GE.ge x9x5fplus let1) → (binrel% GE.ge x9x5fminus let1) → (binrel% GE.ge x8x5fplus let1) → (binrel% GE.ge x8x5fminus let1) → (binrel% GE.ge x7x5fplus let1) → (binrel% GE.ge x7x5fminus let1) → (binrel% GE.ge x5x5fplus let1) → (binrel% GE.ge x5x5fminus let1) → (binrel% GE.ge x4x5fplus let1) → (binrel% GE.ge x4x5fminus let1) → (binrel% GE.ge x1x5fplus let1) → (binrel% GE.ge x1x5fminus let1) → (binrel% GE.ge x3x5fplus let1) → (binrel% GE.ge x3x5fminus let1) → (binrel% GE.ge x2x5fplus let1) → (binrel% GE.ge x2x5fminus let1) → (binrel% GE.ge x0x5fplus let1) → (binrel% GE.ge x0x5fminus let1) → (binrel% GE.ge x6x5fplus let1) → (binrel% GE.ge x6x5fminus let1) → let112 → let175 → let176 → (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let57 x9x5fminus) (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 let177)))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let180 (binrel% HAdd.hAdd let179 let178)))) let8) → let147 → let181 → (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus let134)))) let8) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 let182)))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 let92)))) let8) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let57 x4x5fminus) let31)))))) let8) → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let53 let31)) let1) → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let32 x4x5fminus))) let7) → (binrel% LE.le (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 let21)) let8) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 let54)) let1) → (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let79 let91)) let1) → let155 → let183 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus let78)))))))) let7) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd x6x5fminus let182)))))) let1) → let184 → (binrel% GE.ge (binrel% HAdd.hAdd let180 (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd x6x5fminus let75)))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x2x5fminus let31)))))))) let1) → let185 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let53 let74)))))) let7) → let149 → (binrel% GE.ge (binrel% HAdd.hAdd let180 (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x7x5fminus let68)))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 let178)) let7) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 let177)) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let57 x7x5fminus) let54)))) let1) → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 2)
  let let3 := (binrel% HDiv.hDiv (Int.ofNat 7) let2)
  let let4 := (binrel% GT.gt let3 let1)
  let let5 := (Rat.ofInt 10)
  let let6 := (binrel% GT.gt let5 let1)
  let let7 := (Int.ofNat 1)
  let let8 := (Neg.neg let7)
  let let9 := (binrel% HMul.hMul let8 x2x5fplus)
  let let10 := (binrel% HMul.hMul let8 x3x5fminus)
  let let11 := (binrel% HMul.hMul let8 x1x5fplus)
  let let12 := (binrel% HMul.hMul let8 x4x5fminus)
  let let13 := (binrel% HMul.hMul let8 x7x5fminus)
  let let14 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 x2x5fminus)))))))))
  let let15 := (binrel% GE.ge let14 let2)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let2)
  let let18 := (binrel% HDiv.hDiv (Int.ofNat 11) let2)
  let let19 := (binrel% GT.gt let18 let1)
  let let20 := (binrel% HMul.hMul let8 x2x5fminus)
  let let21 := (binrel% HAdd.hAdd x2x5fplus let20)
  let let22 := (binrel% HMul.hMul let8 x1x5fminus)
  let let23 := (binrel% HMul.hMul let8 x5x5fplus)
  let let24 := (binrel% HMul.hMul let8 x8x5fminus)
  let let25 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let22 let21))))))))
  let let26 := (binrel% GE.ge let25 let1)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let1)
  let let29 := (binrel% HDiv.hDiv let7 let2)
  let let30 := (binrel% GT.gt let29 let1)
  let let31 := (binrel% HAdd.hAdd x1x5fplus let22)
  let let32 := (binrel% HMul.hMul let8 x4x5fplus)
  let let33 := (binrel% HMul.hMul let8 x8x5fplus)
  let let34 := (binrel% HMul.hMul let8 x9x5fminus)
  let let35 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus let31))))))))))
  let let36 := (binrel% GE.ge let35 let2)
  let let37 := (Not let36)
  let let38 := (Not let37)
  let let39 := (Eq let36 let38)
  let let40 := (Eq let38 let36)
  let let41 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let10 let21))
  let let42 := (binrel% GE.ge let41 let7)
  let let43 := (Not let42)
  let let44 := (Not let43)
  let let45 := (Eq let44 let42)
  let let46 := (Int.ofNat 15)
  let let47 := (binrel% HDiv.hDiv let46 let2)
  let let48 := (Neg.neg let47)
  let let49 := (Neg.neg let46)
  let let50 := (binrel% HMul.hMul let47 x7x5fminus)
  let let51 := (binrel% HMul.hMul let48 x7x5fplus)
  let let52 := (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x8x5fminus) (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd (binrel% HMul.hMul let46 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let49 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x6x5fplus) (binrel% HMul.hMul let47 x6x5fminus))))))))))
  let let53 := (binrel% HMul.hMul let8 x6x5fminus)
  let let54 := (binrel% HAdd.hAdd x6x5fplus let53)
  let let55 := (binrel% HMul.hMul let8 x0x5fplus)
  let let56 := (binrel% HMul.hMul let2 x5x5fminus)
  let let57 := (Neg.neg let2)
  let let58 := (binrel% HMul.hMul let57 x5x5fplus)
  let let59 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd x0x5fminus let54))))))))
  let let60 := (binrel% HMul.hMul let48 let59)
  let let61 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 let31))))))
  let let62 := (binrel% GE.ge let61 let2)
  let let63 := (Not let62)
  let let64 := (binrel% LT.lt let61 let2)
  let let65 := (binrel% HDiv.hDiv (Int.ofNat 5) let2)
  let let66 := (Neg.neg let65)
  let let67 := (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let66 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let65 x3x5fplus) (binrel% HMul.hMul let66 x3x5fminus))))))))
  let let68 := (binrel% HAdd.hAdd x3x5fplus let10)
  let let69 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let22 let68))))))
  let let70 := (binrel% HMul.hMul let65 let69)
  let let71 := (Eq let36 let36)
  let let72 := (Eq let42 let42)
  let let73 := (binrel% HMul.hMul let8 x0x5fminus)
  let let74 := (binrel% HAdd.hAdd x0x5fplus let73)
  let let75 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let22 let74))))
  let let76 := (binrel% HMul.hMul let8 x7x5fplus)
  let let77 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let8 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x7x5fminus let75)))))
  let let78 := (binrel% HAdd.hAdd let55 x0x5fminus)
  let let79 := (binrel% HMul.hMul let8 x5x5fminus)
  let let80 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x1x5fminus let78))))))))
  let let81 := (Rat.ofInt 1)
  let let82 := (Neg.neg let81)
  let let83 := (binrel% HMul.hMul let82 let80)
  let let84 := (Not let63)
  let let85 := (Eq let62 let84)
  let let86 := (Eq let84 let62)
  let let87 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let20 let31))))))))
  let let88 := (Not let27)
  let let89 := (Eq let26 let88)
  let let90 := (Eq let88 let26)
  let let91 := (binrel% HAdd.hAdd let11 x1x5fminus)
  let let92 := (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x2x5fminus let91))
  let let93 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let10 let92))))))
  let let94 := (binrel% HMul.hMul let5 let7)
  let let95 := (binrel% GE.ge let69 let7)
  let let96 := (Not let95)
  let let97 := (Not let96)
  let let98 := (Eq let95 let97)
  let let99 := (Eq let97 let95)
  let let100 := (Rat.ofInt 0)
  let let101 := (binrel% HMul.hMul let65 let1)
  let let102 := (Not let16)
  let let103 := (Eq let15 let102)
  let let104 := (Eq let102 let15)
  let let105 := (Eq let42 let44)
  let let106 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let49 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let46 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let47 x6x5fplus) (binrel% HMul.hMul let48 x6x5fminus))))))))))))
  let let107 := (binrel% HMul.hMul let8 x6x5fplus)
  let let108 := (binrel% HMul.hMul let57 x3x5fminus)
  let let109 := (binrel% HMul.hMul let2 x3x5fplus)
  let let110 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let107 x6x5fminus)))))))))))
  let let111 := (binrel% HMul.hMul let48 let110)
  let let112 := (binrel% LE.le let35 let7)
  let let113 := (Neg.neg let18)
  let let114 := (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let113 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let113 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let113 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let113 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x2x5fplus) (binrel% HMul.hMul let113 x2x5fminus))))))))))
  let let115 := (binrel% HMul.hMul let18 let25)
  let let116 := (binrel% LT.lt let41 let7)
  let let117 := (binrel% LE.le let14 let7)
  let let118 := (Neg.neg let3)
  let let119 := (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let118 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let3 x2x5fplus) (binrel% HMul.hMul let118 x2x5fminus))))
  let let120 := (binrel% HMul.hMul let3 let41)
  let let121 := (binrel% HMul.hMul let18 let8)
  let let122 := (Eq let26 let26)
  let let123 := (Neg.neg let29)
  let let124 := (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x1x5fplus) (binrel% HMul.hMul let123 x1x5fminus))
  let let125 := (binrel% HMul.hMul let29 x5x5fminus)
  let let126 := (binrel% HMul.hMul let123 x5x5fplus)
  let let127 := (binrel% HMul.hMul let123 x9x5fminus)
  let let128 := (binrel% HMul.hMul let29 x9x5fplus)
  let let129 := (binrel% HAdd.hAdd let128 (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x7x5fminus) (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x4x5fminus) let124))))))))))
  let let130 := (binrel% HAdd.hAdd let128 (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x4x5fminus) let124))))))
  let let131 := (Int.ofNat 10)
  let let132 := (Neg.neg let131)
  let let133 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let131 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let132 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let131 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let132 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let132 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let131 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let131 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let132 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let132 x2x5fplus) (binrel% HMul.hMul let131 x2x5fminus)))))))))))
  let let134 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let20 let78))
  let let135 := (binrel% HMul.hMul let8 x3x5fplus)
  let let136 := (Rat.ofInt (binrel% HAdd.hAdd let135 (binrel% HAdd.hAdd x3x5fminus let134)))
  let let137 := (binrel% HAdd.hAdd let136 (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let133 (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let130 (binrel% HAdd.hAdd let129 (binrel% HAdd.hAdd let106 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let67 let77)))))))))
  let let138 := (binrel% HMul.hMul let29 let2)
  let let139 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let10 let31))))))
  let let140 := (binrel% LE.le let25 let8)
  let let141 := (binrel% HMul.hMul let82 let1)
  let let142 := (Eq let62 let62)
  let let143 := (binrel% HMul.hMul let29 let61)
  let let144 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let56 let78))))))))
  let let145 := (Not True)
  let let146 := (binrel% HMul.hMul let82 let8)
  let let147 := (binrel% LE.le let61 let7)
  let let148 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x2x5fminus let74))))
  let let149 := (binrel% GE.ge let148 let1)
  let let150 := (Not let149)
  let let151 := (binrel% LT.lt let148 let1)
  let let152 := (Eq let95 let95)
  let let153 := (binrel% LE.le let69 let1)
  let let154 := (Eq let15 let15)
  let let155 := (binrel% LE.le let41 let1)
  let let156 := (binrel% GE.ge let100 let100)
  let let157 := (binrel% HMul.hMul let48 let1)
  let let158 := (binrel% HMul.hMul let48 let7)
  let let159 := (binrel% HMul.hMul let3 let1)
  let let160 := (binrel% HAdd.hAdd let141 (binrel% HAdd.hAdd let159 (binrel% HAdd.hAdd let94 (binrel% HAdd.hAdd let121 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd let157 (binrel% HAdd.hAdd let101 let146)))))))))
  let let161 := (binrel% HMul.hMul let29 let35)
  let let162 := (binrel% HMul.hMul let5 let14)
  let let163 := (binrel% HMul.hMul let82 let148)
  let let164 := (binrel% HAdd.hAdd let163 (binrel% HAdd.hAdd let120 (binrel% HAdd.hAdd let162 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let161 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let70 let83)))))))))
  let let165 := (binrel% GE.ge let164 let160)
  let let166 := (Not let165)
  let let167 := (binrel% LT.lt let164 let160)
  let let168 := (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let100 let81)))))))))
  let let169 := (binrel% LT.lt let82 let1)
  let let170 := (binrel% LT.lt let69 let7)
  let let171 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 let74))))))))))
  let let172 := (binrel% GT.gt let65 let1)
  let let173 := (binrel% LT.lt let48 let1)
  let let174 := (binrel% LT.lt let35 let2)
  let let175 := (binrel% LE.le let93 let7)
  let let176 := (binrel% LE.le let87 let8)
  let let177 := (binrel% HAdd.hAdd let135 (binrel% HAdd.hAdd x3x5fminus let31))
  let let178 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus let74))
  let let179 := (binrel% HMul.hMul let57 x8x5fminus)
  let let180 := (binrel% HMul.hMul let2 x8x5fplus)
  let let181 := (binrel% LE.le let139 let1)
  let let182 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let135 x3x5fminus)))
  let let183 := (binrel% GE.ge let171 let7)
  let let184 := (binrel% GE.ge let144 let1)
  let let185 := (binrel% GE.ge let80 let8)
  let let186 := (binrel% GE.ge let110 let7)
  let let187 := (binrel% GE.ge let59 let1)
  let let188 := (Not let185)
  let let189 := (Not let187)
  let let190 := (Not let186)
  let let191 := (Or let188 (Or let95 (Or let189 (Or let190 (Or let36 (Or let62 (Or let26 (Or let15 (Or let42 let150)))))))))
  let let192 := (Or let188 (Or let97 (Or let189 (Or let190 (Or let38 (Or let84 (Or let88 (Or let102 (Or let44 let150)))))))))
  let let193 := (Or let150 False)
  let let194 := (binrel% LE.le let83 let146)
  let let195 := (And let169 let185)
  let let196 := (binrel% LE.le let70 let101)
  let let197 := (And let172 let153)
  let let198 := (binrel% LE.le let60 let157)
  let let199 := (And let173 let187)
  let let200 := (binrel% LE.le let111 let158)
  let let201 := (And let173 let186)
  let let202 := (binrel% LT.lt let161 let138)
  let let203 := (And let30 let174)
  let let204 := (binrel% LT.lt let143 let138)
  let let205 := (And let30 let64)
  let let206 := (binrel% LE.le let115 let121)
  let let207 := (And let19 let140)
  let let208 := (binrel% LE.le let162 let94)
  let let209 := (And let6 let117)
  let let210 := (binrel% LE.le let120 let159)
  let let211 := (And let4 let155)
  let let212 := (binrel% LE.le let163 let141)
  let let213 := (And let169 let149)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let6 True) => -- EVALUATE
fun lean_r2 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let19 True) => -- EVALUATE
fun lean_r4 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let30 True) => -- EVALUATE
fun lean_r6 : (Eq let40 let39) => -- THEORY_REWRITE_BOOL
fun lean_r7 : let45 => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let60 let52) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let64 let63) => -- THEORY_REWRITE_ARITH
fun lean_r10 : let40 => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let70 let67) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let71 True) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let72 True) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let83 let77) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let86 let85) => -- THEORY_REWRITE_BOOL
fun lean_r16 : let86 => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let87 let25) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let90 let89) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let93 let14) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let94 let5) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let99 let98) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let101 let100) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let104 let103) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let45 let105) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let111 let106) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let112 let37) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let115 let114) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let116 let43) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let117 let16) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let120 let119) => -- THEORY_REWRITE_ARITH
fun lean_r31 : let90 => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let121 let113) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let122 True) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let137 let100) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let138 let81) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let139 let69) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let140 let27) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let141 let100) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let142 True) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let143 let130) => -- THEORY_REWRITE_ARITH
fun lean_r41 : let99 => -- THEORY_REWRITE_BOOL
fun lean_r42 : (Eq let144 let59) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let145 False) => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let146 let81) => -- THEORY_REWRITE_ARITH
fun lean_r45 : let104 => -- THEORY_REWRITE_BOOL
fun lean_r46 : (Eq let147 let63) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let151 let150) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let152 True) => -- THEORY_REWRITE_BOOL
fun lean_r49 : (Eq let153 let96) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let154 True) => -- THEORY_REWRITE_BOOL
fun lean_r51 : (Eq let155 let43) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let156 True) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let167 let166) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let168 let100) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let169 True) => -- EVALUATE
fun lean_r56 : (Eq let157 let100) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let158 let48) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let159 let100) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let161 let129) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let162 let133) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let163 let136) => -- THEORY_REWRITE_ARITH
fun lean_r62 : (Eq let170 let96) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let171 let110) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq let172 True) => -- EVALUATE
fun lean_r65 : (Eq let173 True) => -- EVALUATE
fun lean_r66 : (Eq let174 let37) => -- THEORY_REWRITE_ARITH
fun lean_a67 : (binrel% GE.ge x9x5fplus let1) =>
fun lean_a68 : (binrel% GE.ge x9x5fminus let1) =>
fun lean_a69 : (binrel% GE.ge x8x5fplus let1) =>
fun lean_a70 : (binrel% GE.ge x8x5fminus let1) =>
fun lean_a71 : (binrel% GE.ge x7x5fplus let1) =>
fun lean_a72 : (binrel% GE.ge x7x5fminus let1) =>
fun lean_a73 : (binrel% GE.ge x5x5fplus let1) =>
fun lean_a74 : (binrel% GE.ge x5x5fminus let1) =>
fun lean_a75 : (binrel% GE.ge x4x5fplus let1) =>
fun lean_a76 : (binrel% GE.ge x4x5fminus let1) =>
fun lean_a77 : (binrel% GE.ge x1x5fplus let1) =>
fun lean_a78 : (binrel% GE.ge x1x5fminus let1) =>
fun lean_a79 : (binrel% GE.ge x3x5fplus let1) =>
fun lean_a80 : (binrel% GE.ge x3x5fminus let1) =>
fun lean_a81 : (binrel% GE.ge x2x5fplus let1) =>
fun lean_a82 : (binrel% GE.ge x2x5fminus let1) =>
fun lean_a83 : (binrel% GE.ge x0x5fplus let1) =>
fun lean_a84 : (binrel% GE.ge x0x5fminus let1) =>
fun lean_a85 : (binrel% GE.ge x6x5fplus let1) =>
fun lean_a86 : (binrel% GE.ge x6x5fminus let1) =>
fun lean_a87 : let112 =>
fun lean_a88 : let175 =>
fun lean_a89 : let176 =>
fun lean_a90 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x9x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let57 x9x5fminus) (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 let177)))))) let1) =>
fun lean_a91 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let180 (binrel% HAdd.hAdd let179 let178)))) let8) =>
fun lean_a92 : let147 =>
fun lean_a93 : let181 =>
fun lean_a94 : (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x4x5fminus let134)))) let8) =>
fun lean_a95 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 let182)))) let1) =>
fun lean_a96 : (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 let92)))) let8) =>
fun lean_a97 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let57 x4x5fminus) let31)))))) let8) =>
fun lean_a98 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let53 let31)) let1) =>
fun lean_a99 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let32 x4x5fminus))) let7) =>
fun lean_a100 : (binrel% LE.le (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let12 let21)) let8) =>
fun lean_a101 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 let54)) let1) =>
fun lean_a102 : (binrel% LE.le (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let79 let91)) let1) =>
fun lean_a103 : let155 =>
fun lean_a104 : let183 =>
fun lean_a105 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus let78)))))))) let7) =>
fun lean_a106 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd x6x5fminus let182)))))) let1) =>
fun lean_a107 : let184 =>
fun lean_a108 : (binrel% GE.ge (binrel% HAdd.hAdd let180 (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd x6x5fminus let75)))) let1) =>
fun lean_a109 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x2x5fminus let31)))))))) let1) =>
fun lean_a110 : let185 =>
fun lean_a111 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let53 let74)))))) let7) =>
fun lean_a112 : let149 =>
fun lean_a113 : (binrel% GE.ge (binrel% HAdd.hAdd let180 (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd x7x5fminus let68)))) let1) =>
fun lean_a114 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let34 let178)) let7) =>
fun lean_a115 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 let177)) let1) =>
fun lean_a116 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let57 x7x5fminus) let54)))) let1) => by
have lean_s0 : (Or let188 (Or let97 (Or let189 (Or let190 (Or let38 (Or let84 (Or let88 (Or let102 (Or let44 let193))))))))) :=
  (scope (fun lean_a117 : let185 =>
    (scope (fun lean_a118 : let96 =>
      (scope (fun lean_a119 : let187 =>
        (scope (fun lean_a120 : let186 =>
          (scope (fun lean_a121 : let37 =>
            (scope (fun lean_a122 : let63 =>
              (scope (fun lean_a123 : let27 =>
                (scope (fun lean_a124 : let16 =>
                  (scope (fun lean_a125 : let43 =>
                    (scope (fun lean_a126 : let149 =>
                      have lean_s0 : let193 :=
                        (scope (fun lean_a125 : let149 =>
                          have lean_s0 : let169 := by timed trueElim lean_r55
                          have lean_s1 : let213 := by timed And.intro lean_s0 lean_a125
                          have lean_s2 : (Implies let213 let212) := by arithMulNeg [let148, let1, let82], 3
                          have lean_s3 : let212 := by timed modusPonens lean_s1 lean_s2
                          have lean_s4 : let4 := by timed trueElim lean_r0
                          have lean_s5 : let43 := by timed eqResolve lean_a103 lean_r51
                          have lean_s6 : (Eq let43 let116) := by timed Eq.symm lean_r28
                          have lean_s7 : let116 := by timed eqResolve lean_s5 lean_s6
                          have lean_s8 : let155 := by intTightUb lean_s7
                          have lean_s9 : let211 := by timed And.intro lean_s4 lean_s8
                          have lean_s10 : (Implies let211 let210) := by arithMulPos [let41, let1, let3], 1
                          have lean_s11 : let210 := by timed modusPonens lean_s9 lean_s10
                          have lean_s12 : let6 := by timed trueElim lean_r1
                          let lean_s13 := by timed flipCongrArg lean_r19 [LE.le]
                          have lean_s14 : (Eq let7 let7) := by timed rfl
                          have lean_s15 : (Eq let175 let117) := by timed congr lean_s13 lean_s14
                          have lean_s16 : (Eq let175 let16) := by timed Eq.trans lean_s15 lean_r29
                          have lean_s17 : let16 := by timed eqResolve lean_a88 lean_s16
                          have lean_s18 : (Eq let16 let17) := by timed Eq.symm lean_r2
                          have lean_s19 : let17 := by timed eqResolve lean_s17 lean_s18
                          have lean_s20 : let117 := by intTightUb lean_s19
                          have lean_s21 : let209 := by timed And.intro lean_s12 lean_s20
                          have lean_s22 : (Implies let209 let208) := by arithMulPos [let14, let7, let5], 1
                          have lean_s23 : let208 := by timed modusPonens lean_s21 lean_s22
                          have lean_s24 : let19 := by timed trueElim lean_r3
                          let lean_s25 := by timed flipCongrArg lean_r17 [LE.le]
                          have lean_s26 : (Eq let8 let8) := by timed rfl
                          have lean_s27 : (Eq let176 let140) := by timed congr lean_s25 lean_s26
                          have lean_s28 : (Eq let176 let27) := by timed Eq.trans lean_s27 lean_r37
                          have lean_s29 : let27 := by timed eqResolve lean_a89 lean_s28
                          have lean_s30 : (Eq let27 let28) := by timed Eq.symm lean_r4
                          have lean_s31 : let28 := by timed eqResolve lean_s29 lean_s30
                          have lean_s32 : let140 := by intTightUb lean_s31
                          have lean_s33 : let207 := by timed And.intro lean_s24 lean_s32
                          have lean_s34 : (Implies let207 let206) := by arithMulPos [let25, let8, let18], 1
                          have lean_s35 : let206 := by timed modusPonens lean_s33 lean_s34
                          have lean_s36 : let30 := by timed trueElim lean_r5
                          have lean_s37 : let63 := by timed eqResolve lean_a92 lean_r46
                          have lean_s38 : (Eq let63 let64) := by timed Eq.symm lean_r9
                          have lean_s39 : let64 := by timed eqResolve lean_s37 lean_s38
                          have lean_s40 : let205 := by timed And.intro lean_s36 lean_s39
                          have lean_s41 : (Implies let205 let204) := by arithMulPos [let61, let2, let29], 0
                          have lean_s42 : let204 := by timed modusPonens lean_s40 lean_s41
                          have lean_s43 : let37 := by timed eqResolve lean_a87 lean_r26
                          have lean_s44 : (Eq let37 let174) := by timed Eq.symm lean_r66
                          have lean_s45 : let174 := by timed eqResolve lean_s43 lean_s44
                          have lean_s46 : let203 := by timed And.intro lean_s36 lean_s45
                          have lean_s47 : (Implies let203 let202) := by arithMulPos [let35, let2, let29], 0
                          have lean_s48 : let202 := by timed modusPonens lean_s46 lean_s47
                          have lean_s49 : let173 := by timed trueElim lean_r65
                          let lean_s50 := by timed flipCongrArg lean_r63 [GE.ge]
                          have lean_s51 : (Eq let183 let186) := by timed congr lean_s50 lean_s14
                          have lean_s52 : let186 := by timed eqResolve lean_a104 lean_s51
                          have lean_s53 : let201 := by timed And.intro lean_s49 lean_s52
                          have lean_s54 : (Implies let201 let200) := by arithMulNeg [let110, let7, let48], 3
                          have lean_s55 : let200 := by timed modusPonens lean_s53 lean_s54
                          let lean_s56 := by timed flipCongrArg lean_r42 [GE.ge]
                          have lean_s57 : (Eq let1 let1) := by timed rfl
                          have lean_s58 : (Eq let184 let187) := by timed congr lean_s56 lean_s57
                          have lean_s59 : let187 := by timed eqResolve lean_a107 lean_s58
                          have lean_s60 : let199 := by timed And.intro lean_s49 lean_s59
                          have lean_s61 : (Implies let199 let198) := by arithMulNeg [let59, let1, let48], 3
                          have lean_s62 : let198 := by timed modusPonens lean_s60 lean_s61
                          have lean_s63 : let172 := by timed trueElim lean_r64
                          let lean_s64 := by timed flipCongrArg lean_r36 [LE.le]
                          have lean_s65 : (Eq let181 let153) := by timed congr lean_s64 lean_s57
                          have lean_s66 : (Eq let181 let96) := by timed Eq.trans lean_s65 lean_r49
                          have lean_s67 : let96 := by timed eqResolve lean_a93 lean_s66
                          have lean_s68 : (Eq let96 let170) := by timed Eq.symm lean_r62
                          have lean_s69 : let170 := by timed eqResolve lean_s67 lean_s68
                          have lean_s70 : let153 := by intTightUb lean_s69
                          have lean_s71 : let197 := by timed And.intro lean_s63 lean_s70
                          have lean_s72 : (Implies let197 let196) := by arithMulPos [let69, let1, let65], 1
                          have lean_s73 : let196 := by timed modusPonens lean_s71 lean_s72
                          have lean_s74 : let195 := by timed And.intro lean_s0 lean_a117
                          have lean_s75 : (Implies let195 let194) := by arithMulNeg [let80, let8, let82], 3
                          have lean_s76 : let194 := by timed modusPonens lean_s74 lean_s75
                          have lean_s77 : let167 := by sumBounds [lean_s3, lean_s11, lean_s23, lean_s35, lean_s42, lean_s48, lean_s55, lean_s62, lean_s73, lean_s76]
                          let lean_s78 := by timed congrHAdd lean_r11 lean_r14
                          let lean_s79 := by timed congrHAdd lean_r8 lean_s78
                          let lean_s80 := by timed congrHAdd lean_r25 lean_s79
                          let lean_s81 := by timed congrHAdd lean_r59 lean_s80
                          let lean_s82 := by timed congrHAdd lean_r40 lean_s81
                          let lean_s83 := by timed congrHAdd lean_r27 lean_s82
                          let lean_s84 := by timed congrHAdd lean_r60 lean_s83
                          let lean_s85 := by timed congrHAdd lean_r30 lean_s84
                          have lean_s86 : (Eq let164 let137) := by timed congrHAdd lean_r61 lean_s85
                          have lean_s87 : (Eq let164 let100) := by timed Eq.trans lean_s86 lean_r34
                          let lean_s88 := by timed flipCongrArg lean_s87 [GE.ge]
                          let lean_s89 := by timed congrHAdd lean_r22 lean_r44
                          let lean_s90 := by timed congrHAdd lean_r56 lean_s89
                          let lean_s91 := by timed congrHAdd lean_r57 lean_s90
                          let lean_s92 := by timed congrHAdd lean_r35 lean_s91
                          let lean_s93 := by timed congrHAdd lean_r35 lean_s92
                          let lean_s94 := by timed congrHAdd lean_r32 lean_s93
                          let lean_s95 := by timed congrHAdd lean_r20 lean_s94
                          let lean_s96 := by timed congrHAdd lean_r58 lean_s95
                          have lean_s97 : (Eq let160 let168) := by timed congrHAdd lean_r38 lean_s96
                          have lean_s98 : (Eq let160 let100) := by timed Eq.trans lean_s97 lean_r54
                          have lean_s99 : (Eq let165 let156) := by timed congr lean_s88 lean_s98
                          have lean_s100 : (Eq let165 True) := by timed Eq.trans lean_s99 lean_r52
                          have lean_s101 : (Eq let166 let145) := by timed flipCongrArg lean_s100 [Not]
                          have lean_s102 : (Eq let166 False) := by timed Eq.trans lean_s101 lean_r43
                          have lean_s103 : (Eq let167 False) := by timed Eq.trans lean_r53 lean_s102
                          show False from by timed eqResolve lean_s77 lean_s103
                        ))
                      have lean_s1 : let150 := by liftOrNToNeg lean_s0
                      have lean_s2 : (Eq let150 let151) := by timed Eq.symm lean_r47
                      have lean_s3 : let151 := by timed eqResolve lean_s1 lean_s2
                      have lean_s4 : let150 := by timed eqResolve lean_s3 lean_r47
                      show False from by timed contradiction lean_a126 lean_s4
  ))))))))))))))))))))
have lean_s1 : (Not (And let185 (And let96 (And let187 (And let186 (And let37 (And let63 (And let27 (And let16 (And let43 let149)))))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let192 := by timed flipNotAnd lean_s1 [let185, let96, let187, let186, let37, let63, let27, let16, let43, let149]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let188 let188) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let152 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let98 let152) := by timed congr lean_s7 lean_r41
have lean_s9 : (Eq let98 True) := by timed Eq.trans lean_s8 lean_r48
have lean_s10 : (Eq let99 True) := by timed Eq.trans lean_r21 lean_s9
have lean_s11 : let99 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq let189 let189) := by timed rfl
let lean_s14 := by timed congr lean_s3 lean_s13
have lean_s15 : (Eq let190 let190) := by timed rfl
let lean_s16 := by timed congr lean_s3 lean_s15
have lean_s17 : let71 := by timed rfl
let lean_s18 := by timed flipCongrArg lean_s17 [Eq]
have lean_s19 : (Eq let39 let71) := by timed congr lean_s18 lean_r10
have lean_s20 : (Eq let39 True) := by timed Eq.trans lean_s19 lean_r12
have lean_s21 : (Eq let40 True) := by timed Eq.trans lean_r6 lean_s20
have lean_s22 : let40 := by timed trueElim lean_s21
let lean_s23 := by timed congr lean_s3 lean_s22
have lean_s24 : let142 := by timed rfl
let lean_s25 := by timed flipCongrArg lean_s24 [Eq]
have lean_s26 : (Eq let85 let142) := by timed congr lean_s25 lean_r16
have lean_s27 : (Eq let85 True) := by timed Eq.trans lean_s26 lean_r39
have lean_s28 : (Eq let86 True) := by timed Eq.trans lean_r15 lean_s27
have lean_s29 : let86 := by timed trueElim lean_s28
let lean_s30 := by timed congr lean_s3 lean_s29
have lean_s31 : let122 := by timed rfl
let lean_s32 := by timed flipCongrArg lean_s31 [Eq]
have lean_s33 : (Eq let89 let122) := by timed congr lean_s32 lean_r31
have lean_s34 : (Eq let89 True) := by timed Eq.trans lean_s33 lean_r33
have lean_s35 : (Eq let90 True) := by timed Eq.trans lean_r18 lean_s34
have lean_s36 : let90 := by timed trueElim lean_s35
let lean_s37 := by timed congr lean_s3 lean_s36
have lean_s38 : let154 := by timed rfl
let lean_s39 := by timed flipCongrArg lean_s38 [Eq]
have lean_s40 : (Eq let103 let154) := by timed congr lean_s39 lean_r45
have lean_s41 : (Eq let103 True) := by timed Eq.trans lean_s40 lean_r50
have lean_s42 : (Eq let104 True) := by timed Eq.trans lean_r23 lean_s41
have lean_s43 : let104 := by timed trueElim lean_s42
let lean_s44 := by timed congr lean_s3 lean_s43
have lean_s45 : let72 := by timed rfl
let lean_s46 := by timed flipCongrArg lean_s45 [Eq]
have lean_s47 : (Eq let105 let72) := by timed congr lean_s46 lean_r7
have lean_s48 : (Eq let105 True) := by timed Eq.trans lean_s47 lean_r13
have lean_s49 : (Eq let45 True) := by timed Eq.trans lean_r24 lean_s48
have lean_s50 : let45 := by timed trueElim lean_s49
let lean_s51 := by timed congr lean_s3 lean_s50
have lean_s52 : (Eq let150 let150) := by timed rfl
let lean_s53 := by timed congr lean_s51 lean_s52
let lean_s54 := by timed congr lean_s44 lean_s53
let lean_s55 := by timed congr lean_s37 lean_s54
let lean_s56 := by timed congr lean_s30 lean_s55
let lean_s57 := by timed congr lean_s23 lean_s56
let lean_s58 := by timed congr lean_s16 lean_s57
let lean_s59 := by timed congr lean_s14 lean_s58
let lean_s60 := by timed congr lean_s12 lean_s59
have lean_s61 : (Eq let192 let191) := by timed congr lean_s5 lean_s60
have lean_s62 : let191 := by timed eqResolve lean_s2 lean_s61
have lean_s63 : (Or let36 (Or let15 (Or let26 (Or let62 (Or let95 (Or let42 (Or let190 (Or let189 (Or let188 let150))))))))) := by permutateOr lean_s62, [4, 7, 6, 5, 1, 8, 3, 2, 0, 9], (- 1)
let lean_s64 := by R2 lean_s63, lean_a112, let149, [(- 1), 0]
let lean_s65 := by R2 lean_s64, lean_a110, let185, [(- 1), 0]
let lean_s66 := by timed flipCongrArg lean_r42 [GE.ge]
have lean_s67 : (Eq let1 let1) := by timed rfl
have lean_s68 : (Eq let184 let187) := by timed congr lean_s66 lean_s67
have lean_s69 : let187 := by timed eqResolve lean_a107 lean_s68
let lean_s70 := by R2 lean_s65, lean_s69, let187, [(- 1), 0]
let lean_s71 := by timed flipCongrArg lean_r63 [GE.ge]
have lean_s72 : (Eq let7 let7) := by timed rfl
have lean_s73 : (Eq let183 let186) := by timed congr lean_s71 lean_s72
have lean_s74 : let186 := by timed eqResolve lean_a104 lean_s73
let lean_s75 := by R2 lean_s70, lean_s74, let186, [(- 1), 0]
have lean_s76 : let43 := by timed eqResolve lean_a103 lean_r51
let lean_s77 := by R1 lean_s75, lean_s76, let42, [(- 1), 0]
let lean_s78 := by timed flipCongrArg lean_r36 [LE.le]
have lean_s79 : (Eq let181 let153) := by timed congr lean_s78 lean_s67
have lean_s80 : (Eq let181 let96) := by timed Eq.trans lean_s79 lean_r49
have lean_s81 : let96 := by timed eqResolve lean_a93 lean_s80
let lean_s82 := by R1 lean_s77, lean_s81, let95, [(- 1), 0]
have lean_s83 : let63 := by timed eqResolve lean_a92 lean_r46
let lean_s84 := by R1 lean_s82, lean_s83, let62, [(- 1), 0]
let lean_s85 := by timed flipCongrArg lean_r17 [LE.le]
have lean_s86 : (Eq let8 let8) := by timed rfl
have lean_s87 : (Eq let176 let140) := by timed congr lean_s85 lean_s86
have lean_s88 : (Eq let176 let27) := by timed Eq.trans lean_s87 lean_r37
have lean_s89 : let27 := by timed eqResolve lean_a89 lean_s88
let lean_s90 := by R1 lean_s84, lean_s89, let26, [(- 1), 0]
let lean_s91 := by timed flipCongrArg lean_r19 [LE.le]
have lean_s92 : (Eq let175 let117) := by timed congr lean_s91 lean_s72
have lean_s93 : (Eq let175 let16) := by timed Eq.trans lean_s92 lean_r29
have lean_s94 : let16 := by timed eqResolve lean_a88 lean_s93
let lean_s95 := by R1 lean_s90, lean_s94, let15, [(- 1), 0]
have lean_s96 : let37 := by timed eqResolve lean_a87 lean_r26
exact (show False from by R1 lean_s95, lean_s96, let36, [0, 0])


