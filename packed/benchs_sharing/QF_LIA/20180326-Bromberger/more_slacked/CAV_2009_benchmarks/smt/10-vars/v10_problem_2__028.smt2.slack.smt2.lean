open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x7x5fplus : Int}
variable {x7x5fminus : Int}
variable {x1x5fplus : Int}
variable {x1x5fminus : Int}
variable {x4x5fplus : Int}
variable {x1x5fminus : Int}
variable {x2x5fplus : Int}
variable {x8x5fminus : Int}
variable {x4x5fminus : Int}
variable {x9x5fplus : Int}
variable {x9x5fplus : Int}
variable {x3x5fplus : Int}
variable {x3x5fminus : Int}
variable {x9x5fminus : Int}
variable {x6x5fplus : Int}
variable {x8x5fminus : Int}
variable {x4x5fplus : Int}
variable {x6x5fminus : Int}
variable {x3x5fminus : Int}
variable {x2x5fplus : Int}
variable {x8x5fplus : Int}
variable {x8x5fplus : Int}
variable {x2x5fminus : Int}
variable {x2x5fminus : Int}
variable {x1x5fplus : Int}
variable {x7x5fminus : Int}
variable {x3x5fplus : Int}
variable {x7x5fplus : Int}
variable {x0x5fminus : Int}
variable {x0x5fplus : Int}
variable {x5x5fminus : Int}
variable {x5x5fplus : Int}
variable {x6x5fminus : Int}
variable {x6x5fplus : Int}
variable {x9x5fminus : Int}
variable {x4x5fminus : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Neg.neg (Rat.ofInt 2))
  let let3 := (binrel% LT.lt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 x6x5fminus)
  let let7 := (binrel% HMul.hMul let5 x8x5fminus)
  let let8 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fplus let6)))
  let let9 := (binrel% GE.ge let8 let4)
  let let10 := (Not let9)
  let let11 := (binrel% LT.lt let8 let4)
  let let12 := (Rat.ofInt 1)
  let let13 := (binrel% GT.gt let12 let1)
  let let14 := (binrel% HMul.hMul let5 x0x5fplus)
  let let15 := (binrel% HAdd.hAdd let14 x0x5fminus)
  let let16 := (binrel% HMul.hMul let5 x2x5fminus)
  let let17 := (binrel% HMul.hMul let5 x5x5fminus)
  let let18 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let16 let15))))
  let let19 := (binrel% GE.ge let18 let4)
  let let20 := (Not let19)
  let let21 := (binrel% LT.lt let18 let4)
  let let22 := (Neg.neg let12)
  let let23 := (binrel% HMul.hMul let22 let1)
  let let24 := (binrel% HMul.hMul let12 let1)
  let let25 := (binrel% HMul.hMul let12 let4)
  let let26 := (binrel% HMul.hMul let2 let4)
  let let27 := (binrel% HMul.hMul let22 let5)
  let let28 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let24 let23))))))
  let let29 := (binrel% HMul.hMul let5 x4x5fplus)
  let let30 := (binrel% HAdd.hAdd let29 x4x5fminus)
  let let31 := (binrel% HMul.hMul let5 x9x5fminus)
  let let32 := (binrel% HMul.hMul let5 x0x5fminus)
  let let33 := (binrel% HMul.hMul let5 x7x5fminus)
  let let34 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 let30))))))))))
  let let35 := (binrel% HMul.hMul let22 let34)
  let let36 := (binrel% HMul.hMul let12 let18)
  let let37 := (binrel% HMul.hMul let12 let8)
  let let38 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let32 let30))))))
  let let39 := (binrel% HMul.hMul let12 let38)
  let let40 := (binrel% HMul.hMul let5 x9x5fplus)
  let let41 := (binrel% HAdd.hAdd let40 x9x5fminus)
  let let42 := (binrel% HMul.hMul let5 x3x5fminus)
  let let43 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x0x5fminus let41))))))
  let let44 := (binrel% HMul.hMul let2 let43)
  let let45 := (binrel% HMul.hMul let5 x2x5fplus)
  let let46 := (binrel% HMul.hMul let5 x6x5fplus)
  let let47 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x2x5fminus let15))))))))
  let let48 := (binrel% HMul.hMul let12 let47)
  let let49 := (binrel% HAdd.hAdd x9x5fplus let31)
  let let50 := (binrel% HMul.hMul let5 x3x5fplus)
  let let51 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x3x5fminus let49))))))
  let let52 := (binrel% HMul.hMul let22 let51)
  let let53 := (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 let35))))))
  let let54 := (binrel% GE.ge let53 let28)
  let let55 := (Not let54)
  let let56 := (binrel% LT.lt let53 let28)
  let let57 := (Rat.ofInt let47)
  let let58 := (Int.ofNat 2)
  let let59 := (Neg.neg let58)
  let let60 := (binrel% HMul.hMul let59 x0x5fminus)
  let let61 := (binrel% HMul.hMul let58 x0x5fplus)
  let let62 := (binrel% HMul.hMul let58 x3x5fminus)
  let let63 := (binrel% HMul.hMul let59 x3x5fplus)
  let let64 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let59 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let58 x6x5fminus) (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd (binrel% HMul.hMul let58 x9x5fplus) (binrel% HMul.hMul let59 x9x5fminus)))))))))
  let let65 := (Rat.ofInt let38)
  let let66 := (Rat.ofInt let8)
  let let67 := (Rat.ofInt let18)
  let let68 := (binrel% HMul.hMul let5 x4x5fminus)
  let let69 := (binrel% HAdd.hAdd x4x5fplus let68)
  let let70 := (binrel% HMul.hMul let5 x5x5fplus)
  let let71 := (binrel% HMul.hMul let5 x7x5fplus)
  let let72 := (binrel% HMul.hMul let5 x8x5fplus)
  let let73 := (Rat.ofInt (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd x9x5fminus let69)))))))))))
  let let74 := (Not let10)
  let let75 := (Eq let9 let74)
  let let76 := (Eq let74 let9)
  let let77 := (Rat.ofInt 0)
  let let78 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let77 let77))))))
  let let79 := (binrel% GE.ge let47 let1)
  let let80 := (Not let79)
  let let81 := (Not let80)
  let let82 := (Eq let81 let79)
  let let83 := (binrel% GE.ge let43 let4)
  let let84 := (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let32 let49))))))
  let let85 := (binrel% LE.le let84 let5)
  let let86 := (Rat.ofInt (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let42 let41)))))))
  let let87 := (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let67 let73))))))
  let let88 := (binrel% GE.ge let38 let4)
  let let89 := (Eq let88 let88)
  let let90 := (binrel% GE.ge let51 let5)
  let let91 := (Not let90)
  let let92 := (binrel% LT.lt let51 let5)
  let let93 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let50 x3x5fminus)))))))
  let let94 := (Not let88)
  let let95 := (binrel% LT.lt let38 let4)
  let let96 := (binrel% LE.le let18 let1)
  let let97 := (binrel% HAdd.hAdd x0x5fplus let32)
  let let98 := (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x4x5fminus let97))
  let let99 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 let98))))
  let let100 := (Not let94)
  let let101 := (Eq let88 let100)
  let let102 := (Eq let100 let88)
  let let103 := (binrel% LE.le let8 let1)
  let let104 := (Eq let9 let9)
  let let105 := (Eq let79 let79)
  let let106 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 let98))))))))
  let let107 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x3x5fminus let97))
  let let108 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus let107))))
  let let109 := (Eq let19 let19)
  let let110 := (binrel% LT.lt let47 let1)
  let let111 := (binrel% LE.le let47 let5)
  let let112 := (Not let20)
  let let113 := (Eq let112 let19)
  let let114 := (binrel% LT.lt let22 let1)
  let let115 := (Eq let19 let112)
  let let116 := (binrel% LE.le let38 let1)
  let let117 := (binrel% GE.ge let77 let77)
  let let118 := (Eq let79 let81)
  let let119 := (Not True)
  let let120 := (binrel% HMul.hMul let5 x1x5fminus)
  let let121 := (binrel% HAdd.hAdd x1x5fplus let120)
  let let122 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let120 let15))
  let let123 := (binrel% LE.le let108 let5)
  let let124 := (binrel% LE.le let99 let1)
  let let125 := (binrel% HAdd.hAdd x3x5fplus let42)
  let let126 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 let125))
  let let127 := (binrel% HAdd.hAdd x2x5fplus let16)
  let let128 := (binrel% GE.ge let106 let1)
  let let129 := (binrel% GE.ge let93 let5)
  let let130 := (binrel% HAdd.hAdd let45 x2x5fminus)
  let let131 := (binrel% GE.ge let34 let1)
  let let132 := (Not let131)
  let let133 := (Not let83)
  let let134 := (Or let132 (Or let19 (Or let9 (Or let88 (Or let133 (Or let79 let91))))))
  let let135 := (Or let132 (Or let112 (Or let74 (Or let100 (Or let133 (Or let81 let91))))))
  let let136 := (Or let91 False)
  let let137 := (binrel% LE.le let35 let23)
  let let138 := (And let114 let131)
  let let139 := (binrel% LE.le let36 let24)
  let let140 := (And let13 let96)
  let let141 := (binrel% LE.le let37 let24)
  let let142 := (And let13 let103)
  let let143 := (binrel% LT.lt let39 let25)
  let let144 := (And let13 let95)
  let let145 := (binrel% LE.le let44 let26)
  let let146 := (And let3 let83)
  let let147 := (binrel% LT.lt let48 let24)
  let let148 := (And let13 let110)
  let let149 := (binrel% LE.le let52 let27)
  let let150 := (And let114 let90)
(Eq let3 True) → (Eq let11 let10) → (Eq let13 True) → (Eq let21 let20) → (Eq let56 let55) → (Eq let48 let57) → (Eq let44 let64) → (Eq let39 let65) → (Eq let37 let66) → (Eq let36 let67) → (Eq let35 let73) → (Eq let76 let75) → (Eq let78 let77) → (Eq let26 let2) → let82 → let76 → (Eq let25 let12) → (Eq let85 let83) → (Eq let87 let77) → (Eq let23 let77) → (Eq let89 True) → (Eq let92 let91) → (Eq let93 let51) → (Eq let95 let94) → (Eq let96 let20) → (Eq let99 let38) → (Eq let102 let101) → (Eq let52 let86) → (Eq let103 let10) → (Eq let104 True) → (Eq let105 True) → (Eq let24 let77) → (Eq let106 let34) → (Eq let108 let84) → (Eq let109 True) → (Eq let110 let80) → (Eq let111 let80) → let113 → (Eq let114 True) → (Eq let113 let115) → (Eq let116 let94) → let102 → (Eq let117 True) → (Eq let27 let12) → (Eq let82 let118) → (Eq let119 False) → (binrel% GE.ge x8x5fplus let1) → (binrel% GE.ge x8x5fminus let1) → (binrel% GE.ge x7x5fplus let1) → (binrel% GE.ge x7x5fminus let1) → (binrel% GE.ge x6x5fplus let1) → (binrel% GE.ge x6x5fminus let1) → (binrel% GE.ge x5x5fplus let1) → (binrel% GE.ge x5x5fminus let1) → (binrel% GE.ge x3x5fplus let1) → (binrel% GE.ge x3x5fminus let1) → (binrel% GE.ge x1x5fplus let1) → (binrel% GE.ge x1x5fminus let1) → (binrel% GE.ge x2x5fplus let1) → (binrel% GE.ge x2x5fminus let1) → (binrel% GE.ge x0x5fplus let1) → (binrel% GE.ge x0x5fminus let1) → (binrel% GE.ge x9x5fplus let1) → (binrel% GE.ge x9x5fminus let1) → (binrel% GE.ge x4x5fplus let1) → (binrel% GE.ge x4x5fminus let1) → (binrel% GE.ge (binrel% HSub.hSub x6x5fplus x6x5fminus) let1) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x3x5fminus let121)))))))))) let4) → let111 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x4x5fminus let121)))))))) let4) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x2x5fminus let122)))))) let4) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 let69)))))) let4) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 let107)))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x2x5fminus let121)))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let63 let62))))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let68 let97)))))) let1) → let123 → let124 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 let126)) let1) → let96 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 let127)) let1) → (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let58 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let59 x7x5fminus) let69)) let4) → let103 → (binrel% LE.le let126 let1) → let128 → (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let16 let122)))))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd x5x5fminus let122)))))) let4) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd (binrel% HMul.hMul let58 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let59 x8x5fminus) (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus let30)))))) let5) → let129 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 let30)))))) let5) → (binrel% GE.ge (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let120 (binrel% HAdd.hAdd let61 let60))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x3x5fminus let127)))) let4) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 let121)))) let4) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x4x5fminus let130)))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 let125)) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 let130)) let1) → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Neg.neg (Rat.ofInt 2))
  let let3 := (binrel% LT.lt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 x6x5fminus)
  let let7 := (binrel% HMul.hMul let5 x8x5fminus)
  let let8 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fplus let6)))
  let let9 := (binrel% GE.ge let8 let4)
  let let10 := (Not let9)
  let let11 := (binrel% LT.lt let8 let4)
  let let12 := (Rat.ofInt 1)
  let let13 := (binrel% GT.gt let12 let1)
  let let14 := (binrel% HMul.hMul let5 x0x5fplus)
  let let15 := (binrel% HAdd.hAdd let14 x0x5fminus)
  let let16 := (binrel% HMul.hMul let5 x2x5fminus)
  let let17 := (binrel% HMul.hMul let5 x5x5fminus)
  let let18 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let16 let15))))
  let let19 := (binrel% GE.ge let18 let4)
  let let20 := (Not let19)
  let let21 := (binrel% LT.lt let18 let4)
  let let22 := (Neg.neg let12)
  let let23 := (binrel% HMul.hMul let22 let1)
  let let24 := (binrel% HMul.hMul let12 let1)
  let let25 := (binrel% HMul.hMul let12 let4)
  let let26 := (binrel% HMul.hMul let2 let4)
  let let27 := (binrel% HMul.hMul let22 let5)
  let let28 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let24 let23))))))
  let let29 := (binrel% HMul.hMul let5 x4x5fplus)
  let let30 := (binrel% HAdd.hAdd let29 x4x5fminus)
  let let31 := (binrel% HMul.hMul let5 x9x5fminus)
  let let32 := (binrel% HMul.hMul let5 x0x5fminus)
  let let33 := (binrel% HMul.hMul let5 x7x5fminus)
  let let34 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 let30))))))))))
  let let35 := (binrel% HMul.hMul let22 let34)
  let let36 := (binrel% HMul.hMul let12 let18)
  let let37 := (binrel% HMul.hMul let12 let8)
  let let38 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let32 let30))))))
  let let39 := (binrel% HMul.hMul let12 let38)
  let let40 := (binrel% HMul.hMul let5 x9x5fplus)
  let let41 := (binrel% HAdd.hAdd let40 x9x5fminus)
  let let42 := (binrel% HMul.hMul let5 x3x5fminus)
  let let43 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x0x5fminus let41))))))
  let let44 := (binrel% HMul.hMul let2 let43)
  let let45 := (binrel% HMul.hMul let5 x2x5fplus)
  let let46 := (binrel% HMul.hMul let5 x6x5fplus)
  let let47 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x2x5fminus let15))))))))
  let let48 := (binrel% HMul.hMul let12 let47)
  let let49 := (binrel% HAdd.hAdd x9x5fplus let31)
  let let50 := (binrel% HMul.hMul let5 x3x5fplus)
  let let51 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x3x5fminus let49))))))
  let let52 := (binrel% HMul.hMul let22 let51)
  let let53 := (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 let35))))))
  let let54 := (binrel% GE.ge let53 let28)
  let let55 := (Not let54)
  let let56 := (binrel% LT.lt let53 let28)
  let let57 := (Rat.ofInt let47)
  let let58 := (Int.ofNat 2)
  let let59 := (Neg.neg let58)
  let let60 := (binrel% HMul.hMul let59 x0x5fminus)
  let let61 := (binrel% HMul.hMul let58 x0x5fplus)
  let let62 := (binrel% HMul.hMul let58 x3x5fminus)
  let let63 := (binrel% HMul.hMul let59 x3x5fplus)
  let let64 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let59 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let58 x6x5fminus) (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd (binrel% HMul.hMul let58 x9x5fplus) (binrel% HMul.hMul let59 x9x5fminus)))))))))
  let let65 := (Rat.ofInt let38)
  let let66 := (Rat.ofInt let8)
  let let67 := (Rat.ofInt let18)
  let let68 := (binrel% HMul.hMul let5 x4x5fminus)
  let let69 := (binrel% HAdd.hAdd x4x5fplus let68)
  let let70 := (binrel% HMul.hMul let5 x5x5fplus)
  let let71 := (binrel% HMul.hMul let5 x7x5fplus)
  let let72 := (binrel% HMul.hMul let5 x8x5fplus)
  let let73 := (Rat.ofInt (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd x9x5fminus let69)))))))))))
  let let74 := (Not let10)
  let let75 := (Eq let9 let74)
  let let76 := (Eq let74 let9)
  let let77 := (Rat.ofInt 0)
  let let78 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let77 let77))))))
  let let79 := (binrel% GE.ge let47 let1)
  let let80 := (Not let79)
  let let81 := (Not let80)
  let let82 := (Eq let81 let79)
  let let83 := (binrel% GE.ge let43 let4)
  let let84 := (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let32 let49))))))
  let let85 := (binrel% LE.le let84 let5)
  let let86 := (Rat.ofInt (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let42 let41)))))))
  let let87 := (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let67 let73))))))
  let let88 := (binrel% GE.ge let38 let4)
  let let89 := (Eq let88 let88)
  let let90 := (binrel% GE.ge let51 let5)
  let let91 := (Not let90)
  let let92 := (binrel% LT.lt let51 let5)
  let let93 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let50 x3x5fminus)))))))
  let let94 := (Not let88)
  let let95 := (binrel% LT.lt let38 let4)
  let let96 := (binrel% LE.le let18 let1)
  let let97 := (binrel% HAdd.hAdd x0x5fplus let32)
  let let98 := (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x4x5fminus let97))
  let let99 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 let98))))
  let let100 := (Not let94)
  let let101 := (Eq let88 let100)
  let let102 := (Eq let100 let88)
  let let103 := (binrel% LE.le let8 let1)
  let let104 := (Eq let9 let9)
  let let105 := (Eq let79 let79)
  let let106 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 let98))))))))
  let let107 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x3x5fminus let97))
  let let108 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus let107))))
  let let109 := (Eq let19 let19)
  let let110 := (binrel% LT.lt let47 let1)
  let let111 := (binrel% LE.le let47 let5)
  let let112 := (Not let20)
  let let113 := (Eq let112 let19)
  let let114 := (binrel% LT.lt let22 let1)
  let let115 := (Eq let19 let112)
  let let116 := (binrel% LE.le let38 let1)
  let let117 := (binrel% GE.ge let77 let77)
  let let118 := (Eq let79 let81)
  let let119 := (Not True)
  let let120 := (binrel% HMul.hMul let5 x1x5fminus)
  let let121 := (binrel% HAdd.hAdd x1x5fplus let120)
  let let122 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let120 let15))
  let let123 := (binrel% LE.le let108 let5)
  let let124 := (binrel% LE.le let99 let1)
  let let125 := (binrel% HAdd.hAdd x3x5fplus let42)
  let let126 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 let125))
  let let127 := (binrel% HAdd.hAdd x2x5fplus let16)
  let let128 := (binrel% GE.ge let106 let1)
  let let129 := (binrel% GE.ge let93 let5)
  let let130 := (binrel% HAdd.hAdd let45 x2x5fminus)
  let let131 := (binrel% GE.ge let34 let1)
  let let132 := (Not let131)
  let let133 := (Not let83)
  let let134 := (Or let132 (Or let19 (Or let9 (Or let88 (Or let133 (Or let79 let91))))))
  let let135 := (Or let132 (Or let112 (Or let74 (Or let100 (Or let133 (Or let81 let91))))))
  let let136 := (Or let91 False)
  let let137 := (binrel% LE.le let35 let23)
  let let138 := (And let114 let131)
  let let139 := (binrel% LE.le let36 let24)
  let let140 := (And let13 let96)
  let let141 := (binrel% LE.le let37 let24)
  let let142 := (And let13 let103)
  let let143 := (binrel% LT.lt let39 let25)
  let let144 := (And let13 let95)
  let let145 := (binrel% LE.le let44 let26)
  let let146 := (And let3 let83)
  let let147 := (binrel% LT.lt let48 let24)
  let let148 := (And let13 let110)
  let let149 := (binrel% LE.le let52 let27)
  let let150 := (And let114 let90)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let11 let10) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let13 True) => -- EVALUATE
fun lean_r3 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let56 let55) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let48 let57) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let44 let64) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let39 let65) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let37 let66) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let36 let67) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let35 let73) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let76 let75) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let78 let77) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let26 let2) => -- THEORY_REWRITE_ARITH
fun lean_r14 : let82 => -- THEORY_REWRITE_BOOL
fun lean_r15 : let76 => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let25 let12) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let85 let83) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let87 let77) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let23 let77) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let89 True) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let92 let91) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let93 let51) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let95 let94) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let96 let20) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let99 let38) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let102 let101) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let52 let86) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let103 let10) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let104 True) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let105 True) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let24 let77) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let106 let34) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let108 let84) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let109 True) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let110 let80) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let111 let80) => -- THEORY_REWRITE_ARITH
fun lean_r37 : let113 => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let114 True) => -- EVALUATE
fun lean_r39 : (Eq let113 let115) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let116 let94) => -- THEORY_REWRITE_ARITH
fun lean_r41 : let102 => -- THEORY_REWRITE_BOOL
fun lean_r42 : (Eq let117 True) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let27 let12) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let82 let118) => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let119 False) => -- THEORY_REWRITE_BOOL
fun lean_a46 : (binrel% GE.ge x8x5fplus let1) =>
fun lean_a47 : (binrel% GE.ge x8x5fminus let1) =>
fun lean_a48 : (binrel% GE.ge x7x5fplus let1) =>
fun lean_a49 : (binrel% GE.ge x7x5fminus let1) =>
fun lean_a50 : (binrel% GE.ge x6x5fplus let1) =>
fun lean_a51 : (binrel% GE.ge x6x5fminus let1) =>
fun lean_a52 : (binrel% GE.ge x5x5fplus let1) =>
fun lean_a53 : (binrel% GE.ge x5x5fminus let1) =>
fun lean_a54 : (binrel% GE.ge x3x5fplus let1) =>
fun lean_a55 : (binrel% GE.ge x3x5fminus let1) =>
fun lean_a56 : (binrel% GE.ge x1x5fplus let1) =>
fun lean_a57 : (binrel% GE.ge x1x5fminus let1) =>
fun lean_a58 : (binrel% GE.ge x2x5fplus let1) =>
fun lean_a59 : (binrel% GE.ge x2x5fminus let1) =>
fun lean_a60 : (binrel% GE.ge x0x5fplus let1) =>
fun lean_a61 : (binrel% GE.ge x0x5fminus let1) =>
fun lean_a62 : (binrel% GE.ge x9x5fplus let1) =>
fun lean_a63 : (binrel% GE.ge x9x5fminus let1) =>
fun lean_a64 : (binrel% GE.ge x4x5fplus let1) =>
fun lean_a65 : (binrel% GE.ge x4x5fminus let1) =>
fun lean_a66 : (binrel% GE.ge (binrel% HSub.hSub x6x5fplus x6x5fminus) let1) =>
fun lean_a67 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x3x5fminus let121)))))))))) let4) =>
fun lean_a68 : let111 =>
fun lean_a69 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x4x5fminus let121)))))))) let4) =>
fun lean_a70 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x2x5fminus let122)))))) let4) =>
fun lean_a71 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let71 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 let69)))))) let4) =>
fun lean_a72 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 let107)))) let1) =>
fun lean_a73 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd x2x5fminus let121)))))) let1) =>
fun lean_a74 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let63 let62))))))) let1) =>
fun lean_a75 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let68 let97)))))) let1) =>
fun lean_a76 : let123 =>
fun lean_a77 : let124 =>
fun lean_a78 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 let126)) let1) =>
fun lean_a79 : let96 =>
fun lean_a80 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 let127)) let1) =>
fun lean_a81 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul let58 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let59 x7x5fminus) let69)) let4) =>
fun lean_a82 : let103 =>
fun lean_a83 : (binrel% LE.le let126 let1) =>
fun lean_a84 : let128 =>
fun lean_a85 : (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let16 let122)))))))) let1) =>
fun lean_a86 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd x5x5fminus let122)))))) let4) =>
fun lean_a87 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd (binrel% HMul.hMul let58 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let59 x8x5fminus) (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd x6x5fminus let30)))))) let5) =>
fun lean_a88 : let129 =>
fun lean_a89 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let17 let30)))))) let5) =>
fun lean_a90 : (binrel% GE.ge (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let120 (binrel% HAdd.hAdd let61 let60))))) let1) =>
fun lean_a91 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd x3x5fminus let127)))) let4) =>
fun lean_a92 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let33 let121)))) let4) =>
fun lean_a93 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd x4x5fminus let130)))) let1) =>
fun lean_a94 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let31 let125)) let1) =>
fun lean_a95 : (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let6 let130)) let1) => by
have lean_s0 : (Or let132 (Or let112 (Or let74 (Or let100 (Or let133 (Or let81 let136)))))) :=
  (scope (fun lean_a96 : let131 =>
    (scope (fun lean_a97 : let20 =>
      (scope (fun lean_a98 : let10 =>
        (scope (fun lean_a99 : let94 =>
          (scope (fun lean_a100 : let83 =>
            (scope (fun lean_a101 : let80 =>
              (scope (fun lean_a102 : let90 =>
                let lean_s0 := by timed flipCongrArg lean_r22 [GE.ge]
                have lean_s1 : (Eq let5 let5) := by timed rfl
                have lean_s2 : (Eq let129 let90) := by timed congr lean_s0 lean_s1
                have lean_s3 : let90 := by timed eqResolve lean_a88 lean_s2
                have lean_s4 : let136 :=
                  (scope (fun lean_a103 : let90 =>
                    have lean_s4 : let114 := by timed trueElim lean_r38
                    have lean_s5 : let90 := by timed eqResolve lean_a88 lean_s2
                    have lean_s6 : let150 := by timed And.intro lean_s4 lean_s5
                    have lean_s7 : (Implies let150 let149) := by arithMulNeg [let51, let5, let22], 3
                    have lean_s8 : let149 := by timed modusPonens lean_s6 lean_s7
                    have lean_s9 : let13 := by timed trueElim lean_r2
                    have lean_s10 : let80 := by timed eqResolve lean_a68 lean_r36
                    have lean_s11 : (Eq let80 let110) := by timed Eq.symm lean_r35
                    have lean_s12 : let110 := by timed eqResolve lean_s10 lean_s11
                    have lean_s13 : let148 := by timed And.intro lean_s9 lean_s12
                    have lean_s14 : (Implies let148 let147) := by arithMulPos [let47, let1, let12], 0
                    have lean_s15 : let147 := by timed modusPonens lean_s13 lean_s14
                    have lean_s16 : let3 := by timed trueElim lean_r0
                    let lean_s17 := by timed flipCongrArg lean_r33 [LE.le]
                    have lean_s18 : (Eq let123 let85) := by timed congr lean_s17 lean_s1
                    have lean_s19 : (Eq let123 let83) := by timed Eq.trans lean_s18 lean_r17
                    have lean_s20 : let83 := by timed eqResolve lean_a76 lean_s19
                    have lean_s21 : let146 := by timed And.intro lean_s16 lean_s20
                    have lean_s22 : (Implies let146 let145) := by arithMulNeg [let43, let4, let2], 3
                    have lean_s23 : let145 := by timed modusPonens lean_s21 lean_s22
                    let lean_s24 := by timed flipCongrArg lean_r25 [LE.le]
                    have lean_s25 : (Eq let1 let1) := by timed rfl
                    have lean_s26 : (Eq let124 let116) := by timed congr lean_s24 lean_s25
                    have lean_s27 : (Eq let124 let94) := by timed Eq.trans lean_s26 lean_r40
                    have lean_s28 : let94 := by timed eqResolve lean_a77 lean_s27
                    have lean_s29 : (Eq let94 let95) := by timed Eq.symm lean_r23
                    have lean_s30 : let95 := by timed eqResolve lean_s28 lean_s29
                    have lean_s31 : let144 := by timed And.intro lean_s9 lean_s30
                    have lean_s32 : (Implies let144 let143) := by arithMulPos [let38, let4, let12], 0
                    have lean_s33 : let143 := by timed modusPonens lean_s31 lean_s32
                    have lean_s34 : let10 := by timed eqResolve lean_a82 lean_r28
                    have lean_s35 : (Eq let10 let11) := by timed Eq.symm lean_r1
                    have lean_s36 : let11 := by timed eqResolve lean_s34 lean_s35
                    have lean_s37 : let103 := by intTightUb lean_s36
                    have lean_s38 : let142 := by timed And.intro lean_s9 lean_s37
                    have lean_s39 : (Implies let142 let141) := by arithMulPos [let8, let1, let12], 1
                    have lean_s40 : let141 := by timed modusPonens lean_s38 lean_s39
                    have lean_s41 : let20 := by timed eqResolve lean_a79 lean_r24
                    have lean_s42 : (Eq let20 let21) := by timed Eq.symm lean_r3
                    have lean_s43 : let21 := by timed eqResolve lean_s41 lean_s42
                    have lean_s44 : let96 := by intTightUb lean_s43
                    have lean_s45 : let140 := by timed And.intro lean_s9 lean_s44
                    have lean_s46 : (Implies let140 let139) := by arithMulPos [let18, let1, let12], 1
                    have lean_s47 : let139 := by timed modusPonens lean_s45 lean_s46
                    let lean_s48 := by timed flipCongrArg lean_r32 [GE.ge]
                    have lean_s49 : (Eq let128 let131) := by timed congr lean_s48 lean_s25
                    have lean_s50 : let131 := by timed eqResolve lean_a84 lean_s49
                    have lean_s51 : let138 := by timed And.intro lean_s4 lean_s50
                    have lean_s52 : (Implies let138 let137) := by arithMulNeg [let34, let1, let22], 3
                    have lean_s53 : let137 := by timed modusPonens lean_s51 lean_s52
                    have lean_s54 : let56 := by sumBounds [lean_s8, lean_s15, lean_s23, lean_s33, lean_s40, lean_s47, lean_s53]
                    let lean_s55 := by timed congrHAdd lean_r9 lean_r10
                    let lean_s56 := by timed congrHAdd lean_r8 lean_s55
                    let lean_s57 := by timed congrHAdd lean_r7 lean_s56
                    let lean_s58 := by timed congrHAdd lean_r6 lean_s57
                    let lean_s59 := by timed congrHAdd lean_r5 lean_s58
                    have lean_s60 : (Eq let53 let87) := by timed congrHAdd lean_r27 lean_s59
                    have lean_s61 : (Eq let53 let77) := by timed Eq.trans lean_s60 lean_r18
                    let lean_s62 := by timed flipCongrArg lean_s61 [GE.ge]
                    let lean_s63 := by timed congrHAdd lean_r31 lean_r19
                    let lean_s64 := by timed congrHAdd lean_r31 lean_s63
                    let lean_s65 := by timed congrHAdd lean_r16 lean_s64
                    let lean_s66 := by timed congrHAdd lean_r13 lean_s65
                    let lean_s67 := by timed congrHAdd lean_r31 lean_s66
                    have lean_s68 : (Eq let28 let78) := by timed congrHAdd lean_r43 lean_s67
                    have lean_s69 : (Eq let28 let77) := by timed Eq.trans lean_s68 lean_r12
                    have lean_s70 : (Eq let54 let117) := by timed congr lean_s62 lean_s69
                    have lean_s71 : (Eq let54 True) := by timed Eq.trans lean_s70 lean_r42
                    have lean_s72 : (Eq let55 let119) := by timed flipCongrArg lean_s71 [Not]
                    have lean_s73 : (Eq let55 False) := by timed Eq.trans lean_s72 lean_r45
                    have lean_s74 : (Eq let56 False) := by timed Eq.trans lean_r4 lean_s73
                    show False from by timed eqResolve lean_s54 lean_s74
                  ))
                have lean_s5 : let91 := by liftOrNToNeg lean_s4
                have lean_s6 : (Eq let91 let92) := by timed Eq.symm lean_r21
                have lean_s7 : let92 := by timed eqResolve lean_s5 lean_s6
                have lean_s8 : let91 := by timed eqResolve lean_s7 lean_r21
                show False from by timed contradiction lean_s3 lean_s8
  ))))))))))))))
have lean_s1 : (Not (And let131 (And let20 (And let10 (And let94 (And let83 (And let80 let90))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let135 := by timed flipNotAnd lean_s1 [let131, let20, let10, let94, let83, let80, let90]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let132 let132) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let109 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let115 let109) := by timed congr lean_s7 lean_r37
have lean_s9 : (Eq let115 True) := by timed Eq.trans lean_s8 lean_r34
have lean_s10 : (Eq let113 True) := by timed Eq.trans lean_r39 lean_s9
have lean_s11 : let113 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let104 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let75 let104) := by timed congr lean_s14 lean_r15
have lean_s16 : (Eq let75 True) := by timed Eq.trans lean_s15 lean_r29
have lean_s17 : (Eq let76 True) := by timed Eq.trans lean_r11 lean_s16
have lean_s18 : let76 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s3 lean_s18
have lean_s20 : let89 := by timed rfl
let lean_s21 := by timed flipCongrArg lean_s20 [Eq]
have lean_s22 : (Eq let101 let89) := by timed congr lean_s21 lean_r41
have lean_s23 : (Eq let101 True) := by timed Eq.trans lean_s22 lean_r20
have lean_s24 : (Eq let102 True) := by timed Eq.trans lean_r26 lean_s23
have lean_s25 : let102 := by timed trueElim lean_s24
let lean_s26 := by timed congr lean_s3 lean_s25
have lean_s27 : (Eq let133 let133) := by timed rfl
let lean_s28 := by timed congr lean_s3 lean_s27
have lean_s29 : let105 := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [Eq]
have lean_s31 : (Eq let118 let105) := by timed congr lean_s30 lean_r14
have lean_s32 : (Eq let118 True) := by timed Eq.trans lean_s31 lean_r30
have lean_s33 : (Eq let82 True) := by timed Eq.trans lean_r44 lean_s32
have lean_s34 : let82 := by timed trueElim lean_s33
let lean_s35 := by timed congr lean_s3 lean_s34
have lean_s36 : (Eq let91 let91) := by timed rfl
let lean_s37 := by timed congr lean_s35 lean_s36
let lean_s38 := by timed congr lean_s28 lean_s37
let lean_s39 := by timed congr lean_s26 lean_s38
let lean_s40 := by timed congr lean_s19 lean_s39
let lean_s41 := by timed congr lean_s12 lean_s40
have lean_s42 : (Eq let135 let134) := by timed congr lean_s5 lean_s41
have lean_s43 : let134 := by timed eqResolve lean_s2 lean_s42
have lean_s44 : (Or let79 (Or let88 (Or let19 (Or let9 (Or let133 (Or let132 let91)))))) := by permutateOr lean_s43, [5, 3, 1, 2, 4, 0, 6], (- 1)
let lean_s45 := by timed flipCongrArg lean_r22 [GE.ge]
have lean_s46 : (Eq let5 let5) := by timed rfl
have lean_s47 : (Eq let129 let90) := by timed congr lean_s45 lean_s46
have lean_s48 : let90 := by timed eqResolve lean_a88 lean_s47
let lean_s49 := by R2 lean_s44, lean_s48, let90, [(- 1), 0]
let lean_s50 := by timed flipCongrArg lean_r32 [GE.ge]
have lean_s51 : (Eq let1 let1) := by timed rfl
have lean_s52 : (Eq let128 let131) := by timed congr lean_s50 lean_s51
have lean_s53 : let131 := by timed eqResolve lean_a84 lean_s52
let lean_s54 := by R2 lean_s49, lean_s53, let131, [(- 1), 0]
have lean_s55 : let10 := by timed eqResolve lean_a82 lean_r28
let lean_s56 := by R1 lean_s54, lean_s55, let9, [(- 1), 0]
have lean_s57 : let20 := by timed eqResolve lean_a79 lean_r24
let lean_s58 := by R1 lean_s56, lean_s57, let19, [(- 1), 0]
let lean_s59 := by timed flipCongrArg lean_r25 [LE.le]
have lean_s60 : (Eq let124 let116) := by timed congr lean_s59 lean_s51
have lean_s61 : (Eq let124 let94) := by timed Eq.trans lean_s60 lean_r40
have lean_s62 : let94 := by timed eqResolve lean_a77 lean_s61
let lean_s63 := by R1 lean_s58, lean_s62, let88, [(- 1), 0]
let lean_s64 := by timed flipCongrArg lean_r33 [LE.le]
have lean_s65 : (Eq let123 let85) := by timed congr lean_s64 lean_s46
have lean_s66 : (Eq let123 let83) := by timed Eq.trans lean_s65 lean_r17
have lean_s67 : let83 := by timed eqResolve lean_a76 lean_s66
let lean_s68 := by R2 lean_s63, lean_s67, let83, [(- 1), 0]
have lean_s69 : let80 := by timed eqResolve lean_a68 lean_r36
exact (show False from by R1 lean_s68, lean_s69, let79, [0, 0])


