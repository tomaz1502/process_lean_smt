open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x9x5fplus : Int}
variable {x9x5fminus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x7x5fplus : Int}
variable {x7x5fminus : Int}
variable {x4x5fplus : Int}
variable {x4x5fminus : Int}
variable {x7x5fminus : Int}
variable {x0x5fplus : Int}
variable {x4x5fminus : Int}
variable {x1x5fminus : Int}
variable {x2x5fminus : Int}
variable {x1x5fplus : Int}
variable {x8x5fminus : Int}
variable {x6x5fminus : Int}
variable {x2x5fplus : Int}
variable {x3x5fplus : Int}
variable {x6x5fplus : Int}
variable {x8x5fplus : Int}
variable {x3x5fminus : Int}
variable {x4x5fplus : Int}
variable {x3x5fminus : Int}
variable {x1x5fplus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x6x5fminus : Int}
variable {x7x5fplus : Int}
variable {x2x5fminus : Int}
variable {x6x5fplus : Int}
variable {x1x5fminus : Int}
variable {x2x5fplus : Int}
variable {x8x5fplus : Int}
variable {x5x5fminus : Int}
variable {x3x5fplus : Int}
variable {x5x5fplus : Int}
variable {x9x5fminus : Int}
variable {x0x5fminus : Int}
variable {x9x5fplus : Int}
variable {x8x5fminus : Int}

theorem th0 :
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x3x5fplus)
  let let4 := (binrel% HAdd.hAdd let3 x3x5fminus)
  let let5 := (binrel% HMul.hMul let2 x0x5fminus)
  let let6 := (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let5 let4))
  let let7 := (binrel% GE.ge let6 let1)
  let let8 := (Not let7)
  let let9 := (binrel% LT.lt let6 let1)
  let let10 := (Int.ofNat 0)
  let let11 := (Int.ofNat 4)
  let let12 := (Int.ofNat 7)
  let let13 := (binrel% HDiv.hDiv let12 let11)
  let let14 := (Neg.neg let13)
  let let15 := (binrel% LT.lt let14 let10)
  let let16 := (binrel% HMul.hMul let2 x1x5fminus)
  let let17 := (binrel% HAdd.hAdd x1x5fplus let16)
  let let18 := (Int.ofNat 2)
  let let19 := (Neg.neg let18)
  let let20 := (binrel% HMul.hMul let2 x8x5fminus)
  let let21 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x5x5fminus) let17))))))
  let let22 := (binrel% GE.ge let21 let1)
  let let23 := (Not let22)
  let let24 := (binrel% LT.lt let21 let1)
  let let25 := (binrel% HMul.hMul let2 x2x5fminus)
  let let26 := (binrel% HAdd.hAdd x2x5fplus let25)
  let let27 := (binrel% HMul.hMul let2 x6x5fplus)
  let let28 := (binrel% HMul.hMul let2 x0x5fplus)
  let let29 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd x6x5fminus let26))))))
  let let30 := (binrel% GE.ge let29 let10)
  let let31 := (Not let30)
  let let32 := (binrel% LT.lt let29 let10)
  let let33 := (binrel% HDiv.hDiv let1 let18)
  let let34 := (binrel% GT.gt let33 let10)
  let let35 := (binrel% HMul.hMul let2 x4x5fplus)
  let let36 := (binrel% HMul.hMul let2 x5x5fminus)
  let let37 := (binrel% HMul.hMul let2 x7x5fplus)
  let let38 := (binrel% HMul.hMul let2 x8x5fplus)
  let let39 := (binrel% HMul.hMul let19 x9x5fminus)
  let let40 := (binrel% HMul.hMul let18 x9x5fplus)
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x0x5fplus) (binrel% HMul.hMul let19 x0x5fminus))))))))))))
  let let42 := (binrel% GE.ge let41 let1)
  let let43 := (Not let42)
  let let44 := (binrel% LT.lt let41 let1)
  let let45 := (Neg.neg (Rat.ofInt 3))
  let let46 := (binrel% LT.lt let45 let10)
  let let47 := (binrel% HAdd.hAdd let28 x0x5fminus)
  let let48 := (binrel% HMul.hMul let2 x5x5fplus)
  let let49 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x5x5fminus let47))))
  let let50 := (binrel% GE.ge let49 let18)
  let let51 := (Not let50)
  let let52 := (binrel% LT.lt let49 let18)
  let let53 := (binrel% HDiv.hDiv let1 let11)
  let let54 := (Neg.neg let53)
  let let55 := (binrel% LT.lt let54 let10)
  let let56 := (Rat.ofInt 1)
  let let57 := (Neg.neg let56)
  let let58 := (binrel% LT.lt let57 let10)
  let let59 := (binrel% GT.gt let13 let10)
  let let60 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd x6x5fminus let4))
  let let61 := (binrel% HMul.hMul let18 x5x5fminus)
  let let62 := (binrel% HMul.hMul let19 x5x5fplus)
  let let63 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x4x5fminus let60))))))
  let let64 := (binrel% GE.ge let63 let1)
  let let65 := (Not let64)
  let let66 := (binrel% LT.lt let63 let1)
  let let67 := (Int.ofNat 5)
  let let68 := (binrel% HDiv.hDiv let67 let11)
  let let69 := (Neg.neg let68)
  let let70 := (binrel% HDiv.hDiv let67 let18)
  let let71 := (Neg.neg let70)
  let let72 := (binrel% HMul.hMul let69 x8x5fminus)
  let let73 := (binrel% HMul.hMul let68 x8x5fplus)
  let let74 := (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd (binrel% HMul.hMul let71 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let71 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let68 x1x5fplus) (binrel% HMul.hMul let69 x1x5fminus))))))))
  let let75 := (binrel% HMul.hMul let68 let21)
  let let76 := (Rat.ofInt 0)
  let let77 := (binrel% HMul.hMul let54 let10)
  let let78 := (binrel% HMul.hMul let57 let1)
  let let79 := (Not let31)
  let let80 := (Eq let79 let30)
  let let81 := (Eq let50 let50)
  let let82 := (binrel% HMul.hMul let68 let2)
  let let83 := (Eq let30 let30)
  let let84 := (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x4x5fplus) (binrel% HMul.hMul let14 x4x5fminus))))))
  let let85 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let35 x4x5fminus)))))
  let let86 := (binrel% HMul.hMul let14 let85)
  let let87 := (binrel% HMul.hMul let2 x1x5fplus)
  let let88 := (binrel% HAdd.hAdd let87 x1x5fminus)
  let let89 := (binrel% HMul.hMul let2 x6x5fminus)
  let let90 := (binrel% HMul.hMul let19 x4x5fminus)
  let let91 := (binrel% HMul.hMul let18 x4x5fplus)
  let let92 := (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let89 let88))))))
  let let93 := (binrel% GE.ge let92 let1)
  let let94 := (Eq let93 let93)
  let let95 := (Not let93)
  let let96 := (binrel% LE.le let92 let10)
  let let97 := (binrel% GT.gt let56 let10)
  let let98 := (Eq let64 let64)
  let let99 := (binrel% HMul.hMul let13 let10)
  let let100 := (binrel% HMul.hMul let56 let1)
  let let101 := (binrel% HMul.hMul let45 let10)
  let let102 := (binrel% HMul.hMul let33 let10)
  let let103 := (binrel% HMul.hMul let53 let10)
  let let104 := (binrel% HMul.hMul let68 let1)
  let let105 := (binrel% HMul.hMul let14 let10)
  let let106 := (binrel% HMul.hMul let56 let10)
  let let107 := (binrel% HAdd.hAdd let106 (binrel% HAdd.hAdd let105 (binrel% HAdd.hAdd let104 (binrel% HAdd.hAdd let103 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let78 let99))))))))))
  let let108 := (binrel% HMul.hMul let13 let63)
  let let109 := (binrel% HMul.hMul let2 x9x5fminus)
  let let110 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let16 let26))))
  let let111 := (binrel% HMul.hMul let57 let110)
  let let112 := (binrel% HMul.hMul let2 x3x5fminus)
  let let113 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let112 let26))
  let let114 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let89 let113))))
  let let115 := (binrel% HMul.hMul let54 let114)
  let let116 := (binrel% HMul.hMul let56 let49)
  let let117 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd x7x5fminus let60))))
  let let118 := (binrel% HMul.hMul let45 let117)
  let let119 := (binrel% HMul.hMul let33 let41)
  let let120 := (binrel% HMul.hMul let68 let29)
  let let121 := (binrel% HMul.hMul let53 let92)
  let let122 := (binrel% HMul.hMul let56 let6)
  let let123 := (binrel% HAdd.hAdd let122 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let121 (binrel% HAdd.hAdd let120 (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let111 let108))))))))))
  let let124 := (binrel% GE.ge let123 let107)
  let let125 := (Not let124)
  let let126 := (binrel% LT.lt let123 let107)
  let let127 := (Not let95)
  let let128 := (Eq let93 let127)
  let let129 := (Eq let127 let93)
  let let130 := (Not let65)
  let let131 := (Eq let64 let130)
  let let132 := (Eq let130 let64)
  let let133 := (Not let8)
  let let134 := (Eq let7 let133)
  let let135 := (Eq let133 let7)
  let let136 := (Rat.ofInt let6)
  let let137 := (Not let23)
  let let138 := (Eq let137 let22)
  let let139 := (binrel% LE.le let29 let2)
  let let140 := (binrel% LT.lt let92 let1)
  let let141 := (binrel% LE.le let6 let10)
  let let142 := (binrel% LE.le let41 let10)
  let let143 := (Eq let22 let22)
  let let144 := (binrel% LE.le let63 let10)
  let let145 := (Eq let30 let79)
  let let146 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let25 let47))))))
  let let147 := (Eq let7 let7)
  let let148 := (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let68 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let68 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let68 x2x5fplus) (binrel% HMul.hMul let69 x2x5fminus))))))))
  let let149 := (binrel% GE.ge let76 let76)
  let let150 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd x0x5fplus let5)))))))
  let let151 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x4x5fminus let4))))))))
  let let152 := (binrel% LE.le let49 let1)
  let let153 := (binrel% HMul.hMul let2 x2x5fplus)
  let let154 := (binrel% HAdd.hAdd let153 x2x5fminus)
  let let155 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x1x5fminus let154)))))
  let let156 := (binrel% GT.gt let68 let10)
  let let157 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let36 let113))))
  let let158 := (Eq let22 let137)
  let let159 := (binrel% GT.gt let53 let10)
  let let160 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x3x5fplus let112)))
  let let161 := (binrel% GE.ge let160 let10)
  let let162 := (Not let141)
  let let163 := (binrel% GT.gt let6 let10)
  let let164 := (Eq let163 let162)
  let let165 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let57 let76))))))))))
  let let166 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let25 let17))
  let let167 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 let166))
  let let168 := (Neg.neg let33)
  let let169 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd (binrel% HMul.hMul let168 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let168 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let168 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let168 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x4x5fminus) (binrel% HAdd.hAdd x0x5fplus let5)))))))))))
  let let170 := (binrel% LE.le let21 let10)
  let let171 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let112 let47))
  let let172 := (binrel% HDiv.hDiv let12 let18)
  let let173 := (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let172) x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let172 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x3x5fplus) (binrel% HMul.hMul let13 x3x5fminus))))))))))
  let let174 := (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let53 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let53 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let53 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x2x5fplus) (binrel% HMul.hMul let53 x2x5fminus))))))))
  let let175 := (Rat.ofInt let49)
  let let176 := (Int.ofNat 3)
  let let177 := (Neg.neg let176)
  let let178 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let177 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let176 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let176 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let177 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let176 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let177 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let176 x3x5fplus) (binrel% HMul.hMul let177 x3x5fminus)))))))))
  let let179 := (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let168 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let53 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let53 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x1x5fplus) (binrel% HMul.hMul let53 x1x5fminus))))))))
  let let180 := (binrel% HAdd.hAdd let136 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let175 (binrel% HAdd.hAdd let174 (binrel% HAdd.hAdd let155 let173))))))))))
  let let181 := (Not let51)
  let let182 := (Eq let181 let50)
  let let183 := (Eq let42 let42)
  let let184 := (Eq let50 let181)
  let let185 := (Not let43)
  let let186 := (Eq let185 let42)
  let let187 := (Not True)
  let let188 := (Eq let42 let185)
  let let189 := (binrel% LE.le let151 let10)
  let let190 := (binrel% HMul.hMul let2 x4x5fminus)
  let let191 := (binrel% HMul.hMul let2 x7x5fminus)
  let let192 := (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x1x5fminus let47))
  let let193 := (binrel% LE.le let146 let2)
  let let194 := (binrel% LE.le let150 let10)
  let let195 := (binrel% HMul.hMul let18 x4x5fminus)
  let let196 := (binrel% HMul.hMul let19 x4x5fplus)
  let let197 := (binrel% HAdd.hAdd let27 x6x5fminus)
  let let198 := (binrel% GE.ge let157 let10)
  let let199 := (binrel% GE.ge let117 let10)
  let let200 := (binrel% GE.ge let167 let1)
  let let201 := (binrel% GE.ge let85 let10)
  let let202 := (binrel% GE.ge let171 let10)
  let let203 := (binrel% GE.ge let114 let10)
  let let204 := (binrel% GE.ge let110 let1)
  let let205 := (Not let201)
  let let206 := (Not let204)
  let let207 := (Not let199)
  let let208 := (Not let203)
  let let209 := (Or let64 (Or let206 (Or let208 (Or let50 (Or let207 (Or let42 (Or let30 (Or let93 (Or let22 (Or let205 let7))))))))))
  let let210 := (Or let130 (Or let206 (Or let208 (Or let181 (Or let207 (Or let185 (Or let79 (Or let127 (Or let137 (Or let205 let133))))))))))
  let let211 := (binrel% LE.le let108 let99)
  let let212 := (And let59 let144)
  let let213 := (binrel% LE.le let111 let78)
  let let214 := (And let58 let204)
  let let215 := (binrel% LE.le let115 let77)
  let let216 := (And let55 let203)
  let let217 := (binrel% LE.le let116 let100)
  let let218 := (And let97 let152)
  let let219 := (binrel% LE.le let118 let101)
  let let220 := (And let46 let199)
  let let221 := (binrel% LE.le let119 let102)
  let let222 := (And let34 let142)
  let let223 := (binrel% LE.le let120 let82)
  let let224 := (And let156 let139)
  let let225 := (binrel% LE.le let121 let103)
  let let226 := (And let159 let96)
  let let227 := (binrel% LT.lt let75 let104)
  let let228 := (And let156 let24)
  let let229 := (binrel% LE.le let86 let105)
  let let230 := (And let15 let201)
  let let231 := (binrel% LE.le let122 let106)
  let let232 := (And let97 let141)
(Eq let9 let8) → (Eq let15 True) → (Eq let24 let23) → (Eq let32 let31) → (Eq let34 True) → (Eq let44 let43) → (Eq let46 True) → (Eq let52 let51) → (Eq let55 True) → (Eq let58 True) → (Eq let59 True) → (Eq let66 let65) → (Eq let75 let74) → (Eq let77 let76) → (Eq let78 let57) → let80 → (Eq let81 True) → (Eq let82 let69) → (Eq let83 True) → (Eq let86 let84) → (Eq let94 True) → (Eq let96 let95) → (Eq let97 True) → (Eq let98 True) → (Eq let126 let125) → (Eq let129 let128) → (Eq let132 let131) → (Eq let135 let134) → (Eq let122 let136) → let129 → let132 → let138 → (Eq let139 let31) → (Eq let140 let95) → (Eq let141 let8) → (Eq let142 let43) → (Eq let143 True) → (Eq let144 let65) → (Eq let80 let145) → (Eq let146 let29) → (Eq let147 True) → (Eq let120 let148) → (Eq let149 True) → (Eq let150 let92) → (Eq let151 let63) → (Eq let152 let51) → (Eq let111 let155) → (Eq let156 True) → (Eq let157 let114) → (Eq let138 let158) → (Eq let159 True) → (Eq let161 let8) → let164 → let135 → (Eq let165 let76) → (Eq let167 let110) → (Eq let119 let169) → (Eq let100 let56) → (Eq let170 let23) → (Eq let171 let160) → (Eq let101 let76) → (Eq let180 let76) → let182 → (Eq let183 True) → (Eq let103 let76) → (Eq let182 let184) → let186 → (Eq let104 let68) → (Eq let187 False) → (Eq let99 let76) → (Eq let102 let76) → (Eq let186 let188) → (Eq let105 let76) → (Eq let106 let76) → (Eq let108 let173) → (Eq let115 let174) → (Eq let116 let175) → (Eq let118 let178) → (Eq let121 let179) → (binrel% GE.ge x9x5fplus let10) → (binrel% GE.ge x9x5fminus let10) → (binrel% GE.ge x8x5fplus let10) → (binrel% GE.ge x8x5fminus let10) → (binrel% GE.ge x7x5fplus let10) → (binrel% GE.ge x7x5fminus let10) → (binrel% GE.ge x5x5fplus let10) → (binrel% GE.ge x5x5fminus let10) → (binrel% GE.ge x4x5fplus let10) → (binrel% GE.ge x4x5fminus let10) → (binrel% GE.ge x0x5fplus let10) → (binrel% GE.ge x0x5fminus let10) → (binrel% GE.ge x6x5fplus let10) → (binrel% GE.ge x6x5fminus let10) → (binrel% GE.ge x3x5fplus let10) → (binrel% GE.ge x3x5fminus let10) → (binrel% GE.ge x1x5fplus let10) → (binrel% GE.ge x1x5fminus let10) → (binrel% GE.ge x2x5fplus let10) → (binrel% GE.ge x2x5fminus let10) → let142 → let189 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let16 let47)))))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x2x5fminus) let47)))))))) let2) → (binrel% LE.le (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let191 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let190 let17)))))))) let2) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let190 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let112 let192)))))) let2) → let193 → let194 → let170 → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let196 (binrel% HAdd.hAdd let195 let166)))) let2) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let191 let197)))))) let2) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x1x5fplus) (binrel% HMul.hMul let19 x1x5fminus)))))) let1) → let152 → let198 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd x2x5fminus let192)))) let2) → let199 → (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x0x5fplus) (binrel% HMul.hMul let18 x0x5fminus)))))))) let2) → let200 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let190 let88)))) let10) → let201 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let196 (binrel% HAdd.hAdd let195 let154)))) let10) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x7x5fminus) (binrel% HAdd.hAdd x4x5fplus let190))))) let10) → (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x8x5fminus) let88)) let10) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 let197)) let2) → let202 → False :=
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 x3x5fplus)
  let let4 := (binrel% HAdd.hAdd let3 x3x5fminus)
  let let5 := (binrel% HMul.hMul let2 x0x5fminus)
  let let6 := (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let5 let4))
  let let7 := (binrel% GE.ge let6 let1)
  let let8 := (Not let7)
  let let9 := (binrel% LT.lt let6 let1)
  let let10 := (Int.ofNat 0)
  let let11 := (Int.ofNat 4)
  let let12 := (Int.ofNat 7)
  let let13 := (binrel% HDiv.hDiv let12 let11)
  let let14 := (Neg.neg let13)
  let let15 := (binrel% LT.lt let14 let10)
  let let16 := (binrel% HMul.hMul let2 x1x5fminus)
  let let17 := (binrel% HAdd.hAdd x1x5fplus let16)
  let let18 := (Int.ofNat 2)
  let let19 := (Neg.neg let18)
  let let20 := (binrel% HMul.hMul let2 x8x5fminus)
  let let21 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x5x5fminus) let17))))))
  let let22 := (binrel% GE.ge let21 let1)
  let let23 := (Not let22)
  let let24 := (binrel% LT.lt let21 let1)
  let let25 := (binrel% HMul.hMul let2 x2x5fminus)
  let let26 := (binrel% HAdd.hAdd x2x5fplus let25)
  let let27 := (binrel% HMul.hMul let2 x6x5fplus)
  let let28 := (binrel% HMul.hMul let2 x0x5fplus)
  let let29 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd x6x5fminus let26))))))
  let let30 := (binrel% GE.ge let29 let10)
  let let31 := (Not let30)
  let let32 := (binrel% LT.lt let29 let10)
  let let33 := (binrel% HDiv.hDiv let1 let18)
  let let34 := (binrel% GT.gt let33 let10)
  let let35 := (binrel% HMul.hMul let2 x4x5fplus)
  let let36 := (binrel% HMul.hMul let2 x5x5fminus)
  let let37 := (binrel% HMul.hMul let2 x7x5fplus)
  let let38 := (binrel% HMul.hMul let2 x8x5fplus)
  let let39 := (binrel% HMul.hMul let19 x9x5fminus)
  let let40 := (binrel% HMul.hMul let18 x9x5fplus)
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x0x5fplus) (binrel% HMul.hMul let19 x0x5fminus))))))))))))
  let let42 := (binrel% GE.ge let41 let1)
  let let43 := (Not let42)
  let let44 := (binrel% LT.lt let41 let1)
  let let45 := (Neg.neg (Rat.ofInt 3))
  let let46 := (binrel% LT.lt let45 let10)
  let let47 := (binrel% HAdd.hAdd let28 x0x5fminus)
  let let48 := (binrel% HMul.hMul let2 x5x5fplus)
  let let49 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x5x5fminus let47))))
  let let50 := (binrel% GE.ge let49 let18)
  let let51 := (Not let50)
  let let52 := (binrel% LT.lt let49 let18)
  let let53 := (binrel% HDiv.hDiv let1 let11)
  let let54 := (Neg.neg let53)
  let let55 := (binrel% LT.lt let54 let10)
  let let56 := (Rat.ofInt 1)
  let let57 := (Neg.neg let56)
  let let58 := (binrel% LT.lt let57 let10)
  let let59 := (binrel% GT.gt let13 let10)
  let let60 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd x6x5fminus let4))
  let let61 := (binrel% HMul.hMul let18 x5x5fminus)
  let let62 := (binrel% HMul.hMul let19 x5x5fplus)
  let let63 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x4x5fminus let60))))))
  let let64 := (binrel% GE.ge let63 let1)
  let let65 := (Not let64)
  let let66 := (binrel% LT.lt let63 let1)
  let let67 := (Int.ofNat 5)
  let let68 := (binrel% HDiv.hDiv let67 let11)
  let let69 := (Neg.neg let68)
  let let70 := (binrel% HDiv.hDiv let67 let18)
  let let71 := (Neg.neg let70)
  let let72 := (binrel% HMul.hMul let69 x8x5fminus)
  let let73 := (binrel% HMul.hMul let68 x8x5fplus)
  let let74 := (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd (binrel% HMul.hMul let71 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let70 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let71 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let68 x1x5fplus) (binrel% HMul.hMul let69 x1x5fminus))))))))
  let let75 := (binrel% HMul.hMul let68 let21)
  let let76 := (Rat.ofInt 0)
  let let77 := (binrel% HMul.hMul let54 let10)
  let let78 := (binrel% HMul.hMul let57 let1)
  let let79 := (Not let31)
  let let80 := (Eq let79 let30)
  let let81 := (Eq let50 let50)
  let let82 := (binrel% HMul.hMul let68 let2)
  let let83 := (Eq let30 let30)
  let let84 := (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x4x5fplus) (binrel% HMul.hMul let14 x4x5fminus))))))
  let let85 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let35 x4x5fminus)))))
  let let86 := (binrel% HMul.hMul let14 let85)
  let let87 := (binrel% HMul.hMul let2 x1x5fplus)
  let let88 := (binrel% HAdd.hAdd let87 x1x5fminus)
  let let89 := (binrel% HMul.hMul let2 x6x5fminus)
  let let90 := (binrel% HMul.hMul let19 x4x5fminus)
  let let91 := (binrel% HMul.hMul let18 x4x5fplus)
  let let92 := (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let89 let88))))))
  let let93 := (binrel% GE.ge let92 let1)
  let let94 := (Eq let93 let93)
  let let95 := (Not let93)
  let let96 := (binrel% LE.le let92 let10)
  let let97 := (binrel% GT.gt let56 let10)
  let let98 := (Eq let64 let64)
  let let99 := (binrel% HMul.hMul let13 let10)
  let let100 := (binrel% HMul.hMul let56 let1)
  let let101 := (binrel% HMul.hMul let45 let10)
  let let102 := (binrel% HMul.hMul let33 let10)
  let let103 := (binrel% HMul.hMul let53 let10)
  let let104 := (binrel% HMul.hMul let68 let1)
  let let105 := (binrel% HMul.hMul let14 let10)
  let let106 := (binrel% HMul.hMul let56 let10)
  let let107 := (binrel% HAdd.hAdd let106 (binrel% HAdd.hAdd let105 (binrel% HAdd.hAdd let104 (binrel% HAdd.hAdd let103 (binrel% HAdd.hAdd let82 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let101 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let78 let99))))))))))
  let let108 := (binrel% HMul.hMul let13 let63)
  let let109 := (binrel% HMul.hMul let2 x9x5fminus)
  let let110 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let16 let26))))
  let let111 := (binrel% HMul.hMul let57 let110)
  let let112 := (binrel% HMul.hMul let2 x3x5fminus)
  let let113 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let112 let26))
  let let114 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let89 let113))))
  let let115 := (binrel% HMul.hMul let54 let114)
  let let116 := (binrel% HMul.hMul let56 let49)
  let let117 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd x7x5fminus let60))))
  let let118 := (binrel% HMul.hMul let45 let117)
  let let119 := (binrel% HMul.hMul let33 let41)
  let let120 := (binrel% HMul.hMul let68 let29)
  let let121 := (binrel% HMul.hMul let53 let92)
  let let122 := (binrel% HMul.hMul let56 let6)
  let let123 := (binrel% HAdd.hAdd let122 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let121 (binrel% HAdd.hAdd let120 (binrel% HAdd.hAdd let119 (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd let116 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let111 let108))))))))))
  let let124 := (binrel% GE.ge let123 let107)
  let let125 := (Not let124)
  let let126 := (binrel% LT.lt let123 let107)
  let let127 := (Not let95)
  let let128 := (Eq let93 let127)
  let let129 := (Eq let127 let93)
  let let130 := (Not let65)
  let let131 := (Eq let64 let130)
  let let132 := (Eq let130 let64)
  let let133 := (Not let8)
  let let134 := (Eq let7 let133)
  let let135 := (Eq let133 let7)
  let let136 := (Rat.ofInt let6)
  let let137 := (Not let23)
  let let138 := (Eq let137 let22)
  let let139 := (binrel% LE.le let29 let2)
  let let140 := (binrel% LT.lt let92 let1)
  let let141 := (binrel% LE.le let6 let10)
  let let142 := (binrel% LE.le let41 let10)
  let let143 := (Eq let22 let22)
  let let144 := (binrel% LE.le let63 let10)
  let let145 := (Eq let30 let79)
  let let146 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let25 let47))))))
  let let147 := (Eq let7 let7)
  let let148 := (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let68 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let69 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let68 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let68 x2x5fplus) (binrel% HMul.hMul let69 x2x5fminus))))))))
  let let149 := (binrel% GE.ge let76 let76)
  let let150 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let90 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd x0x5fplus let5)))))))
  let let151 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let62 (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x4x5fminus let4))))))))
  let let152 := (binrel% LE.le let49 let1)
  let let153 := (binrel% HMul.hMul let2 x2x5fplus)
  let let154 := (binrel% HAdd.hAdd let153 x2x5fminus)
  let let155 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x9x5fplus) (binrel% HAdd.hAdd x9x5fminus (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x1x5fminus let154)))))
  let let156 := (binrel% GT.gt let68 let10)
  let let157 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let36 let113))))
  let let158 := (Eq let22 let137)
  let let159 := (binrel% GT.gt let53 let10)
  let let160 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd x3x5fplus let112)))
  let let161 := (binrel% GE.ge let160 let10)
  let let162 := (Not let141)
  let let163 := (binrel% GT.gt let6 let10)
  let let164 := (Eq let163 let162)
  let let165 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let57 let76))))))))))
  let let166 := (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let25 let17))
  let let167 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 let166))
  let let168 := (Neg.neg let33)
  let let169 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd (binrel% HMul.hMul let168 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let168 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let168 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let168 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x4x5fminus) (binrel% HAdd.hAdd x0x5fplus let5)))))))))))
  let let170 := (binrel% LE.le let21 let10)
  let let171 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let112 let47))
  let let172 := (binrel% HDiv.hDiv let12 let18)
  let let173 := (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let172) x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let172 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let14 x3x5fplus) (binrel% HMul.hMul let13 x3x5fminus))))))))))
  let let174 := (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let53 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let53 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let53 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x2x5fplus) (binrel% HMul.hMul let53 x2x5fminus))))))))
  let let175 := (Rat.ofInt let49)
  let let176 := (Int.ofNat 3)
  let let177 := (Neg.neg let176)
  let let178 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let177 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let176 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let176 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let177 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let176 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let177 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let176 x3x5fplus) (binrel% HMul.hMul let177 x3x5fminus)))))))))
  let let179 := (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let168 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let53 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let53 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let54 x1x5fplus) (binrel% HMul.hMul let53 x1x5fminus))))))))
  let let180 := (binrel% HAdd.hAdd let136 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let148 (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let175 (binrel% HAdd.hAdd let174 (binrel% HAdd.hAdd let155 let173))))))))))
  let let181 := (Not let51)
  let let182 := (Eq let181 let50)
  let let183 := (Eq let42 let42)
  let let184 := (Eq let50 let181)
  let let185 := (Not let43)
  let let186 := (Eq let185 let42)
  let let187 := (Not True)
  let let188 := (Eq let42 let185)
  let let189 := (binrel% LE.le let151 let10)
  let let190 := (binrel% HMul.hMul let2 x4x5fminus)
  let let191 := (binrel% HMul.hMul let2 x7x5fminus)
  let let192 := (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x1x5fminus let47))
  let let193 := (binrel% LE.le let146 let2)
  let let194 := (binrel% LE.le let150 let10)
  let let195 := (binrel% HMul.hMul let18 x4x5fminus)
  let let196 := (binrel% HMul.hMul let19 x4x5fplus)
  let let197 := (binrel% HAdd.hAdd let27 x6x5fminus)
  let let198 := (binrel% GE.ge let157 let10)
  let let199 := (binrel% GE.ge let117 let10)
  let let200 := (binrel% GE.ge let167 let1)
  let let201 := (binrel% GE.ge let85 let10)
  let let202 := (binrel% GE.ge let171 let10)
  let let203 := (binrel% GE.ge let114 let10)
  let let204 := (binrel% GE.ge let110 let1)
  let let205 := (Not let201)
  let let206 := (Not let204)
  let let207 := (Not let199)
  let let208 := (Not let203)
  let let209 := (Or let64 (Or let206 (Or let208 (Or let50 (Or let207 (Or let42 (Or let30 (Or let93 (Or let22 (Or let205 let7))))))))))
  let let210 := (Or let130 (Or let206 (Or let208 (Or let181 (Or let207 (Or let185 (Or let79 (Or let127 (Or let137 (Or let205 let133))))))))))
  let let211 := (binrel% LE.le let108 let99)
  let let212 := (And let59 let144)
  let let213 := (binrel% LE.le let111 let78)
  let let214 := (And let58 let204)
  let let215 := (binrel% LE.le let115 let77)
  let let216 := (And let55 let203)
  let let217 := (binrel% LE.le let116 let100)
  let let218 := (And let97 let152)
  let let219 := (binrel% LE.le let118 let101)
  let let220 := (And let46 let199)
  let let221 := (binrel% LE.le let119 let102)
  let let222 := (And let34 let142)
  let let223 := (binrel% LE.le let120 let82)
  let let224 := (And let156 let139)
  let let225 := (binrel% LE.le let121 let103)
  let let226 := (And let159 let96)
  let let227 := (binrel% LT.lt let75 let104)
  let let228 := (And let156 let24)
  let let229 := (binrel% LE.le let86 let105)
  let let230 := (And let15 let201)
  let let231 := (binrel% LE.le let122 let106)
  let let232 := (And let97 let141)
fun lean_r0 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let15 True) => -- EVALUATE
fun lean_r2 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let32 let31) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let34 True) => -- EVALUATE
fun lean_r5 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let46 True) => -- EVALUATE
fun lean_r7 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let55 True) => -- EVALUATE
fun lean_r9 : (Eq let58 True) => -- EVALUATE
fun lean_r10 : (Eq let59 True) => -- EVALUATE
fun lean_r11 : (Eq let66 let65) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let75 let74) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let77 let76) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let78 let57) => -- THEORY_REWRITE_ARITH
fun lean_r15 : let80 => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let81 True) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let82 let69) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let83 True) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let86 let84) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let94 True) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let96 let95) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let97 True) => -- EVALUATE
fun lean_r23 : (Eq let98 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let126 let125) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let129 let128) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let132 let131) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let135 let134) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let122 let136) => -- THEORY_REWRITE_ARITH
fun lean_r29 : let129 => -- THEORY_REWRITE_BOOL
fun lean_r30 : let132 => -- THEORY_REWRITE_BOOL
fun lean_r31 : let138 => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let139 let31) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let140 let95) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let141 let8) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let142 let43) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let143 True) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let144 let65) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let80 let145) => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let146 let29) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let147 True) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let120 let148) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let149 True) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let150 let92) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let151 let63) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let152 let51) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let111 let155) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let156 True) => -- EVALUATE
fun lean_r48 : (Eq let157 let114) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let138 let158) => -- THEORY_REWRITE_BOOL
fun lean_r50 : (Eq let159 True) => -- EVALUATE
fun lean_r51 : (Eq let161 let8) => -- THEORY_REWRITE_ARITH
fun lean_r52 : let164 => -- THEORY_REWRITE_ARITH
fun lean_r53 : let135 => -- THEORY_REWRITE_BOOL
fun lean_r54 : (Eq let165 let76) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let167 let110) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let119 let169) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let100 let56) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let170 let23) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let171 let160) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let101 let76) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let180 let76) => -- THEORY_REWRITE_ARITH
fun lean_r62 : let182 => -- THEORY_REWRITE_BOOL
fun lean_r63 : (Eq let183 True) => -- THEORY_REWRITE_BOOL
fun lean_r64 : (Eq let103 let76) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let182 let184) => -- THEORY_REWRITE_BOOL
fun lean_r66 : let186 => -- THEORY_REWRITE_BOOL
fun lean_r67 : (Eq let104 let68) => -- THEORY_REWRITE_ARITH
fun lean_r68 : (Eq let187 False) => -- THEORY_REWRITE_BOOL
fun lean_r69 : (Eq let99 let76) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq let102 let76) => -- THEORY_REWRITE_ARITH
fun lean_r71 : (Eq let186 let188) => -- THEORY_REWRITE_BOOL
fun lean_r72 : (Eq let105 let76) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let106 let76) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let108 let173) => -- THEORY_REWRITE_ARITH
fun lean_r75 : (Eq let115 let174) => -- THEORY_REWRITE_ARITH
fun lean_r76 : (Eq let116 let175) => -- THEORY_REWRITE_ARITH
fun lean_r77 : (Eq let118 let178) => -- THEORY_REWRITE_ARITH
fun lean_r78 : (Eq let121 let179) => -- THEORY_REWRITE_ARITH
fun lean_a79 : (binrel% GE.ge x9x5fplus let10) =>
fun lean_a80 : (binrel% GE.ge x9x5fminus let10) =>
fun lean_a81 : (binrel% GE.ge x8x5fplus let10) =>
fun lean_a82 : (binrel% GE.ge x8x5fminus let10) =>
fun lean_a83 : (binrel% GE.ge x7x5fplus let10) =>
fun lean_a84 : (binrel% GE.ge x7x5fminus let10) =>
fun lean_a85 : (binrel% GE.ge x5x5fplus let10) =>
fun lean_a86 : (binrel% GE.ge x5x5fminus let10) =>
fun lean_a87 : (binrel% GE.ge x4x5fplus let10) =>
fun lean_a88 : (binrel% GE.ge x4x5fminus let10) =>
fun lean_a89 : (binrel% GE.ge x0x5fplus let10) =>
fun lean_a90 : (binrel% GE.ge x0x5fminus let10) =>
fun lean_a91 : (binrel% GE.ge x6x5fplus let10) =>
fun lean_a92 : (binrel% GE.ge x6x5fminus let10) =>
fun lean_a93 : (binrel% GE.ge x3x5fplus let10) =>
fun lean_a94 : (binrel% GE.ge x3x5fminus let10) =>
fun lean_a95 : (binrel% GE.ge x1x5fplus let10) =>
fun lean_a96 : (binrel% GE.ge x1x5fminus let10) =>
fun lean_a97 : (binrel% GE.ge x2x5fplus let10) =>
fun lean_a98 : (binrel% GE.ge x2x5fminus let10) =>
fun lean_a99 : let142 =>
fun lean_a100 : let189 =>
fun lean_a101 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let16 let47)))))))) let1) =>
fun lean_a102 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x2x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x2x5fminus) let47)))))))) let2) =>
fun lean_a103 : (binrel% LE.le (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let191 (binrel% HAdd.hAdd let48 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let190 let17)))))))) let2) =>
fun lean_a104 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let190 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let112 let192)))))) let2) =>
fun lean_a105 : let193 =>
fun lean_a106 : let194 =>
fun lean_a107 : let170 =>
fun lean_a108 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let196 (binrel% HAdd.hAdd let195 let166)))) let2) =>
fun lean_a109 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let191 let197)))))) let2) =>
fun lean_a110 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x1x5fplus) (binrel% HMul.hMul let19 x1x5fminus)))))) let1) =>
fun lean_a111 : let152 =>
fun lean_a112 : let198 =>
fun lean_a113 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd x2x5fminus let192)))) let2) =>
fun lean_a114 : let199 =>
fun lean_a115 : (binrel% GE.ge (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let89 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x0x5fplus) (binrel% HMul.hMul let18 x0x5fminus)))))))) let2) =>
fun lean_a116 : let200 =>
fun lean_a117 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let190 let88)))) let10) =>
fun lean_a118 : let201 =>
fun lean_a119 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let196 (binrel% HAdd.hAdd let195 let154)))) let10) =>
fun lean_a120 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x7x5fminus) (binrel% HAdd.hAdd x4x5fplus let190))))) let10) =>
fun lean_a121 : (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let18 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let19 x8x5fminus) let88)) let10) =>
fun lean_a122 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let20 let197)) let2) =>
fun lean_a123 : let202 => by
have lean_s0 : (Or let130 (Or let206 (Or let208 (Or let181 (Or let207 (Or let185 (Or let79 (Or let127 (Or let137 (Or let205 (Or let133 False))))))))))) :=
  (scope (fun lean_a124 : let65 =>
    (scope (fun lean_a125 : let204 =>
      (scope (fun lean_a126 : let203 =>
        (scope (fun lean_a127 : let51 =>
          (scope (fun lean_a128 : let199 =>
            (scope (fun lean_a129 : let43 =>
              (scope (fun lean_a130 : let31 =>
                (scope (fun lean_a131 : let95 =>
                  (scope (fun lean_a132 : let23 =>
                    (scope (fun lean_a133 : let201 =>
                      (scope (fun lean_a134 : let8 =>
                        let lean_s0 := by timed flipCongrArg lean_r59 [GE.ge]
                        have lean_s1 : (Eq let10 let10) := by timed rfl
                        have lean_s2 : (Eq let202 let161) := by timed congr lean_s0 lean_s1
                        have lean_s3 : (Eq let202 let8) := by timed Eq.trans lean_s2 lean_r51
                        have lean_s4 : let8 := by timed eqResolve lean_a123 lean_s3
                        have lean_s5 : (Eq let8 let9) := by timed Eq.symm lean_r0
                        have lean_s6 : let9 := by timed eqResolve lean_s4 lean_s5
                        have lean_s7 : let141 := by intTightUb lean_s6
                        have lean_s8 : (Or let162 False) :=
                          (scope (fun lean_a133 : let141 =>
                            have lean_s8 : let97 := by timed trueElim lean_r22
                            have lean_s9 : let232 := by timed And.intro lean_s8 lean_a133
                            have lean_s10 : (Implies let232 let231) := by arithMulPos [let6, let10, let56], 1
                            have lean_s11 : let231 := by timed modusPonens lean_s9 lean_s10
                            have lean_s12 : let15 := by timed trueElim lean_r1
                            have lean_s13 : let230 := by timed And.intro lean_s12 lean_a133
                            have lean_s14 : (Implies let230 let229) := by arithMulNeg [let85, let10, let14], 3
                            have lean_s15 : let229 := by timed modusPonens lean_s13 lean_s14
                            have lean_s16 : let156 := by timed trueElim lean_r47
                            have lean_s17 : let23 := by timed eqResolve lean_a107 lean_r58
                            have lean_s18 : (Eq let23 let24) := by timed Eq.symm lean_r2
                            have lean_s19 : let24 := by timed eqResolve lean_s17 lean_s18
                            have lean_s20 : let228 := by timed And.intro lean_s16 lean_s19
                            have lean_s21 : (Implies let228 let227) := by arithMulPos [let21, let1, let68], 0
                            have lean_s22 : let227 := by timed modusPonens lean_s20 lean_s21
                            have lean_s23 : let159 := by timed trueElim lean_r50
                            let lean_s24 := by timed flipCongrArg lean_r43 [LE.le]
                            have lean_s25 : (Eq let194 let96) := by timed congr lean_s24 lean_s1
                            have lean_s26 : (Eq let194 let95) := by timed Eq.trans lean_s25 lean_r21
                            have lean_s27 : let95 := by timed eqResolve lean_a106 lean_s26
                            have lean_s28 : (Eq let95 let140) := by timed Eq.symm lean_r33
                            have lean_s29 : let140 := by timed eqResolve lean_s27 lean_s28
                            have lean_s30 : let96 := by intTightUb lean_s29
                            have lean_s31 : let226 := by timed And.intro lean_s23 lean_s30
                            have lean_s32 : (Implies let226 let225) := by arithMulPos [let92, let10, let53], 1
                            have lean_s33 : let225 := by timed modusPonens lean_s31 lean_s32
                            let lean_s34 := by timed flipCongrArg lean_r39 [LE.le]
                            have lean_s35 : (Eq let2 let2) := by timed rfl
                            have lean_s36 : (Eq let193 let139) := by timed congr lean_s34 lean_s35
                            have lean_s37 : (Eq let193 let31) := by timed Eq.trans lean_s36 lean_r32
                            have lean_s38 : let31 := by timed eqResolve lean_a105 lean_s37
                            have lean_s39 : (Eq let31 let32) := by timed Eq.symm lean_r3
                            have lean_s40 : let32 := by timed eqResolve lean_s38 lean_s39
                            have lean_s41 : let139 := by intTightUb lean_s40
                            have lean_s42 : let224 := by timed And.intro lean_s16 lean_s41
                            have lean_s43 : (Implies let224 let223) := by arithMulPos [let29, let2, let68], 1
                            have lean_s44 : let223 := by timed modusPonens lean_s42 lean_s43
                            have lean_s45 : let34 := by timed trueElim lean_r4
                            have lean_s46 : let43 := by timed eqResolve lean_a99 lean_r35
                            have lean_s47 : (Eq let43 let44) := by timed Eq.symm lean_r5
                            have lean_s48 : let44 := by timed eqResolve lean_s46 lean_s47
                            have lean_s49 : let142 := by intTightUb lean_s48
                            have lean_s50 : let222 := by timed And.intro lean_s45 lean_s49
                            have lean_s51 : (Implies let222 let221) := by arithMulPos [let41, let10, let33], 1
                            have lean_s52 : let221 := by timed modusPonens lean_s50 lean_s51
                            have lean_s53 : let46 := by timed trueElim lean_r6
                            have lean_s54 : let220 := by timed And.intro lean_s53 lean_a128
                            have lean_s55 : (Implies let220 let219) := by arithMulNeg [let117, let10, let45], 3
                            have lean_s56 : let219 := by timed modusPonens lean_s54 lean_s55
                            have lean_s57 : let51 := by timed eqResolve lean_a111 lean_r45
                            have lean_s58 : (Eq let51 let52) := by timed Eq.symm lean_r7
                            have lean_s59 : let52 := by timed eqResolve lean_s57 lean_s58
                            have lean_s60 : let152 := by intTightUb lean_s59
                            have lean_s61 : let218 := by timed And.intro lean_s8 lean_s60
                            have lean_s62 : (Implies let218 let217) := by arithMulPos [let49, let1, let56], 1
                            have lean_s63 : let217 := by timed modusPonens lean_s61 lean_s62
                            have lean_s64 : let55 := by timed trueElim lean_r8
                            let lean_s65 := by timed flipCongrArg lean_r48 [GE.ge]
                            have lean_s66 : (Eq let198 let203) := by timed congr lean_s65 lean_s1
                            have lean_s67 : let203 := by timed eqResolve lean_a112 lean_s66
                            have lean_s68 : let216 := by timed And.intro lean_s64 lean_s67
                            have lean_s69 : (Implies let216 let215) := by arithMulNeg [let114, let10, let54], 3
                            have lean_s70 : let215 := by timed modusPonens lean_s68 lean_s69
                            have lean_s71 : let58 := by timed trueElim lean_r9
                            let lean_s72 := by timed flipCongrArg lean_r55 [GE.ge]
                            have lean_s73 : (Eq let1 let1) := by timed rfl
                            have lean_s74 : (Eq let200 let204) := by timed congr lean_s72 lean_s73
                            have lean_s75 : let204 := by timed eqResolve lean_a116 lean_s74
                            have lean_s76 : let214 := by timed And.intro lean_s71 lean_s75
                            have lean_s77 : (Implies let214 let213) := by arithMulNeg [let110, let1, let57], 3
                            have lean_s78 : let213 := by timed modusPonens lean_s76 lean_s77
                            have lean_s79 : let59 := by timed trueElim lean_r10
                            let lean_s80 := by timed flipCongrArg lean_r44 [LE.le]
                            have lean_s81 : (Eq let189 let144) := by timed congr lean_s80 lean_s1
                            have lean_s82 : (Eq let189 let65) := by timed Eq.trans lean_s81 lean_r37
                            have lean_s83 : let65 := by timed eqResolve lean_a100 lean_s82
                            have lean_s84 : (Eq let65 let66) := by timed Eq.symm lean_r11
                            have lean_s85 : let66 := by timed eqResolve lean_s83 lean_s84
                            have lean_s86 : let144 := by intTightUb lean_s85
                            have lean_s87 : let212 := by timed And.intro lean_s79 lean_s86
                            have lean_s88 : (Implies let212 let211) := by arithMulPos [let63, let10, let13], 1
                            have lean_s89 : let211 := by timed modusPonens lean_s87 lean_s88
                            have lean_s90 : let126 := by sumBounds [lean_s11, lean_s15, lean_s22, lean_s33, lean_s44, lean_s52, lean_s56, lean_s63, lean_s70, lean_s78, lean_s89]
                            let lean_s91 := by timed congrHAdd lean_r46 lean_r74
                            let lean_s92 := by timed congrHAdd lean_r75 lean_s91
                            let lean_s93 := by timed congrHAdd lean_r76 lean_s92
                            let lean_s94 := by timed congrHAdd lean_r77 lean_s93
                            let lean_s95 := by timed congrHAdd lean_r56 lean_s94
                            let lean_s96 := by timed congrHAdd lean_r41 lean_s95
                            let lean_s97 := by timed congrHAdd lean_r78 lean_s96
                            let lean_s98 := by timed congrHAdd lean_r12 lean_s97
                            let lean_s99 := by timed congrHAdd lean_r19 lean_s98
                            have lean_s100 : (Eq let123 let180) := by timed congrHAdd lean_r28 lean_s99
                            have lean_s101 : (Eq let123 let76) := by timed Eq.trans lean_s100 lean_r61
                            let lean_s102 := by timed flipCongrArg lean_s101 [GE.ge]
                            let lean_s103 := by timed congrHAdd lean_r14 lean_r69
                            let lean_s104 := by timed congrHAdd lean_r13 lean_s103
                            let lean_s105 := by timed congrHAdd lean_r57 lean_s104
                            let lean_s106 := by timed congrHAdd lean_r60 lean_s105
                            let lean_s107 := by timed congrHAdd lean_r70 lean_s106
                            let lean_s108 := by timed congrHAdd lean_r17 lean_s107
                            let lean_s109 := by timed congrHAdd lean_r64 lean_s108
                            let lean_s110 := by timed congrHAdd lean_r67 lean_s109
                            let lean_s111 := by timed congrHAdd lean_r72 lean_s110
                            have lean_s112 : (Eq let107 let165) := by timed congrHAdd lean_r73 lean_s111
                            have lean_s113 : (Eq let107 let76) := by timed Eq.trans lean_s112 lean_r54
                            have lean_s114 : (Eq let124 let149) := by timed congr lean_s102 lean_s113
                            have lean_s115 : (Eq let124 True) := by timed Eq.trans lean_s114 lean_r42
                            have lean_s116 : (Eq let125 let187) := by timed flipCongrArg lean_s115 [Not]
                            have lean_s117 : (Eq let125 False) := by timed Eq.trans lean_s116 lean_r68
                            have lean_s118 : (Eq let126 False) := by timed Eq.trans lean_r24 lean_s117
                            show False from by timed eqResolve lean_s90 lean_s118
                          ))
                        have lean_s9 : let162 := by liftOrNToNeg lean_s8
                        have lean_s10 : (Eq let162 let133) := by timed flipCongrArg lean_r34 [Not]
                        have lean_s11 : (Eq let162 let7) := by timed Eq.trans lean_s10 lean_r53
                        have lean_s12 : (Eq let163 let7) := by timed Eq.trans lean_r52 lean_s11
                        have lean_s13 : (Eq let7 let163) := by timed Eq.symm lean_s12
                        have lean_s14 : (Eq let162 let163) := by timed Eq.trans lean_s11 lean_s13
                        have lean_s15 : let163 := by timed eqResolve lean_s9 lean_s14
                        have lean_s16 : (Eq let7 let162) := by timed Eq.symm lean_s11
                        have lean_s17 : let164 := by timed Eq.trans lean_s12 lean_s16
                        have lean_s18 : let162 := by timed eqResolve lean_s15 lean_s17
                        show False from by timed contradiction lean_s7 lean_s18
  ))))))))))))))))))))))
have lean_s1 : (Not (And let65 (And let204 (And let203 (And let51 (And let199 (And let43 (And let31 (And let95 (And let23 (And let201 let8))))))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let210 := by timed flipNotAnd lean_s1 [let65, let204, let203, let51, let199, let43, let31, let95, let23, let201, let8]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let98 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let131 let98) := by timed congr lean_s5 lean_r30
have lean_s7 : (Eq let131 True) := by timed Eq.trans lean_s6 lean_r23
have lean_s8 : (Eq let132 True) := by timed Eq.trans lean_r26 lean_s7
have lean_s9 : let132 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq let206 let206) := by timed rfl
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq let208 let208) := by timed rfl
let lean_s14 := by timed congr lean_s3 lean_s13
have lean_s15 : let81 := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [Eq]
have lean_s17 : (Eq let184 let81) := by timed congr lean_s16 lean_r62
have lean_s18 : (Eq let184 True) := by timed Eq.trans lean_s17 lean_r16
have lean_s19 : (Eq let182 True) := by timed Eq.trans lean_r65 lean_s18
have lean_s20 : let182 := by timed trueElim lean_s19
let lean_s21 := by timed congr lean_s3 lean_s20
have lean_s22 : (Eq let207 let207) := by timed rfl
let lean_s23 := by timed congr lean_s3 lean_s22
have lean_s24 : let183 := by timed rfl
let lean_s25 := by timed flipCongrArg lean_s24 [Eq]
have lean_s26 : (Eq let188 let183) := by timed congr lean_s25 lean_r66
have lean_s27 : (Eq let188 True) := by timed Eq.trans lean_s26 lean_r63
have lean_s28 : (Eq let186 True) := by timed Eq.trans lean_r71 lean_s27
have lean_s29 : let186 := by timed trueElim lean_s28
let lean_s30 := by timed congr lean_s3 lean_s29
have lean_s31 : let83 := by timed rfl
let lean_s32 := by timed flipCongrArg lean_s31 [Eq]
have lean_s33 : (Eq let145 let83) := by timed congr lean_s32 lean_r15
have lean_s34 : (Eq let145 True) := by timed Eq.trans lean_s33 lean_r18
have lean_s35 : (Eq let80 True) := by timed Eq.trans lean_r38 lean_s34
have lean_s36 : let80 := by timed trueElim lean_s35
let lean_s37 := by timed congr lean_s3 lean_s36
have lean_s38 : let94 := by timed rfl
let lean_s39 := by timed flipCongrArg lean_s38 [Eq]
have lean_s40 : (Eq let128 let94) := by timed congr lean_s39 lean_r29
have lean_s41 : (Eq let128 True) := by timed Eq.trans lean_s40 lean_r20
have lean_s42 : (Eq let129 True) := by timed Eq.trans lean_r25 lean_s41
have lean_s43 : let129 := by timed trueElim lean_s42
let lean_s44 := by timed congr lean_s3 lean_s43
have lean_s45 : let143 := by timed rfl
let lean_s46 := by timed flipCongrArg lean_s45 [Eq]
have lean_s47 : (Eq let158 let143) := by timed congr lean_s46 lean_r31
have lean_s48 : (Eq let158 True) := by timed Eq.trans lean_s47 lean_r36
have lean_s49 : (Eq let138 True) := by timed Eq.trans lean_r49 lean_s48
have lean_s50 : let138 := by timed trueElim lean_s49
let lean_s51 := by timed congr lean_s3 lean_s50
have lean_s52 : (Eq let205 let205) := by timed rfl
let lean_s53 := by timed congr lean_s3 lean_s52
have lean_s54 : let147 := by timed rfl
let lean_s55 := by timed flipCongrArg lean_s54 [Eq]
have lean_s56 : (Eq let134 let147) := by timed congr lean_s55 lean_r53
have lean_s57 : (Eq let134 True) := by timed Eq.trans lean_s56 lean_r40
have lean_s58 : (Eq let135 True) := by timed Eq.trans lean_r27 lean_s57
have lean_s59 : let135 := by timed trueElim lean_s58
let lean_s60 := by timed congr lean_s53 lean_s59
let lean_s61 := by timed congr lean_s51 lean_s60
let lean_s62 := by timed congr lean_s44 lean_s61
let lean_s63 := by timed congr lean_s37 lean_s62
let lean_s64 := by timed congr lean_s30 lean_s63
let lean_s65 := by timed congr lean_s23 lean_s64
let lean_s66 := by timed congr lean_s21 lean_s65
let lean_s67 := by timed congr lean_s14 lean_s66
let lean_s68 := by timed congr lean_s12 lean_s67
have lean_s69 : (Eq let210 let209) := by timed congr lean_s10 lean_s68
have lean_s70 : let209 := by timed eqResolve lean_s2 lean_s69
have lean_s71 : (Or let42 (Or let64 (Or let30 (Or let93 (Or let22 (Or let50 (Or let7 (Or let208 (Or let207 (Or let206 let205)))))))))) := by permutateOr lean_s70, [5, 0, 6, 7, 8, 3, 10, 2, 4, 1, 9], (- 1)
let lean_s72 := by timed flipCongrArg lean_r59 [GE.ge]
have lean_s73 : (Eq let10 let10) := by timed rfl
have lean_s74 : (Eq let202 let161) := by timed congr lean_s72 lean_s73
have lean_s75 : (Eq let202 let8) := by timed Eq.trans lean_s74 lean_r51
have lean_s76 : let8 := by timed eqResolve lean_a123 lean_s75
let lean_s77 := by R1 lean_s71, lean_s76, let7, [(- 1), 0]
let lean_s78 := by R2 lean_s77, lean_a118, let201, [(- 1), 0]
let lean_s79 := by timed flipCongrArg lean_r55 [GE.ge]
have lean_s80 : (Eq let1 let1) := by timed rfl
have lean_s81 : (Eq let200 let204) := by timed congr lean_s79 lean_s80
have lean_s82 : let204 := by timed eqResolve lean_a116 lean_s81
let lean_s83 := by R2 lean_s78, lean_s82, let204, [(- 1), 0]
let lean_s84 := by R2 lean_s83, lean_a114, let199, [(- 1), 0]
let lean_s85 := by timed flipCongrArg lean_r48 [GE.ge]
have lean_s86 : (Eq let198 let203) := by timed congr lean_s85 lean_s73
have lean_s87 : let203 := by timed eqResolve lean_a112 lean_s86
let lean_s88 := by R2 lean_s84, lean_s87, let203, [(- 1), 0]
have lean_s89 : let51 := by timed eqResolve lean_a111 lean_r45
let lean_s90 := by R1 lean_s88, lean_s89, let50, [(- 1), 0]
have lean_s91 : let23 := by timed eqResolve lean_a107 lean_r58
let lean_s92 := by R1 lean_s90, lean_s91, let22, [(- 1), 0]
let lean_s93 := by timed flipCongrArg lean_r43 [LE.le]
have lean_s94 : (Eq let194 let96) := by timed congr lean_s93 lean_s73
have lean_s95 : (Eq let194 let95) := by timed Eq.trans lean_s94 lean_r21
have lean_s96 : let95 := by timed eqResolve lean_a106 lean_s95
let lean_s97 := by R1 lean_s92, lean_s96, let93, [(- 1), 0]
let lean_s98 := by timed flipCongrArg lean_r39 [LE.le]
have lean_s99 : (Eq let2 let2) := by timed rfl
have lean_s100 : (Eq let193 let139) := by timed congr lean_s98 lean_s99
have lean_s101 : (Eq let193 let31) := by timed Eq.trans lean_s100 lean_r32
have lean_s102 : let31 := by timed eqResolve lean_a105 lean_s101
let lean_s103 := by R1 lean_s97, lean_s102, let30, [(- 1), 0]
let lean_s104 := by timed flipCongrArg lean_r44 [LE.le]
have lean_s105 : (Eq let189 let144) := by timed congr lean_s104 lean_s73
have lean_s106 : (Eq let189 let65) := by timed Eq.trans lean_s105 lean_r37
have lean_s107 : let65 := by timed eqResolve lean_a100 lean_s106
let lean_s108 := by R1 lean_s103, lean_s107, let64, [(- 1), 0]
have lean_s109 : let43 := by timed eqResolve lean_a99 lean_r35
exact (show False from by R1 lean_s108, lean_s109, let42, [0, 0])


