open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x4x5fplus : Int}
variable {x4x5fminus : Int}
variable {x3x5fplus : Int}
variable {x3x5fminus : Int}
variable {x7x5fplus : Int}
variable {x7x5fminus : Int}
variable {x0x5fplus : Int}
variable {x6x5fplus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x9x5fplus : Int}
variable {x6x5fminus : Int}
variable {x9x5fplus : Int}
variable {x9x5fminus : Int}
variable {x7x5fplus : Int}
variable {x9x5fminus : Int}
variable {x6x5fminus : Int}
variable {x8x5fplus : Int}
variable {x1x5fplus : Int}
variable {x1x5fminus : Int}
variable {x5x5fminus : Int}
variable {x7x5fminus : Int}
variable {x1x5fminus : Int}
variable {x2x5fplus : Int}
variable {x2x5fminus : Int}
variable {x5x5fplus : Int}
variable {x2x5fplus : Int}
variable {x6x5fplus : Int}
variable {x8x5fminus : Int}
variable {x8x5fplus : Int}
variable {x3x5fminus : Int}
variable {x0x5fminus : Int}
variable {x8x5fminus : Int}
variable {x3x5fplus : Int}
variable {x4x5fminus : Int}
variable {x2x5fminus : Int}
variable {x4x5fplus : Int}
variable {x5x5fminus : Int}
variable {x5x5fplus : Int}
variable {x1x5fplus : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Neg.neg (Rat.ofInt 4))
  let let3 := (binrel% LT.lt let2 let1)
  let let4 := (Int.ofNat 2)
  let let5 := (Int.ofNat 3)
  let let6 := (binrel% HDiv.hDiv let5 let4)
  let let7 := (binrel% GT.gt let6 let1)
  let let8 := (Int.ofNat 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% HMul.hMul let9 x3x5fplus)
  let let11 := (binrel% HMul.hMul let9 x7x5fminus)
  let let12 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let10 x3x5fminus)))
  let let13 := (binrel% GE.ge let12 let4)
  let let14 := (Not let13)
  let let15 := (binrel% LT.lt let12 let4)
  let let16 := (Rat.ofInt 1)
  let let17 := (Neg.neg let16)
  let let18 := (binrel% LT.lt let17 let1)
  let let19 := (binrel% HMul.hMul let9 x1x5fplus)
  let let20 := (binrel% HAdd.hAdd let19 x1x5fminus)
  let let21 := (binrel% HMul.hMul let9 x4x5fplus)
  let let22 := (binrel% HMul.hMul let9 x5x5fminus)
  let let23 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus let20))))))
  let let24 := (binrel% GE.ge let23 let1)
  let let25 := (Not let24)
  let let26 := (binrel% LT.lt let23 let1)
  let let27 := (Neg.neg let5)
  let let28 := (binrel% HMul.hMul let27 x9x5fminus)
  let let29 := (binrel% HMul.hMul let5 x9x5fplus)
  let let30 := (binrel% HMul.hMul let9 x0x5fminus)
  let let31 := (binrel% HMul.hMul let9 x7x5fplus)
  let let32 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 let28)))))))
  let let33 := (Rat.ofInt let32)
  let let34 := (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x9x5fplus) (binrel% HMul.hMul let5 x9x5fminus))
  let let35 := (binrel% HMul.hMul let9 x0x5fplus)
  let let36 := (binrel% HMul.hMul let9 x4x5fminus)
  let let37 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x0x5fminus let34))))))
  let let38 := (binrel% HMul.hMul let17 let37)
  let let39 := (binrel% HDiv.hDiv (Int.ofNat 9) let4)
  let let40 := (Neg.neg let6)
  let let41 := (binrel% HMul.hMul let40 x7x5fminus)
  let let42 := (binrel% HMul.hMul let6 x7x5fplus)
  let let43 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd (binrel% HMul.hMul let39 x3x5fplus) (binrel% HMul.hMul (Neg.neg let39) x3x5fminus))))
  let let44 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x3x5fplus) (binrel% HMul.hMul let27 x3x5fminus))))
  let let45 := (binrel% HMul.hMul let6 let44)
  let let46 := (binrel% GT.gt let16 let1)
  let let47 := (binrel% HMul.hMul let4 x0x5fminus)
  let let48 := (Neg.neg let4)
  let let49 := (binrel% HMul.hMul let48 x0x5fplus)
  let let50 := (binrel% HAdd.hAdd let49 let47)
  let let51 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x7x5fminus) let50)))
  let let52 := (binrel% HAdd.hAdd x0x5fplus let30)
  let let53 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 let52))
  let let54 := (Neg.neg (Rat.ofInt 2))
  let let55 := (binrel% HMul.hMul let54 let53)
  let let56 := (Rat.ofInt 3)
  let let57 := (binrel% GT.gt let56 let1)
  let let58 := (Int.ofNat 6)
  let let59 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let58 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let58) x0x5fminus) let34)))))
  let let60 := (binrel% HMul.hMul let9 x9x5fminus)
  let let61 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x9x5fplus let60)))))
  let let62 := (Neg.neg let56)
  let let63 := (binrel% HMul.hMul let62 let61)
  let let64 := (binrel% HMul.hMul let16 let8)
  let let65 := (binrel% LT.lt let62 let1)
  let let66 := (Rat.ofInt 0)
  let let67 := (binrel% HMul.hMul let17 let1)
  let let68 := (binrel% HMul.hMul let2 let1)
  let let69 := (binrel% HMul.hMul let6 let8)
  let let70 := (binrel% GE.ge let44 let8)
  let let71 := (Not let70)
  let let72 := (binrel% LT.lt let44 let8)
  let let73 := (binrel% HMul.hMul let6 let4)
  let let74 := (binrel% HMul.hMul let54 let1)
  let let75 := (binrel% HMul.hMul let9 x2x5fminus)
  let let76 := (binrel% HAdd.hAdd x2x5fplus let75)
  let let77 := (binrel% HMul.hMul let48 x0x5fminus)
  let let78 := (binrel% HMul.hMul let4 x0x5fplus)
  let let79 := (binrel% HMul.hMul let9 x3x5fminus)
  let let80 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let77 let76))))))))))
  let let81 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd let78 let77)))))))))))
  let let82 := (Not let71)
  let let83 := (Eq let82 let70)
  let let84 := (Not let25)
  let let85 := (Eq let84 let24)
  let let86 := (binrel% HMul.hMul let27 x7x5fminus)
  let let87 := (binrel% HMul.hMul let5 x7x5fplus)
  let let88 := (Rat.ofInt (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x1x5fplus) (binrel% HMul.hMul let5 x1x5fminus)))))))))
  let let89 := (binrel% HMul.hMul let56 let23)
  let let90 := (binrel% LE.le let12 let8)
  let let91 := (Neg.neg (binrel% HDiv.hDiv let8 let4))
  let let92 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let62 let62))))))))
  let let93 := (binrel% HMul.hMul let62 let8)
  let let94 := (binrel% HMul.hMul let56 let9)
  let let95 := (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let94 let93))))))))
  let let96 := (binrel% HMul.hMul let6 let12)
  let let97 := (binrel% HMul.hMul let9 x1x5fminus)
  let let98 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let97 (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x2x5fplus) (binrel% HMul.hMul let4 x2x5fminus))))))))
  let let99 := (binrel% HMul.hMul let54 let98)
  let let100 := (binrel% HMul.hMul let2 let80)
  let let101 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let97 (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fminus let52))))))
  let let102 := (binrel% HMul.hMul let16 let101)
  let let103 := (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let99 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let89 let63))))))))
  let let104 := (binrel% GE.ge let103 let95)
  let let105 := (Not let104)
  let let106 := (binrel% LT.lt let103 let95)
  let let107 := (binrel% GE.ge let101 let8)
  let let108 := (Eq let107 let107)
  let let109 := (binrel% LE.le let44 let1)
  let let110 := (binrel% GE.ge let98 let1)
  let let111 := (binrel% HMul.hMul let48 x2x5fminus)
  let let112 := (binrel% HMul.hMul let4 x2x5fplus)
  let let113 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let112 let111)))))))
  let let114 := (binrel% LE.le let113 let1)
  let let115 := (Not let107)
  let let116 := (Not let115)
  let let117 := (Eq let116 let107)
  let let118 := (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus let52))))))
  let let119 := (binrel% LT.lt let54 let1)
  let let120 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd (binrel% HMul.hMul let40 x3x5fplus) (binrel% HMul.hMul let6 x3x5fminus))))
  let let121 := (binrel% LE.le let101 let1)
  let let122 := (Not True)
  let let123 := (Int.ofNat 4)
  let let124 := (Neg.neg let123)
  let let125 := (binrel% HMul.hMul let4 x1x5fminus)
  let let126 := (binrel% HMul.hMul let48 x1x5fplus)
  let let127 := (Rat.ofInt (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x3x5fminus) (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x2x5fplus) (binrel% HMul.hMul let124 x2x5fminus)))))))))
  let let128 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 let50))))
  let let129 := (Eq let13 let13)
  let let130 := (Int.ofNat 8)
  let let131 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let130) x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let130 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x2x5fplus) (binrel% HMul.hMul let123 x2x5fminus)))))))))))))
  let let132 := (binrel% LT.lt let101 let8)
  let let133 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd x1x5fminus let52))))))
  let let134 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let97 let52))))))
  let let135 := (Not let14)
  let let136 := (Eq let135 let13)
  let let137 := (binrel% LE.le let23 let9)
  let let138 := (Eq let107 let116)
  let let139 := (Eq let70 let70)
  let let140 := (Rat.ofInt let101)
  let let141 := (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let120 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let88 let59))))))))
  let let142 := (binrel% GE.ge let37 let1)
  let let143 := (binrel% LE.le let32 let1)
  let let144 := (Eq let24 let24)
  let let145 := (Eq let70 let82)
  let let146 := (binrel% GE.ge let66 let91)
  let let147 := (Eq let24 let84)
  let let148 := (Eq let13 let135)
  let let149 := (binrel% LE.le let134 let1)
  let let150 := (binrel% LE.le let118 let1)
  let let151 := (binrel% LE.le let133 let1)
  let let152 := (binrel% HMul.hMul let9 x8x5fminus)
  let let153 := (binrel% HAdd.hAdd x1x5fplus let97)
  let let154 := (binrel% HMul.hMul let9 x2x5fplus)
  let let155 := (binrel% HMul.hMul let9 x6x5fminus)
  let let156 := (binrel% HAdd.hAdd let126 let125)
  let let157 := (binrel% HAdd.hAdd let35 x0x5fminus)
  let let158 := (binrel% HMul.hMul let9 x5x5fplus)
  let let159 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let79 let153))
  let let160 := (binrel% HMul.hMul let9 x6x5fplus)
  let let161 := (binrel% GE.ge let81 let1)
  let let162 := (binrel% GE.ge let128 let8)
  let let163 := (binrel% GE.ge let53 let1)
  let let164 := (binrel% GE.ge let80 let1)
  let let165 := (binrel% GE.ge let61 let8)
  let let166 := (Not let163)
  let let167 := (Not let165)
  let let168 := (Not let164)
  let let169 := (Not let110)
  let let170 := (Not let142)
  let let171 := (Or let167 (Or let24 (Or let166 (Or let13 (Or let70 (Or let169 (Or let168 (Or let170 let107))))))))
  let let172 := (Or let167 (Or let84 (Or let166 (Or let135 (Or let82 (Or let169 (Or let168 (Or let170 let116))))))))
  let let173 := (Not let132)
  let let174 := (binrel% LE.le let63 let93)
  let let175 := (And let65 let165)
  let let176 := (binrel% LE.le let89 let94)
  let let177 := (And let57 let137)
  let let178 := (binrel% LE.le let55 let74)
  let let179 := (And let119 let163)
  let let180 := (binrel% LT.lt let96 let73)
  let let181 := (And let7 let15)
  let let182 := (binrel% LT.lt let45 let69)
  let let183 := (And let7 let72)
  let let184 := (binrel% LE.le let99 let74)
  let let185 := (And let119 let110)
  let let186 := (binrel% LE.le let100 let68)
  let let187 := (And let3 let164)
  let let188 := (binrel% LE.le let38 let67)
  let let189 := (And let18 let142)
  let let190 := (binrel% LT.lt let102 let64)
  let let191 := (And let46 let132)
(Eq let3 True) → (Eq let7 True) → (Eq let15 let14) → (Eq let18 True) → (Eq let26 let25) → (Eq let38 let33) → (Eq let45 let43) → (Eq let46 True) → (Eq let55 let51) → (Eq let57 True) → (Eq let63 let59) → (Eq let64 let16) → (Eq let65 True) → (Eq let67 let66) → (Eq let68 let66) → (Eq let69 let6) → (Eq let72 let71) → (Eq let73 let56) → (Eq let74 let66) → (Eq let81 let80) → let83 → let85 → (Eq let89 let88) → (Eq let90 let14) → (Eq let92 let91) → (Eq let106 let105) → (Eq let94 let62) → (Eq let108 True) → (Eq let109 let71) → (Eq let114 let110) → let117 → (Eq let118 let32) → (Eq let119 True) → (Eq let96 let120) → (Eq let121 let115) → (Eq let122 False) → (Eq let99 let127) → (Eq let128 let61) → (Eq let129 True) → (Eq let100 let131) → (Eq let132 let115) → (Eq let133 let113) → (Eq let134 let101) → let136 → (Eq let137 let25) → (Eq let117 let138) → (Eq let139 True) → (Eq let141 let66) → (Eq let143 let142) → (Eq let144 True) → (Eq let83 let145) → (Eq let146 True) → (Eq let85 let147) → (Eq let136 let148) → (Eq let102 let140) → (Eq let93 let62) → (binrel% GE.ge x7x5fplus let1) → (binrel% GE.ge x7x5fminus let1) → (binrel% GE.ge x5x5fplus let1) → (binrel% GE.ge x5x5fminus let1) → (binrel% GE.ge x4x5fplus let1) → (binrel% GE.ge x4x5fminus let1) → (binrel% GE.ge x1x5fplus let1) → (binrel% GE.ge x1x5fminus let1) → (binrel% GE.ge x3x5fplus let1) → (binrel% GE.ge x3x5fminus let1) → (binrel% GE.ge x0x5fplus let1) → (binrel% GE.ge x0x5fminus let1) → (binrel% GE.ge x9x5fplus let1) → (binrel% GE.ge x9x5fminus let1) → (binrel% GE.ge x2x5fplus let1) → (binrel% GE.ge x2x5fminus let1) → (binrel% GE.ge x8x5fplus let1) → (binrel% GE.ge x8x5fminus let1) → (binrel% GE.ge x6x5fplus let1) → (binrel% GE.ge x6x5fminus let1) → (binrel% GE.ge (binrel% HSub.hSub x1x5fplus x1x5fminus) let1) → (binrel% GE.ge (binrel% HSub.hSub x2x5fplus x2x5fminus) let8) → let137 → let149 → let150 → let151 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let152 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x1x5fplus) (binrel% HMul.hMul let48 x1x5fminus)))))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let155 (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let154 (binrel% HAdd.hAdd x2x5fminus let153)))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let155 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let36 let153)))))) let8) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let152 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let154 (binrel% HAdd.hAdd x2x5fminus let156)))))) let9) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x4x5fplus let36))))))) let1) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x4x5fminus) let157)))))) let8) → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let36 let52)))) let1) → let109 → (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x6x5fplus) (binrel% HMul.hMul let4 x6x5fminus)))) let9) → let90 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus let159)))))))) let9) → let161 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fminus let20)))))))) let9) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x5x5fminus let76)))))))) let9) → (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x4x5fminus) (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fminus let157)))))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x8x5fplus) (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x7x5fminus let157)))))) let8) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let36 let156)))))) let8) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x3x5fminus) let52)))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x5x5fminus let159)))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x8x5fminus) (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let155 let76)))) let1) → let162 → let163 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 let153)) let9) → (binrel% GE.ge (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let154 x2x5fminus))) let1) → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Neg.neg (Rat.ofInt 4))
  let let3 := (binrel% LT.lt let2 let1)
  let let4 := (Int.ofNat 2)
  let let5 := (Int.ofNat 3)
  let let6 := (binrel% HDiv.hDiv let5 let4)
  let let7 := (binrel% GT.gt let6 let1)
  let let8 := (Int.ofNat 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% HMul.hMul let9 x3x5fplus)
  let let11 := (binrel% HMul.hMul let9 x7x5fminus)
  let let12 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let10 x3x5fminus)))
  let let13 := (binrel% GE.ge let12 let4)
  let let14 := (Not let13)
  let let15 := (binrel% LT.lt let12 let4)
  let let16 := (Rat.ofInt 1)
  let let17 := (Neg.neg let16)
  let let18 := (binrel% LT.lt let17 let1)
  let let19 := (binrel% HMul.hMul let9 x1x5fplus)
  let let20 := (binrel% HAdd.hAdd let19 x1x5fminus)
  let let21 := (binrel% HMul.hMul let9 x4x5fplus)
  let let22 := (binrel% HMul.hMul let9 x5x5fminus)
  let let23 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus let20))))))
  let let24 := (binrel% GE.ge let23 let1)
  let let25 := (Not let24)
  let let26 := (binrel% LT.lt let23 let1)
  let let27 := (Neg.neg let5)
  let let28 := (binrel% HMul.hMul let27 x9x5fminus)
  let let29 := (binrel% HMul.hMul let5 x9x5fplus)
  let let30 := (binrel% HMul.hMul let9 x0x5fminus)
  let let31 := (binrel% HMul.hMul let9 x7x5fplus)
  let let32 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let29 let28)))))))
  let let33 := (Rat.ofInt let32)
  let let34 := (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x9x5fplus) (binrel% HMul.hMul let5 x9x5fminus))
  let let35 := (binrel% HMul.hMul let9 x0x5fplus)
  let let36 := (binrel% HMul.hMul let9 x4x5fminus)
  let let37 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x0x5fminus let34))))))
  let let38 := (binrel% HMul.hMul let17 let37)
  let let39 := (binrel% HDiv.hDiv (Int.ofNat 9) let4)
  let let40 := (Neg.neg let6)
  let let41 := (binrel% HMul.hMul let40 x7x5fminus)
  let let42 := (binrel% HMul.hMul let6 x7x5fplus)
  let let43 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd (binrel% HMul.hMul let39 x3x5fplus) (binrel% HMul.hMul (Neg.neg let39) x3x5fminus))))
  let let44 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x3x5fplus) (binrel% HMul.hMul let27 x3x5fminus))))
  let let45 := (binrel% HMul.hMul let6 let44)
  let let46 := (binrel% GT.gt let16 let1)
  let let47 := (binrel% HMul.hMul let4 x0x5fminus)
  let let48 := (Neg.neg let4)
  let let49 := (binrel% HMul.hMul let48 x0x5fplus)
  let let50 := (binrel% HAdd.hAdd let49 let47)
  let let51 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x7x5fminus) let50)))
  let let52 := (binrel% HAdd.hAdd x0x5fplus let30)
  let let53 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 let52))
  let let54 := (Neg.neg (Rat.ofInt 2))
  let let55 := (binrel% HMul.hMul let54 let53)
  let let56 := (Rat.ofInt 3)
  let let57 := (binrel% GT.gt let56 let1)
  let let58 := (Int.ofNat 6)
  let let59 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let58 x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let58) x0x5fminus) let34)))))
  let let60 := (binrel% HMul.hMul let9 x9x5fminus)
  let let61 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x9x5fplus let60)))))
  let let62 := (Neg.neg let56)
  let let63 := (binrel% HMul.hMul let62 let61)
  let let64 := (binrel% HMul.hMul let16 let8)
  let let65 := (binrel% LT.lt let62 let1)
  let let66 := (Rat.ofInt 0)
  let let67 := (binrel% HMul.hMul let17 let1)
  let let68 := (binrel% HMul.hMul let2 let1)
  let let69 := (binrel% HMul.hMul let6 let8)
  let let70 := (binrel% GE.ge let44 let8)
  let let71 := (Not let70)
  let let72 := (binrel% LT.lt let44 let8)
  let let73 := (binrel% HMul.hMul let6 let4)
  let let74 := (binrel% HMul.hMul let54 let1)
  let let75 := (binrel% HMul.hMul let9 x2x5fminus)
  let let76 := (binrel% HAdd.hAdd x2x5fplus let75)
  let let77 := (binrel% HMul.hMul let48 x0x5fminus)
  let let78 := (binrel% HMul.hMul let4 x0x5fplus)
  let let79 := (binrel% HMul.hMul let9 x3x5fminus)
  let let80 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let77 let76))))))))))
  let let81 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd x2x5fplus (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd let78 let77)))))))))))
  let let82 := (Not let71)
  let let83 := (Eq let82 let70)
  let let84 := (Not let25)
  let let85 := (Eq let84 let24)
  let let86 := (binrel% HMul.hMul let27 x7x5fminus)
  let let87 := (binrel% HMul.hMul let5 x7x5fplus)
  let let88 := (Rat.ofInt (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let5 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let27 x1x5fplus) (binrel% HMul.hMul let5 x1x5fminus)))))))))
  let let89 := (binrel% HMul.hMul let56 let23)
  let let90 := (binrel% LE.le let12 let8)
  let let91 := (Neg.neg (binrel% HDiv.hDiv let8 let4))
  let let92 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let62 let62))))))))
  let let93 := (binrel% HMul.hMul let62 let8)
  let let94 := (binrel% HMul.hMul let56 let9)
  let let95 := (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let94 let93))))))))
  let let96 := (binrel% HMul.hMul let6 let12)
  let let97 := (binrel% HMul.hMul let9 x1x5fminus)
  let let98 := (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let97 (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd x0x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x2x5fplus) (binrel% HMul.hMul let4 x2x5fminus))))))))
  let let99 := (binrel% HMul.hMul let54 let98)
  let let100 := (binrel% HMul.hMul let2 let80)
  let let101 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let97 (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fminus let52))))))
  let let102 := (binrel% HMul.hMul let16 let101)
  let let103 := (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let100 (binrel% HAdd.hAdd let99 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let89 let63))))))))
  let let104 := (binrel% GE.ge let103 let95)
  let let105 := (Not let104)
  let let106 := (binrel% LT.lt let103 let95)
  let let107 := (binrel% GE.ge let101 let8)
  let let108 := (Eq let107 let107)
  let let109 := (binrel% LE.le let44 let1)
  let let110 := (binrel% GE.ge let98 let1)
  let let111 := (binrel% HMul.hMul let48 x2x5fminus)
  let let112 := (binrel% HMul.hMul let4 x2x5fplus)
  let let113 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd x1x5fminus (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd x0x5fplus (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let112 let111)))))))
  let let114 := (binrel% LE.le let113 let1)
  let let115 := (Not let107)
  let let116 := (Not let115)
  let let117 := (Eq let116 let107)
  let let118 := (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus let52))))))
  let let119 := (binrel% LT.lt let54 let1)
  let let120 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd (binrel% HMul.hMul let40 x3x5fplus) (binrel% HMul.hMul let6 x3x5fminus))))
  let let121 := (binrel% LE.le let101 let1)
  let let122 := (Not True)
  let let123 := (Int.ofNat 4)
  let let124 := (Neg.neg let123)
  let let125 := (binrel% HMul.hMul let4 x1x5fminus)
  let let126 := (binrel% HMul.hMul let48 x1x5fplus)
  let let127 := (Rat.ofInt (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x3x5fminus) (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x2x5fplus) (binrel% HMul.hMul let124 x2x5fminus)))))))))
  let let128 := (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 let50))))
  let let129 := (Eq let13 let13)
  let let130 := (Int.ofNat 8)
  let let131 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x1x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let130) x0x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let130 x0x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let124 x2x5fplus) (binrel% HMul.hMul let123 x2x5fminus)))))))))))))
  let let132 := (binrel% LT.lt let101 let8)
  let let133 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let112 (binrel% HAdd.hAdd let111 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd x1x5fminus let52))))))
  let let134 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd let97 let52))))))
  let let135 := (Not let14)
  let let136 := (Eq let135 let13)
  let let137 := (binrel% LE.le let23 let9)
  let let138 := (Eq let107 let116)
  let let139 := (Eq let70 let70)
  let let140 := (Rat.ofInt let101)
  let let141 := (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let131 (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let120 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let88 let59))))))))
  let let142 := (binrel% GE.ge let37 let1)
  let let143 := (binrel% LE.le let32 let1)
  let let144 := (Eq let24 let24)
  let let145 := (Eq let70 let82)
  let let146 := (binrel% GE.ge let66 let91)
  let let147 := (Eq let24 let84)
  let let148 := (Eq let13 let135)
  let let149 := (binrel% LE.le let134 let1)
  let let150 := (binrel% LE.le let118 let1)
  let let151 := (binrel% LE.le let133 let1)
  let let152 := (binrel% HMul.hMul let9 x8x5fminus)
  let let153 := (binrel% HAdd.hAdd x1x5fplus let97)
  let let154 := (binrel% HMul.hMul let9 x2x5fplus)
  let let155 := (binrel% HMul.hMul let9 x6x5fminus)
  let let156 := (binrel% HAdd.hAdd let126 let125)
  let let157 := (binrel% HAdd.hAdd let35 x0x5fminus)
  let let158 := (binrel% HMul.hMul let9 x5x5fplus)
  let let159 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let79 let153))
  let let160 := (binrel% HMul.hMul let9 x6x5fplus)
  let let161 := (binrel% GE.ge let81 let1)
  let let162 := (binrel% GE.ge let128 let8)
  let let163 := (binrel% GE.ge let53 let1)
  let let164 := (binrel% GE.ge let80 let1)
  let let165 := (binrel% GE.ge let61 let8)
  let let166 := (Not let163)
  let let167 := (Not let165)
  let let168 := (Not let164)
  let let169 := (Not let110)
  let let170 := (Not let142)
  let let171 := (Or let167 (Or let24 (Or let166 (Or let13 (Or let70 (Or let169 (Or let168 (Or let170 let107))))))))
  let let172 := (Or let167 (Or let84 (Or let166 (Or let135 (Or let82 (Or let169 (Or let168 (Or let170 let116))))))))
  let let173 := (Not let132)
  let let174 := (binrel% LE.le let63 let93)
  let let175 := (And let65 let165)
  let let176 := (binrel% LE.le let89 let94)
  let let177 := (And let57 let137)
  let let178 := (binrel% LE.le let55 let74)
  let let179 := (And let119 let163)
  let let180 := (binrel% LT.lt let96 let73)
  let let181 := (And let7 let15)
  let let182 := (binrel% LT.lt let45 let69)
  let let183 := (And let7 let72)
  let let184 := (binrel% LE.le let99 let74)
  let let185 := (And let119 let110)
  let let186 := (binrel% LE.le let100 let68)
  let let187 := (And let3 let164)
  let let188 := (binrel% LE.le let38 let67)
  let let189 := (And let18 let142)
  let let190 := (binrel% LT.lt let102 let64)
  let let191 := (And let46 let132)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 True) => -- EVALUATE
fun lean_r2 : (Eq let15 let14) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let18 True) => -- EVALUATE
fun lean_r4 : (Eq let26 let25) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let38 let33) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let45 let43) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let46 True) => -- EVALUATE
fun lean_r8 : (Eq let55 let51) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let57 True) => -- EVALUATE
fun lean_r10 : (Eq let63 let59) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let64 let16) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let65 True) => -- EVALUATE
fun lean_r13 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let68 let66) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let69 let6) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let72 let71) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let73 let56) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let74 let66) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let81 let80) => -- THEORY_REWRITE_ARITH
fun lean_r20 : let83 => -- THEORY_REWRITE_BOOL
fun lean_r21 : let85 => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let89 let88) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let90 let14) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let92 let91) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let106 let105) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let94 let62) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let108 True) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let109 let71) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let114 let110) => -- THEORY_REWRITE_ARITH
fun lean_r30 : let117 => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let118 let32) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let119 True) => -- EVALUATE
fun lean_r33 : (Eq let96 let120) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let121 let115) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let122 False) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let99 let127) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let128 let61) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let129 True) => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let100 let131) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let132 let115) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let133 let113) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let134 let101) => -- THEORY_REWRITE_ARITH
fun lean_r43 : let136 => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let137 let25) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let117 let138) => -- THEORY_REWRITE_BOOL
fun lean_r46 : (Eq let139 True) => -- THEORY_REWRITE_BOOL
fun lean_r47 : (Eq let141 let66) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let143 let142) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let144 True) => -- THEORY_REWRITE_BOOL
fun lean_r50 : (Eq let83 let145) => -- THEORY_REWRITE_BOOL
fun lean_r51 : (Eq let146 True) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let85 let147) => -- THEORY_REWRITE_BOOL
fun lean_r53 : (Eq let136 let148) => -- THEORY_REWRITE_BOOL
fun lean_r54 : (Eq let102 let140) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let93 let62) => -- THEORY_REWRITE_ARITH
fun lean_a56 : (binrel% GE.ge x7x5fplus let1) =>
fun lean_a57 : (binrel% GE.ge x7x5fminus let1) =>
fun lean_a58 : (binrel% GE.ge x5x5fplus let1) =>
fun lean_a59 : (binrel% GE.ge x5x5fminus let1) =>
fun lean_a60 : (binrel% GE.ge x4x5fplus let1) =>
fun lean_a61 : (binrel% GE.ge x4x5fminus let1) =>
fun lean_a62 : (binrel% GE.ge x1x5fplus let1) =>
fun lean_a63 : (binrel% GE.ge x1x5fminus let1) =>
fun lean_a64 : (binrel% GE.ge x3x5fplus let1) =>
fun lean_a65 : (binrel% GE.ge x3x5fminus let1) =>
fun lean_a66 : (binrel% GE.ge x0x5fplus let1) =>
fun lean_a67 : (binrel% GE.ge x0x5fminus let1) =>
fun lean_a68 : (binrel% GE.ge x9x5fplus let1) =>
fun lean_a69 : (binrel% GE.ge x9x5fminus let1) =>
fun lean_a70 : (binrel% GE.ge x2x5fplus let1) =>
fun lean_a71 : (binrel% GE.ge x2x5fminus let1) =>
fun lean_a72 : (binrel% GE.ge x8x5fplus let1) =>
fun lean_a73 : (binrel% GE.ge x8x5fminus let1) =>
fun lean_a74 : (binrel% GE.ge x6x5fplus let1) =>
fun lean_a75 : (binrel% GE.ge x6x5fminus let1) =>
fun lean_a76 : (binrel% GE.ge (binrel% HSub.hSub x1x5fplus x1x5fminus) let1) =>
fun lean_a77 : (binrel% GE.ge (binrel% HSub.hSub x2x5fplus x2x5fminus) let8) =>
fun lean_a78 : let137 =>
fun lean_a79 : let149 =>
fun lean_a80 : let150 =>
fun lean_a81 : let151 =>
fun lean_a82 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let152 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x1x5fplus) (binrel% HMul.hMul let48 x1x5fminus)))))))) let1) =>
fun lean_a83 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let155 (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let154 (binrel% HAdd.hAdd x2x5fminus let153)))))) let1) =>
fun lean_a84 : (binrel% LE.le (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let155 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let36 let153)))))) let8) =>
fun lean_a85 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let152 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let154 (binrel% HAdd.hAdd x2x5fminus let156)))))) let9) =>
fun lean_a86 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd x4x5fplus let36))))))) let1) =>
fun lean_a87 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x4x5fminus) let157)))))) let8) =>
fun lean_a88 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let36 let52)))) let1) =>
fun lean_a89 : let109 =>
fun lean_a90 : (binrel% LE.le (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x6x5fplus) (binrel% HMul.hMul let4 x6x5fminus)))) let9) =>
fun lean_a91 : let90 =>
fun lean_a92 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus let159)))))))) let9) =>
fun lean_a93 : let161 =>
fun lean_a94 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fminus let20)))))))) let9) =>
fun lean_a95 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x5x5fminus let76)))))))) let9) =>
fun lean_a96 : (binrel% GE.ge (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let160 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x4x5fminus) (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd x3x5fminus let157)))))))) let1) =>
fun lean_a97 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x8x5fplus) (binrel% HAdd.hAdd x8x5fminus (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd x7x5fminus let157)))))) let8) =>
fun lean_a98 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let36 let156)))))) let8) =>
fun lean_a99 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x3x5fminus) let52)))))) let1) =>
fun lean_a100 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd x5x5fminus let159)))) let1) =>
fun lean_a101 : (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let4 x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let48 x8x5fminus) (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let155 let76)))) let1) =>
fun lean_a102 : let162 =>
fun lean_a103 : let163 =>
fun lean_a104 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let60 let153)) let9) =>
fun lean_a105 : (binrel% GE.ge (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let154 x2x5fminus))) let1) => by
have lean_s0 : (Or let167 (Or let84 (Or let166 (Or let135 (Or let82 (Or let169 (Or let168 (Or let170 (Or let116 False))))))))) :=
  (scope (fun lean_a106 : let165 =>
    (scope (fun lean_a107 : let25 =>
      (scope (fun lean_a108 : let163 =>
        (scope (fun lean_a109 : let14 =>
          (scope (fun lean_a110 : let71 =>
            (scope (fun lean_a111 : let110 =>
              (scope (fun lean_a112 : let164 =>
                (scope (fun lean_a113 : let142 =>
                  (scope (fun lean_a114 : let115 =>
                    let lean_s0 := by timed flipCongrArg lean_r42 [LE.le]
                    have lean_s1 : (Eq let1 let1) := by timed rfl
                    have lean_s2 : (Eq let149 let121) := by timed congr lean_s0 lean_s1
                    have lean_s3 : (Eq let149 let115) := by timed Eq.trans lean_s2 lean_r34
                    have lean_s4 : let115 := by timed eqResolve lean_a79 lean_s3
                    have lean_s5 : (Eq let115 let132) := by timed Eq.symm lean_r40
                    have lean_s6 : let132 := by timed eqResolve lean_s4 lean_s5
                    have lean_s7 : (Or let173 False) :=
                      (scope (fun lean_a114 : let132 =>
                        have lean_s7 : let46 := by timed trueElim lean_r7
                        have lean_s8 : let191 := by timed And.intro lean_s7 lean_a114
                        have lean_s9 : (Implies let191 let190) := by arithMulPos [let101, let8, let16], 0
                        have lean_s10 : let190 := by timed modusPonens lean_s8 lean_s9
                        have lean_s11 : let18 := by timed trueElim lean_r3
                        let lean_s12 := by timed flipCongrArg lean_r31 [LE.le]
                        have lean_s13 : (Eq let150 let143) := by timed congr lean_s12 lean_s1
                        have lean_s14 : (Eq let150 let142) := by timed Eq.trans lean_s13 lean_r48
                        have lean_s15 : let142 := by timed eqResolve lean_a80 lean_s14
                        have lean_s16 : let189 := by timed And.intro lean_s11 lean_s15
                        have lean_s17 : (Implies let189 let188) := by arithMulNeg [let37, let1, let17], 3
                        have lean_s18 : let188 := by timed modusPonens lean_s16 lean_s17
                        have lean_s19 : let3 := by timed trueElim lean_r0
                        let lean_s20 := by timed flipCongrArg lean_r19 [GE.ge]
                        have lean_s21 : (Eq let161 let164) := by timed congr lean_s20 lean_s1
                        have lean_s22 : let164 := by timed eqResolve lean_a93 lean_s21
                        have lean_s23 : let187 := by timed And.intro lean_s19 lean_s22
                        have lean_s24 : (Implies let187 let186) := by arithMulNeg [let80, let1, let2], 3
                        have lean_s25 : let186 := by timed modusPonens lean_s23 lean_s24
                        have lean_s26 : let119 := by timed trueElim lean_r32
                        let lean_s27 := by timed flipCongrArg lean_r41 [LE.le]
                        have lean_s28 : (Eq let151 let114) := by timed congr lean_s27 lean_s1
                        have lean_s29 : (Eq let151 let110) := by timed Eq.trans lean_s28 lean_r29
                        have lean_s30 : let110 := by timed eqResolve lean_a81 lean_s29
                        have lean_s31 : let185 := by timed And.intro lean_s26 lean_s30
                        have lean_s32 : (Implies let185 let184) := by arithMulNeg [let98, let1, let54], 3
                        have lean_s33 : let184 := by timed modusPonens lean_s31 lean_s32
                        have lean_s34 : let7 := by timed trueElim lean_r1
                        have lean_s35 : let71 := by timed eqResolve lean_a89 lean_r28
                        have lean_s36 : (Eq let71 let72) := by timed Eq.symm lean_r16
                        have lean_s37 : let72 := by timed eqResolve lean_s35 lean_s36
                        have lean_s38 : let183 := by timed And.intro lean_s34 lean_s37
                        have lean_s39 : (Implies let183 let182) := by arithMulPos [let44, let8, let6], 0
                        have lean_s40 : let182 := by timed modusPonens lean_s38 lean_s39
                        have lean_s41 : let14 := by timed eqResolve lean_a91 lean_r23
                        have lean_s42 : (Eq let14 let15) := by timed Eq.symm lean_r2
                        have lean_s43 : let15 := by timed eqResolve lean_s41 lean_s42
                        have lean_s44 : let181 := by timed And.intro lean_s34 lean_s43
                        have lean_s45 : (Implies let181 let180) := by arithMulPos [let12, let4, let6], 0
                        have lean_s46 : let180 := by timed modusPonens lean_s44 lean_s45
                        have lean_s47 : let179 := by timed And.intro lean_s26 lean_a108
                        have lean_s48 : (Implies let179 let178) := by arithMulNeg [let53, let1, let54], 3
                        have lean_s49 : let178 := by timed modusPonens lean_s47 lean_s48
                        have lean_s50 : let57 := by timed trueElim lean_r9
                        have lean_s51 : let25 := by timed eqResolve lean_a78 lean_r44
                        have lean_s52 : (Eq let25 let26) := by timed Eq.symm lean_r4
                        have lean_s53 : let26 := by timed eqResolve lean_s51 lean_s52
                        have lean_s54 : let137 := by intTightUb lean_s53
                        have lean_s55 : let177 := by timed And.intro lean_s50 lean_s54
                        have lean_s56 : (Implies let177 let176) := by arithMulPos [let23, let9, let56], 1
                        have lean_s57 : let176 := by timed modusPonens lean_s55 lean_s56
                        have lean_s58 : let65 := by timed trueElim lean_r12
                        let lean_s59 := by timed flipCongrArg lean_r37 [GE.ge]
                        have lean_s60 : (Eq let8 let8) := by timed rfl
                        have lean_s61 : (Eq let162 let165) := by timed congr lean_s59 lean_s60
                        have lean_s62 : let165 := by timed eqResolve lean_a102 lean_s61
                        have lean_s63 : let175 := by timed And.intro lean_s58 lean_s62
                        have lean_s64 : (Implies let175 let174) := by arithMulNeg [let61, let8, let62], 3
                        have lean_s65 : let174 := by timed modusPonens lean_s63 lean_s64
                        have lean_s66 : let106 := by sumBounds [lean_s10, lean_s18, lean_s25, lean_s33, lean_s40, lean_s46, lean_s49, lean_s57, lean_s65]
                        let lean_s67 := by timed congrHAdd lean_r22 lean_r10
                        let lean_s68 := by timed congrHAdd lean_r8 lean_s67
                        let lean_s69 := by timed congrHAdd lean_r33 lean_s68
                        let lean_s70 := by timed congrHAdd lean_r6 lean_s69
                        let lean_s71 := by timed congrHAdd lean_r36 lean_s70
                        let lean_s72 := by timed congrHAdd lean_r39 lean_s71
                        let lean_s73 := by timed congrHAdd lean_r5 lean_s72
                        have lean_s74 : (Eq let103 let141) := by timed congrHAdd lean_r54 lean_s73
                        have lean_s75 : (Eq let103 let66) := by timed Eq.trans lean_s74 lean_r47
                        let lean_s76 := by timed flipCongrArg lean_s75 [GE.ge]
                        let lean_s77 := by timed congrHAdd lean_r26 lean_r55
                        let lean_s78 := by timed congrHAdd lean_r18 lean_s77
                        let lean_s79 := by timed congrHAdd lean_r17 lean_s78
                        let lean_s80 := by timed congrHAdd lean_r15 lean_s79
                        let lean_s81 := by timed congrHAdd lean_r18 lean_s80
                        let lean_s82 := by timed congrHAdd lean_r14 lean_s81
                        let lean_s83 := by timed congrHAdd lean_r13 lean_s82
                        have lean_s84 : (Eq let95 let92) := by timed congrHAdd lean_r11 lean_s83
                        have lean_s85 : (Eq let95 let91) := by timed Eq.trans lean_s84 lean_r24
                        have lean_s86 : (Eq let104 let146) := by timed congr lean_s76 lean_s85
                        have lean_s87 : (Eq let104 True) := by timed Eq.trans lean_s86 lean_r51
                        have lean_s88 : (Eq let105 let122) := by timed flipCongrArg lean_s87 [Not]
                        have lean_s89 : (Eq let105 False) := by timed Eq.trans lean_s88 lean_r35
                        have lean_s90 : (Eq let106 False) := by timed Eq.trans lean_r25 lean_s89
                        show False from by timed eqResolve lean_s66 lean_s90
                      ))
                    have lean_s8 : let173 := by liftOrNToNeg lean_s7
                    have lean_s9 : (Eq let173 let116) := by timed flipCongrArg lean_r40 [Not]
                    have lean_s10 : (Eq let173 let107) := by timed Eq.trans lean_s9 lean_r30
                    have lean_s11 : let107 := by timed eqResolve lean_s8 lean_s10
                    have lean_s12 : (Eq let107 let173) := by timed Eq.symm lean_s10
                    have lean_s13 : let173 := by timed eqResolve lean_s11 lean_s12
                    show False from by timed contradiction lean_s6 lean_s13
  ))))))))))))))))))
have lean_s1 : (Not (And let165 (And let25 (And let163 (And let14 (And let71 (And let110 (And let164 (And let142 let115))))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let172 := by timed flipNotAnd lean_s1 [let165, let25, let163, let14, let71, let110, let164, let142, let115]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let167 let167) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let144 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let147 let144) := by timed congr lean_s7 lean_r21
have lean_s9 : (Eq let147 True) := by timed Eq.trans lean_s8 lean_r49
have lean_s10 : (Eq let85 True) := by timed Eq.trans lean_r52 lean_s9
have lean_s11 : let85 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq let166 let166) := by timed rfl
let lean_s14 := by timed congr lean_s3 lean_s13
have lean_s15 : let129 := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [Eq]
have lean_s17 : (Eq let148 let129) := by timed congr lean_s16 lean_r43
have lean_s18 : (Eq let148 True) := by timed Eq.trans lean_s17 lean_r38
have lean_s19 : (Eq let136 True) := by timed Eq.trans lean_r53 lean_s18
have lean_s20 : let136 := by timed trueElim lean_s19
let lean_s21 := by timed congr lean_s3 lean_s20
have lean_s22 : let139 := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [Eq]
have lean_s24 : (Eq let145 let139) := by timed congr lean_s23 lean_r20
have lean_s25 : (Eq let145 True) := by timed Eq.trans lean_s24 lean_r46
have lean_s26 : (Eq let83 True) := by timed Eq.trans lean_r50 lean_s25
have lean_s27 : let83 := by timed trueElim lean_s26
let lean_s28 := by timed congr lean_s3 lean_s27
have lean_s29 : (Eq let169 let169) := by timed rfl
let lean_s30 := by timed congr lean_s3 lean_s29
have lean_s31 : (Eq let168 let168) := by timed rfl
let lean_s32 := by timed congr lean_s3 lean_s31
have lean_s33 : (Eq let170 let170) := by timed rfl
let lean_s34 := by timed congr lean_s3 lean_s33
have lean_s35 : let108 := by timed rfl
let lean_s36 := by timed flipCongrArg lean_s35 [Eq]
have lean_s37 : (Eq let138 let108) := by timed congr lean_s36 lean_r30
have lean_s38 : (Eq let138 True) := by timed Eq.trans lean_s37 lean_r27
have lean_s39 : (Eq let117 True) := by timed Eq.trans lean_r45 lean_s38
have lean_s40 : let117 := by timed trueElim lean_s39
let lean_s41 := by timed congr lean_s34 lean_s40
let lean_s42 := by timed congr lean_s32 lean_s41
let lean_s43 := by timed congr lean_s30 lean_s42
let lean_s44 := by timed congr lean_s28 lean_s43
let lean_s45 := by timed congr lean_s21 lean_s44
let lean_s46 := by timed congr lean_s14 lean_s45
let lean_s47 := by timed congr lean_s12 lean_s46
have lean_s48 : (Eq let172 let171) := by timed congr lean_s5 lean_s47
have lean_s49 : let171 := by timed eqResolve lean_s2 lean_s48
have lean_s50 : (Or let24 (Or let107 (Or let70 (Or let13 (Or let170 (Or let169 (Or let168 (Or let167 let166)))))))) := by permutateOr lean_s49, [1, 8, 4, 3, 7, 5, 6, 0, 2], (- 1)
let lean_s51 := by R2 lean_s50, lean_a103, let163, [(- 1), 0]
let lean_s52 := by timed flipCongrArg lean_r37 [GE.ge]
have lean_s53 : (Eq let8 let8) := by timed rfl
have lean_s54 : (Eq let162 let165) := by timed congr lean_s52 lean_s53
have lean_s55 : let165 := by timed eqResolve lean_a102 lean_s54
let lean_s56 := by R2 lean_s51, lean_s55, let165, [(- 1), 0]
let lean_s57 := by timed flipCongrArg lean_r19 [GE.ge]
have lean_s58 : (Eq let1 let1) := by timed rfl
have lean_s59 : (Eq let161 let164) := by timed congr lean_s57 lean_s58
have lean_s60 : let164 := by timed eqResolve lean_a93 lean_s59
let lean_s61 := by R2 lean_s56, lean_s60, let164, [(- 1), 0]
have lean_s62 : let14 := by timed eqResolve lean_a91 lean_r23
let lean_s63 := by R1 lean_s61, lean_s62, let13, [(- 1), 0]
have lean_s64 : let71 := by timed eqResolve lean_a89 lean_r28
let lean_s65 := by R1 lean_s63, lean_s64, let70, [(- 1), 0]
let lean_s66 := by timed flipCongrArg lean_r41 [LE.le]
have lean_s67 : (Eq let151 let114) := by timed congr lean_s66 lean_s58
have lean_s68 : (Eq let151 let110) := by timed Eq.trans lean_s67 lean_r29
have lean_s69 : let110 := by timed eqResolve lean_a81 lean_s68
let lean_s70 := by R2 lean_s65, lean_s69, let110, [(- 1), 0]
let lean_s71 := by timed flipCongrArg lean_r31 [LE.le]
have lean_s72 : (Eq let150 let143) := by timed congr lean_s71 lean_s58
have lean_s73 : (Eq let150 let142) := by timed Eq.trans lean_s72 lean_r48
have lean_s74 : let142 := by timed eqResolve lean_a80 lean_s73
let lean_s75 := by R2 lean_s70, lean_s74, let142, [(- 1), 0]
let lean_s76 := by timed flipCongrArg lean_r42 [LE.le]
have lean_s77 : (Eq let149 let121) := by timed congr lean_s76 lean_s58
have lean_s78 : (Eq let149 let115) := by timed Eq.trans lean_s77 lean_r34
have lean_s79 : let115 := by timed eqResolve lean_a79 lean_s78
let lean_s80 := by R1 lean_s75, lean_s79, let107, [(- 1), 0]
have lean_s81 : let25 := by timed eqResolve lean_a78 lean_r44
exact (show False from by R1 lean_s80, lean_s81, let24, [0, 0])


