open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x1x5fplus : Int}
variable {x1x5fminus : Int}
variable {x2x5fplus : Int}
variable {x2x5fminus : Int}
variable {x5x5fplus : Int}
variable {x5x5fminus : Int}
variable {x0x5fplus : Int}
variable {x0x5fminus : Int}
variable {x9x5fplus : Int}
variable {x4x5fminus : Int}
variable {x3x5fplus : Int}
variable {x4x5fplus : Int}
variable {x0x5fplus : Int}
variable {x6x5fplus : Int}
variable {x6x5fminus : Int}
variable {x6x5fminus : Int}
variable {x0x5fminus : Int}
variable {x8x5fplus : Int}
variable {x8x5fminus : Int}
variable {x3x5fminus : Int}
variable {x7x5fplus : Int}
variable {x9x5fplus : Int}
variable {x7x5fminus : Int}
variable {x4x5fminus : Int}
variable {x9x5fminus : Int}
variable {x3x5fplus : Int}
variable {x3x5fminus : Int}
variable {x4x5fplus : Int}
variable {x5x5fminus : Int}
variable {x5x5fplus : Int}
variable {x2x5fminus : Int}
variable {x2x5fplus : Int}
variable {x1x5fminus : Int}
variable {x6x5fplus : Int}
variable {x1x5fplus : Int}
variable {x7x5fminus : Int}
variable {x7x5fplus : Int}
variable {x8x5fminus : Int}
variable {x8x5fplus : Int}
variable {x9x5fminus : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Int.ofNat 1)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% HMul.hMul let6 x0x5fplus)
  let let8 := (binrel% HAdd.hAdd let7 x0x5fminus)
  let let9 := (binrel% HMul.hMul let6 x5x5fplus)
  let let10 := (binrel% HMul.hMul let6 x6x5fminus)
  let let11 := (Int.ofNat 2)
  let let12 := (binrel% HMul.hMul let11 x1x5fminus)
  let let13 := (Neg.neg let11)
  let let14 := (binrel% HMul.hMul let13 x1x5fplus)
  let let15 := (binrel% HMul.hMul let6 x7x5fminus)
  let let16 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x5x5fminus let8))))))))
  let let17 := (binrel% GE.ge let16 let1)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let1)
  let let20 := (Neg.neg (Rat.ofInt 3))
  let let21 := (binrel% LT.lt let20 let1)
  let let22 := (Rat.ofInt 2)
  let let23 := (Neg.neg let22)
  let let24 := (binrel% LT.lt let23 let1)
  let let25 := (binrel% GT.gt let22 let1)
  let let26 := (binrel% HMul.hMul let6 x5x5fminus)
  let let27 := (binrel% HAdd.hAdd x5x5fplus let26)
  let let28 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 let27))
  let let29 := (binrel% GE.ge let28 let5)
  let let30 := (Not let29)
  let let31 := (binrel% LT.lt let28 let5)
  let let32 := (binrel% HMul.hMul let22 let5)
  let let33 := (binrel% HMul.hMul let22 let1)
  let let34 := (binrel% HMul.hMul let23 let5)
  let let35 := (binrel% HMul.hMul let20 let1)
  let let36 := (binrel% HMul.hMul let2 let6)
  let let37 := (binrel% HMul.hMul let3 let6)
  let let38 := (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let33 let32)))))))
  let let39 := (binrel% HMul.hMul let22 let28)
  let let40 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let6 x0x5fminus))
  let let41 := (binrel% HMul.hMul let6 x3x5fplus)
  let let42 := (binrel% HMul.hMul let11 x8x5fminus)
  let let43 := (binrel% HMul.hMul let13 x8x5fplus)
  let let44 := (binrel% HMul.hMul let6 x4x5fminus)
  let let45 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x1x5fminus) let40))))))))
  let let46 := (binrel% HMul.hMul let22 let45)
  let let47 := (binrel% HMul.hMul let6 x2x5fplus)
  let let48 := (binrel% HAdd.hAdd let47 x2x5fminus)
  let let49 := (binrel% HMul.hMul let6 x8x5fminus)
  let let50 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x0x5fminus let48))))))
  let let51 := (binrel% HMul.hMul let23 let50)
  let let52 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x5x5fminus let48))))))
  let let53 := (binrel% HMul.hMul let22 let52)
  let let54 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 let40))))
  let let55 := (binrel% HMul.hMul let20 let54)
  let let56 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let43 let42)))
  let let57 := (binrel% HMul.hMul let20 let56)
  let let58 := (binrel% HMul.hMul let2 let16)
  let let59 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let9 x5x5fminus)))
  let let60 := (binrel% HMul.hMul let3 let59)
  let let61 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let46 let39)))))))
  let let62 := (binrel% GE.ge let61 let38)
  let let63 := (Not let62)
  let let64 := (binrel% LT.lt let61 let38)
  let let65 := (binrel% HMul.hMul let13 x4x5fminus)
  let let66 := (binrel% HMul.hMul let11 x4x5fplus)
  let let67 := (Rat.ofInt (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x2x5fplus) (binrel% HMul.hMul let11 x2x5fminus)))))))))
  let let68 := (Rat.ofInt 0)
  let let69 := (binrel% HMul.hMul let13 x7x5fminus)
  let let70 := (binrel% HMul.hMul let11 x7x5fplus)
  let let71 := (Rat.ofInt (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x5x5fplus) (binrel% HMul.hMul let13 x5x5fminus)))))
  let let72 := (binrel% HMul.hMul let13 x0x5fminus)
  let let73 := (binrel% HMul.hMul let11 x0x5fplus)
  let let74 := (Int.ofNat 4)
  let let75 := (Rat.ofInt (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let74) x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x1x5fminus) (binrel% HAdd.hAdd let73 let72))))))))))
  let let76 := (binrel% HMul.hMul let13 x3x5fminus)
  let let77 := (binrel% HMul.hMul let11 x3x5fplus)
  let let78 := (Rat.ofInt (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x2x5fplus) (binrel% HMul.hMul let13 x2x5fminus)))))))))
  let let79 := (Int.ofNat 3)
  let let80 := (Neg.neg let79)
  let let81 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x0x5fplus) (binrel% HMul.hMul let79 x0x5fminus)))))))
  let let82 := (Int.ofNat 6)
  let let83 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x8x5fplus) (binrel% HMul.hMul (Neg.neg let82) x8x5fminus)))))
  let let84 := (Rat.ofInt let16)
  let let85 := (binrel% HMul.hMul let6 x4x5fplus)
  let let86 := (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus let27))
  let let87 := (Rat.ofInt let86)
  let let88 := (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let75 let71)))))))
  let let89 := (binrel% GE.ge let45 let5)
  let let90 := (Not let89)
  let let91 := (binrel% LT.lt let45 let5)
  let let92 := (binrel% HMul.hMul let6 x1x5fplus)
  let let93 := (binrel% HMul.hMul let6 x3x5fminus)
  let let94 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let93 (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd x1x5fminus let8))))
  let let95 := (binrel% HMul.hMul let13 x8x5fminus)
  let let96 := (binrel% HMul.hMul let11 x8x5fplus)
  let let97 := (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let95 let94))))
  let let98 := (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let95 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus let94))))
  let let99 := (binrel% LE.le let28 let1)
  let let100 := (binrel% GT.gt let2 let1)
  let let101 := (Not let18)
  let let102 := (Eq let101 let17)
  let let103 := (Eq let17 let101)
  let let104 := (binrel% GE.ge let97 let1)
  let let105 := (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let96 let95)))
  let let106 := (binrel% HAdd.hAdd let85 x4x5fminus)
  let let107 := (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let95 let106))
  let let108 := (Eq let17 let17)
  let let109 := (binrel% GE.ge let56 let1)
  let let110 := (binrel% LE.le let105 let1)
  let let111 := (binrel% GE.ge let52 let5)
  let let112 := (Not let111)
  let let113 := (binrel% LE.le let52 let1)
  let let114 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let26 let106))
  let let115 := (binrel% GE.ge let59 let6)
  let let116 := (binrel% LE.le let86 let5)
  let let117 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let12 let8))))))))
  let let118 := (binrel% GE.ge let68 let68)
  let let119 := (binrel% LE.le let16 let6)
  let let120 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let44 let48))))))
  let let121 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let68 let22)))))))
  let let122 := (Eq let29 let29)
  let let123 := (Not let112)
  let let124 := (Eq let123 let111)
  let let125 := (Not let30)
  let let126 := (Eq let125 let29)
  let let127 := (Eq let111 let123)
  let let128 := (Eq let29 let125)
  let let129 := (Eq let89 let89)
  let let130 := (binrel% LT.lt let52 let5)
  let let131 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x2x5fminus let8))))))
  let let132 := (Not let90)
  let let133 := (Eq let132 let89)
  let let134 := (Eq let89 let132)
  let let135 := (Not let115)
  let let136 := (binrel% LT.lt let59 let6)
  let let137 := (Eq let111 let111)
  let let138 := (Not True)
  let let139 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let93 (binrel% HAdd.hAdd let92 x1x5fminus)))
  let let140 := (binrel% LE.le let117 let6)
  let let141 := (binrel% LE.le let120 let1)
  let let142 := (binrel% HAdd.hAdd x2x5fplus (binrel% HMul.hMul let6 x2x5fminus))
  let let143 := (binrel% LE.le let107 let1)
  let let144 := (binrel% LE.le let114 let5)
  let let145 := (binrel% GE.ge let98 let1)
  let let146 := (binrel% HMul.hMul let6 x6x5fplus)
  let let147 := (binrel% HMul.hMul let6 x9x5fminus)
  let let148 := (binrel% HAdd.hAdd x3x5fplus let93)
  let let149 := (binrel% GE.ge let131 let5)
  let let150 := (binrel% GE.ge let54 let1)
  let let151 := (binrel% GE.ge let50 let5)
  let let152 := (Not let150)
  let let153 := (Not let151)
  let let154 := (Not let109)
  let let155 := (Or let29 (Or let89 (Or let153 (Or let111 (Or let152 (Or let154 (Or let17 let135)))))))
  let let156 := (Or let125 (Or let132 (Or let153 (Or let123 (Or let152 (Or let154 (Or let101 let135)))))))
  let let157 := (Or let135 False)
  let let158 := (binrel% LT.lt let39 let32)
  let let159 := (And let25 let31)
  let let160 := (binrel% LE.le let46 let33)
  let let161 := (binrel% LE.le let45 let1)
  let let162 := (And let25 let161)
  let let163 := (binrel% LE.le let51 let34)
  let let164 := (And let24 let151)
  let let165 := (binrel% LE.le let53 let33)
  let let166 := (And let25 let113)
  let let167 := (binrel% LE.le let55 let35)
  let let168 := (And let21 let150)
  let let169 := (binrel% LE.le let57 let35)
  let let170 := (And let21 let109)
  let let171 := (binrel% LE.le let58 let36)
  let let172 := (And let100 let119)
  let let173 := (binrel% LE.le let60 let37)
  let let174 := (And let4 let115)
(Eq let4 True) → (Eq let19 let18) → (Eq let21 True) → (Eq let24 True) → (Eq let25 True) → (Eq let31 let30) → (Eq let64 let63) → (Eq let53 let67) → (Eq let88 let68) → (Eq let91 let90) → (Eq let34 let23) → (Eq let33 let68) → (Eq let98 let97) → (Eq let99 let30) → (Eq let100 True) → let102 → (Eq let102 let103) → (Eq let37 let2) → (Eq let104 let90) → (Eq let107 let105) → (Eq let108 True) → (Eq let110 let109) → (Eq let113 let112) → (Eq let114 let86) → (Eq let116 let115) → (Eq let32 let22) → (Eq let117 let16) → (Eq let55 let81) → (Eq let118 True) → (Eq let36 let3) → (Eq let119 let18) → (Eq let120 let52) → (Eq let121 let68) → (Eq let122 True) → (Eq let46 let75) → let124 → let126 → (Eq let51 let78) → (Eq let124 let127) → (Eq let126 let128) → (Eq let57 let83) → (Eq let129 True) → (Eq let130 let112) → (Eq let58 let84) → (Eq let131 let50) → let133 → (Eq let60 let87) → (Eq let133 let134) → (Eq let35 let68) → (Eq let136 let135) → (Eq let39 let71) → (Eq let137 True) → (Eq let138 False) → (binrel% GE.ge x4x5fplus let1) → (binrel% GE.ge x4x5fminus let1) → (binrel% GE.ge x8x5fplus let1) → (binrel% GE.ge x8x5fminus let1) → (binrel% GE.ge x7x5fplus let1) → (binrel% GE.ge x7x5fminus let1) → (binrel% GE.ge x3x5fplus let1) → (binrel% GE.ge x3x5fminus let1) → (binrel% GE.ge x1x5fplus let1) → (binrel% GE.ge x1x5fminus let1) → (binrel% GE.ge x6x5fplus let1) → (binrel% GE.ge x6x5fminus let1) → (binrel% GE.ge x5x5fplus let1) → (binrel% GE.ge x5x5fminus let1) → (binrel% GE.ge x0x5fplus let1) → (binrel% GE.ge x0x5fminus let1) → (binrel% GE.ge x2x5fplus let1) → (binrel% GE.ge x2x5fminus let1) → (binrel% GE.ge x9x5fplus let1) → (binrel% GE.ge x9x5fminus let1) → (binrel% LE.le (binrel% HSub.hSub x4x5fplus x4x5fminus) let1) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus let139)))))) let6) → let140 → let141 → (binrel% LE.le (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let93 let142)))) let5) → (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus let142)))) let5) → (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 let28)) let1) → let143 → let99 → let144 → let145 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus let139)))))) let6) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x7x5fplus) (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x3x5fplus) (binrel% HMul.hMul let80 x3x5fminus)))))))) let6) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus let148)))))) let6) → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let77 let76))))))) let1) → let149 → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let41 x3x5fminus))))))) let1) → let150 → (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let146 x6x5fminus))))) let1) → (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 let148)))) let5) → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Int.ofNat 1)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% HMul.hMul let6 x0x5fplus)
  let let8 := (binrel% HAdd.hAdd let7 x0x5fminus)
  let let9 := (binrel% HMul.hMul let6 x5x5fplus)
  let let10 := (binrel% HMul.hMul let6 x6x5fminus)
  let let11 := (Int.ofNat 2)
  let let12 := (binrel% HMul.hMul let11 x1x5fminus)
  let let13 := (Neg.neg let11)
  let let14 := (binrel% HMul.hMul let13 x1x5fplus)
  let let15 := (binrel% HMul.hMul let6 x7x5fminus)
  let let16 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x5x5fminus let8))))))))
  let let17 := (binrel% GE.ge let16 let1)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let1)
  let let20 := (Neg.neg (Rat.ofInt 3))
  let let21 := (binrel% LT.lt let20 let1)
  let let22 := (Rat.ofInt 2)
  let let23 := (Neg.neg let22)
  let let24 := (binrel% LT.lt let23 let1)
  let let25 := (binrel% GT.gt let22 let1)
  let let26 := (binrel% HMul.hMul let6 x5x5fminus)
  let let27 := (binrel% HAdd.hAdd x5x5fplus let26)
  let let28 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 let27))
  let let29 := (binrel% GE.ge let28 let5)
  let let30 := (Not let29)
  let let31 := (binrel% LT.lt let28 let5)
  let let32 := (binrel% HMul.hMul let22 let5)
  let let33 := (binrel% HMul.hMul let22 let1)
  let let34 := (binrel% HMul.hMul let23 let5)
  let let35 := (binrel% HMul.hMul let20 let1)
  let let36 := (binrel% HMul.hMul let2 let6)
  let let37 := (binrel% HMul.hMul let3 let6)
  let let38 := (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let33 let32)))))))
  let let39 := (binrel% HMul.hMul let22 let28)
  let let40 := (binrel% HAdd.hAdd x0x5fplus (binrel% HMul.hMul let6 x0x5fminus))
  let let41 := (binrel% HMul.hMul let6 x3x5fplus)
  let let42 := (binrel% HMul.hMul let11 x8x5fminus)
  let let43 := (binrel% HMul.hMul let13 x8x5fplus)
  let let44 := (binrel% HMul.hMul let6 x4x5fminus)
  let let45 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd x1x5fplus (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x1x5fminus) let40))))))))
  let let46 := (binrel% HMul.hMul let22 let45)
  let let47 := (binrel% HMul.hMul let6 x2x5fplus)
  let let48 := (binrel% HAdd.hAdd let47 x2x5fminus)
  let let49 := (binrel% HMul.hMul let6 x8x5fminus)
  let let50 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd x0x5fminus let48))))))
  let let51 := (binrel% HMul.hMul let23 let50)
  let let52 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x5x5fminus let48))))))
  let let53 := (binrel% HMul.hMul let22 let52)
  let let54 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 let40))))
  let let55 := (binrel% HMul.hMul let20 let54)
  let let56 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let43 let42)))
  let let57 := (binrel% HMul.hMul let20 let56)
  let let58 := (binrel% HMul.hMul let2 let16)
  let let59 := (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let9 x5x5fminus)))
  let let60 := (binrel% HMul.hMul let3 let59)
  let let61 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let46 let39)))))))
  let let62 := (binrel% GE.ge let61 let38)
  let let63 := (Not let62)
  let let64 := (binrel% LT.lt let61 let38)
  let let65 := (binrel% HMul.hMul let13 x4x5fminus)
  let let66 := (binrel% HMul.hMul let11 x4x5fplus)
  let let67 := (Rat.ofInt (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x5x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x5x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x2x5fplus) (binrel% HMul.hMul let11 x2x5fminus)))))))))
  let let68 := (Rat.ofInt 0)
  let let69 := (binrel% HMul.hMul let13 x7x5fminus)
  let let70 := (binrel% HMul.hMul let11 x7x5fplus)
  let let71 := (Rat.ofInt (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x5x5fplus) (binrel% HMul.hMul let13 x5x5fminus)))))
  let let72 := (binrel% HMul.hMul let13 x0x5fminus)
  let let73 := (binrel% HMul.hMul let11 x0x5fplus)
  let let74 := (Int.ofNat 4)
  let let75 := (Rat.ofInt (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let74) x8x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let74 x8x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x3x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x3x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x1x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x1x5fminus) (binrel% HAdd.hAdd let73 let72))))))))))
  let let76 := (binrel% HMul.hMul let13 x3x5fminus)
  let let77 := (binrel% HMul.hMul let11 x3x5fplus)
  let let78 := (Rat.ofInt (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let77 (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let73 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd (binrel% HMul.hMul let11 x2x5fplus) (binrel% HMul.hMul let13 x2x5fminus)))))))))
  let let79 := (Int.ofNat 3)
  let let80 := (Neg.neg let79)
  let let81 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x7x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x7x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x6x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x6x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x0x5fplus) (binrel% HMul.hMul let79 x0x5fminus)))))))
  let let82 := (Int.ofNat 6)
  let let83 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let80 x4x5fplus) (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x4x5fminus) (binrel% HAdd.hAdd (binrel% HMul.hMul let82 x8x5fplus) (binrel% HMul.hMul (Neg.neg let82) x8x5fminus)))))
  let let84 := (Rat.ofInt let16)
  let let85 := (binrel% HMul.hMul let6 x4x5fplus)
  let let86 := (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus let27))
  let let87 := (Rat.ofInt let86)
  let let88 := (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let75 let71)))))))
  let let89 := (binrel% GE.ge let45 let5)
  let let90 := (Not let89)
  let let91 := (binrel% LT.lt let45 let5)
  let let92 := (binrel% HMul.hMul let6 x1x5fplus)
  let let93 := (binrel% HMul.hMul let6 x3x5fminus)
  let let94 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let93 (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd x1x5fminus let8))))
  let let95 := (binrel% HMul.hMul let13 x8x5fminus)
  let let96 := (binrel% HMul.hMul let11 x8x5fplus)
  let let97 := (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let95 let94))))
  let let98 := (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let95 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus let94))))
  let let99 := (binrel% LE.le let28 let1)
  let let100 := (binrel% GT.gt let2 let1)
  let let101 := (Not let18)
  let let102 := (Eq let101 let17)
  let let103 := (Eq let17 let101)
  let let104 := (binrel% GE.ge let97 let1)
  let let105 := (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let96 let95)))
  let let106 := (binrel% HAdd.hAdd let85 x4x5fminus)
  let let107 := (binrel% HAdd.hAdd let96 (binrel% HAdd.hAdd let95 let106))
  let let108 := (Eq let17 let17)
  let let109 := (binrel% GE.ge let56 let1)
  let let110 := (binrel% LE.le let105 let1)
  let let111 := (binrel% GE.ge let52 let5)
  let let112 := (Not let111)
  let let113 := (binrel% LE.le let52 let1)
  let let114 := (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let26 let106))
  let let115 := (binrel% GE.ge let59 let6)
  let let116 := (binrel% LE.le let86 let5)
  let let117 := (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let12 let8))))))))
  let let118 := (binrel% GE.ge let68 let68)
  let let119 := (binrel% LE.le let16 let6)
  let let120 := (binrel% HAdd.hAdd x6x5fplus (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd x5x5fminus (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let44 let48))))))
  let let121 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let68 let22)))))))
  let let122 := (Eq let29 let29)
  let let123 := (Not let112)
  let let124 := (Eq let123 let111)
  let let125 := (Not let30)
  let let126 := (Eq let125 let29)
  let let127 := (Eq let111 let123)
  let let128 := (Eq let29 let125)
  let let129 := (Eq let89 let89)
  let let130 := (binrel% LT.lt let52 let5)
  let let131 := (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd x3x5fminus (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd x2x5fminus let8))))))
  let let132 := (Not let90)
  let let133 := (Eq let132 let89)
  let let134 := (Eq let89 let132)
  let let135 := (Not let115)
  let let136 := (binrel% LT.lt let59 let6)
  let let137 := (Eq let111 let111)
  let let138 := (Not True)
  let let139 := (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let93 (binrel% HAdd.hAdd let92 x1x5fminus)))
  let let140 := (binrel% LE.le let117 let6)
  let let141 := (binrel% LE.le let120 let1)
  let let142 := (binrel% HAdd.hAdd x2x5fplus (binrel% HMul.hMul let6 x2x5fminus))
  let let143 := (binrel% LE.le let107 let1)
  let let144 := (binrel% LE.le let114 let5)
  let let145 := (binrel% GE.ge let98 let1)
  let let146 := (binrel% HMul.hMul let6 x6x5fplus)
  let let147 := (binrel% HMul.hMul let6 x9x5fminus)
  let let148 := (binrel% HAdd.hAdd x3x5fplus let93)
  let let149 := (binrel% GE.ge let131 let5)
  let let150 := (binrel% GE.ge let54 let1)
  let let151 := (binrel% GE.ge let50 let5)
  let let152 := (Not let150)
  let let153 := (Not let151)
  let let154 := (Not let109)
  let let155 := (Or let29 (Or let89 (Or let153 (Or let111 (Or let152 (Or let154 (Or let17 let135)))))))
  let let156 := (Or let125 (Or let132 (Or let153 (Or let123 (Or let152 (Or let154 (Or let101 let135)))))))
  let let157 := (Or let135 False)
  let let158 := (binrel% LT.lt let39 let32)
  let let159 := (And let25 let31)
  let let160 := (binrel% LE.le let46 let33)
  let let161 := (binrel% LE.le let45 let1)
  let let162 := (And let25 let161)
  let let163 := (binrel% LE.le let51 let34)
  let let164 := (And let24 let151)
  let let165 := (binrel% LE.le let53 let33)
  let let166 := (And let25 let113)
  let let167 := (binrel% LE.le let55 let35)
  let let168 := (And let21 let150)
  let let169 := (binrel% LE.le let57 let35)
  let let170 := (And let21 let109)
  let let171 := (binrel% LE.le let58 let36)
  let let172 := (And let100 let119)
  let let173 := (binrel% LE.le let60 let37)
  let let174 := (And let4 let115)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let21 True) => -- EVALUATE
fun lean_r3 : (Eq let24 True) => -- EVALUATE
fun lean_r4 : (Eq let25 True) => -- EVALUATE
fun lean_r5 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let64 let63) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let53 let67) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let88 let68) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let91 let90) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let34 let23) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let33 let68) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let98 let97) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let99 let30) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let100 True) => -- EVALUATE
fun lean_r15 : let102 => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let102 let103) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let37 let2) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let104 let90) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let107 let105) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let108 True) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let110 let109) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let113 let112) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let114 let86) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let116 let115) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let32 let22) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let117 let16) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let55 let81) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let118 True) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let36 let3) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let119 let18) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let120 let52) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let121 let68) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let122 True) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let46 let75) => -- THEORY_REWRITE_ARITH
fun lean_r35 : let124 => -- THEORY_REWRITE_BOOL
fun lean_r36 : let126 => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let51 let78) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let124 let127) => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let126 let128) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let57 let83) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let129 True) => -- THEORY_REWRITE_BOOL
fun lean_r42 : (Eq let130 let112) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let58 let84) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let131 let50) => -- THEORY_REWRITE_ARITH
fun lean_r45 : let133 => -- THEORY_REWRITE_BOOL
fun lean_r46 : (Eq let60 let87) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let133 let134) => -- THEORY_REWRITE_BOOL
fun lean_r48 : (Eq let35 let68) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let136 let135) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let39 let71) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let137 True) => -- THEORY_REWRITE_BOOL
fun lean_r52 : (Eq let138 False) => -- THEORY_REWRITE_BOOL
fun lean_a53 : (binrel% GE.ge x4x5fplus let1) =>
fun lean_a54 : (binrel% GE.ge x4x5fminus let1) =>
fun lean_a55 : (binrel% GE.ge x8x5fplus let1) =>
fun lean_a56 : (binrel% GE.ge x8x5fminus let1) =>
fun lean_a57 : (binrel% GE.ge x7x5fplus let1) =>
fun lean_a58 : (binrel% GE.ge x7x5fminus let1) =>
fun lean_a59 : (binrel% GE.ge x3x5fplus let1) =>
fun lean_a60 : (binrel% GE.ge x3x5fminus let1) =>
fun lean_a61 : (binrel% GE.ge x1x5fplus let1) =>
fun lean_a62 : (binrel% GE.ge x1x5fminus let1) =>
fun lean_a63 : (binrel% GE.ge x6x5fplus let1) =>
fun lean_a64 : (binrel% GE.ge x6x5fminus let1) =>
fun lean_a65 : (binrel% GE.ge x5x5fplus let1) =>
fun lean_a66 : (binrel% GE.ge x5x5fminus let1) =>
fun lean_a67 : (binrel% GE.ge x0x5fplus let1) =>
fun lean_a68 : (binrel% GE.ge x0x5fminus let1) =>
fun lean_a69 : (binrel% GE.ge x2x5fplus let1) =>
fun lean_a70 : (binrel% GE.ge x2x5fminus let1) =>
fun lean_a71 : (binrel% GE.ge x9x5fplus let1) =>
fun lean_a72 : (binrel% GE.ge x9x5fminus let1) =>
fun lean_a73 : (binrel% LE.le (binrel% HSub.hSub x4x5fplus x4x5fminus) let1) =>
fun lean_a74 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus let139)))))) let6) =>
fun lean_a75 : let140 =>
fun lean_a76 : let141 =>
fun lean_a77 : (binrel% LE.le (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd x3x5fplus (binrel% HAdd.hAdd let93 let142)))) let5) =>
fun lean_a78 : (binrel% LE.le (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus let142)))) let5) =>
fun lean_a79 : (binrel% LE.le (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 let28)) let1) =>
fun lean_a80 : let143 =>
fun lean_a81 : let99 =>
fun lean_a82 : let144 =>
fun lean_a83 : let145 =>
fun lean_a84 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus let139)))))) let6) =>
fun lean_a85 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd (binrel% HMul.hMul let6 x7x5fplus) (binrel% HAdd.hAdd x7x5fminus (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let65 (binrel% HAdd.hAdd (binrel% HMul.hMul let79 x3x5fplus) (binrel% HMul.hMul let80 x3x5fminus)))))))) let6) =>
fun lean_a86 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus let148)))))) let6) =>
fun lean_a87 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd x6x5fminus (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd x4x5fminus (binrel% HAdd.hAdd let77 let76))))))) let1) =>
fun lean_a88 : let149 =>
fun lean_a89 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd x5x5fplus (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd x4x5fplus (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let41 x3x5fminus))))))) let1) =>
fun lean_a90 : let150 =>
fun lean_a91 : (binrel% GE.ge (binrel% HAdd.hAdd x9x5fplus (binrel% HAdd.hAdd let147 (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let146 x6x5fminus))))) let1) =>
fun lean_a92 : (binrel% GE.ge (binrel% HAdd.hAdd x8x5fplus (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd x7x5fplus (binrel% HAdd.hAdd let15 let148)))) let5) => by
have lean_s0 : (Or let125 (Or let132 (Or let153 (Or let123 (Or let152 (Or let154 (Or let101 let157))))))) :=
  (scope (fun lean_a93 : let30 =>
    (scope (fun lean_a94 : let90 =>
      (scope (fun lean_a95 : let151 =>
        (scope (fun lean_a96 : let112 =>
          (scope (fun lean_a97 : let150 =>
            (scope (fun lean_a98 : let109 =>
              (scope (fun lean_a99 : let18 =>
                (scope (fun lean_a100 : let115 =>
                  let lean_s0 := by timed flipCongrArg lean_r23 [LE.le]
                  have lean_s1 : (Eq let5 let5) := by timed rfl
                  have lean_s2 : (Eq let144 let116) := by timed congr lean_s0 lean_s1
                  have lean_s3 : (Eq let144 let115) := by timed Eq.trans lean_s2 lean_r24
                  have lean_s4 : let115 := by timed eqResolve lean_a82 lean_s3
                  have lean_s5 : let157 :=
                    (scope (fun lean_a100 : let115 =>
                      have lean_s5 : let4 := by timed trueElim lean_r0
                      have lean_s6 : let115 := by timed eqResolve lean_a82 lean_s3
                      have lean_s7 : let174 := by timed And.intro lean_s5 lean_s6
                      have lean_s8 : (Implies let174 let173) := by arithMulNeg [let59, let6, let3], 3
                      have lean_s9 : let173 := by timed modusPonens lean_s7 lean_s8
                      have lean_s10 : let100 := by timed trueElim lean_r14
                      let lean_s11 := by timed flipCongrArg lean_r26 [LE.le]
                      have lean_s12 : (Eq let6 let6) := by timed rfl
                      have lean_s13 : (Eq let140 let119) := by timed congr lean_s11 lean_s12
                      have lean_s14 : (Eq let140 let18) := by timed Eq.trans lean_s13 lean_r30
                      have lean_s15 : let18 := by timed eqResolve lean_a75 lean_s14
                      have lean_s16 : (Eq let18 let19) := by timed Eq.symm lean_r1
                      have lean_s17 : let19 := by timed eqResolve lean_s15 lean_s16
                      have lean_s18 : let119 := by intTightUb lean_s17
                      have lean_s19 : let172 := by timed And.intro lean_s10 lean_s18
                      have lean_s20 : (Implies let172 let171) := by arithMulPos [let16, let6, let2], 1
                      have lean_s21 : let171 := by timed modusPonens lean_s19 lean_s20
                      have lean_s22 : let21 := by timed trueElim lean_r2
                      let lean_s23 := by timed flipCongrArg lean_r19 [LE.le]
                      have lean_s24 : (Eq let1 let1) := by timed rfl
                      have lean_s25 : (Eq let143 let110) := by timed congr lean_s23 lean_s24
                      have lean_s26 : (Eq let143 let109) := by timed Eq.trans lean_s25 lean_r21
                      have lean_s27 : let109 := by timed eqResolve lean_a80 lean_s26
                      have lean_s28 : let170 := by timed And.intro lean_s22 lean_s27
                      have lean_s29 : (Implies let170 let169) := by arithMulNeg [let56, let1, let20], 3
                      have lean_s30 : let169 := by timed modusPonens lean_s28 lean_s29
                      have lean_s31 : let168 := by timed And.intro lean_s22 lean_a97
                      have lean_s32 : (Implies let168 let167) := by arithMulNeg [let54, let1, let20], 3
                      have lean_s33 : let167 := by timed modusPonens lean_s31 lean_s32
                      have lean_s34 : let25 := by timed trueElim lean_r4
                      let lean_s35 := by timed flipCongrArg lean_r31 [LE.le]
                      have lean_s36 : (Eq let141 let113) := by timed congr lean_s35 lean_s24
                      have lean_s37 : (Eq let141 let112) := by timed Eq.trans lean_s36 lean_r22
                      have lean_s38 : let112 := by timed eqResolve lean_a76 lean_s37
                      have lean_s39 : (Eq let112 let130) := by timed Eq.symm lean_r42
                      have lean_s40 : let130 := by timed eqResolve lean_s38 lean_s39
                      have lean_s41 : let113 := by intTightUb lean_s40
                      have lean_s42 : let166 := by timed And.intro lean_s34 lean_s41
                      have lean_s43 : (Implies let166 let165) := by arithMulPos [let52, let1, let22], 1
                      have lean_s44 : let165 := by timed modusPonens lean_s42 lean_s43
                      have lean_s45 : let24 := by timed trueElim lean_r3
                      let lean_s46 := by timed flipCongrArg lean_r44 [GE.ge]
                      have lean_s47 : (Eq let149 let151) := by timed congr lean_s46 lean_s1
                      have lean_s48 : let151 := by timed eqResolve lean_a88 lean_s47
                      have lean_s49 : let164 := by timed And.intro lean_s45 lean_s48
                      have lean_s50 : (Implies let164 let163) := by arithMulNeg [let50, let5, let23], 3
                      have lean_s51 : let163 := by timed modusPonens lean_s49 lean_s50
                      let lean_s52 := by timed flipCongrArg lean_r12 [GE.ge]
                      have lean_s53 : (Eq let145 let104) := by timed congr lean_s52 lean_s24
                      have lean_s54 : (Eq let145 let90) := by timed Eq.trans lean_s53 lean_r18
                      have lean_s55 : let90 := by timed eqResolve lean_a83 lean_s54
                      have lean_s56 : (Eq let90 let91) := by timed Eq.symm lean_r9
                      have lean_s57 : let91 := by timed eqResolve lean_s55 lean_s56
                      have lean_s58 : let161 := by intTightUb lean_s57
                      have lean_s59 : let162 := by timed And.intro lean_s34 lean_s58
                      have lean_s60 : (Implies let162 let160) := by arithMulPos [let45, let1, let22], 1
                      have lean_s61 : let160 := by timed modusPonens lean_s59 lean_s60
                      have lean_s62 : let30 := by timed eqResolve lean_a81 lean_r13
                      have lean_s63 : (Eq let30 let31) := by timed Eq.symm lean_r5
                      have lean_s64 : let31 := by timed eqResolve lean_s62 lean_s63
                      have lean_s65 : let159 := by timed And.intro lean_s34 lean_s64
                      have lean_s66 : (Implies let159 let158) := by arithMulPos [let28, let5, let22], 0
                      have lean_s67 : let158 := by timed modusPonens lean_s65 lean_s66
                      have lean_s68 : let64 := by sumBounds [lean_s9, lean_s21, lean_s30, lean_s33, lean_s44, lean_s51, lean_s61, lean_s67]
                      let lean_s69 := by timed congrHAdd lean_r34 lean_r50
                      let lean_s70 := by timed congrHAdd lean_r37 lean_s69
                      let lean_s71 := by timed congrHAdd lean_r7 lean_s70
                      let lean_s72 := by timed congrHAdd lean_r27 lean_s71
                      let lean_s73 := by timed congrHAdd lean_r40 lean_s72
                      let lean_s74 := by timed congrHAdd lean_r43 lean_s73
                      have lean_s75 : (Eq let61 let88) := by timed congrHAdd lean_r46 lean_s74
                      have lean_s76 : (Eq let61 let68) := by timed Eq.trans lean_s75 lean_r8
                      let lean_s77 := by timed flipCongrArg lean_s76 [GE.ge]
                      let lean_s78 := by timed congrHAdd lean_r11 lean_r25
                      let lean_s79 := by timed congrHAdd lean_r10 lean_s78
                      let lean_s80 := by timed congrHAdd lean_r11 lean_s79
                      let lean_s81 := by timed congrHAdd lean_r48 lean_s80
                      let lean_s82 := by timed congrHAdd lean_r48 lean_s81
                      let lean_s83 := by timed congrHAdd lean_r29 lean_s82
                      have lean_s84 : (Eq let38 let121) := by timed congrHAdd lean_r17 lean_s83
                      have lean_s85 : (Eq let38 let68) := by timed Eq.trans lean_s84 lean_r32
                      have lean_s86 : (Eq let62 let118) := by timed congr lean_s77 lean_s85
                      have lean_s87 : (Eq let62 True) := by timed Eq.trans lean_s86 lean_r28
                      have lean_s88 : (Eq let63 let138) := by timed flipCongrArg lean_s87 [Not]
                      have lean_s89 : (Eq let63 False) := by timed Eq.trans lean_s88 lean_r52
                      have lean_s90 : (Eq let64 False) := by timed Eq.trans lean_r6 lean_s89
                      show False from by timed eqResolve lean_s68 lean_s90
                    ))
                  have lean_s6 : let135 := by liftOrNToNeg lean_s5
                  have lean_s7 : (Eq let135 let136) := by timed Eq.symm lean_r49
                  have lean_s8 : let136 := by timed eqResolve lean_s6 lean_s7
                  have lean_s9 : let135 := by timed eqResolve lean_s8 lean_r49
                  show False from by timed contradiction lean_s4 lean_s9
  ))))))))))))))))
have lean_s1 : (Not (And let30 (And let90 (And let151 (And let112 (And let150 (And let109 (And let18 let115)))))))) := by liftOrNToNeg lean_s0
have lean_s2 : let156 := by timed flipNotAnd lean_s1 [let30, let90, let151, let112, let150, let109, let18, let115]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let122 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let128 let122) := by timed congr lean_s5 lean_r36
have lean_s7 : (Eq let128 True) := by timed Eq.trans lean_s6 lean_r33
have lean_s8 : (Eq let126 True) := by timed Eq.trans lean_r39 lean_s7
have lean_s9 : let126 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let129 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let134 let129) := by timed congr lean_s12 lean_r45
have lean_s14 : (Eq let134 True) := by timed Eq.trans lean_s13 lean_r41
have lean_s15 : (Eq let133 True) := by timed Eq.trans lean_r47 lean_s14
have lean_s16 : let133 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq let153 let153) := by timed rfl
let lean_s19 := by timed congr lean_s3 lean_s18
have lean_s20 : let137 := by timed rfl
let lean_s21 := by timed flipCongrArg lean_s20 [Eq]
have lean_s22 : (Eq let127 let137) := by timed congr lean_s21 lean_r35
have lean_s23 : (Eq let127 True) := by timed Eq.trans lean_s22 lean_r51
have lean_s24 : (Eq let124 True) := by timed Eq.trans lean_r38 lean_s23
have lean_s25 : let124 := by timed trueElim lean_s24
let lean_s26 := by timed congr lean_s3 lean_s25
have lean_s27 : (Eq let152 let152) := by timed rfl
let lean_s28 := by timed congr lean_s3 lean_s27
have lean_s29 : (Eq let154 let154) := by timed rfl
let lean_s30 := by timed congr lean_s3 lean_s29
have lean_s31 : let108 := by timed rfl
let lean_s32 := by timed flipCongrArg lean_s31 [Eq]
have lean_s33 : (Eq let103 let108) := by timed congr lean_s32 lean_r15
have lean_s34 : (Eq let103 True) := by timed Eq.trans lean_s33 lean_r20
have lean_s35 : (Eq let102 True) := by timed Eq.trans lean_r16 lean_s34
have lean_s36 : let102 := by timed trueElim lean_s35
let lean_s37 := by timed congr lean_s3 lean_s36
have lean_s38 : (Eq let135 let135) := by timed rfl
let lean_s39 := by timed congr lean_s37 lean_s38
let lean_s40 := by timed congr lean_s30 lean_s39
let lean_s41 := by timed congr lean_s28 lean_s40
let lean_s42 := by timed congr lean_s26 lean_s41
let lean_s43 := by timed congr lean_s19 lean_s42
let lean_s44 := by timed congr lean_s17 lean_s43
have lean_s45 : (Eq let156 let155) := by timed congr lean_s10 lean_s44
have lean_s46 : let155 := by timed eqResolve lean_s2 lean_s45
have lean_s47 : (Or let17 (Or let111 (Or let29 (Or let89 (Or let154 (Or let135 (Or let153 let152))))))) := by permutateOr lean_s46, [6, 3, 0, 1, 5, 7, 2, 4], (- 1)
let lean_s48 := by R2 lean_s47, lean_a90, let150, [(- 1), 0]
let lean_s49 := by timed flipCongrArg lean_r44 [GE.ge]
have lean_s50 : (Eq let5 let5) := by timed rfl
have lean_s51 : (Eq let149 let151) := by timed congr lean_s49 lean_s50
have lean_s52 : let151 := by timed eqResolve lean_a88 lean_s51
let lean_s53 := by R2 lean_s48, lean_s52, let151, [(- 1), 0]
let lean_s54 := by timed flipCongrArg lean_r12 [GE.ge]
have lean_s55 : (Eq let1 let1) := by timed rfl
have lean_s56 : (Eq let145 let104) := by timed congr lean_s54 lean_s55
have lean_s57 : (Eq let145 let90) := by timed Eq.trans lean_s56 lean_r18
have lean_s58 : let90 := by timed eqResolve lean_a83 lean_s57
let lean_s59 := by R1 lean_s53, lean_s58, let89, [(- 1), 0]
let lean_s60 := by timed flipCongrArg lean_r23 [LE.le]
have lean_s61 : (Eq let144 let116) := by timed congr lean_s60 lean_s50
have lean_s62 : (Eq let144 let115) := by timed Eq.trans lean_s61 lean_r24
have lean_s63 : let115 := by timed eqResolve lean_a82 lean_s62
let lean_s64 := by R2 lean_s59, lean_s63, let115, [(- 1), 0]
have lean_s65 : let30 := by timed eqResolve lean_a81 lean_r13
let lean_s66 := by R1 lean_s64, lean_s65, let29, [(- 1), 0]
let lean_s67 := by timed flipCongrArg lean_r19 [LE.le]
have lean_s68 : (Eq let143 let110) := by timed congr lean_s67 lean_s55
have lean_s69 : (Eq let143 let109) := by timed Eq.trans lean_s68 lean_r21
have lean_s70 : let109 := by timed eqResolve lean_a80 lean_s69
let lean_s71 := by R2 lean_s66, lean_s70, let109, [(- 1), 0]
let lean_s72 := by timed flipCongrArg lean_r31 [LE.le]
have lean_s73 : (Eq let141 let113) := by timed congr lean_s72 lean_s55
have lean_s74 : (Eq let141 let112) := by timed Eq.trans lean_s73 lean_r22
have lean_s75 : let112 := by timed eqResolve lean_a76 lean_s74
let lean_s76 := by R1 lean_s71, lean_s75, let111, [(- 1), 0]
let lean_s77 := by timed flipCongrArg lean_r26 [LE.le]
have lean_s78 : (Eq let6 let6) := by timed rfl
have lean_s79 : (Eq let140 let119) := by timed congr lean_s77 lean_s78
have lean_s80 : (Eq let140 let18) := by timed Eq.trans lean_s79 lean_r30
have lean_s81 : let18 := by timed eqResolve lean_a75 lean_s80
exact (show False from by R1 lean_s76, lean_s81, let17, [0, 0])


