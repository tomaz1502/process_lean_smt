open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x : Int}
variable {y : Int}
variable {x : Int}
variable {y : Int}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (Int.ofNat 2830)
  let let3 := (Int.ofNat 6938781)
  let let4 := (Int.ofNat 2831)
  let let5 := (binrel% HMul.hMul (Neg.neg let4) x)
  let let6 := (binrel% HAdd.hAdd let5 (binrel% HMul.hMul (binrel% HDiv.hDiv let3 let2) y))
  let let7 := (Int.ofNat 5281)
  let let8 := (Neg.neg (binrel% HDiv.hDiv let7 let2))
  let let9 := (binrel% HMul.hMul let8 y)
  let let10 := (Int.ofNat 2450)
  let let11 := (binrel% HMul.hMul (Neg.neg let10) y)
  let let12 := (binrel% HMul.hMul let4 x)
  let let13 := (binrel% HAdd.hAdd let12 let11)
  let let14 := (Rat.ofInt let13)
  let let15 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let9 let6))
  let let16 := (Int.ofNat 1415)
  let let17 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 278) let16))
  let let18 := (binrel% GE.ge let1 let17)
  let let19 := (Int.ofNat 6)
  let let20 := (binrel% GE.ge y let19)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt y let19)
  let let23 := (Not let21)
  let let24 := (Eq let20 let23)
  let let25 := (Eq let23 let20)
  let let26 := (Eq let20 let20)
  let let27 := (Int.ofNat 2451)
  let let28 := (binrel% HMul.hMul (Neg.neg let27) y)
  let let29 := (binrel% HMul.hMul let2 x)
  let let30 := (binrel% HAdd.hAdd let29 let28)
  let let31 := (Neg.neg (binrel% HDiv.hDiv let4 let2))
  let let32 := (binrel% HMul.hMul let31 let30)
  let let33 := (Int.ofNat 5)
  let let34 := (binrel% GE.ge x let33)
  let let35 := (Not let34)
  let let36 := (Not let35)
  let let37 := (Eq let34 let36)
  let let38 := (Eq let36 let34)
  let let39 := (Eq let34 let34)
  let let40 := (Int.ofNat 0)
  let let41 := (Rat.ofInt 2451)
  let let42 := (binrel% GT.gt let41 let40)
  let let43 := (binrel% GE.ge y let33)
  let let44 := (Not let43)
  let let45 := (binrel% LT.lt y let33)
  let let46 := (Rat.ofInt (binrel% HMul.hMul (Neg.neg let2) x))
  let let47 := (Neg.neg (Rat.ofInt 2830))
  let let48 := (binrel% HMul.hMul let47 x)
  let let49 := (binrel% HMul.hMul let27 y)
  let let50 := (Rat.ofInt let49)
  let let51 := (Rat.ofInt let30)
  let let52 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 let46))
  let let53 := (Not let44)
  let let54 := (Eq let43 let53)
  let let55 := (Eq let53 let43)
  let let56 := (Eq let43 let43)
  let let57 := (Rat.ofInt 8493)
  let let58 := (Int.ofNat 3)
  let let59 := (Rat.ofInt 2831)
  let let60 := (binrel% HMul.hMul let59 let58)
  let let61 := (Neg.neg (Rat.ofInt 9800))
  let let62 := (Int.ofNat 4)
  let let63 := (Rat.ofInt 2450)
  let let64 := (Neg.neg let63)
  let let65 := (binrel% HMul.hMul let64 let62)
  let let66 := (Neg.neg (Rat.ofInt 1308))
  let let67 := (binrel% LE.le let1 let66)
  let let68 := (binrel% LT.lt let31 let40)
  let let69 := (binrel% GE.ge x let62)
  let let70 := (Eq let69 let69)
  let let71 := (Int.ofNat 11)
  let let72 := (Int.ofNat 1)
  let let73 := (binrel% HDiv.hDiv let72 let10)
  let let74 := (binrel% HMul.hMul let73 let71)
  let let75 := (binrel% HDiv.hDiv let4 let10)
  let let76 := (Neg.neg let75)
  let let77 := (binrel% HMul.hMul let76 let58)
  let let78 := (Rat.ofInt 1)
  let let79 := (binrel% HMul.hMul let78 let58)
  let let80 := (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let77 let74))
  let let81 := (binrel% HMul.hMul let73 let13)
  let let82 := (binrel% HMul.hMul let76 x)
  let let83 := (binrel% HMul.hMul let78 y)
  let let84 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 let81))
  let let85 := (binrel% GE.ge let84 let80)
  let let86 := (Not let85)
  let let87 := (binrel% LT.lt let84 let80)
  let let88 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 8493) let10))
  let let89 := (Int.ofNat 1225)
  let let90 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 566) let89))
  let let91 := (binrel% HDiv.hDiv let71 let10)
  let let92 := (Rat.ofInt 3)
  let let93 := (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd let88 let91))
  let let94 := (binrel% GE.ge let1 let90)
  let let95 := (binrel% LE.le y let58)
  let let96 := (Not let95)
  let let97 := (binrel% GT.gt y let58)
  let let98 := (Eq let97 let96)
  let let99 := (Rat.ofInt 5662)
  let let100 := (Int.ofNat 2)
  let let101 := (binrel% HMul.hMul let59 let100)
  let let102 := (Neg.neg (Rat.ofInt 1689))
  let let103 := (binrel% LE.le let1 let102)
  let let104 := (binrel% GE.ge x let58)
  let let105 := (Not let104)
  let let106 := (Not let105)
  let let107 := (Eq let104 let106)
  let let108 := (Eq let106 let104)
  let let109 := (Eq let104 let104)
  let let110 := (binrel% GE.ge y let58)
  let let111 := (Not let110)
  let let112 := (binrel% LT.lt y let58)
  let let113 := (binrel% HMul.hMul let76 let100)
  let let114 := (binrel% HMul.hMul let78 let100)
  let let115 := (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let113 let74))
  let let116 := (binrel% GE.ge let84 let115)
  let let117 := (Not let116)
  let let118 := (binrel% LT.lt let84 let115)
  let let119 := (Neg.neg let72)
  let let120 := (binrel% HMul.hMul let119 y)
  let let121 := (binrel% HMul.hMul let75 x)
  let let122 := (binrel% HAdd.hAdd let121 let120)
  let let123 := (Rat.ofInt y)
  let let124 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let82 let122))
  let let125 := (Rat.ofInt 2)
  let let126 := (Neg.neg (binrel% HDiv.hDiv let4 let89))
  let let127 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 751) let10))
  let let128 := (binrel% GE.ge let1 let127)
  let let129 := (binrel% LE.le y let100)
  let let130 := (Not let129)
  let let131 := (binrel% GT.gt y let100)
  let let132 := (Eq let131 let130)
  let let133 := (binrel% HMul.hMul let59 let72)
  let let134 := (Neg.neg (Rat.ofInt 2070))
  let let135 := (binrel% LE.le let1 let134)
  let let136 := (binrel% GE.ge x let100)
  let let137 := (Not let136)
  let let138 := (Not let137)
  let let139 := (Eq let136 let138)
  let let140 := (Eq let138 let136)
  let let141 := (Neg.neg (Rat.ofInt 1894))
  let let142 := (binrel% GE.ge let1 let141)
  let let143 := (Rat.ofInt let11)
  let let144 := (Rat.ofInt let12)
  let let145 := (binrel% HMul.hMul let10 y)
  let let146 := (Rat.ofInt (binrel% HAdd.hAdd let5 let145))
  let let147 := (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd let144 let143))
  let let148 := (Eq let136 let136)
  let let149 := (binrel% GE.ge y let100)
  let let150 := (Not let149)
  let let151 := (binrel% LT.lt y let100)
  let let152 := (binrel% HAdd.hAdd let82 y)
  let let153 := (Rat.ofInt let120)
  let let154 := (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let152 let121))
  let let155 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 61) (Int.ofNat 98)))
  let let156 := (Neg.neg (binrel% HDiv.hDiv let27 let10))
  let let157 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 10562) let89))
  let let158 := (Rat.ofInt 9)
  let let159 := (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd let157 let156))
  let let160 := (Not let69)
  let let161 := (Not let160)
  let let162 := (Eq let69 let161)
  let let163 := (Eq let161 let69)
  let let164 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 572) let89))
  let let165 := (binrel% LE.le let1 let164)
  let let166 := (Neg.neg let59)
  let let167 := (binrel% HMul.hMul let166 let33)
  let let168 := (binrel% HMul.hMul let63 let33)
  let let169 := (binrel% HMul.hMul let78 let71)
  let let170 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let168 let167))
  let let171 := (binrel% HMul.hMul let166 x)
  let let172 := (binrel% HMul.hMul let63 y)
  let let173 := (binrel% HMul.hMul let78 let13)
  let let174 := (binrel% HAdd.hAdd let173 (binrel% HAdd.hAdd let172 let171))
  let let175 := (binrel% GE.ge let174 let170)
  let let176 := (Not let175)
  let let177 := (binrel% LT.lt let174 let170)
  let let178 := (Neg.neg let78)
  let let179 := (binrel% HMul.hMul let178 let72)
  let let180 := (binrel% HMul.hMul let31 let40)
  let let181 := (Neg.neg let100)
  let let182 := (binrel% GE.ge x let181)
  let let183 := (Not let182)
  let let184 := (Not let183)
  let let185 := (Eq let184 let182)
  let let186 := (Not let150)
  let let187 := (Eq let149 let186)
  let let188 := (Eq let186 let149)
  let let189 := (binrel% HMul.hMul let119 let145)
  let let190 := (Neg.neg let58)
  let let191 := (binrel% GE.ge y let190)
  let let192 := (Not let191)
  let let193 := (binrel% LT.lt y let190)
  let let194 := (binrel% HMul.hMul let63 let190)
  let let195 := (binrel% HMul.hMul let166 let181)
  let let196 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let195 let194))
  let let197 := (binrel% HAdd.hAdd let173 (binrel% HAdd.hAdd let171 let172))
  let let198 := (binrel% GE.ge let197 let196)
  let let199 := (Not let198)
  let let200 := (binrel% LT.lt let197 let196)
  let let201 := (binrel% GT.gt let59 let40)
  let let202 := (binrel% HMul.hMul let166 let190)
  let let203 := (Neg.neg let62)
  let let204 := (binrel% HMul.hMul let63 let203)
  let let205 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let204 let202))
  let let206 := (binrel% GE.ge let174 let205)
  let let207 := (Not let206)
  let let208 := (binrel% LT.lt let174 let205)
  let let209 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let122 let82))
  let let210 := (binrel% GE.ge let13 let71)
  let let211 := (Not let210)
  let let212 := (Not let211)
  let let213 := (Eq let212 let210)
  let let214 := (binrel% GE.ge x let119)
  let let215 := (Not let214)
  let let216 := (binrel% LT.lt x let119)
  let let217 := (Neg.neg (Rat.ofInt 4900))
  let let218 := (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let217 let59))
  let let219 := (Rat.ofInt 11)
  let let220 := (Neg.neg (Rat.ofInt 1296))
  let let221 := (binrel% HAdd.hAdd let219 (binrel% HAdd.hAdd let61 let57))
  let let222 := (binrel% HMul.hMul let47 let62)
  let let223 := (binrel% HMul.hMul let41 let62)
  let let224 := (Int.ofNat 10)
  let let225 := (binrel% HMul.hMul let78 let224)
  let let226 := (binrel% HAdd.hAdd let225 (binrel% HAdd.hAdd let223 let222))
  let let227 := (binrel% HMul.hMul let41 y)
  let let228 := (binrel% HMul.hMul let78 let30)
  let let229 := (binrel% HAdd.hAdd let228 (binrel% HAdd.hAdd let227 let48))
  let let230 := (binrel% GE.ge let229 let226)
  let let231 := (Not let230)
  let let232 := (binrel% LT.lt let229 let226)
  let let233 := (Eq let110 let110)
  let let234 := (binrel% HMul.hMul let156 let72)
  let let235 := (binrel% GE.ge let30 let224)
  let let236 := (Not let235)
  let let237 := (Not let236)
  let let238 := (Eq let237 let235)
  let let239 := (binrel% GE.ge y let40)
  let let240 := (Not let239)
  let let241 := (binrel% LT.lt y let40)
  let let242 := (Neg.neg (Rat.ofInt 927))
  let let243 := (Rat.ofInt 11324)
  let let244 := (Rat.ofInt 12250)
  let let245 := (Neg.neg let244)
  let let246 := (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let245 let243))
  let let247 := (Neg.neg let73)
  let let248 := (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd let247 let88))
  let let249 := (Rat.ofInt 9804)
  let let250 := (binrel% LT.lt x let100)
  let let251 := (Rat.ofInt let145)
  let let252 := (binrel% LT.lt x let33)
  let let253 := (Eq let210 let212)
  let let254 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15843) let16))
  let let255 := (binrel% HMul.hMul let8 let19)
  let let256 := (Eq let182 let184)
  let let257 := (Int.ofNat 9)
  let let258 := (binrel% LE.le let30 let257)
  let let259 := (Not let258)
  let let260 := (binrel% GT.gt let30 let257)
  let let261 := (Eq let260 let259)
  let let262 := (Neg.neg (Rat.ofInt 7350))
  let let263 := (binrel% HAdd.hAdd let99 let262)
  let let264 := (binrel% HAdd.hAdd let178 let263)
  let let265 := (binrel% GE.ge let13 let72)
  let let266 := (Not let265)
  let let267 := (binrel% LT.lt let13 let72)
  let let268 := (binrel% HAdd.hAdd let12 let189)
  let let269 := (binrel% HSub.hSub let12 let145)
  let let270 := (Not True)
  let let271 := (binrel% LT.lt x let62)
  let let272 := (binrel% LT.lt let76 let40)
  let let273 := (Eq let235 let237)
  let let274 := (Not let111)
  let let275 := (Eq let274 let110)
  let let276 := (binrel% HDiv.hDiv let7 let10)
  let let277 := (binrel% HMul.hMul let276 let203)
  let let278 := (Not let192)
  let let279 := (Eq let191 let278)
  let let280 := (Eq let278 let191)
  let let281 := (binrel% HMul.hMul let178 y)
  let let282 := (Neg.neg (Rat.ofInt 11320))
  let let283 := (Rat.ofInt let5)
  let let284 := (binrel% GE.ge y let62)
  let let285 := (Not let284)
  let let286 := (Not let285)
  let let287 := (Eq let284 let286)
  let let288 := (Eq let286 let284)
  let let289 := (binrel% HMul.hMul let178 let13)
  let let290 := (binrel% GE.ge x let40)
  let let291 := (Not let290)
  let let292 := (Not let291)
  let let293 := (binrel% HMul.hMul let64 y)
  let let294 := (Neg.neg (Rat.ofInt 1506))
  let let295 := (Rat.ofInt 10)
  let let296 := (binrel% HAdd.hAdd let295 (binrel% HAdd.hAdd let249 let282))
  let let297 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let251 let283))
  let let298 := (Eq let191 let191)
  let let299 := (binrel% HMul.hMul let119 let49)
  let let300 := (binrel% LT.lt let178 let40)
  let let301 := (binrel% GE.ge let1 let294)
  let let302 := (binrel% LE.le let1 let242)
  let let303 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 37) (Int.ofNat 245)))
  let let304 := (binrel% GE.ge let1 let303)
  let let305 := (binrel% LT.lt let30 let224)
  let let306 := (binrel% GE.ge y let119)
  let let307 := (Not let306)
  let let308 := (binrel% LT.lt y let119)
  let let309 := (binrel% HAdd.hAdd let219 (binrel% HAdd.hAdd let254 let1))
  let let310 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv let3 let10)) x) let49)
  let let311 := (binrel% HMul.hMul let156 let13)
  let let312 := (binrel% GE.ge x let72)
  let let313 := (Not let312)
  let let314 := (Not let313)
  let let315 := (Eq let312 let314)
  let let316 := (Eq let314 let312)
  let let317 := (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let57 let61))
  let let318 := (Eq let210 let210)
  let let319 := (binrel% HMul.hMul let178 let119)
  let let320 := (binrel% GE.ge let30 let40)
  let let321 := (binrel% LE.le let40 let30)
  let let322 := (binrel% HMul.hMul let276 x)
  let let323 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let322 let310))
  let let324 := (binrel% HMul.hMul let76 let72)
  let let325 := (binrel% HMul.hMul let166 let40)
  let let326 := (binrel% GE.ge x let190)
  let let327 := (Not let326)
  let let328 := (Not let327)
  let let329 := (Eq let328 let326)
  let let330 := (Eq let306 let306)
  let let331 := (binrel% GE.ge let1 let220)
  let let332 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 109) (Int.ofNat 350)))
  let let333 := (binrel% LE.le let1 let332)
  let let334 := (binrel% HMul.hMul let178 let190)
  let let335 := (Neg.neg (Rat.ofInt 1677))
  let let336 := (binrel% HAdd.hAdd let219 let263)
  let let337 := (binrel% HMul.hMul let59 let62)
  let let338 := (binrel% HMul.hMul let75 let190)
  let let339 := (binrel% HMul.hMul let63 let119)
  let let340 := (Eq let326 let328)
  let let341 := (Not let307)
  let let342 := (Eq let341 let306)
  let let343 := (binrel% HMul.hMul let78 let72)
  let let344 := (binrel% HAdd.hAdd let343 (binrel% HAdd.hAdd let74 let324))
  let let345 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let81 let82))
  let let346 := (binrel% GE.ge let345 let344)
  let let347 := (Not let346)
  let let348 := (binrel% LT.lt let345 let344)
  let let349 := (binrel% HMul.hMul let247 let13)
  let let350 := (Eq let235 let235)
  let let351 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let283 let251))
  let let352 := (Eq let110 let274)
  let let353 := (binrel% HMul.hMul let78 let257)
  let let354 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 191) let89))
  let let355 := (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let247 let76))
  let let356 := (binrel% LE.le let1 let155)
  let let357 := (Eq let182 let182)
  let let358 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let255 let180))
  let let359 := (binrel% HAdd.hAdd let173 (binrel% HAdd.hAdd let9 let32))
  let let360 := (binrel% GE.ge let359 let358)
  let let361 := (Not let360)
  let let362 := (binrel% LT.lt let359 let358)
  let let363 := (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd let126 let91))
  let let364 := (binrel% LT.lt x let190)
  let let365 := (binrel% HMul.hMul let63 let181)
  let let366 := (Not let240)
  let let367 := (Eq let239 let366)
  let let368 := (Eq let366 let239)
  let let369 := (binrel% LT.lt let156 let40)
  let let370 := (binrel% GT.gt let276 let40)
  let let371 := (binrel% HMul.hMul let166 let119)
  let let372 := (binrel% GT.gt let78 let40)
  let let373 := (Neg.neg (Rat.ofInt 14155))
  let let374 := (binrel% HMul.hMul let59 let40)
  let let375 := (binrel% LT.lt x let181)
  let let376 := (binrel% LT.lt let47 let40)
  let let377 := (binrel% GE.ge y let181)
  let let378 := (Not let377)
  let let379 := (binrel% LT.lt y let181)
  let let380 := (binrel% LT.lt let247 let40)
  let let381 := (binrel% LT.lt x let40)
  let let382 := (binrel% LT.lt let13 let71)
  let let383 := (Not let378)
  let let384 := (Eq let383 let377)
  let let385 := (Eq let377 let383)
  let let386 := (binrel% HAdd.hAdd let219 (binrel% HAdd.hAdd let244 let373))
  let let387 := (Eq let377 let377)
  let let388 := (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let1 let1))
  let let389 := (binrel% HMul.hMul let64 let100)
  let let390 := (binrel% GE.ge let1 let335)
  let let391 := (binrel% HMul.hMul let75 let181)
  let let392 := (Eq let214 let214)
  let let393 := (binrel% HAdd.hAdd let29 let299)
  let let394 := (binrel% HSub.hSub let29 let49)
  let let395 := (Not let215)
  let let396 := (Eq let395 let214)
  let let397 := (Eq let214 let395)
  let let398 := (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd let247 let126))
  let let399 := (binrel% HMul.hMul let178 let181)
  let let400 := (Eq let326 let326)
  let let401 := (Eq let306 let341)
  let let402 := (binrel% HMul.hMul let64 let58)
  let let403 := (Neg.neg (Rat.ofInt 2058))
  let let404 := (binrel% GE.ge let1 let403)
  let let405 := (binrel% HAdd.hAdd let219 (binrel% HAdd.hAdd let59 let217))
  let let406 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let371 let365))
  let let407 := (binrel% GE.ge let197 let406)
  let let408 := (Not let407)
  let let409 := (binrel% LT.lt let197 let406)
  let let410 := (binrel% LE.le let1 let354)
  let let411 := (binrel% GT.gt let63 let40)
  let let412 := (binrel% HMul.hMul let75 let119)
  let let413 := (binrel% LE.le y let72)
  let let414 := (binrel% LT.lt y let62)
  let let415 := (Eq let239 let239)
  let let416 := (Not let413)
  let let417 := (binrel% GT.gt y let72)
  let let418 := (Eq let417 let416)
  let let419 := (binrel% LT.lt let8 let40)
  let let420 := (Neg.neg (Rat.ofInt 2439))
  let let421 := (binrel% GE.ge let1 let420)
  let let422 := (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let91 let76))
  let let423 := (binrel% HAdd.hAdd let219 (binrel% HAdd.hAdd let64 let1))
  let let424 := (Eq let284 let284)
  let let425 := (binrel% HMul.hMul let59 x)
  let let426 := (binrel% HMul.hMul let64 let33)
  let let427 := (binrel% HMul.hMul let247 let72)
  let let428 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let339 let325))
  let let429 := (binrel% GE.ge let174 let428)
  let let430 := (Not let429)
  let let431 := (binrel% LT.lt let174 let428)
  let let432 := (binrel% GT.gt let73 let40)
  let let433 := (binrel% GT.gt let75 let40)
  let let434 := (Eq let312 let312)
  let let435 := (binrel% LE.le let1 let178)
  let let436 := (binrel% LT.lt x let58)
  let let437 := (binrel% HMul.hMul let64 let40)
  let let438 := (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd let143 let144))
  let let439 := (binrel% LT.lt x let72)
  let let440 := (binrel% LT.lt let166 let40)
  let let441 := (binrel% LE.le let13 let224)
  let let442 := (binrel% LT.lt let64 let40)
  let let443 := (binrel% LE.le let72 let13)
  let let444 := (Eq let149 let149)
  let let445 := (binrel% LE.le let269 let224)
  let let446 := (binrel% LE.le let72 let269)
  let let447 := (binrel% LE.le let394 let257)
  let let448 := (binrel% LE.le let40 let394)
  let let449 := (And let448 (And let447 (And let446 let445)))
  let let450 := (And let320 (And let236 (And let265 let211)))
  let let451 := (Or let266 (Or let326 let235))
  let let452 := (Or let266 (Or let328 let237))
  let let453 := (Eq Or Or)
  let let454 := (Eq let266 let266)
  let let455 := (Or let237 False)
  let let456 := (binrel% HAdd.hAdd let353 (binrel% HAdd.hAdd let277 let234))
  let let457 := (binrel% HAdd.hAdd let228 (binrel% HAdd.hAdd let322 let311))
  let let458 := (binrel% LE.le let457 let456)
  let let459 := (binrel% LE.le let311 let234)
  let let460 := (And let369 let265)
  let let461 := (binrel% LE.le let322 let277)
  let let462 := (binrel% LE.le x let203)
  let let463 := (And let370 let462)
  let let464 := (binrel% LE.le let228 let353)
  let let465 := (And let372 let258)
  let let466 := (Eq let236 let305)
  let let467 := (Or let327 (Or let191 let210))
  let let468 := (Or let327 (Or let278 let212))
  let let469 := (Or let212 False)
  let let470 := (Not let382)
  let let471 := (Eq let210 let470)
  let let472 := (Or let470 False)
  let let473 := (binrel% LE.le let171 let202)
  let let474 := (And let440 let326)
  let let475 := (binrel% LE.le let172 let204)
  let let476 := (binrel% LE.le y let203)
  let let477 := (And let411 let476)
  let let478 := (Eq let192 let193)
  let let479 := (binrel% LT.lt let173 let169)
  let let480 := (And let372 let382)
  let let481 := (Implies let480 let479)
  let let482 := (Eq let211 let382)
  let let483 := (Or let266 let192)
  let let484 := (Or let182 let483)
  let let485 := (Or let184 let483)
  let let486 := (Or let192 False)
  let let487 := (binrel% HAdd.hAdd let334 (binrel% HAdd.hAdd let427 let338))
  let let488 := (binrel% HAdd.hAdd let281 (binrel% HAdd.hAdd let349 let121))
  let let489 := (binrel% LE.le let488 let487)
  let let490 := (binrel% LE.le let121 let338)
  let let491 := (binrel% LE.le x let190)
  let let492 := (And let433 let491)
  let let493 := (binrel% LE.le let349 let427)
  let let494 := (And let380 let265)
  let let495 := (Implies let494 let493)
  let let496 := (binrel% LE.le let281 let334)
  let let497 := (And let300 let191)
  let let498 := (Or let377 (Or let183 let210))
  let let499 := (Or let383 (Or let183 let212))
  let let500 := (binrel% LE.le let172 let194)
  let let501 := (binrel% LE.le y let190)
  let let502 := (And let411 let501)
  let let503 := (Eq let378 let379)
  let let504 := (binrel% LE.le let171 let195)
  let let505 := (And let440 let182)
  let let506 := (Or let266 let378)
  let let507 := (Or let214 let506)
  let let508 := (Or let395 let506)
  let let509 := (Or let378 False)
  let let510 := (binrel% HAdd.hAdd let399 (binrel% HAdd.hAdd let427 let391))
  let let511 := (binrel% LE.le let488 let510)
  let let512 := (binrel% LE.le let121 let391)
  let let513 := (binrel% LE.le x let181)
  let let514 := (And let433 let513)
  let let515 := (binrel% LE.le let281 let399)
  let let516 := (And let300 let377)
  let let517 := (Or let306 (Or let215 let210))
  let let518 := (Or let341 (Or let215 let212))
  let let519 := (binrel% LE.le let172 let365)
  let let520 := (binrel% LE.le y let181)
  let let521 := (And let411 let520)
  let let522 := (binrel% LE.le let171 let371)
  let let523 := (And let440 let214)
  let let524 := (Or let266 (Or let290 let307))
  let let525 := (Or let266 (Or let292 let307))
  let let526 := (binrel% HAdd.hAdd let319 (binrel% HAdd.hAdd let427 let412))
  let let527 := (binrel% LE.le let488 let526)
  let let528 := (binrel% LE.le let121 let412)
  let let529 := (binrel% LE.le x let119)
  let let530 := (And let433 let529)
  let let531 := (binrel% LE.le let281 let319)
  let let532 := (And let300 let306)
  let let533 := (Or let291 (Or let239 let210))
  let let534 := (Or let291 (Or let366 let212))
  let let535 := (binrel% LE.le let171 let325)
  let let536 := (And let440 let290)
  let let537 := (binrel% LE.le let172 let339)
  let let538 := (binrel% LE.le y let119)
  let let539 := (And let411 let538)
  let let540 := (Or let240 let266)
  let let541 := (Or let312 let540)
  let let542 := (Or let314 let540)
  let let543 := (Or let266 False)
  let let544 := (Eq let266 let267)
  let let545 := (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let437 let374))
  let let546 := (binrel% HAdd.hAdd let289 (binrel% HAdd.hAdd let293 let425))
  let let547 := (binrel% LE.le let546 let545)
  let let548 := (binrel% LE.le let425 let374)
  let let549 := (binrel% LE.le x let40)
  let let550 := (And let201 let549)
  let let551 := (binrel% LE.le let293 let437)
  let let552 := (And let442 let239)
  let let553 := (binrel% LE.le let289 let179)
  let let554 := (And let300 let265)
  let let555 := (Implies let554 let553)
  let let556 := (Or let313 (Or let210 let149))
  let let557 := (Or let313 (Or let212 let186))
  let let558 := (binrel% LE.le let82 let324)
  let let559 := (And let272 let312)
  let let560 := (binrel% LT.lt let81 let74)
  let let561 := (And let432 let382)
  let let562 := (Implies let561 let560)
  let let563 := (binrel% LE.le let83 let343)
  let let564 := (And let372 let413)
  let let565 := (Or let150 let266)
  let let566 := (Or let136 let565)
  let let567 := (Or let138 let565)
  let let568 := (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let389 let133))
  let let569 := (binrel% LE.le let546 let568)
  let let570 := (binrel% LE.le let425 let133)
  let let571 := (binrel% LE.le x let72)
  let let572 := (And let201 let571)
  let let573 := (binrel% LE.le let293 let389)
  let let574 := (And let442 let149)
  let let575 := (Or let210 (Or let137 let110))
  let let576 := (Or let212 (Or let137 let274))
  let let577 := (binrel% LE.le let82 let113)
  let let578 := (And let272 let136)
  let let579 := (binrel% LE.le let83 let114)
  let let580 := (And let372 let129)
  let let581 := (Or let111 (Or let104 let266))
  let let582 := (Or let111 (Or let106 let266))
  let let583 := (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let101 let402))
  let let584 := (binrel% HAdd.hAdd let289 (binrel% HAdd.hAdd let425 let293))
  let let585 := (binrel% LE.le let584 let583)
  let let586 := (binrel% LE.le let293 let402)
  let let587 := (And let442 let110)
  let let588 := (binrel% LE.le let425 let101)
  let let589 := (binrel% LE.le x let100)
  let let590 := (And let201 let589)
  let let591 := (Or let210 (Or let105 let284))
  let let592 := (Or let212 (Or let105 let286))
  let let593 := (binrel% LE.le let82 let77)
  let let594 := (And let272 let104)
  let let595 := (binrel% LE.le let83 let79)
  let let596 := (And let372 let95)
  let let597 := (Or let285 (Or let69 let266))
  let let598 := (Or let285 (Or let161 let266))
  let let599 := (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let60 let65))
  let let600 := (binrel% LE.le let584 let599)
  let let601 := (binrel% LE.le let293 let65)
  let let602 := (And let442 let284)
  let let603 := (binrel% LE.le let425 let60)
  let let604 := (binrel% LE.le x let58)
  let let605 := (And let201 let604)
  let let606 := (Or let160 (Or let43 let235))
  let let607 := (Or let160 (Or let53 let237))
  let let608 := (Not let305)
  let let609 := (binrel% LE.le let48 let222)
  let let610 := (And let376 let69)
  let let611 := (binrel% LE.le let227 let223)
  let let612 := (binrel% LE.le y let62)
  let let613 := (And let42 let612)
  let let614 := (binrel% LT.lt let228 let225)
  let let615 := (And let372 let305)
  let let616 := (Or let44 let266)
  let let617 := (Or let34 let616)
  let let618 := (Or let36 let616)
  let let619 := (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let426 let337))
  let let620 := (binrel% LE.le let546 let619)
  let let621 := (binrel% LE.le let425 let337)
  let let622 := (binrel% LE.le x let62)
  let let623 := (And let201 let622)
  let let624 := (binrel% LE.le let293 let426)
  let let625 := (And let442 let43)
  let let626 := (Or let35 (Or let20 let210))
  let let627 := (Or let35 (Or let23 let212))
  let let628 := (binrel% LE.le let171 let167)
  let let629 := (And let440 let34)
  let let630 := (binrel% LE.le let172 let168)
  let let631 := (binrel% LE.le y let33)
  let let632 := (And let411 let631)
  let let633 := (Not let320)
  let let634 := (Or let633 (Or let21 let210))
  let let635 := (Or let633 (Or let21 let212))
  let let636 := (binrel% LE.le let32 let180)
  let let637 := (And let68 let320)
  let let638 := (binrel% LE.le let9 let255)
  let let639 := (And let419 let20)
(Eq let15 let1) → (Eq let18 True) → (Eq let22 let21) → (Eq let25 let24) → let25 → (Eq let26 True) → (Eq let32 let6) → (Eq let38 let37) → (Eq let39 True) → (Eq let42 True) → (Eq let45 let44) → (Eq let48 let46) → (Eq let52 let1) → (Eq let55 let54) → (Eq let56 True) → (Eq let60 let57) → (Eq let65 let61) → (Eq let67 False) → (Eq let68 True) → (Eq let70 True) → (Eq let87 let86) → (Eq let77 let88) → (Eq let93 let90) → (Eq let94 True) → let98 → (Eq let101 let99) → (Eq let103 False) → (Eq let108 let107) → let108 → (Eq let109 True) → (Eq let112 let111) → (Eq let118 let117) → (Eq let124 let1) → (Eq let114 let125) → (Eq let113 let126) → let38 → (Eq let128 True) → let132 → (Eq let133 let59) → (Eq let135 False) → (Eq let140 let139) → (Eq let142 True) → (Eq let147 let1) → (Eq let148 True) → (Eq let151 let150) → (Eq let154 let1) → (Eq let159 let155) → (Eq let163 let162) → (Eq let165 False) → (Eq let177 let176) → (Eq let179 let178) → (Eq let180 let1) → let185 → (Eq let188 let187) → (Eq let189 let11) → (Eq let193 let192) → (Eq let200 let199) → (Eq let201 True) → (Eq let208 let207) → (Eq let209 let1) → let213 → (Eq let216 let215) → (Eq let218 let134) → (Eq let169 let219) → (Eq let221 let220) → (Eq let232 let231) → (Eq let233 True) → (Eq let234 let156) → let238 → (Eq let81 let122) → (Eq let241 let240) → (Eq let246 let242) → (Eq let248 let164) → (Eq let223 let249) → (Eq let250 let137) → (Eq let172 let251) → (Eq let252 let35) → (Eq let213 let253) → (Eq let255 let254) → (Eq let185 let256) → let261 → let55 → (Eq let264 let102) → (Eq let267 let266) → (Eq let269 let268) → (Eq let270 False) → (Eq let271 let160) → (Eq let272 True) → (Eq let238 let273) → let275 → (Eq let277 let157) → (Eq let280 let279) → (Eq let281 let153) → (Eq let222 let282) → (Eq let171 let283) → (Eq let288 let287) → (Eq let289 let146) → (Eq let292 let290) → let288 → (Eq let293 let143) → (Eq let296 let294) → (Eq let297 let1) → (Eq let83 let123) → (Eq let298 True) → (Eq let299 let28) → (Eq let300 True) → (Eq let301 True) → (Eq let204 let61) → (Eq let302 False) → (Eq let304 True) → (Eq let305 let236) → (Eq let308 let307) → (Eq let309 let17) → (Eq let79 let92) → (Eq let311 let310) → (Eq let316 let315) → (Eq let317 let66) → (Eq let318 True) → (Eq let319 let78) → (Eq let321 let320) → (Eq let323 let1) → (Eq let129 let111) → (Eq let258 let236) → (Eq let324 let76) → (Eq let325 let1) → let329 → (Eq let330 True) → (Eq let331 True) → (Eq let202 let57) → (Eq let333 False) → (Eq let334 let92) → (Eq let336 let335) → (Eq let337 let243) → (Eq let74 let91) → (Eq let338 let88) → (Eq let339 let64) → (Eq let329 let340) → let342 → (Eq let348 let347) → (Eq let349 let152) → (Eq let350 True) → let280 → (Eq let351 let1) → (Eq let275 let352) → (Eq let353 let158) → (Eq let227 let50) → (Eq let355 let354) → (Eq let356 False) → (Eq let357 True) → (Eq let228 let51) → let188 → (Eq let362 let361) → (Eq let363 let127) → (Eq let364 let327) → (Eq let365 let217) → (Eq let368 let367) → (Eq let369 True) → (Eq let370 True) → (Eq let371 let59) → let163 → (Eq let372 True) → (Eq let167 let373) → (Eq let374 let1) → (Eq let375 let183) → (Eq let376 True) → (Eq let379 let378) → (Eq let380 True) → (Eq let381 let291) → (Eq let382 let211) → let316 → let384 → (Eq let384 let385) → (Eq let386 let141) → (Eq let387 True) → (Eq let388 let178) → (Eq let389 let217) → (Eq let390 True) → (Eq let391 let126) → (Eq let194 let262) → (Eq let95 let285) → (Eq let195 let99) → (Eq let392 True) → (Eq let394 let393) → let396 → (Eq let396 let397) → (Eq let398 let332) → (Eq let399 let125) → (Eq let400 True) → (Eq let342 let401) → (Eq let402 let262) → (Eq let404 True) → (Eq let405 let403) → (Eq let409 let408) → (Eq let410 False) → (Eq let411 True) → (Eq let412 let76) → (Eq let413 let150) → let368 → (Eq let414 let285) → (Eq let415 True) → let418 → (Eq let419 True) → (Eq let421 True) → (Eq let422 let303) → (Eq let423 let420) → (Eq let424 True) → (Eq let425 let144) → (Eq let426 let245) → (Eq let343 let78) → (Eq let427 let247) → (Eq let431 let430) → (Eq let432 True) → (Eq let433 True) → (Eq let434 True) → let140 → (Eq let435 False) → (Eq let168 let244) → (Eq let436 let105) → (Eq let437 let1) → (Eq let438 let1) → (Eq let225 let295) → (Eq let173 let14) → (Eq let439 let313) → (Eq let440 True) → (Eq let441 let211) → (Eq let442 True) → (Eq let443 let265) → (Eq let444 True) → let449 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (Int.ofNat 2830)
  let let3 := (Int.ofNat 6938781)
  let let4 := (Int.ofNat 2831)
  let let5 := (binrel% HMul.hMul (Neg.neg let4) x)
  let let6 := (binrel% HAdd.hAdd let5 (binrel% HMul.hMul (binrel% HDiv.hDiv let3 let2) y))
  let let7 := (Int.ofNat 5281)
  let let8 := (Neg.neg (binrel% HDiv.hDiv let7 let2))
  let let9 := (binrel% HMul.hMul let8 y)
  let let10 := (Int.ofNat 2450)
  let let11 := (binrel% HMul.hMul (Neg.neg let10) y)
  let let12 := (binrel% HMul.hMul let4 x)
  let let13 := (binrel% HAdd.hAdd let12 let11)
  let let14 := (Rat.ofInt let13)
  let let15 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let9 let6))
  let let16 := (Int.ofNat 1415)
  let let17 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 278) let16))
  let let18 := (binrel% GE.ge let1 let17)
  let let19 := (Int.ofNat 6)
  let let20 := (binrel% GE.ge y let19)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt y let19)
  let let23 := (Not let21)
  let let24 := (Eq let20 let23)
  let let25 := (Eq let23 let20)
  let let26 := (Eq let20 let20)
  let let27 := (Int.ofNat 2451)
  let let28 := (binrel% HMul.hMul (Neg.neg let27) y)
  let let29 := (binrel% HMul.hMul let2 x)
  let let30 := (binrel% HAdd.hAdd let29 let28)
  let let31 := (Neg.neg (binrel% HDiv.hDiv let4 let2))
  let let32 := (binrel% HMul.hMul let31 let30)
  let let33 := (Int.ofNat 5)
  let let34 := (binrel% GE.ge x let33)
  let let35 := (Not let34)
  let let36 := (Not let35)
  let let37 := (Eq let34 let36)
  let let38 := (Eq let36 let34)
  let let39 := (Eq let34 let34)
  let let40 := (Int.ofNat 0)
  let let41 := (Rat.ofInt 2451)
  let let42 := (binrel% GT.gt let41 let40)
  let let43 := (binrel% GE.ge y let33)
  let let44 := (Not let43)
  let let45 := (binrel% LT.lt y let33)
  let let46 := (Rat.ofInt (binrel% HMul.hMul (Neg.neg let2) x))
  let let47 := (Neg.neg (Rat.ofInt 2830))
  let let48 := (binrel% HMul.hMul let47 x)
  let let49 := (binrel% HMul.hMul let27 y)
  let let50 := (Rat.ofInt let49)
  let let51 := (Rat.ofInt let30)
  let let52 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 let46))
  let let53 := (Not let44)
  let let54 := (Eq let43 let53)
  let let55 := (Eq let53 let43)
  let let56 := (Eq let43 let43)
  let let57 := (Rat.ofInt 8493)
  let let58 := (Int.ofNat 3)
  let let59 := (Rat.ofInt 2831)
  let let60 := (binrel% HMul.hMul let59 let58)
  let let61 := (Neg.neg (Rat.ofInt 9800))
  let let62 := (Int.ofNat 4)
  let let63 := (Rat.ofInt 2450)
  let let64 := (Neg.neg let63)
  let let65 := (binrel% HMul.hMul let64 let62)
  let let66 := (Neg.neg (Rat.ofInt 1308))
  let let67 := (binrel% LE.le let1 let66)
  let let68 := (binrel% LT.lt let31 let40)
  let let69 := (binrel% GE.ge x let62)
  let let70 := (Eq let69 let69)
  let let71 := (Int.ofNat 11)
  let let72 := (Int.ofNat 1)
  let let73 := (binrel% HDiv.hDiv let72 let10)
  let let74 := (binrel% HMul.hMul let73 let71)
  let let75 := (binrel% HDiv.hDiv let4 let10)
  let let76 := (Neg.neg let75)
  let let77 := (binrel% HMul.hMul let76 let58)
  let let78 := (Rat.ofInt 1)
  let let79 := (binrel% HMul.hMul let78 let58)
  let let80 := (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let77 let74))
  let let81 := (binrel% HMul.hMul let73 let13)
  let let82 := (binrel% HMul.hMul let76 x)
  let let83 := (binrel% HMul.hMul let78 y)
  let let84 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let82 let81))
  let let85 := (binrel% GE.ge let84 let80)
  let let86 := (Not let85)
  let let87 := (binrel% LT.lt let84 let80)
  let let88 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 8493) let10))
  let let89 := (Int.ofNat 1225)
  let let90 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 566) let89))
  let let91 := (binrel% HDiv.hDiv let71 let10)
  let let92 := (Rat.ofInt 3)
  let let93 := (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd let88 let91))
  let let94 := (binrel% GE.ge let1 let90)
  let let95 := (binrel% LE.le y let58)
  let let96 := (Not let95)
  let let97 := (binrel% GT.gt y let58)
  let let98 := (Eq let97 let96)
  let let99 := (Rat.ofInt 5662)
  let let100 := (Int.ofNat 2)
  let let101 := (binrel% HMul.hMul let59 let100)
  let let102 := (Neg.neg (Rat.ofInt 1689))
  let let103 := (binrel% LE.le let1 let102)
  let let104 := (binrel% GE.ge x let58)
  let let105 := (Not let104)
  let let106 := (Not let105)
  let let107 := (Eq let104 let106)
  let let108 := (Eq let106 let104)
  let let109 := (Eq let104 let104)
  let let110 := (binrel% GE.ge y let58)
  let let111 := (Not let110)
  let let112 := (binrel% LT.lt y let58)
  let let113 := (binrel% HMul.hMul let76 let100)
  let let114 := (binrel% HMul.hMul let78 let100)
  let let115 := (binrel% HAdd.hAdd let114 (binrel% HAdd.hAdd let113 let74))
  let let116 := (binrel% GE.ge let84 let115)
  let let117 := (Not let116)
  let let118 := (binrel% LT.lt let84 let115)
  let let119 := (Neg.neg let72)
  let let120 := (binrel% HMul.hMul let119 y)
  let let121 := (binrel% HMul.hMul let75 x)
  let let122 := (binrel% HAdd.hAdd let121 let120)
  let let123 := (Rat.ofInt y)
  let let124 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let82 let122))
  let let125 := (Rat.ofInt 2)
  let let126 := (Neg.neg (binrel% HDiv.hDiv let4 let89))
  let let127 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 751) let10))
  let let128 := (binrel% GE.ge let1 let127)
  let let129 := (binrel% LE.le y let100)
  let let130 := (Not let129)
  let let131 := (binrel% GT.gt y let100)
  let let132 := (Eq let131 let130)
  let let133 := (binrel% HMul.hMul let59 let72)
  let let134 := (Neg.neg (Rat.ofInt 2070))
  let let135 := (binrel% LE.le let1 let134)
  let let136 := (binrel% GE.ge x let100)
  let let137 := (Not let136)
  let let138 := (Not let137)
  let let139 := (Eq let136 let138)
  let let140 := (Eq let138 let136)
  let let141 := (Neg.neg (Rat.ofInt 1894))
  let let142 := (binrel% GE.ge let1 let141)
  let let143 := (Rat.ofInt let11)
  let let144 := (Rat.ofInt let12)
  let let145 := (binrel% HMul.hMul let10 y)
  let let146 := (Rat.ofInt (binrel% HAdd.hAdd let5 let145))
  let let147 := (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd let144 let143))
  let let148 := (Eq let136 let136)
  let let149 := (binrel% GE.ge y let100)
  let let150 := (Not let149)
  let let151 := (binrel% LT.lt y let100)
  let let152 := (binrel% HAdd.hAdd let82 y)
  let let153 := (Rat.ofInt let120)
  let let154 := (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let152 let121))
  let let155 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 61) (Int.ofNat 98)))
  let let156 := (Neg.neg (binrel% HDiv.hDiv let27 let10))
  let let157 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 10562) let89))
  let let158 := (Rat.ofInt 9)
  let let159 := (binrel% HAdd.hAdd let158 (binrel% HAdd.hAdd let157 let156))
  let let160 := (Not let69)
  let let161 := (Not let160)
  let let162 := (Eq let69 let161)
  let let163 := (Eq let161 let69)
  let let164 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 572) let89))
  let let165 := (binrel% LE.le let1 let164)
  let let166 := (Neg.neg let59)
  let let167 := (binrel% HMul.hMul let166 let33)
  let let168 := (binrel% HMul.hMul let63 let33)
  let let169 := (binrel% HMul.hMul let78 let71)
  let let170 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let168 let167))
  let let171 := (binrel% HMul.hMul let166 x)
  let let172 := (binrel% HMul.hMul let63 y)
  let let173 := (binrel% HMul.hMul let78 let13)
  let let174 := (binrel% HAdd.hAdd let173 (binrel% HAdd.hAdd let172 let171))
  let let175 := (binrel% GE.ge let174 let170)
  let let176 := (Not let175)
  let let177 := (binrel% LT.lt let174 let170)
  let let178 := (Neg.neg let78)
  let let179 := (binrel% HMul.hMul let178 let72)
  let let180 := (binrel% HMul.hMul let31 let40)
  let let181 := (Neg.neg let100)
  let let182 := (binrel% GE.ge x let181)
  let let183 := (Not let182)
  let let184 := (Not let183)
  let let185 := (Eq let184 let182)
  let let186 := (Not let150)
  let let187 := (Eq let149 let186)
  let let188 := (Eq let186 let149)
  let let189 := (binrel% HMul.hMul let119 let145)
  let let190 := (Neg.neg let58)
  let let191 := (binrel% GE.ge y let190)
  let let192 := (Not let191)
  let let193 := (binrel% LT.lt y let190)
  let let194 := (binrel% HMul.hMul let63 let190)
  let let195 := (binrel% HMul.hMul let166 let181)
  let let196 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let195 let194))
  let let197 := (binrel% HAdd.hAdd let173 (binrel% HAdd.hAdd let171 let172))
  let let198 := (binrel% GE.ge let197 let196)
  let let199 := (Not let198)
  let let200 := (binrel% LT.lt let197 let196)
  let let201 := (binrel% GT.gt let59 let40)
  let let202 := (binrel% HMul.hMul let166 let190)
  let let203 := (Neg.neg let62)
  let let204 := (binrel% HMul.hMul let63 let203)
  let let205 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let204 let202))
  let let206 := (binrel% GE.ge let174 let205)
  let let207 := (Not let206)
  let let208 := (binrel% LT.lt let174 let205)
  let let209 := (binrel% HAdd.hAdd let123 (binrel% HAdd.hAdd let122 let82))
  let let210 := (binrel% GE.ge let13 let71)
  let let211 := (Not let210)
  let let212 := (Not let211)
  let let213 := (Eq let212 let210)
  let let214 := (binrel% GE.ge x let119)
  let let215 := (Not let214)
  let let216 := (binrel% LT.lt x let119)
  let let217 := (Neg.neg (Rat.ofInt 4900))
  let let218 := (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let217 let59))
  let let219 := (Rat.ofInt 11)
  let let220 := (Neg.neg (Rat.ofInt 1296))
  let let221 := (binrel% HAdd.hAdd let219 (binrel% HAdd.hAdd let61 let57))
  let let222 := (binrel% HMul.hMul let47 let62)
  let let223 := (binrel% HMul.hMul let41 let62)
  let let224 := (Int.ofNat 10)
  let let225 := (binrel% HMul.hMul let78 let224)
  let let226 := (binrel% HAdd.hAdd let225 (binrel% HAdd.hAdd let223 let222))
  let let227 := (binrel% HMul.hMul let41 y)
  let let228 := (binrel% HMul.hMul let78 let30)
  let let229 := (binrel% HAdd.hAdd let228 (binrel% HAdd.hAdd let227 let48))
  let let230 := (binrel% GE.ge let229 let226)
  let let231 := (Not let230)
  let let232 := (binrel% LT.lt let229 let226)
  let let233 := (Eq let110 let110)
  let let234 := (binrel% HMul.hMul let156 let72)
  let let235 := (binrel% GE.ge let30 let224)
  let let236 := (Not let235)
  let let237 := (Not let236)
  let let238 := (Eq let237 let235)
  let let239 := (binrel% GE.ge y let40)
  let let240 := (Not let239)
  let let241 := (binrel% LT.lt y let40)
  let let242 := (Neg.neg (Rat.ofInt 927))
  let let243 := (Rat.ofInt 11324)
  let let244 := (Rat.ofInt 12250)
  let let245 := (Neg.neg let244)
  let let246 := (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let245 let243))
  let let247 := (Neg.neg let73)
  let let248 := (binrel% HAdd.hAdd let92 (binrel% HAdd.hAdd let247 let88))
  let let249 := (Rat.ofInt 9804)
  let let250 := (binrel% LT.lt x let100)
  let let251 := (Rat.ofInt let145)
  let let252 := (binrel% LT.lt x let33)
  let let253 := (Eq let210 let212)
  let let254 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15843) let16))
  let let255 := (binrel% HMul.hMul let8 let19)
  let let256 := (Eq let182 let184)
  let let257 := (Int.ofNat 9)
  let let258 := (binrel% LE.le let30 let257)
  let let259 := (Not let258)
  let let260 := (binrel% GT.gt let30 let257)
  let let261 := (Eq let260 let259)
  let let262 := (Neg.neg (Rat.ofInt 7350))
  let let263 := (binrel% HAdd.hAdd let99 let262)
  let let264 := (binrel% HAdd.hAdd let178 let263)
  let let265 := (binrel% GE.ge let13 let72)
  let let266 := (Not let265)
  let let267 := (binrel% LT.lt let13 let72)
  let let268 := (binrel% HAdd.hAdd let12 let189)
  let let269 := (binrel% HSub.hSub let12 let145)
  let let270 := (Not True)
  let let271 := (binrel% LT.lt x let62)
  let let272 := (binrel% LT.lt let76 let40)
  let let273 := (Eq let235 let237)
  let let274 := (Not let111)
  let let275 := (Eq let274 let110)
  let let276 := (binrel% HDiv.hDiv let7 let10)
  let let277 := (binrel% HMul.hMul let276 let203)
  let let278 := (Not let192)
  let let279 := (Eq let191 let278)
  let let280 := (Eq let278 let191)
  let let281 := (binrel% HMul.hMul let178 y)
  let let282 := (Neg.neg (Rat.ofInt 11320))
  let let283 := (Rat.ofInt let5)
  let let284 := (binrel% GE.ge y let62)
  let let285 := (Not let284)
  let let286 := (Not let285)
  let let287 := (Eq let284 let286)
  let let288 := (Eq let286 let284)
  let let289 := (binrel% HMul.hMul let178 let13)
  let let290 := (binrel% GE.ge x let40)
  let let291 := (Not let290)
  let let292 := (Not let291)
  let let293 := (binrel% HMul.hMul let64 y)
  let let294 := (Neg.neg (Rat.ofInt 1506))
  let let295 := (Rat.ofInt 10)
  let let296 := (binrel% HAdd.hAdd let295 (binrel% HAdd.hAdd let249 let282))
  let let297 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let251 let283))
  let let298 := (Eq let191 let191)
  let let299 := (binrel% HMul.hMul let119 let49)
  let let300 := (binrel% LT.lt let178 let40)
  let let301 := (binrel% GE.ge let1 let294)
  let let302 := (binrel% LE.le let1 let242)
  let let303 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 37) (Int.ofNat 245)))
  let let304 := (binrel% GE.ge let1 let303)
  let let305 := (binrel% LT.lt let30 let224)
  let let306 := (binrel% GE.ge y let119)
  let let307 := (Not let306)
  let let308 := (binrel% LT.lt y let119)
  let let309 := (binrel% HAdd.hAdd let219 (binrel% HAdd.hAdd let254 let1))
  let let310 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv let3 let10)) x) let49)
  let let311 := (binrel% HMul.hMul let156 let13)
  let let312 := (binrel% GE.ge x let72)
  let let313 := (Not let312)
  let let314 := (Not let313)
  let let315 := (Eq let312 let314)
  let let316 := (Eq let314 let312)
  let let317 := (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let57 let61))
  let let318 := (Eq let210 let210)
  let let319 := (binrel% HMul.hMul let178 let119)
  let let320 := (binrel% GE.ge let30 let40)
  let let321 := (binrel% LE.le let40 let30)
  let let322 := (binrel% HMul.hMul let276 x)
  let let323 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let322 let310))
  let let324 := (binrel% HMul.hMul let76 let72)
  let let325 := (binrel% HMul.hMul let166 let40)
  let let326 := (binrel% GE.ge x let190)
  let let327 := (Not let326)
  let let328 := (Not let327)
  let let329 := (Eq let328 let326)
  let let330 := (Eq let306 let306)
  let let331 := (binrel% GE.ge let1 let220)
  let let332 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 109) (Int.ofNat 350)))
  let let333 := (binrel% LE.le let1 let332)
  let let334 := (binrel% HMul.hMul let178 let190)
  let let335 := (Neg.neg (Rat.ofInt 1677))
  let let336 := (binrel% HAdd.hAdd let219 let263)
  let let337 := (binrel% HMul.hMul let59 let62)
  let let338 := (binrel% HMul.hMul let75 let190)
  let let339 := (binrel% HMul.hMul let63 let119)
  let let340 := (Eq let326 let328)
  let let341 := (Not let307)
  let let342 := (Eq let341 let306)
  let let343 := (binrel% HMul.hMul let78 let72)
  let let344 := (binrel% HAdd.hAdd let343 (binrel% HAdd.hAdd let74 let324))
  let let345 := (binrel% HAdd.hAdd let83 (binrel% HAdd.hAdd let81 let82))
  let let346 := (binrel% GE.ge let345 let344)
  let let347 := (Not let346)
  let let348 := (binrel% LT.lt let345 let344)
  let let349 := (binrel% HMul.hMul let247 let13)
  let let350 := (Eq let235 let235)
  let let351 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let283 let251))
  let let352 := (Eq let110 let274)
  let let353 := (binrel% HMul.hMul let78 let257)
  let let354 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 191) let89))
  let let355 := (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let247 let76))
  let let356 := (binrel% LE.le let1 let155)
  let let357 := (Eq let182 let182)
  let let358 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let255 let180))
  let let359 := (binrel% HAdd.hAdd let173 (binrel% HAdd.hAdd let9 let32))
  let let360 := (binrel% GE.ge let359 let358)
  let let361 := (Not let360)
  let let362 := (binrel% LT.lt let359 let358)
  let let363 := (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd let126 let91))
  let let364 := (binrel% LT.lt x let190)
  let let365 := (binrel% HMul.hMul let63 let181)
  let let366 := (Not let240)
  let let367 := (Eq let239 let366)
  let let368 := (Eq let366 let239)
  let let369 := (binrel% LT.lt let156 let40)
  let let370 := (binrel% GT.gt let276 let40)
  let let371 := (binrel% HMul.hMul let166 let119)
  let let372 := (binrel% GT.gt let78 let40)
  let let373 := (Neg.neg (Rat.ofInt 14155))
  let let374 := (binrel% HMul.hMul let59 let40)
  let let375 := (binrel% LT.lt x let181)
  let let376 := (binrel% LT.lt let47 let40)
  let let377 := (binrel% GE.ge y let181)
  let let378 := (Not let377)
  let let379 := (binrel% LT.lt y let181)
  let let380 := (binrel% LT.lt let247 let40)
  let let381 := (binrel% LT.lt x let40)
  let let382 := (binrel% LT.lt let13 let71)
  let let383 := (Not let378)
  let let384 := (Eq let383 let377)
  let let385 := (Eq let377 let383)
  let let386 := (binrel% HAdd.hAdd let219 (binrel% HAdd.hAdd let244 let373))
  let let387 := (Eq let377 let377)
  let let388 := (binrel% HAdd.hAdd let178 (binrel% HAdd.hAdd let1 let1))
  let let389 := (binrel% HMul.hMul let64 let100)
  let let390 := (binrel% GE.ge let1 let335)
  let let391 := (binrel% HMul.hMul let75 let181)
  let let392 := (Eq let214 let214)
  let let393 := (binrel% HAdd.hAdd let29 let299)
  let let394 := (binrel% HSub.hSub let29 let49)
  let let395 := (Not let215)
  let let396 := (Eq let395 let214)
  let let397 := (Eq let214 let395)
  let let398 := (binrel% HAdd.hAdd let125 (binrel% HAdd.hAdd let247 let126))
  let let399 := (binrel% HMul.hMul let178 let181)
  let let400 := (Eq let326 let326)
  let let401 := (Eq let306 let341)
  let let402 := (binrel% HMul.hMul let64 let58)
  let let403 := (Neg.neg (Rat.ofInt 2058))
  let let404 := (binrel% GE.ge let1 let403)
  let let405 := (binrel% HAdd.hAdd let219 (binrel% HAdd.hAdd let59 let217))
  let let406 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let371 let365))
  let let407 := (binrel% GE.ge let197 let406)
  let let408 := (Not let407)
  let let409 := (binrel% LT.lt let197 let406)
  let let410 := (binrel% LE.le let1 let354)
  let let411 := (binrel% GT.gt let63 let40)
  let let412 := (binrel% HMul.hMul let75 let119)
  let let413 := (binrel% LE.le y let72)
  let let414 := (binrel% LT.lt y let62)
  let let415 := (Eq let239 let239)
  let let416 := (Not let413)
  let let417 := (binrel% GT.gt y let72)
  let let418 := (Eq let417 let416)
  let let419 := (binrel% LT.lt let8 let40)
  let let420 := (Neg.neg (Rat.ofInt 2439))
  let let421 := (binrel% GE.ge let1 let420)
  let let422 := (binrel% HAdd.hAdd let78 (binrel% HAdd.hAdd let91 let76))
  let let423 := (binrel% HAdd.hAdd let219 (binrel% HAdd.hAdd let64 let1))
  let let424 := (Eq let284 let284)
  let let425 := (binrel% HMul.hMul let59 x)
  let let426 := (binrel% HMul.hMul let64 let33)
  let let427 := (binrel% HMul.hMul let247 let72)
  let let428 := (binrel% HAdd.hAdd let169 (binrel% HAdd.hAdd let339 let325))
  let let429 := (binrel% GE.ge let174 let428)
  let let430 := (Not let429)
  let let431 := (binrel% LT.lt let174 let428)
  let let432 := (binrel% GT.gt let73 let40)
  let let433 := (binrel% GT.gt let75 let40)
  let let434 := (Eq let312 let312)
  let let435 := (binrel% LE.le let1 let178)
  let let436 := (binrel% LT.lt x let58)
  let let437 := (binrel% HMul.hMul let64 let40)
  let let438 := (binrel% HAdd.hAdd let146 (binrel% HAdd.hAdd let143 let144))
  let let439 := (binrel% LT.lt x let72)
  let let440 := (binrel% LT.lt let166 let40)
  let let441 := (binrel% LE.le let13 let224)
  let let442 := (binrel% LT.lt let64 let40)
  let let443 := (binrel% LE.le let72 let13)
  let let444 := (Eq let149 let149)
  let let445 := (binrel% LE.le let269 let224)
  let let446 := (binrel% LE.le let72 let269)
  let let447 := (binrel% LE.le let394 let257)
  let let448 := (binrel% LE.le let40 let394)
  let let449 := (And let448 (And let447 (And let446 let445)))
  let let450 := (And let320 (And let236 (And let265 let211)))
  let let451 := (Or let266 (Or let326 let235))
  let let452 := (Or let266 (Or let328 let237))
  let let453 := (Eq Or Or)
  let let454 := (Eq let266 let266)
  let let455 := (Or let237 False)
  let let456 := (binrel% HAdd.hAdd let353 (binrel% HAdd.hAdd let277 let234))
  let let457 := (binrel% HAdd.hAdd let228 (binrel% HAdd.hAdd let322 let311))
  let let458 := (binrel% LE.le let457 let456)
  let let459 := (binrel% LE.le let311 let234)
  let let460 := (And let369 let265)
  let let461 := (binrel% LE.le let322 let277)
  let let462 := (binrel% LE.le x let203)
  let let463 := (And let370 let462)
  let let464 := (binrel% LE.le let228 let353)
  let let465 := (And let372 let258)
  let let466 := (Eq let236 let305)
  let let467 := (Or let327 (Or let191 let210))
  let let468 := (Or let327 (Or let278 let212))
  let let469 := (Or let212 False)
  let let470 := (Not let382)
  let let471 := (Eq let210 let470)
  let let472 := (Or let470 False)
  let let473 := (binrel% LE.le let171 let202)
  let let474 := (And let440 let326)
  let let475 := (binrel% LE.le let172 let204)
  let let476 := (binrel% LE.le y let203)
  let let477 := (And let411 let476)
  let let478 := (Eq let192 let193)
  let let479 := (binrel% LT.lt let173 let169)
  let let480 := (And let372 let382)
  let let481 := (Implies let480 let479)
  let let482 := (Eq let211 let382)
  let let483 := (Or let266 let192)
  let let484 := (Or let182 let483)
  let let485 := (Or let184 let483)
  let let486 := (Or let192 False)
  let let487 := (binrel% HAdd.hAdd let334 (binrel% HAdd.hAdd let427 let338))
  let let488 := (binrel% HAdd.hAdd let281 (binrel% HAdd.hAdd let349 let121))
  let let489 := (binrel% LE.le let488 let487)
  let let490 := (binrel% LE.le let121 let338)
  let let491 := (binrel% LE.le x let190)
  let let492 := (And let433 let491)
  let let493 := (binrel% LE.le let349 let427)
  let let494 := (And let380 let265)
  let let495 := (Implies let494 let493)
  let let496 := (binrel% LE.le let281 let334)
  let let497 := (And let300 let191)
  let let498 := (Or let377 (Or let183 let210))
  let let499 := (Or let383 (Or let183 let212))
  let let500 := (binrel% LE.le let172 let194)
  let let501 := (binrel% LE.le y let190)
  let let502 := (And let411 let501)
  let let503 := (Eq let378 let379)
  let let504 := (binrel% LE.le let171 let195)
  let let505 := (And let440 let182)
  let let506 := (Or let266 let378)
  let let507 := (Or let214 let506)
  let let508 := (Or let395 let506)
  let let509 := (Or let378 False)
  let let510 := (binrel% HAdd.hAdd let399 (binrel% HAdd.hAdd let427 let391))
  let let511 := (binrel% LE.le let488 let510)
  let let512 := (binrel% LE.le let121 let391)
  let let513 := (binrel% LE.le x let181)
  let let514 := (And let433 let513)
  let let515 := (binrel% LE.le let281 let399)
  let let516 := (And let300 let377)
  let let517 := (Or let306 (Or let215 let210))
  let let518 := (Or let341 (Or let215 let212))
  let let519 := (binrel% LE.le let172 let365)
  let let520 := (binrel% LE.le y let181)
  let let521 := (And let411 let520)
  let let522 := (binrel% LE.le let171 let371)
  let let523 := (And let440 let214)
  let let524 := (Or let266 (Or let290 let307))
  let let525 := (Or let266 (Or let292 let307))
  let let526 := (binrel% HAdd.hAdd let319 (binrel% HAdd.hAdd let427 let412))
  let let527 := (binrel% LE.le let488 let526)
  let let528 := (binrel% LE.le let121 let412)
  let let529 := (binrel% LE.le x let119)
  let let530 := (And let433 let529)
  let let531 := (binrel% LE.le let281 let319)
  let let532 := (And let300 let306)
  let let533 := (Or let291 (Or let239 let210))
  let let534 := (Or let291 (Or let366 let212))
  let let535 := (binrel% LE.le let171 let325)
  let let536 := (And let440 let290)
  let let537 := (binrel% LE.le let172 let339)
  let let538 := (binrel% LE.le y let119)
  let let539 := (And let411 let538)
  let let540 := (Or let240 let266)
  let let541 := (Or let312 let540)
  let let542 := (Or let314 let540)
  let let543 := (Or let266 False)
  let let544 := (Eq let266 let267)
  let let545 := (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let437 let374))
  let let546 := (binrel% HAdd.hAdd let289 (binrel% HAdd.hAdd let293 let425))
  let let547 := (binrel% LE.le let546 let545)
  let let548 := (binrel% LE.le let425 let374)
  let let549 := (binrel% LE.le x let40)
  let let550 := (And let201 let549)
  let let551 := (binrel% LE.le let293 let437)
  let let552 := (And let442 let239)
  let let553 := (binrel% LE.le let289 let179)
  let let554 := (And let300 let265)
  let let555 := (Implies let554 let553)
  let let556 := (Or let313 (Or let210 let149))
  let let557 := (Or let313 (Or let212 let186))
  let let558 := (binrel% LE.le let82 let324)
  let let559 := (And let272 let312)
  let let560 := (binrel% LT.lt let81 let74)
  let let561 := (And let432 let382)
  let let562 := (Implies let561 let560)
  let let563 := (binrel% LE.le let83 let343)
  let let564 := (And let372 let413)
  let let565 := (Or let150 let266)
  let let566 := (Or let136 let565)
  let let567 := (Or let138 let565)
  let let568 := (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let389 let133))
  let let569 := (binrel% LE.le let546 let568)
  let let570 := (binrel% LE.le let425 let133)
  let let571 := (binrel% LE.le x let72)
  let let572 := (And let201 let571)
  let let573 := (binrel% LE.le let293 let389)
  let let574 := (And let442 let149)
  let let575 := (Or let210 (Or let137 let110))
  let let576 := (Or let212 (Or let137 let274))
  let let577 := (binrel% LE.le let82 let113)
  let let578 := (And let272 let136)
  let let579 := (binrel% LE.le let83 let114)
  let let580 := (And let372 let129)
  let let581 := (Or let111 (Or let104 let266))
  let let582 := (Or let111 (Or let106 let266))
  let let583 := (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let101 let402))
  let let584 := (binrel% HAdd.hAdd let289 (binrel% HAdd.hAdd let425 let293))
  let let585 := (binrel% LE.le let584 let583)
  let let586 := (binrel% LE.le let293 let402)
  let let587 := (And let442 let110)
  let let588 := (binrel% LE.le let425 let101)
  let let589 := (binrel% LE.le x let100)
  let let590 := (And let201 let589)
  let let591 := (Or let210 (Or let105 let284))
  let let592 := (Or let212 (Or let105 let286))
  let let593 := (binrel% LE.le let82 let77)
  let let594 := (And let272 let104)
  let let595 := (binrel% LE.le let83 let79)
  let let596 := (And let372 let95)
  let let597 := (Or let285 (Or let69 let266))
  let let598 := (Or let285 (Or let161 let266))
  let let599 := (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let60 let65))
  let let600 := (binrel% LE.le let584 let599)
  let let601 := (binrel% LE.le let293 let65)
  let let602 := (And let442 let284)
  let let603 := (binrel% LE.le let425 let60)
  let let604 := (binrel% LE.le x let58)
  let let605 := (And let201 let604)
  let let606 := (Or let160 (Or let43 let235))
  let let607 := (Or let160 (Or let53 let237))
  let let608 := (Not let305)
  let let609 := (binrel% LE.le let48 let222)
  let let610 := (And let376 let69)
  let let611 := (binrel% LE.le let227 let223)
  let let612 := (binrel% LE.le y let62)
  let let613 := (And let42 let612)
  let let614 := (binrel% LT.lt let228 let225)
  let let615 := (And let372 let305)
  let let616 := (Or let44 let266)
  let let617 := (Or let34 let616)
  let let618 := (Or let36 let616)
  let let619 := (binrel% HAdd.hAdd let179 (binrel% HAdd.hAdd let426 let337))
  let let620 := (binrel% LE.le let546 let619)
  let let621 := (binrel% LE.le let425 let337)
  let let622 := (binrel% LE.le x let62)
  let let623 := (And let201 let622)
  let let624 := (binrel% LE.le let293 let426)
  let let625 := (And let442 let43)
  let let626 := (Or let35 (Or let20 let210))
  let let627 := (Or let35 (Or let23 let212))
  let let628 := (binrel% LE.le let171 let167)
  let let629 := (And let440 let34)
  let let630 := (binrel% LE.le let172 let168)
  let let631 := (binrel% LE.le y let33)
  let let632 := (And let411 let631)
  let let633 := (Not let320)
  let let634 := (Or let633 (Or let21 let210))
  let let635 := (Or let633 (Or let21 let212))
  let let636 := (binrel% LE.le let32 let180)
  let let637 := (And let68 let320)
  let let638 := (binrel% LE.le let9 let255)
  let let639 := (And let419 let20)
fun lean_r0 : (Eq let15 let1) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let18 True) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let25 let24) => -- THEORY_REWRITE_BOOL
fun lean_r4 : let25 => -- THEORY_REWRITE_BOOL
fun lean_r5 : (Eq let26 True) => -- THEORY_REWRITE_BOOL
fun lean_r6 : (Eq let32 let6) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let38 let37) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let39 True) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let42 True) => -- EVALUATE
fun lean_r10 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let48 let46) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let52 let1) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let55 let54) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let56 True) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let60 let57) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let65 let61) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let67 False) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let68 True) => -- EVALUATE
fun lean_r19 : (Eq let70 True) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let87 let86) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let77 let88) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let93 let90) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let94 True) => -- THEORY_REWRITE_ARITH
fun lean_r24 : let98 => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let101 let99) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let103 False) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let108 let107) => -- THEORY_REWRITE_BOOL
fun lean_r28 : let108 => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let109 True) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let112 let111) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let118 let117) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let124 let1) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let114 let125) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let113 let126) => -- THEORY_REWRITE_ARITH
fun lean_r35 : let38 => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let128 True) => -- THEORY_REWRITE_ARITH
fun lean_r37 : let132 => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let133 let59) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let135 False) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let140 let139) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let142 True) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let147 let1) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let148 True) => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let151 let150) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let154 let1) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let159 let155) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let163 let162) => -- THEORY_REWRITE_BOOL
fun lean_r48 : (Eq let165 False) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let177 let176) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let179 let178) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let180 let1) => -- THEORY_REWRITE_ARITH
fun lean_r52 : let185 => -- THEORY_REWRITE_BOOL
fun lean_r53 : (Eq let188 let187) => -- THEORY_REWRITE_BOOL
fun lean_r54 : (Eq let189 let11) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let193 let192) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let200 let199) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let201 True) => -- EVALUATE
fun lean_r58 : (Eq let208 let207) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let209 let1) => -- THEORY_REWRITE_ARITH
fun lean_r60 : let213 => -- THEORY_REWRITE_BOOL
fun lean_r61 : (Eq let216 let215) => -- THEORY_REWRITE_ARITH
fun lean_r62 : (Eq let218 let134) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let169 let219) => -- THEORY_REWRITE_ARITH
fun lean_r64 : (Eq let221 let220) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let232 let231) => -- THEORY_REWRITE_ARITH
fun lean_r66 : (Eq let233 True) => -- THEORY_REWRITE_BOOL
fun lean_r67 : (Eq let234 let156) => -- THEORY_REWRITE_ARITH
fun lean_r68 : let238 => -- THEORY_REWRITE_BOOL
fun lean_r69 : (Eq let81 let122) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq let241 let240) => -- THEORY_REWRITE_ARITH
fun lean_r71 : (Eq let246 let242) => -- THEORY_REWRITE_ARITH
fun lean_r72 : (Eq let248 let164) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let223 let249) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let250 let137) => -- THEORY_REWRITE_ARITH
fun lean_r75 : (Eq let172 let251) => -- THEORY_REWRITE_ARITH
fun lean_r76 : (Eq let252 let35) => -- THEORY_REWRITE_ARITH
fun lean_r77 : (Eq let213 let253) => -- THEORY_REWRITE_BOOL
fun lean_r78 : (Eq let255 let254) => -- THEORY_REWRITE_ARITH
fun lean_r79 : (Eq let185 let256) => -- THEORY_REWRITE_BOOL
fun lean_r80 : let261 => -- THEORY_REWRITE_ARITH
fun lean_r81 : let55 => -- THEORY_REWRITE_BOOL
fun lean_r82 : (Eq let264 let102) => -- THEORY_REWRITE_ARITH
fun lean_r83 : (Eq let267 let266) => -- THEORY_REWRITE_ARITH
fun lean_r84 : (Eq let269 let268) => -- THEORY_REWRITE_ARITH
fun lean_r85 : (Eq let270 False) => -- THEORY_REWRITE_BOOL
fun lean_r86 : (Eq let271 let160) => -- THEORY_REWRITE_ARITH
fun lean_r87 : (Eq let272 True) => -- EVALUATE
fun lean_r88 : (Eq let238 let273) => -- THEORY_REWRITE_BOOL
fun lean_r89 : let275 => -- THEORY_REWRITE_BOOL
fun lean_r90 : (Eq let277 let157) => -- THEORY_REWRITE_ARITH
fun lean_r91 : (Eq let280 let279) => -- THEORY_REWRITE_BOOL
fun lean_r92 : (Eq let281 let153) => -- THEORY_REWRITE_ARITH
fun lean_r93 : (Eq let222 let282) => -- THEORY_REWRITE_ARITH
fun lean_r94 : (Eq let171 let283) => -- THEORY_REWRITE_ARITH
fun lean_r95 : (Eq let288 let287) => -- THEORY_REWRITE_BOOL
fun lean_r96 : (Eq let289 let146) => -- THEORY_REWRITE_ARITH
fun lean_r97 : (Eq let292 let290) => -- THEORY_REWRITE_BOOL
fun lean_r98 : let288 => -- THEORY_REWRITE_BOOL
fun lean_r99 : (Eq let293 let143) => -- THEORY_REWRITE_ARITH
fun lean_r100 : (Eq let296 let294) => -- THEORY_REWRITE_ARITH
fun lean_r101 : (Eq let297 let1) => -- THEORY_REWRITE_ARITH
fun lean_r102 : (Eq let83 let123) => -- THEORY_REWRITE_ARITH
fun lean_r103 : (Eq let298 True) => -- THEORY_REWRITE_BOOL
fun lean_r104 : (Eq let299 let28) => -- THEORY_REWRITE_ARITH
fun lean_r105 : (Eq let300 True) => -- EVALUATE
fun lean_r106 : (Eq let301 True) => -- THEORY_REWRITE_ARITH
fun lean_r107 : (Eq let204 let61) => -- THEORY_REWRITE_ARITH
fun lean_r108 : (Eq let302 False) => -- THEORY_REWRITE_ARITH
fun lean_r109 : (Eq let304 True) => -- THEORY_REWRITE_ARITH
fun lean_r110 : (Eq let305 let236) => -- THEORY_REWRITE_ARITH
fun lean_r111 : (Eq let308 let307) => -- THEORY_REWRITE_ARITH
fun lean_r112 : (Eq let309 let17) => -- THEORY_REWRITE_ARITH
fun lean_r113 : (Eq let79 let92) => -- THEORY_REWRITE_ARITH
fun lean_r114 : (Eq let311 let310) => -- THEORY_REWRITE_ARITH
fun lean_r115 : (Eq let316 let315) => -- THEORY_REWRITE_BOOL
fun lean_r116 : (Eq let317 let66) => -- THEORY_REWRITE_ARITH
fun lean_r117 : (Eq let318 True) => -- THEORY_REWRITE_BOOL
fun lean_r118 : (Eq let319 let78) => -- THEORY_REWRITE_ARITH
fun lean_r119 : (Eq let321 let320) => -- THEORY_REWRITE_ARITH
fun lean_r120 : (Eq let323 let1) => -- THEORY_REWRITE_ARITH
fun lean_r121 : (Eq let129 let111) => -- THEORY_REWRITE_ARITH
fun lean_r122 : (Eq let258 let236) => -- THEORY_REWRITE_ARITH
fun lean_r123 : (Eq let324 let76) => -- THEORY_REWRITE_ARITH
fun lean_r124 : (Eq let325 let1) => -- THEORY_REWRITE_ARITH
fun lean_r125 : let329 => -- THEORY_REWRITE_BOOL
fun lean_r126 : (Eq let330 True) => -- THEORY_REWRITE_BOOL
fun lean_r127 : (Eq let331 True) => -- THEORY_REWRITE_ARITH
fun lean_r128 : (Eq let202 let57) => -- THEORY_REWRITE_ARITH
fun lean_r129 : (Eq let333 False) => -- THEORY_REWRITE_ARITH
fun lean_r130 : (Eq let334 let92) => -- THEORY_REWRITE_ARITH
fun lean_r131 : (Eq let336 let335) => -- THEORY_REWRITE_ARITH
fun lean_r132 : (Eq let337 let243) => -- THEORY_REWRITE_ARITH
fun lean_r133 : (Eq let74 let91) => -- THEORY_REWRITE_ARITH
fun lean_r134 : (Eq let338 let88) => -- THEORY_REWRITE_ARITH
fun lean_r135 : (Eq let339 let64) => -- THEORY_REWRITE_ARITH
fun lean_r136 : (Eq let329 let340) => -- THEORY_REWRITE_BOOL
fun lean_r137 : let342 => -- THEORY_REWRITE_BOOL
fun lean_r138 : (Eq let348 let347) => -- THEORY_REWRITE_ARITH
fun lean_r139 : (Eq let349 let152) => -- THEORY_REWRITE_ARITH
fun lean_r140 : (Eq let350 True) => -- THEORY_REWRITE_BOOL
fun lean_r141 : let280 => -- THEORY_REWRITE_BOOL
fun lean_r142 : (Eq let351 let1) => -- THEORY_REWRITE_ARITH
fun lean_r143 : (Eq let275 let352) => -- THEORY_REWRITE_BOOL
fun lean_r144 : (Eq let353 let158) => -- THEORY_REWRITE_ARITH
fun lean_r145 : (Eq let227 let50) => -- THEORY_REWRITE_ARITH
fun lean_r146 : (Eq let355 let354) => -- THEORY_REWRITE_ARITH
fun lean_r147 : (Eq let356 False) => -- THEORY_REWRITE_ARITH
fun lean_r148 : (Eq let357 True) => -- THEORY_REWRITE_BOOL
fun lean_r149 : (Eq let228 let51) => -- THEORY_REWRITE_ARITH
fun lean_r150 : let188 => -- THEORY_REWRITE_BOOL
fun lean_r151 : (Eq let362 let361) => -- THEORY_REWRITE_ARITH
fun lean_r152 : (Eq let363 let127) => -- THEORY_REWRITE_ARITH
fun lean_r153 : (Eq let364 let327) => -- THEORY_REWRITE_ARITH
fun lean_r154 : (Eq let365 let217) => -- THEORY_REWRITE_ARITH
fun lean_r155 : (Eq let368 let367) => -- THEORY_REWRITE_BOOL
fun lean_r156 : (Eq let369 True) => -- EVALUATE
fun lean_r157 : (Eq let370 True) => -- EVALUATE
fun lean_r158 : (Eq let371 let59) => -- THEORY_REWRITE_ARITH
fun lean_r159 : let163 => -- THEORY_REWRITE_BOOL
fun lean_r160 : (Eq let372 True) => -- EVALUATE
fun lean_r161 : (Eq let167 let373) => -- THEORY_REWRITE_ARITH
fun lean_r162 : (Eq let374 let1) => -- THEORY_REWRITE_ARITH
fun lean_r163 : (Eq let375 let183) => -- THEORY_REWRITE_ARITH
fun lean_r164 : (Eq let376 True) => -- EVALUATE
fun lean_r165 : (Eq let379 let378) => -- THEORY_REWRITE_ARITH
fun lean_r166 : (Eq let380 True) => -- EVALUATE
fun lean_r167 : (Eq let381 let291) => -- THEORY_REWRITE_ARITH
fun lean_r168 : (Eq let382 let211) => -- THEORY_REWRITE_ARITH
fun lean_r169 : let316 => -- THEORY_REWRITE_BOOL
fun lean_r170 : let384 => -- THEORY_REWRITE_BOOL
fun lean_r171 : (Eq let384 let385) => -- THEORY_REWRITE_BOOL
fun lean_r172 : (Eq let386 let141) => -- THEORY_REWRITE_ARITH
fun lean_r173 : (Eq let387 True) => -- THEORY_REWRITE_BOOL
fun lean_r174 : (Eq let388 let178) => -- THEORY_REWRITE_ARITH
fun lean_r175 : (Eq let389 let217) => -- THEORY_REWRITE_ARITH
fun lean_r176 : (Eq let390 True) => -- THEORY_REWRITE_ARITH
fun lean_r177 : (Eq let391 let126) => -- THEORY_REWRITE_ARITH
fun lean_r178 : (Eq let194 let262) => -- THEORY_REWRITE_ARITH
fun lean_r179 : (Eq let95 let285) => -- THEORY_REWRITE_ARITH
fun lean_r180 : (Eq let195 let99) => -- THEORY_REWRITE_ARITH
fun lean_r181 : (Eq let392 True) => -- THEORY_REWRITE_BOOL
fun lean_r182 : (Eq let394 let393) => -- THEORY_REWRITE_ARITH
fun lean_r183 : let396 => -- THEORY_REWRITE_BOOL
fun lean_r184 : (Eq let396 let397) => -- THEORY_REWRITE_BOOL
fun lean_r185 : (Eq let398 let332) => -- THEORY_REWRITE_ARITH
fun lean_r186 : (Eq let399 let125) => -- THEORY_REWRITE_ARITH
fun lean_r187 : (Eq let400 True) => -- THEORY_REWRITE_BOOL
fun lean_r188 : (Eq let342 let401) => -- THEORY_REWRITE_BOOL
fun lean_r189 : (Eq let402 let262) => -- THEORY_REWRITE_ARITH
fun lean_r190 : (Eq let404 True) => -- THEORY_REWRITE_ARITH
fun lean_r191 : (Eq let405 let403) => -- THEORY_REWRITE_ARITH
fun lean_r192 : (Eq let409 let408) => -- THEORY_REWRITE_ARITH
fun lean_r193 : (Eq let410 False) => -- THEORY_REWRITE_ARITH
fun lean_r194 : (Eq let411 True) => -- EVALUATE
fun lean_r195 : (Eq let412 let76) => -- THEORY_REWRITE_ARITH
fun lean_r196 : (Eq let413 let150) => -- THEORY_REWRITE_ARITH
fun lean_r197 : let368 => -- THEORY_REWRITE_BOOL
fun lean_r198 : (Eq let414 let285) => -- THEORY_REWRITE_ARITH
fun lean_r199 : (Eq let415 True) => -- THEORY_REWRITE_BOOL
fun lean_r200 : let418 => -- THEORY_REWRITE_ARITH
fun lean_r201 : (Eq let419 True) => -- EVALUATE
fun lean_r202 : (Eq let421 True) => -- THEORY_REWRITE_ARITH
fun lean_r203 : (Eq let422 let303) => -- THEORY_REWRITE_ARITH
fun lean_r204 : (Eq let423 let420) => -- THEORY_REWRITE_ARITH
fun lean_r205 : (Eq let424 True) => -- THEORY_REWRITE_BOOL
fun lean_r206 : (Eq let425 let144) => -- THEORY_REWRITE_ARITH
fun lean_r207 : (Eq let426 let245) => -- THEORY_REWRITE_ARITH
fun lean_r208 : (Eq let343 let78) => -- THEORY_REWRITE_ARITH
fun lean_r209 : (Eq let427 let247) => -- THEORY_REWRITE_ARITH
fun lean_r210 : (Eq let431 let430) => -- THEORY_REWRITE_ARITH
fun lean_r211 : (Eq let432 True) => -- EVALUATE
fun lean_r212 : (Eq let433 True) => -- EVALUATE
fun lean_r213 : (Eq let434 True) => -- THEORY_REWRITE_BOOL
fun lean_r214 : let140 => -- THEORY_REWRITE_BOOL
fun lean_r215 : (Eq let435 False) => -- THEORY_REWRITE_ARITH
fun lean_r216 : (Eq let168 let244) => -- THEORY_REWRITE_ARITH
fun lean_r217 : (Eq let436 let105) => -- THEORY_REWRITE_ARITH
fun lean_r218 : (Eq let437 let1) => -- THEORY_REWRITE_ARITH
fun lean_r219 : (Eq let438 let1) => -- THEORY_REWRITE_ARITH
fun lean_r220 : (Eq let225 let295) => -- THEORY_REWRITE_ARITH
fun lean_r221 : (Eq let173 let14) => -- THEORY_REWRITE_ARITH
fun lean_r222 : (Eq let439 let313) => -- THEORY_REWRITE_ARITH
fun lean_r223 : (Eq let440 True) => -- EVALUATE
fun lean_r224 : (Eq let441 let211) => -- THEORY_REWRITE_ARITH
fun lean_r225 : (Eq let442 True) => -- EVALUATE
fun lean_r226 : (Eq let443 let265) => -- THEORY_REWRITE_ARITH
fun lean_r227 : (Eq let444 True) => -- THEORY_REWRITE_BOOL
fun lean_a228 : let449 => by
have lean_s0 : (Or let633 (Or let21 let469)) :=
  (scope (fun lean_a229 : let320 =>
    (scope (fun lean_a230 : let20 =>
      (scope (fun lean_a231 : let211 =>
        have lean_s0 : let482 := by timed Eq.symm lean_r168
        have lean_s1 : let382 := by timed eqResolve lean_a231 lean_s0
        have lean_s2 : let472 :=
          (scope (fun lean_a232 : let382 =>
            have lean_s2 : let372 := by timed trueElim lean_r160
            have lean_s3 : let480 := by timed And.intro lean_s2 lean_a232
            have lean_s4 : let481 := by arithMulPos [let13, let71, let78], 0
            have lean_s5 : let479 := by timed modusPonens lean_s3 lean_s4
            have lean_s6 : let419 := by timed trueElim lean_r201
            have lean_s7 : let639 := by timed And.intro lean_s6 lean_a230
            have lean_s8 : (Implies let639 let638) := by arithMulNeg [y, let19, let8], 3
            have lean_s9 : let638 := by timed modusPonens lean_s7 lean_s8
            have lean_s10 : let68 := by timed trueElim lean_r18
            have lean_s11 : let637 := by timed And.intro lean_s10 lean_a229
            have lean_s12 : (Implies let637 let636) := by arithMulNeg [let30, let40, let31], 3
            have lean_s13 : let636 := by timed modusPonens lean_s11 lean_s12
            have lean_s14 : let362 := by sumBounds [lean_s5, lean_s9, lean_s13]
            have lean_s15 : (Eq let9 let9) := by timed rfl
            let lean_s16 := by timed congrHAdd lean_s15 lean_r6
            have lean_s17 : (Eq let359 let15) := by timed congrHAdd lean_r221 lean_s16
            have lean_s18 : (Eq let359 let1) := by timed Eq.trans lean_s17 lean_r0
            let lean_s19 := by timed flipCongrArg lean_s18 [GE.ge]
            let lean_s20 := by timed congrHAdd lean_r78 lean_r51
            have lean_s21 : (Eq let358 let309) := by timed congrHAdd lean_r63 lean_s20
            have lean_s22 : (Eq let358 let17) := by timed Eq.trans lean_s21 lean_r112
            have lean_s23 : (Eq let360 let18) := by timed congr lean_s19 lean_s22
            have lean_s24 : (Eq let360 True) := by timed Eq.trans lean_s23 lean_r1
            have lean_s25 : (Eq let361 let270) := by timed flipCongrArg lean_s24 [Not]
            have lean_s26 : (Eq let361 False) := by timed Eq.trans lean_s25 lean_r85
            have lean_s27 : (Eq let362 False) := by timed Eq.trans lean_r151 lean_s26
            show False from by timed eqResolve lean_s14 lean_s27
          ))
        have lean_s3 : let470 := by liftOrNToNeg lean_s2
        have lean_s4 : (Eq let470 let212) := by timed flipCongrArg lean_r168 [Not]
        have lean_s5 : (Eq let470 let210) := by timed Eq.trans lean_s4 lean_r60
        have lean_s6 : let210 := by timed eqResolve lean_s3 lean_s5
        have lean_s7 : let471 := by timed Eq.symm lean_s5
        have lean_s8 : let470 := by timed eqResolve lean_s6 lean_s7
        show False from by timed contradiction lean_s1 lean_s8
  ))))))
have lean_s1 : (Not (And let320 (And let20 let211))) := by liftOrNToNeg lean_s0
have lean_s2 : let635 := by timed flipNotAnd lean_s1 [let320, let20, let211]
have lean_s3 : let453 := by timed rfl
have lean_s4 : (Eq let633 let633) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let21 let21) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : let318 := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [Eq]
have lean_s10 : (Eq let253 let318) := by timed congr lean_s9 lean_r60
have lean_s11 : (Eq let253 True) := by timed Eq.trans lean_s10 lean_r117
have lean_s12 : (Eq let213 True) := by timed Eq.trans lean_r77 lean_s11
have lean_s13 : let213 := by timed trueElim lean_s12
let lean_s14 := by timed congr lean_s7 lean_s13
have lean_s15 : (Eq let635 let634) := by timed congr lean_s5 lean_s14
have lean_s16 : let634 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let210 (Or let633 let21)) := by permutateOr lean_s16, [2, 0, 1], (- 1)
have lean_s18 : (Or let35 (Or let23 let469)) :=
  (scope (fun lean_a233 : let34 =>
    (scope (fun lean_a234 : let21 =>
      (scope (fun lean_a235 : let211 =>
        have lean_s18 : let482 := by timed Eq.symm lean_r168
        have lean_s19 : let382 := by timed eqResolve lean_a235 lean_s18
        have lean_s20 : let472 :=
          (scope (fun lean_a235 : let382 =>
            have lean_s20 : let372 := by timed trueElim lean_r160
            have lean_s21 : let480 := by timed And.intro lean_s20 lean_a235
            have lean_s22 : let481 := by arithMulPos [let13, let71, let78], 0
            have lean_s23 : let479 := by timed modusPonens lean_s21 lean_s22
            have lean_s24 : let411 := by timed trueElim lean_r194
            have lean_s25 : (Eq let21 let22) := by timed Eq.symm lean_r2
            have lean_s26 : let22 := by timed eqResolve lean_a234 lean_s25
            have lean_s27 : let631 := by intTightUb lean_s26
            have lean_s28 : let632 := by timed And.intro lean_s24 lean_s27
            have lean_s29 : (Implies let632 let630) := by arithMulPos [y, let33, let63], 1
            have lean_s30 : let630 := by timed modusPonens lean_s28 lean_s29
            have lean_s31 : let440 := by timed trueElim lean_r223
            have lean_s32 : let629 := by timed And.intro lean_s31 lean_a233
            have lean_s33 : (Implies let629 let628) := by arithMulNeg [x, let33, let166], 3
            have lean_s34 : let628 := by timed modusPonens lean_s32 lean_s33
            have lean_s35 : let177 := by sumBounds [lean_s23, lean_s30, lean_s34]
            let lean_s36 := by timed congrHAdd lean_r75 lean_r94
            have lean_s37 : (Eq let174 let297) := by timed congrHAdd lean_r221 lean_s36
            have lean_s38 : (Eq let174 let1) := by timed Eq.trans lean_s37 lean_r101
            let lean_s39 := by timed flipCongrArg lean_s38 [GE.ge]
            let lean_s40 := by timed congrHAdd lean_r216 lean_r161
            have lean_s41 : (Eq let170 let386) := by timed congrHAdd lean_r63 lean_s40
            have lean_s42 : (Eq let170 let141) := by timed Eq.trans lean_s41 lean_r172
            have lean_s43 : (Eq let175 let142) := by timed congr lean_s39 lean_s42
            have lean_s44 : (Eq let175 True) := by timed Eq.trans lean_s43 lean_r41
            have lean_s45 : (Eq let176 let270) := by timed flipCongrArg lean_s44 [Not]
            have lean_s46 : (Eq let176 False) := by timed Eq.trans lean_s45 lean_r85
            have lean_s47 : (Eq let177 False) := by timed Eq.trans lean_r49 lean_s46
            show False from by timed eqResolve lean_s35 lean_s47
          ))
        have lean_s21 : let470 := by liftOrNToNeg lean_s20
        have lean_s22 : (Eq let470 let212) := by timed flipCongrArg lean_r168 [Not]
        have lean_s23 : (Eq let470 let210) := by timed Eq.trans lean_s22 lean_r60
        have lean_s24 : let210 := by timed eqResolve lean_s21 lean_s23
        have lean_s25 : let471 := by timed Eq.symm lean_s23
        have lean_s26 : let470 := by timed eqResolve lean_s24 lean_s25
        show False from by timed contradiction lean_s19 lean_s26
  ))))))
have lean_s19 : (Not (And let34 (And let21 let211))) := by liftOrNToNeg lean_s18
have lean_s20 : let627 := by timed flipNotAnd lean_s19 [let34, let21, let211]
have lean_s21 : let453 := by timed rfl
have lean_s22 : (Eq let35 let35) := by timed rfl
let lean_s23 := by timed congr lean_s21 lean_s22
have lean_s24 : let26 := by timed rfl
let lean_s25 := by timed flipCongrArg lean_s24 [Eq]
have lean_s26 : (Eq let24 let26) := by timed congr lean_s25 lean_r4
have lean_s27 : (Eq let24 True) := by timed Eq.trans lean_s26 lean_r5
have lean_s28 : (Eq let25 True) := by timed Eq.trans lean_r3 lean_s27
have lean_s29 : let25 := by timed trueElim lean_s28
let lean_s30 := by timed congr lean_s21 lean_s29
let lean_s31 := by timed congr lean_s30 lean_s13
have lean_s32 : (Eq let627 let626) := by timed congr lean_s23 lean_s31
have lean_s33 : let626 := by timed eqResolve lean_s20 lean_s32
have lean_s34 : (Or let210 (Or let20 let35)) := by permutateOr lean_s33, [2, 1, 0], (- 1)
have lean_s35 : (Eq And And) := by timed rfl
have lean_s36 : (Eq let40 let40) := by timed rfl
let lean_s37 := by timed flipCongrArg lean_s36 [LE.le]
have lean_s38 : (Eq let29 let29) := by timed rfl
let lean_s39 := by timed flipCongrArg lean_s38 [HAdd.hAdd]
have lean_s40 : (Eq let393 let30) := by timed congr lean_s39 lean_r104
have lean_s41 : (Eq let394 let30) := by timed Eq.trans lean_r182 lean_s40
have lean_s42 : (Eq let448 let321) := by timed congr lean_s37 lean_s41
have lean_s43 : (Eq let448 let320) := by timed Eq.trans lean_s42 lean_r119
let lean_s44 := by timed congr lean_s35 lean_s43
let lean_s45 := by timed flipCongrArg lean_s41 [LE.le]
have lean_s46 : (Eq let257 let257) := by timed rfl
have lean_s47 : (Eq let447 let258) := by timed congr lean_s45 lean_s46
have lean_s48 : (Eq let447 let236) := by timed Eq.trans lean_s47 lean_r122
let lean_s49 := by timed congr lean_s35 lean_s48
have lean_s50 : (Eq let72 let72) := by timed rfl
let lean_s51 := by timed flipCongrArg lean_s50 [LE.le]
have lean_s52 : (Eq let12 let12) := by timed rfl
let lean_s53 := by timed flipCongrArg lean_s52 [HAdd.hAdd]
have lean_s54 : (Eq let268 let13) := by timed congr lean_s53 lean_r54
have lean_s55 : (Eq let269 let13) := by timed Eq.trans lean_r84 lean_s54
have lean_s56 : (Eq let446 let443) := by timed congr lean_s51 lean_s55
have lean_s57 : (Eq let446 let265) := by timed Eq.trans lean_s56 lean_r226
let lean_s58 := by timed congr lean_s35 lean_s57
let lean_s59 := by timed flipCongrArg lean_s55 [LE.le]
have lean_s60 : (Eq let224 let224) := by timed rfl
have lean_s61 : (Eq let445 let441) := by timed congr lean_s59 lean_s60
have lean_s62 : (Eq let445 let211) := by timed Eq.trans lean_s61 lean_r224
let lean_s63 := by timed congr lean_s58 lean_s62
let lean_s64 := by timed congr lean_s49 lean_s63
have lean_s65 : (Eq let449 let450) := by timed congr lean_s44 lean_s64
have lean_s66 : let450 := by timed eqResolve lean_a228 lean_s65
have lean_s67 : let211 := by andElim lean_s66, 3
let lean_s68 := by R1 lean_s34, lean_s67, let210, [(- 1), 0]
have lean_s69 : (Or let36 (Or let44 let543)) :=
  (scope (fun lean_a235 : let35 =>
    (scope (fun lean_a236 : let43 =>
      (scope (fun lean_a237 : let265 =>
        have lean_s69 : let543 :=
          (scope (fun lean_a238 : let265 =>
            have lean_s69 : let300 := by timed trueElim lean_r105
            have lean_s70 : let554 := by timed And.intro lean_s69 lean_a238
            have lean_s71 : let555 := by arithMulNeg [let13, let72, let178], 3
            have lean_s72 : let553 := by timed modusPonens lean_s70 lean_s71
            have lean_s73 : let442 := by timed trueElim lean_r225
            have lean_s74 : let625 := by timed And.intro lean_s73 lean_a236
            have lean_s75 : (Implies let625 let624) := by arithMulNeg [y, let33, let64], 3
            have lean_s76 : let624 := by timed modusPonens lean_s74 lean_s75
            have lean_s77 : let201 := by timed trueElim lean_r57
            have lean_s78 : (Eq let35 let252) := by timed Eq.symm lean_r76
            have lean_s79 : let252 := by timed eqResolve lean_a235 lean_s78
            have lean_s80 : let622 := by intTightUb lean_s79
            have lean_s81 : let623 := by timed And.intro lean_s77 lean_s80
            have lean_s82 : (Implies let623 let621) := by arithMulPos [x, let62, let59], 1
            have lean_s83 : let621 := by timed modusPonens lean_s81 lean_s82
            have lean_s84 : let620 := by sumBounds [lean_s72, lean_s76, lean_s83]
            let lean_s85 := by timed congrHAdd lean_r99 lean_r206
            have lean_s86 : (Eq let546 let438) := by timed congrHAdd lean_r96 lean_s85
            have lean_s87 : (Eq let546 let1) := by timed Eq.trans lean_s86 lean_r219
            let lean_s88 := by timed flipCongrArg lean_s87 [LE.le]
            let lean_s89 := by timed congrHAdd lean_r207 lean_r132
            have lean_s90 : (Eq let619 let246) := by timed congrHAdd lean_r50 lean_s89
            have lean_s91 : (Eq let619 let242) := by timed Eq.trans lean_s90 lean_r71
            have lean_s92 : (Eq let620 let302) := by timed congr lean_s88 lean_s91
            have lean_s93 : (Eq let620 False) := by timed Eq.trans lean_s92 lean_r108
            show False from by timed eqResolve lean_s84 lean_s93
          ))
        have lean_s70 : let266 := by liftOrNToNeg lean_s69
        have lean_s71 : let544 := by timed Eq.symm lean_r83
        have lean_s72 : let267 := by timed eqResolve lean_s70 lean_s71
        have lean_s73 : let266 := by timed eqResolve lean_s72 lean_r83
        show False from by timed contradiction lean_a237 lean_s73
  ))))))
have lean_s70 : (Not (And let35 (And let43 let265))) := by liftOrNToNeg lean_s69
have lean_s71 : let618 := by timed flipNotAnd lean_s70 [let35, let43, let265]
have lean_s72 : let453 := by timed rfl
have lean_s73 : let39 := by timed rfl
let lean_s74 := by timed flipCongrArg lean_s73 [Eq]
have lean_s75 : (Eq let37 let39) := by timed congr lean_s74 lean_r35
have lean_s76 : (Eq let37 True) := by timed Eq.trans lean_s75 lean_r8
have lean_s77 : (Eq let38 True) := by timed Eq.trans lean_r7 lean_s76
have lean_s78 : let38 := by timed trueElim lean_s77
let lean_s79 := by timed congr lean_s72 lean_s78
have lean_s80 : (Eq let44 let44) := by timed rfl
let lean_s81 := by timed congr lean_s72 lean_s80
have lean_s82 : let454 := by timed rfl
let lean_s83 := by timed congr lean_s81 lean_s82
have lean_s84 : (Eq let618 let617) := by timed congr lean_s79 lean_s83
have lean_s85 : let617 := by timed eqResolve lean_s71 lean_s84
have lean_s86 : (Or let266 (Or let44 let34)) := by permutateOr lean_s85, [2, 1, 0], (- 1)
have lean_s87 : let265 := by andElim lean_s66, 2
let lean_s88 := by R2 lean_s86, lean_s87, let265, [(- 1), 0]
have lean_s89 : (Or let160 (Or let53 let455)) :=
  (scope (fun lean_a238 : let69 =>
    (scope (fun lean_a239 : let44 =>
      (scope (fun lean_a240 : let236 =>
        have lean_s89 : let466 := by timed Eq.symm lean_r110
        have lean_s90 : let305 := by timed eqResolve lean_a240 lean_s89
        have lean_s91 : (Or let608 False) :=
          (scope (fun lean_a241 : let305 =>
            have lean_s91 : let372 := by timed trueElim lean_r160
            have lean_s92 : let615 := by timed And.intro lean_s91 lean_a241
            have lean_s93 : (Implies let615 let614) := by arithMulPos [let30, let224, let78], 0
            have lean_s94 : let614 := by timed modusPonens lean_s92 lean_s93
            have lean_s95 : let42 := by timed trueElim lean_r9
            have lean_s96 : (Eq let44 let45) := by timed Eq.symm lean_r10
            have lean_s97 : let45 := by timed eqResolve lean_a239 lean_s96
            have lean_s98 : let612 := by intTightUb lean_s97
            have lean_s99 : let613 := by timed And.intro lean_s95 lean_s98
            have lean_s100 : (Implies let613 let611) := by arithMulPos [y, let62, let41], 1
            have lean_s101 : let611 := by timed modusPonens lean_s99 lean_s100
            have lean_s102 : let376 := by timed trueElim lean_r164
            have lean_s103 : let610 := by timed And.intro lean_s102 lean_a238
            have lean_s104 : (Implies let610 let609) := by arithMulNeg [x, let62, let47], 3
            have lean_s105 : let609 := by timed modusPonens lean_s103 lean_s104
            have lean_s106 : let232 := by sumBounds [lean_s94, lean_s101, lean_s105]
            let lean_s107 := by timed congrHAdd lean_r145 lean_r11
            have lean_s108 : (Eq let229 let52) := by timed congrHAdd lean_r149 lean_s107
            have lean_s109 : (Eq let229 let1) := by timed Eq.trans lean_s108 lean_r12
            let lean_s110 := by timed flipCongrArg lean_s109 [GE.ge]
            let lean_s111 := by timed congrHAdd lean_r73 lean_r93
            have lean_s112 : (Eq let226 let296) := by timed congrHAdd lean_r220 lean_s111
            have lean_s113 : (Eq let226 let294) := by timed Eq.trans lean_s112 lean_r100
            have lean_s114 : (Eq let230 let301) := by timed congr lean_s110 lean_s113
            have lean_s115 : (Eq let230 True) := by timed Eq.trans lean_s114 lean_r106
            have lean_s116 : (Eq let231 let270) := by timed flipCongrArg lean_s115 [Not]
            have lean_s117 : (Eq let231 False) := by timed Eq.trans lean_s116 lean_r85
            have lean_s118 : (Eq let232 False) := by timed Eq.trans lean_r65 lean_s117
            show False from by timed eqResolve lean_s106 lean_s118
          ))
        have lean_s92 : let608 := by liftOrNToNeg lean_s91
        have lean_s93 : (Eq let608 let237) := by timed flipCongrArg lean_r110 [Not]
        have lean_s94 : (Eq let608 let235) := by timed Eq.trans lean_s93 lean_r68
        have lean_s95 : let235 := by timed eqResolve lean_s92 lean_s94
        have lean_s96 : (Eq let235 let608) := by timed Eq.symm lean_s94
        have lean_s97 : let608 := by timed eqResolve lean_s95 lean_s96
        show False from by timed contradiction lean_s90 lean_s97
  ))))))
have lean_s90 : (Not (And let69 (And let44 let236))) := by liftOrNToNeg lean_s89
have lean_s91 : let607 := by timed flipNotAnd lean_s90 [let69, let44, let236]
have lean_s92 : let453 := by timed rfl
have lean_s93 : (Eq let160 let160) := by timed rfl
let lean_s94 := by timed congr lean_s92 lean_s93
have lean_s95 : let56 := by timed rfl
let lean_s96 := by timed flipCongrArg lean_s95 [Eq]
have lean_s97 : (Eq let54 let56) := by timed congr lean_s96 lean_r81
have lean_s98 : (Eq let54 True) := by timed Eq.trans lean_s97 lean_r14
have lean_s99 : (Eq let55 True) := by timed Eq.trans lean_r13 lean_s98
have lean_s100 : let55 := by timed trueElim lean_s99
let lean_s101 := by timed congr lean_s92 lean_s100
have lean_s102 : let350 := by timed rfl
let lean_s103 := by timed flipCongrArg lean_s102 [Eq]
have lean_s104 : (Eq let273 let350) := by timed congr lean_s103 lean_r68
have lean_s105 : (Eq let273 True) := by timed Eq.trans lean_s104 lean_r140
have lean_s106 : (Eq let238 True) := by timed Eq.trans lean_r88 lean_s105
have lean_s107 : let238 := by timed trueElim lean_s106
let lean_s108 := by timed congr lean_s101 lean_s107
have lean_s109 : (Eq let607 let606) := by timed congr lean_s94 lean_s108
have lean_s110 : let606 := by timed eqResolve lean_s91 lean_s109
have lean_s111 : (Or let235 (Or let160 let43)) := by permutateOr lean_s110, [2, 0, 1], (- 1)
have lean_s112 : let236 := by andElim lean_s66, 1
let lean_s113 := by R1 lean_s111, lean_s112, let235, [(- 1), 0]
have lean_s114 : (Or let285 (Or let161 let543)) :=
  (scope (fun lean_a242 : let284 =>
    (scope (fun lean_a243 : let160 =>
      (scope (fun lean_a244 : let265 =>
        have lean_s114 : let543 :=
          (scope (fun lean_a244 : let265 =>
            have lean_s114 : let300 := by timed trueElim lean_r105
            have lean_s115 : let554 := by timed And.intro lean_s114 lean_a244
            have lean_s116 : let555 := by arithMulNeg [let13, let72, let178], 3
            have lean_s117 : let553 := by timed modusPonens lean_s115 lean_s116
            have lean_s118 : let201 := by timed trueElim lean_r57
            have lean_s119 : (Eq let160 let271) := by timed Eq.symm lean_r86
            have lean_s120 : let271 := by timed eqResolve lean_a243 lean_s119
            have lean_s121 : let604 := by intTightUb lean_s120
            have lean_s122 : let605 := by timed And.intro lean_s118 lean_s121
            have lean_s123 : (Implies let605 let603) := by arithMulPos [x, let58, let59], 1
            have lean_s124 : let603 := by timed modusPonens lean_s122 lean_s123
            have lean_s125 : let442 := by timed trueElim lean_r225
            have lean_s126 : let602 := by timed And.intro lean_s125 lean_a242
            have lean_s127 : (Implies let602 let601) := by arithMulNeg [y, let62, let64], 3
            have lean_s128 : let601 := by timed modusPonens lean_s126 lean_s127
            have lean_s129 : let600 := by sumBounds [lean_s117, lean_s124, lean_s128]
            let lean_s130 := by timed congrHAdd lean_r206 lean_r99
            have lean_s131 : (Eq let584 let147) := by timed congrHAdd lean_r96 lean_s130
            have lean_s132 : (Eq let584 let1) := by timed Eq.trans lean_s131 lean_r42
            let lean_s133 := by timed flipCongrArg lean_s132 [LE.le]
            let lean_s134 := by timed congrHAdd lean_r15 lean_r16
            have lean_s135 : (Eq let599 let317) := by timed congrHAdd lean_r50 lean_s134
            have lean_s136 : (Eq let599 let66) := by timed Eq.trans lean_s135 lean_r116
            have lean_s137 : (Eq let600 let67) := by timed congr lean_s133 lean_s136
            have lean_s138 : (Eq let600 False) := by timed Eq.trans lean_s137 lean_r17
            show False from by timed eqResolve lean_s129 lean_s138
          ))
        have lean_s115 : let266 := by liftOrNToNeg lean_s114
        have lean_s116 : let544 := by timed Eq.symm lean_r83
        have lean_s117 : let267 := by timed eqResolve lean_s115 lean_s116
        have lean_s118 : let266 := by timed eqResolve lean_s117 lean_r83
        show False from by timed contradiction lean_a244 lean_s118
  ))))))
have lean_s115 : (Not (And let284 (And let160 let265))) := by liftOrNToNeg lean_s114
have lean_s116 : let598 := by timed flipNotAnd lean_s115 [let284, let160, let265]
have lean_s117 : let453 := by timed rfl
have lean_s118 : (Eq let285 let285) := by timed rfl
let lean_s119 := by timed congr lean_s117 lean_s118
have lean_s120 : let70 := by timed rfl
let lean_s121 := by timed flipCongrArg lean_s120 [Eq]
have lean_s122 : (Eq let162 let70) := by timed congr lean_s121 lean_r159
have lean_s123 : (Eq let162 True) := by timed Eq.trans lean_s122 lean_r19
have lean_s124 : (Eq let163 True) := by timed Eq.trans lean_r47 lean_s123
have lean_s125 : let163 := by timed trueElim lean_s124
let lean_s126 := by timed congr lean_s117 lean_s125
let lean_s127 := by timed congr lean_s126 lean_s82
have lean_s128 : (Eq let598 let597) := by timed congr lean_s119 lean_s127
have lean_s129 : let597 := by timed eqResolve lean_s116 lean_s128
have lean_s130 : (Or let266 (Or let69 let285)) := by permutateOr lean_s129, [2, 1, 0], (- 1)
have lean_s131 : (Or let212 (Or let105 (Or let286 False))) :=
  (scope (fun lean_a244 : let211 =>
    (scope (fun lean_a245 : let104 =>
      (scope (fun lean_a246 : let285 =>
        have lean_s131 : (Eq let285 let414) := by timed Eq.symm lean_r198
        have lean_s132 : let414 := by timed eqResolve lean_a246 lean_s131
        have lean_s133 : let95 := by intTightUb lean_s132
        have lean_s134 : (Or let96 False) :=
          (scope (fun lean_a246 : let95 =>
            have lean_s134 : let372 := by timed trueElim lean_r160
            have lean_s135 : let596 := by timed And.intro lean_s134 lean_a246
            have lean_s136 : (Implies let596 let595) := by arithMulPos [y, let58, let78], 1
            have lean_s137 : let595 := by timed modusPonens lean_s135 lean_s136
            have lean_s138 : let272 := by timed trueElim lean_r87
            have lean_s139 : let594 := by timed And.intro lean_s138 lean_a245
            have lean_s140 : (Implies let594 let593) := by arithMulNeg [x, let58, let76], 3
            have lean_s141 : let593 := by timed modusPonens lean_s139 lean_s140
            have lean_s142 : let432 := by timed trueElim lean_r211
            have lean_s143 : let482 := by timed Eq.symm lean_r168
            have lean_s144 : let382 := by timed eqResolve lean_a244 lean_s143
            have lean_s145 : let561 := by timed And.intro lean_s142 lean_s144
            have lean_s146 : let562 := by arithMulPos [let13, let71, let73], 0
            have lean_s147 : let560 := by timed modusPonens lean_s145 lean_s146
            have lean_s148 : let87 := by sumBounds [lean_s137, lean_s141, lean_s147]
            have lean_s149 : (Eq let82 let82) := by timed rfl
            let lean_s150 := by timed congrHAdd lean_s149 lean_r69
            have lean_s151 : (Eq let84 let124) := by timed congrHAdd lean_r102 lean_s150
            have lean_s152 : (Eq let84 let1) := by timed Eq.trans lean_s151 lean_r32
            let lean_s153 := by timed flipCongrArg lean_s152 [GE.ge]
            let lean_s154 := by timed congrHAdd lean_r21 lean_r133
            have lean_s155 : (Eq let80 let93) := by timed congrHAdd lean_r113 lean_s154
            have lean_s156 : (Eq let80 let90) := by timed Eq.trans lean_s155 lean_r22
            have lean_s157 : (Eq let85 let94) := by timed congr lean_s153 lean_s156
            have lean_s158 : (Eq let85 True) := by timed Eq.trans lean_s157 lean_r23
            have lean_s159 : (Eq let86 let270) := by timed flipCongrArg lean_s158 [Not]
            have lean_s160 : (Eq let86 False) := by timed Eq.trans lean_s159 lean_r85
            have lean_s161 : (Eq let87 False) := by timed Eq.trans lean_r20 lean_s160
            show False from by timed eqResolve lean_s148 lean_s161
          ))
        have lean_s135 : let96 := by liftOrNToNeg lean_s134
        have lean_s136 : (Eq let96 let286) := by timed flipCongrArg lean_r179 [Not]
        have lean_s137 : (Eq let96 let284) := by timed Eq.trans lean_s136 lean_r98
        have lean_s138 : (Eq let97 let284) := by timed Eq.trans lean_r24 lean_s137
        have lean_s139 : (Eq let284 let97) := by timed Eq.symm lean_s138
        have lean_s140 : (Eq let96 let97) := by timed Eq.trans lean_s137 lean_s139
        have lean_s141 : let97 := by timed eqResolve lean_s135 lean_s140
        have lean_s142 : (Eq let284 let96) := by timed Eq.symm lean_s137
        have lean_s143 : let98 := by timed Eq.trans lean_s138 lean_s142
        have lean_s144 : let96 := by timed eqResolve lean_s141 lean_s143
        show False from by timed contradiction lean_s133 lean_s144
  ))))))
have lean_s132 : (Not (And let211 (And let104 let285))) := by liftOrNToNeg lean_s131
have lean_s133 : let592 := by timed flipNotAnd lean_s132 [let211, let104, let285]
have lean_s134 : let453 := by timed rfl
let lean_s135 := by timed congr lean_s134 lean_s13
have lean_s136 : (Eq let105 let105) := by timed rfl
let lean_s137 := by timed congr lean_s134 lean_s136
have lean_s138 : let424 := by timed rfl
let lean_s139 := by timed flipCongrArg lean_s138 [Eq]
have lean_s140 : (Eq let287 let424) := by timed congr lean_s139 lean_r98
have lean_s141 : (Eq let287 True) := by timed Eq.trans lean_s140 lean_r205
have lean_s142 : (Eq let288 True) := by timed Eq.trans lean_r95 lean_s141
have lean_s143 : let288 := by timed trueElim lean_s142
let lean_s144 := by timed congr lean_s137 lean_s143
have lean_s145 : (Eq let592 let591) := by timed congr lean_s135 lean_s144
have lean_s146 : let591 := by timed eqResolve lean_s133 lean_s145
have lean_s147 : (Or let111 (Or let106 let543)) :=
  (scope (fun lean_a247 : let110 =>
    (scope (fun lean_a248 : let105 =>
      (scope (fun lean_a249 : let265 =>
        have lean_s147 : let543 :=
          (scope (fun lean_a249 : let265 =>
            have lean_s147 : let300 := by timed trueElim lean_r105
            have lean_s148 : let554 := by timed And.intro lean_s147 lean_a249
            have lean_s149 : let555 := by arithMulNeg [let13, let72, let178], 3
            have lean_s150 : let553 := by timed modusPonens lean_s148 lean_s149
            have lean_s151 : let201 := by timed trueElim lean_r57
            have lean_s152 : (Eq let105 let436) := by timed Eq.symm lean_r217
            have lean_s153 : let436 := by timed eqResolve lean_a248 lean_s152
            have lean_s154 : let589 := by intTightUb lean_s153
            have lean_s155 : let590 := by timed And.intro lean_s151 lean_s154
            have lean_s156 : (Implies let590 let588) := by arithMulPos [x, let100, let59], 1
            have lean_s157 : let588 := by timed modusPonens lean_s155 lean_s156
            have lean_s158 : let442 := by timed trueElim lean_r225
            have lean_s159 : let587 := by timed And.intro lean_s158 lean_a247
            have lean_s160 : (Implies let587 let586) := by arithMulNeg [y, let58, let64], 3
            have lean_s161 : let586 := by timed modusPonens lean_s159 lean_s160
            have lean_s162 : let585 := by sumBounds [lean_s150, lean_s157, lean_s161]
            let lean_s163 := by timed congrHAdd lean_r206 lean_r99
            have lean_s164 : (Eq let584 let147) := by timed congrHAdd lean_r96 lean_s163
            have lean_s165 : (Eq let584 let1) := by timed Eq.trans lean_s164 lean_r42
            let lean_s166 := by timed flipCongrArg lean_s165 [LE.le]
            let lean_s167 := by timed congrHAdd lean_r25 lean_r189
            have lean_s168 : (Eq let583 let264) := by timed congrHAdd lean_r50 lean_s167
            have lean_s169 : (Eq let583 let102) := by timed Eq.trans lean_s168 lean_r82
            have lean_s170 : (Eq let585 let103) := by timed congr lean_s166 lean_s169
            have lean_s171 : (Eq let585 False) := by timed Eq.trans lean_s170 lean_r26
            show False from by timed eqResolve lean_s162 lean_s171
          ))
        have lean_s148 : let266 := by liftOrNToNeg lean_s147
        have lean_s149 : let544 := by timed Eq.symm lean_r83
        have lean_s150 : let267 := by timed eqResolve lean_s148 lean_s149
        have lean_s151 : let266 := by timed eqResolve lean_s150 lean_r83
        show False from by timed contradiction lean_a249 lean_s151
  ))))))
have lean_s148 : (Not (And let110 (And let105 let265))) := by liftOrNToNeg lean_s147
have lean_s149 : let582 := by timed flipNotAnd lean_s148 [let110, let105, let265]
have lean_s150 : let453 := by timed rfl
have lean_s151 : (Eq let111 let111) := by timed rfl
let lean_s152 := by timed congr lean_s150 lean_s151
have lean_s153 : let109 := by timed rfl
let lean_s154 := by timed flipCongrArg lean_s153 [Eq]
have lean_s155 : (Eq let107 let109) := by timed congr lean_s154 lean_r28
have lean_s156 : (Eq let107 True) := by timed Eq.trans lean_s155 lean_r29
have lean_s157 : (Eq let108 True) := by timed Eq.trans lean_r27 lean_s156
have lean_s158 : let108 := by timed trueElim lean_s157
let lean_s159 := by timed congr lean_s150 lean_s158
let lean_s160 := by timed congr lean_s159 lean_s82
have lean_s161 : (Eq let582 let581) := by timed congr lean_s152 lean_s160
have lean_s162 : let581 := by timed eqResolve lean_s149 lean_s161
have lean_s163 : (Or let266 (Or let111 let104)) := by permutateOr lean_s162, [2, 0, 1], (- 1)
have lean_s164 : (Or let212 (Or let137 (Or let274 False))) :=
  (scope (fun lean_a249 : let211 =>
    (scope (fun lean_a250 : let136 =>
      (scope (fun lean_a251 : let111 =>
        have lean_s164 : (Eq let111 let112) := by timed Eq.symm lean_r30
        have lean_s165 : let112 := by timed eqResolve lean_a251 lean_s164
        have lean_s166 : let129 := by intTightUb lean_s165
        have lean_s167 : (Or let130 False) :=
          (scope (fun lean_a251 : let129 =>
            have lean_s167 : let372 := by timed trueElim lean_r160
            have lean_s168 : let580 := by timed And.intro lean_s167 lean_a251
            have lean_s169 : (Implies let580 let579) := by arithMulPos [y, let100, let78], 1
            have lean_s170 : let579 := by timed modusPonens lean_s168 lean_s169
            have lean_s171 : let272 := by timed trueElim lean_r87
            have lean_s172 : let578 := by timed And.intro lean_s171 lean_a250
            have lean_s173 : (Implies let578 let577) := by arithMulNeg [x, let100, let76], 3
            have lean_s174 : let577 := by timed modusPonens lean_s172 lean_s173
            have lean_s175 : let432 := by timed trueElim lean_r211
            have lean_s176 : let482 := by timed Eq.symm lean_r168
            have lean_s177 : let382 := by timed eqResolve lean_a249 lean_s176
            have lean_s178 : let561 := by timed And.intro lean_s175 lean_s177
            have lean_s179 : let562 := by arithMulPos [let13, let71, let73], 0
            have lean_s180 : let560 := by timed modusPonens lean_s178 lean_s179
            have lean_s181 : let118 := by sumBounds [lean_s170, lean_s174, lean_s180]
            have lean_s182 : (Eq let82 let82) := by timed rfl
            let lean_s183 := by timed congrHAdd lean_s182 lean_r69
            have lean_s184 : (Eq let84 let124) := by timed congrHAdd lean_r102 lean_s183
            have lean_s185 : (Eq let84 let1) := by timed Eq.trans lean_s184 lean_r32
            let lean_s186 := by timed flipCongrArg lean_s185 [GE.ge]
            let lean_s187 := by timed congrHAdd lean_r34 lean_r133
            have lean_s188 : (Eq let115 let363) := by timed congrHAdd lean_r33 lean_s187
            have lean_s189 : (Eq let115 let127) := by timed Eq.trans lean_s188 lean_r152
            have lean_s190 : (Eq let116 let128) := by timed congr lean_s186 lean_s189
            have lean_s191 : (Eq let116 True) := by timed Eq.trans lean_s190 lean_r36
            have lean_s192 : (Eq let117 let270) := by timed flipCongrArg lean_s191 [Not]
            have lean_s193 : (Eq let117 False) := by timed Eq.trans lean_s192 lean_r85
            have lean_s194 : (Eq let118 False) := by timed Eq.trans lean_r31 lean_s193
            show False from by timed eqResolve lean_s181 lean_s194
          ))
        have lean_s168 : let130 := by liftOrNToNeg lean_s167
        have lean_s169 : (Eq let130 let274) := by timed flipCongrArg lean_r121 [Not]
        have lean_s170 : (Eq let130 let110) := by timed Eq.trans lean_s169 lean_r89
        have lean_s171 : (Eq let131 let110) := by timed Eq.trans lean_r37 lean_s170
        have lean_s172 : (Eq let110 let131) := by timed Eq.symm lean_s171
        have lean_s173 : (Eq let130 let131) := by timed Eq.trans lean_s170 lean_s172
        have lean_s174 : let131 := by timed eqResolve lean_s168 lean_s173
        have lean_s175 : (Eq let110 let130) := by timed Eq.symm lean_s170
        have lean_s176 : let132 := by timed Eq.trans lean_s171 lean_s175
        have lean_s177 : let130 := by timed eqResolve lean_s174 lean_s176
        show False from by timed contradiction lean_s166 lean_s177
  ))))))
have lean_s165 : (Not (And let211 (And let136 let111))) := by liftOrNToNeg lean_s164
have lean_s166 : let576 := by timed flipNotAnd lean_s165 [let211, let136, let111]
have lean_s167 : let453 := by timed rfl
let lean_s168 := by timed congr lean_s167 lean_s13
have lean_s169 : (Eq let137 let137) := by timed rfl
let lean_s170 := by timed congr lean_s167 lean_s169
have lean_s171 : let233 := by timed rfl
let lean_s172 := by timed flipCongrArg lean_s171 [Eq]
have lean_s173 : (Eq let352 let233) := by timed congr lean_s172 lean_r89
have lean_s174 : (Eq let352 True) := by timed Eq.trans lean_s173 lean_r66
have lean_s175 : (Eq let275 True) := by timed Eq.trans lean_r143 lean_s174
have lean_s176 : let275 := by timed trueElim lean_s175
let lean_s177 := by timed congr lean_s170 lean_s176
have lean_s178 : (Eq let576 let575) := by timed congr lean_s168 lean_s177
have lean_s179 : let575 := by timed eqResolve lean_s166 lean_s178
have lean_s180 : (Or let138 (Or let150 let543)) :=
  (scope (fun lean_a252 : let137 =>
    (scope (fun lean_a253 : let149 =>
      (scope (fun lean_a254 : let265 =>
        have lean_s180 : let543 :=
          (scope (fun lean_a254 : let265 =>
            have lean_s180 : let300 := by timed trueElim lean_r105
            have lean_s181 : let554 := by timed And.intro lean_s180 lean_a254
            have lean_s182 : let555 := by arithMulNeg [let13, let72, let178], 3
            have lean_s183 : let553 := by timed modusPonens lean_s181 lean_s182
            have lean_s184 : let442 := by timed trueElim lean_r225
            have lean_s185 : let574 := by timed And.intro lean_s184 lean_a253
            have lean_s186 : (Implies let574 let573) := by arithMulNeg [y, let100, let64], 3
            have lean_s187 : let573 := by timed modusPonens lean_s185 lean_s186
            have lean_s188 : let201 := by timed trueElim lean_r57
            have lean_s189 : (Eq let137 let250) := by timed Eq.symm lean_r74
            have lean_s190 : let250 := by timed eqResolve lean_a252 lean_s189
            have lean_s191 : let571 := by intTightUb lean_s190
            have lean_s192 : let572 := by timed And.intro lean_s188 lean_s191
            have lean_s193 : (Implies let572 let570) := by arithMulPos [x, let72, let59], 1
            have lean_s194 : let570 := by timed modusPonens lean_s192 lean_s193
            have lean_s195 : let569 := by sumBounds [lean_s183, lean_s187, lean_s194]
            let lean_s196 := by timed congrHAdd lean_r99 lean_r206
            have lean_s197 : (Eq let546 let438) := by timed congrHAdd lean_r96 lean_s196
            have lean_s198 : (Eq let546 let1) := by timed Eq.trans lean_s197 lean_r219
            let lean_s199 := by timed flipCongrArg lean_s198 [LE.le]
            let lean_s200 := by timed congrHAdd lean_r175 lean_r38
            have lean_s201 : (Eq let568 let218) := by timed congrHAdd lean_r50 lean_s200
            have lean_s202 : (Eq let568 let134) := by timed Eq.trans lean_s201 lean_r62
            have lean_s203 : (Eq let569 let135) := by timed congr lean_s199 lean_s202
            have lean_s204 : (Eq let569 False) := by timed Eq.trans lean_s203 lean_r39
            show False from by timed eqResolve lean_s195 lean_s204
          ))
        have lean_s181 : let266 := by liftOrNToNeg lean_s180
        have lean_s182 : let544 := by timed Eq.symm lean_r83
        have lean_s183 : let267 := by timed eqResolve lean_s181 lean_s182
        have lean_s184 : let266 := by timed eqResolve lean_s183 lean_r83
        show False from by timed contradiction lean_a254 lean_s184
  ))))))
have lean_s181 : (Not (And let137 (And let149 let265))) := by liftOrNToNeg lean_s180
have lean_s182 : let567 := by timed flipNotAnd lean_s181 [let137, let149, let265]
have lean_s183 : let453 := by timed rfl
have lean_s184 : let148 := by timed rfl
let lean_s185 := by timed flipCongrArg lean_s184 [Eq]
have lean_s186 : (Eq let139 let148) := by timed congr lean_s185 lean_r214
have lean_s187 : (Eq let139 True) := by timed Eq.trans lean_s186 lean_r43
have lean_s188 : (Eq let140 True) := by timed Eq.trans lean_r40 lean_s187
have lean_s189 : let140 := by timed trueElim lean_s188
let lean_s190 := by timed congr lean_s183 lean_s189
have lean_s191 : (Eq let150 let150) := by timed rfl
let lean_s192 := by timed congr lean_s183 lean_s191
let lean_s193 := by timed congr lean_s192 lean_s82
have lean_s194 : (Eq let567 let566) := by timed congr lean_s190 lean_s193
have lean_s195 : let566 := by timed eqResolve lean_s182 lean_s194
have lean_s196 : (Or let266 (Or let150 let136)) := by permutateOr lean_s195, [2, 1, 0], (- 1)
have lean_s197 : (Or let313 (Or let212 (Or let186 False))) :=
  (scope (fun lean_a254 : let312 =>
    (scope (fun lean_a255 : let211 =>
      (scope (fun lean_a256 : let150 =>
        have lean_s197 : (Eq let150 let151) := by timed Eq.symm lean_r44
        have lean_s198 : let151 := by timed eqResolve lean_a256 lean_s197
        have lean_s199 : let413 := by intTightUb lean_s198
        have lean_s200 : (Or let416 False) :=
          (scope (fun lean_a256 : let413 =>
            have lean_s200 : let372 := by timed trueElim lean_r160
            have lean_s201 : let564 := by timed And.intro lean_s200 lean_a256
            have lean_s202 : (Implies let564 let563) := by arithMulPos [y, let72, let78], 1
            have lean_s203 : let563 := by timed modusPonens lean_s201 lean_s202
            have lean_s204 : let432 := by timed trueElim lean_r211
            have lean_s205 : let482 := by timed Eq.symm lean_r168
            have lean_s206 : let382 := by timed eqResolve lean_a255 lean_s205
            have lean_s207 : let561 := by timed And.intro lean_s204 lean_s206
            have lean_s208 : let562 := by arithMulPos [let13, let71, let73], 0
            have lean_s209 : let560 := by timed modusPonens lean_s207 lean_s208
            have lean_s210 : let272 := by timed trueElim lean_r87
            have lean_s211 : let559 := by timed And.intro lean_s210 lean_a254
            have lean_s212 : (Implies let559 let558) := by arithMulNeg [x, let72, let76], 3
            have lean_s213 : let558 := by timed modusPonens lean_s211 lean_s212
            have lean_s214 : let348 := by sumBounds [lean_s203, lean_s209, lean_s213]
            have lean_s215 : (Eq let82 let82) := by timed rfl
            let lean_s216 := by timed congrHAdd lean_r69 lean_s215
            have lean_s217 : (Eq let345 let209) := by timed congrHAdd lean_r102 lean_s216
            have lean_s218 : (Eq let345 let1) := by timed Eq.trans lean_s217 lean_r59
            let lean_s219 := by timed flipCongrArg lean_s218 [GE.ge]
            let lean_s220 := by timed congrHAdd lean_r133 lean_r123
            have lean_s221 : (Eq let344 let422) := by timed congrHAdd lean_r208 lean_s220
            have lean_s222 : (Eq let344 let303) := by timed Eq.trans lean_s221 lean_r203
            have lean_s223 : (Eq let346 let304) := by timed congr lean_s219 lean_s222
            have lean_s224 : (Eq let346 True) := by timed Eq.trans lean_s223 lean_r109
            have lean_s225 : (Eq let347 let270) := by timed flipCongrArg lean_s224 [Not]
            have lean_s226 : (Eq let347 False) := by timed Eq.trans lean_s225 lean_r85
            have lean_s227 : (Eq let348 False) := by timed Eq.trans lean_r138 lean_s226
            show False from by timed eqResolve lean_s214 lean_s227
          ))
        have lean_s201 : let416 := by liftOrNToNeg lean_s200
        have lean_s202 : (Eq let416 let186) := by timed flipCongrArg lean_r196 [Not]
        have lean_s203 : (Eq let416 let149) := by timed Eq.trans lean_s202 lean_r150
        have lean_s204 : (Eq let417 let149) := by timed Eq.trans lean_r200 lean_s203
        have lean_s205 : (Eq let149 let417) := by timed Eq.symm lean_s204
        have lean_s206 : (Eq let416 let417) := by timed Eq.trans lean_s203 lean_s205
        have lean_s207 : let417 := by timed eqResolve lean_s201 lean_s206
        have lean_s208 : (Eq let149 let416) := by timed Eq.symm lean_s203
        have lean_s209 : let418 := by timed Eq.trans lean_s204 lean_s208
        have lean_s210 : let416 := by timed eqResolve lean_s207 lean_s209
        show False from by timed contradiction lean_s199 lean_s210
  ))))))
have lean_s198 : (Not (And let312 (And let211 let150))) := by liftOrNToNeg lean_s197
have lean_s199 : let557 := by timed flipNotAnd lean_s198 [let312, let211, let150]
have lean_s200 : let453 := by timed rfl
have lean_s201 : (Eq let313 let313) := by timed rfl
let lean_s202 := by timed congr lean_s200 lean_s201
let lean_s203 := by timed congr lean_s200 lean_s13
have lean_s204 : let444 := by timed rfl
let lean_s205 := by timed flipCongrArg lean_s204 [Eq]
have lean_s206 : (Eq let187 let444) := by timed congr lean_s205 lean_r150
have lean_s207 : (Eq let187 True) := by timed Eq.trans lean_s206 lean_r227
have lean_s208 : (Eq let188 True) := by timed Eq.trans lean_r53 lean_s207
have lean_s209 : let188 := by timed trueElim lean_s208
let lean_s210 := by timed congr lean_s203 lean_s209
have lean_s211 : (Eq let557 let556) := by timed congr lean_s202 lean_s210
have lean_s212 : let556 := by timed eqResolve lean_s199 lean_s211
have lean_s213 : (Or let210 (Or let313 let149)) := by permutateOr lean_s212, [1, 0, 2], (- 1)
have lean_s214 : (Or let314 (Or let240 let543)) :=
  (scope (fun lean_a257 : let313 =>
    (scope (fun lean_a258 : let239 =>
      (scope (fun lean_a259 : let265 =>
        have lean_s214 : let543 :=
          (scope (fun lean_a259 : let265 =>
            have lean_s214 : let300 := by timed trueElim lean_r105
            have lean_s215 : let554 := by timed And.intro lean_s214 lean_a259
            have lean_s216 : let555 := by arithMulNeg [let13, let72, let178], 3
            have lean_s217 : let553 := by timed modusPonens lean_s215 lean_s216
            have lean_s218 : let442 := by timed trueElim lean_r225
            have lean_s219 : let552 := by timed And.intro lean_s218 lean_a258
            have lean_s220 : (Implies let552 let551) := by arithMulNeg [y, let40, let64], 3
            have lean_s221 : let551 := by timed modusPonens lean_s219 lean_s220
            have lean_s222 : let201 := by timed trueElim lean_r57
            have lean_s223 : (Eq let313 let439) := by timed Eq.symm lean_r222
            have lean_s224 : let439 := by timed eqResolve lean_a257 lean_s223
            have lean_s225 : let549 := by intTightUb lean_s224
            have lean_s226 : let550 := by timed And.intro lean_s222 lean_s225
            have lean_s227 : (Implies let550 let548) := by arithMulPos [x, let40, let59], 1
            have lean_s228 : let548 := by timed modusPonens lean_s226 lean_s227
            have lean_s229 : let547 := by sumBounds [lean_s217, lean_s221, lean_s228]
            let lean_s230 := by timed congrHAdd lean_r99 lean_r206
            have lean_s231 : (Eq let546 let438) := by timed congrHAdd lean_r96 lean_s230
            have lean_s232 : (Eq let546 let1) := by timed Eq.trans lean_s231 lean_r219
            let lean_s233 := by timed flipCongrArg lean_s232 [LE.le]
            let lean_s234 := by timed congrHAdd lean_r218 lean_r162
            have lean_s235 : (Eq let545 let388) := by timed congrHAdd lean_r50 lean_s234
            have lean_s236 : (Eq let545 let178) := by timed Eq.trans lean_s235 lean_r174
            have lean_s237 : (Eq let547 let435) := by timed congr lean_s233 lean_s236
            have lean_s238 : (Eq let547 False) := by timed Eq.trans lean_s237 lean_r215
            show False from by timed eqResolve lean_s229 lean_s238
          ))
        have lean_s215 : let266 := by liftOrNToNeg lean_s214
        have lean_s216 : let544 := by timed Eq.symm lean_r83
        have lean_s217 : let267 := by timed eqResolve lean_s215 lean_s216
        have lean_s218 : let266 := by timed eqResolve lean_s217 lean_r83
        show False from by timed contradiction lean_a259 lean_s218
  ))))))
have lean_s215 : (Not (And let313 (And let239 let265))) := by liftOrNToNeg lean_s214
have lean_s216 : let542 := by timed flipNotAnd lean_s215 [let313, let239, let265]
have lean_s217 : let453 := by timed rfl
have lean_s218 : let434 := by timed rfl
let lean_s219 := by timed flipCongrArg lean_s218 [Eq]
have lean_s220 : (Eq let315 let434) := by timed congr lean_s219 lean_r169
have lean_s221 : (Eq let315 True) := by timed Eq.trans lean_s220 lean_r213
have lean_s222 : (Eq let316 True) := by timed Eq.trans lean_r115 lean_s221
have lean_s223 : let316 := by timed trueElim lean_s222
let lean_s224 := by timed congr lean_s217 lean_s223
have lean_s225 : (Eq let240 let240) := by timed rfl
let lean_s226 := by timed congr lean_s217 lean_s225
let lean_s227 := by timed congr lean_s226 lean_s82
have lean_s228 : (Eq let542 let541) := by timed congr lean_s224 lean_s227
have lean_s229 : let541 := by timed eqResolve lean_s216 lean_s228
have lean_s230 : (Or let266 (Or let312 let240)) := by permutateOr lean_s229, [2, 0, 1], (- 1)
have lean_s231 : (Or let291 (Or let366 let469)) :=
  (scope (fun lean_a259 : let290 =>
    (scope (fun lean_a260 : let240 =>
      (scope (fun lean_a261 : let211 =>
        have lean_s231 : let482 := by timed Eq.symm lean_r168
        have lean_s232 : let382 := by timed eqResolve lean_a261 lean_s231
        have lean_s233 : let472 :=
          (scope (fun lean_a261 : let382 =>
            have lean_s233 : let372 := by timed trueElim lean_r160
            have lean_s234 : let480 := by timed And.intro lean_s233 lean_a261
            have lean_s235 : let481 := by arithMulPos [let13, let71, let78], 0
            have lean_s236 : let479 := by timed modusPonens lean_s234 lean_s235
            have lean_s237 : let411 := by timed trueElim lean_r194
            have lean_s238 : (Eq let240 let241) := by timed Eq.symm lean_r70
            have lean_s239 : let241 := by timed eqResolve lean_a260 lean_s238
            have lean_s240 : let538 := by intTightUb lean_s239
            have lean_s241 : let539 := by timed And.intro lean_s237 lean_s240
            have lean_s242 : (Implies let539 let537) := by arithMulPos [y, let119, let63], 1
            have lean_s243 : let537 := by timed modusPonens lean_s241 lean_s242
            have lean_s244 : let440 := by timed trueElim lean_r223
            have lean_s245 : let536 := by timed And.intro lean_s244 lean_a259
            have lean_s246 : (Implies let536 let535) := by arithMulNeg [x, let40, let166], 3
            have lean_s247 : let535 := by timed modusPonens lean_s245 lean_s246
            have lean_s248 : let431 := by sumBounds [lean_s236, lean_s243, lean_s247]
            let lean_s249 := by timed congrHAdd lean_r75 lean_r94
            have lean_s250 : (Eq let174 let297) := by timed congrHAdd lean_r221 lean_s249
            have lean_s251 : (Eq let174 let1) := by timed Eq.trans lean_s250 lean_r101
            let lean_s252 := by timed flipCongrArg lean_s251 [GE.ge]
            let lean_s253 := by timed congrHAdd lean_r135 lean_r124
            have lean_s254 : (Eq let428 let423) := by timed congrHAdd lean_r63 lean_s253
            have lean_s255 : (Eq let428 let420) := by timed Eq.trans lean_s254 lean_r204
            have lean_s256 : (Eq let429 let421) := by timed congr lean_s252 lean_s255
            have lean_s257 : (Eq let429 True) := by timed Eq.trans lean_s256 lean_r202
            have lean_s258 : (Eq let430 let270) := by timed flipCongrArg lean_s257 [Not]
            have lean_s259 : (Eq let430 False) := by timed Eq.trans lean_s258 lean_r85
            have lean_s260 : (Eq let431 False) := by timed Eq.trans lean_r210 lean_s259
            show False from by timed eqResolve lean_s248 lean_s260
          ))
        have lean_s234 : let470 := by liftOrNToNeg lean_s233
        have lean_s235 : (Eq let470 let212) := by timed flipCongrArg lean_r168 [Not]
        have lean_s236 : (Eq let470 let210) := by timed Eq.trans lean_s235 lean_r60
        have lean_s237 : let210 := by timed eqResolve lean_s234 lean_s236
        have lean_s238 : let471 := by timed Eq.symm lean_s236
        have lean_s239 : let470 := by timed eqResolve lean_s237 lean_s238
        show False from by timed contradiction lean_s232 lean_s239
  ))))))
have lean_s232 : (Not (And let290 (And let240 let211))) := by liftOrNToNeg lean_s231
have lean_s233 : let534 := by timed flipNotAnd lean_s232 [let290, let240, let211]
have lean_s234 : let453 := by timed rfl
have lean_s235 : (Eq let291 let291) := by timed rfl
let lean_s236 := by timed congr lean_s234 lean_s235
have lean_s237 : let415 := by timed rfl
let lean_s238 := by timed flipCongrArg lean_s237 [Eq]
have lean_s239 : (Eq let367 let415) := by timed congr lean_s238 lean_r197
have lean_s240 : (Eq let367 True) := by timed Eq.trans lean_s239 lean_r199
have lean_s241 : (Eq let368 True) := by timed Eq.trans lean_r155 lean_s240
have lean_s242 : let368 := by timed trueElim lean_s241
let lean_s243 := by timed congr lean_s234 lean_s242
let lean_s244 := by timed congr lean_s243 lean_s13
have lean_s245 : (Eq let534 let533) := by timed congr lean_s236 lean_s244
have lean_s246 : let533 := by timed eqResolve lean_s233 lean_s245
have lean_s247 : (Or let210 (Or let291 let239)) := by permutateOr lean_s246, [2, 0, 1], (- 1)
have lean_s248 : (Or let266 (Or let292 (Or let307 False))) :=
  (scope (fun lean_a261 : let265 =>
    (scope (fun lean_a262 : let291 =>
      (scope (fun lean_a263 : let306 =>
        have lean_s248 : let300 := by timed trueElim lean_r105
        have lean_s249 : let532 := by timed And.intro lean_s248 lean_a263
        have lean_s250 : (Implies let532 let531) := by arithMulNeg [y, let119, let178], 3
        have lean_s251 : let531 := by timed modusPonens lean_s249 lean_s250
        have lean_s252 : let380 := by timed trueElim lean_r166
        have lean_s253 : let494 := by timed And.intro lean_s252 lean_a261
        have lean_s254 : let495 := by arithMulNeg [let13, let72, let247], 3
        have lean_s255 : let493 := by timed modusPonens lean_s253 lean_s254
        have lean_s256 : let433 := by timed trueElim lean_r212
        have lean_s257 : (Eq let291 let381) := by timed Eq.symm lean_r167
        have lean_s258 : let381 := by timed eqResolve lean_a262 lean_s257
        have lean_s259 : let529 := by intTightUb lean_s258
        have lean_s260 : let530 := by timed And.intro lean_s256 lean_s259
        have lean_s261 : (Implies let530 let528) := by arithMulPos [x, let119, let75], 1
        have lean_s262 : let528 := by timed modusPonens lean_s260 lean_s261
        have lean_s263 : let527 := by sumBounds [lean_s251, lean_s255, lean_s262]
        have lean_s264 : (Eq let121 let121) := by timed rfl
        let lean_s265 := by timed congrHAdd lean_r139 lean_s264
        have lean_s266 : (Eq let488 let154) := by timed congrHAdd lean_r92 lean_s265
        have lean_s267 : (Eq let488 let1) := by timed Eq.trans lean_s266 lean_r45
        let lean_s268 := by timed flipCongrArg lean_s267 [LE.le]
        let lean_s269 := by timed congrHAdd lean_r209 lean_r195
        have lean_s270 : (Eq let526 let355) := by timed congrHAdd lean_r118 lean_s269
        have lean_s271 : (Eq let526 let354) := by timed Eq.trans lean_s270 lean_r146
        have lean_s272 : (Eq let527 let410) := by timed congr lean_s268 lean_s271
        have lean_s273 : (Eq let527 False) := by timed Eq.trans lean_s272 lean_r193
        show False from by timed eqResolve lean_s263 lean_s273
  ))))))
have lean_s249 : (Not (And let265 (And let291 let306))) := by liftOrNToNeg lean_s248
have lean_s250 : let525 := by timed flipNotAnd lean_s249 [let265, let291, let306]
have lean_s251 : let453 := by timed rfl
have lean_s252 : let454 := by timed rfl
let lean_s253 := by timed congr lean_s251 lean_s252
let lean_s254 := by timed congr lean_s251 lean_r97
have lean_s255 : (Eq let307 let307) := by timed rfl
let lean_s256 := by timed congr lean_s254 lean_s255
have lean_s257 : (Eq let525 let524) := by timed congr lean_s253 lean_s256
have lean_s258 : let524 := by timed eqResolve lean_s250 lean_s257
let lean_s259 := by R2 lean_s258, lean_s87, let265, [(- 1), 0]
have lean_s260 : (Or let341 (Or let215 let469)) :=
  (scope (fun lean_a263 : let307 =>
    (scope (fun lean_a264 : let214 =>
      (scope (fun lean_a265 : let211 =>
        have lean_s260 : let482 := by timed Eq.symm lean_r168
        have lean_s261 : let382 := by timed eqResolve lean_a265 lean_s260
        have lean_s262 : let472 :=
          (scope (fun lean_a265 : let382 =>
            have lean_s262 : let372 := by timed trueElim lean_r160
            have lean_s263 : let480 := by timed And.intro lean_s262 lean_a265
            have lean_s264 : let481 := by arithMulPos [let13, let71, let78], 0
            have lean_s265 : let479 := by timed modusPonens lean_s263 lean_s264
            have lean_s266 : let440 := by timed trueElim lean_r223
            have lean_s267 : let523 := by timed And.intro lean_s266 lean_a264
            have lean_s268 : (Implies let523 let522) := by arithMulNeg [x, let119, let166], 3
            have lean_s269 : let522 := by timed modusPonens lean_s267 lean_s268
            have lean_s270 : let411 := by timed trueElim lean_r194
            have lean_s271 : (Eq let307 let308) := by timed Eq.symm lean_r111
            have lean_s272 : let308 := by timed eqResolve lean_a263 lean_s271
            have lean_s273 : let520 := by intTightUb lean_s272
            have lean_s274 : let521 := by timed And.intro lean_s270 lean_s273
            have lean_s275 : (Implies let521 let519) := by arithMulPos [y, let181, let63], 1
            have lean_s276 : let519 := by timed modusPonens lean_s274 lean_s275
            have lean_s277 : let409 := by sumBounds [lean_s265, lean_s269, lean_s276]
            let lean_s278 := by timed congrHAdd lean_r94 lean_r75
            have lean_s279 : (Eq let197 let351) := by timed congrHAdd lean_r221 lean_s278
            have lean_s280 : (Eq let197 let1) := by timed Eq.trans lean_s279 lean_r142
            let lean_s281 := by timed flipCongrArg lean_s280 [GE.ge]
            let lean_s282 := by timed congrHAdd lean_r158 lean_r154
            have lean_s283 : (Eq let406 let405) := by timed congrHAdd lean_r63 lean_s282
            have lean_s284 : (Eq let406 let403) := by timed Eq.trans lean_s283 lean_r191
            have lean_s285 : (Eq let407 let404) := by timed congr lean_s281 lean_s284
            have lean_s286 : (Eq let407 True) := by timed Eq.trans lean_s285 lean_r190
            have lean_s287 : (Eq let408 let270) := by timed flipCongrArg lean_s286 [Not]
            have lean_s288 : (Eq let408 False) := by timed Eq.trans lean_s287 lean_r85
            have lean_s289 : (Eq let409 False) := by timed Eq.trans lean_r192 lean_s288
            show False from by timed eqResolve lean_s277 lean_s289
          ))
        have lean_s263 : let470 := by liftOrNToNeg lean_s262
        have lean_s264 : (Eq let470 let212) := by timed flipCongrArg lean_r168 [Not]
        have lean_s265 : (Eq let470 let210) := by timed Eq.trans lean_s264 lean_r60
        have lean_s266 : let210 := by timed eqResolve lean_s263 lean_s265
        have lean_s267 : let471 := by timed Eq.symm lean_s265
        have lean_s268 : let470 := by timed eqResolve lean_s266 lean_s267
        show False from by timed contradiction lean_s261 lean_s268
  ))))))
have lean_s261 : (Not (And let307 (And let214 let211))) := by liftOrNToNeg lean_s260
have lean_s262 : let518 := by timed flipNotAnd lean_s261 [let307, let214, let211]
have lean_s263 : let453 := by timed rfl
have lean_s264 : let330 := by timed rfl
let lean_s265 := by timed flipCongrArg lean_s264 [Eq]
have lean_s266 : (Eq let401 let330) := by timed congr lean_s265 lean_r137
have lean_s267 : (Eq let401 True) := by timed Eq.trans lean_s266 lean_r126
have lean_s268 : (Eq let342 True) := by timed Eq.trans lean_r188 lean_s267
have lean_s269 : let342 := by timed trueElim lean_s268
let lean_s270 := by timed congr lean_s263 lean_s269
have lean_s271 : (Eq let215 let215) := by timed rfl
let lean_s272 := by timed congr lean_s263 lean_s271
let lean_s273 := by timed congr lean_s272 lean_s13
have lean_s274 : (Eq let518 let517) := by timed congr lean_s270 lean_s273
have lean_s275 : let517 := by timed eqResolve lean_s262 lean_s274
have lean_s276 : (Or let210 (Or let306 let215)) := by permutateOr lean_s275, [2, 0, 1], (- 1)
have lean_s277 : (Or let395 (Or let266 let509)) :=
  (scope (fun lean_a265 : let215 =>
    (scope (fun lean_a266 : let265 =>
      (scope (fun lean_a267 : let377 =>
        have lean_s277 : let509 :=
          (scope (fun lean_a267 : let377 =>
            have lean_s277 : let300 := by timed trueElim lean_r105
            have lean_s278 : let516 := by timed And.intro lean_s277 lean_a267
            have lean_s279 : (Implies let516 let515) := by arithMulNeg [y, let181, let178], 3
            have lean_s280 : let515 := by timed modusPonens lean_s278 lean_s279
            have lean_s281 : let380 := by timed trueElim lean_r166
            have lean_s282 : let494 := by timed And.intro lean_s281 lean_a266
            have lean_s283 : let495 := by arithMulNeg [let13, let72, let247], 3
            have lean_s284 : let493 := by timed modusPonens lean_s282 lean_s283
            have lean_s285 : let433 := by timed trueElim lean_r212
            have lean_s286 : (Eq let215 let216) := by timed Eq.symm lean_r61
            have lean_s287 : let216 := by timed eqResolve lean_a265 lean_s286
            have lean_s288 : let513 := by intTightUb lean_s287
            have lean_s289 : let514 := by timed And.intro lean_s285 lean_s288
            have lean_s290 : (Implies let514 let512) := by arithMulPos [x, let181, let75], 1
            have lean_s291 : let512 := by timed modusPonens lean_s289 lean_s290
            have lean_s292 : let511 := by sumBounds [lean_s280, lean_s284, lean_s291]
            have lean_s293 : (Eq let121 let121) := by timed rfl
            let lean_s294 := by timed congrHAdd lean_r139 lean_s293
            have lean_s295 : (Eq let488 let154) := by timed congrHAdd lean_r92 lean_s294
            have lean_s296 : (Eq let488 let1) := by timed Eq.trans lean_s295 lean_r45
            let lean_s297 := by timed flipCongrArg lean_s296 [LE.le]
            let lean_s298 := by timed congrHAdd lean_r209 lean_r177
            have lean_s299 : (Eq let510 let398) := by timed congrHAdd lean_r186 lean_s298
            have lean_s300 : (Eq let510 let332) := by timed Eq.trans lean_s299 lean_r185
            have lean_s301 : (Eq let511 let333) := by timed congr lean_s297 lean_s300
            have lean_s302 : (Eq let511 False) := by timed Eq.trans lean_s301 lean_r129
            show False from by timed eqResolve lean_s292 lean_s302
          ))
        have lean_s278 : let378 := by liftOrNToNeg lean_s277
        have lean_s279 : let503 := by timed Eq.symm lean_r165
        have lean_s280 : let379 := by timed eqResolve lean_s278 lean_s279
        have lean_s281 : let378 := by timed eqResolve lean_s280 lean_r165
        show False from by timed contradiction lean_a267 lean_s281
  ))))))
have lean_s278 : (Not (And let215 (And let265 let377))) := by liftOrNToNeg lean_s277
have lean_s279 : let508 := by timed flipNotAnd lean_s278 [let215, let265, let377]
have lean_s280 : let453 := by timed rfl
have lean_s281 : let392 := by timed rfl
let lean_s282 := by timed flipCongrArg lean_s281 [Eq]
have lean_s283 : (Eq let397 let392) := by timed congr lean_s282 lean_r183
have lean_s284 : (Eq let397 True) := by timed Eq.trans lean_s283 lean_r181
have lean_s285 : (Eq let396 True) := by timed Eq.trans lean_r184 lean_s284
have lean_s286 : let396 := by timed trueElim lean_s285
let lean_s287 := by timed congr lean_s280 lean_s286
let lean_s288 := by timed congr lean_s280 lean_s82
have lean_s289 : (Eq let378 let378) := by timed rfl
let lean_s290 := by timed congr lean_s288 lean_s289
have lean_s291 : (Eq let508 let507) := by timed congr lean_s287 lean_s290
have lean_s292 : let507 := by timed eqResolve lean_s279 lean_s291
have lean_s293 : (Or let266 (Or let214 let378)) := by permutateOr lean_s292, [1, 0, 2], (- 1)
have lean_s294 : (Or let383 (Or let183 let469)) :=
  (scope (fun lean_a267 : let378 =>
    (scope (fun lean_a268 : let182 =>
      (scope (fun lean_a269 : let211 =>
        have lean_s294 : let482 := by timed Eq.symm lean_r168
        have lean_s295 : let382 := by timed eqResolve lean_a269 lean_s294
        have lean_s296 : let472 :=
          (scope (fun lean_a269 : let382 =>
            have lean_s296 : let372 := by timed trueElim lean_r160
            have lean_s297 : let480 := by timed And.intro lean_s296 lean_a269
            have lean_s298 : let481 := by arithMulPos [let13, let71, let78], 0
            have lean_s299 : let479 := by timed modusPonens lean_s297 lean_s298
            have lean_s300 : let440 := by timed trueElim lean_r223
            have lean_s301 : let505 := by timed And.intro lean_s300 lean_a268
            have lean_s302 : (Implies let505 let504) := by arithMulNeg [x, let181, let166], 3
            have lean_s303 : let504 := by timed modusPonens lean_s301 lean_s302
            have lean_s304 : let411 := by timed trueElim lean_r194
            have lean_s305 : let503 := by timed Eq.symm lean_r165
            have lean_s306 : let379 := by timed eqResolve lean_a267 lean_s305
            have lean_s307 : let501 := by intTightUb lean_s306
            have lean_s308 : let502 := by timed And.intro lean_s304 lean_s307
            have lean_s309 : (Implies let502 let500) := by arithMulPos [y, let190, let63], 1
            have lean_s310 : let500 := by timed modusPonens lean_s308 lean_s309
            have lean_s311 : let200 := by sumBounds [lean_s299, lean_s303, lean_s310]
            let lean_s312 := by timed congrHAdd lean_r94 lean_r75
            have lean_s313 : (Eq let197 let351) := by timed congrHAdd lean_r221 lean_s312
            have lean_s314 : (Eq let197 let1) := by timed Eq.trans lean_s313 lean_r142
            let lean_s315 := by timed flipCongrArg lean_s314 [GE.ge]
            let lean_s316 := by timed congrHAdd lean_r180 lean_r178
            have lean_s317 : (Eq let196 let336) := by timed congrHAdd lean_r63 lean_s316
            have lean_s318 : (Eq let196 let335) := by timed Eq.trans lean_s317 lean_r131
            have lean_s319 : (Eq let198 let390) := by timed congr lean_s315 lean_s318
            have lean_s320 : (Eq let198 True) := by timed Eq.trans lean_s319 lean_r176
            have lean_s321 : (Eq let199 let270) := by timed flipCongrArg lean_s320 [Not]
            have lean_s322 : (Eq let199 False) := by timed Eq.trans lean_s321 lean_r85
            have lean_s323 : (Eq let200 False) := by timed Eq.trans lean_r56 lean_s322
            show False from by timed eqResolve lean_s311 lean_s323
          ))
        have lean_s297 : let470 := by liftOrNToNeg lean_s296
        have lean_s298 : (Eq let470 let212) := by timed flipCongrArg lean_r168 [Not]
        have lean_s299 : (Eq let470 let210) := by timed Eq.trans lean_s298 lean_r60
        have lean_s300 : let210 := by timed eqResolve lean_s297 lean_s299
        have lean_s301 : let471 := by timed Eq.symm lean_s299
        have lean_s302 : let470 := by timed eqResolve lean_s300 lean_s301
        show False from by timed contradiction lean_s295 lean_s302
  ))))))
have lean_s295 : (Not (And let378 (And let182 let211))) := by liftOrNToNeg lean_s294
have lean_s296 : let499 := by timed flipNotAnd lean_s295 [let378, let182, let211]
have lean_s297 : let453 := by timed rfl
have lean_s298 : let387 := by timed rfl
let lean_s299 := by timed flipCongrArg lean_s298 [Eq]
have lean_s300 : (Eq let385 let387) := by timed congr lean_s299 lean_r170
have lean_s301 : (Eq let385 True) := by timed Eq.trans lean_s300 lean_r173
have lean_s302 : (Eq let384 True) := by timed Eq.trans lean_r171 lean_s301
have lean_s303 : let384 := by timed trueElim lean_s302
let lean_s304 := by timed congr lean_s297 lean_s303
have lean_s305 : (Eq let183 let183) := by timed rfl
let lean_s306 := by timed congr lean_s297 lean_s305
let lean_s307 := by timed congr lean_s306 lean_s13
have lean_s308 : (Eq let499 let498) := by timed congr lean_s304 lean_s307
have lean_s309 : let498 := by timed eqResolve lean_s296 lean_s308
have lean_s310 : (Or let210 (Or let377 let183)) := by permutateOr lean_s309, [2, 0, 1], (- 1)
have lean_s311 : (Or let184 (Or let266 let486)) :=
  (scope (fun lean_a269 : let183 =>
    (scope (fun lean_a270 : let265 =>
      (scope (fun lean_a271 : let191 =>
        have lean_s311 : let486 :=
          (scope (fun lean_a271 : let191 =>
            have lean_s311 : let300 := by timed trueElim lean_r105
            have lean_s312 : let497 := by timed And.intro lean_s311 lean_a271
            have lean_s313 : (Implies let497 let496) := by arithMulNeg [y, let190, let178], 3
            have lean_s314 : let496 := by timed modusPonens lean_s312 lean_s313
            have lean_s315 : let380 := by timed trueElim lean_r166
            have lean_s316 : let494 := by timed And.intro lean_s315 lean_a270
            have lean_s317 : let495 := by arithMulNeg [let13, let72, let247], 3
            have lean_s318 : let493 := by timed modusPonens lean_s316 lean_s317
            have lean_s319 : let433 := by timed trueElim lean_r212
            have lean_s320 : (Eq let183 let375) := by timed Eq.symm lean_r163
            have lean_s321 : let375 := by timed eqResolve lean_a269 lean_s320
            have lean_s322 : let491 := by intTightUb lean_s321
            have lean_s323 : let492 := by timed And.intro lean_s319 lean_s322
            have lean_s324 : (Implies let492 let490) := by arithMulPos [x, let190, let75], 1
            have lean_s325 : let490 := by timed modusPonens lean_s323 lean_s324
            have lean_s326 : let489 := by sumBounds [lean_s314, lean_s318, lean_s325]
            have lean_s327 : (Eq let121 let121) := by timed rfl
            let lean_s328 := by timed congrHAdd lean_r139 lean_s327
            have lean_s329 : (Eq let488 let154) := by timed congrHAdd lean_r92 lean_s328
            have lean_s330 : (Eq let488 let1) := by timed Eq.trans lean_s329 lean_r45
            let lean_s331 := by timed flipCongrArg lean_s330 [LE.le]
            let lean_s332 := by timed congrHAdd lean_r209 lean_r134
            have lean_s333 : (Eq let487 let248) := by timed congrHAdd lean_r130 lean_s332
            have lean_s334 : (Eq let487 let164) := by timed Eq.trans lean_s333 lean_r72
            have lean_s335 : (Eq let489 let165) := by timed congr lean_s331 lean_s334
            have lean_s336 : (Eq let489 False) := by timed Eq.trans lean_s335 lean_r48
            show False from by timed eqResolve lean_s326 lean_s336
          ))
        have lean_s312 : let192 := by liftOrNToNeg lean_s311
        have lean_s313 : let478 := by timed Eq.symm lean_r55
        have lean_s314 : let193 := by timed eqResolve lean_s312 lean_s313
        have lean_s315 : let192 := by timed eqResolve lean_s314 lean_r55
        show False from by timed contradiction lean_a271 lean_s315
  ))))))
have lean_s312 : (Not (And let183 (And let265 let191))) := by liftOrNToNeg lean_s311
have lean_s313 : let485 := by timed flipNotAnd lean_s312 [let183, let265, let191]
have lean_s314 : let453 := by timed rfl
have lean_s315 : let357 := by timed rfl
let lean_s316 := by timed flipCongrArg lean_s315 [Eq]
have lean_s317 : (Eq let256 let357) := by timed congr lean_s316 lean_r52
have lean_s318 : (Eq let256 True) := by timed Eq.trans lean_s317 lean_r148
have lean_s319 : (Eq let185 True) := by timed Eq.trans lean_r79 lean_s318
have lean_s320 : let185 := by timed trueElim lean_s319
let lean_s321 := by timed congr lean_s314 lean_s320
let lean_s322 := by timed congr lean_s314 lean_s82
have lean_s323 : (Eq let192 let192) := by timed rfl
let lean_s324 := by timed congr lean_s322 lean_s323
have lean_s325 : (Eq let485 let484) := by timed congr lean_s321 lean_s324
have lean_s326 : let484 := by timed eqResolve lean_s313 lean_s325
have lean_s327 : (Or let266 (Or let182 let192)) := by permutateOr lean_s326, [1, 0, 2], (- 1)
have lean_s328 : (Or let327 (Or let278 let469)) :=
  (scope (fun lean_a271 : let326 =>
    (scope (fun lean_a272 : let192 =>
      (scope (fun lean_a273 : let211 =>
        have lean_s328 : let482 := by timed Eq.symm lean_r168
        have lean_s329 : let382 := by timed eqResolve lean_a273 lean_s328
        have lean_s330 : let472 :=
          (scope (fun lean_a273 : let382 =>
            have lean_s330 : let372 := by timed trueElim lean_r160
            have lean_s331 : let480 := by timed And.intro lean_s330 lean_a273
            have lean_s332 : let481 := by arithMulPos [let13, let71, let78], 0
            have lean_s333 : let479 := by timed modusPonens lean_s331 lean_s332
            have lean_s334 : let411 := by timed trueElim lean_r194
            have lean_s335 : let478 := by timed Eq.symm lean_r55
            have lean_s336 : let193 := by timed eqResolve lean_a272 lean_s335
            have lean_s337 : let476 := by intTightUb lean_s336
            have lean_s338 : let477 := by timed And.intro lean_s334 lean_s337
            have lean_s339 : (Implies let477 let475) := by arithMulPos [y, let203, let63], 1
            have lean_s340 : let475 := by timed modusPonens lean_s338 lean_s339
            have lean_s341 : let440 := by timed trueElim lean_r223
            have lean_s342 : let474 := by timed And.intro lean_s341 lean_a271
            have lean_s343 : (Implies let474 let473) := by arithMulNeg [x, let190, let166], 3
            have lean_s344 : let473 := by timed modusPonens lean_s342 lean_s343
            have lean_s345 : let208 := by sumBounds [lean_s333, lean_s340, lean_s344]
            let lean_s346 := by timed congrHAdd lean_r75 lean_r94
            have lean_s347 : (Eq let174 let297) := by timed congrHAdd lean_r221 lean_s346
            have lean_s348 : (Eq let174 let1) := by timed Eq.trans lean_s347 lean_r101
            let lean_s349 := by timed flipCongrArg lean_s348 [GE.ge]
            let lean_s350 := by timed congrHAdd lean_r107 lean_r128
            have lean_s351 : (Eq let205 let221) := by timed congrHAdd lean_r63 lean_s350
            have lean_s352 : (Eq let205 let220) := by timed Eq.trans lean_s351 lean_r64
            have lean_s353 : (Eq let206 let331) := by timed congr lean_s349 lean_s352
            have lean_s354 : (Eq let206 True) := by timed Eq.trans lean_s353 lean_r127
            have lean_s355 : (Eq let207 let270) := by timed flipCongrArg lean_s354 [Not]
            have lean_s356 : (Eq let207 False) := by timed Eq.trans lean_s355 lean_r85
            have lean_s357 : (Eq let208 False) := by timed Eq.trans lean_r58 lean_s356
            show False from by timed eqResolve lean_s345 lean_s357
          ))
        have lean_s331 : let470 := by liftOrNToNeg lean_s330
        have lean_s332 : (Eq let470 let212) := by timed flipCongrArg lean_r168 [Not]
        have lean_s333 : (Eq let470 let210) := by timed Eq.trans lean_s332 lean_r60
        have lean_s334 : let210 := by timed eqResolve lean_s331 lean_s333
        have lean_s335 : let471 := by timed Eq.symm lean_s333
        have lean_s336 : let470 := by timed eqResolve lean_s334 lean_s335
        show False from by timed contradiction lean_s329 lean_s336
  ))))))
have lean_s329 : (Not (And let326 (And let192 let211))) := by liftOrNToNeg lean_s328
have lean_s330 : let468 := by timed flipNotAnd lean_s329 [let326, let192, let211]
have lean_s331 : let453 := by timed rfl
have lean_s332 : (Eq let327 let327) := by timed rfl
let lean_s333 := by timed congr lean_s331 lean_s332
have lean_s334 : let298 := by timed rfl
let lean_s335 := by timed flipCongrArg lean_s334 [Eq]
have lean_s336 : (Eq let279 let298) := by timed congr lean_s335 lean_r141
have lean_s337 : (Eq let279 True) := by timed Eq.trans lean_s336 lean_r103
have lean_s338 : (Eq let280 True) := by timed Eq.trans lean_r91 lean_s337
have lean_s339 : let280 := by timed trueElim lean_s338
let lean_s340 := by timed congr lean_s331 lean_s339
let lean_s341 := by timed congr lean_s340 lean_s13
have lean_s342 : (Eq let468 let467) := by timed congr lean_s333 lean_s341
have lean_s343 : let467 := by timed eqResolve lean_s330 lean_s342
have lean_s344 : (Or let210 (Or let191 let327)) := by permutateOr lean_s343, [2, 1, 0], (- 1)
have lean_s345 : (Or let266 (Or let328 let455)) :=
  (scope (fun lean_a273 : let265 =>
    (scope (fun lean_a274 : let327 =>
      (scope (fun lean_a275 : let236 =>
        have lean_s345 : let466 := by timed Eq.symm lean_r110
        have lean_s346 : let305 := by timed eqResolve lean_a275 lean_s345
        have lean_s347 : let258 := by intTightUb lean_s346
        have lean_s348 : (Or let259 False) :=
          (scope (fun lean_a274 : let258 =>
            have lean_s348 : let372 := by timed trueElim lean_r160
            have lean_s349 : let465 := by timed And.intro lean_s348 lean_a274
            have lean_s350 : (Implies let465 let464) := by arithMulPos [let30, let257, let78], 1
            have lean_s351 : let464 := by timed modusPonens lean_s349 lean_s350
            have lean_s352 : let370 := by timed trueElim lean_r157
            have lean_s353 : (Eq let327 let364) := by timed Eq.symm lean_r153
            have lean_s354 : let364 := by timed eqResolve lean_a274 lean_s353
            have lean_s355 : let462 := by intTightUb lean_s354
            have lean_s356 : let463 := by timed And.intro lean_s352 lean_s355
            have lean_s357 : (Implies let463 let461) := by arithMulPos [x, let203, let276], 1
            have lean_s358 : let461 := by timed modusPonens lean_s356 lean_s357
            have lean_s359 : let369 := by timed trueElim lean_r156
            have lean_s360 : let460 := by timed And.intro lean_s359 lean_a273
            have lean_s361 : (Implies let460 let459) := by arithMulNeg [let13, let72, let156], 3
            have lean_s362 : let459 := by timed modusPonens lean_s360 lean_s361
            have lean_s363 : let458 := by sumBounds [lean_s351, lean_s358, lean_s362]
            have lean_s364 : (Eq let322 let322) := by timed rfl
            let lean_s365 := by timed congrHAdd lean_s364 lean_r114
            have lean_s366 : (Eq let457 let323) := by timed congrHAdd lean_r149 lean_s365
            have lean_s367 : (Eq let457 let1) := by timed Eq.trans lean_s366 lean_r120
            let lean_s368 := by timed flipCongrArg lean_s367 [LE.le]
            let lean_s369 := by timed congrHAdd lean_r90 lean_r67
            have lean_s370 : (Eq let456 let159) := by timed congrHAdd lean_r144 lean_s369
            have lean_s371 : (Eq let456 let155) := by timed Eq.trans lean_s370 lean_r46
            have lean_s372 : (Eq let458 let356) := by timed congr lean_s368 lean_s371
            have lean_s373 : (Eq let458 False) := by timed Eq.trans lean_s372 lean_r147
            show False from by timed eqResolve lean_s363 lean_s373
          ))
        have lean_s349 : let259 := by liftOrNToNeg lean_s348
        have lean_s350 : (Eq let259 let237) := by timed flipCongrArg lean_r122 [Not]
        have lean_s351 : (Eq let259 let235) := by timed Eq.trans lean_s350 lean_r68
        have lean_s352 : (Eq let260 let235) := by timed Eq.trans lean_r80 lean_s351
        have lean_s353 : (Eq let235 let260) := by timed Eq.symm lean_s352
        have lean_s354 : (Eq let259 let260) := by timed Eq.trans lean_s351 lean_s353
        have lean_s355 : let260 := by timed eqResolve lean_s349 lean_s354
        have lean_s356 : (Eq let235 let259) := by timed Eq.symm lean_s351
        have lean_s357 : let261 := by timed Eq.trans lean_s352 lean_s356
        have lean_s358 : let259 := by timed eqResolve lean_s355 lean_s357
        show False from by timed contradiction lean_s347 lean_s358
  ))))))
have lean_s346 : (Not (And let265 (And let327 let236))) := by liftOrNToNeg lean_s345
have lean_s347 : let452 := by timed flipNotAnd lean_s346 [let265, let327, let236]
have lean_s348 : let453 := by timed rfl
let lean_s349 := by timed congr lean_s348 lean_s82
have lean_s350 : let400 := by timed rfl
let lean_s351 := by timed flipCongrArg lean_s350 [Eq]
have lean_s352 : (Eq let340 let400) := by timed congr lean_s351 lean_r125
have lean_s353 : (Eq let340 True) := by timed Eq.trans lean_s352 lean_r187
have lean_s354 : (Eq let329 True) := by timed Eq.trans lean_r136 lean_s353
have lean_s355 : let329 := by timed trueElim lean_s354
let lean_s356 := by timed congr lean_s348 lean_s355
let lean_s357 := by timed congr lean_s356 lean_s107
have lean_s358 : (Eq let452 let451) := by timed congr lean_s349 lean_s357
have lean_s359 : let451 := by timed eqResolve lean_s347 lean_s358
have lean_s360 : (Or let235 (Or let266 let326)) := by permutateOr lean_s359, [2, 0, 1], (- 1)
let lean_s361 := by R2 lean_s360, lean_s87, let265, [(- 1), 0]
have lean_s362 : let326 := by R1 lean_s361, lean_s112, let235, [(- 1), 0]
let lean_s363 := by R2 lean_s344, lean_s362, let326, [(- 1), 0]
have lean_s364 : let191 := by R1 lean_s363, lean_s67, let210, [(- 1), 0]
let lean_s365 := by R2 lean_s327, lean_s364, let191, [(- 1), 0]
have lean_s366 : let182 := by R2 lean_s365, lean_s87, let265, [(- 1), 0]
let lean_s367 := by R2 lean_s310, lean_s366, let182, [(- 1), 0]
have lean_s368 : let377 := by R1 lean_s367, lean_s67, let210, [(- 1), 0]
let lean_s369 := by R2 lean_s293, lean_s368, let377, [(- 1), 0]
have lean_s370 : let214 := by R2 lean_s369, lean_s87, let265, [(- 1), 0]
let lean_s371 := by R2 lean_s276, lean_s370, let214, [(- 1), 0]
have lean_s372 : let306 := by R1 lean_s371, lean_s67, let210, [(- 1), 0]
have lean_s373 : let290 := by R2 lean_s259, lean_s372, let306, [(- 1), 0]
let lean_s374 := by R2 lean_s247, lean_s373, let290, [(- 1), 0]
have lean_s375 : let239 := by R1 lean_s374, lean_s67, let210, [(- 1), 0]
let lean_s376 := by R2 lean_s230, lean_s375, let239, [(- 1), 0]
have lean_s377 : let312 := by R2 lean_s376, lean_s87, let265, [(- 1), 0]
let lean_s378 := by R2 lean_s213, lean_s377, let312, [(- 1), 0]
have lean_s379 : let149 := by R1 lean_s378, lean_s67, let210, [(- 1), 0]
let lean_s380 := by R2 lean_s196, lean_s379, let149, [(- 1), 0]
have lean_s381 : let136 := by R2 lean_s380, lean_s87, let265, [(- 1), 0]
let lean_s382 := by R2 lean_s179, lean_s381, let136, [(- 1), 0]
have lean_s383 : let110 := by R1 lean_s382, lean_s67, let210, [(- 1), 0]
let lean_s384 := by R2 lean_s163, lean_s383, let110, [(- 1), 0]
have lean_s385 : let104 := by R2 lean_s384, lean_s87, let265, [(- 1), 0]
let lean_s386 := by R2 lean_s146, lean_s385, let104, [(- 1), 0]
have lean_s387 : let284 := by R1 lean_s386, lean_s67, let210, [(- 1), 0]
let lean_s388 := by R2 lean_s130, lean_s387, let284, [(- 1), 0]
have lean_s389 : let69 := by R2 lean_s388, lean_s87, let265, [(- 1), 0]
have lean_s390 : let43 := by R2 lean_s113, lean_s389, let69, [(- 1), 0]
have lean_s391 : let34 := by R2 lean_s88, lean_s390, let43, [(- 1), 0]
have lean_s392 : let20 := by R2 lean_s68, lean_s391, let34, [(- 1), 0]
let lean_s393 := by R2 lean_s17, lean_s392, let20, [(- 1), 0]
let lean_s394 := by R1 lean_s393, lean_s67, let210, [(- 1), 0]
have lean_s395 : let320 := by andElim lean_s66, 0
exact (show False from by R2 lean_s394, lean_s395, let320, [0, 0])


