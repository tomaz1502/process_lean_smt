open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x : Int}
variable {y : Int}
variable {x : Int}
variable {y : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 2450)
  let let3 := (Int.ofNat 817)
  let let4 := (binrel% HDiv.hDiv let3 let2)
  let let5 := (binrel% GT.gt let4 let1)
  let let6 := (Rat.ofInt 0)
  let let7 := (Rat.ofInt 1)
  let let8 := (Neg.neg let7)
  let let9 := (binrel% HMul.hMul let8 let1)
  let let10 := (Int.ofNat 490)
  let let11 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 93) let10))
  let let12 := (Int.ofNat 1727)
  let let13 := (Neg.neg (binrel% HDiv.hDiv let12 let10))
  let let14 := (Int.ofNat 245)
  let let15 := (binrel% HDiv.hDiv let3 let14)
  let let16 := (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let15 let13))
  let let17 := (binrel% LE.le let6 let11)
  let let18 := (Int.ofNat 5)
  let let19 := (binrel% GE.ge x let18)
  let let20 := (Not let19)
  let let21 := (binrel% LT.lt x let18)
  let let22 := (Neg.neg (Rat.ofInt 12250))
  let let23 := (Rat.ofInt 2450)
  let let24 := (Neg.neg let23)
  let let25 := (binrel% HMul.hMul let24 let18)
  let let26 := (Not let20)
  let let27 := (Eq let19 let26)
  let let28 := (Eq let26 let19)
  let let29 := (Int.ofNat 1225)
  let let30 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5462) let29))
  let let31 := (Int.ofNat 4)
  let let32 := (Int.ofNat 2731)
  let let33 := (binrel% HDiv.hDiv let32 let2)
  let let34 := (Neg.neg let33)
  let let35 := (binrel% HMul.hMul let34 let31)
  let let36 := (binrel% LE.le y let31)
  let let37 := (Not let36)
  let let38 := (binrel% GT.gt y let31)
  let let39 := (Eq let38 let37)
  let let40 := (binrel% GE.ge y let18)
  let let41 := (Not let40)
  let let42 := (binrel% HDiv.hDiv let12 let2)
  let let43 := (Neg.neg let42)
  let let44 := (binrel% HMul.hMul let43 let18)
  let let45 := (Not let41)
  let let46 := (Eq let40 let45)
  let let47 := (Eq let45 let40)
  let let48 := (Eq let40 let40)
  let let49 := (Rat.ofInt 8193)
  let let50 := (Int.ofNat 3)
  let let51 := (Rat.ofInt 2731)
  let let52 := (binrel% HMul.hMul let51 let50)
  let let53 := (binrel% GE.ge x let31)
  let let54 := (Not let53)
  let let55 := (Not let54)
  let let56 := (Eq let53 let55)
  let let57 := (Eq let55 let53)
  let let58 := (Eq let53 let53)
  let let59 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 416) let29))
  let let60 := (Int.ofNat 11)
  let let61 := (binrel% HDiv.hDiv let60 let2)
  let let62 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 8193) let2))
  let let63 := (Rat.ofInt 3)
  let let64 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let62 let61))
  let let65 := (binrel% GE.ge y let31)
  let let66 := (Not let65)
  let let67 := (binrel% LE.le y let50)
  let let68 := (Not let66)
  let let69 := (Eq let68 let65)
  let let70 := (Eq let65 let65)
  let let71 := (binrel% GE.ge x let50)
  let let72 := (Not let71)
  let let73 := (binrel% LT.lt x let50)
  let let74 := (Rat.ofInt 5462)
  let let75 := (Int.ofNat 2)
  let let76 := (binrel% HMul.hMul let51 let75)
  let let77 := (Neg.neg (Rat.ofInt 7350))
  let let78 := (binrel% HMul.hMul let24 let50)
  let let79 := (Neg.neg (Rat.ofInt 1889))
  let let80 := (binrel% HAdd.hAdd let74 let77)
  let let81 := (binrel% HAdd.hAdd let8 let80)
  let let82 := (binrel% LE.le let6 let79)
  let let83 := (Int.ofNat 1)
  let let84 := (binrel% HDiv.hDiv let83 let2)
  let let85 := (binrel% HMul.hMul let84 let60)
  let let86 := (binrel% HMul.hMul let34 let75)
  let let87 := (binrel% HMul.hMul let7 let75)
  let let88 := (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let86 let85))
  let let89 := (binrel% HMul.hMul (Neg.neg let2) y)
  let let90 := (binrel% HMul.hMul let32 x)
  let let91 := (binrel% HAdd.hAdd let90 let89)
  let let92 := (binrel% HMul.hMul let84 let91)
  let let93 := (binrel% HMul.hMul let34 x)
  let let94 := (binrel% HMul.hMul let7 y)
  let let95 := (binrel% HAdd.hAdd let94 (binrel% HAdd.hAdd let93 let92))
  let let96 := (binrel% GE.ge let95 let88)
  let let97 := (Not let96)
  let let98 := (binrel% LT.lt let95 let88)
  let let99 := (Rat.ofInt 2)
  let let100 := (Rat.ofInt 10924)
  let let101 := (binrel% HMul.hMul let51 let31)
  let let102 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 551) let2))
  let let103 := (Neg.neg (binrel% HDiv.hDiv let32 let29))
  let let104 := (binrel% HAdd.hAdd let99 (binrel% HAdd.hAdd let103 let61))
  let let105 := (Neg.neg (Rat.ofInt 1327))
  let let106 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let22 let100))
  let let107 := (binrel% GE.ge let6 let102)
  let let108 := (binrel% HMul.hMul let34 let50)
  let let109 := (binrel% HMul.hMul let7 let50)
  let let110 := (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 let85))
  let let111 := (binrel% GE.ge let95 let110)
  let let112 := (Not let111)
  let let113 := (binrel% LT.lt let95 let110)
  let let114 := (binrel% LE.le y let75)
  let let115 := (Not let114)
  let let116 := (binrel% GT.gt y let75)
  let let117 := (Eq let116 let115)
  let let118 := (binrel% GE.ge y let50)
  let let119 := (Not let118)
  let let120 := (binrel% GE.ge x let75)
  let let121 := (Not let120)
  let let122 := (binrel% LT.lt x let75)
  let let123 := (Neg.neg (Rat.ofInt 4900))
  let let124 := (binrel% HMul.hMul let24 let75)
  let let125 := (binrel% HMul.hMul let51 let83)
  let let126 := (Neg.neg (Rat.ofInt 2170))
  let let127 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let123 let51))
  let let128 := (binrel% LE.le let6 let126)
  let let129 := (Not let121)
  let let130 := (Eq let120 let129)
  let let131 := (Eq let129 let120)
  let let132 := (binrel% GE.ge y let75)
  let let133 := (Not let132)
  let let134 := (binrel% LT.lt y let75)
  let let135 := (binrel% GT.gt let84 let1)
  let let136 := (binrel% LT.lt let34 let1)
  let let137 := (binrel% HMul.hMul let34 let83)
  let let138 := (binrel% HMul.hMul let7 let83)
  let let139 := (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let85 let137))
  let let140 := (binrel% HAdd.hAdd let94 (binrel% HAdd.hAdd let92 let93))
  let let141 := (binrel% GE.ge let140 let139)
  let let142 := (Not let141)
  let let143 := (binrel% LT.lt let140 let139)
  let let144 := (Rat.ofInt y)
  let let145 := (binrel% HMul.hMul (Neg.neg let3) y)
  let let146 := (Int.ofNat 910)
  let let147 := (binrel% HAdd.hAdd (binrel% HMul.hMul let146 x) let145)
  let let148 := (binrel% GE.ge let147 let1)
  let let149 := (Not let148)
  let let150 := (binrel% LT.lt let147 let1)
  let let151 := (Neg.neg (Rat.ofInt 9800))
  let let152 := (binrel% HMul.hMul let24 let31)
  let let153 := (Neg.neg let83)
  let let154 := (binrel% HMul.hMul let153 y)
  let let155 := (binrel% HMul.hMul let33 x)
  let let156 := (binrel% HAdd.hAdd let155 let154)
  let let157 := (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd let156 let93))
  let let158 := (Neg.neg (Rat.ofInt 1608))
  let let159 := (binrel% LE.le let6 let158)
  let let160 := (binrel% HAdd.hAdd let93 y)
  let let161 := (Rat.ofInt let154)
  let let162 := (binrel% HAdd.hAdd let161 (binrel% HAdd.hAdd let160 let155))
  let let163 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 422) let29))
  let let164 := (Neg.neg let84)
  let let165 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let164 let62))
  let let166 := (Neg.neg (Rat.ofInt 2439))
  let let167 := (Rat.ofInt 11)
  let let168 := (binrel% HAdd.hAdd let167 (binrel% HAdd.hAdd let24 let6))
  let let169 := (Rat.ofInt let90)
  let let170 := (binrel% HMul.hMul let51 x)
  let let171 := (binrel% GE.ge x let153)
  let let172 := (Not let171)
  let let173 := (Not let172)
  let let174 := (Eq let173 let171)
  let let175 := (Neg.neg let75)
  let let176 := (binrel% GE.ge x let175)
  let let177 := (Not let176)
  let let178 := (Not let177)
  let let179 := (Eq let178 let176)
  let let180 := (Neg.neg let50)
  let let181 := (binrel% GE.ge y let180)
  let let182 := (Not let181)
  let let183 := (binrel% LT.lt y let180)
  let let184 := (binrel% GE.ge let91 let60)
  let let185 := (Not let184)
  let let186 := (Not let185)
  let let187 := (Eq let186 let184)
  let let188 := (Rat.ofInt let91)
  let let189 := (binrel% HMul.hMul let7 let91)
  let let190 := (Eq let184 let184)
  let let191 := (binrel% HMul.hMul (Neg.neg let32) x)
  let let192 := (Rat.ofInt let191)
  let let193 := (binrel% HMul.hMul let2 y)
  let let194 := (Rat.ofInt let193)
  let let195 := (binrel% HAdd.hAdd let188 (binrel% HAdd.hAdd let194 let192))
  let let196 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 159) (Int.ofNat 350)))
  let let197 := (Rat.ofInt 4)
  let let198 := (binrel% HAdd.hAdd let197 (binrel% HAdd.hAdd let61 let30))
  let let199 := (Eq let65 let68)
  let let200 := (Neg.neg (Rat.ofInt 1877))
  let let201 := (binrel% GE.ge let6 let200)
  let let202 := (binrel% HMul.hMul let8 let175)
  let let203 := (Neg.neg (Rat.ofInt 1596))
  let let204 := (binrel% HAdd.hAdd let167 (binrel% HAdd.hAdd let151 let49))
  let let205 := (binrel% HMul.hMul let51 let1)
  let let206 := (binrel% HMul.hMul let43 x)
  let let207 := (binrel% HDiv.hDiv (Int.ofNat 2231227) let2)
  let let208 := (binrel% HAdd.hAdd (binrel% HMul.hMul let207 x) let145)
  let let209 := (binrel% HMul.hMul let3 y)
  let let210 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let146) x) let209))
  let let211 := (binrel% HAdd.hAdd let210 (binrel% HAdd.hAdd let208 let206))
  let let212 := (Not True)
  let let213 := (binrel% LT.lt let91 let60)
  let let214 := (Not let72)
  let let215 := (Eq let71 let214)
  let let216 := (Eq let214 let71)
  let let217 := (Not let182)
  let let218 := (Eq let181 let217)
  let let219 := (Eq let217 let181)
  let let220 := (Neg.neg let4)
  let let221 := (binrel% HMul.hMul let220 let83)
  let let222 := (binrel% HMul.hMul let7 let31)
  let let223 := (binrel% HAdd.hAdd let222 (binrel% HAdd.hAdd let85 let35))
  let let224 := (binrel% GE.ge let140 let223)
  let let225 := (Not let224)
  let let226 := (binrel% LT.lt let140 let223)
  let let227 := (binrel% HMul.hMul let23 y)
  let let228 := (Neg.neg let51)
  let let229 := (binrel% HMul.hMul let228 let180)
  let let230 := (Neg.neg let31)
  let let231 := (binrel% HMul.hMul let23 let230)
  let let232 := (binrel% HMul.hMul let7 let60)
  let let233 := (binrel% HAdd.hAdd let232 (binrel% HAdd.hAdd let231 let229))
  let let234 := (binrel% HMul.hMul let228 x)
  let let235 := (binrel% HAdd.hAdd let189 (binrel% HAdd.hAdd let227 let234))
  let let236 := (binrel% GE.ge let235 let233)
  let let237 := (Not let236)
  let let238 := (binrel% LT.lt let235 let233)
  let let239 := (binrel% HMul.hMul let23 let180)
  let let240 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15) (Int.ofNat 98)))
  let let241 := (binrel% LE.le let6 let240)
  let let242 := (Rat.ofInt let89)
  let let243 := (binrel% HMul.hMul let24 y)
  let let244 := (binrel% GE.ge let147 let31)
  let let245 := (Not let244)
  let let246 := (Not let245)
  let let247 := (Eq let244 let246)
  let let248 := (Eq let246 let244)
  let let249 := (binrel% HMul.hMul let164 let91)
  let let250 := (Eq let244 let244)
  let let251 := (binrel% HMul.hMul let228 let175)
  let let252 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let207) x) let209)
  let let253 := (binrel% HMul.hMul let42 x)
  let let254 := (Rat.ofInt let147)
  let let255 := (binrel% HAdd.hAdd let254 (binrel% HAdd.hAdd let253 let252))
  let let256 := (Int.ofNat 9)
  let let257 := (Int.ofNat 2451)
  let let258 := (binrel% HMul.hMul (Neg.neg let257) y)
  let let259 := (binrel% HMul.hMul (Int.ofNat 2730) x)
  let let260 := (binrel% HAdd.hAdd let259 let258)
  let let261 := (binrel% LE.le let260 let256)
  let let262 := (binrel% LE.le let1 let260)
  let let263 := (binrel% GT.gt let23 let1)
  let let264 := (Int.ofNat 10)
  let let265 := (binrel% LE.le let91 let264)
  let let266 := (binrel% GE.ge x let83)
  let let267 := (Not let266)
  let let268 := (binrel% LT.lt x let83)
  let let269 := (binrel% HMul.hMul let153 let193)
  let let270 := (binrel% HAdd.hAdd let90 let269)
  let let271 := (binrel% HSub.hSub let90 let193)
  let let272 := (binrel% GE.ge x let180)
  let let273 := (Not let272)
  let let274 := (Not let273)
  let let275 := (Eq let274 let272)
  let let276 := (binrel% GE.ge y let153)
  let let277 := (Eq let276 let276)
  let let278 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3454) let29))
  let let279 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let278 let220))
  let let280 := (binrel% HMul.hMul let257 y)
  let let281 := (binrel% HMul.hMul let153 let280)
  let let282 := (Eq let171 let171)
  let let283 := (Eq let176 let176)
  let let284 := (binrel% HMul.hMul let220 let91)
  let let285 := (binrel% LT.lt y let18)
  let let286 := (binrel% LT.lt let228 let1)
  let let287 := (binrel% HAdd.hAdd let188 (binrel% HAdd.hAdd let192 let194))
  let let288 := (Eq let184 let186)
  let let289 := (binrel% GE.ge y let1)
  let let290 := (Not let289)
  let let291 := (binrel% LT.lt y let1)
  let let292 := (binrel% GE.ge let6 let59)
  let let293 := (binrel% LT.lt let147 let31)
  let let294 := (binrel% LE.le let147 let50)
  let let295 := (binrel% HMul.hMul let228 let1)
  let let296 := (binrel% HMul.hMul let164 let83)
  let let297 := (binrel% HMul.hMul let23 let153)
  let let298 := (binrel% GE.ge let6 let203)
  let let299 := (Eq let71 let71)
  let let300 := (Eq let181 let181)
  let let301 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 141) let29))
  let let302 := (binrel% LE.le let6 let301)
  let let303 := (Eq let272 let274)
  let let304 := (Not let276)
  let let305 := (Not let304)
  let let306 := (Eq let305 let276)
  let let307 := (binrel% HMul.hMul let42 let230)
  let let308 := (binrel% HMul.hMul let8 let180)
  let let309 := (binrel% HAdd.hAdd let167 let80)
  let let310 := (binrel% LT.lt y let50)
  let let311 := (binrel% HMul.hMul let33 let180)
  let let312 := (binrel% HAdd.hAdd let232 (binrel% HAdd.hAdd let297 let295))
  let let313 := (binrel% GE.ge let235 let312)
  let let314 := (Not let313)
  let let315 := (binrel% LT.lt let235 let312)
  let let316 := (binrel% HMul.hMul let7 let147)
  let let317 := (binrel% LT.lt x let180)
  let let318 := (binrel% GE.ge y let175)
  let let319 := (Not let318)
  let let320 := (Not let319)
  let let321 := (Eq let320 let318)
  let let322 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let6 let6))
  let let323 := (Eq let318 let320)
  let let324 := (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd let93 let156))
  let let325 := (binrel% GT.gt let7 let1)
  let let326 := (binrel% LT.lt y let153)
  let let327 := (binrel% LT.lt x let31)
  let let328 := (binrel% HMul.hMul let8 y)
  let let329 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let164 let34))
  let let330 := (binrel% LT.lt y let175)
  let let331 := (binrel% LT.lt let164 let1)
  let let332 := (Not let267)
  let let333 := (Eq let266 let332)
  let let334 := (Eq let332 let266)
  let let335 := (binrel% LT.lt let8 let1)
  let let336 := (Eq let318 let318)
  let let337 := (Eq let118 let118)
  let let338 := (binrel% HAdd.hAdd let232 (binrel% HAdd.hAdd let251 let239))
  let let339 := (binrel% HAdd.hAdd let189 (binrel% HAdd.hAdd let234 let227))
  let let340 := (binrel% GE.ge let339 let338)
  let let341 := (Not let340)
  let let342 := (binrel% LT.lt let339 let338)
  let let343 := (binrel% GT.gt let42 let1)
  let let344 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 563) let2))
  let let345 := (binrel% LE.le let6 let344)
  let let346 := (binrel% LE.le let6 let163)
  let let347 := (binrel% HAdd.hAdd let99 (binrel% HAdd.hAdd let164 let103))
  let let348 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 27) let14))
  let let349 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let61 let34))
  let let350 := (binrel% HMul.hMul let33 let175)
  let let351 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let49 let151))
  let let352 := (binrel% LT.lt x let153)
  let let353 := (Eq let272 let272)
  let let354 := (Eq let276 let305)
  let let355 := (Neg.neg (Rat.ofInt 2158))
  let let356 := (binrel% GE.ge let6 let355)
  let let357 := (Rat.ofInt (binrel% HAdd.hAdd let191 let193))
  let let358 := (binrel% HAdd.hAdd let357 (binrel% HAdd.hAdd let169 let242))
  let let359 := (Eq let120 let120)
  let let360 := (Not let294)
  let let361 := (binrel% GT.gt let147 let50)
  let let362 := (Eq let361 let360)
  let let363 := (binrel% HAdd.hAdd let167 (binrel% HAdd.hAdd let51 let123))
  let let364 := (binrel% HMul.hMul let4 let91)
  let let365 := (binrel% HMul.hMul let23 let175)
  let let366 := (binrel% LT.lt let220 let1)
  let let367 := (Not let290)
  let let368 := (Eq let289 let367)
  let let369 := (Eq let367 let289)
  let let370 := (binrel% HMul.hMul let8 let147)
  let let371 := (binrel% HMul.hMul let228 let153)
  let let372 := (binrel% HAdd.hAdd let232 (binrel% HAdd.hAdd let371 let365))
  let let373 := (binrel% GE.ge let339 let372)
  let let374 := (Not let373)
  let let375 := (binrel% LT.lt let339 let372)
  let let376 := (Not let119)
  let let377 := (Eq let376 let118)
  let let378 := (binrel% HMul.hMul let33 let153)
  let let379 := (Eq let118 let376)
  let let380 := (binrel% HMul.hMul let8 let153)
  let let381 := (Eq let19 let19)
  let let382 := (binrel% GE.ge x let1)
  let let383 := (Not let382)
  let let384 := (binrel% LT.lt x let1)
  let let385 := (binrel% GT.gt let33 let1)
  let let386 := (binrel% LE.le y let83)
  let let387 := (Not let386)
  let let388 := (binrel% GT.gt y let83)
  let let389 := (Eq let388 let387)
  let let390 := (Eq let289 let289)
  let let391 := (binrel% LE.le let6 let105)
  let let392 := (binrel% LT.lt y let31)
  let let393 := (Eq let176 let178)
  let let394 := (binrel% HAdd.hAdd let259 let281)
  let let395 := (binrel% HSub.hSub let259 let280)
  let let396 := (Eq let171 let173)
  let let397 := (binrel% GE.ge let6 let348)
  let let398 := (binrel% GE.ge let6 let166)
  let let399 := (binrel% LT.lt x let175)
  let let400 := (Eq let266 let266)
  let let401 := (binrel% HMul.hMul let4 let264)
  let let402 := (binrel% GE.ge let91 let83)
  let let403 := (Not let402)
  let let404 := (binrel% LT.lt let91 let83)
  let let405 := (binrel% LE.le let6 let8)
  let let406 := (binrel% LT.lt let43 let1)
  let let407 := (binrel% HMul.hMul let24 let1)
  let let408 := (binrel% HMul.hMul let8 let83)
  let let409 := (binrel% GE.ge let6 let196)
  let let410 := (binrel% HAdd.hAdd let357 (binrel% HAdd.hAdd let242 let169))
  let let411 := (Not let383)
  let let412 := (binrel% HMul.hMul let8 let91)
  let let413 := (binrel% GT.gt let51 let1)
  let let414 := (Not let67)
  let let415 := (binrel% GT.gt y let50)
  let let416 := (Eq let415 let414)
  let let417 := (binrel% LT.lt let24 let1)
  let let418 := (Eq let132 let132)
  let let419 := (binrel% LE.le let83 let91)
  let let420 := (Not let133)
  let let421 := (Eq let420 let132)
  let let422 := (Eq let132 let420)
  let let423 := (binrel% LE.le let271 let264)
  let let424 := (binrel% LE.le let83 let271)
  let let425 := (binrel% LE.le let395 let256)
  let let426 := (binrel% LE.le let1 let395)
  let let427 := (And let426 (And let425 (And let424 let423)))
  let let428 := (And let148 (And let245 (And let402 let185)))
  let let429 := (Or let403 (Or let272 let244))
  let let430 := (Or let403 (Or let274 let246))
  let let431 := (Eq Or Or)
  let let432 := (Eq let403 let403)
  let let433 := (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let307 let221))
  let let434 := (binrel% HAdd.hAdd let316 (binrel% HAdd.hAdd let253 let284))
  let let435 := (binrel% LE.le let434 let433)
  let let436 := (binrel% LE.le let284 let221)
  let let437 := (And let366 let402)
  let let438 := (binrel% LE.le let253 let307)
  let let439 := (binrel% LE.le x let230)
  let let440 := (And let343 let439)
  let let441 := (binrel% LE.le let316 let109)
  let let442 := (And let325 let294)
  let let443 := (Or let273 (Or let181 let184))
  let let444 := (Or let273 (Or let217 let186))
  let let445 := (Or let186 False)
  let let446 := (Not let213)
  let let447 := (Eq let184 let446)
  let let448 := (Or let446 False)
  let let449 := (binrel% LE.le let234 let229)
  let let450 := (And let286 let272)
  let let451 := (binrel% LE.le let227 let231)
  let let452 := (binrel% LE.le y let230)
  let let453 := (And let263 let452)
  let let454 := (Eq let182 let183)
  let let455 := (binrel% LT.lt let189 let232)
  let let456 := (And let325 let213)
  let let457 := (Implies let456 let455)
  let let458 := (Eq let185 let213)
  let let459 := (Or let403 let182)
  let let460 := (Or let176 let459)
  let let461 := (Or let178 let459)
  let let462 := (Or let182 False)
  let let463 := (binrel% HAdd.hAdd let308 (binrel% HAdd.hAdd let296 let311))
  let let464 := (binrel% HAdd.hAdd let328 (binrel% HAdd.hAdd let249 let155))
  let let465 := (binrel% LE.le let464 let463)
  let let466 := (binrel% LE.le let155 let311)
  let let467 := (binrel% LE.le x let180)
  let let468 := (And let385 let467)
  let let469 := (binrel% LE.le let249 let296)
  let let470 := (And let331 let402)
  let let471 := (Implies let470 let469)
  let let472 := (binrel% LE.le let328 let308)
  let let473 := (And let335 let181)
  let let474 := (Or let318 (Or let177 let184))
  let let475 := (Or let320 (Or let177 let186))
  let let476 := (binrel% LE.le let227 let239)
  let let477 := (binrel% LE.le y let180)
  let let478 := (And let263 let477)
  let let479 := (Eq let319 let330)
  let let480 := (binrel% LE.le let234 let251)
  let let481 := (And let286 let176)
  let let482 := (Or let403 let319)
  let let483 := (Or let171 let482)
  let let484 := (Or let173 let482)
  let let485 := (Or let319 False)
  let let486 := (binrel% HAdd.hAdd let202 (binrel% HAdd.hAdd let296 let350))
  let let487 := (binrel% LE.le let464 let486)
  let let488 := (binrel% LE.le let155 let350)
  let let489 := (binrel% LE.le x let175)
  let let490 := (And let385 let489)
  let let491 := (binrel% LE.le let328 let202)
  let let492 := (And let335 let318)
  let let493 := (Or let276 (Or let172 let184))
  let let494 := (Or let305 (Or let172 let186))
  let let495 := (binrel% LE.le let227 let365)
  let let496 := (binrel% LE.le y let175)
  let let497 := (And let263 let496)
  let let498 := (binrel% LE.le let234 let371)
  let let499 := (And let286 let171)
  let let500 := (Or let403 (Or let382 let304))
  let let501 := (Or let403 (Or let411 let304))
  let let502 := (binrel% HAdd.hAdd let380 (binrel% HAdd.hAdd let296 let378))
  let let503 := (binrel% LE.le let464 let502)
  let let504 := (binrel% LE.le let155 let378)
  let let505 := (binrel% LE.le x let153)
  let let506 := (And let385 let505)
  let let507 := (binrel% LE.le let328 let380)
  let let508 := (And let335 let276)
  let let509 := (Or let383 (Or let289 let184))
  let let510 := (Or let383 (Or let367 let186))
  let let511 := (binrel% LE.le let234 let295)
  let let512 := (And let286 let382)
  let let513 := (binrel% LE.le let227 let297)
  let let514 := (binrel% LE.le y let153)
  let let515 := (And let263 let514)
  let let516 := (Or let290 let403)
  let let517 := (Or let266 let516)
  let let518 := (Or let332 let516)
  let let519 := (Or let403 False)
  let let520 := (Eq let403 let404)
  let let521 := (binrel% HAdd.hAdd let408 (binrel% HAdd.hAdd let407 let205))
  let let522 := (binrel% HAdd.hAdd let412 (binrel% HAdd.hAdd let243 let170))
  let let523 := (binrel% LE.le let522 let521)
  let let524 := (binrel% LE.le let170 let205)
  let let525 := (binrel% LE.le x let1)
  let let526 := (And let413 let525)
  let let527 := (binrel% LE.le let243 let407)
  let let528 := (And let417 let289)
  let let529 := (binrel% LE.le let412 let408)
  let let530 := (And let335 let402)
  let let531 := (Implies let530 let529)
  let let532 := (Or let267 (Or let184 let132))
  let let533 := (Or let267 (Or let186 let420))
  let let534 := (binrel% LE.le let93 let137)
  let let535 := (And let136 let266)
  let let536 := (binrel% LT.lt let92 let85)
  let let537 := (And let135 let213)
  let let538 := (Implies let537 let536)
  let let539 := (binrel% LE.le let94 let138)
  let let540 := (And let325 let386)
  let let541 := (Or let133 let403)
  let let542 := (Or let120 let541)
  let let543 := (Or let129 let541)
  let let544 := (binrel% HAdd.hAdd let408 (binrel% HAdd.hAdd let124 let125))
  let let545 := (binrel% LE.le let522 let544)
  let let546 := (binrel% LE.le let170 let125)
  let let547 := (binrel% LE.le x let83)
  let let548 := (And let413 let547)
  let let549 := (binrel% LE.le let243 let124)
  let let550 := (And let417 let132)
  let let551 := (Or let184 (Or let121 let118))
  let let552 := (Or let186 (Or let121 let376))
  let let553 := (binrel% LE.le let93 let86)
  let let554 := (And let136 let120)
  let let555 := (binrel% LE.le let94 let87)
  let let556 := (And let325 let114)
  let let557 := (Or let119 (Or let71 let403))
  let let558 := (Or let119 (Or let214 let403))
  let let559 := (binrel% HAdd.hAdd let408 (binrel% HAdd.hAdd let76 let78))
  let let560 := (binrel% HAdd.hAdd let412 (binrel% HAdd.hAdd let170 let243))
  let let561 := (binrel% LE.le let560 let559)
  let let562 := (binrel% LE.le let243 let78)
  let let563 := (And let417 let118)
  let let564 := (binrel% LE.le let170 let76)
  let let565 := (binrel% LE.le x let75)
  let let566 := (And let413 let565)
  let let567 := (Or let184 (Or let72 let65))
  let let568 := (Or let186 (Or let72 let68))
  let let569 := (binrel% LE.le let93 let108)
  let let570 := (And let136 let71)
  let let571 := (binrel% LE.le let94 let109)
  let let572 := (And let325 let67)
  let let573 := (Or let66 (Or let53 let403))
  let let574 := (Or let66 (Or let55 let403))
  let let575 := (binrel% HAdd.hAdd let408 (binrel% HAdd.hAdd let52 let152))
  let let576 := (binrel% LE.le let560 let575)
  let let577 := (binrel% LE.le let243 let152)
  let let578 := (And let417 let65)
  let let579 := (binrel% LE.le let170 let52)
  let let580 := (binrel% LE.le x let50)
  let let581 := (And let413 let580)
  let let582 := (Or let54 (Or let184 let40))
  let let583 := (Or let54 (Or let186 let45))
  let let584 := (binrel% LE.le let93 let35)
  let let585 := (And let136 let53)
  let let586 := (binrel% LE.le let94 let222)
  let let587 := (And let325 let36)
  let let588 := (Or let41 let403)
  let let589 := (Or let19 let588)
  let let590 := (Or let26 let588)
  let let591 := (binrel% HAdd.hAdd let408 (binrel% HAdd.hAdd let25 let101))
  let let592 := (binrel% LE.le let522 let591)
  let let593 := (binrel% LE.le let170 let101)
  let let594 := (binrel% LE.le x let31)
  let let595 := (And let413 let594)
  let let596 := (binrel% LE.le let243 let25)
  let let597 := (And let417 let40)
  let let598 := (Or let20 (Or let184 let149))
  let let599 := (Or let20 (Or let186 let149))
  let let600 := (Or let149 False)
  let let601 := (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let401 let44))
  let let602 := (binrel% HAdd.hAdd let370 (binrel% HAdd.hAdd let364 let206))
  let let603 := (binrel% LE.le let602 let601)
  let let604 := (binrel% LE.le let206 let44)
  let let605 := (And let406 let19)
  let let606 := (binrel% LE.le let364 let401)
  let let607 := (And let5 let265)
  let let608 := (binrel% LE.le let370 let9)
  let let609 := (And let335 let148)
(Eq let5 True) → (Eq let9 let6) → (Eq let16 let11) → (Eq let17 False) → (Eq let21 let20) → (Eq let25 let22) → (Eq let28 let27) → let28 → (Eq let35 let30) → let39 → (Eq let36 let41) → (Eq let44 let13) → (Eq let47 let46) → let47 → (Eq let48 True) → (Eq let52 let49) → (Eq let57 let56) → let57 → (Eq let58 True) → (Eq let64 let59) → (Eq let67 let66) → let69 → (Eq let70 True) → (Eq let73 let72) → (Eq let76 let74) → (Eq let78 let77) → (Eq let81 let79) → (Eq let82 False) → (Eq let98 let97) → (Eq let87 let99) → (Eq let101 let100) → (Eq let104 let102) → (Eq let106 let105) → (Eq let107 True) → (Eq let113 let112) → let117 → (Eq let108 let62) → (Eq let114 let119) → (Eq let122 let121) → (Eq let124 let123) → (Eq let125 let51) → (Eq let127 let126) → (Eq let128 False) → (Eq let131 let130) → let131 → (Eq let134 let133) → (Eq let135 True) → (Eq let136 True) → (Eq let143 let142) → (Eq let94 let144) → (Eq let150 let149) → (Eq let152 let151) → (Eq let157 let6) → (Eq let138 let7) → (Eq let85 let61) → (Eq let159 False) → (Eq let137 let34) → (Eq let92 let156) → (Eq let162 let6) → (Eq let165 let163) → (Eq let168 let166) → (Eq let170 let169) → let174 → let179 → (Eq let183 let182) → let187 → (Eq let189 let188) → (Eq let190 True) → (Eq let195 let6) → (Eq let198 let196) → (Eq let69 let199) → (Eq let201 True) → (Eq let202 let99) → (Eq let204 let203) → (Eq let205 let6) → (Eq let211 let6) → (Eq let212 False) → (Eq let213 let185) → (Eq let216 let215) → (Eq let219 let218) → (Eq let221 let220) → (Eq let226 let225) → (Eq let227 let194) → (Eq let238 let237) → (Eq let239 let77) → (Eq let222 let197) → (Eq let234 let192) → (Eq let241 False) → (Eq let243 let242) → (Eq let248 let247) → (Eq let249 let160) → (Eq let250 True) → (Eq let251 let74) → (Eq let109 let63) → (Eq let255 let6) → (Eq let261 let245) → (Eq let262 let148) → (Eq let263 True) → (Eq let265 let185) → (Eq let268 let267) → (Eq let271 let270) → let275 → (Eq let277 True) → (Eq let279 let240) → (Eq let281 let258) → (Eq let282 True) → (Eq let283 True) → (Eq let232 let167) → (Eq let284 let252) → (Eq let285 let41) → (Eq let286 True) → (Eq let287 let6) → (Eq let187 let288) → (Eq let291 let290) → (Eq let292 True) → (Eq let269 let89) → (Eq let231 let151) → (Eq let293 let245) → (Eq let294 let245) → (Eq let295 let6) → (Eq let296 let164) → (Eq let297 let24) → (Eq let298 True) → (Eq let299 True) → (Eq let300 True) → (Eq let302 False) → (Eq let275 let303) → let306 → (Eq let307 let278) → (Eq let308 let63) → (Eq let309 let200) → (Eq let310 let119) → (Eq let311 let62) → (Eq let315 let314) → let216 → let219 → (Eq let316 let254) → (Eq let317 let273) → let321 → (Eq let322 let8) → (Eq let321 let323) → (Eq let324 let6) → (Eq let325 True) → (Eq let326 let304) → (Eq let327 let54) → let248 → (Eq let328 let161) → (Eq let329 let301) → (Eq let330 let319) → (Eq let331 True) → (Eq let334 let333) → (Eq let335 True) → (Eq let336 True) → (Eq let337 True) → (Eq let342 let341) → (Eq let86 let103) → (Eq let343 True) → (Eq let345 False) → (Eq let346 False) → (Eq let347 let344) → (Eq let349 let348) → (Eq let350 let103) → (Eq let351 let158) → (Eq let352 let172) → (Eq let353 True) → (Eq let306 let354) → (Eq let356 True) → (Eq let358 let6) → (Eq let359 True) → let362 → (Eq let363 let355) → (Eq let364 let208) → (Eq let365 let123) → (Eq let366 True) → (Eq let369 let368) → (Eq let370 let210) → (Eq let371 let51) → (Eq let375 let374) → let377 → (Eq let378 let34) → (Eq let377 let379) → (Eq let380 let7) → (Eq let381 True) → (Eq let384 let383) → (Eq let385 True) → let334 → let389 → (Eq let390 True) → (Eq let391 False) → (Eq let392 let66) → (Eq let179 let393) → (Eq let395 let394) → (Eq let174 let396) → (Eq let386 let133) → let369 → (Eq let397 True) → (Eq let398 True) → (Eq let399 let177) → (Eq let400 True) → (Eq let401 let15) → (Eq let404 let403) → (Eq let405 False) → (Eq let406 True) → (Eq let407 let6) → (Eq let408 let8) → (Eq let409 True) → (Eq let229 let49) → (Eq let410 let6) → (Eq let411 let382) → (Eq let412 let357) → (Eq let413 True) → let416 → (Eq let417 True) → (Eq let418 True) → (Eq let419 let402) → let421 → (Eq let421 let422) → let427 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 2450)
  let let3 := (Int.ofNat 817)
  let let4 := (binrel% HDiv.hDiv let3 let2)
  let let5 := (binrel% GT.gt let4 let1)
  let let6 := (Rat.ofInt 0)
  let let7 := (Rat.ofInt 1)
  let let8 := (Neg.neg let7)
  let let9 := (binrel% HMul.hMul let8 let1)
  let let10 := (Int.ofNat 490)
  let let11 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 93) let10))
  let let12 := (Int.ofNat 1727)
  let let13 := (Neg.neg (binrel% HDiv.hDiv let12 let10))
  let let14 := (Int.ofNat 245)
  let let15 := (binrel% HDiv.hDiv let3 let14)
  let let16 := (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let15 let13))
  let let17 := (binrel% LE.le let6 let11)
  let let18 := (Int.ofNat 5)
  let let19 := (binrel% GE.ge x let18)
  let let20 := (Not let19)
  let let21 := (binrel% LT.lt x let18)
  let let22 := (Neg.neg (Rat.ofInt 12250))
  let let23 := (Rat.ofInt 2450)
  let let24 := (Neg.neg let23)
  let let25 := (binrel% HMul.hMul let24 let18)
  let let26 := (Not let20)
  let let27 := (Eq let19 let26)
  let let28 := (Eq let26 let19)
  let let29 := (Int.ofNat 1225)
  let let30 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 5462) let29))
  let let31 := (Int.ofNat 4)
  let let32 := (Int.ofNat 2731)
  let let33 := (binrel% HDiv.hDiv let32 let2)
  let let34 := (Neg.neg let33)
  let let35 := (binrel% HMul.hMul let34 let31)
  let let36 := (binrel% LE.le y let31)
  let let37 := (Not let36)
  let let38 := (binrel% GT.gt y let31)
  let let39 := (Eq let38 let37)
  let let40 := (binrel% GE.ge y let18)
  let let41 := (Not let40)
  let let42 := (binrel% HDiv.hDiv let12 let2)
  let let43 := (Neg.neg let42)
  let let44 := (binrel% HMul.hMul let43 let18)
  let let45 := (Not let41)
  let let46 := (Eq let40 let45)
  let let47 := (Eq let45 let40)
  let let48 := (Eq let40 let40)
  let let49 := (Rat.ofInt 8193)
  let let50 := (Int.ofNat 3)
  let let51 := (Rat.ofInt 2731)
  let let52 := (binrel% HMul.hMul let51 let50)
  let let53 := (binrel% GE.ge x let31)
  let let54 := (Not let53)
  let let55 := (Not let54)
  let let56 := (Eq let53 let55)
  let let57 := (Eq let55 let53)
  let let58 := (Eq let53 let53)
  let let59 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 416) let29))
  let let60 := (Int.ofNat 11)
  let let61 := (binrel% HDiv.hDiv let60 let2)
  let let62 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 8193) let2))
  let let63 := (Rat.ofInt 3)
  let let64 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let62 let61))
  let let65 := (binrel% GE.ge y let31)
  let let66 := (Not let65)
  let let67 := (binrel% LE.le y let50)
  let let68 := (Not let66)
  let let69 := (Eq let68 let65)
  let let70 := (Eq let65 let65)
  let let71 := (binrel% GE.ge x let50)
  let let72 := (Not let71)
  let let73 := (binrel% LT.lt x let50)
  let let74 := (Rat.ofInt 5462)
  let let75 := (Int.ofNat 2)
  let let76 := (binrel% HMul.hMul let51 let75)
  let let77 := (Neg.neg (Rat.ofInt 7350))
  let let78 := (binrel% HMul.hMul let24 let50)
  let let79 := (Neg.neg (Rat.ofInt 1889))
  let let80 := (binrel% HAdd.hAdd let74 let77)
  let let81 := (binrel% HAdd.hAdd let8 let80)
  let let82 := (binrel% LE.le let6 let79)
  let let83 := (Int.ofNat 1)
  let let84 := (binrel% HDiv.hDiv let83 let2)
  let let85 := (binrel% HMul.hMul let84 let60)
  let let86 := (binrel% HMul.hMul let34 let75)
  let let87 := (binrel% HMul.hMul let7 let75)
  let let88 := (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let86 let85))
  let let89 := (binrel% HMul.hMul (Neg.neg let2) y)
  let let90 := (binrel% HMul.hMul let32 x)
  let let91 := (binrel% HAdd.hAdd let90 let89)
  let let92 := (binrel% HMul.hMul let84 let91)
  let let93 := (binrel% HMul.hMul let34 x)
  let let94 := (binrel% HMul.hMul let7 y)
  let let95 := (binrel% HAdd.hAdd let94 (binrel% HAdd.hAdd let93 let92))
  let let96 := (binrel% GE.ge let95 let88)
  let let97 := (Not let96)
  let let98 := (binrel% LT.lt let95 let88)
  let let99 := (Rat.ofInt 2)
  let let100 := (Rat.ofInt 10924)
  let let101 := (binrel% HMul.hMul let51 let31)
  let let102 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 551) let2))
  let let103 := (Neg.neg (binrel% HDiv.hDiv let32 let29))
  let let104 := (binrel% HAdd.hAdd let99 (binrel% HAdd.hAdd let103 let61))
  let let105 := (Neg.neg (Rat.ofInt 1327))
  let let106 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let22 let100))
  let let107 := (binrel% GE.ge let6 let102)
  let let108 := (binrel% HMul.hMul let34 let50)
  let let109 := (binrel% HMul.hMul let7 let50)
  let let110 := (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 let85))
  let let111 := (binrel% GE.ge let95 let110)
  let let112 := (Not let111)
  let let113 := (binrel% LT.lt let95 let110)
  let let114 := (binrel% LE.le y let75)
  let let115 := (Not let114)
  let let116 := (binrel% GT.gt y let75)
  let let117 := (Eq let116 let115)
  let let118 := (binrel% GE.ge y let50)
  let let119 := (Not let118)
  let let120 := (binrel% GE.ge x let75)
  let let121 := (Not let120)
  let let122 := (binrel% LT.lt x let75)
  let let123 := (Neg.neg (Rat.ofInt 4900))
  let let124 := (binrel% HMul.hMul let24 let75)
  let let125 := (binrel% HMul.hMul let51 let83)
  let let126 := (Neg.neg (Rat.ofInt 2170))
  let let127 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let123 let51))
  let let128 := (binrel% LE.le let6 let126)
  let let129 := (Not let121)
  let let130 := (Eq let120 let129)
  let let131 := (Eq let129 let120)
  let let132 := (binrel% GE.ge y let75)
  let let133 := (Not let132)
  let let134 := (binrel% LT.lt y let75)
  let let135 := (binrel% GT.gt let84 let1)
  let let136 := (binrel% LT.lt let34 let1)
  let let137 := (binrel% HMul.hMul let34 let83)
  let let138 := (binrel% HMul.hMul let7 let83)
  let let139 := (binrel% HAdd.hAdd let138 (binrel% HAdd.hAdd let85 let137))
  let let140 := (binrel% HAdd.hAdd let94 (binrel% HAdd.hAdd let92 let93))
  let let141 := (binrel% GE.ge let140 let139)
  let let142 := (Not let141)
  let let143 := (binrel% LT.lt let140 let139)
  let let144 := (Rat.ofInt y)
  let let145 := (binrel% HMul.hMul (Neg.neg let3) y)
  let let146 := (Int.ofNat 910)
  let let147 := (binrel% HAdd.hAdd (binrel% HMul.hMul let146 x) let145)
  let let148 := (binrel% GE.ge let147 let1)
  let let149 := (Not let148)
  let let150 := (binrel% LT.lt let147 let1)
  let let151 := (Neg.neg (Rat.ofInt 9800))
  let let152 := (binrel% HMul.hMul let24 let31)
  let let153 := (Neg.neg let83)
  let let154 := (binrel% HMul.hMul let153 y)
  let let155 := (binrel% HMul.hMul let33 x)
  let let156 := (binrel% HAdd.hAdd let155 let154)
  let let157 := (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd let156 let93))
  let let158 := (Neg.neg (Rat.ofInt 1608))
  let let159 := (binrel% LE.le let6 let158)
  let let160 := (binrel% HAdd.hAdd let93 y)
  let let161 := (Rat.ofInt let154)
  let let162 := (binrel% HAdd.hAdd let161 (binrel% HAdd.hAdd let160 let155))
  let let163 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 422) let29))
  let let164 := (Neg.neg let84)
  let let165 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let164 let62))
  let let166 := (Neg.neg (Rat.ofInt 2439))
  let let167 := (Rat.ofInt 11)
  let let168 := (binrel% HAdd.hAdd let167 (binrel% HAdd.hAdd let24 let6))
  let let169 := (Rat.ofInt let90)
  let let170 := (binrel% HMul.hMul let51 x)
  let let171 := (binrel% GE.ge x let153)
  let let172 := (Not let171)
  let let173 := (Not let172)
  let let174 := (Eq let173 let171)
  let let175 := (Neg.neg let75)
  let let176 := (binrel% GE.ge x let175)
  let let177 := (Not let176)
  let let178 := (Not let177)
  let let179 := (Eq let178 let176)
  let let180 := (Neg.neg let50)
  let let181 := (binrel% GE.ge y let180)
  let let182 := (Not let181)
  let let183 := (binrel% LT.lt y let180)
  let let184 := (binrel% GE.ge let91 let60)
  let let185 := (Not let184)
  let let186 := (Not let185)
  let let187 := (Eq let186 let184)
  let let188 := (Rat.ofInt let91)
  let let189 := (binrel% HMul.hMul let7 let91)
  let let190 := (Eq let184 let184)
  let let191 := (binrel% HMul.hMul (Neg.neg let32) x)
  let let192 := (Rat.ofInt let191)
  let let193 := (binrel% HMul.hMul let2 y)
  let let194 := (Rat.ofInt let193)
  let let195 := (binrel% HAdd.hAdd let188 (binrel% HAdd.hAdd let194 let192))
  let let196 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 159) (Int.ofNat 350)))
  let let197 := (Rat.ofInt 4)
  let let198 := (binrel% HAdd.hAdd let197 (binrel% HAdd.hAdd let61 let30))
  let let199 := (Eq let65 let68)
  let let200 := (Neg.neg (Rat.ofInt 1877))
  let let201 := (binrel% GE.ge let6 let200)
  let let202 := (binrel% HMul.hMul let8 let175)
  let let203 := (Neg.neg (Rat.ofInt 1596))
  let let204 := (binrel% HAdd.hAdd let167 (binrel% HAdd.hAdd let151 let49))
  let let205 := (binrel% HMul.hMul let51 let1)
  let let206 := (binrel% HMul.hMul let43 x)
  let let207 := (binrel% HDiv.hDiv (Int.ofNat 2231227) let2)
  let let208 := (binrel% HAdd.hAdd (binrel% HMul.hMul let207 x) let145)
  let let209 := (binrel% HMul.hMul let3 y)
  let let210 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let146) x) let209))
  let let211 := (binrel% HAdd.hAdd let210 (binrel% HAdd.hAdd let208 let206))
  let let212 := (Not True)
  let let213 := (binrel% LT.lt let91 let60)
  let let214 := (Not let72)
  let let215 := (Eq let71 let214)
  let let216 := (Eq let214 let71)
  let let217 := (Not let182)
  let let218 := (Eq let181 let217)
  let let219 := (Eq let217 let181)
  let let220 := (Neg.neg let4)
  let let221 := (binrel% HMul.hMul let220 let83)
  let let222 := (binrel% HMul.hMul let7 let31)
  let let223 := (binrel% HAdd.hAdd let222 (binrel% HAdd.hAdd let85 let35))
  let let224 := (binrel% GE.ge let140 let223)
  let let225 := (Not let224)
  let let226 := (binrel% LT.lt let140 let223)
  let let227 := (binrel% HMul.hMul let23 y)
  let let228 := (Neg.neg let51)
  let let229 := (binrel% HMul.hMul let228 let180)
  let let230 := (Neg.neg let31)
  let let231 := (binrel% HMul.hMul let23 let230)
  let let232 := (binrel% HMul.hMul let7 let60)
  let let233 := (binrel% HAdd.hAdd let232 (binrel% HAdd.hAdd let231 let229))
  let let234 := (binrel% HMul.hMul let228 x)
  let let235 := (binrel% HAdd.hAdd let189 (binrel% HAdd.hAdd let227 let234))
  let let236 := (binrel% GE.ge let235 let233)
  let let237 := (Not let236)
  let let238 := (binrel% LT.lt let235 let233)
  let let239 := (binrel% HMul.hMul let23 let180)
  let let240 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15) (Int.ofNat 98)))
  let let241 := (binrel% LE.le let6 let240)
  let let242 := (Rat.ofInt let89)
  let let243 := (binrel% HMul.hMul let24 y)
  let let244 := (binrel% GE.ge let147 let31)
  let let245 := (Not let244)
  let let246 := (Not let245)
  let let247 := (Eq let244 let246)
  let let248 := (Eq let246 let244)
  let let249 := (binrel% HMul.hMul let164 let91)
  let let250 := (Eq let244 let244)
  let let251 := (binrel% HMul.hMul let228 let175)
  let let252 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let207) x) let209)
  let let253 := (binrel% HMul.hMul let42 x)
  let let254 := (Rat.ofInt let147)
  let let255 := (binrel% HAdd.hAdd let254 (binrel% HAdd.hAdd let253 let252))
  let let256 := (Int.ofNat 9)
  let let257 := (Int.ofNat 2451)
  let let258 := (binrel% HMul.hMul (Neg.neg let257) y)
  let let259 := (binrel% HMul.hMul (Int.ofNat 2730) x)
  let let260 := (binrel% HAdd.hAdd let259 let258)
  let let261 := (binrel% LE.le let260 let256)
  let let262 := (binrel% LE.le let1 let260)
  let let263 := (binrel% GT.gt let23 let1)
  let let264 := (Int.ofNat 10)
  let let265 := (binrel% LE.le let91 let264)
  let let266 := (binrel% GE.ge x let83)
  let let267 := (Not let266)
  let let268 := (binrel% LT.lt x let83)
  let let269 := (binrel% HMul.hMul let153 let193)
  let let270 := (binrel% HAdd.hAdd let90 let269)
  let let271 := (binrel% HSub.hSub let90 let193)
  let let272 := (binrel% GE.ge x let180)
  let let273 := (Not let272)
  let let274 := (Not let273)
  let let275 := (Eq let274 let272)
  let let276 := (binrel% GE.ge y let153)
  let let277 := (Eq let276 let276)
  let let278 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3454) let29))
  let let279 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let278 let220))
  let let280 := (binrel% HMul.hMul let257 y)
  let let281 := (binrel% HMul.hMul let153 let280)
  let let282 := (Eq let171 let171)
  let let283 := (Eq let176 let176)
  let let284 := (binrel% HMul.hMul let220 let91)
  let let285 := (binrel% LT.lt y let18)
  let let286 := (binrel% LT.lt let228 let1)
  let let287 := (binrel% HAdd.hAdd let188 (binrel% HAdd.hAdd let192 let194))
  let let288 := (Eq let184 let186)
  let let289 := (binrel% GE.ge y let1)
  let let290 := (Not let289)
  let let291 := (binrel% LT.lt y let1)
  let let292 := (binrel% GE.ge let6 let59)
  let let293 := (binrel% LT.lt let147 let31)
  let let294 := (binrel% LE.le let147 let50)
  let let295 := (binrel% HMul.hMul let228 let1)
  let let296 := (binrel% HMul.hMul let164 let83)
  let let297 := (binrel% HMul.hMul let23 let153)
  let let298 := (binrel% GE.ge let6 let203)
  let let299 := (Eq let71 let71)
  let let300 := (Eq let181 let181)
  let let301 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 141) let29))
  let let302 := (binrel% LE.le let6 let301)
  let let303 := (Eq let272 let274)
  let let304 := (Not let276)
  let let305 := (Not let304)
  let let306 := (Eq let305 let276)
  let let307 := (binrel% HMul.hMul let42 let230)
  let let308 := (binrel% HMul.hMul let8 let180)
  let let309 := (binrel% HAdd.hAdd let167 let80)
  let let310 := (binrel% LT.lt y let50)
  let let311 := (binrel% HMul.hMul let33 let180)
  let let312 := (binrel% HAdd.hAdd let232 (binrel% HAdd.hAdd let297 let295))
  let let313 := (binrel% GE.ge let235 let312)
  let let314 := (Not let313)
  let let315 := (binrel% LT.lt let235 let312)
  let let316 := (binrel% HMul.hMul let7 let147)
  let let317 := (binrel% LT.lt x let180)
  let let318 := (binrel% GE.ge y let175)
  let let319 := (Not let318)
  let let320 := (Not let319)
  let let321 := (Eq let320 let318)
  let let322 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let6 let6))
  let let323 := (Eq let318 let320)
  let let324 := (binrel% HAdd.hAdd let144 (binrel% HAdd.hAdd let93 let156))
  let let325 := (binrel% GT.gt let7 let1)
  let let326 := (binrel% LT.lt y let153)
  let let327 := (binrel% LT.lt x let31)
  let let328 := (binrel% HMul.hMul let8 y)
  let let329 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let164 let34))
  let let330 := (binrel% LT.lt y let175)
  let let331 := (binrel% LT.lt let164 let1)
  let let332 := (Not let267)
  let let333 := (Eq let266 let332)
  let let334 := (Eq let332 let266)
  let let335 := (binrel% LT.lt let8 let1)
  let let336 := (Eq let318 let318)
  let let337 := (Eq let118 let118)
  let let338 := (binrel% HAdd.hAdd let232 (binrel% HAdd.hAdd let251 let239))
  let let339 := (binrel% HAdd.hAdd let189 (binrel% HAdd.hAdd let234 let227))
  let let340 := (binrel% GE.ge let339 let338)
  let let341 := (Not let340)
  let let342 := (binrel% LT.lt let339 let338)
  let let343 := (binrel% GT.gt let42 let1)
  let let344 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 563) let2))
  let let345 := (binrel% LE.le let6 let344)
  let let346 := (binrel% LE.le let6 let163)
  let let347 := (binrel% HAdd.hAdd let99 (binrel% HAdd.hAdd let164 let103))
  let let348 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 27) let14))
  let let349 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let61 let34))
  let let350 := (binrel% HMul.hMul let33 let175)
  let let351 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let49 let151))
  let let352 := (binrel% LT.lt x let153)
  let let353 := (Eq let272 let272)
  let let354 := (Eq let276 let305)
  let let355 := (Neg.neg (Rat.ofInt 2158))
  let let356 := (binrel% GE.ge let6 let355)
  let let357 := (Rat.ofInt (binrel% HAdd.hAdd let191 let193))
  let let358 := (binrel% HAdd.hAdd let357 (binrel% HAdd.hAdd let169 let242))
  let let359 := (Eq let120 let120)
  let let360 := (Not let294)
  let let361 := (binrel% GT.gt let147 let50)
  let let362 := (Eq let361 let360)
  let let363 := (binrel% HAdd.hAdd let167 (binrel% HAdd.hAdd let51 let123))
  let let364 := (binrel% HMul.hMul let4 let91)
  let let365 := (binrel% HMul.hMul let23 let175)
  let let366 := (binrel% LT.lt let220 let1)
  let let367 := (Not let290)
  let let368 := (Eq let289 let367)
  let let369 := (Eq let367 let289)
  let let370 := (binrel% HMul.hMul let8 let147)
  let let371 := (binrel% HMul.hMul let228 let153)
  let let372 := (binrel% HAdd.hAdd let232 (binrel% HAdd.hAdd let371 let365))
  let let373 := (binrel% GE.ge let339 let372)
  let let374 := (Not let373)
  let let375 := (binrel% LT.lt let339 let372)
  let let376 := (Not let119)
  let let377 := (Eq let376 let118)
  let let378 := (binrel% HMul.hMul let33 let153)
  let let379 := (Eq let118 let376)
  let let380 := (binrel% HMul.hMul let8 let153)
  let let381 := (Eq let19 let19)
  let let382 := (binrel% GE.ge x let1)
  let let383 := (Not let382)
  let let384 := (binrel% LT.lt x let1)
  let let385 := (binrel% GT.gt let33 let1)
  let let386 := (binrel% LE.le y let83)
  let let387 := (Not let386)
  let let388 := (binrel% GT.gt y let83)
  let let389 := (Eq let388 let387)
  let let390 := (Eq let289 let289)
  let let391 := (binrel% LE.le let6 let105)
  let let392 := (binrel% LT.lt y let31)
  let let393 := (Eq let176 let178)
  let let394 := (binrel% HAdd.hAdd let259 let281)
  let let395 := (binrel% HSub.hSub let259 let280)
  let let396 := (Eq let171 let173)
  let let397 := (binrel% GE.ge let6 let348)
  let let398 := (binrel% GE.ge let6 let166)
  let let399 := (binrel% LT.lt x let175)
  let let400 := (Eq let266 let266)
  let let401 := (binrel% HMul.hMul let4 let264)
  let let402 := (binrel% GE.ge let91 let83)
  let let403 := (Not let402)
  let let404 := (binrel% LT.lt let91 let83)
  let let405 := (binrel% LE.le let6 let8)
  let let406 := (binrel% LT.lt let43 let1)
  let let407 := (binrel% HMul.hMul let24 let1)
  let let408 := (binrel% HMul.hMul let8 let83)
  let let409 := (binrel% GE.ge let6 let196)
  let let410 := (binrel% HAdd.hAdd let357 (binrel% HAdd.hAdd let242 let169))
  let let411 := (Not let383)
  let let412 := (binrel% HMul.hMul let8 let91)
  let let413 := (binrel% GT.gt let51 let1)
  let let414 := (Not let67)
  let let415 := (binrel% GT.gt y let50)
  let let416 := (Eq let415 let414)
  let let417 := (binrel% LT.lt let24 let1)
  let let418 := (Eq let132 let132)
  let let419 := (binrel% LE.le let83 let91)
  let let420 := (Not let133)
  let let421 := (Eq let420 let132)
  let let422 := (Eq let132 let420)
  let let423 := (binrel% LE.le let271 let264)
  let let424 := (binrel% LE.le let83 let271)
  let let425 := (binrel% LE.le let395 let256)
  let let426 := (binrel% LE.le let1 let395)
  let let427 := (And let426 (And let425 (And let424 let423)))
  let let428 := (And let148 (And let245 (And let402 let185)))
  let let429 := (Or let403 (Or let272 let244))
  let let430 := (Or let403 (Or let274 let246))
  let let431 := (Eq Or Or)
  let let432 := (Eq let403 let403)
  let let433 := (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let307 let221))
  let let434 := (binrel% HAdd.hAdd let316 (binrel% HAdd.hAdd let253 let284))
  let let435 := (binrel% LE.le let434 let433)
  let let436 := (binrel% LE.le let284 let221)
  let let437 := (And let366 let402)
  let let438 := (binrel% LE.le let253 let307)
  let let439 := (binrel% LE.le x let230)
  let let440 := (And let343 let439)
  let let441 := (binrel% LE.le let316 let109)
  let let442 := (And let325 let294)
  let let443 := (Or let273 (Or let181 let184))
  let let444 := (Or let273 (Or let217 let186))
  let let445 := (Or let186 False)
  let let446 := (Not let213)
  let let447 := (Eq let184 let446)
  let let448 := (Or let446 False)
  let let449 := (binrel% LE.le let234 let229)
  let let450 := (And let286 let272)
  let let451 := (binrel% LE.le let227 let231)
  let let452 := (binrel% LE.le y let230)
  let let453 := (And let263 let452)
  let let454 := (Eq let182 let183)
  let let455 := (binrel% LT.lt let189 let232)
  let let456 := (And let325 let213)
  let let457 := (Implies let456 let455)
  let let458 := (Eq let185 let213)
  let let459 := (Or let403 let182)
  let let460 := (Or let176 let459)
  let let461 := (Or let178 let459)
  let let462 := (Or let182 False)
  let let463 := (binrel% HAdd.hAdd let308 (binrel% HAdd.hAdd let296 let311))
  let let464 := (binrel% HAdd.hAdd let328 (binrel% HAdd.hAdd let249 let155))
  let let465 := (binrel% LE.le let464 let463)
  let let466 := (binrel% LE.le let155 let311)
  let let467 := (binrel% LE.le x let180)
  let let468 := (And let385 let467)
  let let469 := (binrel% LE.le let249 let296)
  let let470 := (And let331 let402)
  let let471 := (Implies let470 let469)
  let let472 := (binrel% LE.le let328 let308)
  let let473 := (And let335 let181)
  let let474 := (Or let318 (Or let177 let184))
  let let475 := (Or let320 (Or let177 let186))
  let let476 := (binrel% LE.le let227 let239)
  let let477 := (binrel% LE.le y let180)
  let let478 := (And let263 let477)
  let let479 := (Eq let319 let330)
  let let480 := (binrel% LE.le let234 let251)
  let let481 := (And let286 let176)
  let let482 := (Or let403 let319)
  let let483 := (Or let171 let482)
  let let484 := (Or let173 let482)
  let let485 := (Or let319 False)
  let let486 := (binrel% HAdd.hAdd let202 (binrel% HAdd.hAdd let296 let350))
  let let487 := (binrel% LE.le let464 let486)
  let let488 := (binrel% LE.le let155 let350)
  let let489 := (binrel% LE.le x let175)
  let let490 := (And let385 let489)
  let let491 := (binrel% LE.le let328 let202)
  let let492 := (And let335 let318)
  let let493 := (Or let276 (Or let172 let184))
  let let494 := (Or let305 (Or let172 let186))
  let let495 := (binrel% LE.le let227 let365)
  let let496 := (binrel% LE.le y let175)
  let let497 := (And let263 let496)
  let let498 := (binrel% LE.le let234 let371)
  let let499 := (And let286 let171)
  let let500 := (Or let403 (Or let382 let304))
  let let501 := (Or let403 (Or let411 let304))
  let let502 := (binrel% HAdd.hAdd let380 (binrel% HAdd.hAdd let296 let378))
  let let503 := (binrel% LE.le let464 let502)
  let let504 := (binrel% LE.le let155 let378)
  let let505 := (binrel% LE.le x let153)
  let let506 := (And let385 let505)
  let let507 := (binrel% LE.le let328 let380)
  let let508 := (And let335 let276)
  let let509 := (Or let383 (Or let289 let184))
  let let510 := (Or let383 (Or let367 let186))
  let let511 := (binrel% LE.le let234 let295)
  let let512 := (And let286 let382)
  let let513 := (binrel% LE.le let227 let297)
  let let514 := (binrel% LE.le y let153)
  let let515 := (And let263 let514)
  let let516 := (Or let290 let403)
  let let517 := (Or let266 let516)
  let let518 := (Or let332 let516)
  let let519 := (Or let403 False)
  let let520 := (Eq let403 let404)
  let let521 := (binrel% HAdd.hAdd let408 (binrel% HAdd.hAdd let407 let205))
  let let522 := (binrel% HAdd.hAdd let412 (binrel% HAdd.hAdd let243 let170))
  let let523 := (binrel% LE.le let522 let521)
  let let524 := (binrel% LE.le let170 let205)
  let let525 := (binrel% LE.le x let1)
  let let526 := (And let413 let525)
  let let527 := (binrel% LE.le let243 let407)
  let let528 := (And let417 let289)
  let let529 := (binrel% LE.le let412 let408)
  let let530 := (And let335 let402)
  let let531 := (Implies let530 let529)
  let let532 := (Or let267 (Or let184 let132))
  let let533 := (Or let267 (Or let186 let420))
  let let534 := (binrel% LE.le let93 let137)
  let let535 := (And let136 let266)
  let let536 := (binrel% LT.lt let92 let85)
  let let537 := (And let135 let213)
  let let538 := (Implies let537 let536)
  let let539 := (binrel% LE.le let94 let138)
  let let540 := (And let325 let386)
  let let541 := (Or let133 let403)
  let let542 := (Or let120 let541)
  let let543 := (Or let129 let541)
  let let544 := (binrel% HAdd.hAdd let408 (binrel% HAdd.hAdd let124 let125))
  let let545 := (binrel% LE.le let522 let544)
  let let546 := (binrel% LE.le let170 let125)
  let let547 := (binrel% LE.le x let83)
  let let548 := (And let413 let547)
  let let549 := (binrel% LE.le let243 let124)
  let let550 := (And let417 let132)
  let let551 := (Or let184 (Or let121 let118))
  let let552 := (Or let186 (Or let121 let376))
  let let553 := (binrel% LE.le let93 let86)
  let let554 := (And let136 let120)
  let let555 := (binrel% LE.le let94 let87)
  let let556 := (And let325 let114)
  let let557 := (Or let119 (Or let71 let403))
  let let558 := (Or let119 (Or let214 let403))
  let let559 := (binrel% HAdd.hAdd let408 (binrel% HAdd.hAdd let76 let78))
  let let560 := (binrel% HAdd.hAdd let412 (binrel% HAdd.hAdd let170 let243))
  let let561 := (binrel% LE.le let560 let559)
  let let562 := (binrel% LE.le let243 let78)
  let let563 := (And let417 let118)
  let let564 := (binrel% LE.le let170 let76)
  let let565 := (binrel% LE.le x let75)
  let let566 := (And let413 let565)
  let let567 := (Or let184 (Or let72 let65))
  let let568 := (Or let186 (Or let72 let68))
  let let569 := (binrel% LE.le let93 let108)
  let let570 := (And let136 let71)
  let let571 := (binrel% LE.le let94 let109)
  let let572 := (And let325 let67)
  let let573 := (Or let66 (Or let53 let403))
  let let574 := (Or let66 (Or let55 let403))
  let let575 := (binrel% HAdd.hAdd let408 (binrel% HAdd.hAdd let52 let152))
  let let576 := (binrel% LE.le let560 let575)
  let let577 := (binrel% LE.le let243 let152)
  let let578 := (And let417 let65)
  let let579 := (binrel% LE.le let170 let52)
  let let580 := (binrel% LE.le x let50)
  let let581 := (And let413 let580)
  let let582 := (Or let54 (Or let184 let40))
  let let583 := (Or let54 (Or let186 let45))
  let let584 := (binrel% LE.le let93 let35)
  let let585 := (And let136 let53)
  let let586 := (binrel% LE.le let94 let222)
  let let587 := (And let325 let36)
  let let588 := (Or let41 let403)
  let let589 := (Or let19 let588)
  let let590 := (Or let26 let588)
  let let591 := (binrel% HAdd.hAdd let408 (binrel% HAdd.hAdd let25 let101))
  let let592 := (binrel% LE.le let522 let591)
  let let593 := (binrel% LE.le let170 let101)
  let let594 := (binrel% LE.le x let31)
  let let595 := (And let413 let594)
  let let596 := (binrel% LE.le let243 let25)
  let let597 := (And let417 let40)
  let let598 := (Or let20 (Or let184 let149))
  let let599 := (Or let20 (Or let186 let149))
  let let600 := (Or let149 False)
  let let601 := (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let401 let44))
  let let602 := (binrel% HAdd.hAdd let370 (binrel% HAdd.hAdd let364 let206))
  let let603 := (binrel% LE.le let602 let601)
  let let604 := (binrel% LE.le let206 let44)
  let let605 := (And let406 let19)
  let let606 := (binrel% LE.le let364 let401)
  let let607 := (And let5 let265)
  let let608 := (binrel% LE.le let370 let9)
  let let609 := (And let335 let148)
fun lean_r0 : (Eq let5 True) => -- EVALUATE
fun lean_r1 : (Eq let9 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let16 let11) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let17 False) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let25 let22) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let28 let27) => -- THEORY_REWRITE_BOOL
fun lean_r7 : let28 => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let35 let30) => -- THEORY_REWRITE_ARITH
fun lean_r9 : let39 => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let36 let41) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let44 let13) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let47 let46) => -- THEORY_REWRITE_BOOL
fun lean_r13 : let47 => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let48 True) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let52 let49) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let57 let56) => -- THEORY_REWRITE_BOOL
fun lean_r17 : let57 => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let58 True) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let64 let59) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r21 : let69 => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let70 True) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let73 let72) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let76 let74) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let78 let77) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let81 let79) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let82 False) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let98 let97) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let87 let99) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let101 let100) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let104 let102) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let106 let105) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let107 True) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let113 let112) => -- THEORY_REWRITE_ARITH
fun lean_r35 : let117 => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let108 let62) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let114 let119) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let122 let121) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let124 let123) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let125 let51) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let127 let126) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let128 False) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let131 let130) => -- THEORY_REWRITE_BOOL
fun lean_r44 : let131 => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let134 let133) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let135 True) => -- EVALUATE
fun lean_r47 : (Eq let136 True) => -- EVALUATE
fun lean_r48 : (Eq let143 let142) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let94 let144) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let150 let149) => -- THEORY_REWRITE_ARITH
fun lean_r51 : (Eq let152 let151) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let157 let6) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let138 let7) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let85 let61) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let159 False) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let137 let34) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let92 let156) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let162 let6) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let165 let163) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let168 let166) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let170 let169) => -- THEORY_REWRITE_ARITH
fun lean_r62 : let174 => -- THEORY_REWRITE_BOOL
fun lean_r63 : let179 => -- THEORY_REWRITE_BOOL
fun lean_r64 : (Eq let183 let182) => -- THEORY_REWRITE_ARITH
fun lean_r65 : let187 => -- THEORY_REWRITE_BOOL
fun lean_r66 : (Eq let189 let188) => -- THEORY_REWRITE_ARITH
fun lean_r67 : (Eq let190 True) => -- THEORY_REWRITE_BOOL
fun lean_r68 : (Eq let195 let6) => -- THEORY_REWRITE_ARITH
fun lean_r69 : (Eq let198 let196) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq let69 let199) => -- THEORY_REWRITE_BOOL
fun lean_r71 : (Eq let201 True) => -- THEORY_REWRITE_ARITH
fun lean_r72 : (Eq let202 let99) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let204 let203) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let205 let6) => -- THEORY_REWRITE_ARITH
fun lean_r75 : (Eq let211 let6) => -- THEORY_REWRITE_ARITH
fun lean_r76 : (Eq let212 False) => -- THEORY_REWRITE_BOOL
fun lean_r77 : (Eq let213 let185) => -- THEORY_REWRITE_ARITH
fun lean_r78 : (Eq let216 let215) => -- THEORY_REWRITE_BOOL
fun lean_r79 : (Eq let219 let218) => -- THEORY_REWRITE_BOOL
fun lean_r80 : (Eq let221 let220) => -- THEORY_REWRITE_ARITH
fun lean_r81 : (Eq let226 let225) => -- THEORY_REWRITE_ARITH
fun lean_r82 : (Eq let227 let194) => -- THEORY_REWRITE_ARITH
fun lean_r83 : (Eq let238 let237) => -- THEORY_REWRITE_ARITH
fun lean_r84 : (Eq let239 let77) => -- THEORY_REWRITE_ARITH
fun lean_r85 : (Eq let222 let197) => -- THEORY_REWRITE_ARITH
fun lean_r86 : (Eq let234 let192) => -- THEORY_REWRITE_ARITH
fun lean_r87 : (Eq let241 False) => -- THEORY_REWRITE_ARITH
fun lean_r88 : (Eq let243 let242) => -- THEORY_REWRITE_ARITH
fun lean_r89 : (Eq let248 let247) => -- THEORY_REWRITE_BOOL
fun lean_r90 : (Eq let249 let160) => -- THEORY_REWRITE_ARITH
fun lean_r91 : (Eq let250 True) => -- THEORY_REWRITE_BOOL
fun lean_r92 : (Eq let251 let74) => -- THEORY_REWRITE_ARITH
fun lean_r93 : (Eq let109 let63) => -- THEORY_REWRITE_ARITH
fun lean_r94 : (Eq let255 let6) => -- THEORY_REWRITE_ARITH
fun lean_r95 : (Eq let261 let245) => -- THEORY_REWRITE_ARITH
fun lean_r96 : (Eq let262 let148) => -- THEORY_REWRITE_ARITH
fun lean_r97 : (Eq let263 True) => -- EVALUATE
fun lean_r98 : (Eq let265 let185) => -- THEORY_REWRITE_ARITH
fun lean_r99 : (Eq let268 let267) => -- THEORY_REWRITE_ARITH
fun lean_r100 : (Eq let271 let270) => -- THEORY_REWRITE_ARITH
fun lean_r101 : let275 => -- THEORY_REWRITE_BOOL
fun lean_r102 : (Eq let277 True) => -- THEORY_REWRITE_BOOL
fun lean_r103 : (Eq let279 let240) => -- THEORY_REWRITE_ARITH
fun lean_r104 : (Eq let281 let258) => -- THEORY_REWRITE_ARITH
fun lean_r105 : (Eq let282 True) => -- THEORY_REWRITE_BOOL
fun lean_r106 : (Eq let283 True) => -- THEORY_REWRITE_BOOL
fun lean_r107 : (Eq let232 let167) => -- THEORY_REWRITE_ARITH
fun lean_r108 : (Eq let284 let252) => -- THEORY_REWRITE_ARITH
fun lean_r109 : (Eq let285 let41) => -- THEORY_REWRITE_ARITH
fun lean_r110 : (Eq let286 True) => -- EVALUATE
fun lean_r111 : (Eq let287 let6) => -- THEORY_REWRITE_ARITH
fun lean_r112 : (Eq let187 let288) => -- THEORY_REWRITE_BOOL
fun lean_r113 : (Eq let291 let290) => -- THEORY_REWRITE_ARITH
fun lean_r114 : (Eq let292 True) => -- THEORY_REWRITE_ARITH
fun lean_r115 : (Eq let269 let89) => -- THEORY_REWRITE_ARITH
fun lean_r116 : (Eq let231 let151) => -- THEORY_REWRITE_ARITH
fun lean_r117 : (Eq let293 let245) => -- THEORY_REWRITE_ARITH
fun lean_r118 : (Eq let294 let245) => -- THEORY_REWRITE_ARITH
fun lean_r119 : (Eq let295 let6) => -- THEORY_REWRITE_ARITH
fun lean_r120 : (Eq let296 let164) => -- THEORY_REWRITE_ARITH
fun lean_r121 : (Eq let297 let24) => -- THEORY_REWRITE_ARITH
fun lean_r122 : (Eq let298 True) => -- THEORY_REWRITE_ARITH
fun lean_r123 : (Eq let299 True) => -- THEORY_REWRITE_BOOL
fun lean_r124 : (Eq let300 True) => -- THEORY_REWRITE_BOOL
fun lean_r125 : (Eq let302 False) => -- THEORY_REWRITE_ARITH
fun lean_r126 : (Eq let275 let303) => -- THEORY_REWRITE_BOOL
fun lean_r127 : let306 => -- THEORY_REWRITE_BOOL
fun lean_r128 : (Eq let307 let278) => -- THEORY_REWRITE_ARITH
fun lean_r129 : (Eq let308 let63) => -- THEORY_REWRITE_ARITH
fun lean_r130 : (Eq let309 let200) => -- THEORY_REWRITE_ARITH
fun lean_r131 : (Eq let310 let119) => -- THEORY_REWRITE_ARITH
fun lean_r132 : (Eq let311 let62) => -- THEORY_REWRITE_ARITH
fun lean_r133 : (Eq let315 let314) => -- THEORY_REWRITE_ARITH
fun lean_r134 : let216 => -- THEORY_REWRITE_BOOL
fun lean_r135 : let219 => -- THEORY_REWRITE_BOOL
fun lean_r136 : (Eq let316 let254) => -- THEORY_REWRITE_ARITH
fun lean_r137 : (Eq let317 let273) => -- THEORY_REWRITE_ARITH
fun lean_r138 : let321 => -- THEORY_REWRITE_BOOL
fun lean_r139 : (Eq let322 let8) => -- THEORY_REWRITE_ARITH
fun lean_r140 : (Eq let321 let323) => -- THEORY_REWRITE_BOOL
fun lean_r141 : (Eq let324 let6) => -- THEORY_REWRITE_ARITH
fun lean_r142 : (Eq let325 True) => -- EVALUATE
fun lean_r143 : (Eq let326 let304) => -- THEORY_REWRITE_ARITH
fun lean_r144 : (Eq let327 let54) => -- THEORY_REWRITE_ARITH
fun lean_r145 : let248 => -- THEORY_REWRITE_BOOL
fun lean_r146 : (Eq let328 let161) => -- THEORY_REWRITE_ARITH
fun lean_r147 : (Eq let329 let301) => -- THEORY_REWRITE_ARITH
fun lean_r148 : (Eq let330 let319) => -- THEORY_REWRITE_ARITH
fun lean_r149 : (Eq let331 True) => -- EVALUATE
fun lean_r150 : (Eq let334 let333) => -- THEORY_REWRITE_BOOL
fun lean_r151 : (Eq let335 True) => -- EVALUATE
fun lean_r152 : (Eq let336 True) => -- THEORY_REWRITE_BOOL
fun lean_r153 : (Eq let337 True) => -- THEORY_REWRITE_BOOL
fun lean_r154 : (Eq let342 let341) => -- THEORY_REWRITE_ARITH
fun lean_r155 : (Eq let86 let103) => -- THEORY_REWRITE_ARITH
fun lean_r156 : (Eq let343 True) => -- EVALUATE
fun lean_r157 : (Eq let345 False) => -- THEORY_REWRITE_ARITH
fun lean_r158 : (Eq let346 False) => -- THEORY_REWRITE_ARITH
fun lean_r159 : (Eq let347 let344) => -- THEORY_REWRITE_ARITH
fun lean_r160 : (Eq let349 let348) => -- THEORY_REWRITE_ARITH
fun lean_r161 : (Eq let350 let103) => -- THEORY_REWRITE_ARITH
fun lean_r162 : (Eq let351 let158) => -- THEORY_REWRITE_ARITH
fun lean_r163 : (Eq let352 let172) => -- THEORY_REWRITE_ARITH
fun lean_r164 : (Eq let353 True) => -- THEORY_REWRITE_BOOL
fun lean_r165 : (Eq let306 let354) => -- THEORY_REWRITE_BOOL
fun lean_r166 : (Eq let356 True) => -- THEORY_REWRITE_ARITH
fun lean_r167 : (Eq let358 let6) => -- THEORY_REWRITE_ARITH
fun lean_r168 : (Eq let359 True) => -- THEORY_REWRITE_BOOL
fun lean_r169 : let362 => -- THEORY_REWRITE_ARITH
fun lean_r170 : (Eq let363 let355) => -- THEORY_REWRITE_ARITH
fun lean_r171 : (Eq let364 let208) => -- THEORY_REWRITE_ARITH
fun lean_r172 : (Eq let365 let123) => -- THEORY_REWRITE_ARITH
fun lean_r173 : (Eq let366 True) => -- EVALUATE
fun lean_r174 : (Eq let369 let368) => -- THEORY_REWRITE_BOOL
fun lean_r175 : (Eq let370 let210) => -- THEORY_REWRITE_ARITH
fun lean_r176 : (Eq let371 let51) => -- THEORY_REWRITE_ARITH
fun lean_r177 : (Eq let375 let374) => -- THEORY_REWRITE_ARITH
fun lean_r178 : let377 => -- THEORY_REWRITE_BOOL
fun lean_r179 : (Eq let378 let34) => -- THEORY_REWRITE_ARITH
fun lean_r180 : (Eq let377 let379) => -- THEORY_REWRITE_BOOL
fun lean_r181 : (Eq let380 let7) => -- THEORY_REWRITE_ARITH
fun lean_r182 : (Eq let381 True) => -- THEORY_REWRITE_BOOL
fun lean_r183 : (Eq let384 let383) => -- THEORY_REWRITE_ARITH
fun lean_r184 : (Eq let385 True) => -- EVALUATE
fun lean_r185 : let334 => -- THEORY_REWRITE_BOOL
fun lean_r186 : let389 => -- THEORY_REWRITE_ARITH
fun lean_r187 : (Eq let390 True) => -- THEORY_REWRITE_BOOL
fun lean_r188 : (Eq let391 False) => -- THEORY_REWRITE_ARITH
fun lean_r189 : (Eq let392 let66) => -- THEORY_REWRITE_ARITH
fun lean_r190 : (Eq let179 let393) => -- THEORY_REWRITE_BOOL
fun lean_r191 : (Eq let395 let394) => -- THEORY_REWRITE_ARITH
fun lean_r192 : (Eq let174 let396) => -- THEORY_REWRITE_BOOL
fun lean_r193 : (Eq let386 let133) => -- THEORY_REWRITE_ARITH
fun lean_r194 : let369 => -- THEORY_REWRITE_BOOL
fun lean_r195 : (Eq let397 True) => -- THEORY_REWRITE_ARITH
fun lean_r196 : (Eq let398 True) => -- THEORY_REWRITE_ARITH
fun lean_r197 : (Eq let399 let177) => -- THEORY_REWRITE_ARITH
fun lean_r198 : (Eq let400 True) => -- THEORY_REWRITE_BOOL
fun lean_r199 : (Eq let401 let15) => -- THEORY_REWRITE_ARITH
fun lean_r200 : (Eq let404 let403) => -- THEORY_REWRITE_ARITH
fun lean_r201 : (Eq let405 False) => -- THEORY_REWRITE_ARITH
fun lean_r202 : (Eq let406 True) => -- EVALUATE
fun lean_r203 : (Eq let407 let6) => -- THEORY_REWRITE_ARITH
fun lean_r204 : (Eq let408 let8) => -- THEORY_REWRITE_ARITH
fun lean_r205 : (Eq let409 True) => -- THEORY_REWRITE_ARITH
fun lean_r206 : (Eq let229 let49) => -- THEORY_REWRITE_ARITH
fun lean_r207 : (Eq let410 let6) => -- THEORY_REWRITE_ARITH
fun lean_r208 : (Eq let411 let382) => -- THEORY_REWRITE_BOOL
fun lean_r209 : (Eq let412 let357) => -- THEORY_REWRITE_ARITH
fun lean_r210 : (Eq let413 True) => -- EVALUATE
fun lean_r211 : let416 => -- THEORY_REWRITE_ARITH
fun lean_r212 : (Eq let417 True) => -- EVALUATE
fun lean_r213 : (Eq let418 True) => -- THEORY_REWRITE_BOOL
fun lean_r214 : (Eq let419 let402) => -- THEORY_REWRITE_ARITH
fun lean_r215 : let421 => -- THEORY_REWRITE_BOOL
fun lean_r216 : (Eq let421 let422) => -- THEORY_REWRITE_BOOL
fun lean_a217 : let427 => by
have lean_s0 : (Or let20 (Or let186 let600)) :=
  (scope (fun lean_a218 : let19 =>
    (scope (fun lean_a219 : let185 =>
      (scope (fun lean_a220 : let148 =>
        have lean_s0 : let600 :=
          (scope (fun lean_a221 : let148 =>
            have lean_s0 : let335 := by timed trueElim lean_r151
            have lean_s1 : let609 := by timed And.intro lean_s0 lean_a221
            have lean_s2 : (Implies let609 let608) := by arithMulNeg [let147, let1, let8], 3
            have lean_s3 : let608 := by timed modusPonens lean_s1 lean_s2
            have lean_s4 : let5 := by timed trueElim lean_r0
            have lean_s5 : let458 := by timed Eq.symm lean_r77
            have lean_s6 : let213 := by timed eqResolve lean_a219 lean_s5
            have lean_s7 : let265 := by intTightUb lean_s6
            have lean_s8 : let607 := by timed And.intro lean_s4 lean_s7
            have lean_s9 : (Implies let607 let606) := by arithMulPos [let91, let264, let4], 1
            have lean_s10 : let606 := by timed modusPonens lean_s8 lean_s9
            have lean_s11 : let406 := by timed trueElim lean_r202
            have lean_s12 : let605 := by timed And.intro lean_s11 lean_a218
            have lean_s13 : (Implies let605 let604) := by arithMulNeg [x, let18, let43], 3
            have lean_s14 : let604 := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : let603 := by sumBounds [lean_s3, lean_s10, lean_s14]
            have lean_s16 : (Eq let206 let206) := by timed rfl
            let lean_s17 := by timed congrHAdd lean_r171 lean_s16
            have lean_s18 : (Eq let602 let211) := by timed congrHAdd lean_r175 lean_s17
            have lean_s19 : (Eq let602 let6) := by timed Eq.trans lean_s18 lean_r75
            let lean_s20 := by timed flipCongrArg lean_s19 [LE.le]
            let lean_s21 := by timed congrHAdd lean_r199 lean_r11
            have lean_s22 : (Eq let601 let16) := by timed congrHAdd lean_r1 lean_s21
            have lean_s23 : (Eq let601 let11) := by timed Eq.trans lean_s22 lean_r2
            have lean_s24 : (Eq let603 let17) := by timed congr lean_s20 lean_s23
            have lean_s25 : (Eq let603 False) := by timed Eq.trans lean_s24 lean_r3
            show False from by timed eqResolve lean_s15 lean_s25
          ))
        have lean_s1 : let149 := by liftOrNToNeg lean_s0
        have lean_s2 : (Eq let149 let150) := by timed Eq.symm lean_r50
        have lean_s3 : let150 := by timed eqResolve lean_s1 lean_s2
        have lean_s4 : let149 := by timed eqResolve lean_s3 lean_r50
        show False from by timed contradiction lean_a220 lean_s4
  ))))))
have lean_s1 : (Not (And let19 (And let185 let148))) := by liftOrNToNeg lean_s0
have lean_s2 : let599 := by timed flipNotAnd lean_s1 [let19, let185, let148]
have lean_s3 : let431 := by timed rfl
have lean_s4 : (Eq let20 let20) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let190 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let288 let190) := by timed congr lean_s7 lean_r65
have lean_s9 : (Eq let288 True) := by timed Eq.trans lean_s8 lean_r67
have lean_s10 : (Eq let187 True) := by timed Eq.trans lean_r112 lean_s9
have lean_s11 : let187 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq let149 let149) := by timed rfl
let lean_s14 := by timed congr lean_s12 lean_s13
have lean_s15 : (Eq let599 let598) := by timed congr lean_s5 lean_s14
have lean_s16 : let598 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let184 (Or let149 let20)) := by permutateOr lean_s16, [1, 2, 0], (- 1)
have lean_s18 : (Or let26 (Or let41 let519)) :=
  (scope (fun lean_a221 : let20 =>
    (scope (fun lean_a222 : let40 =>
      (scope (fun lean_a223 : let402 =>
        have lean_s18 : let519 :=
          (scope (fun lean_a224 : let402 =>
            have lean_s18 : let335 := by timed trueElim lean_r151
            have lean_s19 : let530 := by timed And.intro lean_s18 lean_a224
            have lean_s20 : let531 := by arithMulNeg [let91, let83, let8], 3
            have lean_s21 : let529 := by timed modusPonens lean_s19 lean_s20
            have lean_s22 : let417 := by timed trueElim lean_r212
            have lean_s23 : let597 := by timed And.intro lean_s22 lean_a222
            have lean_s24 : (Implies let597 let596) := by arithMulNeg [y, let18, let24], 3
            have lean_s25 : let596 := by timed modusPonens lean_s23 lean_s24
            have lean_s26 : let413 := by timed trueElim lean_r210
            have lean_s27 : (Eq let20 let21) := by timed Eq.symm lean_r4
            have lean_s28 : let21 := by timed eqResolve lean_a221 lean_s27
            have lean_s29 : let594 := by intTightUb lean_s28
            have lean_s30 : let595 := by timed And.intro lean_s26 lean_s29
            have lean_s31 : (Implies let595 let593) := by arithMulPos [x, let31, let51], 1
            have lean_s32 : let593 := by timed modusPonens lean_s30 lean_s31
            have lean_s33 : let592 := by sumBounds [lean_s21, lean_s25, lean_s32]
            let lean_s34 := by timed congrHAdd lean_r88 lean_r61
            have lean_s35 : (Eq let522 let410) := by timed congrHAdd lean_r209 lean_s34
            have lean_s36 : (Eq let522 let6) := by timed Eq.trans lean_s35 lean_r207
            let lean_s37 := by timed flipCongrArg lean_s36 [LE.le]
            let lean_s38 := by timed congrHAdd lean_r5 lean_r30
            have lean_s39 : (Eq let591 let106) := by timed congrHAdd lean_r204 lean_s38
            have lean_s40 : (Eq let591 let105) := by timed Eq.trans lean_s39 lean_r32
            have lean_s41 : (Eq let592 let391) := by timed congr lean_s37 lean_s40
            have lean_s42 : (Eq let592 False) := by timed Eq.trans lean_s41 lean_r188
            show False from by timed eqResolve lean_s33 lean_s42
          ))
        have lean_s19 : let403 := by liftOrNToNeg lean_s18
        have lean_s20 : let520 := by timed Eq.symm lean_r200
        have lean_s21 : let404 := by timed eqResolve lean_s19 lean_s20
        have lean_s22 : let403 := by timed eqResolve lean_s21 lean_r200
        show False from by timed contradiction lean_a223 lean_s22
  ))))))
have lean_s19 : (Not (And let20 (And let40 let402))) := by liftOrNToNeg lean_s18
have lean_s20 : let590 := by timed flipNotAnd lean_s19 [let20, let40, let402]
have lean_s21 : let431 := by timed rfl
have lean_s22 : let381 := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [Eq]
have lean_s24 : (Eq let27 let381) := by timed congr lean_s23 lean_r7
have lean_s25 : (Eq let27 True) := by timed Eq.trans lean_s24 lean_r182
have lean_s26 : (Eq let28 True) := by timed Eq.trans lean_r6 lean_s25
have lean_s27 : let28 := by timed trueElim lean_s26
let lean_s28 := by timed congr lean_s21 lean_s27
have lean_s29 : (Eq let41 let41) := by timed rfl
let lean_s30 := by timed congr lean_s21 lean_s29
have lean_s31 : let432 := by timed rfl
let lean_s32 := by timed congr lean_s30 lean_s31
have lean_s33 : (Eq let590 let589) := by timed congr lean_s28 lean_s32
have lean_s34 : let589 := by timed eqResolve lean_s20 lean_s33
have lean_s35 : (Or let403 (Or let41 let19)) := by permutateOr lean_s34, [2, 1, 0], (- 1)
have lean_s36 : (Eq And And) := by timed rfl
have lean_s37 : (Eq let1 let1) := by timed rfl
let lean_s38 := by timed flipCongrArg lean_s37 [LE.le]
have lean_s39 : (Eq let259 let259) := by timed rfl
let lean_s40 := by timed flipCongrArg lean_s39 [HAdd.hAdd]
have lean_s41 : (Eq let394 let260) := by timed congr lean_s40 lean_r104
have lean_s42 : (Eq let395 let260) := by timed Eq.trans lean_r191 lean_s41
have lean_s43 : (Eq let426 let262) := by timed congr lean_s38 lean_s42
have lean_s44 : (Eq let426 let148) := by timed Eq.trans lean_s43 lean_r96
let lean_s45 := by timed congr lean_s36 lean_s44
let lean_s46 := by timed flipCongrArg lean_s42 [LE.le]
have lean_s47 : (Eq let256 let256) := by timed rfl
have lean_s48 : (Eq let425 let261) := by timed congr lean_s46 lean_s47
have lean_s49 : (Eq let425 let245) := by timed Eq.trans lean_s48 lean_r95
let lean_s50 := by timed congr lean_s36 lean_s49
have lean_s51 : (Eq let83 let83) := by timed rfl
let lean_s52 := by timed flipCongrArg lean_s51 [LE.le]
have lean_s53 : (Eq let90 let90) := by timed rfl
let lean_s54 := by timed flipCongrArg lean_s53 [HAdd.hAdd]
have lean_s55 : (Eq let270 let91) := by timed congr lean_s54 lean_r115
have lean_s56 : (Eq let271 let91) := by timed Eq.trans lean_r100 lean_s55
have lean_s57 : (Eq let424 let419) := by timed congr lean_s52 lean_s56
have lean_s58 : (Eq let424 let402) := by timed Eq.trans lean_s57 lean_r214
let lean_s59 := by timed congr lean_s36 lean_s58
let lean_s60 := by timed flipCongrArg lean_s56 [LE.le]
have lean_s61 : (Eq let264 let264) := by timed rfl
have lean_s62 : (Eq let423 let265) := by timed congr lean_s60 lean_s61
have lean_s63 : (Eq let423 let185) := by timed Eq.trans lean_s62 lean_r98
let lean_s64 := by timed congr lean_s59 lean_s63
let lean_s65 := by timed congr lean_s50 lean_s64
have lean_s66 : (Eq let427 let428) := by timed congr lean_s45 lean_s65
have lean_s67 : let428 := by timed eqResolve lean_a217 lean_s66
have lean_s68 : let402 := by andElim lean_s67, 2
let lean_s69 := by R2 lean_s35, lean_s68, let402, [(- 1), 0]
have lean_s70 : (Or let54 (Or let186 (Or let45 False))) :=
  (scope (fun lean_a224 : let53 =>
    (scope (fun lean_a225 : let185 =>
      (scope (fun lean_a226 : let41 =>
        have lean_s70 : (Eq let41 let285) := by timed Eq.symm lean_r109
        have lean_s71 : let285 := by timed eqResolve lean_a226 lean_s70
        have lean_s72 : let36 := by intTightUb lean_s71
        have lean_s73 : (Or let37 False) :=
          (scope (fun lean_a226 : let36 =>
            have lean_s73 : let325 := by timed trueElim lean_r142
            have lean_s74 : let587 := by timed And.intro lean_s73 lean_a226
            have lean_s75 : (Implies let587 let586) := by arithMulPos [y, let31, let7], 1
            have lean_s76 : let586 := by timed modusPonens lean_s74 lean_s75
            have lean_s77 : let135 := by timed trueElim lean_r46
            have lean_s78 : let458 := by timed Eq.symm lean_r77
            have lean_s79 : let213 := by timed eqResolve lean_a225 lean_s78
            have lean_s80 : let537 := by timed And.intro lean_s77 lean_s79
            have lean_s81 : let538 := by arithMulPos [let91, let60, let84], 0
            have lean_s82 : let536 := by timed modusPonens lean_s80 lean_s81
            have lean_s83 : let136 := by timed trueElim lean_r47
            have lean_s84 : let585 := by timed And.intro lean_s83 lean_a224
            have lean_s85 : (Implies let585 let584) := by arithMulNeg [x, let31, let34], 3
            have lean_s86 : let584 := by timed modusPonens lean_s84 lean_s85
            have lean_s87 : let226 := by sumBounds [lean_s76, lean_s82, lean_s86]
            have lean_s88 : (Eq let93 let93) := by timed rfl
            let lean_s89 := by timed congrHAdd lean_r57 lean_s88
            have lean_s90 : (Eq let140 let157) := by timed congrHAdd lean_r49 lean_s89
            have lean_s91 : (Eq let140 let6) := by timed Eq.trans lean_s90 lean_r52
            let lean_s92 := by timed flipCongrArg lean_s91 [GE.ge]
            let lean_s93 := by timed congrHAdd lean_r54 lean_r8
            have lean_s94 : (Eq let223 let198) := by timed congrHAdd lean_r85 lean_s93
            have lean_s95 : (Eq let223 let196) := by timed Eq.trans lean_s94 lean_r69
            have lean_s96 : (Eq let224 let409) := by timed congr lean_s92 lean_s95
            have lean_s97 : (Eq let224 True) := by timed Eq.trans lean_s96 lean_r205
            have lean_s98 : (Eq let225 let212) := by timed flipCongrArg lean_s97 [Not]
            have lean_s99 : (Eq let225 False) := by timed Eq.trans lean_s98 lean_r76
            have lean_s100 : (Eq let226 False) := by timed Eq.trans lean_r81 lean_s99
            show False from by timed eqResolve lean_s87 lean_s100
          ))
        have lean_s74 : let37 := by liftOrNToNeg lean_s73
        have lean_s75 : (Eq let37 let45) := by timed flipCongrArg lean_r10 [Not]
        have lean_s76 : (Eq let37 let40) := by timed Eq.trans lean_s75 lean_r13
        have lean_s77 : (Eq let38 let40) := by timed Eq.trans lean_r9 lean_s76
        have lean_s78 : (Eq let40 let38) := by timed Eq.symm lean_s77
        have lean_s79 : (Eq let37 let38) := by timed Eq.trans lean_s76 lean_s78
        have lean_s80 : let38 := by timed eqResolve lean_s74 lean_s79
        have lean_s81 : (Eq let40 let37) := by timed Eq.symm lean_s76
        have lean_s82 : let39 := by timed Eq.trans lean_s77 lean_s81
        have lean_s83 : let37 := by timed eqResolve lean_s80 lean_s82
        show False from by timed contradiction lean_s72 lean_s83
  ))))))
have lean_s71 : (Not (And let53 (And let185 let41))) := by liftOrNToNeg lean_s70
have lean_s72 : let583 := by timed flipNotAnd lean_s71 [let53, let185, let41]
have lean_s73 : let431 := by timed rfl
have lean_s74 : (Eq let54 let54) := by timed rfl
let lean_s75 := by timed congr lean_s73 lean_s74
let lean_s76 := by timed congr lean_s73 lean_s11
have lean_s77 : let48 := by timed rfl
let lean_s78 := by timed flipCongrArg lean_s77 [Eq]
have lean_s79 : (Eq let46 let48) := by timed congr lean_s78 lean_r13
have lean_s80 : (Eq let46 True) := by timed Eq.trans lean_s79 lean_r14
have lean_s81 : (Eq let47 True) := by timed Eq.trans lean_r12 lean_s80
have lean_s82 : let47 := by timed trueElim lean_s81
let lean_s83 := by timed congr lean_s76 lean_s82
have lean_s84 : (Eq let583 let582) := by timed congr lean_s75 lean_s83
have lean_s85 : let582 := by timed eqResolve lean_s72 lean_s84
have lean_s86 : (Or let184 (Or let54 let40)) := by permutateOr lean_s85, [1, 0, 2], (- 1)
have lean_s87 : let185 := by andElim lean_s67, 3
let lean_s88 := by R1 lean_s86, lean_s87, let184, [(- 1), 0]
have lean_s89 : (Or let66 (Or let55 let519)) :=
  (scope (fun lean_a227 : let65 =>
    (scope (fun lean_a228 : let54 =>
      (scope (fun lean_a229 : let402 =>
        have lean_s89 : let519 :=
          (scope (fun lean_a229 : let402 =>
            have lean_s89 : let335 := by timed trueElim lean_r151
            have lean_s90 : let530 := by timed And.intro lean_s89 lean_a229
            have lean_s91 : let531 := by arithMulNeg [let91, let83, let8], 3
            have lean_s92 : let529 := by timed modusPonens lean_s90 lean_s91
            have lean_s93 : let413 := by timed trueElim lean_r210
            have lean_s94 : (Eq let54 let327) := by timed Eq.symm lean_r144
            have lean_s95 : let327 := by timed eqResolve lean_a228 lean_s94
            have lean_s96 : let580 := by intTightUb lean_s95
            have lean_s97 : let581 := by timed And.intro lean_s93 lean_s96
            have lean_s98 : (Implies let581 let579) := by arithMulPos [x, let50, let51], 1
            have lean_s99 : let579 := by timed modusPonens lean_s97 lean_s98
            have lean_s100 : let417 := by timed trueElim lean_r212
            have lean_s101 : let578 := by timed And.intro lean_s100 lean_a227
            have lean_s102 : (Implies let578 let577) := by arithMulNeg [y, let31, let24], 3
            have lean_s103 : let577 := by timed modusPonens lean_s101 lean_s102
            have lean_s104 : let576 := by sumBounds [lean_s92, lean_s99, lean_s103]
            let lean_s105 := by timed congrHAdd lean_r61 lean_r88
            have lean_s106 : (Eq let560 let358) := by timed congrHAdd lean_r209 lean_s105
            have lean_s107 : (Eq let560 let6) := by timed Eq.trans lean_s106 lean_r167
            let lean_s108 := by timed flipCongrArg lean_s107 [LE.le]
            let lean_s109 := by timed congrHAdd lean_r15 lean_r51
            have lean_s110 : (Eq let575 let351) := by timed congrHAdd lean_r204 lean_s109
            have lean_s111 : (Eq let575 let158) := by timed Eq.trans lean_s110 lean_r162
            have lean_s112 : (Eq let576 let159) := by timed congr lean_s108 lean_s111
            have lean_s113 : (Eq let576 False) := by timed Eq.trans lean_s112 lean_r55
            show False from by timed eqResolve lean_s104 lean_s113
          ))
        have lean_s90 : let403 := by liftOrNToNeg lean_s89
        have lean_s91 : let520 := by timed Eq.symm lean_r200
        have lean_s92 : let404 := by timed eqResolve lean_s90 lean_s91
        have lean_s93 : let403 := by timed eqResolve lean_s92 lean_r200
        show False from by timed contradiction lean_a229 lean_s93
  ))))))
have lean_s90 : (Not (And let65 (And let54 let402))) := by liftOrNToNeg lean_s89
have lean_s91 : let574 := by timed flipNotAnd lean_s90 [let65, let54, let402]
have lean_s92 : let431 := by timed rfl
have lean_s93 : (Eq let66 let66) := by timed rfl
let lean_s94 := by timed congr lean_s92 lean_s93
have lean_s95 : let58 := by timed rfl
let lean_s96 := by timed flipCongrArg lean_s95 [Eq]
have lean_s97 : (Eq let56 let58) := by timed congr lean_s96 lean_r17
have lean_s98 : (Eq let56 True) := by timed Eq.trans lean_s97 lean_r18
have lean_s99 : (Eq let57 True) := by timed Eq.trans lean_r16 lean_s98
have lean_s100 : let57 := by timed trueElim lean_s99
let lean_s101 := by timed congr lean_s92 lean_s100
let lean_s102 := by timed congr lean_s101 lean_s31
have lean_s103 : (Eq let574 let573) := by timed congr lean_s94 lean_s102
have lean_s104 : let573 := by timed eqResolve lean_s91 lean_s103
have lean_s105 : (Or let403 (Or let53 let66)) := by permutateOr lean_s104, [2, 1, 0], (- 1)
have lean_s106 : (Or let186 (Or let72 (Or let68 False))) :=
  (scope (fun lean_a229 : let185 =>
    (scope (fun lean_a230 : let71 =>
      (scope (fun lean_a231 : let66 =>
        have lean_s106 : (Eq let66 let392) := by timed Eq.symm lean_r189
        have lean_s107 : let392 := by timed eqResolve lean_a231 lean_s106
        have lean_s108 : let67 := by intTightUb lean_s107
        have lean_s109 : (Or let414 False) :=
          (scope (fun lean_a231 : let67 =>
            have lean_s109 : let325 := by timed trueElim lean_r142
            have lean_s110 : let572 := by timed And.intro lean_s109 lean_a231
            have lean_s111 : (Implies let572 let571) := by arithMulPos [y, let50, let7], 1
            have lean_s112 : let571 := by timed modusPonens lean_s110 lean_s111
            have lean_s113 : let136 := by timed trueElim lean_r47
            have lean_s114 : let570 := by timed And.intro lean_s113 lean_a230
            have lean_s115 : (Implies let570 let569) := by arithMulNeg [x, let50, let34], 3
            have lean_s116 : let569 := by timed modusPonens lean_s114 lean_s115
            have lean_s117 : let135 := by timed trueElim lean_r46
            have lean_s118 : let458 := by timed Eq.symm lean_r77
            have lean_s119 : let213 := by timed eqResolve lean_a229 lean_s118
            have lean_s120 : let537 := by timed And.intro lean_s117 lean_s119
            have lean_s121 : let538 := by arithMulPos [let91, let60, let84], 0
            have lean_s122 : let536 := by timed modusPonens lean_s120 lean_s121
            have lean_s123 : let113 := by sumBounds [lean_s112, lean_s116, lean_s122]
            have lean_s124 : (Eq let93 let93) := by timed rfl
            let lean_s125 := by timed congrHAdd lean_s124 lean_r57
            have lean_s126 : (Eq let95 let324) := by timed congrHAdd lean_r49 lean_s125
            have lean_s127 : (Eq let95 let6) := by timed Eq.trans lean_s126 lean_r141
            let lean_s128 := by timed flipCongrArg lean_s127 [GE.ge]
            let lean_s129 := by timed congrHAdd lean_r36 lean_r54
            have lean_s130 : (Eq let110 let64) := by timed congrHAdd lean_r93 lean_s129
            have lean_s131 : (Eq let110 let59) := by timed Eq.trans lean_s130 lean_r19
            have lean_s132 : (Eq let111 let292) := by timed congr lean_s128 lean_s131
            have lean_s133 : (Eq let111 True) := by timed Eq.trans lean_s132 lean_r114
            have lean_s134 : (Eq let112 let212) := by timed flipCongrArg lean_s133 [Not]
            have lean_s135 : (Eq let112 False) := by timed Eq.trans lean_s134 lean_r76
            have lean_s136 : (Eq let113 False) := by timed Eq.trans lean_r34 lean_s135
            show False from by timed eqResolve lean_s123 lean_s136
          ))
        have lean_s110 : let414 := by liftOrNToNeg lean_s109
        have lean_s111 : (Eq let414 let68) := by timed flipCongrArg lean_r20 [Not]
        have lean_s112 : (Eq let414 let65) := by timed Eq.trans lean_s111 lean_r21
        have lean_s113 : (Eq let415 let65) := by timed Eq.trans lean_r211 lean_s112
        have lean_s114 : (Eq let65 let415) := by timed Eq.symm lean_s113
        have lean_s115 : (Eq let414 let415) := by timed Eq.trans lean_s112 lean_s114
        have lean_s116 : let415 := by timed eqResolve lean_s110 lean_s115
        have lean_s117 : (Eq let65 let414) := by timed Eq.symm lean_s112
        have lean_s118 : let416 := by timed Eq.trans lean_s113 lean_s117
        have lean_s119 : let414 := by timed eqResolve lean_s116 lean_s118
        show False from by timed contradiction lean_s108 lean_s119
  ))))))
have lean_s107 : (Not (And let185 (And let71 let66))) := by liftOrNToNeg lean_s106
have lean_s108 : let568 := by timed flipNotAnd lean_s107 [let185, let71, let66]
have lean_s109 : let431 := by timed rfl
let lean_s110 := by timed congr lean_s109 lean_s11
have lean_s111 : (Eq let72 let72) := by timed rfl
let lean_s112 := by timed congr lean_s109 lean_s111
have lean_s113 : let70 := by timed rfl
let lean_s114 := by timed flipCongrArg lean_s113 [Eq]
have lean_s115 : (Eq let199 let70) := by timed congr lean_s114 lean_r21
have lean_s116 : (Eq let199 True) := by timed Eq.trans lean_s115 lean_r22
have lean_s117 : (Eq let69 True) := by timed Eq.trans lean_r70 lean_s116
have lean_s118 : let69 := by timed trueElim lean_s117
let lean_s119 := by timed congr lean_s112 lean_s118
have lean_s120 : (Eq let568 let567) := by timed congr lean_s110 lean_s119
have lean_s121 : let567 := by timed eqResolve lean_s108 lean_s120
have lean_s122 : (Or let119 (Or let214 let519)) :=
  (scope (fun lean_a232 : let118 =>
    (scope (fun lean_a233 : let72 =>
      (scope (fun lean_a234 : let402 =>
        have lean_s122 : let519 :=
          (scope (fun lean_a234 : let402 =>
            have lean_s122 : let335 := by timed trueElim lean_r151
            have lean_s123 : let530 := by timed And.intro lean_s122 lean_a234
            have lean_s124 : let531 := by arithMulNeg [let91, let83, let8], 3
            have lean_s125 : let529 := by timed modusPonens lean_s123 lean_s124
            have lean_s126 : let413 := by timed trueElim lean_r210
            have lean_s127 : (Eq let72 let73) := by timed Eq.symm lean_r23
            have lean_s128 : let73 := by timed eqResolve lean_a233 lean_s127
            have lean_s129 : let565 := by intTightUb lean_s128
            have lean_s130 : let566 := by timed And.intro lean_s126 lean_s129
            have lean_s131 : (Implies let566 let564) := by arithMulPos [x, let75, let51], 1
            have lean_s132 : let564 := by timed modusPonens lean_s130 lean_s131
            have lean_s133 : let417 := by timed trueElim lean_r212
            have lean_s134 : let563 := by timed And.intro lean_s133 lean_a232
            have lean_s135 : (Implies let563 let562) := by arithMulNeg [y, let50, let24], 3
            have lean_s136 : let562 := by timed modusPonens lean_s134 lean_s135
            have lean_s137 : let561 := by sumBounds [lean_s125, lean_s132, lean_s136]
            let lean_s138 := by timed congrHAdd lean_r61 lean_r88
            have lean_s139 : (Eq let560 let358) := by timed congrHAdd lean_r209 lean_s138
            have lean_s140 : (Eq let560 let6) := by timed Eq.trans lean_s139 lean_r167
            let lean_s141 := by timed flipCongrArg lean_s140 [LE.le]
            let lean_s142 := by timed congrHAdd lean_r24 lean_r25
            have lean_s143 : (Eq let559 let81) := by timed congrHAdd lean_r204 lean_s142
            have lean_s144 : (Eq let559 let79) := by timed Eq.trans lean_s143 lean_r26
            have lean_s145 : (Eq let561 let82) := by timed congr lean_s141 lean_s144
            have lean_s146 : (Eq let561 False) := by timed Eq.trans lean_s145 lean_r27
            show False from by timed eqResolve lean_s137 lean_s146
          ))
        have lean_s123 : let403 := by liftOrNToNeg lean_s122
        have lean_s124 : let520 := by timed Eq.symm lean_r200
        have lean_s125 : let404 := by timed eqResolve lean_s123 lean_s124
        have lean_s126 : let403 := by timed eqResolve lean_s125 lean_r200
        show False from by timed contradiction lean_a234 lean_s126
  ))))))
have lean_s123 : (Not (And let118 (And let72 let402))) := by liftOrNToNeg lean_s122
have lean_s124 : let558 := by timed flipNotAnd lean_s123 [let118, let72, let402]
have lean_s125 : let431 := by timed rfl
have lean_s126 : (Eq let119 let119) := by timed rfl
let lean_s127 := by timed congr lean_s125 lean_s126
have lean_s128 : let299 := by timed rfl
let lean_s129 := by timed flipCongrArg lean_s128 [Eq]
have lean_s130 : (Eq let215 let299) := by timed congr lean_s129 lean_r134
have lean_s131 : (Eq let215 True) := by timed Eq.trans lean_s130 lean_r123
have lean_s132 : (Eq let216 True) := by timed Eq.trans lean_r78 lean_s131
have lean_s133 : let216 := by timed trueElim lean_s132
let lean_s134 := by timed congr lean_s125 lean_s133
let lean_s135 := by timed congr lean_s134 lean_s31
have lean_s136 : (Eq let558 let557) := by timed congr lean_s127 lean_s135
have lean_s137 : let557 := by timed eqResolve lean_s124 lean_s136
have lean_s138 : (Or let403 (Or let119 let71)) := by permutateOr lean_s137, [2, 0, 1], (- 1)
have lean_s139 : (Or let186 (Or let121 (Or let376 False))) :=
  (scope (fun lean_a234 : let185 =>
    (scope (fun lean_a235 : let120 =>
      (scope (fun lean_a236 : let119 =>
        have lean_s139 : (Eq let119 let310) := by timed Eq.symm lean_r131
        have lean_s140 : let310 := by timed eqResolve lean_a236 lean_s139
        have lean_s141 : let114 := by intTightUb lean_s140
        have lean_s142 : (Or let115 False) :=
          (scope (fun lean_a236 : let114 =>
            have lean_s142 : let325 := by timed trueElim lean_r142
            have lean_s143 : let556 := by timed And.intro lean_s142 lean_a236
            have lean_s144 : (Implies let556 let555) := by arithMulPos [y, let75, let7], 1
            have lean_s145 : let555 := by timed modusPonens lean_s143 lean_s144
            have lean_s146 : let136 := by timed trueElim lean_r47
            have lean_s147 : let554 := by timed And.intro lean_s146 lean_a235
            have lean_s148 : (Implies let554 let553) := by arithMulNeg [x, let75, let34], 3
            have lean_s149 : let553 := by timed modusPonens lean_s147 lean_s148
            have lean_s150 : let135 := by timed trueElim lean_r46
            have lean_s151 : let458 := by timed Eq.symm lean_r77
            have lean_s152 : let213 := by timed eqResolve lean_a234 lean_s151
            have lean_s153 : let537 := by timed And.intro lean_s150 lean_s152
            have lean_s154 : let538 := by arithMulPos [let91, let60, let84], 0
            have lean_s155 : let536 := by timed modusPonens lean_s153 lean_s154
            have lean_s156 : let98 := by sumBounds [lean_s145, lean_s149, lean_s155]
            have lean_s157 : (Eq let93 let93) := by timed rfl
            let lean_s158 := by timed congrHAdd lean_s157 lean_r57
            have lean_s159 : (Eq let95 let324) := by timed congrHAdd lean_r49 lean_s158
            have lean_s160 : (Eq let95 let6) := by timed Eq.trans lean_s159 lean_r141
            let lean_s161 := by timed flipCongrArg lean_s160 [GE.ge]
            let lean_s162 := by timed congrHAdd lean_r155 lean_r54
            have lean_s163 : (Eq let88 let104) := by timed congrHAdd lean_r29 lean_s162
            have lean_s164 : (Eq let88 let102) := by timed Eq.trans lean_s163 lean_r31
            have lean_s165 : (Eq let96 let107) := by timed congr lean_s161 lean_s164
            have lean_s166 : (Eq let96 True) := by timed Eq.trans lean_s165 lean_r33
            have lean_s167 : (Eq let97 let212) := by timed flipCongrArg lean_s166 [Not]
            have lean_s168 : (Eq let97 False) := by timed Eq.trans lean_s167 lean_r76
            have lean_s169 : (Eq let98 False) := by timed Eq.trans lean_r28 lean_s168
            show False from by timed eqResolve lean_s156 lean_s169
          ))
        have lean_s143 : let115 := by liftOrNToNeg lean_s142
        have lean_s144 : (Eq let115 let376) := by timed flipCongrArg lean_r37 [Not]
        have lean_s145 : (Eq let115 let118) := by timed Eq.trans lean_s144 lean_r178
        have lean_s146 : (Eq let116 let118) := by timed Eq.trans lean_r35 lean_s145
        have lean_s147 : (Eq let118 let116) := by timed Eq.symm lean_s146
        have lean_s148 : (Eq let115 let116) := by timed Eq.trans lean_s145 lean_s147
        have lean_s149 : let116 := by timed eqResolve lean_s143 lean_s148
        have lean_s150 : (Eq let118 let115) := by timed Eq.symm lean_s145
        have lean_s151 : let117 := by timed Eq.trans lean_s146 lean_s150
        have lean_s152 : let115 := by timed eqResolve lean_s149 lean_s151
        show False from by timed contradiction lean_s141 lean_s152
  ))))))
have lean_s140 : (Not (And let185 (And let120 let119))) := by liftOrNToNeg lean_s139
have lean_s141 : let552 := by timed flipNotAnd lean_s140 [let185, let120, let119]
have lean_s142 : let431 := by timed rfl
let lean_s143 := by timed congr lean_s142 lean_s11
have lean_s144 : (Eq let121 let121) := by timed rfl
let lean_s145 := by timed congr lean_s142 lean_s144
have lean_s146 : let337 := by timed rfl
let lean_s147 := by timed flipCongrArg lean_s146 [Eq]
have lean_s148 : (Eq let379 let337) := by timed congr lean_s147 lean_r178
have lean_s149 : (Eq let379 True) := by timed Eq.trans lean_s148 lean_r153
have lean_s150 : (Eq let377 True) := by timed Eq.trans lean_r180 lean_s149
have lean_s151 : let377 := by timed trueElim lean_s150
let lean_s152 := by timed congr lean_s145 lean_s151
have lean_s153 : (Eq let552 let551) := by timed congr lean_s143 lean_s152
have lean_s154 : let551 := by timed eqResolve lean_s141 lean_s153
have lean_s155 : (Or let129 (Or let133 let519)) :=
  (scope (fun lean_a237 : let121 =>
    (scope (fun lean_a238 : let132 =>
      (scope (fun lean_a239 : let402 =>
        have lean_s155 : let519 :=
          (scope (fun lean_a239 : let402 =>
            have lean_s155 : let335 := by timed trueElim lean_r151
            have lean_s156 : let530 := by timed And.intro lean_s155 lean_a239
            have lean_s157 : let531 := by arithMulNeg [let91, let83, let8], 3
            have lean_s158 : let529 := by timed modusPonens lean_s156 lean_s157
            have lean_s159 : let417 := by timed trueElim lean_r212
            have lean_s160 : let550 := by timed And.intro lean_s159 lean_a238
            have lean_s161 : (Implies let550 let549) := by arithMulNeg [y, let75, let24], 3
            have lean_s162 : let549 := by timed modusPonens lean_s160 lean_s161
            have lean_s163 : let413 := by timed trueElim lean_r210
            have lean_s164 : (Eq let121 let122) := by timed Eq.symm lean_r38
            have lean_s165 : let122 := by timed eqResolve lean_a237 lean_s164
            have lean_s166 : let547 := by intTightUb lean_s165
            have lean_s167 : let548 := by timed And.intro lean_s163 lean_s166
            have lean_s168 : (Implies let548 let546) := by arithMulPos [x, let83, let51], 1
            have lean_s169 : let546 := by timed modusPonens lean_s167 lean_s168
            have lean_s170 : let545 := by sumBounds [lean_s158, lean_s162, lean_s169]
            let lean_s171 := by timed congrHAdd lean_r88 lean_r61
            have lean_s172 : (Eq let522 let410) := by timed congrHAdd lean_r209 lean_s171
            have lean_s173 : (Eq let522 let6) := by timed Eq.trans lean_s172 lean_r207
            let lean_s174 := by timed flipCongrArg lean_s173 [LE.le]
            let lean_s175 := by timed congrHAdd lean_r39 lean_r40
            have lean_s176 : (Eq let544 let127) := by timed congrHAdd lean_r204 lean_s175
            have lean_s177 : (Eq let544 let126) := by timed Eq.trans lean_s176 lean_r41
            have lean_s178 : (Eq let545 let128) := by timed congr lean_s174 lean_s177
            have lean_s179 : (Eq let545 False) := by timed Eq.trans lean_s178 lean_r42
            show False from by timed eqResolve lean_s170 lean_s179
          ))
        have lean_s156 : let403 := by liftOrNToNeg lean_s155
        have lean_s157 : let520 := by timed Eq.symm lean_r200
        have lean_s158 : let404 := by timed eqResolve lean_s156 lean_s157
        have lean_s159 : let403 := by timed eqResolve lean_s158 lean_r200
        show False from by timed contradiction lean_a239 lean_s159
  ))))))
have lean_s156 : (Not (And let121 (And let132 let402))) := by liftOrNToNeg lean_s155
have lean_s157 : let543 := by timed flipNotAnd lean_s156 [let121, let132, let402]
have lean_s158 : let431 := by timed rfl
have lean_s159 : let359 := by timed rfl
let lean_s160 := by timed flipCongrArg lean_s159 [Eq]
have lean_s161 : (Eq let130 let359) := by timed congr lean_s160 lean_r44
have lean_s162 : (Eq let130 True) := by timed Eq.trans lean_s161 lean_r168
have lean_s163 : (Eq let131 True) := by timed Eq.trans lean_r43 lean_s162
have lean_s164 : let131 := by timed trueElim lean_s163
let lean_s165 := by timed congr lean_s158 lean_s164
have lean_s166 : (Eq let133 let133) := by timed rfl
let lean_s167 := by timed congr lean_s158 lean_s166
let lean_s168 := by timed congr lean_s167 lean_s31
have lean_s169 : (Eq let543 let542) := by timed congr lean_s165 lean_s168
have lean_s170 : let542 := by timed eqResolve lean_s157 lean_s169
have lean_s171 : (Or let403 (Or let133 let120)) := by permutateOr lean_s170, [2, 1, 0], (- 1)
have lean_s172 : (Or let267 (Or let186 (Or let420 False))) :=
  (scope (fun lean_a239 : let266 =>
    (scope (fun lean_a240 : let185 =>
      (scope (fun lean_a241 : let133 =>
        have lean_s172 : (Eq let133 let134) := by timed Eq.symm lean_r45
        have lean_s173 : let134 := by timed eqResolve lean_a241 lean_s172
        have lean_s174 : let386 := by intTightUb lean_s173
        have lean_s175 : (Or let387 False) :=
          (scope (fun lean_a241 : let386 =>
            have lean_s175 : let325 := by timed trueElim lean_r142
            have lean_s176 : let540 := by timed And.intro lean_s175 lean_a241
            have lean_s177 : (Implies let540 let539) := by arithMulPos [y, let83, let7], 1
            have lean_s178 : let539 := by timed modusPonens lean_s176 lean_s177
            have lean_s179 : let135 := by timed trueElim lean_r46
            have lean_s180 : let458 := by timed Eq.symm lean_r77
            have lean_s181 : let213 := by timed eqResolve lean_a240 lean_s180
            have lean_s182 : let537 := by timed And.intro lean_s179 lean_s181
            have lean_s183 : let538 := by arithMulPos [let91, let60, let84], 0
            have lean_s184 : let536 := by timed modusPonens lean_s182 lean_s183
            have lean_s185 : let136 := by timed trueElim lean_r47
            have lean_s186 : let535 := by timed And.intro lean_s185 lean_a239
            have lean_s187 : (Implies let535 let534) := by arithMulNeg [x, let83, let34], 3
            have lean_s188 : let534 := by timed modusPonens lean_s186 lean_s187
            have lean_s189 : let143 := by sumBounds [lean_s178, lean_s184, lean_s188]
            have lean_s190 : (Eq let93 let93) := by timed rfl
            let lean_s191 := by timed congrHAdd lean_r57 lean_s190
            have lean_s192 : (Eq let140 let157) := by timed congrHAdd lean_r49 lean_s191
            have lean_s193 : (Eq let140 let6) := by timed Eq.trans lean_s192 lean_r52
            let lean_s194 := by timed flipCongrArg lean_s193 [GE.ge]
            let lean_s195 := by timed congrHAdd lean_r54 lean_r56
            have lean_s196 : (Eq let139 let349) := by timed congrHAdd lean_r53 lean_s195
            have lean_s197 : (Eq let139 let348) := by timed Eq.trans lean_s196 lean_r160
            have lean_s198 : (Eq let141 let397) := by timed congr lean_s194 lean_s197
            have lean_s199 : (Eq let141 True) := by timed Eq.trans lean_s198 lean_r195
            have lean_s200 : (Eq let142 let212) := by timed flipCongrArg lean_s199 [Not]
            have lean_s201 : (Eq let142 False) := by timed Eq.trans lean_s200 lean_r76
            have lean_s202 : (Eq let143 False) := by timed Eq.trans lean_r48 lean_s201
            show False from by timed eqResolve lean_s189 lean_s202
          ))
        have lean_s176 : let387 := by liftOrNToNeg lean_s175
        have lean_s177 : (Eq let387 let420) := by timed flipCongrArg lean_r193 [Not]
        have lean_s178 : (Eq let387 let132) := by timed Eq.trans lean_s177 lean_r215
        have lean_s179 : (Eq let388 let132) := by timed Eq.trans lean_r186 lean_s178
        have lean_s180 : (Eq let132 let388) := by timed Eq.symm lean_s179
        have lean_s181 : (Eq let387 let388) := by timed Eq.trans lean_s178 lean_s180
        have lean_s182 : let388 := by timed eqResolve lean_s176 lean_s181
        have lean_s183 : (Eq let132 let387) := by timed Eq.symm lean_s178
        have lean_s184 : let389 := by timed Eq.trans lean_s179 lean_s183
        have lean_s185 : let387 := by timed eqResolve lean_s182 lean_s184
        show False from by timed contradiction lean_s174 lean_s185
  ))))))
have lean_s173 : (Not (And let266 (And let185 let133))) := by liftOrNToNeg lean_s172
have lean_s174 : let533 := by timed flipNotAnd lean_s173 [let266, let185, let133]
have lean_s175 : let431 := by timed rfl
have lean_s176 : (Eq let267 let267) := by timed rfl
let lean_s177 := by timed congr lean_s175 lean_s176
let lean_s178 := by timed congr lean_s175 lean_s11
have lean_s179 : let418 := by timed rfl
let lean_s180 := by timed flipCongrArg lean_s179 [Eq]
have lean_s181 : (Eq let422 let418) := by timed congr lean_s180 lean_r215
have lean_s182 : (Eq let422 True) := by timed Eq.trans lean_s181 lean_r213
have lean_s183 : (Eq let421 True) := by timed Eq.trans lean_r216 lean_s182
have lean_s184 : let421 := by timed trueElim lean_s183
let lean_s185 := by timed congr lean_s178 lean_s184
have lean_s186 : (Eq let533 let532) := by timed congr lean_s177 lean_s185
have lean_s187 : let532 := by timed eqResolve lean_s174 lean_s186
have lean_s188 : (Or let184 (Or let267 let132)) := by permutateOr lean_s187, [1, 0, 2], (- 1)
have lean_s189 : (Or let332 (Or let290 let519)) :=
  (scope (fun lean_a242 : let267 =>
    (scope (fun lean_a243 : let289 =>
      (scope (fun lean_a244 : let402 =>
        have lean_s189 : let519 :=
          (scope (fun lean_a244 : let402 =>
            have lean_s189 : let335 := by timed trueElim lean_r151
            have lean_s190 : let530 := by timed And.intro lean_s189 lean_a244
            have lean_s191 : let531 := by arithMulNeg [let91, let83, let8], 3
            have lean_s192 : let529 := by timed modusPonens lean_s190 lean_s191
            have lean_s193 : let417 := by timed trueElim lean_r212
            have lean_s194 : let528 := by timed And.intro lean_s193 lean_a243
            have lean_s195 : (Implies let528 let527) := by arithMulNeg [y, let1, let24], 3
            have lean_s196 : let527 := by timed modusPonens lean_s194 lean_s195
            have lean_s197 : let413 := by timed trueElim lean_r210
            have lean_s198 : (Eq let267 let268) := by timed Eq.symm lean_r99
            have lean_s199 : let268 := by timed eqResolve lean_a242 lean_s198
            have lean_s200 : let525 := by intTightUb lean_s199
            have lean_s201 : let526 := by timed And.intro lean_s197 lean_s200
            have lean_s202 : (Implies let526 let524) := by arithMulPos [x, let1, let51], 1
            have lean_s203 : let524 := by timed modusPonens lean_s201 lean_s202
            have lean_s204 : let523 := by sumBounds [lean_s192, lean_s196, lean_s203]
            let lean_s205 := by timed congrHAdd lean_r88 lean_r61
            have lean_s206 : (Eq let522 let410) := by timed congrHAdd lean_r209 lean_s205
            have lean_s207 : (Eq let522 let6) := by timed Eq.trans lean_s206 lean_r207
            let lean_s208 := by timed flipCongrArg lean_s207 [LE.le]
            let lean_s209 := by timed congrHAdd lean_r203 lean_r74
            have lean_s210 : (Eq let521 let322) := by timed congrHAdd lean_r204 lean_s209
            have lean_s211 : (Eq let521 let8) := by timed Eq.trans lean_s210 lean_r139
            have lean_s212 : (Eq let523 let405) := by timed congr lean_s208 lean_s211
            have lean_s213 : (Eq let523 False) := by timed Eq.trans lean_s212 lean_r201
            show False from by timed eqResolve lean_s204 lean_s213
          ))
        have lean_s190 : let403 := by liftOrNToNeg lean_s189
        have lean_s191 : let520 := by timed Eq.symm lean_r200
        have lean_s192 : let404 := by timed eqResolve lean_s190 lean_s191
        have lean_s193 : let403 := by timed eqResolve lean_s192 lean_r200
        show False from by timed contradiction lean_a244 lean_s193
  ))))))
have lean_s190 : (Not (And let267 (And let289 let402))) := by liftOrNToNeg lean_s189
have lean_s191 : let518 := by timed flipNotAnd lean_s190 [let267, let289, let402]
have lean_s192 : let431 := by timed rfl
have lean_s193 : let400 := by timed rfl
let lean_s194 := by timed flipCongrArg lean_s193 [Eq]
have lean_s195 : (Eq let333 let400) := by timed congr lean_s194 lean_r185
have lean_s196 : (Eq let333 True) := by timed Eq.trans lean_s195 lean_r198
have lean_s197 : (Eq let334 True) := by timed Eq.trans lean_r150 lean_s196
have lean_s198 : let334 := by timed trueElim lean_s197
let lean_s199 := by timed congr lean_s192 lean_s198
have lean_s200 : (Eq let290 let290) := by timed rfl
let lean_s201 := by timed congr lean_s192 lean_s200
let lean_s202 := by timed congr lean_s201 lean_s31
have lean_s203 : (Eq let518 let517) := by timed congr lean_s199 lean_s202
have lean_s204 : let517 := by timed eqResolve lean_s191 lean_s203
have lean_s205 : (Or let403 (Or let266 let290)) := by permutateOr lean_s204, [2, 0, 1], (- 1)
have lean_s206 : (Or let383 (Or let367 let445)) :=
  (scope (fun lean_a244 : let382 =>
    (scope (fun lean_a245 : let290 =>
      (scope (fun lean_a246 : let185 =>
        have lean_s206 : let458 := by timed Eq.symm lean_r77
        have lean_s207 : let213 := by timed eqResolve lean_a246 lean_s206
        have lean_s208 : let448 :=
          (scope (fun lean_a246 : let213 =>
            have lean_s208 : let325 := by timed trueElim lean_r142
            have lean_s209 : let456 := by timed And.intro lean_s208 lean_a246
            have lean_s210 : let457 := by arithMulPos [let91, let60, let7], 0
            have lean_s211 : let455 := by timed modusPonens lean_s209 lean_s210
            have lean_s212 : let263 := by timed trueElim lean_r97
            have lean_s213 : (Eq let290 let291) := by timed Eq.symm lean_r113
            have lean_s214 : let291 := by timed eqResolve lean_a245 lean_s213
            have lean_s215 : let514 := by intTightUb lean_s214
            have lean_s216 : let515 := by timed And.intro lean_s212 lean_s215
            have lean_s217 : (Implies let515 let513) := by arithMulPos [y, let153, let23], 1
            have lean_s218 : let513 := by timed modusPonens lean_s216 lean_s217
            have lean_s219 : let286 := by timed trueElim lean_r110
            have lean_s220 : let512 := by timed And.intro lean_s219 lean_a244
            have lean_s221 : (Implies let512 let511) := by arithMulNeg [x, let1, let228], 3
            have lean_s222 : let511 := by timed modusPonens lean_s220 lean_s221
            have lean_s223 : let315 := by sumBounds [lean_s211, lean_s218, lean_s222]
            let lean_s224 := by timed congrHAdd lean_r82 lean_r86
            have lean_s225 : (Eq let235 let195) := by timed congrHAdd lean_r66 lean_s224
            have lean_s226 : (Eq let235 let6) := by timed Eq.trans lean_s225 lean_r68
            let lean_s227 := by timed flipCongrArg lean_s226 [GE.ge]
            let lean_s228 := by timed congrHAdd lean_r121 lean_r119
            have lean_s229 : (Eq let312 let168) := by timed congrHAdd lean_r107 lean_s228
            have lean_s230 : (Eq let312 let166) := by timed Eq.trans lean_s229 lean_r60
            have lean_s231 : (Eq let313 let398) := by timed congr lean_s227 lean_s230
            have lean_s232 : (Eq let313 True) := by timed Eq.trans lean_s231 lean_r196
            have lean_s233 : (Eq let314 let212) := by timed flipCongrArg lean_s232 [Not]
            have lean_s234 : (Eq let314 False) := by timed Eq.trans lean_s233 lean_r76
            have lean_s235 : (Eq let315 False) := by timed Eq.trans lean_r133 lean_s234
            show False from by timed eqResolve lean_s223 lean_s235
          ))
        have lean_s209 : let446 := by liftOrNToNeg lean_s208
        have lean_s210 : (Eq let446 let186) := by timed flipCongrArg lean_r77 [Not]
        have lean_s211 : (Eq let446 let184) := by timed Eq.trans lean_s210 lean_r65
        have lean_s212 : let184 := by timed eqResolve lean_s209 lean_s211
        have lean_s213 : let447 := by timed Eq.symm lean_s211
        have lean_s214 : let446 := by timed eqResolve lean_s212 lean_s213
        show False from by timed contradiction lean_s207 lean_s214
  ))))))
have lean_s207 : (Not (And let382 (And let290 let185))) := by liftOrNToNeg lean_s206
have lean_s208 : let510 := by timed flipNotAnd lean_s207 [let382, let290, let185]
have lean_s209 : let431 := by timed rfl
have lean_s210 : (Eq let383 let383) := by timed rfl
let lean_s211 := by timed congr lean_s209 lean_s210
have lean_s212 : let390 := by timed rfl
let lean_s213 := by timed flipCongrArg lean_s212 [Eq]
have lean_s214 : (Eq let368 let390) := by timed congr lean_s213 lean_r194
have lean_s215 : (Eq let368 True) := by timed Eq.trans lean_s214 lean_r187
have lean_s216 : (Eq let369 True) := by timed Eq.trans lean_r174 lean_s215
have lean_s217 : let369 := by timed trueElim lean_s216
let lean_s218 := by timed congr lean_s209 lean_s217
let lean_s219 := by timed congr lean_s218 lean_s11
have lean_s220 : (Eq let510 let509) := by timed congr lean_s211 lean_s219
have lean_s221 : let509 := by timed eqResolve lean_s208 lean_s220
have lean_s222 : (Or let184 (Or let383 let289)) := by permutateOr lean_s221, [2, 0, 1], (- 1)
have lean_s223 : (Or let403 (Or let411 (Or let304 False))) :=
  (scope (fun lean_a247 : let402 =>
    (scope (fun lean_a248 : let383 =>
      (scope (fun lean_a249 : let276 =>
        have lean_s223 : let335 := by timed trueElim lean_r151
        have lean_s224 : let508 := by timed And.intro lean_s223 lean_a249
        have lean_s225 : (Implies let508 let507) := by arithMulNeg [y, let153, let8], 3
        have lean_s226 : let507 := by timed modusPonens lean_s224 lean_s225
        have lean_s227 : let331 := by timed trueElim lean_r149
        have lean_s228 : let470 := by timed And.intro lean_s227 lean_a247
        have lean_s229 : let471 := by arithMulNeg [let91, let83, let164], 3
        have lean_s230 : let469 := by timed modusPonens lean_s228 lean_s229
        have lean_s231 : let385 := by timed trueElim lean_r184
        have lean_s232 : (Eq let383 let384) := by timed Eq.symm lean_r183
        have lean_s233 : let384 := by timed eqResolve lean_a248 lean_s232
        have lean_s234 : let505 := by intTightUb lean_s233
        have lean_s235 : let506 := by timed And.intro lean_s231 lean_s234
        have lean_s236 : (Implies let506 let504) := by arithMulPos [x, let153, let33], 1
        have lean_s237 : let504 := by timed modusPonens lean_s235 lean_s236
        have lean_s238 : let503 := by sumBounds [lean_s226, lean_s230, lean_s237]
        have lean_s239 : (Eq let155 let155) := by timed rfl
        let lean_s240 := by timed congrHAdd lean_r90 lean_s239
        have lean_s241 : (Eq let464 let162) := by timed congrHAdd lean_r146 lean_s240
        have lean_s242 : (Eq let464 let6) := by timed Eq.trans lean_s241 lean_r58
        let lean_s243 := by timed flipCongrArg lean_s242 [LE.le]
        let lean_s244 := by timed congrHAdd lean_r120 lean_r179
        have lean_s245 : (Eq let502 let329) := by timed congrHAdd lean_r181 lean_s244
        have lean_s246 : (Eq let502 let301) := by timed Eq.trans lean_s245 lean_r147
        have lean_s247 : (Eq let503 let302) := by timed congr lean_s243 lean_s246
        have lean_s248 : (Eq let503 False) := by timed Eq.trans lean_s247 lean_r125
        show False from by timed eqResolve lean_s238 lean_s248
  ))))))
have lean_s224 : (Not (And let402 (And let383 let276))) := by liftOrNToNeg lean_s223
have lean_s225 : let501 := by timed flipNotAnd lean_s224 [let402, let383, let276]
have lean_s226 : let431 := by timed rfl
have lean_s227 : let432 := by timed rfl
let lean_s228 := by timed congr lean_s226 lean_s227
let lean_s229 := by timed congr lean_s226 lean_r208
have lean_s230 : (Eq let304 let304) := by timed rfl
let lean_s231 := by timed congr lean_s229 lean_s230
have lean_s232 : (Eq let501 let500) := by timed congr lean_s228 lean_s231
have lean_s233 : let500 := by timed eqResolve lean_s225 lean_s232
let lean_s234 := by R2 lean_s233, lean_s68, let402, [(- 1), 0]
have lean_s235 : (Or let305 (Or let172 let445)) :=
  (scope (fun lean_a249 : let304 =>
    (scope (fun lean_a250 : let171 =>
      (scope (fun lean_a251 : let185 =>
        have lean_s235 : let458 := by timed Eq.symm lean_r77
        have lean_s236 : let213 := by timed eqResolve lean_a251 lean_s235
        have lean_s237 : let448 :=
          (scope (fun lean_a251 : let213 =>
            have lean_s237 : let325 := by timed trueElim lean_r142
            have lean_s238 : let456 := by timed And.intro lean_s237 lean_a251
            have lean_s239 : let457 := by arithMulPos [let91, let60, let7], 0
            have lean_s240 : let455 := by timed modusPonens lean_s238 lean_s239
            have lean_s241 : let286 := by timed trueElim lean_r110
            have lean_s242 : let499 := by timed And.intro lean_s241 lean_a250
            have lean_s243 : (Implies let499 let498) := by arithMulNeg [x, let153, let228], 3
            have lean_s244 : let498 := by timed modusPonens lean_s242 lean_s243
            have lean_s245 : let263 := by timed trueElim lean_r97
            have lean_s246 : (Eq let304 let326) := by timed Eq.symm lean_r143
            have lean_s247 : let326 := by timed eqResolve lean_a249 lean_s246
            have lean_s248 : let496 := by intTightUb lean_s247
            have lean_s249 : let497 := by timed And.intro lean_s245 lean_s248
            have lean_s250 : (Implies let497 let495) := by arithMulPos [y, let175, let23], 1
            have lean_s251 : let495 := by timed modusPonens lean_s249 lean_s250
            have lean_s252 : let375 := by sumBounds [lean_s240, lean_s244, lean_s251]
            let lean_s253 := by timed congrHAdd lean_r86 lean_r82
            have lean_s254 : (Eq let339 let287) := by timed congrHAdd lean_r66 lean_s253
            have lean_s255 : (Eq let339 let6) := by timed Eq.trans lean_s254 lean_r111
            let lean_s256 := by timed flipCongrArg lean_s255 [GE.ge]
            let lean_s257 := by timed congrHAdd lean_r176 lean_r172
            have lean_s258 : (Eq let372 let363) := by timed congrHAdd lean_r107 lean_s257
            have lean_s259 : (Eq let372 let355) := by timed Eq.trans lean_s258 lean_r170
            have lean_s260 : (Eq let373 let356) := by timed congr lean_s256 lean_s259
            have lean_s261 : (Eq let373 True) := by timed Eq.trans lean_s260 lean_r166
            have lean_s262 : (Eq let374 let212) := by timed flipCongrArg lean_s261 [Not]
            have lean_s263 : (Eq let374 False) := by timed Eq.trans lean_s262 lean_r76
            have lean_s264 : (Eq let375 False) := by timed Eq.trans lean_r177 lean_s263
            show False from by timed eqResolve lean_s252 lean_s264
          ))
        have lean_s238 : let446 := by liftOrNToNeg lean_s237
        have lean_s239 : (Eq let446 let186) := by timed flipCongrArg lean_r77 [Not]
        have lean_s240 : (Eq let446 let184) := by timed Eq.trans lean_s239 lean_r65
        have lean_s241 : let184 := by timed eqResolve lean_s238 lean_s240
        have lean_s242 : let447 := by timed Eq.symm lean_s240
        have lean_s243 : let446 := by timed eqResolve lean_s241 lean_s242
        show False from by timed contradiction lean_s236 lean_s243
  ))))))
have lean_s236 : (Not (And let304 (And let171 let185))) := by liftOrNToNeg lean_s235
have lean_s237 : let494 := by timed flipNotAnd lean_s236 [let304, let171, let185]
have lean_s238 : let431 := by timed rfl
have lean_s239 : let277 := by timed rfl
let lean_s240 := by timed flipCongrArg lean_s239 [Eq]
have lean_s241 : (Eq let354 let277) := by timed congr lean_s240 lean_r127
have lean_s242 : (Eq let354 True) := by timed Eq.trans lean_s241 lean_r102
have lean_s243 : (Eq let306 True) := by timed Eq.trans lean_r165 lean_s242
have lean_s244 : let306 := by timed trueElim lean_s243
let lean_s245 := by timed congr lean_s238 lean_s244
have lean_s246 : (Eq let172 let172) := by timed rfl
let lean_s247 := by timed congr lean_s238 lean_s246
let lean_s248 := by timed congr lean_s247 lean_s11
have lean_s249 : (Eq let494 let493) := by timed congr lean_s245 lean_s248
have lean_s250 : let493 := by timed eqResolve lean_s237 lean_s249
have lean_s251 : (Or let184 (Or let276 let172)) := by permutateOr lean_s250, [2, 0, 1], (- 1)
have lean_s252 : (Or let173 (Or let403 let485)) :=
  (scope (fun lean_a251 : let172 =>
    (scope (fun lean_a252 : let402 =>
      (scope (fun lean_a253 : let318 =>
        have lean_s252 : let485 :=
          (scope (fun lean_a253 : let318 =>
            have lean_s252 : let335 := by timed trueElim lean_r151
            have lean_s253 : let492 := by timed And.intro lean_s252 lean_a253
            have lean_s254 : (Implies let492 let491) := by arithMulNeg [y, let175, let8], 3
            have lean_s255 : let491 := by timed modusPonens lean_s253 lean_s254
            have lean_s256 : let331 := by timed trueElim lean_r149
            have lean_s257 : let470 := by timed And.intro lean_s256 lean_a252
            have lean_s258 : let471 := by arithMulNeg [let91, let83, let164], 3
            have lean_s259 : let469 := by timed modusPonens lean_s257 lean_s258
            have lean_s260 : let385 := by timed trueElim lean_r184
            have lean_s261 : (Eq let172 let352) := by timed Eq.symm lean_r163
            have lean_s262 : let352 := by timed eqResolve lean_a251 lean_s261
            have lean_s263 : let489 := by intTightUb lean_s262
            have lean_s264 : let490 := by timed And.intro lean_s260 lean_s263
            have lean_s265 : (Implies let490 let488) := by arithMulPos [x, let175, let33], 1
            have lean_s266 : let488 := by timed modusPonens lean_s264 lean_s265
            have lean_s267 : let487 := by sumBounds [lean_s255, lean_s259, lean_s266]
            have lean_s268 : (Eq let155 let155) := by timed rfl
            let lean_s269 := by timed congrHAdd lean_r90 lean_s268
            have lean_s270 : (Eq let464 let162) := by timed congrHAdd lean_r146 lean_s269
            have lean_s271 : (Eq let464 let6) := by timed Eq.trans lean_s270 lean_r58
            let lean_s272 := by timed flipCongrArg lean_s271 [LE.le]
            let lean_s273 := by timed congrHAdd lean_r120 lean_r161
            have lean_s274 : (Eq let486 let347) := by timed congrHAdd lean_r72 lean_s273
            have lean_s275 : (Eq let486 let344) := by timed Eq.trans lean_s274 lean_r159
            have lean_s276 : (Eq let487 let345) := by timed congr lean_s272 lean_s275
            have lean_s277 : (Eq let487 False) := by timed Eq.trans lean_s276 lean_r157
            show False from by timed eqResolve lean_s267 lean_s277
          ))
        have lean_s253 : let319 := by liftOrNToNeg lean_s252
        have lean_s254 : let479 := by timed Eq.symm lean_r148
        have lean_s255 : let330 := by timed eqResolve lean_s253 lean_s254
        have lean_s256 : let319 := by timed eqResolve lean_s255 lean_r148
        show False from by timed contradiction lean_a253 lean_s256
  ))))))
have lean_s253 : (Not (And let172 (And let402 let318))) := by liftOrNToNeg lean_s252
have lean_s254 : let484 := by timed flipNotAnd lean_s253 [let172, let402, let318]
have lean_s255 : let431 := by timed rfl
have lean_s256 : let282 := by timed rfl
let lean_s257 := by timed flipCongrArg lean_s256 [Eq]
have lean_s258 : (Eq let396 let282) := by timed congr lean_s257 lean_r62
have lean_s259 : (Eq let396 True) := by timed Eq.trans lean_s258 lean_r105
have lean_s260 : (Eq let174 True) := by timed Eq.trans lean_r192 lean_s259
have lean_s261 : let174 := by timed trueElim lean_s260
let lean_s262 := by timed congr lean_s255 lean_s261
let lean_s263 := by timed congr lean_s255 lean_s31
have lean_s264 : (Eq let319 let319) := by timed rfl
let lean_s265 := by timed congr lean_s263 lean_s264
have lean_s266 : (Eq let484 let483) := by timed congr lean_s262 lean_s265
have lean_s267 : let483 := by timed eqResolve lean_s254 lean_s266
have lean_s268 : (Or let403 (Or let171 let319)) := by permutateOr lean_s267, [1, 0, 2], (- 1)
have lean_s269 : (Or let320 (Or let177 let445)) :=
  (scope (fun lean_a253 : let319 =>
    (scope (fun lean_a254 : let176 =>
      (scope (fun lean_a255 : let185 =>
        have lean_s269 : let458 := by timed Eq.symm lean_r77
        have lean_s270 : let213 := by timed eqResolve lean_a255 lean_s269
        have lean_s271 : let448 :=
          (scope (fun lean_a255 : let213 =>
            have lean_s271 : let325 := by timed trueElim lean_r142
            have lean_s272 : let456 := by timed And.intro lean_s271 lean_a255
            have lean_s273 : let457 := by arithMulPos [let91, let60, let7], 0
            have lean_s274 : let455 := by timed modusPonens lean_s272 lean_s273
            have lean_s275 : let286 := by timed trueElim lean_r110
            have lean_s276 : let481 := by timed And.intro lean_s275 lean_a254
            have lean_s277 : (Implies let481 let480) := by arithMulNeg [x, let175, let228], 3
            have lean_s278 : let480 := by timed modusPonens lean_s276 lean_s277
            have lean_s279 : let263 := by timed trueElim lean_r97
            have lean_s280 : let479 := by timed Eq.symm lean_r148
            have lean_s281 : let330 := by timed eqResolve lean_a253 lean_s280
            have lean_s282 : let477 := by intTightUb lean_s281
            have lean_s283 : let478 := by timed And.intro lean_s279 lean_s282
            have lean_s284 : (Implies let478 let476) := by arithMulPos [y, let180, let23], 1
            have lean_s285 : let476 := by timed modusPonens lean_s283 lean_s284
            have lean_s286 : let342 := by sumBounds [lean_s274, lean_s278, lean_s285]
            let lean_s287 := by timed congrHAdd lean_r86 lean_r82
            have lean_s288 : (Eq let339 let287) := by timed congrHAdd lean_r66 lean_s287
            have lean_s289 : (Eq let339 let6) := by timed Eq.trans lean_s288 lean_r111
            let lean_s290 := by timed flipCongrArg lean_s289 [GE.ge]
            let lean_s291 := by timed congrHAdd lean_r92 lean_r84
            have lean_s292 : (Eq let338 let309) := by timed congrHAdd lean_r107 lean_s291
            have lean_s293 : (Eq let338 let200) := by timed Eq.trans lean_s292 lean_r130
            have lean_s294 : (Eq let340 let201) := by timed congr lean_s290 lean_s293
            have lean_s295 : (Eq let340 True) := by timed Eq.trans lean_s294 lean_r71
            have lean_s296 : (Eq let341 let212) := by timed flipCongrArg lean_s295 [Not]
            have lean_s297 : (Eq let341 False) := by timed Eq.trans lean_s296 lean_r76
            have lean_s298 : (Eq let342 False) := by timed Eq.trans lean_r154 lean_s297
            show False from by timed eqResolve lean_s286 lean_s298
          ))
        have lean_s272 : let446 := by liftOrNToNeg lean_s271
        have lean_s273 : (Eq let446 let186) := by timed flipCongrArg lean_r77 [Not]
        have lean_s274 : (Eq let446 let184) := by timed Eq.trans lean_s273 lean_r65
        have lean_s275 : let184 := by timed eqResolve lean_s272 lean_s274
        have lean_s276 : let447 := by timed Eq.symm lean_s274
        have lean_s277 : let446 := by timed eqResolve lean_s275 lean_s276
        show False from by timed contradiction lean_s270 lean_s277
  ))))))
have lean_s270 : (Not (And let319 (And let176 let185))) := by liftOrNToNeg lean_s269
have lean_s271 : let475 := by timed flipNotAnd lean_s270 [let319, let176, let185]
have lean_s272 : let431 := by timed rfl
have lean_s273 : let336 := by timed rfl
let lean_s274 := by timed flipCongrArg lean_s273 [Eq]
have lean_s275 : (Eq let323 let336) := by timed congr lean_s274 lean_r138
have lean_s276 : (Eq let323 True) := by timed Eq.trans lean_s275 lean_r152
have lean_s277 : (Eq let321 True) := by timed Eq.trans lean_r140 lean_s276
have lean_s278 : let321 := by timed trueElim lean_s277
let lean_s279 := by timed congr lean_s272 lean_s278
have lean_s280 : (Eq let177 let177) := by timed rfl
let lean_s281 := by timed congr lean_s272 lean_s280
let lean_s282 := by timed congr lean_s281 lean_s11
have lean_s283 : (Eq let475 let474) := by timed congr lean_s279 lean_s282
have lean_s284 : let474 := by timed eqResolve lean_s271 lean_s283
have lean_s285 : (Or let184 (Or let318 let177)) := by permutateOr lean_s284, [2, 0, 1], (- 1)
have lean_s286 : (Or let178 (Or let403 let462)) :=
  (scope (fun lean_a255 : let177 =>
    (scope (fun lean_a256 : let402 =>
      (scope (fun lean_a257 : let181 =>
        have lean_s286 : let462 :=
          (scope (fun lean_a257 : let181 =>
            have lean_s286 : let335 := by timed trueElim lean_r151
            have lean_s287 : let473 := by timed And.intro lean_s286 lean_a257
            have lean_s288 : (Implies let473 let472) := by arithMulNeg [y, let180, let8], 3
            have lean_s289 : let472 := by timed modusPonens lean_s287 lean_s288
            have lean_s290 : let331 := by timed trueElim lean_r149
            have lean_s291 : let470 := by timed And.intro lean_s290 lean_a256
            have lean_s292 : let471 := by arithMulNeg [let91, let83, let164], 3
            have lean_s293 : let469 := by timed modusPonens lean_s291 lean_s292
            have lean_s294 : let385 := by timed trueElim lean_r184
            have lean_s295 : (Eq let177 let399) := by timed Eq.symm lean_r197
            have lean_s296 : let399 := by timed eqResolve lean_a255 lean_s295
            have lean_s297 : let467 := by intTightUb lean_s296
            have lean_s298 : let468 := by timed And.intro lean_s294 lean_s297
            have lean_s299 : (Implies let468 let466) := by arithMulPos [x, let180, let33], 1
            have lean_s300 : let466 := by timed modusPonens lean_s298 lean_s299
            have lean_s301 : let465 := by sumBounds [lean_s289, lean_s293, lean_s300]
            have lean_s302 : (Eq let155 let155) := by timed rfl
            let lean_s303 := by timed congrHAdd lean_r90 lean_s302
            have lean_s304 : (Eq let464 let162) := by timed congrHAdd lean_r146 lean_s303
            have lean_s305 : (Eq let464 let6) := by timed Eq.trans lean_s304 lean_r58
            let lean_s306 := by timed flipCongrArg lean_s305 [LE.le]
            let lean_s307 := by timed congrHAdd lean_r120 lean_r132
            have lean_s308 : (Eq let463 let165) := by timed congrHAdd lean_r129 lean_s307
            have lean_s309 : (Eq let463 let163) := by timed Eq.trans lean_s308 lean_r59
            have lean_s310 : (Eq let465 let346) := by timed congr lean_s306 lean_s309
            have lean_s311 : (Eq let465 False) := by timed Eq.trans lean_s310 lean_r158
            show False from by timed eqResolve lean_s301 lean_s311
          ))
        have lean_s287 : let182 := by liftOrNToNeg lean_s286
        have lean_s288 : let454 := by timed Eq.symm lean_r64
        have lean_s289 : let183 := by timed eqResolve lean_s287 lean_s288
        have lean_s290 : let182 := by timed eqResolve lean_s289 lean_r64
        show False from by timed contradiction lean_a257 lean_s290
  ))))))
have lean_s287 : (Not (And let177 (And let402 let181))) := by liftOrNToNeg lean_s286
have lean_s288 : let461 := by timed flipNotAnd lean_s287 [let177, let402, let181]
have lean_s289 : let431 := by timed rfl
have lean_s290 : let283 := by timed rfl
let lean_s291 := by timed flipCongrArg lean_s290 [Eq]
have lean_s292 : (Eq let393 let283) := by timed congr lean_s291 lean_r63
have lean_s293 : (Eq let393 True) := by timed Eq.trans lean_s292 lean_r106
have lean_s294 : (Eq let179 True) := by timed Eq.trans lean_r190 lean_s293
have lean_s295 : let179 := by timed trueElim lean_s294
let lean_s296 := by timed congr lean_s289 lean_s295
let lean_s297 := by timed congr lean_s289 lean_s31
have lean_s298 : (Eq let182 let182) := by timed rfl
let lean_s299 := by timed congr lean_s297 lean_s298
have lean_s300 : (Eq let461 let460) := by timed congr lean_s296 lean_s299
have lean_s301 : let460 := by timed eqResolve lean_s288 lean_s300
have lean_s302 : (Or let403 (Or let176 let182)) := by permutateOr lean_s301, [1, 0, 2], (- 1)
have lean_s303 : (Or let273 (Or let217 let445)) :=
  (scope (fun lean_a257 : let272 =>
    (scope (fun lean_a258 : let182 =>
      (scope (fun lean_a259 : let185 =>
        have lean_s303 : let458 := by timed Eq.symm lean_r77
        have lean_s304 : let213 := by timed eqResolve lean_a259 lean_s303
        have lean_s305 : let448 :=
          (scope (fun lean_a259 : let213 =>
            have lean_s305 : let325 := by timed trueElim lean_r142
            have lean_s306 : let456 := by timed And.intro lean_s305 lean_a259
            have lean_s307 : let457 := by arithMulPos [let91, let60, let7], 0
            have lean_s308 : let455 := by timed modusPonens lean_s306 lean_s307
            have lean_s309 : let263 := by timed trueElim lean_r97
            have lean_s310 : let454 := by timed Eq.symm lean_r64
            have lean_s311 : let183 := by timed eqResolve lean_a258 lean_s310
            have lean_s312 : let452 := by intTightUb lean_s311
            have lean_s313 : let453 := by timed And.intro lean_s309 lean_s312
            have lean_s314 : (Implies let453 let451) := by arithMulPos [y, let230, let23], 1
            have lean_s315 : let451 := by timed modusPonens lean_s313 lean_s314
            have lean_s316 : let286 := by timed trueElim lean_r110
            have lean_s317 : let450 := by timed And.intro lean_s316 lean_a257
            have lean_s318 : (Implies let450 let449) := by arithMulNeg [x, let180, let228], 3
            have lean_s319 : let449 := by timed modusPonens lean_s317 lean_s318
            have lean_s320 : let238 := by sumBounds [lean_s308, lean_s315, lean_s319]
            let lean_s321 := by timed congrHAdd lean_r82 lean_r86
            have lean_s322 : (Eq let235 let195) := by timed congrHAdd lean_r66 lean_s321
            have lean_s323 : (Eq let235 let6) := by timed Eq.trans lean_s322 lean_r68
            let lean_s324 := by timed flipCongrArg lean_s323 [GE.ge]
            let lean_s325 := by timed congrHAdd lean_r116 lean_r206
            have lean_s326 : (Eq let233 let204) := by timed congrHAdd lean_r107 lean_s325
            have lean_s327 : (Eq let233 let203) := by timed Eq.trans lean_s326 lean_r73
            have lean_s328 : (Eq let236 let298) := by timed congr lean_s324 lean_s327
            have lean_s329 : (Eq let236 True) := by timed Eq.trans lean_s328 lean_r122
            have lean_s330 : (Eq let237 let212) := by timed flipCongrArg lean_s329 [Not]
            have lean_s331 : (Eq let237 False) := by timed Eq.trans lean_s330 lean_r76
            have lean_s332 : (Eq let238 False) := by timed Eq.trans lean_r83 lean_s331
            show False from by timed eqResolve lean_s320 lean_s332
          ))
        have lean_s306 : let446 := by liftOrNToNeg lean_s305
        have lean_s307 : (Eq let446 let186) := by timed flipCongrArg lean_r77 [Not]
        have lean_s308 : (Eq let446 let184) := by timed Eq.trans lean_s307 lean_r65
        have lean_s309 : let184 := by timed eqResolve lean_s306 lean_s308
        have lean_s310 : let447 := by timed Eq.symm lean_s308
        have lean_s311 : let446 := by timed eqResolve lean_s309 lean_s310
        show False from by timed contradiction lean_s304 lean_s311
  ))))))
have lean_s304 : (Not (And let272 (And let182 let185))) := by liftOrNToNeg lean_s303
have lean_s305 : let444 := by timed flipNotAnd lean_s304 [let272, let182, let185]
have lean_s306 : let431 := by timed rfl
have lean_s307 : (Eq let273 let273) := by timed rfl
let lean_s308 := by timed congr lean_s306 lean_s307
have lean_s309 : let300 := by timed rfl
let lean_s310 := by timed flipCongrArg lean_s309 [Eq]
have lean_s311 : (Eq let218 let300) := by timed congr lean_s310 lean_r135
have lean_s312 : (Eq let218 True) := by timed Eq.trans lean_s311 lean_r124
have lean_s313 : (Eq let219 True) := by timed Eq.trans lean_r79 lean_s312
have lean_s314 : let219 := by timed trueElim lean_s313
let lean_s315 := by timed congr lean_s306 lean_s314
let lean_s316 := by timed congr lean_s315 lean_s11
have lean_s317 : (Eq let444 let443) := by timed congr lean_s308 lean_s316
have lean_s318 : let443 := by timed eqResolve lean_s305 lean_s317
have lean_s319 : (Or let184 (Or let181 let273)) := by permutateOr lean_s318, [2, 1, 0], (- 1)
have lean_s320 : (Or let403 (Or let274 (Or let246 False))) :=
  (scope (fun lean_a259 : let402 =>
    (scope (fun lean_a260 : let273 =>
      (scope (fun lean_a261 : let245 =>
        have lean_s320 : (Eq let245 let293) := by timed Eq.symm lean_r117
        have lean_s321 : let293 := by timed eqResolve lean_a261 lean_s320
        have lean_s322 : let294 := by intTightUb lean_s321
        have lean_s323 : (Or let360 False) :=
          (scope (fun lean_a261 : let294 =>
            have lean_s323 : let325 := by timed trueElim lean_r142
            have lean_s324 : let442 := by timed And.intro lean_s323 lean_a261
            have lean_s325 : (Implies let442 let441) := by arithMulPos [let147, let50, let7], 1
            have lean_s326 : let441 := by timed modusPonens lean_s324 lean_s325
            have lean_s327 : let343 := by timed trueElim lean_r156
            have lean_s328 : (Eq let273 let317) := by timed Eq.symm lean_r137
            have lean_s329 : let317 := by timed eqResolve lean_a260 lean_s328
            have lean_s330 : let439 := by intTightUb lean_s329
            have lean_s331 : let440 := by timed And.intro lean_s327 lean_s330
            have lean_s332 : (Implies let440 let438) := by arithMulPos [x, let230, let42], 1
            have lean_s333 : let438 := by timed modusPonens lean_s331 lean_s332
            have lean_s334 : let366 := by timed trueElim lean_r173
            have lean_s335 : let437 := by timed And.intro lean_s334 lean_a259
            have lean_s336 : (Implies let437 let436) := by arithMulNeg [let91, let83, let220], 3
            have lean_s337 : let436 := by timed modusPonens lean_s335 lean_s336
            have lean_s338 : let435 := by sumBounds [lean_s326, lean_s333, lean_s337]
            have lean_s339 : (Eq let253 let253) := by timed rfl
            let lean_s340 := by timed congrHAdd lean_s339 lean_r108
            have lean_s341 : (Eq let434 let255) := by timed congrHAdd lean_r136 lean_s340
            have lean_s342 : (Eq let434 let6) := by timed Eq.trans lean_s341 lean_r94
            let lean_s343 := by timed flipCongrArg lean_s342 [LE.le]
            let lean_s344 := by timed congrHAdd lean_r128 lean_r80
            have lean_s345 : (Eq let433 let279) := by timed congrHAdd lean_r93 lean_s344
            have lean_s346 : (Eq let433 let240) := by timed Eq.trans lean_s345 lean_r103
            have lean_s347 : (Eq let435 let241) := by timed congr lean_s343 lean_s346
            have lean_s348 : (Eq let435 False) := by timed Eq.trans lean_s347 lean_r87
            show False from by timed eqResolve lean_s338 lean_s348
          ))
        have lean_s324 : let360 := by liftOrNToNeg lean_s323
        have lean_s325 : (Eq let360 let246) := by timed flipCongrArg lean_r118 [Not]
        have lean_s326 : (Eq let360 let244) := by timed Eq.trans lean_s325 lean_r145
        have lean_s327 : (Eq let361 let244) := by timed Eq.trans lean_r169 lean_s326
        have lean_s328 : (Eq let244 let361) := by timed Eq.symm lean_s327
        have lean_s329 : (Eq let360 let361) := by timed Eq.trans lean_s326 lean_s328
        have lean_s330 : let361 := by timed eqResolve lean_s324 lean_s329
        have lean_s331 : (Eq let244 let360) := by timed Eq.symm lean_s326
        have lean_s332 : let362 := by timed Eq.trans lean_s327 lean_s331
        have lean_s333 : let360 := by timed eqResolve lean_s330 lean_s332
        show False from by timed contradiction lean_s322 lean_s333
  ))))))
have lean_s321 : (Not (And let402 (And let273 let245))) := by liftOrNToNeg lean_s320
have lean_s322 : let430 := by timed flipNotAnd lean_s321 [let402, let273, let245]
have lean_s323 : let431 := by timed rfl
let lean_s324 := by timed congr lean_s323 lean_s31
have lean_s325 : let353 := by timed rfl
let lean_s326 := by timed flipCongrArg lean_s325 [Eq]
have lean_s327 : (Eq let303 let353) := by timed congr lean_s326 lean_r101
have lean_s328 : (Eq let303 True) := by timed Eq.trans lean_s327 lean_r164
have lean_s329 : (Eq let275 True) := by timed Eq.trans lean_r126 lean_s328
have lean_s330 : let275 := by timed trueElim lean_s329
let lean_s331 := by timed congr lean_s323 lean_s330
have lean_s332 : let250 := by timed rfl
let lean_s333 := by timed flipCongrArg lean_s332 [Eq]
have lean_s334 : (Eq let247 let250) := by timed congr lean_s333 lean_r145
have lean_s335 : (Eq let247 True) := by timed Eq.trans lean_s334 lean_r91
have lean_s336 : (Eq let248 True) := by timed Eq.trans lean_r89 lean_s335
have lean_s337 : let248 := by timed trueElim lean_s336
let lean_s338 := by timed congr lean_s331 lean_s337
have lean_s339 : (Eq let430 let429) := by timed congr lean_s324 lean_s338
have lean_s340 : let429 := by timed eqResolve lean_s322 lean_s339
have lean_s341 : (Or let244 (Or let403 let272)) := by permutateOr lean_s340, [2, 0, 1], (- 1)
let lean_s342 := by R2 lean_s341, lean_s68, let402, [(- 1), 0]
have lean_s343 : let245 := by andElim lean_s67, 1
have lean_s344 : let272 := by R1 lean_s342, lean_s343, let244, [(- 1), 0]
let lean_s345 := by R2 lean_s319, lean_s344, let272, [(- 1), 0]
have lean_s346 : let181 := by R1 lean_s345, lean_s87, let184, [(- 1), 0]
let lean_s347 := by R2 lean_s302, lean_s346, let181, [(- 1), 0]
have lean_s348 : let176 := by R2 lean_s347, lean_s68, let402, [(- 1), 0]
let lean_s349 := by R2 lean_s285, lean_s348, let176, [(- 1), 0]
have lean_s350 : let318 := by R1 lean_s349, lean_s87, let184, [(- 1), 0]
let lean_s351 := by R2 lean_s268, lean_s350, let318, [(- 1), 0]
have lean_s352 : let171 := by R2 lean_s351, lean_s68, let402, [(- 1), 0]
let lean_s353 := by R2 lean_s251, lean_s352, let171, [(- 1), 0]
have lean_s354 : let276 := by R1 lean_s353, lean_s87, let184, [(- 1), 0]
have lean_s355 : let382 := by R2 lean_s234, lean_s354, let276, [(- 1), 0]
let lean_s356 := by R2 lean_s222, lean_s355, let382, [(- 1), 0]
have lean_s357 : let289 := by R1 lean_s356, lean_s87, let184, [(- 1), 0]
let lean_s358 := by R2 lean_s205, lean_s357, let289, [(- 1), 0]
have lean_s359 : let266 := by R2 lean_s358, lean_s68, let402, [(- 1), 0]
let lean_s360 := by R2 lean_s188, lean_s359, let266, [(- 1), 0]
have lean_s361 : let132 := by R1 lean_s360, lean_s87, let184, [(- 1), 0]
let lean_s362 := by R2 lean_s171, lean_s361, let132, [(- 1), 0]
have lean_s363 : let120 := by R2 lean_s362, lean_s68, let402, [(- 1), 0]
let lean_s364 := by R2 lean_s154, lean_s363, let120, [(- 1), 0]
have lean_s365 : let118 := by R1 lean_s364, lean_s87, let184, [(- 1), 0]
let lean_s366 := by R2 lean_s138, lean_s365, let118, [(- 1), 0]
have lean_s367 : let71 := by R2 lean_s366, lean_s68, let402, [(- 1), 0]
let lean_s368 := by R2 lean_s121, lean_s367, let71, [(- 1), 0]
have lean_s369 : let65 := by R1 lean_s368, lean_s87, let184, [(- 1), 0]
let lean_s370 := by R2 lean_s105, lean_s369, let65, [(- 1), 0]
have lean_s371 : let53 := by R2 lean_s370, lean_s68, let402, [(- 1), 0]
have lean_s372 : let40 := by R2 lean_s88, lean_s371, let53, [(- 1), 0]
have lean_s373 : let19 := by R2 lean_s69, lean_s372, let40, [(- 1), 0]
let lean_s374 := by R2 lean_s17, lean_s373, let19, [(- 1), 0]
let lean_s375 := by R1 lean_s374, lean_s87, let184, [(- 1), 0]
have lean_s376 : let148 := by andElim lean_s67, 0
exact (show False from by R2 lean_s375, lean_s376, let148, [0, 0])


