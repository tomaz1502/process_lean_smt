open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {x2 : Int}
variable {x5 : Int}
variable {x3 : Int}
variable {x4 : Int}
variable {x1 : Int}
variable {x2 : Int}
variable {x6 : Int}
variable {x3 : Int}
variable {x1 : Int}
variable {x4 : Int}
variable {x5 : Int}
variable {x6 : Int}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 41920000000)
  let let3 := (Int.ofNat 1)
  let let4 := (binrel% HDiv.hDiv let3 let2)
  let let5 := (binrel% GT.gt let4 let1)
  let let6 := (Neg.neg (Rat.ofInt 1003))
  let let7 := (binrel% LT.lt let6 let1)
  let let8 := (Int.ofNat 1310)
  let let9 := (binrel% HDiv.hDiv let3 let8)
  let let10 := (binrel% HMul.hMul let9 let3)
  let let11 := (Int.ofNat 1000)
  let let12 := (binrel% HMul.hMul let6 let11)
  let let13 := (binrel% HDiv.hDiv let3 (Int.ofNat 5240000))
  let let14 := (binrel% HMul.hMul let13 let3)
  let let15 := (Neg.neg let4)
  let let16 := (binrel% HMul.hMul let15 let1)
  let let17 := (binrel% HMul.hMul let4 let3)
  let let18 := (binrel% HMul.hMul let4 let1)
  let let19 := (Rat.ofInt 1)
  let let20 := (binrel% HMul.hMul let19 let3)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let12 let10))))))
  let let22 := (Neg.neg let3)
  let let23 := (binrel% HMul.hMul let22 x3)
  let let24 := (binrel% HMul.hMul let8 x2)
  let let25 := (binrel% HAdd.hAdd let24 let23)
  let let26 := (binrel% HMul.hMul let9 let25)
  let let27 := (binrel% HMul.hMul let6 x1)
  let let28 := (binrel% HMul.hMul let22 x4)
  let let29 := (Int.ofNat 4000)
  let let30 := (binrel% HMul.hMul let29 x3)
  let let31 := (binrel% HAdd.hAdd let30 let28)
  let let32 := (binrel% HMul.hMul let13 let31)
  let let33 := (Int.ofNat 3)
  let let34 := (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x5) x6)
  let let35 := (binrel% HMul.hMul let15 let34)
  let let36 := (Int.ofNat 8000)
  let let37 := (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x4) x5)
  let let38 := (binrel% HMul.hMul let4 let37)
  let let39 := (Int.ofNat 2)
  let let40 := (binrel% HAdd.hAdd (binrel% HMul.hMul let39 x5) x6)
  let let41 := (binrel% HMul.hMul let4 let40)
  let let42 := (binrel% HMul.hMul let22 x2)
  let let43 := (Int.ofNat 1003)
  let let44 := (binrel% HMul.hMul let43 x1)
  let let45 := (binrel% HAdd.hAdd let44 let42)
  let let46 := (binrel% HMul.hMul let19 let45)
  let let47 := (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let27 let26))))))
  let let48 := (binrel% GE.ge let47 let21)
  let let49 := (Not let48)
  let let50 := (binrel% LT.lt let47 let21)
  let let51 := (Rat.ofInt let45)
  let let52 := (binrel% HMul.hMul (Neg.neg let43) x1)
  let let53 := (Rat.ofInt let52)
  let let54 := (binrel% HAdd.hAdd x2 (binrel% HMul.hMul (Neg.neg let9) x3))
  let let55 := (Rat.ofInt 0)
  let let56 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 42045718047991999) let2))
  let let57 := (Neg.neg (Rat.ofInt 1003000))
  let let58 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let57 let9))))))
  let let59 := (binrel% GT.gt let9 let1)
  let let60 := (binrel% GE.ge let40 let1)
  let let61 := (Not let60)
  let let62 := (binrel% LT.lt let40 let1)
  let let63 := (Int.ofNat 20960000000)
  let let64 := (binrel% HAdd.hAdd (binrel% HMul.hMul (binrel% HDiv.hDiv let3 let63) x5) (binrel% HMul.hMul let4 x6))
  let let65 := (binrel% HDiv.hDiv let3 let39)
  let let66 := (Neg.neg let65)
  let let67 := (binrel% HMul.hMul let66 let3)
  let let68 := (binrel% HMul.hMul let65 let1)
  let let69 := (binrel% HMul.hMul let66 let1)
  let let70 := (binrel% HMul.hMul let19 let1)
  let let71 := (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let68 let67)))
  let let72 := (binrel% HMul.hMul let66 let37)
  let let73 := (binrel% HMul.hMul let65 let40)
  let let74 := (binrel% HMul.hMul let66 let34)
  let let75 := (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x4) x5)
  let let76 := (binrel% HMul.hMul let19 let75)
  let let77 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let73 let72)))
  let let78 := (binrel% GE.ge let77 let71)
  let let79 := (Not let78)
  let let80 := (binrel% LT.lt let77 let71)
  let let81 := (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x4) (binrel% HMul.hMul let4 x5))
  let let82 := (binrel% HMul.hMul let66 x6)
  let let83 := (Neg.neg (binrel% HDiv.hDiv let33 let39))
  let let84 := (binrel% HAdd.hAdd (binrel% HMul.hMul let83 x5) let82)
  let let85 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv let33 let2)) x5) (binrel% HMul.hMul let15 x6))
  let let86 := (binrel% HMul.hMul let65 x6)
  let let87 := (binrel% HAdd.hAdd x5 let86)
  let let88 := (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x3) (binrel% HMul.hMul (Neg.neg let13) x4))
  let let89 := (binrel% HMul.hMul (Neg.neg let29) x4)
  let let90 := (binrel% HAdd.hAdd let89 (binrel% HMul.hMul let66 x5))
  let let91 := (Rat.ofInt let75)
  let let92 := (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let87 let90)))
  let let93 := (binrel% LE.le let75 let1)
  let let94 := (Not let93)
  let let95 := (binrel% GT.gt let75 let1)
  let let96 := (Eq let95 let94)
  let let97 := (binrel% GE.ge let75 let3)
  let let98 := (Not let97)
  let let99 := (Not let61)
  let let100 := (Eq let60 let99)
  let let101 := (Eq let99 let60)
  let let102 := (Rat.ofInt 689)
  let let103 := (binrel% GT.gt let102 let1)
  let let104 := (Neg.neg (Rat.ofInt 847470))
  let let105 := (binrel% LT.lt let104 let1)
  let let106 := (binrel% HMul.hMul let104 let11)
  let let107 := (Neg.neg let19)
  let let108 := (binrel% HMul.hMul let107 let3)
  let let109 := (binrel% HMul.hMul let102 let3)
  let let110 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 let106)))
  let let111 := (binrel% HMul.hMul let104 x1)
  let let112 := (binrel% HMul.hMul let107 let25)
  let let113 := (binrel% HMul.hMul (Int.ofNat 1230) x1)
  let let114 := (binrel% HAdd.hAdd let113 let42)
  let let115 := (binrel% HMul.hMul let102 let114)
  let let116 := (binrel% HMul.hMul (Int.ofNat 1999) x2)
  let let117 := (binrel% HAdd.hAdd let116 let23)
  let let118 := (binrel% HMul.hMul let19 let117)
  let let119 := (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let112 let111)))
  let let120 := (binrel% GE.ge let119 let110)
  let let121 := (Not let120)
  let let122 := (binrel% LT.lt let119 let110)
  let let123 := (Int.ofNat 847470)
  let let124 := (Rat.ofInt (binrel% HMul.hMul (Neg.neg let123) x1))
  let let125 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let8) x2) x3))
  let let126 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x1) (binrel% HMul.hMul (Neg.neg (Int.ofNat 689)) x2)))
  let let127 := (Rat.ofInt let117)
  let let128 := (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let125 let124)))
  let let129 := (Neg.neg (Rat.ofInt 847470000))
  let let130 := (Neg.neg (Rat.ofInt 847469311))
  let let131 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let107 let129)))
  let let132 := (binrel% LT.lt let15 let1)
  let let133 := (binrel% GE.ge let55 let130)
  let let134 := (Int.ofNat 227)
  let let135 := (binrel% HDiv.hDiv let123 let134)
  let let136 := (binrel% GT.gt let135 let1)
  let let137 := (binrel% HDiv.hDiv (Int.ofNat 691067) let134)
  let let138 := (Neg.neg let137)
  let let139 := (binrel% HMul.hMul let138 let3)
  let let140 := (binrel% HMul.hMul let135 let1)
  let let141 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let108 let139)))
  let let142 := (binrel% HMul.hMul let138 let114)
  let let143 := (binrel% HMul.hMul let135 let45)
  let let144 := (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let112 let142)))
  let let145 := (binrel% GE.ge let144 let141)
  let let146 := (Not let145)
  let let147 := (binrel% LT.lt let144 let141)
  let let148 := (binrel% HDiv.hDiv (Int.ofNat 850012410) let134)
  let let149 := (binrel% HAdd.hAdd (binrel% HMul.hMul let148 x1) (binrel% HMul.hMul (Neg.neg let135) x2))
  let let150 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let148) x1) (binrel% HMul.hMul let137 x2))
  let let151 := (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let125 let150)))
  let let152 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let107 let138)))
  let let153 := (binrel% GE.ge let55 let138)
  let let154 := (binrel% GE.ge let117 let3)
  let let155 := (Not let154)
  let let156 := (Not let155)
  let let157 := (Eq let154 let156)
  let let158 := (Eq let156 let154)
  let let159 := (Eq let154 let154)
  let let160 := (binrel% GE.ge let37 let3)
  let let161 := (Not let160)
  let let162 := (binrel% LT.lt let37 let3)
  let let163 := (Rat.ofInt 41920000000)
  let let164 := (binrel% GT.gt let163 let1)
  let let165 := (Rat.ofInt 32000000)
  let let166 := (binrel% GT.gt let165 let1)
  let let167 := (binrel% GE.ge let45 let3)
  let let168 := (Not let167)
  let let169 := (Not let168)
  let let170 := (Eq let169 let167)
  let let171 := (Neg.neg (Rat.ofInt 1000))
  let let172 := (binrel% HMul.hMul let107 let11)
  let let173 := (Neg.neg let39)
  let let174 := (binrel% GE.ge x6 (binrel% HMul.hMul let173 x5))
  let let175 := (binrel% HMul.hMul let36 x3)
  let let176 := (binrel% HAdd.hAdd let175 let28)
  let let177 := (binrel% GE.ge let176 let3)
  let let178 := (Eq let177 let177)
  let let179 := (binrel% GE.ge let25 let3)
  let let180 := (Not let179)
  let let181 := (Not let180)
  let let182 := (Eq let179 let181)
  let let183 := (Eq let181 let179)
  let let184 := (binrel% GE.ge let31 let3)
  let let185 := (Not let184)
  let let186 := (binrel% GE.ge x4 let30)
  let let187 := (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 let66)))
  let let188 := (Int.ofNat 16000000)
  let let189 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let188 x3) let89))
  let let190 := (Rat.ofInt 4000)
  let let191 := (binrel% HMul.hMul let190 let31)
  let let192 := (binrel% LT.lt let138 let1)
  let let193 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x2) (binrel% HMul.hMul (Neg.neg let188) x3)))
  let let194 := (Rat.ofInt 16000000)
  let let195 := (binrel% HMul.hMul let194 let25)
  let let196 := (Eq let179 let179)
  let let197 := (binrel% GE.ge let55 let66)
  let let198 := (binrel% HDiv.hDiv let3 (Int.ofNat 5255720000))
  let let199 := (Neg.neg let198)
  let let200 := (binrel% HMul.hMul let199 let3)
  let let201 := (Eq let167 let169)
  let let202 := (binrel% GE.ge let34 let1)
  let let203 := (binrel% HMul.hMul (Neg.neg let33) x5)
  let let204 := (binrel% GE.ge x6 let203)
  let let205 := (binrel% LT.lt let107 let1)
  let let206 := (binrel% HMul.hMul let65 let22)
  let let207 := (binrel% HMul.hMul let22 x1)
  let let208 := (Rat.ofInt let207)
  let let209 := (binrel% HMul.hMul let107 x1)
  let let210 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 42045759999999999) let39))
  let let211 := (Neg.neg (Rat.ofInt 21022880000000000))
  let let212 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 let211))))))
  let let213 := (Rat.ofInt (binrel% HAdd.hAdd let52 x2))
  let let214 := (binrel% HMul.hMul let107 let45)
  let let215 := (Rat.ofInt 8000)
  let let216 := (binrel% GT.gt let215 let1)
  let let217 := (Neg.neg (Rat.ofInt 227))
  let let218 := (binrel% HMul.hMul let217 let11)
  let let219 := (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let218 let20))
  let let220 := (binrel% HMul.hMul let19 let114)
  let let221 := (binrel% HMul.hMul let217 x1)
  let let222 := (binrel% HAdd.hAdd let214 (binrel% HAdd.hAdd let221 let220))
  let let223 := (binrel% GE.ge let222 let219)
  let let224 := (Not let223)
  let let225 := (binrel% LT.lt let222 let219)
  let let226 := (binrel% GE.ge x1 let11)
  let let227 := (Not let226)
  let let228 := (Not let227)
  let let229 := (Rat.ofInt let37)
  let let230 := (binrel% HMul.hMul let19 let37)
  let let231 := (binrel% GE.ge let114 let3)
  let let232 := (Not let231)
  let let233 := (binrel% GE.ge x2 let113)
  let let234 := (Rat.ofInt (binrel% HMul.hMul (Neg.neg let134) x1))
  let let235 := (Int.ofNat 42045760000000)
  let let236 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let235 x1) (binrel% HMul.hMul (Neg.neg let2) x2)))
  let let237 := (binrel% HMul.hMul let163 let45)
  let let238 := (binrel% GE.ge x6 let1)
  let let239 := (Eq let238 let238)
  let let240 := (Not let177)
  let let241 := (Not let240)
  let let242 := (Eq let241 let177)
  let let243 := (Not let238)
  let let244 := (Not let243)
  let let245 := (Eq let238 let244)
  let let246 := (Eq let244 let238)
  let let247 := (Int.ofNat 32000000)
  let let248 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x2) (binrel% HMul.hMul (Neg.neg let247) x3)))
  let let249 := (binrel% HMul.hMul let165 let25)
  let let250 := (binrel% HMul.hMul let198 let3)
  let let251 := (binrel% HMul.hMul let194 let1)
  let let252 := (Neg.neg (Rat.ofInt 227000))
  let let253 := (Int.ofNat 1002)
  let let254 := (binrel% HMul.hMul let22 let253)
  let let255 := (binrel% HMul.hMul let3 let11)
  let let256 := (binrel% HAdd.hAdd let255 let254)
  let let257 := (binrel% HMul.hMul let3 x1)
  let let258 := (binrel% HAdd.hAdd let257 let207)
  let let259 := (binrel% GE.ge let258 let256)
  let let260 := (Not let259)
  let let261 := (binrel% LT.lt let258 let256)
  let let262 := (binrel% HAdd.hAdd (binrel% HMul.hMul (binrel% HDiv.hDiv let3 (Int.ofNat 656965)) x3) (binrel% HMul.hMul let199 x4))
  let let263 := (binrel% HMul.hMul let198 let176)
  let let264 := (Eq let167 let167)
  let let265 := (binrel% HDiv.hDiv let3 let43)
  let let266 := (binrel% HMul.hMul let265 let3)
  let let267 := (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd let252 let19))
  let let268 := (binrel% GE.ge x3 let24)
  let let269 := (binrel% GT.gt let190 let1)
  let let270 := (binrel% GT.gt let19 let1)
  let let271 := (binrel% GE.ge x3 let116)
  let let272 := (binrel% LE.le x5 let89)
  let let273 := (binrel% LT.lt let66 let1)
  let let274 := (binrel% LT.lt let217 let1)
  let let275 := (Not True)
  let let276 := (Rat.ofInt 20960000000)
  let let277 := (binrel% HMul.hMul let276 let1)
  let let278 := (binrel% LT.lt let114 let3)
  let let279 := (Int.ofNat 1313930)
  let let280 := (binrel% HDiv.hDiv let3 let279)
  let let281 := (binrel% HMul.hMul let280 let3)
  let let282 := (binrel% HAdd.hAdd let172 (binrel% HAdd.hAdd let200 (binrel% HAdd.hAdd let266 (binrel% HAdd.hAdd let281 let250))))
  let let283 := (binrel% HMul.hMul let280 let25)
  let let284 := (binrel% HMul.hMul let265 let45)
  let let285 := (binrel% HMul.hMul let199 let31)
  let let286 := (binrel% HAdd.hAdd let209 (binrel% HAdd.hAdd let285 (binrel% HAdd.hAdd let284 (binrel% HAdd.hAdd let283 let263))))
  let let287 := (binrel% GE.ge let286 let282)
  let let288 := (Not let287)
  let let289 := (binrel% LT.lt let286 let282)
  let let290 := (binrel% LT.lt let31 let3)
  let let291 := (Not let232)
  let let292 := (Eq let231 let291)
  let let293 := (Eq let291 let231)
  let let294 := (binrel% HMul.hMul (Neg.neg let36) x4)
  let let295 := (binrel% LE.le x5 let294)
  let let296 := (binrel% LT.lt x6 let1)
  let let297 := (binrel% GT.gt let13 let1)
  let let298 := (binrel% GE.ge let1 let173)
  let let299 := (Rat.ofInt let114)
  let let300 := (binrel% HAdd.hAdd let213 (binrel% HAdd.hAdd let234 let299))
  let let301 := (binrel% HAdd.hAdd x1 let207)
  let let302 := (binrel% HMul.hMul let163 let1)
  let let303 := (Neg.neg let253)
  let let304 := (binrel% HAdd.hAdd let11 let303)
  let let305 := (binrel% GT.gt let265 let1)
  let let306 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1313928689) let279))
  let let307 := (binrel% GE.ge let55 let306)
  let let308 := (binrel% HMul.hMul let83 let1)
  let let309 := (binrel% LT.lt let199 let1)
  let let310 := (Rat.ofInt (binrel% HMul.hMul (Neg.neg let235) x1))
  let let311 := (Neg.neg (Rat.ofInt 42045760000000))
  let let312 := (binrel% HMul.hMul let311 x1)
  let let313 := (binrel% GE.ge x2 let44)
  let let314 := (binrel% HMul.hMul (Neg.neg let280) x3)
  let let315 := (binrel% HAdd.hAdd (binrel% HMul.hMul let265 x2) let314)
  let let316 := (binrel% HAdd.hAdd x1 (binrel% HMul.hMul (Neg.neg let265) x2))
  let let317 := (binrel% HAdd.hAdd let314 (binrel% HMul.hMul let198 x4))
  let let318 := (binrel% HAdd.hAdd let208 (binrel% HAdd.hAdd let317 (binrel% HAdd.hAdd let316 (binrel% HAdd.hAdd let315 let262))))
  let let319 := (Eq let177 let241)
  let let320 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let247 x3) let294))
  let let321 := (binrel% HMul.hMul let215 let31)
  let let322 := (binrel% LT.lt let22 let1)
  let let323 := (Eq let202 let202)
  let let324 := (binrel% HAdd.hAdd (binrel% HMul.hMul let22 x5) let82)
  let let325 := (binrel% HAdd.hAdd let229 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let310 (binrel% HAdd.hAdd let236 (binrel% HAdd.hAdd let248 (binrel% HAdd.hAdd let320 let324))))))
  let let326 := (binrel% LT.lt let117 let3)
  let let327 := (binrel% GT.gt let3 let1)
  let let328 := (Not let202)
  let let329 := (Not let328)
  let let330 := (Eq let329 let202)
  let let331 := (binrel% LT.lt let45 let3)
  let let332 := (Eq let231 let231)
  let let333 := (binrel% LT.lt let34 let1)
  let let334 := (binrel% GT.gt let194 let1)
  let let335 := (binrel% LT.lt let176 let3)
  let let336 := (binrel% LT.lt let311 let1)
  let let337 := (binrel% GT.gt let198 let1)
  let let338 := (binrel% LT.lt let25 let3)
  let let339 := (binrel% LT.lt let75 let3)
  let let340 := (binrel% GT.gt let280 let1)
  let let341 := (binrel% LT.lt x1 let11)
  let let342 := (Eq let202 let329)
  let let343 := (binrel% GE.ge let55 let55)
  let let344 := (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 let55))
  let let345 := (binrel% HAdd.hAdd let171 (binrel% HAdd.hAdd let199 (binrel% HAdd.hAdd let265 (binrel% HAdd.hAdd let280 let198))))
  let let346 := (binrel% HAdd.hAdd let203 (binrel% HMul.hMul let83 x6))
  let let347 := (Rat.ofInt let34)
  let let348 := (binrel% HAdd.hAdd let347 (binrel% HAdd.hAdd let346 let86))
  let let349 := (binrel% GE.ge let55 let252)
  let let350 := (binrel% HMul.hMul let83 let40)
  let let351 := (binrel% HMul.hMul let19 let34)
  let let352 := (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let308 let68))
  let let353 := (binrel% HAdd.hAdd let351 (binrel% HAdd.hAdd let350 let86))
  let let354 := (binrel% GE.ge let353 let352)
  let let355 := (Not let354)
  let let356 := (binrel% LT.lt let353 let352)
  let let357 := (Int.ofNat 21022880000000)
  let let358 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let357 x1) (binrel% HMul.hMul (Neg.neg let63) x2)))
  let let359 := (binrel% HMul.hMul let276 let45)
  let let360 := (binrel% GT.gt let65 let1)
  let let361 := (Rat.ofInt (binrel% HMul.hMul (Neg.neg let357) x1))
  let let362 := (Neg.neg (Rat.ofInt 21022880000000))
  let let363 := (binrel% HMul.hMul let362 x1)
  let let364 := (Not let161)
  let let365 := (Not let98)
  let let366 := (Not let185)
  let let367 := (binrel% GE.ge let55 let210)
  let let368 := (binrel% HMul.hMul let362 let11)
  let let369 := (binrel% HMul.hMul let190 let1)
  let let370 := (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let324 (binrel% HAdd.hAdd let189 (binrel% HAdd.hAdd let193 (binrel% HAdd.hAdd let358 let361))))))
  let let371 := (binrel% LT.lt let83 let1)
  let let372 := (binrel% HMul.hMul let66 let40)
  let let373 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let53 let54))))))
  let let374 := (binrel% GE.ge x4 let175)
  let let375 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let206 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let369 (binrel% HAdd.hAdd let251 (binrel% HAdd.hAdd let277 let368))))))
  let let376 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let372 (binrel% HAdd.hAdd let191 (binrel% HAdd.hAdd let195 (binrel% HAdd.hAdd let359 let363))))))
  let let377 := (binrel% GE.ge let376 let375)
  let let378 := (Not let377)
  let let379 := (binrel% LT.lt let376 let375)
  let let380 := (binrel% LT.lt let362 let1)
  let let381 := (binrel% GE.ge let55 let56)
  let let382 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 84091519999999999) let39))
  let let383 := (binrel% GE.ge let55 let382)
  let let384 := (Eq let60 let60)
  let let385 := (Neg.neg (Rat.ofInt 42045760000000000))
  let let386 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let385 (binrel% HAdd.hAdd let55 let344))))
  let let387 := (binrel% HMul.hMul let215 let1)
  let let388 := (binrel% HMul.hMul let165 let1)
  let let389 := (binrel% HMul.hMul let311 let11)
  let let390 := (binrel% GT.gt let276 let1)
  let let391 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let206 (binrel% HAdd.hAdd let389 (binrel% HAdd.hAdd let302 (binrel% HAdd.hAdd let388 (binrel% HAdd.hAdd let387 let69))))))
  let let392 := (binrel% HAdd.hAdd let230 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let312 (binrel% HAdd.hAdd let237 (binrel% HAdd.hAdd let249 (binrel% HAdd.hAdd let321 let372))))))
  let let393 := (binrel% GE.ge let392 let391)
  let let394 := (Not let393)
  let let395 := (binrel% LT.lt let392 let391)
  let let396 := (Or let204 let174)
  let let397 := (Or let272 let295)
  let let398 := (Or let186 let374)
  let let399 := (Or let268 let271)
  let let400 := (Or let233 let313)
  let let401 := (binrel% GE.ge x1 let253)
  let let402 := (Or let226 let401)
  let let403 := (And let402 (And let400 (And let399 (And let398 (And let397 (And let396 let296))))))
  let let404 := (Or let179 let185)
  let let405 := (Or let179 (Or let185 let185))
  let let406 := (Or let185 let240)
  let let407 := (Or let202 let60)
  let let408 := (Or let98 let161)
  let let409 := (Or let180 let155)
  let let410 := (Or let232 let168)
  let let411 := (And let402 (And let410 (And let409 (And let406 (And let408 (And let407 let243))))))
  let let412 := (Not let401)
  let let413 := (Or let226 let412)
  let let414 := (Or let228 let412)
  let let415 := (binrel% LE.le let207 let254)
  let let416 := (And let322 let401)
  let let417 := (binrel% LT.lt let257 let255)
  let let418 := (And let327 let341)
  let let419 := (Eq let227 let341)
  let let420 := (Or let227 let168)
  let let421 := (Or let231 let420)
  let let422 := (Or let291 let420)
  let let423 := (Eq let227 let227)
  let let424 := (Eq Or Or)
  let let425 := (Or let168 False)
  let let426 := (Eq let168 let331)
  let let427 := (binrel% LT.lt let220 let20)
  let let428 := (And let270 let278)
  let let429 := (Eq let232 let278)
  let let430 := (binrel% LE.le let221 let218)
  let let431 := (And let274 let226)
  let let432 := (binrel% LE.le let214 let108)
  let let433 := (And let205 let167)
  let let434 := (Or let185 let227)
  let let435 := (Or let177 (Or let179 (Or let167 let434)))
  let let436 := (Or let241 (Or let181 (Or let169 let434)))
  let let437 := (Or let227 False)
  let let438 := (binrel% LT.lt let263 let250)
  let let439 := (And let337 let335)
  let let440 := (binrel% LT.lt let283 let281)
  let let441 := (And let340 let338)
  let let442 := (Eq let180 let338)
  let let443 := (binrel% LT.lt let284 let266)
  let let444 := (And let305 let331)
  let let445 := (binrel% LE.le let285 let200)
  let let446 := (And let309 let184)
  let let447 := (binrel% LE.le let209 let172)
  let let448 := (And let205 let226)
  let let449 := (Or let238 (Or let61 let202))
  let let450 := (Or let244 (Or let61 let329))
  let let451 := (Eq let61 let61)
  let let452 := (Not let333)
  let let453 := (binrel% LT.lt let86 let68)
  let let454 := (And let360 let296)
  let let455 := (Eq let243 let296)
  let let456 := (binrel% LE.le let350 let308)
  let let457 := (And let371 let60)
  let let458 := (binrel% LT.lt let351 let70)
  let let459 := (And let270 let333)
  let let460 := (Or let167 let61)
  let let461 := (Or let167 (Or let179 let61))
  let let462 := (Or let167 (Or let179 (Or let184 let61)))
  let let463 := (Or let238 (Or let227 let61))
  let let464 := (Or let238 (Or let61 (Or let184 (Or let179 (Or let167 (Or let227 let97))))))
  let let465 := (Or let244 (Or let61 (Or let366 (Or let181 (Or let169 (Or let227 let365))))))
  let let466 := (Or let365 False)
  let let467 := (binrel% LE.le let363 let368)
  let let468 := (And let380 let226)
  let let469 := (binrel% LE.le let359 let277)
  let let470 := (binrel% LE.le let45 let1)
  let let471 := (And let390 let470)
  let let472 := (binrel% LE.le let195 let251)
  let let473 := (binrel% LE.le let25 let1)
  let let474 := (And let334 let473)
  let let475 := (binrel% LE.le let191 let369)
  let let476 := (binrel% LE.le let31 let1)
  let let477 := (And let269 let476)
  let let478 := (Eq let185 let290)
  let let479 := (binrel% LE.le let372 let69)
  let let480 := (And let273 let60)
  let let481 := (Implies let480 let479)
  let let482 := (binrel% LE.le let86 let206)
  let let483 := (binrel% LE.le x6 let22)
  let let484 := (And let360 let483)
  let let485 := (Implies let484 let482)
  let let486 := (binrel% LT.lt let76 let20)
  let let487 := (And let270 let339)
  let let488 := (Eq let98 let339)
  let let489 := (Or let238 (Or let227 (Or let167 (Or let179 (Or let184 (Or let61 let160))))))
  let let490 := (Or let244 (Or let227 (Or let169 (Or let181 (Or let366 (Or let61 let364))))))
  let let491 := (binrel% LE.le let321 let387)
  let let492 := (And let216 let476)
  let let493 := (binrel% LE.le let249 let388)
  let let494 := (And let166 let473)
  let let495 := (binrel% LE.le let237 let302)
  let let496 := (And let164 let470)
  let let497 := (binrel% LE.le let312 let389)
  let let498 := (And let336 let226)
  let let499 := (binrel% LT.lt let230 let20)
  let let500 := (And let270 let162)
  let let501 := (Eq let161 let162)
  let let502 := (Or let180 let180)
  let let503 := (Or let232 (Or let180 (Or let167 let154)))
  let let504 := (Or let232 (Or let180 (Or let169 let156)))
  let let505 := (Or let156 False)
  let let506 := (Not let326)
  let let507 := (Eq let154 let506)
  let let508 := (Or let506 False)
  let let509 := (binrel% LE.le let142 let139)
  let let510 := (And let192 let231)
  let let511 := (binrel% LE.le let112 let108)
  let let512 := (And let205 let179)
  let let513 := (Implies let512 let511)
  let let514 := (binrel% LE.le let143 let140)
  let let515 := (And let136 let470)
  let let516 := (binrel% LT.lt let118 let20)
  let let517 := (And let270 let326)
  let let518 := (Implies let517 let516)
  let let519 := (Eq let155 let326)
  let let520 := (Or let227 (Or let180 (Or let231 let154)))
  let let521 := (Or let227 (Or let180 (Or let291 let156)))
  let let522 := (binrel% LE.le let111 let106)
  let let523 := (And let105 let226)
  let let524 := (binrel% LT.lt let115 let109)
  let let525 := (And let103 let278)
  let let526 := (Or let161 (Or let60 (Or let328 let97)))
  let let527 := (Or let161 (Or let99 (Or let328 let365)))
  let let528 := (binrel% LE.le let72 let67)
  let let529 := (And let273 let160)
  let let530 := (binrel% LT.lt let73 let68)
  let let531 := (And let360 let62)
  let let532 := (Eq let61 let62)
  let let533 := (binrel% LE.le let74 let69)
  let let534 := (And let273 let202)
  let let535 := (binrel% LE.le let76 let70)
  let let536 := (And let270 let93)
  let let537 := (Or let179 (Or let227 (Or let184 (Or let328 (Or let160 (Or let60 let167))))))
  let let538 := (Or let181 (Or let227 (Or let366 (Or let328 (Or let364 (Or let99 let169))))))
  let let539 := (Not let331)
  let let540 := (binrel% LT.lt let26 let10)
  let let541 := (And let59 let338)
  let let542 := (binrel% LE.le let27 let12)
  let let543 := (And let7 let226)
  let let544 := (binrel% LT.lt let32 let14)
  let let545 := (And let297 let290)
  let let546 := (binrel% LE.le let35 let16)
  let let547 := (And let132 let202)
  let let548 := (binrel% LT.lt let38 let17)
  let let549 := (And let5 let162)
  let let550 := (binrel% LT.lt let41 let18)
  let let551 := (And let5 let62)
  let let552 := (binrel% LT.lt let46 let20)
  let let553 := (And let270 let331)
(Eq let5 True) → (Eq let7 True) → (Eq let50 let49) → (Eq let46 let51) → (Eq let27 let53) → (Eq let26 let54) → (Eq let18 let55) → (Eq let58 let56) → (Eq let59 True) → (Eq let62 let61) → (Eq let41 let64) → (Eq let80 let79) → (Eq let38 let81) → (Eq let74 let84) → (Eq let35 let85) → (Eq let73 let87) → (Eq let32 let88) → (Eq let72 let90) → (Eq let92 let55) → (Eq let16 let55) → let96 → (Eq let14 let13) → (Eq let93 let98) → (Eq let101 let100) → let101 → (Eq let103 True) → (Eq let105 True) → (Eq let122 let121) → (Eq let128 let55) → (Eq let109 let102) → (Eq let106 let129) → (Eq let131 let130) → (Eq let132 True) → (Eq let133 True) → (Eq let136 True) → (Eq let147 let146) → (Eq let118 let127) → (Eq let143 let149) → (Eq let112 let125) → (Eq let142 let150) → (Eq let151 let55) → (Eq let139 let138) → (Eq let152 let138) → (Eq let153 True) → (Eq let158 let157) → let158 → (Eq let159 True) → (Eq let162 let161) → (Eq let164 True) → (Eq let166 True) → let170 → (Eq let172 let171) → (Eq let174 let60) → (Eq let178 True) → (Eq let115 let126) → (Eq let183 let182) → (Eq let186 let185) → (Eq let187 let66) → (Eq let191 let189) → (Eq let111 let124) → let183 → (Eq let192 True) → (Eq let195 let193) → (Eq let196 True) → (Eq let197 True) → (Eq let200 let199) → (Eq let170 let201) → (Eq let20 let19) → (Eq let204 let202) → (Eq let205 True) → (Eq let206 let66) → (Eq let209 let208) → (Eq let68 let55) → (Eq let212 let210) → (Eq let214 let213) → (Eq let216 True) → (Eq let225 let224) → (Eq let228 let226) → (Eq let230 let229) → (Eq let233 let232) → (Eq let221 let234) → (Eq let237 let236) → (Eq let239 True) → let242 → (Eq let246 let245) → (Eq let249 let248) → (Eq let250 let198) → (Eq let251 let55) → (Eq let108 let107) → (Eq let218 let252) → (Eq let261 let260) → (Eq let263 let262) → (Eq let264 True) → (Eq let266 let265) → (Eq let267 let252) → (Eq let268 let180) → (Eq let269 True) → (Eq let270 True) → (Eq let271 let155) → (Eq let272 let98) → (Eq let273 True) → (Eq let274 True) → (Eq let275 False) → (Eq let277 let55) → (Eq let278 let232) → (Eq let289 let288) → (Eq let290 let185) → (Eq let293 let292) → (Eq let295 let161) → (Eq let281 let280) → (Eq let296 let243) → (Eq let297 True) → (Eq let298 True) → (Eq let300 let55) → (Eq let301 let1) → (Eq let302 let55) → (Eq let304 let173) → (Eq let254 let303) → (Eq let305 True) → (Eq let10 let9) → (Eq let307 True) → (Eq let308 let55) → (Eq let309 True) → (Eq let255 let11) → (Eq let12 let57) → (Eq let70 let55) → (Eq let257 x1) → (Eq let312 let310) → (Eq let313 let168) → (Eq let318 let55) → (Eq let242 let319) → let246 → (Eq let321 let320) → (Eq let322 True) → (Eq let323 True) → (Eq let325 let55) → (Eq let326 let155) → (Eq let327 True) → let330 → (Eq let331 let168) → let293 → (Eq let332 True) → (Eq let333 let328) → (Eq let284 let316) → (Eq let285 let317) → (Eq let283 let315) → (Eq let334 True) → (Eq let335 let240) → (Eq let336 True) → (Eq let337 True) → (Eq let338 let180) → (Eq let339 let98) → (Eq let340 True) → (Eq let341 let227) → (Eq let330 let342) → (Eq let140 let55) → (Eq let343 True) → (Eq let344 let55) → (Eq let17 let4) → (Eq let345 let306) → (Eq let348 let55) → (Eq let349 True) → (Eq let350 let346) → (Eq let351 let347) → (Eq let356 let355) → (Eq let359 let358) → (Eq let360 True) → (Eq let363 let361) → (Eq let364 let160) → (Eq let365 let97) → (Eq let366 let184) → (Eq let367 True) → (Eq let368 let211) → (Eq let369 let55) → (Eq let69 let55) → (Eq let370 let55) → (Eq let371 True) → (Eq let372 let324) → (Eq let373 let55) → (Eq let76 let91) → (Eq let67 let66) → (Eq let374 let240) → (Eq let379 let378) → (Eq let380 True) → (Eq let381 True) → (Eq let383 True) → (Eq let384 True) → (Eq let386 let382) → (Eq let387 let55) → (Eq let388 let55) → (Eq let389 let385) → (Eq let390 True) → (Eq let220 let299) → (Eq let395 let394) → let403 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 41920000000)
  let let3 := (Int.ofNat 1)
  let let4 := (binrel% HDiv.hDiv let3 let2)
  let let5 := (binrel% GT.gt let4 let1)
  let let6 := (Neg.neg (Rat.ofInt 1003))
  let let7 := (binrel% LT.lt let6 let1)
  let let8 := (Int.ofNat 1310)
  let let9 := (binrel% HDiv.hDiv let3 let8)
  let let10 := (binrel% HMul.hMul let9 let3)
  let let11 := (Int.ofNat 1000)
  let let12 := (binrel% HMul.hMul let6 let11)
  let let13 := (binrel% HDiv.hDiv let3 (Int.ofNat 5240000))
  let let14 := (binrel% HMul.hMul let13 let3)
  let let15 := (Neg.neg let4)
  let let16 := (binrel% HMul.hMul let15 let1)
  let let17 := (binrel% HMul.hMul let4 let3)
  let let18 := (binrel% HMul.hMul let4 let1)
  let let19 := (Rat.ofInt 1)
  let let20 := (binrel% HMul.hMul let19 let3)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let12 let10))))))
  let let22 := (Neg.neg let3)
  let let23 := (binrel% HMul.hMul let22 x3)
  let let24 := (binrel% HMul.hMul let8 x2)
  let let25 := (binrel% HAdd.hAdd let24 let23)
  let let26 := (binrel% HMul.hMul let9 let25)
  let let27 := (binrel% HMul.hMul let6 x1)
  let let28 := (binrel% HMul.hMul let22 x4)
  let let29 := (Int.ofNat 4000)
  let let30 := (binrel% HMul.hMul let29 x3)
  let let31 := (binrel% HAdd.hAdd let30 let28)
  let let32 := (binrel% HMul.hMul let13 let31)
  let let33 := (Int.ofNat 3)
  let let34 := (binrel% HAdd.hAdd (binrel% HMul.hMul let33 x5) x6)
  let let35 := (binrel% HMul.hMul let15 let34)
  let let36 := (Int.ofNat 8000)
  let let37 := (binrel% HAdd.hAdd (binrel% HMul.hMul let36 x4) x5)
  let let38 := (binrel% HMul.hMul let4 let37)
  let let39 := (Int.ofNat 2)
  let let40 := (binrel% HAdd.hAdd (binrel% HMul.hMul let39 x5) x6)
  let let41 := (binrel% HMul.hMul let4 let40)
  let let42 := (binrel% HMul.hMul let22 x2)
  let let43 := (Int.ofNat 1003)
  let let44 := (binrel% HMul.hMul let43 x1)
  let let45 := (binrel% HAdd.hAdd let44 let42)
  let let46 := (binrel% HMul.hMul let19 let45)
  let let47 := (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let27 let26))))))
  let let48 := (binrel% GE.ge let47 let21)
  let let49 := (Not let48)
  let let50 := (binrel% LT.lt let47 let21)
  let let51 := (Rat.ofInt let45)
  let let52 := (binrel% HMul.hMul (Neg.neg let43) x1)
  let let53 := (Rat.ofInt let52)
  let let54 := (binrel% HAdd.hAdd x2 (binrel% HMul.hMul (Neg.neg let9) x3))
  let let55 := (Rat.ofInt 0)
  let let56 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 42045718047991999) let2))
  let let57 := (Neg.neg (Rat.ofInt 1003000))
  let let58 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let57 let9))))))
  let let59 := (binrel% GT.gt let9 let1)
  let let60 := (binrel% GE.ge let40 let1)
  let let61 := (Not let60)
  let let62 := (binrel% LT.lt let40 let1)
  let let63 := (Int.ofNat 20960000000)
  let let64 := (binrel% HAdd.hAdd (binrel% HMul.hMul (binrel% HDiv.hDiv let3 let63) x5) (binrel% HMul.hMul let4 x6))
  let let65 := (binrel% HDiv.hDiv let3 let39)
  let let66 := (Neg.neg let65)
  let let67 := (binrel% HMul.hMul let66 let3)
  let let68 := (binrel% HMul.hMul let65 let1)
  let let69 := (binrel% HMul.hMul let66 let1)
  let let70 := (binrel% HMul.hMul let19 let1)
  let let71 := (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let68 let67)))
  let let72 := (binrel% HMul.hMul let66 let37)
  let let73 := (binrel% HMul.hMul let65 let40)
  let let74 := (binrel% HMul.hMul let66 let34)
  let let75 := (binrel% HAdd.hAdd (binrel% HMul.hMul let29 x4) x5)
  let let76 := (binrel% HMul.hMul let19 let75)
  let let77 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let74 (binrel% HAdd.hAdd let73 let72)))
  let let78 := (binrel% GE.ge let77 let71)
  let let79 := (Not let78)
  let let80 := (binrel% LT.lt let77 let71)
  let let81 := (binrel% HAdd.hAdd (binrel% HMul.hMul let13 x4) (binrel% HMul.hMul let4 x5))
  let let82 := (binrel% HMul.hMul let66 x6)
  let let83 := (Neg.neg (binrel% HDiv.hDiv let33 let39))
  let let84 := (binrel% HAdd.hAdd (binrel% HMul.hMul let83 x5) let82)
  let let85 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv let33 let2)) x5) (binrel% HMul.hMul let15 x6))
  let let86 := (binrel% HMul.hMul let65 x6)
  let let87 := (binrel% HAdd.hAdd x5 let86)
  let let88 := (binrel% HAdd.hAdd (binrel% HMul.hMul let9 x3) (binrel% HMul.hMul (Neg.neg let13) x4))
  let let89 := (binrel% HMul.hMul (Neg.neg let29) x4)
  let let90 := (binrel% HAdd.hAdd let89 (binrel% HMul.hMul let66 x5))
  let let91 := (Rat.ofInt let75)
  let let92 := (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let84 (binrel% HAdd.hAdd let87 let90)))
  let let93 := (binrel% LE.le let75 let1)
  let let94 := (Not let93)
  let let95 := (binrel% GT.gt let75 let1)
  let let96 := (Eq let95 let94)
  let let97 := (binrel% GE.ge let75 let3)
  let let98 := (Not let97)
  let let99 := (Not let61)
  let let100 := (Eq let60 let99)
  let let101 := (Eq let99 let60)
  let let102 := (Rat.ofInt 689)
  let let103 := (binrel% GT.gt let102 let1)
  let let104 := (Neg.neg (Rat.ofInt 847470))
  let let105 := (binrel% LT.lt let104 let1)
  let let106 := (binrel% HMul.hMul let104 let11)
  let let107 := (Neg.neg let19)
  let let108 := (binrel% HMul.hMul let107 let3)
  let let109 := (binrel% HMul.hMul let102 let3)
  let let110 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let109 (binrel% HAdd.hAdd let108 let106)))
  let let111 := (binrel% HMul.hMul let104 x1)
  let let112 := (binrel% HMul.hMul let107 let25)
  let let113 := (binrel% HMul.hMul (Int.ofNat 1230) x1)
  let let114 := (binrel% HAdd.hAdd let113 let42)
  let let115 := (binrel% HMul.hMul let102 let114)
  let let116 := (binrel% HMul.hMul (Int.ofNat 1999) x2)
  let let117 := (binrel% HAdd.hAdd let116 let23)
  let let118 := (binrel% HMul.hMul let19 let117)
  let let119 := (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd let115 (binrel% HAdd.hAdd let112 let111)))
  let let120 := (binrel% GE.ge let119 let110)
  let let121 := (Not let120)
  let let122 := (binrel% LT.lt let119 let110)
  let let123 := (Int.ofNat 847470)
  let let124 := (Rat.ofInt (binrel% HMul.hMul (Neg.neg let123) x1))
  let let125 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let8) x2) x3))
  let let126 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let123 x1) (binrel% HMul.hMul (Neg.neg (Int.ofNat 689)) x2)))
  let let127 := (Rat.ofInt let117)
  let let128 := (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let126 (binrel% HAdd.hAdd let125 let124)))
  let let129 := (Neg.neg (Rat.ofInt 847470000))
  let let130 := (Neg.neg (Rat.ofInt 847469311))
  let let131 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let102 (binrel% HAdd.hAdd let107 let129)))
  let let132 := (binrel% LT.lt let15 let1)
  let let133 := (binrel% GE.ge let55 let130)
  let let134 := (Int.ofNat 227)
  let let135 := (binrel% HDiv.hDiv let123 let134)
  let let136 := (binrel% GT.gt let135 let1)
  let let137 := (binrel% HDiv.hDiv (Int.ofNat 691067) let134)
  let let138 := (Neg.neg let137)
  let let139 := (binrel% HMul.hMul let138 let3)
  let let140 := (binrel% HMul.hMul let135 let1)
  let let141 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let140 (binrel% HAdd.hAdd let108 let139)))
  let let142 := (binrel% HMul.hMul let138 let114)
  let let143 := (binrel% HMul.hMul let135 let45)
  let let144 := (binrel% HAdd.hAdd let118 (binrel% HAdd.hAdd let143 (binrel% HAdd.hAdd let112 let142)))
  let let145 := (binrel% GE.ge let144 let141)
  let let146 := (Not let145)
  let let147 := (binrel% LT.lt let144 let141)
  let let148 := (binrel% HDiv.hDiv (Int.ofNat 850012410) let134)
  let let149 := (binrel% HAdd.hAdd (binrel% HMul.hMul let148 x1) (binrel% HMul.hMul (Neg.neg let135) x2))
  let let150 := (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg let148) x1) (binrel% HMul.hMul let137 x2))
  let let151 := (binrel% HAdd.hAdd let127 (binrel% HAdd.hAdd let149 (binrel% HAdd.hAdd let125 let150)))
  let let152 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let107 let138)))
  let let153 := (binrel% GE.ge let55 let138)
  let let154 := (binrel% GE.ge let117 let3)
  let let155 := (Not let154)
  let let156 := (Not let155)
  let let157 := (Eq let154 let156)
  let let158 := (Eq let156 let154)
  let let159 := (Eq let154 let154)
  let let160 := (binrel% GE.ge let37 let3)
  let let161 := (Not let160)
  let let162 := (binrel% LT.lt let37 let3)
  let let163 := (Rat.ofInt 41920000000)
  let let164 := (binrel% GT.gt let163 let1)
  let let165 := (Rat.ofInt 32000000)
  let let166 := (binrel% GT.gt let165 let1)
  let let167 := (binrel% GE.ge let45 let3)
  let let168 := (Not let167)
  let let169 := (Not let168)
  let let170 := (Eq let169 let167)
  let let171 := (Neg.neg (Rat.ofInt 1000))
  let let172 := (binrel% HMul.hMul let107 let11)
  let let173 := (Neg.neg let39)
  let let174 := (binrel% GE.ge x6 (binrel% HMul.hMul let173 x5))
  let let175 := (binrel% HMul.hMul let36 x3)
  let let176 := (binrel% HAdd.hAdd let175 let28)
  let let177 := (binrel% GE.ge let176 let3)
  let let178 := (Eq let177 let177)
  let let179 := (binrel% GE.ge let25 let3)
  let let180 := (Not let179)
  let let181 := (Not let180)
  let let182 := (Eq let179 let181)
  let let183 := (Eq let181 let179)
  let let184 := (binrel% GE.ge let31 let3)
  let let185 := (Not let184)
  let let186 := (binrel% GE.ge x4 let30)
  let let187 := (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 let66)))
  let let188 := (Int.ofNat 16000000)
  let let189 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let188 x3) let89))
  let let190 := (Rat.ofInt 4000)
  let let191 := (binrel% HMul.hMul let190 let31)
  let let192 := (binrel% LT.lt let138 let1)
  let let193 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let63 x2) (binrel% HMul.hMul (Neg.neg let188) x3)))
  let let194 := (Rat.ofInt 16000000)
  let let195 := (binrel% HMul.hMul let194 let25)
  let let196 := (Eq let179 let179)
  let let197 := (binrel% GE.ge let55 let66)
  let let198 := (binrel% HDiv.hDiv let3 (Int.ofNat 5255720000))
  let let199 := (Neg.neg let198)
  let let200 := (binrel% HMul.hMul let199 let3)
  let let201 := (Eq let167 let169)
  let let202 := (binrel% GE.ge let34 let1)
  let let203 := (binrel% HMul.hMul (Neg.neg let33) x5)
  let let204 := (binrel% GE.ge x6 let203)
  let let205 := (binrel% LT.lt let107 let1)
  let let206 := (binrel% HMul.hMul let65 let22)
  let let207 := (binrel% HMul.hMul let22 x1)
  let let208 := (Rat.ofInt let207)
  let let209 := (binrel% HMul.hMul let107 x1)
  let let210 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 42045759999999999) let39))
  let let211 := (Neg.neg (Rat.ofInt 21022880000000000))
  let let212 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 let211))))))
  let let213 := (Rat.ofInt (binrel% HAdd.hAdd let52 x2))
  let let214 := (binrel% HMul.hMul let107 let45)
  let let215 := (Rat.ofInt 8000)
  let let216 := (binrel% GT.gt let215 let1)
  let let217 := (Neg.neg (Rat.ofInt 227))
  let let218 := (binrel% HMul.hMul let217 let11)
  let let219 := (binrel% HAdd.hAdd let108 (binrel% HAdd.hAdd let218 let20))
  let let220 := (binrel% HMul.hMul let19 let114)
  let let221 := (binrel% HMul.hMul let217 x1)
  let let222 := (binrel% HAdd.hAdd let214 (binrel% HAdd.hAdd let221 let220))
  let let223 := (binrel% GE.ge let222 let219)
  let let224 := (Not let223)
  let let225 := (binrel% LT.lt let222 let219)
  let let226 := (binrel% GE.ge x1 let11)
  let let227 := (Not let226)
  let let228 := (Not let227)
  let let229 := (Rat.ofInt let37)
  let let230 := (binrel% HMul.hMul let19 let37)
  let let231 := (binrel% GE.ge let114 let3)
  let let232 := (Not let231)
  let let233 := (binrel% GE.ge x2 let113)
  let let234 := (Rat.ofInt (binrel% HMul.hMul (Neg.neg let134) x1))
  let let235 := (Int.ofNat 42045760000000)
  let let236 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let235 x1) (binrel% HMul.hMul (Neg.neg let2) x2)))
  let let237 := (binrel% HMul.hMul let163 let45)
  let let238 := (binrel% GE.ge x6 let1)
  let let239 := (Eq let238 let238)
  let let240 := (Not let177)
  let let241 := (Not let240)
  let let242 := (Eq let241 let177)
  let let243 := (Not let238)
  let let244 := (Not let243)
  let let245 := (Eq let238 let244)
  let let246 := (Eq let244 let238)
  let let247 := (Int.ofNat 32000000)
  let let248 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let2 x2) (binrel% HMul.hMul (Neg.neg let247) x3)))
  let let249 := (binrel% HMul.hMul let165 let25)
  let let250 := (binrel% HMul.hMul let198 let3)
  let let251 := (binrel% HMul.hMul let194 let1)
  let let252 := (Neg.neg (Rat.ofInt 227000))
  let let253 := (Int.ofNat 1002)
  let let254 := (binrel% HMul.hMul let22 let253)
  let let255 := (binrel% HMul.hMul let3 let11)
  let let256 := (binrel% HAdd.hAdd let255 let254)
  let let257 := (binrel% HMul.hMul let3 x1)
  let let258 := (binrel% HAdd.hAdd let257 let207)
  let let259 := (binrel% GE.ge let258 let256)
  let let260 := (Not let259)
  let let261 := (binrel% LT.lt let258 let256)
  let let262 := (binrel% HAdd.hAdd (binrel% HMul.hMul (binrel% HDiv.hDiv let3 (Int.ofNat 656965)) x3) (binrel% HMul.hMul let199 x4))
  let let263 := (binrel% HMul.hMul let198 let176)
  let let264 := (Eq let167 let167)
  let let265 := (binrel% HDiv.hDiv let3 let43)
  let let266 := (binrel% HMul.hMul let265 let3)
  let let267 := (binrel% HAdd.hAdd let107 (binrel% HAdd.hAdd let252 let19))
  let let268 := (binrel% GE.ge x3 let24)
  let let269 := (binrel% GT.gt let190 let1)
  let let270 := (binrel% GT.gt let19 let1)
  let let271 := (binrel% GE.ge x3 let116)
  let let272 := (binrel% LE.le x5 let89)
  let let273 := (binrel% LT.lt let66 let1)
  let let274 := (binrel% LT.lt let217 let1)
  let let275 := (Not True)
  let let276 := (Rat.ofInt 20960000000)
  let let277 := (binrel% HMul.hMul let276 let1)
  let let278 := (binrel% LT.lt let114 let3)
  let let279 := (Int.ofNat 1313930)
  let let280 := (binrel% HDiv.hDiv let3 let279)
  let let281 := (binrel% HMul.hMul let280 let3)
  let let282 := (binrel% HAdd.hAdd let172 (binrel% HAdd.hAdd let200 (binrel% HAdd.hAdd let266 (binrel% HAdd.hAdd let281 let250))))
  let let283 := (binrel% HMul.hMul let280 let25)
  let let284 := (binrel% HMul.hMul let265 let45)
  let let285 := (binrel% HMul.hMul let199 let31)
  let let286 := (binrel% HAdd.hAdd let209 (binrel% HAdd.hAdd let285 (binrel% HAdd.hAdd let284 (binrel% HAdd.hAdd let283 let263))))
  let let287 := (binrel% GE.ge let286 let282)
  let let288 := (Not let287)
  let let289 := (binrel% LT.lt let286 let282)
  let let290 := (binrel% LT.lt let31 let3)
  let let291 := (Not let232)
  let let292 := (Eq let231 let291)
  let let293 := (Eq let291 let231)
  let let294 := (binrel% HMul.hMul (Neg.neg let36) x4)
  let let295 := (binrel% LE.le x5 let294)
  let let296 := (binrel% LT.lt x6 let1)
  let let297 := (binrel% GT.gt let13 let1)
  let let298 := (binrel% GE.ge let1 let173)
  let let299 := (Rat.ofInt let114)
  let let300 := (binrel% HAdd.hAdd let213 (binrel% HAdd.hAdd let234 let299))
  let let301 := (binrel% HAdd.hAdd x1 let207)
  let let302 := (binrel% HMul.hMul let163 let1)
  let let303 := (Neg.neg let253)
  let let304 := (binrel% HAdd.hAdd let11 let303)
  let let305 := (binrel% GT.gt let265 let1)
  let let306 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 1313928689) let279))
  let let307 := (binrel% GE.ge let55 let306)
  let let308 := (binrel% HMul.hMul let83 let1)
  let let309 := (binrel% LT.lt let199 let1)
  let let310 := (Rat.ofInt (binrel% HMul.hMul (Neg.neg let235) x1))
  let let311 := (Neg.neg (Rat.ofInt 42045760000000))
  let let312 := (binrel% HMul.hMul let311 x1)
  let let313 := (binrel% GE.ge x2 let44)
  let let314 := (binrel% HMul.hMul (Neg.neg let280) x3)
  let let315 := (binrel% HAdd.hAdd (binrel% HMul.hMul let265 x2) let314)
  let let316 := (binrel% HAdd.hAdd x1 (binrel% HMul.hMul (Neg.neg let265) x2))
  let let317 := (binrel% HAdd.hAdd let314 (binrel% HMul.hMul let198 x4))
  let let318 := (binrel% HAdd.hAdd let208 (binrel% HAdd.hAdd let317 (binrel% HAdd.hAdd let316 (binrel% HAdd.hAdd let315 let262))))
  let let319 := (Eq let177 let241)
  let let320 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let247 x3) let294))
  let let321 := (binrel% HMul.hMul let215 let31)
  let let322 := (binrel% LT.lt let22 let1)
  let let323 := (Eq let202 let202)
  let let324 := (binrel% HAdd.hAdd (binrel% HMul.hMul let22 x5) let82)
  let let325 := (binrel% HAdd.hAdd let229 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let310 (binrel% HAdd.hAdd let236 (binrel% HAdd.hAdd let248 (binrel% HAdd.hAdd let320 let324))))))
  let let326 := (binrel% LT.lt let117 let3)
  let let327 := (binrel% GT.gt let3 let1)
  let let328 := (Not let202)
  let let329 := (Not let328)
  let let330 := (Eq let329 let202)
  let let331 := (binrel% LT.lt let45 let3)
  let let332 := (Eq let231 let231)
  let let333 := (binrel% LT.lt let34 let1)
  let let334 := (binrel% GT.gt let194 let1)
  let let335 := (binrel% LT.lt let176 let3)
  let let336 := (binrel% LT.lt let311 let1)
  let let337 := (binrel% GT.gt let198 let1)
  let let338 := (binrel% LT.lt let25 let3)
  let let339 := (binrel% LT.lt let75 let3)
  let let340 := (binrel% GT.gt let280 let1)
  let let341 := (binrel% LT.lt x1 let11)
  let let342 := (Eq let202 let329)
  let let343 := (binrel% GE.ge let55 let55)
  let let344 := (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 let55))
  let let345 := (binrel% HAdd.hAdd let171 (binrel% HAdd.hAdd let199 (binrel% HAdd.hAdd let265 (binrel% HAdd.hAdd let280 let198))))
  let let346 := (binrel% HAdd.hAdd let203 (binrel% HMul.hMul let83 x6))
  let let347 := (Rat.ofInt let34)
  let let348 := (binrel% HAdd.hAdd let347 (binrel% HAdd.hAdd let346 let86))
  let let349 := (binrel% GE.ge let55 let252)
  let let350 := (binrel% HMul.hMul let83 let40)
  let let351 := (binrel% HMul.hMul let19 let34)
  let let352 := (binrel% HAdd.hAdd let70 (binrel% HAdd.hAdd let308 let68))
  let let353 := (binrel% HAdd.hAdd let351 (binrel% HAdd.hAdd let350 let86))
  let let354 := (binrel% GE.ge let353 let352)
  let let355 := (Not let354)
  let let356 := (binrel% LT.lt let353 let352)
  let let357 := (Int.ofNat 21022880000000)
  let let358 := (Rat.ofInt (binrel% HAdd.hAdd (binrel% HMul.hMul let357 x1) (binrel% HMul.hMul (Neg.neg let63) x2)))
  let let359 := (binrel% HMul.hMul let276 let45)
  let let360 := (binrel% GT.gt let65 let1)
  let let361 := (Rat.ofInt (binrel% HMul.hMul (Neg.neg let357) x1))
  let let362 := (Neg.neg (Rat.ofInt 21022880000000))
  let let363 := (binrel% HMul.hMul let362 x1)
  let let364 := (Not let161)
  let let365 := (Not let98)
  let let366 := (Not let185)
  let let367 := (binrel% GE.ge let55 let210)
  let let368 := (binrel% HMul.hMul let362 let11)
  let let369 := (binrel% HMul.hMul let190 let1)
  let let370 := (binrel% HAdd.hAdd let91 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let324 (binrel% HAdd.hAdd let189 (binrel% HAdd.hAdd let193 (binrel% HAdd.hAdd let358 let361))))))
  let let371 := (binrel% LT.lt let83 let1)
  let let372 := (binrel% HMul.hMul let66 let40)
  let let373 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd let88 (binrel% HAdd.hAdd let53 let54))))))
  let let374 := (binrel% GE.ge x4 let175)
  let let375 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let206 (binrel% HAdd.hAdd let69 (binrel% HAdd.hAdd let369 (binrel% HAdd.hAdd let251 (binrel% HAdd.hAdd let277 let368))))))
  let let376 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let372 (binrel% HAdd.hAdd let191 (binrel% HAdd.hAdd let195 (binrel% HAdd.hAdd let359 let363))))))
  let let377 := (binrel% GE.ge let376 let375)
  let let378 := (Not let377)
  let let379 := (binrel% LT.lt let376 let375)
  let let380 := (binrel% LT.lt let362 let1)
  let let381 := (binrel% GE.ge let55 let56)
  let let382 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 84091519999999999) let39))
  let let383 := (binrel% GE.ge let55 let382)
  let let384 := (Eq let60 let60)
  let let385 := (Neg.neg (Rat.ofInt 42045760000000000))
  let let386 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let385 (binrel% HAdd.hAdd let55 let344))))
  let let387 := (binrel% HMul.hMul let215 let1)
  let let388 := (binrel% HMul.hMul let165 let1)
  let let389 := (binrel% HMul.hMul let311 let11)
  let let390 := (binrel% GT.gt let276 let1)
  let let391 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let206 (binrel% HAdd.hAdd let389 (binrel% HAdd.hAdd let302 (binrel% HAdd.hAdd let388 (binrel% HAdd.hAdd let387 let69))))))
  let let392 := (binrel% HAdd.hAdd let230 (binrel% HAdd.hAdd let86 (binrel% HAdd.hAdd let312 (binrel% HAdd.hAdd let237 (binrel% HAdd.hAdd let249 (binrel% HAdd.hAdd let321 let372))))))
  let let393 := (binrel% GE.ge let392 let391)
  let let394 := (Not let393)
  let let395 := (binrel% LT.lt let392 let391)
  let let396 := (Or let204 let174)
  let let397 := (Or let272 let295)
  let let398 := (Or let186 let374)
  let let399 := (Or let268 let271)
  let let400 := (Or let233 let313)
  let let401 := (binrel% GE.ge x1 let253)
  let let402 := (Or let226 let401)
  let let403 := (And let402 (And let400 (And let399 (And let398 (And let397 (And let396 let296))))))
  let let404 := (Or let179 let185)
  let let405 := (Or let179 (Or let185 let185))
  let let406 := (Or let185 let240)
  let let407 := (Or let202 let60)
  let let408 := (Or let98 let161)
  let let409 := (Or let180 let155)
  let let410 := (Or let232 let168)
  let let411 := (And let402 (And let410 (And let409 (And let406 (And let408 (And let407 let243))))))
  let let412 := (Not let401)
  let let413 := (Or let226 let412)
  let let414 := (Or let228 let412)
  let let415 := (binrel% LE.le let207 let254)
  let let416 := (And let322 let401)
  let let417 := (binrel% LT.lt let257 let255)
  let let418 := (And let327 let341)
  let let419 := (Eq let227 let341)
  let let420 := (Or let227 let168)
  let let421 := (Or let231 let420)
  let let422 := (Or let291 let420)
  let let423 := (Eq let227 let227)
  let let424 := (Eq Or Or)
  let let425 := (Or let168 False)
  let let426 := (Eq let168 let331)
  let let427 := (binrel% LT.lt let220 let20)
  let let428 := (And let270 let278)
  let let429 := (Eq let232 let278)
  let let430 := (binrel% LE.le let221 let218)
  let let431 := (And let274 let226)
  let let432 := (binrel% LE.le let214 let108)
  let let433 := (And let205 let167)
  let let434 := (Or let185 let227)
  let let435 := (Or let177 (Or let179 (Or let167 let434)))
  let let436 := (Or let241 (Or let181 (Or let169 let434)))
  let let437 := (Or let227 False)
  let let438 := (binrel% LT.lt let263 let250)
  let let439 := (And let337 let335)
  let let440 := (binrel% LT.lt let283 let281)
  let let441 := (And let340 let338)
  let let442 := (Eq let180 let338)
  let let443 := (binrel% LT.lt let284 let266)
  let let444 := (And let305 let331)
  let let445 := (binrel% LE.le let285 let200)
  let let446 := (And let309 let184)
  let let447 := (binrel% LE.le let209 let172)
  let let448 := (And let205 let226)
  let let449 := (Or let238 (Or let61 let202))
  let let450 := (Or let244 (Or let61 let329))
  let let451 := (Eq let61 let61)
  let let452 := (Not let333)
  let let453 := (binrel% LT.lt let86 let68)
  let let454 := (And let360 let296)
  let let455 := (Eq let243 let296)
  let let456 := (binrel% LE.le let350 let308)
  let let457 := (And let371 let60)
  let let458 := (binrel% LT.lt let351 let70)
  let let459 := (And let270 let333)
  let let460 := (Or let167 let61)
  let let461 := (Or let167 (Or let179 let61))
  let let462 := (Or let167 (Or let179 (Or let184 let61)))
  let let463 := (Or let238 (Or let227 let61))
  let let464 := (Or let238 (Or let61 (Or let184 (Or let179 (Or let167 (Or let227 let97))))))
  let let465 := (Or let244 (Or let61 (Or let366 (Or let181 (Or let169 (Or let227 let365))))))
  let let466 := (Or let365 False)
  let let467 := (binrel% LE.le let363 let368)
  let let468 := (And let380 let226)
  let let469 := (binrel% LE.le let359 let277)
  let let470 := (binrel% LE.le let45 let1)
  let let471 := (And let390 let470)
  let let472 := (binrel% LE.le let195 let251)
  let let473 := (binrel% LE.le let25 let1)
  let let474 := (And let334 let473)
  let let475 := (binrel% LE.le let191 let369)
  let let476 := (binrel% LE.le let31 let1)
  let let477 := (And let269 let476)
  let let478 := (Eq let185 let290)
  let let479 := (binrel% LE.le let372 let69)
  let let480 := (And let273 let60)
  let let481 := (Implies let480 let479)
  let let482 := (binrel% LE.le let86 let206)
  let let483 := (binrel% LE.le x6 let22)
  let let484 := (And let360 let483)
  let let485 := (Implies let484 let482)
  let let486 := (binrel% LT.lt let76 let20)
  let let487 := (And let270 let339)
  let let488 := (Eq let98 let339)
  let let489 := (Or let238 (Or let227 (Or let167 (Or let179 (Or let184 (Or let61 let160))))))
  let let490 := (Or let244 (Or let227 (Or let169 (Or let181 (Or let366 (Or let61 let364))))))
  let let491 := (binrel% LE.le let321 let387)
  let let492 := (And let216 let476)
  let let493 := (binrel% LE.le let249 let388)
  let let494 := (And let166 let473)
  let let495 := (binrel% LE.le let237 let302)
  let let496 := (And let164 let470)
  let let497 := (binrel% LE.le let312 let389)
  let let498 := (And let336 let226)
  let let499 := (binrel% LT.lt let230 let20)
  let let500 := (And let270 let162)
  let let501 := (Eq let161 let162)
  let let502 := (Or let180 let180)
  let let503 := (Or let232 (Or let180 (Or let167 let154)))
  let let504 := (Or let232 (Or let180 (Or let169 let156)))
  let let505 := (Or let156 False)
  let let506 := (Not let326)
  let let507 := (Eq let154 let506)
  let let508 := (Or let506 False)
  let let509 := (binrel% LE.le let142 let139)
  let let510 := (And let192 let231)
  let let511 := (binrel% LE.le let112 let108)
  let let512 := (And let205 let179)
  let let513 := (Implies let512 let511)
  let let514 := (binrel% LE.le let143 let140)
  let let515 := (And let136 let470)
  let let516 := (binrel% LT.lt let118 let20)
  let let517 := (And let270 let326)
  let let518 := (Implies let517 let516)
  let let519 := (Eq let155 let326)
  let let520 := (Or let227 (Or let180 (Or let231 let154)))
  let let521 := (Or let227 (Or let180 (Or let291 let156)))
  let let522 := (binrel% LE.le let111 let106)
  let let523 := (And let105 let226)
  let let524 := (binrel% LT.lt let115 let109)
  let let525 := (And let103 let278)
  let let526 := (Or let161 (Or let60 (Or let328 let97)))
  let let527 := (Or let161 (Or let99 (Or let328 let365)))
  let let528 := (binrel% LE.le let72 let67)
  let let529 := (And let273 let160)
  let let530 := (binrel% LT.lt let73 let68)
  let let531 := (And let360 let62)
  let let532 := (Eq let61 let62)
  let let533 := (binrel% LE.le let74 let69)
  let let534 := (And let273 let202)
  let let535 := (binrel% LE.le let76 let70)
  let let536 := (And let270 let93)
  let let537 := (Or let179 (Or let227 (Or let184 (Or let328 (Or let160 (Or let60 let167))))))
  let let538 := (Or let181 (Or let227 (Or let366 (Or let328 (Or let364 (Or let99 let169))))))
  let let539 := (Not let331)
  let let540 := (binrel% LT.lt let26 let10)
  let let541 := (And let59 let338)
  let let542 := (binrel% LE.le let27 let12)
  let let543 := (And let7 let226)
  let let544 := (binrel% LT.lt let32 let14)
  let let545 := (And let297 let290)
  let let546 := (binrel% LE.le let35 let16)
  let let547 := (And let132 let202)
  let let548 := (binrel% LT.lt let38 let17)
  let let549 := (And let5 let162)
  let let550 := (binrel% LT.lt let41 let18)
  let let551 := (And let5 let62)
  let let552 := (binrel% LT.lt let46 let20)
  let let553 := (And let270 let331)
fun lean_r0 : (Eq let5 True) => -- EVALUATE
fun lean_r1 : (Eq let7 True) => -- EVALUATE
fun lean_r2 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let46 let51) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let27 let53) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let26 let54) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let18 let55) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let58 let56) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let59 True) => -- EVALUATE
fun lean_r9 : (Eq let62 let61) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let41 let64) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let80 let79) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let38 let81) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let74 let84) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let35 let85) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let73 let87) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let32 let88) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let72 let90) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let92 let55) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let16 let55) => -- THEORY_REWRITE_ARITH
fun lean_r20 : let96 => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let14 let13) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let93 let98) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let101 let100) => -- THEORY_REWRITE_BOOL
fun lean_r24 : let101 => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let103 True) => -- EVALUATE
fun lean_r26 : (Eq let105 True) => -- EVALUATE
fun lean_r27 : (Eq let122 let121) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let128 let55) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let109 let102) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let106 let129) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let131 let130) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let132 True) => -- EVALUATE
fun lean_r33 : (Eq let133 True) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let136 True) => -- EVALUATE
fun lean_r35 : (Eq let147 let146) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let118 let127) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let143 let149) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let112 let125) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let142 let150) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let151 let55) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let139 let138) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let152 let138) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let153 True) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let158 let157) => -- THEORY_REWRITE_BOOL
fun lean_r45 : let158 => -- THEORY_REWRITE_BOOL
fun lean_r46 : (Eq let159 True) => -- THEORY_REWRITE_BOOL
fun lean_r47 : (Eq let162 let161) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let164 True) => -- EVALUATE
fun lean_r49 : (Eq let166 True) => -- EVALUATE
fun lean_r50 : let170 => -- THEORY_REWRITE_BOOL
fun lean_r51 : (Eq let172 let171) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let174 let60) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let178 True) => -- THEORY_REWRITE_BOOL
fun lean_r54 : (Eq let115 let126) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let183 let182) => -- THEORY_REWRITE_BOOL
fun lean_r56 : (Eq let186 let185) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let187 let66) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let191 let189) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let111 let124) => -- THEORY_REWRITE_ARITH
fun lean_r60 : let183 => -- THEORY_REWRITE_BOOL
fun lean_r61 : (Eq let192 True) => -- EVALUATE
fun lean_r62 : (Eq let195 let193) => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let196 True) => -- THEORY_REWRITE_BOOL
fun lean_r64 : (Eq let197 True) => -- THEORY_REWRITE_ARITH
fun lean_r65 : (Eq let200 let199) => -- THEORY_REWRITE_ARITH
fun lean_r66 : (Eq let170 let201) => -- THEORY_REWRITE_BOOL
fun lean_r67 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r68 : (Eq let204 let202) => -- THEORY_REWRITE_ARITH
fun lean_r69 : (Eq let205 True) => -- EVALUATE
fun lean_r70 : (Eq let206 let66) => -- THEORY_REWRITE_ARITH
fun lean_r71 : (Eq let209 let208) => -- THEORY_REWRITE_ARITH
fun lean_r72 : (Eq let68 let55) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let212 let210) => -- THEORY_REWRITE_ARITH
fun lean_r74 : (Eq let214 let213) => -- THEORY_REWRITE_ARITH
fun lean_r75 : (Eq let216 True) => -- EVALUATE
fun lean_r76 : (Eq let225 let224) => -- THEORY_REWRITE_ARITH
fun lean_r77 : (Eq let228 let226) => -- THEORY_REWRITE_BOOL
fun lean_r78 : (Eq let230 let229) => -- THEORY_REWRITE_ARITH
fun lean_r79 : (Eq let233 let232) => -- THEORY_REWRITE_ARITH
fun lean_r80 : (Eq let221 let234) => -- THEORY_REWRITE_ARITH
fun lean_r81 : (Eq let237 let236) => -- THEORY_REWRITE_ARITH
fun lean_r82 : (Eq let239 True) => -- THEORY_REWRITE_BOOL
fun lean_r83 : let242 => -- THEORY_REWRITE_BOOL
fun lean_r84 : (Eq let246 let245) => -- THEORY_REWRITE_BOOL
fun lean_r85 : (Eq let249 let248) => -- THEORY_REWRITE_ARITH
fun lean_r86 : (Eq let250 let198) => -- THEORY_REWRITE_ARITH
fun lean_r87 : (Eq let251 let55) => -- THEORY_REWRITE_ARITH
fun lean_r88 : (Eq let108 let107) => -- THEORY_REWRITE_ARITH
fun lean_r89 : (Eq let218 let252) => -- THEORY_REWRITE_ARITH
fun lean_r90 : (Eq let261 let260) => -- THEORY_REWRITE_ARITH
fun lean_r91 : (Eq let263 let262) => -- THEORY_REWRITE_ARITH
fun lean_r92 : (Eq let264 True) => -- THEORY_REWRITE_BOOL
fun lean_r93 : (Eq let266 let265) => -- THEORY_REWRITE_ARITH
fun lean_r94 : (Eq let267 let252) => -- THEORY_REWRITE_ARITH
fun lean_r95 : (Eq let268 let180) => -- THEORY_REWRITE_ARITH
fun lean_r96 : (Eq let269 True) => -- EVALUATE
fun lean_r97 : (Eq let270 True) => -- EVALUATE
fun lean_r98 : (Eq let271 let155) => -- THEORY_REWRITE_ARITH
fun lean_r99 : (Eq let272 let98) => -- THEORY_REWRITE_ARITH
fun lean_r100 : (Eq let273 True) => -- EVALUATE
fun lean_r101 : (Eq let274 True) => -- EVALUATE
fun lean_r102 : (Eq let275 False) => -- THEORY_REWRITE_BOOL
fun lean_r103 : (Eq let277 let55) => -- THEORY_REWRITE_ARITH
fun lean_r104 : (Eq let278 let232) => -- THEORY_REWRITE_ARITH
fun lean_r105 : (Eq let289 let288) => -- THEORY_REWRITE_ARITH
fun lean_r106 : (Eq let290 let185) => -- THEORY_REWRITE_ARITH
fun lean_r107 : (Eq let293 let292) => -- THEORY_REWRITE_BOOL
fun lean_r108 : (Eq let295 let161) => -- THEORY_REWRITE_ARITH
fun lean_r109 : (Eq let281 let280) => -- THEORY_REWRITE_ARITH
fun lean_r110 : (Eq let296 let243) => -- THEORY_REWRITE_ARITH
fun lean_r111 : (Eq let297 True) => -- EVALUATE
fun lean_r112 : (Eq let298 True) => -- THEORY_REWRITE_ARITH
fun lean_r113 : (Eq let300 let55) => -- THEORY_REWRITE_ARITH
fun lean_r114 : (Eq let301 let1) => -- THEORY_REWRITE_ARITH
fun lean_r115 : (Eq let302 let55) => -- THEORY_REWRITE_ARITH
fun lean_r116 : (Eq let304 let173) => -- THEORY_REWRITE_ARITH
fun lean_r117 : (Eq let254 let303) => -- THEORY_REWRITE_ARITH
fun lean_r118 : (Eq let305 True) => -- EVALUATE
fun lean_r119 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r120 : (Eq let307 True) => -- THEORY_REWRITE_ARITH
fun lean_r121 : (Eq let308 let55) => -- THEORY_REWRITE_ARITH
fun lean_r122 : (Eq let309 True) => -- EVALUATE
fun lean_r123 : (Eq let255 let11) => -- THEORY_REWRITE_ARITH
fun lean_r124 : (Eq let12 let57) => -- THEORY_REWRITE_ARITH
fun lean_r125 : (Eq let70 let55) => -- THEORY_REWRITE_ARITH
fun lean_r126 : (Eq let257 x1) => -- THEORY_REWRITE_ARITH
fun lean_r127 : (Eq let312 let310) => -- THEORY_REWRITE_ARITH
fun lean_r128 : (Eq let313 let168) => -- THEORY_REWRITE_ARITH
fun lean_r129 : (Eq let318 let55) => -- THEORY_REWRITE_ARITH
fun lean_r130 : (Eq let242 let319) => -- THEORY_REWRITE_BOOL
fun lean_r131 : let246 => -- THEORY_REWRITE_BOOL
fun lean_r132 : (Eq let321 let320) => -- THEORY_REWRITE_ARITH
fun lean_r133 : (Eq let322 True) => -- EVALUATE
fun lean_r134 : (Eq let323 True) => -- THEORY_REWRITE_BOOL
fun lean_r135 : (Eq let325 let55) => -- THEORY_REWRITE_ARITH
fun lean_r136 : (Eq let326 let155) => -- THEORY_REWRITE_ARITH
fun lean_r137 : (Eq let327 True) => -- EVALUATE
fun lean_r138 : let330 => -- THEORY_REWRITE_BOOL
fun lean_r139 : (Eq let331 let168) => -- THEORY_REWRITE_ARITH
fun lean_r140 : let293 => -- THEORY_REWRITE_BOOL
fun lean_r141 : (Eq let332 True) => -- THEORY_REWRITE_BOOL
fun lean_r142 : (Eq let333 let328) => -- THEORY_REWRITE_ARITH
fun lean_r143 : (Eq let284 let316) => -- THEORY_REWRITE_ARITH
fun lean_r144 : (Eq let285 let317) => -- THEORY_REWRITE_ARITH
fun lean_r145 : (Eq let283 let315) => -- THEORY_REWRITE_ARITH
fun lean_r146 : (Eq let334 True) => -- EVALUATE
fun lean_r147 : (Eq let335 let240) => -- THEORY_REWRITE_ARITH
fun lean_r148 : (Eq let336 True) => -- EVALUATE
fun lean_r149 : (Eq let337 True) => -- EVALUATE
fun lean_r150 : (Eq let338 let180) => -- THEORY_REWRITE_ARITH
fun lean_r151 : (Eq let339 let98) => -- THEORY_REWRITE_ARITH
fun lean_r152 : (Eq let340 True) => -- EVALUATE
fun lean_r153 : (Eq let341 let227) => -- THEORY_REWRITE_ARITH
fun lean_r154 : (Eq let330 let342) => -- THEORY_REWRITE_BOOL
fun lean_r155 : (Eq let140 let55) => -- THEORY_REWRITE_ARITH
fun lean_r156 : (Eq let343 True) => -- THEORY_REWRITE_ARITH
fun lean_r157 : (Eq let344 let55) => -- THEORY_REWRITE_ARITH
fun lean_r158 : (Eq let17 let4) => -- THEORY_REWRITE_ARITH
fun lean_r159 : (Eq let345 let306) => -- THEORY_REWRITE_ARITH
fun lean_r160 : (Eq let348 let55) => -- THEORY_REWRITE_ARITH
fun lean_r161 : (Eq let349 True) => -- THEORY_REWRITE_ARITH
fun lean_r162 : (Eq let350 let346) => -- THEORY_REWRITE_ARITH
fun lean_r163 : (Eq let351 let347) => -- THEORY_REWRITE_ARITH
fun lean_r164 : (Eq let356 let355) => -- THEORY_REWRITE_ARITH
fun lean_r165 : (Eq let359 let358) => -- THEORY_REWRITE_ARITH
fun lean_r166 : (Eq let360 True) => -- EVALUATE
fun lean_r167 : (Eq let363 let361) => -- THEORY_REWRITE_ARITH
fun lean_r168 : (Eq let364 let160) => -- THEORY_REWRITE_BOOL
fun lean_r169 : (Eq let365 let97) => -- THEORY_REWRITE_BOOL
fun lean_r170 : (Eq let366 let184) => -- THEORY_REWRITE_BOOL
fun lean_r171 : (Eq let367 True) => -- THEORY_REWRITE_ARITH
fun lean_r172 : (Eq let368 let211) => -- THEORY_REWRITE_ARITH
fun lean_r173 : (Eq let369 let55) => -- THEORY_REWRITE_ARITH
fun lean_r174 : (Eq let69 let55) => -- THEORY_REWRITE_ARITH
fun lean_r175 : (Eq let370 let55) => -- THEORY_REWRITE_ARITH
fun lean_r176 : (Eq let371 True) => -- EVALUATE
fun lean_r177 : (Eq let372 let324) => -- THEORY_REWRITE_ARITH
fun lean_r178 : (Eq let373 let55) => -- THEORY_REWRITE_ARITH
fun lean_r179 : (Eq let76 let91) => -- THEORY_REWRITE_ARITH
fun lean_r180 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r181 : (Eq let374 let240) => -- THEORY_REWRITE_ARITH
fun lean_r182 : (Eq let379 let378) => -- THEORY_REWRITE_ARITH
fun lean_r183 : (Eq let380 True) => -- EVALUATE
fun lean_r184 : (Eq let381 True) => -- THEORY_REWRITE_ARITH
fun lean_r185 : (Eq let383 True) => -- THEORY_REWRITE_ARITH
fun lean_r186 : (Eq let384 True) => -- THEORY_REWRITE_BOOL
fun lean_r187 : (Eq let386 let382) => -- THEORY_REWRITE_ARITH
fun lean_r188 : (Eq let387 let55) => -- THEORY_REWRITE_ARITH
fun lean_r189 : (Eq let388 let55) => -- THEORY_REWRITE_ARITH
fun lean_r190 : (Eq let389 let385) => -- THEORY_REWRITE_ARITH
fun lean_r191 : (Eq let390 True) => -- EVALUATE
fun lean_r192 : (Eq let220 let299) => -- THEORY_REWRITE_ARITH
fun lean_r193 : (Eq let395 let394) => -- THEORY_REWRITE_ARITH
fun lean_a194 : let403 => by
have lean_s0 : (Or let232 (Or let180 (Or let169 let505))) :=
  (scope (fun lean_a195 : let231 =>
    (scope (fun lean_a196 : let179 =>
      (scope (fun lean_a197 : let168 =>
        (scope (fun lean_a198 : let155 =>
          have lean_s0 : let519 := by timed Eq.symm lean_r136
          have lean_s1 : let326 := by timed eqResolve lean_a198 lean_s0
          have lean_s2 : let508 :=
            (scope (fun lean_a199 : let326 =>
              have lean_s2 : let270 := by timed trueElim lean_r97
              have lean_s3 : let517 := by timed And.intro lean_s2 lean_a199
              have lean_s4 : let518 := by arithMulPos [let117, let3, let19], 0
              have lean_s5 : let516 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let136 := by timed trueElim lean_r34
              have lean_s7 : let426 := by timed Eq.symm lean_r139
              have lean_s8 : let331 := by timed eqResolve lean_a197 lean_s7
              have lean_s9 : let470 := by intTightUb lean_s8
              have lean_s10 : let515 := by timed And.intro lean_s6 lean_s9
              have lean_s11 : (Implies let515 let514) := by arithMulPos [let45, let1, let135], 1
              have lean_s12 : let514 := by timed modusPonens lean_s10 lean_s11
              have lean_s13 : let205 := by timed trueElim lean_r69
              have lean_s14 : let512 := by timed And.intro lean_s13 lean_a196
              have lean_s15 : let513 := by arithMulNeg [let25, let3, let107], 3
              have lean_s16 : let511 := by timed modusPonens lean_s14 lean_s15
              have lean_s17 : let192 := by timed trueElim lean_r61
              have lean_s18 : let510 := by timed And.intro lean_s17 lean_a195
              have lean_s19 : (Implies let510 let509) := by arithMulNeg [let114, let3, let138], 3
              have lean_s20 : let509 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : let147 := by sumBounds [lean_s5, lean_s12, lean_s16, lean_s20]
              let lean_s22 := by timed congrHAdd lean_r38 lean_r39
              let lean_s23 := by timed congrHAdd lean_r37 lean_s22
              have lean_s24 : (Eq let144 let151) := by timed congrHAdd lean_r36 lean_s23
              have lean_s25 : (Eq let144 let55) := by timed Eq.trans lean_s24 lean_r40
              let lean_s26 := by timed flipCongrArg lean_s25 [GE.ge]
              let lean_s27 := by timed congrHAdd lean_r88 lean_r41
              let lean_s28 := by timed congrHAdd lean_r155 lean_s27
              have lean_s29 : (Eq let141 let152) := by timed congrHAdd lean_r67 lean_s28
              have lean_s30 : (Eq let141 let138) := by timed Eq.trans lean_s29 lean_r42
              have lean_s31 : (Eq let145 let153) := by timed congr lean_s26 lean_s30
              have lean_s32 : (Eq let145 True) := by timed Eq.trans lean_s31 lean_r43
              have lean_s33 : (Eq let146 let275) := by timed flipCongrArg lean_s32 [Not]
              have lean_s34 : (Eq let146 False) := by timed Eq.trans lean_s33 lean_r102
              have lean_s35 : (Eq let147 False) := by timed Eq.trans lean_r35 lean_s34
              show False from by timed eqResolve lean_s21 lean_s35
            ))
          have lean_s3 : let506 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let506 let156) := by timed flipCongrArg lean_r136 [Not]
          have lean_s5 : (Eq let506 let154) := by timed Eq.trans lean_s4 lean_r45
          have lean_s6 : let154 := by timed eqResolve lean_s3 lean_s5
          have lean_s7 : let507 := by timed Eq.symm lean_s5
          have lean_s8 : let506 := by timed eqResolve lean_s6 lean_s7
          show False from by timed contradiction lean_s1 lean_s8
  ))))))))
have lean_s1 : (Not (And let231 (And let179 (And let168 let155)))) := by liftOrNToNeg lean_s0
have lean_s2 : let504 := by timed flipNotAnd lean_s1 [let231, let179, let168, let155]
have lean_s3 : let424 := by timed rfl
have lean_s4 : (Eq let232 let232) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let180 let180) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : let264 := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [Eq]
have lean_s10 : (Eq let201 let264) := by timed congr lean_s9 lean_r50
have lean_s11 : (Eq let201 True) := by timed Eq.trans lean_s10 lean_r92
have lean_s12 : (Eq let170 True) := by timed Eq.trans lean_r66 lean_s11
have lean_s13 : let170 := by timed trueElim lean_s12
let lean_s14 := by timed congr lean_s3 lean_s13
have lean_s15 : let159 := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [Eq]
have lean_s17 : (Eq let157 let159) := by timed congr lean_s16 lean_r45
have lean_s18 : (Eq let157 True) := by timed Eq.trans lean_s17 lean_r46
have lean_s19 : (Eq let158 True) := by timed Eq.trans lean_r44 lean_s18
have lean_s20 : let158 := by timed trueElim lean_s19
let lean_s21 := by timed congr lean_s14 lean_s20
let lean_s22 := by timed congr lean_s7 lean_s21
have lean_s23 : (Eq let504 let503) := by timed congr lean_s5 lean_s22
have lean_s24 : let503 := by timed eqResolve lean_s2 lean_s23
have lean_s25 : (Or let232 (Or let167 (Or let180 let154))) := by permutateOr lean_s24, [0, 2, 1, 3], (- 1)
have lean_s26 : (Or let227 (Or let180 (Or let291 let505))) :=
  (scope (fun lean_a200 : let226 =>
    (scope (fun lean_a201 : let179 =>
      (scope (fun lean_a202 : let232 =>
        (scope (fun lean_a203 : let155 =>
          have lean_s26 : let519 := by timed Eq.symm lean_r136
          have lean_s27 : let326 := by timed eqResolve lean_a203 lean_s26
          have lean_s28 : let508 :=
            (scope (fun lean_a202 : let326 =>
              have lean_s28 : let270 := by timed trueElim lean_r97
              have lean_s29 : let517 := by timed And.intro lean_s28 lean_a202
              have lean_s30 : let518 := by arithMulPos [let117, let3, let19], 0
              have lean_s31 : let516 := by timed modusPonens lean_s29 lean_s30
              have lean_s32 : let103 := by timed trueElim lean_r25
              have lean_s33 : let429 := by timed Eq.symm lean_r104
              have lean_s34 : let278 := by timed eqResolve lean_a202 lean_s33
              have lean_s35 : let525 := by timed And.intro lean_s32 lean_s34
              have lean_s36 : (Implies let525 let524) := by arithMulPos [let114, let3, let102], 0
              have lean_s37 : let524 := by timed modusPonens lean_s35 lean_s36
              have lean_s38 : let205 := by timed trueElim lean_r69
              have lean_s39 : let512 := by timed And.intro lean_s38 lean_a201
              have lean_s40 : let513 := by arithMulNeg [let25, let3, let107], 3
              have lean_s41 : let511 := by timed modusPonens lean_s39 lean_s40
              have lean_s42 : let105 := by timed trueElim lean_r26
              have lean_s43 : let523 := by timed And.intro lean_s42 lean_a200
              have lean_s44 : (Implies let523 let522) := by arithMulNeg [x1, let11, let104], 3
              have lean_s45 : let522 := by timed modusPonens lean_s43 lean_s44
              have lean_s46 : let122 := by sumBounds [lean_s31, lean_s37, lean_s41, lean_s45]
              let lean_s47 := by timed congrHAdd lean_r38 lean_r59
              let lean_s48 := by timed congrHAdd lean_r54 lean_s47
              have lean_s49 : (Eq let119 let128) := by timed congrHAdd lean_r36 lean_s48
              have lean_s50 : (Eq let119 let55) := by timed Eq.trans lean_s49 lean_r28
              let lean_s51 := by timed flipCongrArg lean_s50 [GE.ge]
              let lean_s52 := by timed congrHAdd lean_r88 lean_r30
              let lean_s53 := by timed congrHAdd lean_r29 lean_s52
              have lean_s54 : (Eq let110 let131) := by timed congrHAdd lean_r67 lean_s53
              have lean_s55 : (Eq let110 let130) := by timed Eq.trans lean_s54 lean_r31
              have lean_s56 : (Eq let120 let133) := by timed congr lean_s51 lean_s55
              have lean_s57 : (Eq let120 True) := by timed Eq.trans lean_s56 lean_r33
              have lean_s58 : (Eq let121 let275) := by timed flipCongrArg lean_s57 [Not]
              have lean_s59 : (Eq let121 False) := by timed Eq.trans lean_s58 lean_r102
              have lean_s60 : (Eq let122 False) := by timed Eq.trans lean_r27 lean_s59
              show False from by timed eqResolve lean_s46 lean_s60
            ))
          have lean_s29 : let506 := by liftOrNToNeg lean_s28
          have lean_s30 : (Eq let506 let156) := by timed flipCongrArg lean_r136 [Not]
          have lean_s31 : (Eq let506 let154) := by timed Eq.trans lean_s30 lean_r45
          have lean_s32 : let154 := by timed eqResolve lean_s29 lean_s31
          have lean_s33 : let507 := by timed Eq.symm lean_s31
          have lean_s34 : let506 := by timed eqResolve lean_s32 lean_s33
          show False from by timed contradiction lean_s27 lean_s34
  ))))))))
have lean_s27 : (Not (And let226 (And let179 (And let232 let155)))) := by liftOrNToNeg lean_s26
have lean_s28 : let521 := by timed flipNotAnd lean_s27 [let226, let179, let232, let155]
have lean_s29 : let424 := by timed rfl
have lean_s30 : let423 := by timed rfl
let lean_s31 := by timed congr lean_s29 lean_s30
let lean_s32 := by timed congr lean_s29 lean_s6
have lean_s33 : let332 := by timed rfl
let lean_s34 := by timed flipCongrArg lean_s33 [Eq]
have lean_s35 : (Eq let292 let332) := by timed congr lean_s34 lean_r140
have lean_s36 : (Eq let292 True) := by timed Eq.trans lean_s35 lean_r141
have lean_s37 : (Eq let293 True) := by timed Eq.trans lean_r107 lean_s36
have lean_s38 : let293 := by timed trueElim lean_s37
let lean_s39 := by timed congr lean_s29 lean_s38
let lean_s40 := by timed congr lean_s39 lean_s20
let lean_s41 := by timed congr lean_s32 lean_s40
have lean_s42 : (Eq let521 let520) := by timed congr lean_s31 lean_s41
have lean_s43 : let520 := by timed eqResolve lean_s28 lean_s42
have lean_s44 : (Or let231 (Or let180 (Or let154 let227))) := by permutateOr lean_s43, [2, 1, 3, 0], (- 1)
have lean_s45 : (Or let228 (Or let412 False)) :=
  (scope (fun lean_a202 : let227 =>
    (scope (fun lean_a203 : let401 =>
      have lean_s45 : let327 := by timed trueElim lean_r137
      have lean_s46 : let419 := by timed Eq.symm lean_r153
      have lean_s47 : let341 := by timed eqResolve lean_a202 lean_s46
      have lean_s48 : let418 := by timed And.intro lean_s45 lean_s47
      have lean_s49 : (Implies let418 let417) := by arithMulPos [x1, let11, let3], 0
      have lean_s50 : let417 := by timed modusPonens lean_s48 lean_s49
      have lean_s51 : let322 := by timed trueElim lean_r133
      have lean_s52 : let416 := by timed And.intro lean_s51 lean_a203
      have lean_s53 : (Implies let416 let415) := by arithMulNeg [x1, let253, let22], 3
      have lean_s54 : let415 := by timed modusPonens lean_s52 lean_s53
      have lean_s55 : let261 := by sumBounds [lean_s50, lean_s54]
      let lean_s56 := by timed flipCongrArg lean_r126 [HAdd.hAdd]
      have lean_s57 : (Eq let207 let207) := by timed rfl
      have lean_s58 : (Eq let258 let301) := by timed congr lean_s56 lean_s57
      have lean_s59 : (Eq let258 let1) := by timed Eq.trans lean_s58 lean_r114
      let lean_s60 := by timed flipCongrArg lean_s59 [GE.ge]
      let lean_s61 := by timed flipCongrArg lean_r123 [HAdd.hAdd]
      have lean_s62 : (Eq let256 let304) := by timed congr lean_s61 lean_r117
      have lean_s63 : (Eq let256 let173) := by timed Eq.trans lean_s62 lean_r116
      have lean_s64 : (Eq let259 let298) := by timed congr lean_s60 lean_s63
      have lean_s65 : (Eq let259 True) := by timed Eq.trans lean_s64 lean_r112
      have lean_s66 : (Eq let260 let275) := by timed flipCongrArg lean_s65 [Not]
      have lean_s67 : (Eq let260 False) := by timed Eq.trans lean_s66 lean_r102
      have lean_s68 : (Eq let261 False) := by timed Eq.trans lean_r90 lean_s67
      show False from by timed eqResolve lean_s55 lean_s68
  ))))
have lean_s46 : (Not (And let227 let401)) := by liftOrNToNeg lean_s45
have lean_s47 : let414 := by timed flipNotAnd lean_s46 [let227, let401]
let lean_s48 := by timed flipCongrArg lean_r77 [Or]
have lean_s49 : (Eq let412 let412) := by timed rfl
have lean_s50 : (Eq let414 let413) := by timed congr lean_s48 lean_s49
have lean_s51 : let413 := by timed eqResolve lean_s47 lean_s50
have lean_s52 : (Eq And And) := by timed rfl
have lean_s53 : (Eq let402 let402) := by timed rfl
let lean_s54 := by timed congr lean_s52 lean_s53
let lean_s55 := by timed flipCongrArg lean_r79 [Or]
have lean_s56 : (Eq let400 let410) := by timed congr lean_s55 lean_r128
let lean_s57 := by timed congr lean_s52 lean_s56
let lean_s58 := by timed flipCongrArg lean_r95 [Or]
have lean_s59 : (Eq let399 let409) := by timed congr lean_s58 lean_r98
let lean_s60 := by timed congr lean_s52 lean_s59
let lean_s61 := by timed flipCongrArg lean_r56 [Or]
have lean_s62 : (Eq let398 let406) := by timed congr lean_s61 lean_r181
let lean_s63 := by timed congr lean_s52 lean_s62
let lean_s64 := by timed flipCongrArg lean_r99 [Or]
have lean_s65 : (Eq let397 let408) := by timed congr lean_s64 lean_r108
let lean_s66 := by timed congr lean_s52 lean_s65
let lean_s67 := by timed flipCongrArg lean_r68 [Or]
have lean_s68 : (Eq let396 let407) := by timed congr lean_s67 lean_r52
let lean_s69 := by timed congr lean_s52 lean_s68
let lean_s70 := by timed congr lean_s69 lean_r110
let lean_s71 := by timed congr lean_s66 lean_s70
let lean_s72 := by timed congr lean_s63 lean_s71
let lean_s73 := by timed congr lean_s60 lean_s72
let lean_s74 := by timed congr lean_s57 lean_s73
have lean_s75 : (Eq let403 let411) := by timed congr lean_s54 lean_s74
have lean_s76 : let411 := by timed eqResolve lean_a194 lean_s75
have lean_s77 : let402 := by andElim lean_s76, 0
have lean_s78 : (Or let226 let226) := by R2 lean_s51, lean_s77, let401, [(- 1), (- 1)]
have lean_s79 : let226 := by factor lean_s78, 1
let lean_s80 := by R2 lean_s44, lean_s79, let226, [(- 1), 0]
have lean_s81 : let409 := by andElim lean_s76, 2
have lean_s82 : (Or let231 let502) := by R1 lean_s80, lean_s81, let154, [(- 1), (- 1)]
have lean_s83 : (Or let231 let180) := by factor lean_s82, (- 1)
have lean_s84 : (Or let181 (Or let227 (Or let366 (Or let328 (Or let364 (Or let99 (Or let169 False))))))) :=
  (scope (fun lean_a204 : let180 =>
    (scope (fun lean_a205 : let226 =>
      (scope (fun lean_a206 : let185 =>
        (scope (fun lean_a207 : let202 =>
          (scope (fun lean_a208 : let161 =>
            (scope (fun lean_a209 : let61 =>
              (scope (fun lean_a210 : let168 =>
                have lean_s84 : let426 := by timed Eq.symm lean_r139
                have lean_s85 : let331 := by timed eqResolve lean_a210 lean_s84
                have lean_s86 : (Or let539 False) :=
                  (scope (fun lean_a209 : let331 =>
                    have lean_s86 : let270 := by timed trueElim lean_r97
                    have lean_s87 : let553 := by timed And.intro lean_s86 lean_a209
                    have lean_s88 : (Implies let553 let552) := by arithMulPos [let45, let3, let19], 0
                    have lean_s89 : let552 := by timed modusPonens lean_s87 lean_s88
                    have lean_s90 : let5 := by timed trueElim lean_r0
                    have lean_s91 : let532 := by timed Eq.symm lean_r9
                    have lean_s92 : let62 := by timed eqResolve lean_a209 lean_s91
                    have lean_s93 : let551 := by timed And.intro lean_s90 lean_s92
                    have lean_s94 : (Implies let551 let550) := by arithMulPos [let40, let1, let4], 0
                    have lean_s95 : let550 := by timed modusPonens lean_s93 lean_s94
                    have lean_s96 : let501 := by timed Eq.symm lean_r47
                    have lean_s97 : let162 := by timed eqResolve lean_a208 lean_s96
                    have lean_s98 : let549 := by timed And.intro lean_s90 lean_s97
                    have lean_s99 : (Implies let549 let548) := by arithMulPos [let37, let3, let4], 0
                    have lean_s100 : let548 := by timed modusPonens lean_s98 lean_s99
                    have lean_s101 : let132 := by timed trueElim lean_r32
                    have lean_s102 : let547 := by timed And.intro lean_s101 lean_a207
                    have lean_s103 : (Implies let547 let546) := by arithMulNeg [let34, let1, let15], 3
                    have lean_s104 : let546 := by timed modusPonens lean_s102 lean_s103
                    have lean_s105 : let297 := by timed trueElim lean_r111
                    have lean_s106 : let478 := by timed Eq.symm lean_r106
                    have lean_s107 : let290 := by timed eqResolve lean_a206 lean_s106
                    have lean_s108 : let545 := by timed And.intro lean_s105 lean_s107
                    have lean_s109 : (Implies let545 let544) := by arithMulPos [let31, let3, let13], 0
                    have lean_s110 : let544 := by timed modusPonens lean_s108 lean_s109
                    have lean_s111 : let7 := by timed trueElim lean_r1
                    have lean_s112 : let543 := by timed And.intro lean_s111 lean_a205
                    have lean_s113 : (Implies let543 let542) := by arithMulNeg [x1, let11, let6], 3
                    have lean_s114 : let542 := by timed modusPonens lean_s112 lean_s113
                    have lean_s115 : let59 := by timed trueElim lean_r8
                    have lean_s116 : let442 := by timed Eq.symm lean_r150
                    have lean_s117 : let338 := by timed eqResolve lean_a204 lean_s116
                    have lean_s118 : let541 := by timed And.intro lean_s115 lean_s117
                    have lean_s119 : (Implies let541 let540) := by arithMulPos [let25, let3, let9], 0
                    have lean_s120 : let540 := by timed modusPonens lean_s118 lean_s119
                    have lean_s121 : let50 := by sumBounds [lean_s89, lean_s95, lean_s100, lean_s104, lean_s110, lean_s114, lean_s120]
                    let lean_s122 := by timed congrHAdd lean_r4 lean_r5
                    let lean_s123 := by timed congrHAdd lean_r16 lean_s122
                    let lean_s124 := by timed congrHAdd lean_r14 lean_s123
                    let lean_s125 := by timed congrHAdd lean_r12 lean_s124
                    let lean_s126 := by timed congrHAdd lean_r10 lean_s125
                    have lean_s127 : (Eq let47 let373) := by timed congrHAdd lean_r3 lean_s126
                    have lean_s128 : (Eq let47 let55) := by timed Eq.trans lean_s127 lean_r178
                    let lean_s129 := by timed flipCongrArg lean_s128 [GE.ge]
                    let lean_s130 := by timed congrHAdd lean_r124 lean_r119
                    let lean_s131 := by timed congrHAdd lean_r21 lean_s130
                    let lean_s132 := by timed congrHAdd lean_r19 lean_s131
                    let lean_s133 := by timed congrHAdd lean_r158 lean_s132
                    let lean_s134 := by timed congrHAdd lean_r6 lean_s133
                    have lean_s135 : (Eq let21 let58) := by timed congrHAdd lean_r67 lean_s134
                    have lean_s136 : (Eq let21 let56) := by timed Eq.trans lean_s135 lean_r7
                    have lean_s137 : (Eq let48 let381) := by timed congr lean_s129 lean_s136
                    have lean_s138 : (Eq let48 True) := by timed Eq.trans lean_s137 lean_r184
                    have lean_s139 : (Eq let49 let275) := by timed flipCongrArg lean_s138 [Not]
                    have lean_s140 : (Eq let49 False) := by timed Eq.trans lean_s139 lean_r102
                    have lean_s141 : (Eq let50 False) := by timed Eq.trans lean_r2 lean_s140
                    show False from by timed eqResolve lean_s121 lean_s141
                  ))
                have lean_s87 : let539 := by liftOrNToNeg lean_s86
                have lean_s88 : (Eq let539 let169) := by timed flipCongrArg lean_r139 [Not]
                have lean_s89 : (Eq let539 let167) := by timed Eq.trans lean_s88 lean_r50
                have lean_s90 : let167 := by timed eqResolve lean_s87 lean_s89
                have lean_s91 : (Eq let167 let539) := by timed Eq.symm lean_s89
                have lean_s92 : let539 := by timed eqResolve lean_s90 lean_s91
                show False from by timed contradiction lean_s85 lean_s92
  ))))))))))))))
have lean_s85 : (Not (And let180 (And let226 (And let185 (And let202 (And let161 (And let61 let168))))))) := by liftOrNToNeg lean_s84
have lean_s86 : let538 := by timed flipNotAnd lean_s85 [let180, let226, let185, let202, let161, let61, let168]
have lean_s87 : let424 := by timed rfl
have lean_s88 : let196 := by timed rfl
let lean_s89 := by timed flipCongrArg lean_s88 [Eq]
have lean_s90 : (Eq let182 let196) := by timed congr lean_s89 lean_r60
have lean_s91 : (Eq let182 True) := by timed Eq.trans lean_s90 lean_r63
have lean_s92 : (Eq let183 True) := by timed Eq.trans lean_r55 lean_s91
have lean_s93 : let183 := by timed trueElim lean_s92
let lean_s94 := by timed congr lean_s87 lean_s93
let lean_s95 := by timed congr lean_s87 lean_s30
let lean_s96 := by timed congr lean_s87 lean_r170
have lean_s97 : (Eq let328 let328) := by timed rfl
let lean_s98 := by timed congr lean_s87 lean_s97
let lean_s99 := by timed congr lean_s87 lean_r168
have lean_s100 : let384 := by timed rfl
let lean_s101 := by timed flipCongrArg lean_s100 [Eq]
have lean_s102 : (Eq let100 let384) := by timed congr lean_s101 lean_r24
have lean_s103 : (Eq let100 True) := by timed Eq.trans lean_s102 lean_r186
have lean_s104 : (Eq let101 True) := by timed Eq.trans lean_r23 lean_s103
have lean_s105 : let101 := by timed trueElim lean_s104
let lean_s106 := by timed congr lean_s87 lean_s105
let lean_s107 := by timed congr lean_s106 lean_s13
let lean_s108 := by timed congr lean_s99 lean_s107
let lean_s109 := by timed congr lean_s98 lean_s108
let lean_s110 := by timed congr lean_s96 lean_s109
let lean_s111 := by timed congr lean_s95 lean_s110
have lean_s112 : (Eq let538 let537) := by timed congr lean_s94 lean_s111
have lean_s113 : let537 := by timed eqResolve lean_s86 lean_s112
have lean_s114 : (Or let167 (Or let179 (Or let184 (Or let160 (Or let60 (Or let227 let328)))))) := by permutateOr lean_s113, [6, 0, 2, 4, 5, 1, 3], (- 1)
have lean_s115 : (Or let161 (Or let99 (Or let328 let466))) :=
  (scope (fun lean_a210 : let160 =>
    (scope (fun lean_a211 : let61 =>
      (scope (fun lean_a212 : let202 =>
        (scope (fun lean_a213 : let98 =>
          have lean_s115 : let488 := by timed Eq.symm lean_r151
          have lean_s116 : let339 := by timed eqResolve lean_a213 lean_s115
          have lean_s117 : let93 := by intTightUb lean_s116
          have lean_s118 : (Or let94 False) :=
            (scope (fun lean_a212 : let93 =>
              have lean_s118 : let270 := by timed trueElim lean_r97
              have lean_s119 : let536 := by timed And.intro lean_s118 lean_a212
              have lean_s120 : (Implies let536 let535) := by arithMulPos [let75, let1, let19], 1
              have lean_s121 : let535 := by timed modusPonens lean_s119 lean_s120
              have lean_s122 : let273 := by timed trueElim lean_r100
              have lean_s123 : let534 := by timed And.intro lean_s122 lean_a212
              have lean_s124 : (Implies let534 let533) := by arithMulNeg [let34, let1, let66], 3
              have lean_s125 : let533 := by timed modusPonens lean_s123 lean_s124
              have lean_s126 : let360 := by timed trueElim lean_r166
              have lean_s127 : let532 := by timed Eq.symm lean_r9
              have lean_s128 : let62 := by timed eqResolve lean_a211 lean_s127
              have lean_s129 : let531 := by timed And.intro lean_s126 lean_s128
              have lean_s130 : (Implies let531 let530) := by arithMulPos [let40, let1, let65], 0
              have lean_s131 : let530 := by timed modusPonens lean_s129 lean_s130
              have lean_s132 : let529 := by timed And.intro lean_s122 lean_a210
              have lean_s133 : (Implies let529 let528) := by arithMulNeg [let37, let3, let66], 3
              have lean_s134 : let528 := by timed modusPonens lean_s132 lean_s133
              have lean_s135 : let80 := by sumBounds [lean_s121, lean_s125, lean_s131, lean_s134]
              let lean_s136 := by timed congrHAdd lean_r15 lean_r17
              let lean_s137 := by timed congrHAdd lean_r13 lean_s136
              have lean_s138 : (Eq let77 let92) := by timed congrHAdd lean_r179 lean_s137
              have lean_s139 : (Eq let77 let55) := by timed Eq.trans lean_s138 lean_r18
              let lean_s140 := by timed flipCongrArg lean_s139 [GE.ge]
              let lean_s141 := by timed congrHAdd lean_r72 lean_r180
              let lean_s142 := by timed congrHAdd lean_r174 lean_s141
              have lean_s143 : (Eq let71 let187) := by timed congrHAdd lean_r125 lean_s142
              have lean_s144 : (Eq let71 let66) := by timed Eq.trans lean_s143 lean_r57
              have lean_s145 : (Eq let78 let197) := by timed congr lean_s140 lean_s144
              have lean_s146 : (Eq let78 True) := by timed Eq.trans lean_s145 lean_r64
              have lean_s147 : (Eq let79 let275) := by timed flipCongrArg lean_s146 [Not]
              have lean_s148 : (Eq let79 False) := by timed Eq.trans lean_s147 lean_r102
              have lean_s149 : (Eq let80 False) := by timed Eq.trans lean_r11 lean_s148
              show False from by timed eqResolve lean_s135 lean_s149
            ))
          have lean_s119 : let94 := by liftOrNToNeg lean_s118
          have lean_s120 : (Eq let94 let365) := by timed flipCongrArg lean_r22 [Not]
          have lean_s121 : (Eq let94 let97) := by timed Eq.trans lean_s120 lean_r169
          have lean_s122 : (Eq let95 let97) := by timed Eq.trans lean_r20 lean_s121
          have lean_s123 : (Eq let97 let95) := by timed Eq.symm lean_s122
          have lean_s124 : (Eq let94 let95) := by timed Eq.trans lean_s121 lean_s123
          have lean_s125 : let95 := by timed eqResolve lean_s119 lean_s124
          have lean_s126 : (Eq let97 let94) := by timed Eq.symm lean_s121
          have lean_s127 : let96 := by timed Eq.trans lean_s122 lean_s126
          have lean_s128 : let94 := by timed eqResolve lean_s125 lean_s127
          show False from by timed contradiction lean_s117 lean_s128
  ))))))))
have lean_s116 : (Not (And let160 (And let61 (And let202 let98)))) := by liftOrNToNeg lean_s115
have lean_s117 : let527 := by timed flipNotAnd lean_s116 [let160, let61, let202, let98]
have lean_s118 : let424 := by timed rfl
have lean_s119 : (Eq let161 let161) := by timed rfl
let lean_s120 := by timed congr lean_s118 lean_s119
let lean_s121 := by timed congr lean_s118 lean_s105
let lean_s122 := by timed congr lean_s118 lean_s97
let lean_s123 := by timed congr lean_s122 lean_r169
let lean_s124 := by timed congr lean_s121 lean_s123
have lean_s125 : (Eq let527 let526) := by timed congr lean_s120 lean_s124
have lean_s126 : let526 := by timed eqResolve lean_s117 lean_s125
have lean_s127 : (Or let97 (Or let161 (Or let60 let328))) := by permutateOr lean_s126, [3, 0, 1, 2], (- 1)
have lean_s128 : (Or let291 (Or let227 let425)) :=
  (scope (fun lean_a213 : let232 =>
    (scope (fun lean_a214 : let226 =>
      (scope (fun lean_a215 : let167 =>
        have lean_s128 : let425 :=
          (scope (fun lean_a214 : let167 =>
            have lean_s128 : let205 := by timed trueElim lean_r69
            have lean_s129 : let433 := by timed And.intro lean_s128 lean_a214
            have lean_s130 : (Implies let433 let432) := by arithMulNeg [let45, let3, let107], 3
            have lean_s131 : let432 := by timed modusPonens lean_s129 lean_s130
            have lean_s132 : let274 := by timed trueElim lean_r101
            have lean_s133 : let431 := by timed And.intro lean_s132 lean_a214
            have lean_s134 : (Implies let431 let430) := by arithMulNeg [x1, let11, let217], 3
            have lean_s135 : let430 := by timed modusPonens lean_s133 lean_s134
            have lean_s136 : let270 := by timed trueElim lean_r97
            have lean_s137 : let429 := by timed Eq.symm lean_r104
            have lean_s138 : let278 := by timed eqResolve lean_a213 lean_s137
            have lean_s139 : let428 := by timed And.intro lean_s136 lean_s138
            have lean_s140 : (Implies let428 let427) := by arithMulPos [let114, let3, let19], 0
            have lean_s141 : let427 := by timed modusPonens lean_s139 lean_s140
            have lean_s142 : let225 := by sumBounds [lean_s131, lean_s135, lean_s141]
            let lean_s143 := by timed congrHAdd lean_r80 lean_r192
            have lean_s144 : (Eq let222 let300) := by timed congrHAdd lean_r74 lean_s143
            have lean_s145 : (Eq let222 let55) := by timed Eq.trans lean_s144 lean_r113
            let lean_s146 := by timed flipCongrArg lean_s145 [GE.ge]
            let lean_s147 := by timed congrHAdd lean_r89 lean_r67
            have lean_s148 : (Eq let219 let267) := by timed congrHAdd lean_r88 lean_s147
            have lean_s149 : (Eq let219 let252) := by timed Eq.trans lean_s148 lean_r94
            have lean_s150 : (Eq let223 let349) := by timed congr lean_s146 lean_s149
            have lean_s151 : (Eq let223 True) := by timed Eq.trans lean_s150 lean_r161
            have lean_s152 : (Eq let224 let275) := by timed flipCongrArg lean_s151 [Not]
            have lean_s153 : (Eq let224 False) := by timed Eq.trans lean_s152 lean_r102
            have lean_s154 : (Eq let225 False) := by timed Eq.trans lean_r76 lean_s153
            show False from by timed eqResolve lean_s142 lean_s154
          ))
        have lean_s129 : let168 := by liftOrNToNeg lean_s128
        have lean_s130 : let426 := by timed Eq.symm lean_r139
        have lean_s131 : let331 := by timed eqResolve lean_s129 lean_s130
        have lean_s132 : let168 := by timed eqResolve lean_s131 lean_r139
        show False from by timed contradiction lean_a215 lean_s132
  ))))))
have lean_s129 : (Not (And let232 (And let226 let167))) := by liftOrNToNeg lean_s128
have lean_s130 : let422 := by timed flipNotAnd lean_s129 [let232, let226, let167]
have lean_s131 : let424 := by timed rfl
let lean_s132 := by timed congr lean_s131 lean_s38
let lean_s133 := by timed congr lean_s131 lean_s30
have lean_s134 : (Eq let168 let168) := by timed rfl
let lean_s135 := by timed congr lean_s133 lean_s134
have lean_s136 : (Eq let422 let421) := by timed congr lean_s132 lean_s135
have lean_s137 : let421 := by timed eqResolve lean_s130 lean_s136
have lean_s138 : (Or let231 (Or let168 let227)) := by permutateOr lean_s137, [0, 2, 1], (- 1)
let lean_s139 := by R2 lean_s138, lean_s79, let226, [(- 1), 0]
have lean_s140 : (Or let241 (Or let181 (Or let169 (Or let185 let437)))) :=
  (scope (fun lean_a214 : let240 =>
    (scope (fun lean_a215 : let180 =>
      (scope (fun lean_a216 : let168 =>
        (scope (fun lean_a217 : let184 =>
          (scope (fun lean_a218 : let226 =>
            have lean_s140 : let437 :=
              (scope (fun lean_a216 : let226 =>
                have lean_s140 : let205 := by timed trueElim lean_r69
                have lean_s141 : let448 := by timed And.intro lean_s140 lean_a216
                have lean_s142 : (Implies let448 let447) := by arithMulNeg [x1, let11, let107], 3
                have lean_s143 : let447 := by timed modusPonens lean_s141 lean_s142
                have lean_s144 : let309 := by timed trueElim lean_r122
                have lean_s145 : let446 := by timed And.intro lean_s144 lean_a217
                have lean_s146 : (Implies let446 let445) := by arithMulNeg [let31, let3, let199], 3
                have lean_s147 : let445 := by timed modusPonens lean_s145 lean_s146
                have lean_s148 : let305 := by timed trueElim lean_r118
                have lean_s149 : let426 := by timed Eq.symm lean_r139
                have lean_s150 : let331 := by timed eqResolve lean_a216 lean_s149
                have lean_s151 : let444 := by timed And.intro lean_s148 lean_s150
                have lean_s152 : (Implies let444 let443) := by arithMulPos [let45, let3, let265], 0
                have lean_s153 : let443 := by timed modusPonens lean_s151 lean_s152
                have lean_s154 : let340 := by timed trueElim lean_r152
                have lean_s155 : let442 := by timed Eq.symm lean_r150
                have lean_s156 : let338 := by timed eqResolve lean_a215 lean_s155
                have lean_s157 : let441 := by timed And.intro lean_s154 lean_s156
                have lean_s158 : (Implies let441 let440) := by arithMulPos [let25, let3, let280], 0
                have lean_s159 : let440 := by timed modusPonens lean_s157 lean_s158
                have lean_s160 : let337 := by timed trueElim lean_r149
                have lean_s161 : (Eq let240 let335) := by timed Eq.symm lean_r147
                have lean_s162 : let335 := by timed eqResolve lean_a214 lean_s161
                have lean_s163 : let439 := by timed And.intro lean_s160 lean_s162
                have lean_s164 : (Implies let439 let438) := by arithMulPos [let176, let3, let198], 0
                have lean_s165 : let438 := by timed modusPonens lean_s163 lean_s164
                have lean_s166 : let289 := by sumBounds [lean_s143, lean_s147, lean_s153, lean_s159, lean_s165]
                let lean_s167 := by timed congrHAdd lean_r145 lean_r91
                let lean_s168 := by timed congrHAdd lean_r143 lean_s167
                let lean_s169 := by timed congrHAdd lean_r144 lean_s168
                have lean_s170 : (Eq let286 let318) := by timed congrHAdd lean_r71 lean_s169
                have lean_s171 : (Eq let286 let55) := by timed Eq.trans lean_s170 lean_r129
                let lean_s172 := by timed flipCongrArg lean_s171 [GE.ge]
                let lean_s173 := by timed congrHAdd lean_r109 lean_r86
                let lean_s174 := by timed congrHAdd lean_r93 lean_s173
                let lean_s175 := by timed congrHAdd lean_r65 lean_s174
                have lean_s176 : (Eq let282 let345) := by timed congrHAdd lean_r51 lean_s175
                have lean_s177 : (Eq let282 let306) := by timed Eq.trans lean_s176 lean_r159
                have lean_s178 : (Eq let287 let307) := by timed congr lean_s172 lean_s177
                have lean_s179 : (Eq let287 True) := by timed Eq.trans lean_s178 lean_r120
                have lean_s180 : (Eq let288 let275) := by timed flipCongrArg lean_s179 [Not]
                have lean_s181 : (Eq let288 False) := by timed Eq.trans lean_s180 lean_r102
                have lean_s182 : (Eq let289 False) := by timed Eq.trans lean_r105 lean_s181
                show False from by timed eqResolve lean_s166 lean_s182
              ))
            have lean_s141 : let227 := by liftOrNToNeg lean_s140
            have lean_s142 : let419 := by timed Eq.symm lean_r153
            have lean_s143 : let341 := by timed eqResolve lean_s141 lean_s142
            have lean_s144 : let227 := by timed eqResolve lean_s143 lean_r153
            show False from by timed contradiction lean_a218 lean_s144
  ))))))))))
have lean_s141 : (Not (And let240 (And let180 (And let168 (And let184 let226))))) := by liftOrNToNeg lean_s140
have lean_s142 : let436 := by timed flipNotAnd lean_s141 [let240, let180, let168, let184, let226]
have lean_s143 : let424 := by timed rfl
have lean_s144 : let178 := by timed rfl
let lean_s145 := by timed flipCongrArg lean_s144 [Eq]
have lean_s146 : (Eq let319 let178) := by timed congr lean_s145 lean_r83
have lean_s147 : (Eq let319 True) := by timed Eq.trans lean_s146 lean_r53
have lean_s148 : (Eq let242 True) := by timed Eq.trans lean_r130 lean_s147
have lean_s149 : let242 := by timed trueElim lean_s148
let lean_s150 := by timed congr lean_s143 lean_s149
let lean_s151 := by timed congr lean_s143 lean_s93
let lean_s152 := by timed congr lean_s143 lean_s13
have lean_s153 : (Eq let185 let185) := by timed rfl
let lean_s154 := by timed congr lean_s143 lean_s153
let lean_s155 := by timed congr lean_s154 lean_s30
let lean_s156 := by timed congr lean_s152 lean_s155
let lean_s157 := by timed congr lean_s151 lean_s156
have lean_s158 : (Eq let436 let435) := by timed congr lean_s150 lean_s157
have lean_s159 : let435 := by timed eqResolve lean_s142 lean_s158
have lean_s160 : (Or let167 (Or let179 (Or let185 (Or let177 let227)))) := by permutateOr lean_s159, [2, 1, 3, 0, 4], (- 1)
let lean_s161 := by R2 lean_s160, lean_s79, let226, [(- 1), 0]
have lean_s162 : let406 := by andElim lean_s76, 3
have lean_s163 : (Or let167 let405) := by R1 lean_s161, lean_s162, let177, [(- 1), (- 1)]
have lean_s164 : (Or let167 let404) := by factor lean_s163, (- 1)
have lean_s165 : let408 := by andElim lean_s76, 4
have lean_s166 : (Or let244 (Or let227 (Or let169 (Or let181 (Or let366 (Or let61 (Or let364 False))))))) :=
  (scope (fun lean_a216 : let243 =>
    (scope (fun lean_a217 : let226 =>
      (scope (fun lean_a218 : let168 =>
        (scope (fun lean_a219 : let180 =>
          (scope (fun lean_a220 : let185 =>
            (scope (fun lean_a221 : let60 =>
              (scope (fun lean_a222 : let161 =>
                have lean_s166 : let270 := by timed trueElim lean_r97
                have lean_s167 : let501 := by timed Eq.symm lean_r47
                have lean_s168 : let162 := by timed eqResolve lean_a222 lean_s167
                have lean_s169 : let500 := by timed And.intro lean_s166 lean_s168
                have lean_s170 : (Implies let500 let499) := by arithMulPos [let37, let3, let19], 0
                have lean_s171 : let499 := by timed modusPonens lean_s169 lean_s170
                have lean_s172 : let360 := by timed trueElim lean_r166
                have lean_s173 : let411 := by timed eqResolve lean_a194 lean_s75
                have lean_s174 : let243 := by andElim lean_s173, 6
                have lean_s175 : let455 := by timed Eq.symm lean_r110
                have lean_s176 : let296 := by timed eqResolve lean_s174 lean_s175
                have lean_s177 : let483 := by intTightUb lean_s176
                have lean_s178 : let484 := by timed And.intro lean_s172 lean_s177
                have lean_s179 : let485 := by arithMulPos [x6, let22, let65], 1
                have lean_s180 : let482 := by timed modusPonens lean_s178 lean_s179
                have lean_s181 : let336 := by timed trueElim lean_r148
                have lean_s182 : let498 := by timed And.intro lean_s181 lean_a217
                have lean_s183 : (Implies let498 let497) := by arithMulNeg [x1, let11, let311], 3
                have lean_s184 : let497 := by timed modusPonens lean_s182 lean_s183
                have lean_s185 : let164 := by timed trueElim lean_r48
                have lean_s186 : let426 := by timed Eq.symm lean_r139
                have lean_s187 : let331 := by timed eqResolve lean_a218 lean_s186
                have lean_s188 : let470 := by intTightUb lean_s187
                have lean_s189 : let496 := by timed And.intro lean_s185 lean_s188
                have lean_s190 : (Implies let496 let495) := by arithMulPos [let45, let1, let163], 1
                have lean_s191 : let495 := by timed modusPonens lean_s189 lean_s190
                have lean_s192 : let166 := by timed trueElim lean_r49
                have lean_s193 : let442 := by timed Eq.symm lean_r150
                have lean_s194 : let338 := by timed eqResolve lean_a219 lean_s193
                have lean_s195 : let473 := by intTightUb lean_s194
                have lean_s196 : let494 := by timed And.intro lean_s192 lean_s195
                have lean_s197 : (Implies let494 let493) := by arithMulPos [let25, let1, let165], 1
                have lean_s198 : let493 := by timed modusPonens lean_s196 lean_s197
                have lean_s199 : let216 := by timed trueElim lean_r75
                have lean_s200 : let478 := by timed Eq.symm lean_r106
                have lean_s201 : let290 := by timed eqResolve lean_a220 lean_s200
                have lean_s202 : let476 := by intTightUb lean_s201
                have lean_s203 : let492 := by timed And.intro lean_s199 lean_s202
                have lean_s204 : (Implies let492 let491) := by arithMulPos [let31, let1, let215], 1
                have lean_s205 : let491 := by timed modusPonens lean_s203 lean_s204
                have lean_s206 : let273 := by timed trueElim lean_r100
                have lean_s207 : let480 := by timed And.intro lean_s206 lean_a221
                have lean_s208 : let481 := by arithMulNeg [let40, let1, let66], 3
                have lean_s209 : let479 := by timed modusPonens lean_s207 lean_s208
                have lean_s210 : let395 := by sumBounds [lean_s171, lean_s180, lean_s184, lean_s191, lean_s198, lean_s205, lean_s209]
                have lean_s211 : (Eq let86 let86) := by timed rfl
                let lean_s212 := by timed congrHAdd lean_r132 lean_r177
                let lean_s213 := by timed congrHAdd lean_r85 lean_s212
                let lean_s214 := by timed congrHAdd lean_r81 lean_s213
                let lean_s215 := by timed congrHAdd lean_r127 lean_s214
                let lean_s216 := by timed congrHAdd lean_s211 lean_s215
                have lean_s217 : (Eq let392 let325) := by timed congrHAdd lean_r78 lean_s216
                have lean_s218 : (Eq let392 let55) := by timed Eq.trans lean_s217 lean_r135
                let lean_s219 := by timed flipCongrArg lean_s218 [GE.ge]
                let lean_s220 := by timed congrHAdd lean_r188 lean_r174
                let lean_s221 := by timed congrHAdd lean_r189 lean_s220
                let lean_s222 := by timed congrHAdd lean_r115 lean_s221
                let lean_s223 := by timed congrHAdd lean_r190 lean_s222
                let lean_s224 := by timed congrHAdd lean_r70 lean_s223
                have lean_s225 : (Eq let391 let386) := by timed congrHAdd lean_r67 lean_s224
                have lean_s226 : (Eq let391 let382) := by timed Eq.trans lean_s225 lean_r187
                have lean_s227 : (Eq let393 let383) := by timed congr lean_s219 lean_s226
                have lean_s228 : (Eq let393 True) := by timed Eq.trans lean_s227 lean_r185
                have lean_s229 : (Eq let394 let275) := by timed flipCongrArg lean_s228 [Not]
                have lean_s230 : (Eq let394 False) := by timed Eq.trans lean_s229 lean_r102
                have lean_s231 : (Eq let395 False) := by timed Eq.trans lean_r193 lean_s230
                show False from by timed eqResolve lean_s210 lean_s231
  ))))))))))))))
have lean_s167 : (Not (And let243 (And let226 (And let168 (And let180 (And let185 (And let60 let161))))))) := by liftOrNToNeg lean_s166
have lean_s168 : let490 := by timed flipNotAnd lean_s167 [let243, let226, let168, let180, let185, let60, let161]
have lean_s169 : let424 := by timed rfl
let lean_s170 := by timed congr lean_s169 lean_r131
have lean_s171 : let423 := by timed rfl
let lean_s172 := by timed congr lean_s169 lean_s171
let lean_s173 := by timed congr lean_s169 lean_r50
let lean_s174 := by timed congr lean_s169 lean_r60
let lean_s175 := by timed congr lean_s169 lean_r170
have lean_s176 : let451 := by timed rfl
let lean_s177 := by timed congr lean_s169 lean_s176
let lean_s178 := by timed congr lean_s177 lean_r168
let lean_s179 := by timed congr lean_s175 lean_s178
let lean_s180 := by timed congr lean_s174 lean_s179
let lean_s181 := by timed congr lean_s173 lean_s180
let lean_s182 := by timed congr lean_s172 lean_s181
have lean_s183 : (Eq let490 let489) := by timed congr lean_s170 lean_s182
have lean_s184 : let489 := by timed eqResolve lean_s168 lean_s183
have lean_s185 : (Or let167 (Or let179 (Or let184 (Or let160 let463)))) := by permutateOr lean_s184, [2, 3, 4, 6, 0, 1, 5], (- 1)
let lean_s186 := by R2 lean_s165, lean_s185, let160, [(- 1), (- 1)]
let lean_s187 := by R2 lean_s186, lean_s79, let226, [(- 1), 0]
have lean_s188 : let243 := by andElim lean_s76, 6
let lean_s189 := by R1 lean_s187, lean_s188, let238, [(- 1), 0]
have lean_s190 : (Or let244 (Or let61 (Or let366 (Or let181 (Or let169 (Or let227 let466)))))) :=
  (scope (fun lean_a218 : let243 =>
    (scope (fun lean_a219 : let60 =>
      (scope (fun lean_a220 : let185 =>
        (scope (fun lean_a221 : let180 =>
          (scope (fun lean_a222 : let168 =>
            (scope (fun lean_a223 : let226 =>
              (scope (fun lean_a224 : let98 =>
                have lean_s190 : let270 := by timed trueElim lean_r97
                have lean_s191 : let488 := by timed Eq.symm lean_r151
                have lean_s192 : let339 := by timed eqResolve lean_a224 lean_s191
                have lean_s193 : let487 := by timed And.intro lean_s190 lean_s192
                have lean_s194 : (Implies let487 let486) := by arithMulPos [let75, let3, let19], 0
                have lean_s195 : let486 := by timed modusPonens lean_s193 lean_s194
                have lean_s196 : let360 := by timed trueElim lean_r166
                have lean_s197 : let411 := by timed eqResolve lean_a194 lean_s75
                have lean_s198 : let243 := by andElim lean_s197, 6
                have lean_s199 : let455 := by timed Eq.symm lean_r110
                have lean_s200 : let296 := by timed eqResolve lean_s198 lean_s199
                have lean_s201 : let483 := by intTightUb lean_s200
                have lean_s202 : let484 := by timed And.intro lean_s196 lean_s201
                have lean_s203 : let485 := by arithMulPos [x6, let22, let65], 1
                have lean_s204 : let482 := by timed modusPonens lean_s202 lean_s203
                have lean_s205 : let273 := by timed trueElim lean_r100
                have lean_s206 : let480 := by timed And.intro lean_s205 lean_a219
                have lean_s207 : let481 := by arithMulNeg [let40, let1, let66], 3
                have lean_s208 : let479 := by timed modusPonens lean_s206 lean_s207
                have lean_s209 : let269 := by timed trueElim lean_r96
                have lean_s210 : let478 := by timed Eq.symm lean_r106
                have lean_s211 : let290 := by timed eqResolve lean_a220 lean_s210
                have lean_s212 : let476 := by intTightUb lean_s211
                have lean_s213 : let477 := by timed And.intro lean_s209 lean_s212
                have lean_s214 : (Implies let477 let475) := by arithMulPos [let31, let1, let190], 1
                have lean_s215 : let475 := by timed modusPonens lean_s213 lean_s214
                have lean_s216 : let334 := by timed trueElim lean_r146
                have lean_s217 : let442 := by timed Eq.symm lean_r150
                have lean_s218 : let338 := by timed eqResolve lean_a221 lean_s217
                have lean_s219 : let473 := by intTightUb lean_s218
                have lean_s220 : let474 := by timed And.intro lean_s216 lean_s219
                have lean_s221 : (Implies let474 let472) := by arithMulPos [let25, let1, let194], 1
                have lean_s222 : let472 := by timed modusPonens lean_s220 lean_s221
                have lean_s223 : let390 := by timed trueElim lean_r191
                have lean_s224 : let426 := by timed Eq.symm lean_r139
                have lean_s225 : let331 := by timed eqResolve lean_a222 lean_s224
                have lean_s226 : let470 := by intTightUb lean_s225
                have lean_s227 : let471 := by timed And.intro lean_s223 lean_s226
                have lean_s228 : (Implies let471 let469) := by arithMulPos [let45, let1, let276], 1
                have lean_s229 : let469 := by timed modusPonens lean_s227 lean_s228
                have lean_s230 : let380 := by timed trueElim lean_r183
                have lean_s231 : let468 := by timed And.intro lean_s230 lean_a223
                have lean_s232 : (Implies let468 let467) := by arithMulNeg [x1, let11, let362], 3
                have lean_s233 : let467 := by timed modusPonens lean_s231 lean_s232
                have lean_s234 : let379 := by sumBounds [lean_s195, lean_s204, lean_s208, lean_s215, lean_s222, lean_s229, lean_s233]
                have lean_s235 : (Eq let86 let86) := by timed rfl
                let lean_s236 := by timed congrHAdd lean_r165 lean_r167
                let lean_s237 := by timed congrHAdd lean_r62 lean_s236
                let lean_s238 := by timed congrHAdd lean_r58 lean_s237
                let lean_s239 := by timed congrHAdd lean_r177 lean_s238
                let lean_s240 := by timed congrHAdd lean_s235 lean_s239
                have lean_s241 : (Eq let376 let370) := by timed congrHAdd lean_r179 lean_s240
                have lean_s242 : (Eq let376 let55) := by timed Eq.trans lean_s241 lean_r175
                let lean_s243 := by timed flipCongrArg lean_s242 [GE.ge]
                let lean_s244 := by timed congrHAdd lean_r103 lean_r172
                let lean_s245 := by timed congrHAdd lean_r87 lean_s244
                let lean_s246 := by timed congrHAdd lean_r173 lean_s245
                let lean_s247 := by timed congrHAdd lean_r174 lean_s246
                let lean_s248 := by timed congrHAdd lean_r70 lean_s247
                have lean_s249 : (Eq let375 let212) := by timed congrHAdd lean_r67 lean_s248
                have lean_s250 : (Eq let375 let210) := by timed Eq.trans lean_s249 lean_r73
                have lean_s251 : (Eq let377 let367) := by timed congr lean_s243 lean_s250
                have lean_s252 : (Eq let377 True) := by timed Eq.trans lean_s251 lean_r171
                have lean_s253 : (Eq let378 let275) := by timed flipCongrArg lean_s252 [Not]
                have lean_s254 : (Eq let378 False) := by timed Eq.trans lean_s253 lean_r102
                have lean_s255 : (Eq let379 False) := by timed Eq.trans lean_r182 lean_s254
                show False from by timed eqResolve lean_s234 lean_s255
  ))))))))))))))
have lean_s191 : (Not (And let243 (And let60 (And let185 (And let180 (And let168 (And let226 let98))))))) := by liftOrNToNeg lean_s190
have lean_s192 : let465 := by timed flipNotAnd lean_s191 [let243, let60, let185, let180, let168, let226, let98]
have lean_s193 : let424 := by timed rfl
let lean_s194 := by timed congr lean_s193 lean_r131
let lean_s195 := by timed congr lean_s193 lean_s176
let lean_s196 := by timed congr lean_s193 lean_r170
let lean_s197 := by timed congr lean_s193 lean_r60
let lean_s198 := by timed congr lean_s193 lean_r50
let lean_s199 := by timed congr lean_s193 lean_s171
let lean_s200 := by timed congr lean_s199 lean_r169
let lean_s201 := by timed congr lean_s198 lean_s200
let lean_s202 := by timed congr lean_s197 lean_s201
let lean_s203 := by timed congr lean_s196 lean_s202
let lean_s204 := by timed congr lean_s195 lean_s203
have lean_s205 : (Eq let465 let464) := by timed congr lean_s194 lean_s204
have lean_s206 : let464 := by timed eqResolve lean_s192 lean_s205
have lean_s207 : (Or let167 (Or let179 (Or let184 (Or let97 let463)))) := by permutateOr lean_s206, [4, 3, 2, 6, 0, 5, 1], (- 1)
let lean_s208 := by R2 lean_s189, lean_s207, let97, [(- 1), (- 1)]
let lean_s209 := by R2 lean_s208, lean_s79, let226, [(- 1), 0]
have lean_s210 : (Or let167 (Or let179 (Or let184 (Or let61 let462)))) := by R1 lean_s209, lean_s188, let238, [(- 1), 0]
have lean_s211 : let462 := by factor lean_s210, (- 1)
have lean_s212 : (Or let167 (Or let179 let461)) := by R2 lean_s164, lean_s211, let184, [(- 1), (- 1)]
have lean_s213 : let461 := by factor lean_s212, (- 1)
let lean_s214 := by R2 lean_s139, lean_s213, let167, [(- 1), (- 1)]
have lean_s215 : (Or let231 (Or let61 let231)) := by R1 lean_s214, lean_s83, let179, [(- 1), (- 1)]
have lean_s216 : (Or let231 let61) := by factor lean_s215, 2
have lean_s217 : (Or let232 (Or let167 let502)) := by R1 lean_s25, lean_s81, let154, [(- 1), (- 1)]
have lean_s218 : (Or let232 (Or let167 let180)) := by factor lean_s217, (- 1)
have lean_s219 : (Or let232 (Or let167 let460)) := by R2 lean_s218, lean_s213, let179, [(- 1), (- 1)]
have lean_s220 : (Or let232 let460) := by factor lean_s219, (- 1)
have lean_s221 : let410 := by andElim lean_s76, 1
have lean_s222 : (Or let232 (Or let61 let232)) := by R1 lean_s220, lean_s221, let167, [(- 1), (- 1)]
have lean_s223 : (Or let232 let61) := by factor lean_s222, 2
have lean_s224 : (Or let61 let61) := by R1 lean_s216, lean_s223, let231, [(- 1), (- 1)]
have lean_s225 : let61 := by factor lean_s224, 1
let lean_s226 := by R1 lean_s127, lean_s225, let60, [(- 1), 0]
have lean_s227 : (Or let244 (Or let61 (Or let329 False))) :=
  (scope (fun lean_a218 : let243 =>
    (scope (fun lean_a219 : let60 =>
      (scope (fun lean_a220 : let328 =>
        have lean_s227 : (Eq let328 let333) := by timed Eq.symm lean_r142
        have lean_s228 : let333 := by timed eqResolve lean_a220 lean_s227
        have lean_s229 : (Or let452 False) :=
          (scope (fun lean_a219 : let333 =>
            have lean_s229 : let270 := by timed trueElim lean_r97
            have lean_s230 : let459 := by timed And.intro lean_s229 lean_a219
            have lean_s231 : (Implies let459 let458) := by arithMulPos [let34, let1, let19], 0
            have lean_s232 : let458 := by timed modusPonens lean_s230 lean_s231
            have lean_s233 : let371 := by timed trueElim lean_r176
            have lean_s234 : let457 := by timed And.intro lean_s233 lean_a219
            have lean_s235 : (Implies let457 let456) := by arithMulNeg [let40, let1, let83], 3
            have lean_s236 : let456 := by timed modusPonens lean_s234 lean_s235
            have lean_s237 : let360 := by timed trueElim lean_r166
            have lean_s238 : let411 := by timed eqResolve lean_a194 lean_s75
            have lean_s239 : let243 := by andElim lean_s238, 6
            have lean_s240 : let455 := by timed Eq.symm lean_r110
            have lean_s241 : let296 := by timed eqResolve lean_s239 lean_s240
            have lean_s242 : let454 := by timed And.intro lean_s237 lean_s241
            have lean_s243 : (Implies let454 let453) := by arithMulPos [x6, let1, let65], 0
            have lean_s244 : let453 := by timed modusPonens lean_s242 lean_s243
            have lean_s245 : let356 := by sumBounds [lean_s232, lean_s236, lean_s244]
            have lean_s246 : (Eq let86 let86) := by timed rfl
            let lean_s247 := by timed congrHAdd lean_r162 lean_s246
            have lean_s248 : (Eq let353 let348) := by timed congrHAdd lean_r163 lean_s247
            have lean_s249 : (Eq let353 let55) := by timed Eq.trans lean_s248 lean_r160
            let lean_s250 := by timed flipCongrArg lean_s249 [GE.ge]
            let lean_s251 := by timed congrHAdd lean_r121 lean_r72
            have lean_s252 : (Eq let352 let344) := by timed congrHAdd lean_r125 lean_s251
            have lean_s253 : (Eq let352 let55) := by timed Eq.trans lean_s252 lean_r157
            have lean_s254 : (Eq let354 let343) := by timed congr lean_s250 lean_s253
            have lean_s255 : (Eq let354 True) := by timed Eq.trans lean_s254 lean_r156
            have lean_s256 : (Eq let355 let275) := by timed flipCongrArg lean_s255 [Not]
            have lean_s257 : (Eq let355 False) := by timed Eq.trans lean_s256 lean_r102
            have lean_s258 : (Eq let356 False) := by timed Eq.trans lean_r164 lean_s257
            show False from by timed eqResolve lean_s245 lean_s258
          ))
        have lean_s230 : let452 := by liftOrNToNeg lean_s229
        have lean_s231 : (Eq let452 let329) := by timed flipCongrArg lean_r142 [Not]
        have lean_s232 : (Eq let452 let202) := by timed Eq.trans lean_s231 lean_r138
        have lean_s233 : let202 := by timed eqResolve lean_s230 lean_s232
        have lean_s234 : (Eq let202 let452) := by timed Eq.symm lean_s232
        have lean_s235 : let452 := by timed eqResolve lean_s233 lean_s234
        show False from by timed contradiction lean_s228 lean_s235
  ))))))
have lean_s228 : (Not (And let243 (And let60 let328))) := by liftOrNToNeg lean_s227
have lean_s229 : let450 := by timed flipNotAnd lean_s228 [let243, let60, let328]
have lean_s230 : let424 := by timed rfl
have lean_s231 : let239 := by timed rfl
let lean_s232 := by timed flipCongrArg lean_s231 [Eq]
have lean_s233 : (Eq let245 let239) := by timed congr lean_s232 lean_r131
have lean_s234 : (Eq let245 True) := by timed Eq.trans lean_s233 lean_r82
have lean_s235 : (Eq let246 True) := by timed Eq.trans lean_r84 lean_s234
have lean_s236 : let246 := by timed trueElim lean_s235
let lean_s237 := by timed congr lean_s230 lean_s236
have lean_s238 : let451 := by timed rfl
let lean_s239 := by timed congr lean_s230 lean_s238
have lean_s240 : let323 := by timed rfl
let lean_s241 := by timed flipCongrArg lean_s240 [Eq]
have lean_s242 : (Eq let342 let323) := by timed congr lean_s241 lean_r138
have lean_s243 : (Eq let342 True) := by timed Eq.trans lean_s242 lean_r134
have lean_s244 : (Eq let330 True) := by timed Eq.trans lean_r154 lean_s243
have lean_s245 : let330 := by timed trueElim lean_s244
let lean_s246 := by timed congr lean_s239 lean_s245
have lean_s247 : (Eq let450 let449) := by timed congr lean_s237 lean_s246
have lean_s248 : let449 := by timed eqResolve lean_s229 lean_s247
have lean_s249 : (Or let202 (Or let238 let61)) := by permutateOr lean_s248, [2, 0, 1], (- 1)
let lean_s250 := by R1 lean_s249, lean_s188, let238, [(- 1), 0]
have lean_s251 : let407 := by andElim lean_s76, 5
have lean_s252 : (Or let202 let202) := by R2 lean_s250, lean_s251, let60, [(- 1), (- 1)]
have lean_s253 : let202 := by factor lean_s252, 1
let lean_s254 := by R2 lean_s226, lean_s253, let202, [(- 1), 0]
have lean_s255 : (Or let161 let161) := by R1 lean_s254, lean_s165, let97, [(- 1), (- 1)]
have lean_s256 : let161 := by factor lean_s255, 1
let lean_s257 := by R1 lean_s114, lean_s256, let160, [(- 1), 0]
let lean_s258 := by R2 lean_s138, lean_s79, let226, [(- 1), 0]
have lean_s259 : (Or let168 let168) := by R1 lean_s258, lean_s221, let231, [(- 1), (- 1)]
have lean_s260 : let168 := by factor lean_s259, 1
let lean_s261 := by R1 lean_s257, lean_s260, let167, [(- 1), 0]
let lean_s262 := by R1 lean_s261, lean_s225, let60, [(- 1), 0]
let lean_s263 := by R2 lean_s262, lean_s253, let202, [(- 1), 0]
let lean_s264 := by R2 lean_s263, lean_s79, let226, [(- 1), 0]
let lean_s265 := by R1 lean_s160, lean_s260, let167, [(- 1), 0]
let lean_s266 := by R2 lean_s265, lean_s79, let226, [(- 1), 0]
have lean_s267 : let405 := by R1 lean_s266, lean_s162, let177, [(- 1), (- 1)]
have lean_s268 : let404 := by factor lean_s267, (- 1)
have lean_s269 : (Or let179 let179) := by R1 lean_s264, lean_s268, let184, [(- 1), (- 1)]
have lean_s270 : let179 := by factor lean_s269, 1
have lean_s271 : let231 := by R2 lean_s83, lean_s270, let179, [(- 1), 0]
let lean_s272 := by R2 lean_s25, lean_s271, let231, [(- 1), 0]
let lean_s273 := by R2 lean_s272, lean_s270, let179, [(- 1), 0]
let lean_s274 := by R1 lean_s273, lean_s260, let167, [(- 1), 0]
have lean_s275 : let155 := by R2 lean_s81, lean_s270, let179, [(- 1), 0]
exact (show False from by R1 lean_s274, lean_s275, let154, [0, 0])


