open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {xuscore2dollarskuscore41 : Rat}
variable {yuscore2dollarskuscore49 : Rat}
variable {stuscore2dollarskuscore49 : Rat}
variable {xuscore2dollarskuscore41 : Rat}
variable {stuscore2dollarskuscore49 : Rat}
variable {yuscore2dollarskuscore49 : Rat}

theorem th0 :
  let let1 := (Neg.neg (Int.ofNat 12))
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 yuscore2dollarskuscore49)
  let let5 := (binrel% GE.ge let4 let1)
  let let6 := (binrel% LE.le yuscore2dollarskuscore49 (Rat.ofInt 12))
  let let7 := (Rat.ofInt 2)
  let let8 := (binrel% HMul.hMul let7 xuscore2dollarskuscore41)
  let let9 := (Rat.ofInt 1)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% HMul.hMul let10 let8)
  let let12 := (Rat.ofInt 5)
  let let13 := (binrel% HAdd.hAdd let12 let11)
  let let14 := (binrel% HSub.hSub let12 let8)
  let let15 := (Int.ofNat 2)
  let let16 := (binrel% HMul.hMul let15 xuscore2dollarskuscore41)
  let let17 := (binrel% HMul.hMul (Neg.neg let15) xuscore2dollarskuscore41)
  let let18 := (binrel% HMul.hMul let10 let16)
  let let19 := (Int.ofNat 5)
  let let20 := (binrel% HDiv.hDiv let19 let15)
  let let21 := (binrel% HDiv.hDiv let2 let15)
  let let22 := (binrel% HMul.hMul let21 yuscore2dollarskuscore49)
  let let23 := (binrel% HAdd.hAdd xuscore2dollarskuscore41 let22)
  let let24 := (binrel% GE.ge let23 let20)
  let let25 := (binrel% HAdd.hAdd let19 let17)
  let let26 := (binrel% GE.ge yuscore2dollarskuscore49 let25)
  let let27 := (Int.ofNat 10)
  let let28 := (binrel% HAdd.hAdd let27 xuscore2dollarskuscore41)
  let let29 := (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore41)
  let let30 := (Neg.neg let27)
  let let31 := (binrel% HAdd.hAdd xuscore2dollarskuscore41 let4)
  let let32 := (binrel% GE.ge let31 let30)
  let let33 := (binrel% LE.le yuscore2dollarskuscore49 let28)
  let let34 := (binrel% GE.ge yuscore2dollarskuscore49 let19)
  let let35 := (binrel% GE.ge yuscore2dollarskuscore49 let12)
  let let36 := (Eq let12 let12)
  let let37 := (binrel% GE.ge let12 let19)
  let let38 := (Neg.neg let19)
  let let39 := (binrel% GE.ge xuscore2dollarskuscore41 let38)
  let let40 := (binrel% GE.ge xuscore2dollarskuscore41 (Int.ofNat 0))
  let let41 := (And let40 let39)
  let let42 := (Implies let41 True)
  let let43 := (binrel% HAdd.hAdd let20 xuscore2dollarskuscore41)
  let let44 := (binrel% HAdd.hAdd xuscore2dollarskuscore41 let20)
  let let45 := (binrel% HAdd.hAdd let38 xuscore2dollarskuscore41)
  let let46 := (Neg.neg let12)
  let let47 := (binrel% HAdd.hAdd xuscore2dollarskuscore41 let46)
  let let48 := (binrel% GE.ge let45 let30)
  let let49 := (binrel% HMul.hMul let3 let12)
  let let50 := (binrel% GE.ge let43 let20)
  let let51 := (binrel% GE.ge yuscore2dollarskuscore49 let2)
  let let52 := (binrel% GE.ge yuscore2dollarskuscore49 let9)
  let let53 := (binrel% HMul.hMul let21 let12)
  let let54 := (Eq let7 let7)
  let let55 := (binrel% LE.le yuscore2dollarskuscore49 let29)
  let let56 := (binrel% GE.ge yuscore2dollarskuscore49 let14)
  let let57 := (Eq stuscore2dollarskuscore49 let7)
  let let58 := (Eq yuscore2dollarskuscore49 let12)
  let let59 := (And let58 (And let57 (And let52 (And let6 (And let56 let55)))))
  let let60 := (And (And (And (And (And let58 let57) let52) let6) let56) let55)
  let let61 := (binrel% HAdd.hAdd let12 let17)
  let let62 := (Not True)
  let let63 := (binrel% GE.ge let46 let1)
  let let64 := (And True (And True (And True (And True let41))))
  let let65 := (binrel% GE.ge let12 let2)
  let let66 := (Implies let60 let35)
  let let67 := (Not let66)
  let let68 := (And let58 (And let57 (And let51 (And let5 (And let24 let32)))))
  let let69 := (Implies let68 let34)
  let let70 := (Not let69)
  let let71 := (binrel% HAdd.hAdd xuscore2dollarskuscore41 let49)
  let let72 := (binrel% GE.ge let71 let30)
  let let73 := (binrel% HAdd.hAdd xuscore2dollarskuscore41 let53)
  let let74 := (binrel% GE.ge let73 let20)
  let let75 := (binrel% GE.ge let49 let1)
  let let76 := (And let36 (And let54 (And let65 (And let75 (And let74 let72)))))
  let let77 := (Implies let76 let37)
  let let78 := (Not let77)
  let let79 := (Eq let30 let30)
  let let80 := (Eq xuscore2dollarskuscore41 xuscore2dollarskuscore41)
  let let81 := (Eq let20 let20)
  let let82 := (Eq And And)
  let let83 := (Eq let1 let1)
(Eq let6 let5) → (Eq let14 let13) → (Eq let8 let16) → (Eq let18 let17) → (Eq let26 let24) → (Eq let29 let28) → (Eq let33 let32) → (Eq let35 let34) → (Eq let36 True) → (Eq let37 True) → (Eq let42 True) → (Eq let44 let43) → (Eq let47 let45) → (Eq let48 let39) → (Eq let49 let46) → (Eq let50 let40) → (Eq let52 let51) → (Eq let53 let20) → (Eq let54 True) → (Eq let60 let59) → (Eq let61 let25) → (Eq let62 False) → (Eq let63 True) → (Eq let64 let41) → (Eq let65 True) → let67 → False :=
  let let1 := (Neg.neg (Int.ofNat 12))
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 yuscore2dollarskuscore49)
  let let5 := (binrel% GE.ge let4 let1)
  let let6 := (binrel% LE.le yuscore2dollarskuscore49 (Rat.ofInt 12))
  let let7 := (Rat.ofInt 2)
  let let8 := (binrel% HMul.hMul let7 xuscore2dollarskuscore41)
  let let9 := (Rat.ofInt 1)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% HMul.hMul let10 let8)
  let let12 := (Rat.ofInt 5)
  let let13 := (binrel% HAdd.hAdd let12 let11)
  let let14 := (binrel% HSub.hSub let12 let8)
  let let15 := (Int.ofNat 2)
  let let16 := (binrel% HMul.hMul let15 xuscore2dollarskuscore41)
  let let17 := (binrel% HMul.hMul (Neg.neg let15) xuscore2dollarskuscore41)
  let let18 := (binrel% HMul.hMul let10 let16)
  let let19 := (Int.ofNat 5)
  let let20 := (binrel% HDiv.hDiv let19 let15)
  let let21 := (binrel% HDiv.hDiv let2 let15)
  let let22 := (binrel% HMul.hMul let21 yuscore2dollarskuscore49)
  let let23 := (binrel% HAdd.hAdd xuscore2dollarskuscore41 let22)
  let let24 := (binrel% GE.ge let23 let20)
  let let25 := (binrel% HAdd.hAdd let19 let17)
  let let26 := (binrel% GE.ge yuscore2dollarskuscore49 let25)
  let let27 := (Int.ofNat 10)
  let let28 := (binrel% HAdd.hAdd let27 xuscore2dollarskuscore41)
  let let29 := (binrel% HAdd.hAdd (Rat.ofInt 10) xuscore2dollarskuscore41)
  let let30 := (Neg.neg let27)
  let let31 := (binrel% HAdd.hAdd xuscore2dollarskuscore41 let4)
  let let32 := (binrel% GE.ge let31 let30)
  let let33 := (binrel% LE.le yuscore2dollarskuscore49 let28)
  let let34 := (binrel% GE.ge yuscore2dollarskuscore49 let19)
  let let35 := (binrel% GE.ge yuscore2dollarskuscore49 let12)
  let let36 := (Eq let12 let12)
  let let37 := (binrel% GE.ge let12 let19)
  let let38 := (Neg.neg let19)
  let let39 := (binrel% GE.ge xuscore2dollarskuscore41 let38)
  let let40 := (binrel% GE.ge xuscore2dollarskuscore41 (Int.ofNat 0))
  let let41 := (And let40 let39)
  let let42 := (Implies let41 True)
  let let43 := (binrel% HAdd.hAdd let20 xuscore2dollarskuscore41)
  let let44 := (binrel% HAdd.hAdd xuscore2dollarskuscore41 let20)
  let let45 := (binrel% HAdd.hAdd let38 xuscore2dollarskuscore41)
  let let46 := (Neg.neg let12)
  let let47 := (binrel% HAdd.hAdd xuscore2dollarskuscore41 let46)
  let let48 := (binrel% GE.ge let45 let30)
  let let49 := (binrel% HMul.hMul let3 let12)
  let let50 := (binrel% GE.ge let43 let20)
  let let51 := (binrel% GE.ge yuscore2dollarskuscore49 let2)
  let let52 := (binrel% GE.ge yuscore2dollarskuscore49 let9)
  let let53 := (binrel% HMul.hMul let21 let12)
  let let54 := (Eq let7 let7)
  let let55 := (binrel% LE.le yuscore2dollarskuscore49 let29)
  let let56 := (binrel% GE.ge yuscore2dollarskuscore49 let14)
  let let57 := (Eq stuscore2dollarskuscore49 let7)
  let let58 := (Eq yuscore2dollarskuscore49 let12)
  let let59 := (And let58 (And let57 (And let52 (And let6 (And let56 let55)))))
  let let60 := (And (And (And (And (And let58 let57) let52) let6) let56) let55)
  let let61 := (binrel% HAdd.hAdd let12 let17)
  let let62 := (Not True)
  let let63 := (binrel% GE.ge let46 let1)
  let let64 := (And True (And True (And True (And True let41))))
  let let65 := (binrel% GE.ge let12 let2)
  let let66 := (Implies let60 let35)
  let let67 := (Not let66)
  let let68 := (And let58 (And let57 (And let51 (And let5 (And let24 let32)))))
  let let69 := (Implies let68 let34)
  let let70 := (Not let69)
  let let71 := (binrel% HAdd.hAdd xuscore2dollarskuscore41 let49)
  let let72 := (binrel% GE.ge let71 let30)
  let let73 := (binrel% HAdd.hAdd xuscore2dollarskuscore41 let53)
  let let74 := (binrel% GE.ge let73 let20)
  let let75 := (binrel% GE.ge let49 let1)
  let let76 := (And let36 (And let54 (And let65 (And let75 (And let74 let72)))))
  let let77 := (Implies let76 let37)
  let let78 := (Not let77)
  let let79 := (Eq let30 let30)
  let let80 := (Eq xuscore2dollarskuscore41 xuscore2dollarskuscore41)
  let let81 := (Eq let20 let20)
  let let82 := (Eq And And)
  let let83 := (Eq let1 let1)
fun lean_r0 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let14 let13) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let8 let16) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let26 let24) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let36 True) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let37 True) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let42 True) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let47 let45) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let48 let39) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let49 let46) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let50 let40) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let53 let20) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let54 True) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let60 let59) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let61 let25) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let62 False) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let63 True) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let64 let41) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let65 True) => -- THEORY_REWRITE_ARITH
fun lean_a25 : let67 => by
have lean_s0 : let82 := by timed rfl
have lean_s1 : (Eq let58 let58) := by timed rfl
let lean_s2 := by timed congr lean_s0 lean_s1
have lean_s3 : (Eq let57 let57) := by timed rfl
let lean_s4 := by timed congr lean_s0 lean_s3
let lean_s5 := by timed congr lean_s0 lean_r16
let lean_s6 := by timed congr lean_s0 lean_r0
have lean_s7 : (Eq yuscore2dollarskuscore49 yuscore2dollarskuscore49) := by timed rfl
let lean_s8 := by timed flipCongrArg lean_s7 [GE.ge]
have lean_s9 : let36 := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HAdd.hAdd]
have lean_s11 : (Eq let10 let10) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [HMul.hMul]
have lean_s13 : (Eq let11 let18) := by timed congr lean_s12 lean_r2
have lean_s14 : (Eq let11 let17) := by timed Eq.trans lean_s13 lean_r3
have lean_s15 : (Eq let13 let61) := by timed congr lean_s10 lean_s14
have lean_s16 : (Eq let13 let25) := by timed Eq.trans lean_s15 lean_r20
have lean_s17 : (Eq let14 let25) := by timed Eq.trans lean_r1 lean_s16
have lean_s18 : (Eq let56 let26) := by timed congr lean_s8 lean_s17
have lean_s19 : (Eq let56 let24) := by timed Eq.trans lean_s18 lean_r4
let lean_s20 := by timed congr lean_s0 lean_s19
let lean_s21 := by timed flipCongrArg lean_s7 [LE.le]
have lean_s22 : (Eq let55 let33) := by timed congr lean_s21 lean_r5
have lean_s23 : (Eq let55 let32) := by timed Eq.trans lean_s22 lean_r6
let lean_s24 := by timed congr lean_s20 lean_s23
let lean_s25 := by timed congr lean_s6 lean_s24
let lean_s26 := by timed congr lean_s5 lean_s25
let lean_s27 := by timed congr lean_s4 lean_s26
have lean_s28 : (Eq let59 let68) := by timed congr lean_s2 lean_s27
have lean_s29 : (Eq let60 let68) := by timed Eq.trans lean_r19 lean_s28
let lean_s30 := by timed flipCongrArg lean_s29 [Implies]
have lean_s31 : (Eq let66 let69) := by timed congr lean_s30 lean_r7
have lean_s32 : (Eq let67 let70) := by timed flipCongrArg lean_s31 [Not]
have lean_s33 : let82 := by timed rfl
have lean_s34 : let70 := by timed eqResolve lean_a25 lean_s32
have lean_s35 : let68 := by timed notImplies1 lean_s34
have lean_s36 : let57 := by andElim lean_s35, 1
have lean_s37 : let68 := by timed notImplies1 lean_s34
have lean_s38 : let58 := by andElim lean_s37, 0
have lean_s39 : (And let57 let58) := by timed And.intro lean_s36 lean_s38
have lean_s40 : let58 := by andElim lean_s39, 1
let lean_s41 := by timed flipCongrArg lean_s40 [Eq]
have lean_s42 : let36 := by timed rfl
have lean_s43 : (Eq let58 let36) := by timed congr lean_s41 lean_s42
let lean_s44 := by timed congr lean_s33 lean_s43
have lean_s45 : let57 := by andElim lean_s39, 0
let lean_s46 := by timed flipCongrArg lean_s45 [Eq]
have lean_s47 : let54 := by timed rfl
have lean_s48 : (Eq let57 let54) := by timed congr lean_s46 lean_s47
let lean_s49 := by timed congr lean_s33 lean_s48
let lean_s50 := by timed flipCongrArg lean_s40 [GE.ge]
have lean_s51 : (Eq let2 let2) := by timed rfl
have lean_s52 : (Eq let51 let65) := by timed congr lean_s50 lean_s51
let lean_s53 := by timed congr lean_s33 lean_s52
have lean_s54 : (Eq let3 let3) := by timed rfl
let lean_s55 := by timed flipCongrArg lean_s54 [HMul.hMul]
have lean_s56 : (Eq let4 let49) := by timed congr lean_s55 lean_s40
let lean_s57 := by timed flipCongrArg lean_s56 [GE.ge]
have lean_s58 : let83 := by timed rfl
have lean_s59 : (Eq let5 let75) := by timed congr lean_s57 lean_s58
let lean_s60 := by timed congr lean_s33 lean_s59
have lean_s61 : let80 := by timed rfl
let lean_s62 := by timed flipCongrArg lean_s61 [HAdd.hAdd]
have lean_s63 : (Eq let21 let21) := by timed rfl
let lean_s64 := by timed flipCongrArg lean_s63 [HMul.hMul]
have lean_s65 : (Eq let22 let53) := by timed congr lean_s64 lean_s40
have lean_s66 : (Eq let23 let73) := by timed congr lean_s62 lean_s65
let lean_s67 := by timed flipCongrArg lean_s66 [GE.ge]
have lean_s68 : let81 := by timed rfl
have lean_s69 : (Eq let24 let74) := by timed congr lean_s67 lean_s68
let lean_s70 := by timed congr lean_s33 lean_s69
let lean_s71 := by timed flipCongrArg lean_s61 [HAdd.hAdd]
have lean_s72 : (Eq let31 let71) := by timed congr lean_s71 lean_s56
let lean_s73 := by timed flipCongrArg lean_s72 [GE.ge]
have lean_s74 : let79 := by timed rfl
have lean_s75 : (Eq let32 let72) := by timed congr lean_s73 lean_s74
let lean_s76 := by timed congr lean_s70 lean_s75
let lean_s77 := by timed congr lean_s60 lean_s76
let lean_s78 := by timed congr lean_s53 lean_s77
let lean_s79 := by timed congr lean_s49 lean_s78
have lean_s80 : (Eq let68 let76) := by timed congr lean_s44 lean_s79
let lean_s81 := by timed flipCongrArg lean_s80 [Implies]
let lean_s82 := by timed flipCongrArg lean_s40 [GE.ge]
have lean_s83 : (Eq let19 let19) := by timed rfl
have lean_s84 : (Eq let34 let37) := by timed congr lean_s82 lean_s83
have lean_s85 : (Eq let69 let77) := by timed congr lean_s81 lean_s84
have lean_s86 : (Eq let70 let78) := by timed flipCongrArg lean_s85 [Not]
have lean_s87 : let82 := by timed rfl
let lean_s88 := by timed congr lean_s87 lean_r8
let lean_s89 := by timed congr lean_s87 lean_r18
let lean_s90 := by timed congr lean_s87 lean_r24
let lean_s91 := by timed flipCongrArg lean_r14 [GE.ge]
have lean_s92 : let83 := by timed rfl
have lean_s93 : (Eq let75 let63) := by timed congr lean_s91 lean_s92
have lean_s94 : (Eq let75 True) := by timed Eq.trans lean_s93 lean_r22
let lean_s95 := by timed congr lean_s87 lean_s94
have lean_s96 : let80 := by timed rfl
let lean_s97 := by timed flipCongrArg lean_s96 [HAdd.hAdd]
have lean_s98 : (Eq let73 let44) := by timed congr lean_s97 lean_r17
have lean_s99 : (Eq let73 let43) := by timed Eq.trans lean_s98 lean_r11
let lean_s100 := by timed flipCongrArg lean_s99 [GE.ge]
have lean_s101 : let81 := by timed rfl
have lean_s102 : (Eq let74 let50) := by timed congr lean_s100 lean_s101
have lean_s103 : (Eq let74 let40) := by timed Eq.trans lean_s102 lean_r15
let lean_s104 := by timed congr lean_s87 lean_s103
let lean_s105 := by timed flipCongrArg lean_s96 [HAdd.hAdd]
have lean_s106 : (Eq let71 let47) := by timed congr lean_s105 lean_r14
have lean_s107 : (Eq let71 let45) := by timed Eq.trans lean_s106 lean_r12
let lean_s108 := by timed flipCongrArg lean_s107 [GE.ge]
have lean_s109 : let79 := by timed rfl
have lean_s110 : (Eq let72 let48) := by timed congr lean_s108 lean_s109
have lean_s111 : (Eq let72 let39) := by timed Eq.trans lean_s110 lean_r13
let lean_s112 := by timed congr lean_s104 lean_s111
let lean_s113 := by timed congr lean_s95 lean_s112
let lean_s114 := by timed congr lean_s90 lean_s113
let lean_s115 := by timed congr lean_s89 lean_s114
have lean_s116 : (Eq let76 let64) := by timed congr lean_s88 lean_s115
have lean_s117 : (Eq let76 let41) := by timed Eq.trans lean_s116 lean_r23
let lean_s118 := by timed flipCongrArg lean_s117 [Implies]
have lean_s119 : (Eq let77 let42) := by timed congr lean_s118 lean_r9
have lean_s120 : (Eq let77 True) := by timed Eq.trans lean_s119 lean_r10
have lean_s121 : (Eq let78 let62) := by timed flipCongrArg lean_s120 [Not]
have lean_s122 : (Eq let78 False) := by timed Eq.trans lean_s121 lean_r21
have lean_s123 : (Eq let70 False) := by timed Eq.trans lean_s86 lean_s122
have lean_s124 : (Eq let67 False) := by timed Eq.trans lean_s32 lean_s123
exact (show False from by timed eqResolve lean_a25 lean_s124)


