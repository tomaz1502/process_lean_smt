open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {stuscore2dollarskuscore40 : Rat}
variable {xuscore2dollarskuscore32 : Rat}
variable {yuscore2dollarskuscore40 : Rat}
variable {stuscore2dollarskuscore40 : Rat}
variable {xuscore2dollarskuscore32 : Rat}
variable {yuscore2dollarskuscore40 : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 10)
  let let2 := (binrel% HAdd.hAdd let1 xuscore2dollarskuscore32)
  let let3 := (binrel% LE.le yuscore2dollarskuscore40 let2)
  let let4 := (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)
  let let5 := (Rat.ofInt 5)
  let let6 := (binrel% HSub.hSub let5 let4)
  let let7 := (binrel% GE.ge yuscore2dollarskuscore40 let6)
  let let8 := (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12))
  let let9 := (Rat.ofInt 1)
  let let10 := (binrel% GE.ge yuscore2dollarskuscore40 let9)
  let let11 := (Rat.ofInt 0)
  let let12 := (Eq stuscore2dollarskuscore40 let11)
  let let13 := (Eq yuscore2dollarskuscore40 let1)
  let let14 := (And let13 (And let12 (And let10 (And let8 (And let7 let3)))))
  let let15 := (And (And (And (And (And let13 let12) let10) let8) let7) let3)
  let let16 := (Int.ofNat 1)
  let let17 := (binrel% GE.ge yuscore2dollarskuscore40 let16)
  let let18 := (Neg.neg let9)
  let let19 := (binrel% HMul.hMul let18 let4)
  let let20 := (binrel% HAdd.hAdd let5 let19)
  let let21 := (Int.ofNat 2)
  let let22 := (binrel% HMul.hMul (Neg.neg let21) xuscore2dollarskuscore32)
  let let23 := (binrel% HMul.hMul let21 xuscore2dollarskuscore32)
  let let24 := (binrel% HMul.hMul let18 let23)
  let let25 := (Int.ofNat 5)
  let let26 := (binrel% HAdd.hAdd let25 let22)
  let let27 := (binrel% HAdd.hAdd let5 let22)
  let let28 := (Neg.neg (Int.ofNat 12))
  let let29 := (Neg.neg let16)
  let let30 := (binrel% HMul.hMul let29 yuscore2dollarskuscore40)
  let let31 := (binrel% GE.ge let30 let28)
  let let32 := (binrel% HDiv.hDiv let25 let21)
  let let33 := (binrel% HDiv.hDiv let16 let21)
  let let34 := (binrel% HMul.hMul let33 yuscore2dollarskuscore40)
  let let35 := (binrel% HAdd.hAdd xuscore2dollarskuscore32 let34)
  let let36 := (binrel% GE.ge let35 let32)
  let let37 := (binrel% GE.ge yuscore2dollarskuscore40 let26)
  let let38 := (Int.ofNat 10)
  let let39 := (Neg.neg let38)
  let let40 := (binrel% HAdd.hAdd xuscore2dollarskuscore32 let30)
  let let41 := (binrel% GE.ge let40 let39)
  let let42 := (binrel% HAdd.hAdd let38 xuscore2dollarskuscore32)
  let let43 := (binrel% LE.le yuscore2dollarskuscore40 let42)
  let let44 := (Eq let1 let1)
  let let45 := (binrel% GE.ge let30 let39)
  let let46 := (binrel% LE.le yuscore2dollarskuscore40 let1)
  let let47 := (Not True)
  let let48 := (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0))
  let let49 := (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg let32))
  let let50 := (And let49 let48)
  let let51 := (Implies let50 True)
  let let52 := (Neg.neg let1)
  let let53 := (binrel% GE.ge let52 let39)
  let let54 := (binrel% HMul.hMul let29 let1)
  let let55 := (binrel% GE.ge let52 let28)
  let let56 := (And True (And True (And True (And True let50))))
  let let57 := (binrel% HMul.hMul let33 let1)
  let let58 := (Eq let11 let11)
  let let59 := (binrel% HAdd.hAdd let39 xuscore2dollarskuscore32)
  let let60 := (binrel% GE.ge let59 let39)
  let let61 := (binrel% HAdd.hAdd let25 xuscore2dollarskuscore32)
  let let62 := (binrel% HAdd.hAdd xuscore2dollarskuscore32 let5)
  let let63 := (binrel% HAdd.hAdd xuscore2dollarskuscore32 let52)
  let let64 := (binrel% GE.ge let61 let32)
  let let65 := (binrel% GE.ge let1 let16)
  let let66 := (Implies let15 let46)
  let let67 := (Not let66)
  let let68 := (And let13 (And let12 (And let17 (And let31 (And let36 let41)))))
  let let69 := (Implies let68 let45)
  let let70 := (Not let69)
  let let71 := (binrel% GE.ge let54 let39)
  let let72 := (binrel% HAdd.hAdd xuscore2dollarskuscore32 let54)
  let let73 := (binrel% GE.ge let72 let39)
  let let74 := (binrel% HAdd.hAdd xuscore2dollarskuscore32 let57)
  let let75 := (binrel% GE.ge let74 let32)
  let let76 := (binrel% GE.ge let54 let28)
  let let77 := (And let44 (And let58 (And let65 (And let76 (And let75 let73)))))
  let let78 := (Implies let77 let71)
  let let79 := (Not let78)
  let let80 := (Eq let39 let39)
  let let81 := (Eq xuscore2dollarskuscore32 xuscore2dollarskuscore32)
  let let82 := (Eq let32 let32)
  let let83 := (Eq And And)
  let let84 := (Eq let28 let28)
(Eq let15 let14) → (Eq let10 let17) → (Eq let6 let20) → (Eq let24 let22) → (Eq let27 let26) → (Eq let8 let31) → (Eq let37 let36) → (Eq let43 let41) → (Eq let44 True) → (Eq let46 let45) → (Eq let47 False) → (Eq let4 let23) → (Eq let51 True) → (Eq let53 True) → (Eq let54 let52) → (Eq let55 True) → (Eq let56 let50) → (Eq let57 let5) → (Eq let58 True) → (Eq let60 let48) → (Eq let62 let61) → (Eq let63 let59) → (Eq let2 let42) → (Eq let64 let49) → (Eq let65 True) → let67 → False :=
  let let1 := (Rat.ofInt 10)
  let let2 := (binrel% HAdd.hAdd let1 xuscore2dollarskuscore32)
  let let3 := (binrel% LE.le yuscore2dollarskuscore40 let2)
  let let4 := (binrel% HMul.hMul (Rat.ofInt 2) xuscore2dollarskuscore32)
  let let5 := (Rat.ofInt 5)
  let let6 := (binrel% HSub.hSub let5 let4)
  let let7 := (binrel% GE.ge yuscore2dollarskuscore40 let6)
  let let8 := (binrel% LE.le yuscore2dollarskuscore40 (Rat.ofInt 12))
  let let9 := (Rat.ofInt 1)
  let let10 := (binrel% GE.ge yuscore2dollarskuscore40 let9)
  let let11 := (Rat.ofInt 0)
  let let12 := (Eq stuscore2dollarskuscore40 let11)
  let let13 := (Eq yuscore2dollarskuscore40 let1)
  let let14 := (And let13 (And let12 (And let10 (And let8 (And let7 let3)))))
  let let15 := (And (And (And (And (And let13 let12) let10) let8) let7) let3)
  let let16 := (Int.ofNat 1)
  let let17 := (binrel% GE.ge yuscore2dollarskuscore40 let16)
  let let18 := (Neg.neg let9)
  let let19 := (binrel% HMul.hMul let18 let4)
  let let20 := (binrel% HAdd.hAdd let5 let19)
  let let21 := (Int.ofNat 2)
  let let22 := (binrel% HMul.hMul (Neg.neg let21) xuscore2dollarskuscore32)
  let let23 := (binrel% HMul.hMul let21 xuscore2dollarskuscore32)
  let let24 := (binrel% HMul.hMul let18 let23)
  let let25 := (Int.ofNat 5)
  let let26 := (binrel% HAdd.hAdd let25 let22)
  let let27 := (binrel% HAdd.hAdd let5 let22)
  let let28 := (Neg.neg (Int.ofNat 12))
  let let29 := (Neg.neg let16)
  let let30 := (binrel% HMul.hMul let29 yuscore2dollarskuscore40)
  let let31 := (binrel% GE.ge let30 let28)
  let let32 := (binrel% HDiv.hDiv let25 let21)
  let let33 := (binrel% HDiv.hDiv let16 let21)
  let let34 := (binrel% HMul.hMul let33 yuscore2dollarskuscore40)
  let let35 := (binrel% HAdd.hAdd xuscore2dollarskuscore32 let34)
  let let36 := (binrel% GE.ge let35 let32)
  let let37 := (binrel% GE.ge yuscore2dollarskuscore40 let26)
  let let38 := (Int.ofNat 10)
  let let39 := (Neg.neg let38)
  let let40 := (binrel% HAdd.hAdd xuscore2dollarskuscore32 let30)
  let let41 := (binrel% GE.ge let40 let39)
  let let42 := (binrel% HAdd.hAdd let38 xuscore2dollarskuscore32)
  let let43 := (binrel% LE.le yuscore2dollarskuscore40 let42)
  let let44 := (Eq let1 let1)
  let let45 := (binrel% GE.ge let30 let39)
  let let46 := (binrel% LE.le yuscore2dollarskuscore40 let1)
  let let47 := (Not True)
  let let48 := (binrel% GE.ge xuscore2dollarskuscore32 (Int.ofNat 0))
  let let49 := (binrel% GE.ge xuscore2dollarskuscore32 (Neg.neg let32))
  let let50 := (And let49 let48)
  let let51 := (Implies let50 True)
  let let52 := (Neg.neg let1)
  let let53 := (binrel% GE.ge let52 let39)
  let let54 := (binrel% HMul.hMul let29 let1)
  let let55 := (binrel% GE.ge let52 let28)
  let let56 := (And True (And True (And True (And True let50))))
  let let57 := (binrel% HMul.hMul let33 let1)
  let let58 := (Eq let11 let11)
  let let59 := (binrel% HAdd.hAdd let39 xuscore2dollarskuscore32)
  let let60 := (binrel% GE.ge let59 let39)
  let let61 := (binrel% HAdd.hAdd let25 xuscore2dollarskuscore32)
  let let62 := (binrel% HAdd.hAdd xuscore2dollarskuscore32 let5)
  let let63 := (binrel% HAdd.hAdd xuscore2dollarskuscore32 let52)
  let let64 := (binrel% GE.ge let61 let32)
  let let65 := (binrel% GE.ge let1 let16)
  let let66 := (Implies let15 let46)
  let let67 := (Not let66)
  let let68 := (And let13 (And let12 (And let17 (And let31 (And let36 let41)))))
  let let69 := (Implies let68 let45)
  let let70 := (Not let69)
  let let71 := (binrel% GE.ge let54 let39)
  let let72 := (binrel% HAdd.hAdd xuscore2dollarskuscore32 let54)
  let let73 := (binrel% GE.ge let72 let39)
  let let74 := (binrel% HAdd.hAdd xuscore2dollarskuscore32 let57)
  let let75 := (binrel% GE.ge let74 let32)
  let let76 := (binrel% GE.ge let54 let28)
  let let77 := (And let44 (And let58 (And let65 (And let76 (And let75 let73)))))
  let let78 := (Implies let77 let71)
  let let79 := (Not let78)
  let let80 := (Eq let39 let39)
  let let81 := (Eq xuscore2dollarskuscore32 xuscore2dollarskuscore32)
  let let82 := (Eq let32 let32)
  let let83 := (Eq And And)
  let let84 := (Eq let28 let28)
fun lean_r0 : (Eq let15 let14) => -- THEORY_REWRITE_BOOL
fun lean_r1 : (Eq let10 let17) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let6 let20) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let24 let22) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let8 let31) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let43 let41) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let44 True) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let46 let45) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let47 False) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let4 let23) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let51 True) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let53 True) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let54 let52) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let55 True) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let56 let50) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let57 let5) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let58 True) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let60 let48) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let62 let61) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let63 let59) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let2 let42) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let64 let49) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let65 True) => -- THEORY_REWRITE_ARITH
fun lean_a25 : let67 => by
have lean_s0 : let83 := by timed rfl
have lean_s1 : (Eq let13 let13) := by timed rfl
let lean_s2 := by timed congr lean_s0 lean_s1
have lean_s3 : (Eq let12 let12) := by timed rfl
let lean_s4 := by timed congr lean_s0 lean_s3
let lean_s5 := by timed congr lean_s0 lean_r1
let lean_s6 := by timed congr lean_s0 lean_r5
have lean_s7 : (Eq yuscore2dollarskuscore40 yuscore2dollarskuscore40) := by timed rfl
let lean_s8 := by timed flipCongrArg lean_s7 [GE.ge]
have lean_s9 : (Eq let5 let5) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HAdd.hAdd]
have lean_s11 : (Eq let18 let18) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [HMul.hMul]
have lean_s13 : (Eq let19 let24) := by timed congr lean_s12 lean_r11
have lean_s14 : (Eq let19 let22) := by timed Eq.trans lean_s13 lean_r3
have lean_s15 : (Eq let20 let27) := by timed congr lean_s10 lean_s14
have lean_s16 : (Eq let20 let26) := by timed Eq.trans lean_s15 lean_r4
have lean_s17 : (Eq let6 let26) := by timed Eq.trans lean_r2 lean_s16
have lean_s18 : (Eq let7 let37) := by timed congr lean_s8 lean_s17
have lean_s19 : (Eq let7 let36) := by timed Eq.trans lean_s18 lean_r6
let lean_s20 := by timed congr lean_s0 lean_s19
let lean_s21 := by timed flipCongrArg lean_s7 [LE.le]
have lean_s22 : (Eq let3 let43) := by timed congr lean_s21 lean_r22
have lean_s23 : (Eq let3 let41) := by timed Eq.trans lean_s22 lean_r7
let lean_s24 := by timed congr lean_s20 lean_s23
let lean_s25 := by timed congr lean_s6 lean_s24
let lean_s26 := by timed congr lean_s5 lean_s25
let lean_s27 := by timed congr lean_s4 lean_s26
have lean_s28 : (Eq let14 let68) := by timed congr lean_s2 lean_s27
have lean_s29 : (Eq let15 let68) := by timed Eq.trans lean_r0 lean_s28
let lean_s30 := by timed flipCongrArg lean_s29 [Implies]
have lean_s31 : (Eq let66 let69) := by timed congr lean_s30 lean_r9
have lean_s32 : (Eq let67 let70) := by timed flipCongrArg lean_s31 [Not]
have lean_s33 : let83 := by timed rfl
have lean_s34 : let70 := by timed eqResolve lean_a25 lean_s32
have lean_s35 : let68 := by timed notImplies1 lean_s34
have lean_s36 : let12 := by andElim lean_s35, 1
have lean_s37 : let68 := by timed notImplies1 lean_s34
have lean_s38 : let13 := by andElim lean_s37, 0
have lean_s39 : (And let12 let13) := by timed And.intro lean_s36 lean_s38
have lean_s40 : let13 := by andElim lean_s39, 1
let lean_s41 := by timed flipCongrArg lean_s40 [Eq]
have lean_s42 : let44 := by timed rfl
have lean_s43 : (Eq let13 let44) := by timed congr lean_s41 lean_s42
let lean_s44 := by timed congr lean_s33 lean_s43
have lean_s45 : let12 := by andElim lean_s39, 0
let lean_s46 := by timed flipCongrArg lean_s45 [Eq]
have lean_s47 : let58 := by timed rfl
have lean_s48 : (Eq let12 let58) := by timed congr lean_s46 lean_s47
let lean_s49 := by timed congr lean_s33 lean_s48
let lean_s50 := by timed flipCongrArg lean_s40 [GE.ge]
have lean_s51 : (Eq let16 let16) := by timed rfl
have lean_s52 : (Eq let17 let65) := by timed congr lean_s50 lean_s51
let lean_s53 := by timed congr lean_s33 lean_s52
have lean_s54 : (Eq let29 let29) := by timed rfl
let lean_s55 := by timed flipCongrArg lean_s54 [HMul.hMul]
have lean_s56 : (Eq let30 let54) := by timed congr lean_s55 lean_s40
let lean_s57 := by timed flipCongrArg lean_s56 [GE.ge]
have lean_s58 : let84 := by timed rfl
have lean_s59 : (Eq let31 let76) := by timed congr lean_s57 lean_s58
let lean_s60 := by timed congr lean_s33 lean_s59
have lean_s61 : let81 := by timed rfl
let lean_s62 := by timed flipCongrArg lean_s61 [HAdd.hAdd]
have lean_s63 : (Eq let33 let33) := by timed rfl
let lean_s64 := by timed flipCongrArg lean_s63 [HMul.hMul]
have lean_s65 : (Eq let34 let57) := by timed congr lean_s64 lean_s40
have lean_s66 : (Eq let35 let74) := by timed congr lean_s62 lean_s65
let lean_s67 := by timed flipCongrArg lean_s66 [GE.ge]
have lean_s68 : let82 := by timed rfl
have lean_s69 : (Eq let36 let75) := by timed congr lean_s67 lean_s68
let lean_s70 := by timed congr lean_s33 lean_s69
let lean_s71 := by timed flipCongrArg lean_s61 [HAdd.hAdd]
have lean_s72 : (Eq let40 let72) := by timed congr lean_s71 lean_s56
let lean_s73 := by timed flipCongrArg lean_s72 [GE.ge]
have lean_s74 : let80 := by timed rfl
have lean_s75 : (Eq let41 let73) := by timed congr lean_s73 lean_s74
let lean_s76 := by timed congr lean_s70 lean_s75
let lean_s77 := by timed congr lean_s60 lean_s76
let lean_s78 := by timed congr lean_s53 lean_s77
let lean_s79 := by timed congr lean_s49 lean_s78
have lean_s80 : (Eq let68 let77) := by timed congr lean_s44 lean_s79
let lean_s81 := by timed flipCongrArg lean_s80 [Implies]
let lean_s82 := by timed flipCongrArg lean_s56 [GE.ge]
have lean_s83 : (Eq let45 let71) := by timed congr lean_s82 lean_s74
have lean_s84 : (Eq let69 let78) := by timed congr lean_s81 lean_s83
have lean_s85 : (Eq let70 let79) := by timed flipCongrArg lean_s84 [Not]
have lean_s86 : let83 := by timed rfl
let lean_s87 := by timed congr lean_s86 lean_r8
let lean_s88 := by timed congr lean_s86 lean_r18
let lean_s89 := by timed congr lean_s86 lean_r24
let lean_s90 := by timed flipCongrArg lean_r14 [GE.ge]
have lean_s91 : let84 := by timed rfl
have lean_s92 : (Eq let76 let55) := by timed congr lean_s90 lean_s91
have lean_s93 : (Eq let76 True) := by timed Eq.trans lean_s92 lean_r15
let lean_s94 := by timed congr lean_s86 lean_s93
have lean_s95 : let81 := by timed rfl
let lean_s96 := by timed flipCongrArg lean_s95 [HAdd.hAdd]
have lean_s97 : (Eq let74 let62) := by timed congr lean_s96 lean_r17
have lean_s98 : (Eq let74 let61) := by timed Eq.trans lean_s97 lean_r20
let lean_s99 := by timed flipCongrArg lean_s98 [GE.ge]
have lean_s100 : let82 := by timed rfl
have lean_s101 : (Eq let75 let64) := by timed congr lean_s99 lean_s100
have lean_s102 : (Eq let75 let49) := by timed Eq.trans lean_s101 lean_r23
let lean_s103 := by timed congr lean_s86 lean_s102
let lean_s104 := by timed flipCongrArg lean_s95 [HAdd.hAdd]
have lean_s105 : (Eq let72 let63) := by timed congr lean_s104 lean_r14
have lean_s106 : (Eq let72 let59) := by timed Eq.trans lean_s105 lean_r21
let lean_s107 := by timed flipCongrArg lean_s106 [GE.ge]
have lean_s108 : let80 := by timed rfl
have lean_s109 : (Eq let73 let60) := by timed congr lean_s107 lean_s108
have lean_s110 : (Eq let73 let48) := by timed Eq.trans lean_s109 lean_r19
let lean_s111 := by timed congr lean_s103 lean_s110
let lean_s112 := by timed congr lean_s94 lean_s111
let lean_s113 := by timed congr lean_s89 lean_s112
let lean_s114 := by timed congr lean_s88 lean_s113
have lean_s115 : (Eq let77 let56) := by timed congr lean_s87 lean_s114
have lean_s116 : (Eq let77 let50) := by timed Eq.trans lean_s115 lean_r16
let lean_s117 := by timed flipCongrArg lean_s116 [Implies]
let lean_s118 := by timed flipCongrArg lean_r14 [GE.ge]
have lean_s119 : (Eq let71 let53) := by timed congr lean_s118 lean_s108
have lean_s120 : (Eq let71 True) := by timed Eq.trans lean_s119 lean_r13
have lean_s121 : (Eq let78 let51) := by timed congr lean_s117 lean_s120
have lean_s122 : (Eq let78 True) := by timed Eq.trans lean_s121 lean_r12
have lean_s123 : (Eq let79 let47) := by timed flipCongrArg lean_s122 [Not]
have lean_s124 : (Eq let79 False) := by timed Eq.trans lean_s123 lean_r10
have lean_s125 : (Eq let70 False) := by timed Eq.trans lean_s85 lean_s124
have lean_s126 : (Eq let67 False) := by timed Eq.trans lean_s32 lean_s125
exact (show False from by timed eqResolve lean_a25 lean_s126)


