open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% GE.ge skoX let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le let5 skoX)
  let let7 := (binrel% HMul.hMul let2 skoZ)
  let let8 := (Neg.neg (Int.ofNat 1))
  let let9 := (binrel% HMul.hMul let8 skoY)
  let let10 := (Neg.neg let2)
  let let11 := (binrel% HMul.hMul skoY let10)
  let let12 := (Eq let11 let9)
  let let13 := (binrel% HMul.hMul let2 let10)
  let let14 := (binrel% GE.ge skoZ let1)
  let let15 := (binrel% LE.le let5 skoZ)
  let let16 := (binrel% LT.lt let10 let1)
  let let17 := (Int.ofNat 2)
  let let18 := (binrel% HMul.hMul let8 skoX)
  let let19 := (binrel% HAdd.hAdd let9 let18)
  let let20 := (binrel% HMul.hMul let8 skoZ)
  let let21 := (binrel% GE.ge (binrel% HAdd.hAdd let20 let19) (Neg.neg let17))
  let let22 := (binrel% HAdd.hAdd let17 let19)
  let let23 := (binrel% LE.le skoZ let22)
  let let24 := (binrel% GE.ge let20 let8)
  let let25 := (binrel% LE.le skoZ let2)
  let let26 := (binrel% HMul.hMul let10 let5)
  let let27 := (binrel% HMul.hMul skoX let10)
  let let28 := (Rat.ofInt 2)
  let let29 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 let11))
  let let30 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let28 let27) let11)
  let let31 := (binrel% GE.ge skoZ let8)
  let let32 := (binrel% LE.le let10 skoZ)
  let let33 := (Eq let32 let31)
  let let34 := (Eq let27 let18)
  let let35 := (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) let17)
  let let36 := (binrel% LE.le let22 skoZ)
  let let37 := (binrel% GE.ge skoZ let10)
  let let38 := (Not let37)
  let let39 := (binrel% LT.lt skoZ let10)
  let let40 := (binrel% LE.le let30 skoZ)
  let let41 := (binrel% LE.le skoZ let30)
  let let42 := (binrel% LE.le skoY let2)
  let let43 := (binrel% LE.le skoX let2)
  let let44 := (binrel% LE.le let5 skoY)
  let let45 := (Not let32)
  let let46 := (And let45 (And let6 (And let44 (And let15 (And let43 (And let42 (And let25 (And let41 let40))))))))
  let let47 := (binrel% HMul.hMul let10 skoZ)
  let let48 := (Not let31)
  let let49 := (Not let48)
  let let50 := (binrel% GE.ge let18 let8)
  let let51 := (Not True)
  let let52 := (binrel% GE.ge skoY let1)
  let let53 := (binrel% GE.ge let5 let10)
  let let54 := (binrel% HAdd.hAdd let10 let5)
  let let55 := (binrel% HAdd.hAdd skoZ let20)
  let let56 := (binrel% HAdd.hAdd let13 let26)
  let let57 := (binrel% HAdd.hAdd let7 let47)
  let let58 := (binrel% GE.ge let57 let56)
  let let59 := (Not let58)
  let let60 := (binrel% LT.lt let57 let56)
  let let61 := (binrel% GE.ge let9 let8)
  let let62 := (binrel% GE.ge skoZ let5)
  let let63 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let18 let9))
  let let64 := (And let48 (And let4 (And let52 (And let14 (And let50 (And let61 (And let24 (And let21 let35))))))))
  let let65 := (Eq let46 let64)
  let let66 := (Not let14)
  let let67 := (Or let31 let66)
  let let68 := (Or let49 let66)
  let let69 := (binrel% LE.le let47 let26)
  let let70 := (And let16 let62)
  let let71 := (binrel% LT.lt let7 let13)
  let let72 := (And let3 let39)
(Eq let3 True) → (Eq let6 let4) → (Eq let7 skoZ) → let12 → (Eq let13 let10) → (Eq let15 let14) → (Eq let16 True) → (Eq let23 let21) → (Eq let25 let24) → (Eq let26 let5) → (Eq let30 let29) → let33 → let34 → (Eq let36 let35) → (Eq let39 let38) → (Eq let46 let46) → (Eq let47 let20) → (Eq let10 let10) → (Eq let49 let31) → (Eq let43 let50) → (Eq let51 False) → (Eq let44 let52) → (Eq let53 True) → (Eq let54 let10) → (Eq let55 let5) → (Eq let60 let59) → (Eq let42 let61) → (Eq let62 let14) → (Eq let63 let22) → (Eq let37 let31) → let46 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% GE.ge skoX let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le let5 skoX)
  let let7 := (binrel% HMul.hMul let2 skoZ)
  let let8 := (Neg.neg (Int.ofNat 1))
  let let9 := (binrel% HMul.hMul let8 skoY)
  let let10 := (Neg.neg let2)
  let let11 := (binrel% HMul.hMul skoY let10)
  let let12 := (Eq let11 let9)
  let let13 := (binrel% HMul.hMul let2 let10)
  let let14 := (binrel% GE.ge skoZ let1)
  let let15 := (binrel% LE.le let5 skoZ)
  let let16 := (binrel% LT.lt let10 let1)
  let let17 := (Int.ofNat 2)
  let let18 := (binrel% HMul.hMul let8 skoX)
  let let19 := (binrel% HAdd.hAdd let9 let18)
  let let20 := (binrel% HMul.hMul let8 skoZ)
  let let21 := (binrel% GE.ge (binrel% HAdd.hAdd let20 let19) (Neg.neg let17))
  let let22 := (binrel% HAdd.hAdd let17 let19)
  let let23 := (binrel% LE.le skoZ let22)
  let let24 := (binrel% GE.ge let20 let8)
  let let25 := (binrel% LE.le skoZ let2)
  let let26 := (binrel% HMul.hMul let10 let5)
  let let27 := (binrel% HMul.hMul skoX let10)
  let let28 := (Rat.ofInt 2)
  let let29 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 let11))
  let let30 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let28 let27) let11)
  let let31 := (binrel% GE.ge skoZ let8)
  let let32 := (binrel% LE.le let10 skoZ)
  let let33 := (Eq let32 let31)
  let let34 := (Eq let27 let18)
  let let35 := (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) let17)
  let let36 := (binrel% LE.le let22 skoZ)
  let let37 := (binrel% GE.ge skoZ let10)
  let let38 := (Not let37)
  let let39 := (binrel% LT.lt skoZ let10)
  let let40 := (binrel% LE.le let30 skoZ)
  let let41 := (binrel% LE.le skoZ let30)
  let let42 := (binrel% LE.le skoY let2)
  let let43 := (binrel% LE.le skoX let2)
  let let44 := (binrel% LE.le let5 skoY)
  let let45 := (Not let32)
  let let46 := (And let45 (And let6 (And let44 (And let15 (And let43 (And let42 (And let25 (And let41 let40))))))))
  let let47 := (binrel% HMul.hMul let10 skoZ)
  let let48 := (Not let31)
  let let49 := (Not let48)
  let let50 := (binrel% GE.ge let18 let8)
  let let51 := (Not True)
  let let52 := (binrel% GE.ge skoY let1)
  let let53 := (binrel% GE.ge let5 let10)
  let let54 := (binrel% HAdd.hAdd let10 let5)
  let let55 := (binrel% HAdd.hAdd skoZ let20)
  let let56 := (binrel% HAdd.hAdd let13 let26)
  let let57 := (binrel% HAdd.hAdd let7 let47)
  let let58 := (binrel% GE.ge let57 let56)
  let let59 := (Not let58)
  let let60 := (binrel% LT.lt let57 let56)
  let let61 := (binrel% GE.ge let9 let8)
  let let62 := (binrel% GE.ge skoZ let5)
  let let63 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let18 let9))
  let let64 := (And let48 (And let4 (And let52 (And let14 (And let50 (And let61 (And let24 (And let21 let35))))))))
  let let65 := (Eq let46 let64)
  let let66 := (Not let14)
  let let67 := (Or let31 let66)
  let let68 := (Or let49 let66)
  let let69 := (binrel% LE.le let47 let26)
  let let70 := (And let16 let62)
  let let71 := (binrel% LT.lt let7 let13)
  let let72 := (And let3 let39)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let6 let4) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let7 skoZ) => -- THEORY_REWRITE_ARITH
fun lean_r3 : let12 => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let13 let10) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let15 let14) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let16 True) => -- EVALUATE
fun lean_r7 : (Eq let23 let21) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let26 let5) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let30 let29) => -- THEORY_REWRITE_ARITH
fun lean_r11 : let33 => -- THEORY_REWRITE_ARITH
fun lean_r12 : let34 => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let46 let46) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let47 let20) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let10 let10) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let49 let31) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let43 let50) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let51 False) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let44 let52) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let53 True) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let54 let10) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let55 let5) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let60 let59) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let42 let61) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let62 let14) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let63 let22) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let37 let31) => -- THEORY_REWRITE_ARITH
fun lean_a30 : let46 => by
have lean_s0 : (Or let49 (Or let66 False)) :=
  (scope (fun lean_a31 : let48 =>
    (scope (fun lean_a32 : let14 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let38 let48) := by timed flipCongrArg lean_r29 [Not]
      have lean_s2 : (Eq let39 let48) := by timed Eq.trans lean_r14 lean_s1
      have lean_s3 : (Eq let48 let39) := by timed Eq.symm lean_s2
      have lean_s4 : let39 := by timed eqResolve lean_a31 lean_s3
      have lean_s5 : let72 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let72 let71) := by arithMulPos [skoZ, let10, let2], 0
      have lean_s7 : let71 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let16 := by timed trueElim lean_r6
      have lean_s9 : (Eq let14 let62) := by timed Eq.symm lean_r27
      have lean_s10 : let62 := by timed eqResolve lean_a32 lean_s9
      have lean_s11 : let70 := by timed And.intro lean_s8 lean_s10
      have lean_s12 : (Implies let70 let69) := by arithMulNeg [skoZ, let5, let10], 3
      have lean_s13 : let69 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let60 := by sumBounds [lean_s7, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r2 [HAdd.hAdd]
      have lean_s16 : (Eq let57 let55) := by timed congr lean_s15 lean_r16
      have lean_s17 : (Eq let57 let5) := by timed Eq.trans lean_s16 lean_r24
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r4 [HAdd.hAdd]
      have lean_s20 : (Eq let56 let54) := by timed congr lean_s19 lean_r9
      have lean_s21 : (Eq let56 let10) := by timed Eq.trans lean_s20 lean_r23
      have lean_s22 : (Eq let58 let53) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let58 True) := by timed Eq.trans lean_s22 lean_r22
      have lean_s24 : (Eq let59 let51) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let59 False) := by timed Eq.trans lean_s24 lean_r20
      have lean_s26 : (Eq let60 False) := by timed Eq.trans lean_r25 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let48 let14)) := by liftOrNToNeg lean_s0
have lean_s2 : let68 := by timed flipNotAnd lean_s1 [let48, let14]
let lean_s3 := by timed flipCongrArg lean_r18 [Or]
have lean_s4 : (Eq let66 let66) := by timed rfl
have lean_s5 : (Eq let68 let67) := by timed congr lean_s3 lean_s4
have lean_s6 : let67 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
let lean_s8 := by timed flipCongrArg lean_r17 [LE.le]
have lean_s9 : (Eq skoZ skoZ) := by timed rfl
have lean_s10 : (Eq let32 let32) := by timed congr lean_s8 lean_s9
have lean_s11 : let33 := by timed Eq.trans lean_s10 lean_r11
have lean_s12 : (Eq let45 let48) := by timed flipCongrArg lean_s11 [Not]
let lean_s13 := by timed congr lean_s7 lean_s12
let lean_s14 := by timed congr lean_s7 lean_r1
let lean_s15 := by timed congr lean_s7 lean_r21
let lean_s16 := by timed congr lean_s7 lean_r5
let lean_s17 := by timed congr lean_s7 lean_r19
let lean_s18 := by timed congr lean_s7 lean_r26
let lean_s19 := by timed congr lean_s7 lean_r8
let lean_s20 := by timed flipCongrArg lean_s9 [LE.le]
have lean_s21 : (Eq let28 let28) := by timed rfl
have lean_s22 : (Eq skoX skoX) := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [HMul.hMul]
have lean_s24 : (Eq let27 let27) := by timed congr lean_s23 lean_r17
have lean_s25 : let34 := by timed Eq.trans lean_s24 lean_r12
have lean_s26 : (Eq skoY skoY) := by timed rfl
let lean_s27 := by timed flipCongrArg lean_s26 [HMul.hMul]
have lean_s28 : (Eq let11 let11) := by timed congr lean_s27 lean_r17
have lean_s29 : let12 := by timed Eq.trans lean_s28 lean_r3
let lean_s30 := by timed congrHAdd lean_s25 lean_s29
have lean_s31 : (Eq let29 let63) := by timed congrHAdd lean_s21 lean_s30
have lean_s32 : (Eq let29 let22) := by timed Eq.trans lean_s31 lean_r28
have lean_s33 : (Eq let30 let22) := by timed Eq.trans lean_r10 lean_s32
have lean_s34 : (Eq let41 let23) := by timed congr lean_s20 lean_s33
have lean_s35 : (Eq let41 let21) := by timed Eq.trans lean_s34 lean_r7
let lean_s36 := by timed congr lean_s7 lean_s35
let lean_s37 := by timed flipCongrArg lean_s33 [LE.le]
have lean_s38 : (Eq let40 let36) := by timed congr lean_s37 lean_s9
have lean_s39 : (Eq let40 let35) := by timed Eq.trans lean_s38 lean_r13
let lean_s40 := by timed congr lean_s36 lean_s39
let lean_s41 := by timed congr lean_s19 lean_s40
let lean_s42 := by timed congr lean_s18 lean_s41
let lean_s43 := by timed congr lean_s17 lean_s42
let lean_s44 := by timed congr lean_s16 lean_s43
let lean_s45 := by timed congr lean_s15 lean_s44
let lean_s46 := by timed congr lean_s14 lean_s45
have lean_s47 : let65 := by timed congr lean_s13 lean_s46
have lean_s48 : let65 := by timed Eq.trans lean_r15 lean_s47
have lean_s49 : let64 := by timed eqResolve lean_a30 lean_s48
have lean_s50 : let14 := by andElim lean_s49, 3
let lean_s51 := by R2 lean_s6, lean_s50, let14, [(- 1), 0]
have lean_s52 : let48 := by andElim lean_s49, 0
exact (show False from by R1 lean_s51, lean_s52, let31, [0, 0])


