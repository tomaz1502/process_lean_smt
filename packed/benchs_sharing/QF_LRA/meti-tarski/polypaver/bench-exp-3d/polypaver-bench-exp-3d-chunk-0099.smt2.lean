open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 2)
  let let5 := (Neg.neg (Int.ofNat 1))
  let let6 := (binrel% HMul.hMul let5 skoX)
  let let7 := (binrel% HMul.hMul let5 skoY)
  let let8 := (binrel% HAdd.hAdd let7 let6)
  let let9 := (binrel% HMul.hMul let5 skoZ)
  let let10 := (binrel% HAdd.hAdd let9 let8)
  let let11 := (binrel% GE.ge let10 (Neg.neg let4))
  let let12 := (Rat.ofInt 2)
  let let13 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let14 := (binrel% LE.le let13 let12)
  let let15 := (Neg.neg let2)
  let let16 := (binrel% LT.lt let15 let1)
  let let17 := (binrel% HDiv.hDiv (Int.ofNat 19) let4)
  let let18 := (binrel% HMul.hMul let15 let17)
  let let19 := (binrel% HMul.hMul let2 let12)
  let let20 := (binrel% HAdd.hAdd let19 let18)
  let let21 := (binrel% HMul.hMul let15 let13)
  let let22 := (binrel% HMul.hMul let2 let13)
  let let23 := (binrel% HAdd.hAdd let22 let21)
  let let24 := (binrel% GE.ge let23 let20)
  let let25 := (Not let24)
  let let26 := (binrel% LT.lt let23 let20)
  let let27 := (binrel% HMul.hMul skoY let15)
  let let28 := (Eq let27 let7)
  let let29 := (binrel% GE.ge skoZ let1)
  let let30 := (Rat.ofInt 0)
  let let31 := (binrel% LE.le let30 skoZ)
  let let32 := (binrel% HDiv.hDiv (Rat.ofInt 19) let12)
  let let33 := (Not True)
  let let34 := (binrel% HAdd.hAdd let4 let8)
  let let35 := (binrel% LE.le skoZ let34)
  let let36 := (binrel% LE.le let13 let17)
  let let37 := (Not let36)
  let let38 := (binrel% GT.gt let13 let17)
  let let39 := (binrel% HMul.hMul skoX let15)
  let let40 := (Eq let39 let6)
  let let41 := (binrel% GE.ge let9 let5)
  let let42 := (binrel% LE.le skoZ let2)
  let let43 := (binrel% HAdd.hAdd let39 let27)
  let let44 := (binrel% HAdd.hAdd let12 let43)
  let let45 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let12 let39) let27)
  let let46 := (binrel% HAdd.hAdd let6 let7)
  let let47 := (binrel% HAdd.hAdd let12 let46)
  let let48 := (Neg.neg let17)
  let let49 := (binrel% GE.ge let10 let48)
  let let50 := (binrel% HAdd.hAdd let32 let43)
  let let51 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let32 let39) let27)
  let let52 := (binrel% HAdd.hAdd let17 let8)
  let let53 := (binrel% HAdd.hAdd let17 let46)
  let let54 := (binrel% GE.ge let7 let5)
  let let55 := (binrel% LE.le skoY let2)
  let let56 := (binrel% LE.le skoZ let52)
  let let57 := (binrel% GE.ge let13 let1)
  let let58 := (binrel% LE.le let8 skoZ)
  let let59 := (binrel% GE.ge skoX let1)
  let let60 := (binrel% LE.le let30 skoX)
  let let61 := (binrel% GE.ge skoY let1)
  let let62 := (binrel% LE.le let30 skoY)
  let let63 := (Not let49)
  let let64 := (Not let63)
  let let65 := (binrel% HAdd.hAdd let13 let10)
  let let66 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15) let4))
  let let67 := (binrel% GE.ge let30 let66)
  let let68 := (binrel% LE.le let45 skoZ)
  let let69 := (binrel% LE.le skoZ let45)
  let let70 := (binrel% LE.le skoX let2)
  let let71 := (binrel% LE.le skoZ let51)
  let let72 := (Not let71)
  let let73 := (binrel% LE.le let43 skoZ)
  let let74 := (And let73 (And let72 (And let60 (And let62 (And let31 (And let70 (And let55 (And let42 (And let69 let68)))))))))
  let let75 := (binrel% HAdd.hAdd let12 let48)
  let let76 := (binrel% GE.ge let6 let5)
  let let77 := (binrel% GE.ge let13 let4)
  let let78 := (binrel% LE.le let34 skoZ)
  let let79 := (And let57 (And let63 (And let59 (And let61 (And let29 (And let76 (And let54 (And let41 (And let11 let77)))))))))
  let let80 := (Eq let74 let79)
  let let81 := (Not let11)
  let let82 := (Or let49 let81)
  let let83 := (Or let64 let81)
  let let84 := (binrel% LT.lt let21 let18)
  let let85 := (And let16 let38)
  let let86 := (binrel% LE.le let22 let19)
  let let87 := (And let3 let14)
(Eq let3 True) → (Eq let14 let11) → (Eq let16 True) → (Eq let26 let25) → let28 → (Eq let31 let29) → (Eq let32 let17) → (Eq let33 False) → (Eq let35 let11) → (Eq let38 let37) → let40 → (Eq let15 let15) → (Eq let42 let41) → (Eq let45 let44) → (Eq let22 let13) → (Eq let47 let34) → (Eq let36 let49) → (Eq let51 let50) → (Eq let53 let52) → (Eq let55 let54) → (Eq let18 let48) → (Eq let56 let49) → (Eq let58 let57) → (Eq let60 let59) → (Eq let21 let10) → (Eq let46 let8) → (Eq let62 let61) → (Eq let64 let49) → (Eq let65 let30) → (Eq let67 True) → (Eq let74 let74) → (Eq let75 let66) → (Eq let70 let76) → (Eq let78 let77) → (Eq let19 let12) → let74 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 2)
  let let5 := (Neg.neg (Int.ofNat 1))
  let let6 := (binrel% HMul.hMul let5 skoX)
  let let7 := (binrel% HMul.hMul let5 skoY)
  let let8 := (binrel% HAdd.hAdd let7 let6)
  let let9 := (binrel% HMul.hMul let5 skoZ)
  let let10 := (binrel% HAdd.hAdd let9 let8)
  let let11 := (binrel% GE.ge let10 (Neg.neg let4))
  let let12 := (Rat.ofInt 2)
  let let13 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let14 := (binrel% LE.le let13 let12)
  let let15 := (Neg.neg let2)
  let let16 := (binrel% LT.lt let15 let1)
  let let17 := (binrel% HDiv.hDiv (Int.ofNat 19) let4)
  let let18 := (binrel% HMul.hMul let15 let17)
  let let19 := (binrel% HMul.hMul let2 let12)
  let let20 := (binrel% HAdd.hAdd let19 let18)
  let let21 := (binrel% HMul.hMul let15 let13)
  let let22 := (binrel% HMul.hMul let2 let13)
  let let23 := (binrel% HAdd.hAdd let22 let21)
  let let24 := (binrel% GE.ge let23 let20)
  let let25 := (Not let24)
  let let26 := (binrel% LT.lt let23 let20)
  let let27 := (binrel% HMul.hMul skoY let15)
  let let28 := (Eq let27 let7)
  let let29 := (binrel% GE.ge skoZ let1)
  let let30 := (Rat.ofInt 0)
  let let31 := (binrel% LE.le let30 skoZ)
  let let32 := (binrel% HDiv.hDiv (Rat.ofInt 19) let12)
  let let33 := (Not True)
  let let34 := (binrel% HAdd.hAdd let4 let8)
  let let35 := (binrel% LE.le skoZ let34)
  let let36 := (binrel% LE.le let13 let17)
  let let37 := (Not let36)
  let let38 := (binrel% GT.gt let13 let17)
  let let39 := (binrel% HMul.hMul skoX let15)
  let let40 := (Eq let39 let6)
  let let41 := (binrel% GE.ge let9 let5)
  let let42 := (binrel% LE.le skoZ let2)
  let let43 := (binrel% HAdd.hAdd let39 let27)
  let let44 := (binrel% HAdd.hAdd let12 let43)
  let let45 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let12 let39) let27)
  let let46 := (binrel% HAdd.hAdd let6 let7)
  let let47 := (binrel% HAdd.hAdd let12 let46)
  let let48 := (Neg.neg let17)
  let let49 := (binrel% GE.ge let10 let48)
  let let50 := (binrel% HAdd.hAdd let32 let43)
  let let51 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let32 let39) let27)
  let let52 := (binrel% HAdd.hAdd let17 let8)
  let let53 := (binrel% HAdd.hAdd let17 let46)
  let let54 := (binrel% GE.ge let7 let5)
  let let55 := (binrel% LE.le skoY let2)
  let let56 := (binrel% LE.le skoZ let52)
  let let57 := (binrel% GE.ge let13 let1)
  let let58 := (binrel% LE.le let8 skoZ)
  let let59 := (binrel% GE.ge skoX let1)
  let let60 := (binrel% LE.le let30 skoX)
  let let61 := (binrel% GE.ge skoY let1)
  let let62 := (binrel% LE.le let30 skoY)
  let let63 := (Not let49)
  let let64 := (Not let63)
  let let65 := (binrel% HAdd.hAdd let13 let10)
  let let66 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 15) let4))
  let let67 := (binrel% GE.ge let30 let66)
  let let68 := (binrel% LE.le let45 skoZ)
  let let69 := (binrel% LE.le skoZ let45)
  let let70 := (binrel% LE.le skoX let2)
  let let71 := (binrel% LE.le skoZ let51)
  let let72 := (Not let71)
  let let73 := (binrel% LE.le let43 skoZ)
  let let74 := (And let73 (And let72 (And let60 (And let62 (And let31 (And let70 (And let55 (And let42 (And let69 let68)))))))))
  let let75 := (binrel% HAdd.hAdd let12 let48)
  let let76 := (binrel% GE.ge let6 let5)
  let let77 := (binrel% GE.ge let13 let4)
  let let78 := (binrel% LE.le let34 skoZ)
  let let79 := (And let57 (And let63 (And let59 (And let61 (And let29 (And let76 (And let54 (And let41 (And let11 let77)))))))))
  let let80 := (Eq let74 let79)
  let let81 := (Not let11)
  let let82 := (Or let49 let81)
  let let83 := (Or let64 let81)
  let let84 := (binrel% LT.lt let21 let18)
  let let85 := (And let16 let38)
  let let86 := (binrel% LE.le let22 let19)
  let let87 := (And let3 let14)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let14 let11) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let16 True) => -- EVALUATE
fun lean_r3 : (Eq let26 let25) => -- THEORY_REWRITE_ARITH
fun lean_r4 : let28 => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let31 let29) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let32 let17) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let33 False) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let35 let11) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let38 let37) => -- THEORY_REWRITE_ARITH
fun lean_r10 : let40 => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let15 let15) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let22 let13) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let47 let34) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let36 let49) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let53 let52) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let18 let48) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let56 let49) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let58 let57) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let60 let59) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let21 let10) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let46 let8) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let62 let61) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let64 let49) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let65 let30) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let67 True) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let74 let74) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let75 let66) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let70 let76) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let78 let77) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let19 let12) => -- THEORY_REWRITE_ARITH
fun lean_a35 : let74 => by
have lean_s0 : (Or let64 (Or let81 False)) :=
  (scope (fun lean_a36 : let63 =>
    (scope (fun lean_a37 : let11 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let11 let14) := by timed Eq.symm lean_r1
      have lean_s2 : let14 := by timed eqResolve lean_a37 lean_s1
      have lean_s3 : let87 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let87 let86) := by arithMulPos [let13, let12, let2], 1
      have lean_s5 : let86 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let16 := by timed trueElim lean_r2
      have lean_s7 : (Eq let37 let63) := by timed flipCongrArg lean_r16 [Not]
      have lean_s8 : (Eq let38 let63) := by timed Eq.trans lean_r9 lean_s7
      have lean_s9 : (Eq let63 let38) := by timed Eq.symm lean_s8
      have lean_s10 : let38 := by timed eqResolve lean_a36 lean_s9
      have lean_s11 : let85 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let85 let84) := by arithMulNeg [let13, let17, let15], 2
      have lean_s13 : let84 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let26 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r14 [HAdd.hAdd]
      have lean_s16 : (Eq let23 let65) := by timed congr lean_s15 lean_r24
      have lean_s17 : (Eq let23 let30) := by timed Eq.trans lean_s16 lean_r28
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r34 [HAdd.hAdd]
      have lean_s20 : (Eq let20 let75) := by timed congr lean_s19 lean_r20
      have lean_s21 : (Eq let20 let66) := by timed Eq.trans lean_s20 lean_r31
      have lean_s22 : (Eq let24 let67) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let24 True) := by timed Eq.trans lean_s22 lean_r29
      have lean_s24 : (Eq let25 let33) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let25 False) := by timed Eq.trans lean_s24 lean_r7
      have lean_s26 : (Eq let26 False) := by timed Eq.trans lean_r3 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let63 let11)) := by liftOrNToNeg lean_s0
have lean_s2 : let83 := by timed flipNotAnd lean_s1 [let63, let11]
let lean_s3 := by timed flipCongrArg lean_r27 [Or]
have lean_s4 : (Eq let81 let81) := by timed rfl
have lean_s5 : (Eq let83 let82) := by timed congr lean_s3 lean_s4
have lean_s6 : let82 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
have lean_s8 : (Eq skoX skoX) := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [HMul.hMul]
have lean_s10 : (Eq let39 let39) := by timed congr lean_s9 lean_r11
have lean_s11 : let40 := by timed Eq.trans lean_s10 lean_r10
let lean_s12 := by timed flipCongrArg lean_s11 [HAdd.hAdd]
have lean_s13 : (Eq skoY skoY) := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [HMul.hMul]
have lean_s15 : (Eq let27 let27) := by timed congr lean_s14 lean_r11
have lean_s16 : let28 := by timed Eq.trans lean_s15 lean_r4
have lean_s17 : (Eq let43 let46) := by timed congr lean_s12 lean_s16
have lean_s18 : (Eq let43 let8) := by timed Eq.trans lean_s17 lean_r25
let lean_s19 := by timed flipCongrArg lean_s18 [LE.le]
have lean_s20 : (Eq skoZ skoZ) := by timed rfl
have lean_s21 : (Eq let73 let58) := by timed congr lean_s19 lean_s20
have lean_s22 : (Eq let73 let57) := by timed Eq.trans lean_s21 lean_r22
let lean_s23 := by timed congr lean_s7 lean_s22
let lean_s24 := by timed flipCongrArg lean_s20 [LE.le]
let lean_s25 := by timed congrHAdd lean_s11 lean_s16
have lean_s26 : (Eq let50 let53) := by timed congrHAdd lean_r6 lean_s25
have lean_s27 : (Eq let50 let52) := by timed Eq.trans lean_s26 lean_r18
have lean_s28 : (Eq let51 let52) := by timed Eq.trans lean_r17 lean_s27
have lean_s29 : (Eq let71 let56) := by timed congr lean_s24 lean_s28
have lean_s30 : (Eq let71 let49) := by timed Eq.trans lean_s29 lean_r21
have lean_s31 : (Eq let72 let63) := by timed flipCongrArg lean_s30 [Not]
let lean_s32 := by timed congr lean_s7 lean_s31
let lean_s33 := by timed congr lean_s7 lean_r23
let lean_s34 := by timed congr lean_s7 lean_r26
let lean_s35 := by timed congr lean_s7 lean_r5
let lean_s36 := by timed congr lean_s7 lean_r32
let lean_s37 := by timed congr lean_s7 lean_r19
let lean_s38 := by timed congr lean_s7 lean_r12
let lean_s39 := by timed flipCongrArg lean_s20 [LE.le]
have lean_s40 : (Eq let12 let12) := by timed rfl
let lean_s41 := by timed congrHAdd lean_s11 lean_s16
have lean_s42 : (Eq let44 let47) := by timed congrHAdd lean_s40 lean_s41
have lean_s43 : (Eq let44 let34) := by timed Eq.trans lean_s42 lean_r15
have lean_s44 : (Eq let45 let34) := by timed Eq.trans lean_r13 lean_s43
have lean_s45 : (Eq let69 let35) := by timed congr lean_s39 lean_s44
have lean_s46 : (Eq let69 let11) := by timed Eq.trans lean_s45 lean_r8
let lean_s47 := by timed congr lean_s7 lean_s46
let lean_s48 := by timed flipCongrArg lean_s44 [LE.le]
have lean_s49 : (Eq let68 let78) := by timed congr lean_s48 lean_s20
have lean_s50 : (Eq let68 let77) := by timed Eq.trans lean_s49 lean_r33
let lean_s51 := by timed congr lean_s47 lean_s50
let lean_s52 := by timed congr lean_s38 lean_s51
let lean_s53 := by timed congr lean_s37 lean_s52
let lean_s54 := by timed congr lean_s36 lean_s53
let lean_s55 := by timed congr lean_s35 lean_s54
let lean_s56 := by timed congr lean_s34 lean_s55
let lean_s57 := by timed congr lean_s33 lean_s56
let lean_s58 := by timed congr lean_s32 lean_s57
have lean_s59 : let80 := by timed congr lean_s23 lean_s58
have lean_s60 : let80 := by timed Eq.trans lean_r30 lean_s59
have lean_s61 : let79 := by timed eqResolve lean_a35 lean_s60
have lean_s62 : let11 := by andElim lean_s61, 8
let lean_s63 := by R2 lean_s6, lean_s62, let11, [(- 1), 0]
have lean_s64 : let63 := by andElim lean_s61, 1
exact (show False from by R1 lean_s63, lean_s64, let49, [0, 0])


