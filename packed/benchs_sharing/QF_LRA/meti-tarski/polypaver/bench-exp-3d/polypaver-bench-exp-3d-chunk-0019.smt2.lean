open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (binrel% GE.ge skoX let1)
  let let3 := (Rat.ofInt 0)
  let let4 := (binrel% GE.ge skoX let3)
  let let5 := (binrel% GE.ge skoY let1)
  let let6 := (binrel% GE.ge skoY let3)
  let let7 := (Rat.ofInt 1)
  let let8 := (Neg.neg let7)
  let let9 := (binrel% LT.lt let8 let1)
  let let10 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let11 := (binrel% GE.ge let10 let3)
  let let12 := (Not let11)
  let let13 := (binrel% LT.lt let10 let3)
  let let14 := (Neg.neg (Int.ofNat 1))
  let let15 := (binrel% HMul.hMul let14 skoX)
  let let16 := (binrel% HMul.hMul let14 skoY)
  let let17 := (binrel% HAdd.hAdd let16 let15)
  let let18 := (binrel% HAdd.hAdd let15 let16)
  let let19 := (binrel% GE.ge let16 let14)
  let let20 := (binrel% LE.le skoY let7)
  let let21 := (binrel% HMul.hMul let14 skoZ)
  let let22 := (binrel% GE.ge let21 let14)
  let let23 := (binrel% LE.le skoZ let7)
  let let24 := (binrel% LE.le let3 skoX)
  let let25 := (binrel% LE.le let3 skoY)
  let let26 := (binrel% LE.le let3 skoZ)
  let let27 := (binrel% LE.le skoX let7)
  let let28 := (binrel% HMul.hMul skoY let8)
  let let29 := (binrel% HMul.hMul skoX let8)
  let let30 := (binrel% HAdd.hAdd let29 let28)
  let let31 := (binrel% LE.le let30 skoZ)
  let let32 := (Not let31)
  let let33 := (And let32 (And let23 (And let20 (And let27 (And let26 (And let25 let24))))))
  let let34 := (binrel% GE.ge skoZ let1)
  let let35 := (Eq let28 let16)
  let let36 := (binrel% GE.ge let15 let14)
  let let37 := (binrel% GE.ge let10 let1)
  let let38 := (Not let37)
  let let39 := (Not let38)
  let let40 := (Eq let37 let39)
  let let41 := (Eq let39 let37)
  let let42 := (Not True)
  let let43 := (binrel% HMul.hMul let8 let3)
  let let44 := (binrel% HMul.hMul let7 let10)
  let let45 := (binrel% GT.gt let7 let1)
  let let46 := (Eq let37 let37)
  let let47 := (binrel% HMul.hMul let8 skoZ)
  let let48 := (Eq let29 let15)
  let let49 := (binrel% GE.ge let3 let3)
  let let50 := (binrel% LE.le let17 skoZ)
  let let51 := (binrel% HMul.hMul let7 let3)
  let let52 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let43 let43)))
  let let53 := (binrel% HMul.hMul let8 skoY)
  let let54 := (binrel% HMul.hMul let8 skoX)
  let let55 := (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let53 let47)))
  let let56 := (binrel% GE.ge let55 let52)
  let let57 := (Not let56)
  let let58 := (binrel% LT.lt let55 let52)
  let let59 := (binrel% GE.ge skoZ let3)
  let let60 := (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let3 let3)))
  let let61 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let16 let21)))
  let let62 := (And let38 (And let22 (And let19 (And let36 (And let34 (And let5 let2))))))
  let let63 := (Eq let33 let62)
  let let64 := (Not let2)
  let let65 := (Not let5)
  let let66 := (Not let34)
  let let67 := (Or let66 (Or let65 (Or let64 let37)))
  let let68 := (Or let66 (Or let65 (Or let64 let39)))
  let let69 := (Not let13)
  let let70 := (binrel% LE.le let47 let43)
  let let71 := (And let9 let59)
  let let72 := (binrel% LE.le let53 let43)
  let let73 := (And let9 let6)
  let let74 := (binrel% LE.le let54 let43)
  let let75 := (And let9 let4)
  let let76 := (binrel% LT.lt let44 let51)
  let let77 := (And let45 let13)
(Eq let4 let2) → (Eq let6 let5) → (Eq let9 True) → (Eq let13 let12) → (Eq let18 let17) → (Eq let20 let19) → (Eq let23 let22) → (Eq let33 let33) → (Eq let26 let34) → let35 → (Eq let27 let36) → (Eq let41 let40) → (Eq let42 False) → (Eq let43 let3) → (Eq let44 let10) → (Eq let25 let5) → (Eq let45 True) → (Eq let46 True) → (Eq let47 let21) → let48 → (Eq let49 True) → (Eq let24 let2) → (Eq let50 let37) → (Eq let51 let3) → (Eq let8 let8) → (Eq let58 let57) → let41 → (Eq let54 let15) → (Eq let11 let37) → (Eq let59 let34) → (Eq let60 let3) → (Eq let61 let3) → (Eq let53 let16) → let33 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (binrel% GE.ge skoX let1)
  let let3 := (Rat.ofInt 0)
  let let4 := (binrel% GE.ge skoX let3)
  let let5 := (binrel% GE.ge skoY let1)
  let let6 := (binrel% GE.ge skoY let3)
  let let7 := (Rat.ofInt 1)
  let let8 := (Neg.neg let7)
  let let9 := (binrel% LT.lt let8 let1)
  let let10 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let11 := (binrel% GE.ge let10 let3)
  let let12 := (Not let11)
  let let13 := (binrel% LT.lt let10 let3)
  let let14 := (Neg.neg (Int.ofNat 1))
  let let15 := (binrel% HMul.hMul let14 skoX)
  let let16 := (binrel% HMul.hMul let14 skoY)
  let let17 := (binrel% HAdd.hAdd let16 let15)
  let let18 := (binrel% HAdd.hAdd let15 let16)
  let let19 := (binrel% GE.ge let16 let14)
  let let20 := (binrel% LE.le skoY let7)
  let let21 := (binrel% HMul.hMul let14 skoZ)
  let let22 := (binrel% GE.ge let21 let14)
  let let23 := (binrel% LE.le skoZ let7)
  let let24 := (binrel% LE.le let3 skoX)
  let let25 := (binrel% LE.le let3 skoY)
  let let26 := (binrel% LE.le let3 skoZ)
  let let27 := (binrel% LE.le skoX let7)
  let let28 := (binrel% HMul.hMul skoY let8)
  let let29 := (binrel% HMul.hMul skoX let8)
  let let30 := (binrel% HAdd.hAdd let29 let28)
  let let31 := (binrel% LE.le let30 skoZ)
  let let32 := (Not let31)
  let let33 := (And let32 (And let23 (And let20 (And let27 (And let26 (And let25 let24))))))
  let let34 := (binrel% GE.ge skoZ let1)
  let let35 := (Eq let28 let16)
  let let36 := (binrel% GE.ge let15 let14)
  let let37 := (binrel% GE.ge let10 let1)
  let let38 := (Not let37)
  let let39 := (Not let38)
  let let40 := (Eq let37 let39)
  let let41 := (Eq let39 let37)
  let let42 := (Not True)
  let let43 := (binrel% HMul.hMul let8 let3)
  let let44 := (binrel% HMul.hMul let7 let10)
  let let45 := (binrel% GT.gt let7 let1)
  let let46 := (Eq let37 let37)
  let let47 := (binrel% HMul.hMul let8 skoZ)
  let let48 := (Eq let29 let15)
  let let49 := (binrel% GE.ge let3 let3)
  let let50 := (binrel% LE.le let17 skoZ)
  let let51 := (binrel% HMul.hMul let7 let3)
  let let52 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let43 let43)))
  let let53 := (binrel% HMul.hMul let8 skoY)
  let let54 := (binrel% HMul.hMul let8 skoX)
  let let55 := (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let53 let47)))
  let let56 := (binrel% GE.ge let55 let52)
  let let57 := (Not let56)
  let let58 := (binrel% LT.lt let55 let52)
  let let59 := (binrel% GE.ge skoZ let3)
  let let60 := (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let3 let3)))
  let let61 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let16 let21)))
  let let62 := (And let38 (And let22 (And let19 (And let36 (And let34 (And let5 let2))))))
  let let63 := (Eq let33 let62)
  let let64 := (Not let2)
  let let65 := (Not let5)
  let let66 := (Not let34)
  let let67 := (Or let66 (Or let65 (Or let64 let37)))
  let let68 := (Or let66 (Or let65 (Or let64 let39)))
  let let69 := (Not let13)
  let let70 := (binrel% LE.le let47 let43)
  let let71 := (And let9 let59)
  let let72 := (binrel% LE.le let53 let43)
  let let73 := (And let9 let6)
  let let74 := (binrel% LE.le let54 let43)
  let let75 := (And let9 let4)
  let let76 := (binrel% LT.lt let44 let51)
  let let77 := (And let45 let13)
fun lean_r0 : (Eq let4 let2) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let9 True) => -- EVALUATE
fun lean_r3 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let33 let33) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let26 let34) => -- THEORY_REWRITE_ARITH
fun lean_r9 : let35 => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let27 let36) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let41 let40) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let42 False) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let43 let3) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let44 let10) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let25 let5) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let45 True) => -- EVALUATE
fun lean_r17 : (Eq let46 True) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let47 let21) => -- THEORY_REWRITE_ARITH
fun lean_r19 : let48 => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let49 True) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let24 let2) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let50 let37) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let51 let3) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let8 let8) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let58 let57) => -- THEORY_REWRITE_ARITH
fun lean_r26 : let41 => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let54 let15) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let11 let37) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let59 let34) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let60 let3) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let61 let3) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let53 let16) => -- THEORY_REWRITE_ARITH
fun lean_a33 : let33 => by
have lean_s0 : (Or let66 (Or let65 (Or let64 (Or let39 False)))) :=
  (scope (fun lean_a34 : let34 =>
    (scope (fun lean_a35 : let5 =>
      (scope (fun lean_a36 : let2 =>
        (scope (fun lean_a37 : let38 =>
          have lean_s0 : (Eq let12 let38) := by timed flipCongrArg lean_r28 [Not]
          have lean_s1 : (Eq let13 let38) := by timed Eq.trans lean_r3 lean_s0
          have lean_s2 : (Eq let38 let13) := by timed Eq.symm lean_s1
          have lean_s3 : let13 := by timed eqResolve lean_a37 lean_s2
          have lean_s4 : (Or let69 False) :=
            (scope (fun lean_a38 : let13 =>
              have lean_s4 : let45 := by timed trueElim lean_r16
              have lean_s5 : let77 := by timed And.intro lean_s4 lean_a38
              have lean_s6 : (Implies let77 let76) := by arithMulPos [let10, let3, let7], 0
              have lean_s7 : let76 := by timed modusPonens lean_s5 lean_s6
              have lean_s8 : let9 := by timed trueElim lean_r2
              have lean_s9 : (Eq let2 let4) := by timed Eq.symm lean_r0
              have lean_s10 : let4 := by timed eqResolve lean_a36 lean_s9
              have lean_s11 : let75 := by timed And.intro lean_s8 lean_s10
              have lean_s12 : (Implies let75 let74) := by arithMulNeg [skoX, let3, let8], 3
              have lean_s13 : let74 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let5 let6) := by timed Eq.symm lean_r1
              have lean_s15 : let6 := by timed eqResolve lean_a35 lean_s14
              have lean_s16 : let73 := by timed And.intro lean_s8 lean_s15
              have lean_s17 : (Implies let73 let72) := by arithMulNeg [skoY, let3, let8], 3
              have lean_s18 : let72 := by timed modusPonens lean_s16 lean_s17
              have lean_s19 : (Eq let34 let59) := by timed Eq.symm lean_r29
              have lean_s20 : let59 := by timed eqResolve lean_a34 lean_s19
              have lean_s21 : let71 := by timed And.intro lean_s8 lean_s20
              have lean_s22 : (Implies let71 let70) := by arithMulNeg [skoZ, let3, let8], 3
              have lean_s23 : let70 := by timed modusPonens lean_s21 lean_s22
              have lean_s24 : let58 := by sumBounds [lean_s7, lean_s13, lean_s18, lean_s23]
              let lean_s25 := by timed congrHAdd lean_r32 lean_r18
              let lean_s26 := by timed congrHAdd lean_r27 lean_s25
              have lean_s27 : (Eq let55 let61) := by timed congrHAdd lean_r14 lean_s26
              have lean_s28 : (Eq let55 let3) := by timed Eq.trans lean_s27 lean_r31
              let lean_s29 := by timed flipCongrArg lean_s28 [GE.ge]
              let lean_s30 := by timed congrHAdd lean_r13 lean_r13
              let lean_s31 := by timed congrHAdd lean_r13 lean_s30
              have lean_s32 : (Eq let52 let60) := by timed congrHAdd lean_r23 lean_s31
              have lean_s33 : (Eq let52 let3) := by timed Eq.trans lean_s32 lean_r30
              have lean_s34 : (Eq let56 let49) := by timed congr lean_s29 lean_s33
              have lean_s35 : (Eq let56 True) := by timed Eq.trans lean_s34 lean_r20
              have lean_s36 : (Eq let57 let42) := by timed flipCongrArg lean_s35 [Not]
              have lean_s37 : (Eq let57 False) := by timed Eq.trans lean_s36 lean_r12
              have lean_s38 : (Eq let58 False) := by timed Eq.trans lean_r25 lean_s37
              show False from by timed eqResolve lean_s24 lean_s38
            ))
          have lean_s5 : let69 := by liftOrNToNeg lean_s4
          have lean_s6 : (Eq let69 let39) := by timed flipCongrArg lean_s1 [Not]
          have lean_s7 : (Eq let69 let37) := by timed Eq.trans lean_s6 lean_r26
          have lean_s8 : (Eq let37 let11) := by timed Eq.symm lean_r28
          have lean_s9 : (Eq let69 let11) := by timed Eq.trans lean_s7 lean_s8
          have lean_s10 : let11 := by timed eqResolve lean_s5 lean_s9
          have lean_s11 : (Eq let37 let69) := by timed Eq.symm lean_s7
          have lean_s12 : (Eq let11 let69) := by timed Eq.trans lean_r28 lean_s11
          have lean_s13 : let69 := by timed eqResolve lean_s10 lean_s12
          show False from by timed contradiction lean_s3 lean_s13
  ))))))))
have lean_s1 : (Not (And let34 (And let5 (And let2 let38)))) := by liftOrNToNeg lean_s0
have lean_s2 : let68 := by timed flipNotAnd lean_s1 [let34, let5, let2, let38]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let66 let66) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let65 let65) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : (Eq let64 let64) := by timed rfl
let lean_s9 := by timed congr lean_s3 lean_s8
have lean_s10 : let46 := by timed rfl
let lean_s11 := by timed flipCongrArg lean_s10 [Eq]
have lean_s12 : (Eq let40 let46) := by timed congr lean_s11 lean_r26
have lean_s13 : (Eq let40 True) := by timed Eq.trans lean_s12 lean_r17
have lean_s14 : (Eq let41 True) := by timed Eq.trans lean_r11 lean_s13
have lean_s15 : let41 := by timed trueElim lean_s14
let lean_s16 := by timed congr lean_s9 lean_s15
let lean_s17 := by timed congr lean_s7 lean_s16
have lean_s18 : (Eq let68 let67) := by timed congr lean_s5 lean_s17
have lean_s19 : let67 := by timed eqResolve lean_s2 lean_s18
have lean_s20 : (Or let37 (Or let66 (Or let65 let64))) := by permutateOr lean_s19, [3, 0, 1, 2], (- 1)
have lean_s21 : (Eq And And) := by timed rfl
have lean_s22 : (Eq skoX skoX) := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [HMul.hMul]
have lean_s24 : (Eq let29 let29) := by timed congr lean_s23 lean_r24
have lean_s25 : let48 := by timed Eq.trans lean_s24 lean_r19
let lean_s26 := by timed flipCongrArg lean_s25 [HAdd.hAdd]
have lean_s27 : (Eq skoY skoY) := by timed rfl
let lean_s28 := by timed flipCongrArg lean_s27 [HMul.hMul]
have lean_s29 : (Eq let28 let28) := by timed congr lean_s28 lean_r24
have lean_s30 : let35 := by timed Eq.trans lean_s29 lean_r9
have lean_s31 : (Eq let30 let18) := by timed congr lean_s26 lean_s30
have lean_s32 : (Eq let30 let17) := by timed Eq.trans lean_s31 lean_r4
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq skoZ skoZ) := by timed rfl
have lean_s35 : (Eq let31 let50) := by timed congr lean_s33 lean_s34
have lean_s36 : (Eq let31 let37) := by timed Eq.trans lean_s35 lean_r22
have lean_s37 : (Eq let32 let38) := by timed flipCongrArg lean_s36 [Not]
let lean_s38 := by timed congr lean_s21 lean_s37
let lean_s39 := by timed congr lean_s21 lean_r6
let lean_s40 := by timed congr lean_s21 lean_r5
let lean_s41 := by timed congr lean_s21 lean_r10
let lean_s42 := by timed congr lean_s21 lean_r8
let lean_s43 := by timed congr lean_s21 lean_r15
let lean_s44 := by timed congr lean_s43 lean_r21
let lean_s45 := by timed congr lean_s42 lean_s44
let lean_s46 := by timed congr lean_s41 lean_s45
let lean_s47 := by timed congr lean_s40 lean_s46
let lean_s48 := by timed congr lean_s39 lean_s47
have lean_s49 : let63 := by timed congr lean_s38 lean_s48
have lean_s50 : let63 := by timed Eq.trans lean_r7 lean_s49
have lean_s51 : let62 := by timed eqResolve lean_a33 lean_s50
have lean_s52 : let2 := by andElim lean_s51, 6
let lean_s53 := by R2 lean_s20, lean_s52, let2, [(- 1), 0]
have lean_s54 : let5 := by andElim lean_s51, 5
let lean_s55 := by R2 lean_s53, lean_s54, let5, [(- 1), 0]
have lean_s56 : let34 := by andElim lean_s51, 4
let lean_s57 := by R2 lean_s55, lean_s56, let34, [(- 1), 0]
have lean_s58 : let38 := by andElim lean_s51, 0
exact (show False from by R1 lean_s57, lean_s58, let37, [0, 0])


