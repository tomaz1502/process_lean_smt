open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Neg.neg (Int.ofNat 1))
  let let3 := (binrel% HMul.hMul let2 skoZ)
  let let4 := (binrel% HMul.hMul let2 skoX)
  let let5 := (binrel% HMul.hMul let2 skoY)
  let let6 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let4 let3))
  let let7 := (binrel% GE.ge let6 let1)
  let let8 := (Rat.ofInt 0)
  let let9 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let10 := (binrel% LE.le let9 let8)
  let let11 := (Rat.ofInt 1)
  let let12 := (Neg.neg let11)
  let let13 := (binrel% LT.lt let12 let1)
  let let14 := (binrel% HAdd.hAdd let9 let6)
  let let15 := (binrel% HMul.hMul let11 let8)
  let let16 := (Rat.ofInt 2)
  let let17 := (Neg.neg let16)
  let let18 := (binrel% HMul.hMul let12 let16)
  let let19 := (binrel% GT.gt let11 let1)
  let let20 := (binrel% HAdd.hAdd let8 let17)
  let let21 := (binrel% LE.le let8 let17)
  let let22 := (Int.ofNat 2)
  let let23 := (binrel% GE.ge let9 let22)
  let let24 := (binrel% HAdd.hAdd let5 let4)
  let let25 := (binrel% HAdd.hAdd let22 let24)
  let let26 := (binrel% LE.le let25 skoZ)
  let let27 := (binrel% GE.ge let9 let16)
  let let28 := (binrel% GE.ge skoY let1)
  let let29 := (binrel% LE.le let8 skoY)
  let let30 := (binrel% HMul.hMul let11 let9)
  let let31 := (binrel% HAdd.hAdd let4 let5)
  let let32 := (binrel% HAdd.hAdd let16 let31)
  let let33 := (binrel% HMul.hMul let12 let9)
  let let34 := (binrel% LE.le skoZ let24)
  let let35 := (binrel% HMul.hMul skoY let12)
  let let36 := (binrel% HMul.hMul skoX let12)
  let let37 := (binrel% HAdd.hAdd let36 let35)
  let let38 := (binrel% HAdd.hAdd let16 let37)
  let let39 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let16 let36) let35)
  let let40 := (binrel% GE.ge let3 let2)
  let let41 := (binrel% LE.le skoZ let11)
  let let42 := (Eq let36 let4)
  let let43 := (binrel% GE.ge let6 (Neg.neg let22))
  let let44 := (binrel% LE.le skoZ let25)
  let let45 := (binrel% GE.ge skoZ let1)
  let let46 := (binrel% LE.le let8 skoZ)
  let let47 := (binrel% LE.le let39 skoZ)
  let let48 := (binrel% LE.le skoZ let39)
  let let49 := (binrel% LE.le skoY let11)
  let let50 := (binrel% LE.le skoX let11)
  let let51 := (binrel% LE.le let8 skoX)
  let let52 := (binrel% LE.le skoZ let37)
  let let53 := (And let52 (And let51 (And let29 (And let46 (And let50 (And let49 (And let41 (And let48 let47))))))))
  let let54 := (Eq let35 let5)
  let let55 := (binrel% GE.ge let5 let2)
  let let56 := (binrel% GE.ge let4 let2)
  let let57 := (binrel% GE.ge skoX let1)
  let let58 := (And let7 (And let57 (And let28 (And let45 (And let56 (And let55 (And let40 (And let43 let23))))))))
  let let59 := (Eq let53 let58)
  let let60 := (Not let23)
  let let61 := (Not let7)
  let let62 := (binrel% HAdd.hAdd let15 let18)
  let let63 := (binrel% HAdd.hAdd let30 let33)
  let let64 := (binrel% LE.le let63 let62)
  let let65 := (binrel% LE.le let33 let18)
  let let66 := (And let13 let27)
  let let67 := (binrel% LE.le let30 let15)
  let let68 := (And let19 let10)
(Eq let10 let7) → (Eq let13 True) → (Eq let14 let8) → (Eq let15 let8) → (Eq let18 let17) → (Eq let19 True) → (Eq let20 let17) → (Eq let21 False) → (Eq let26 let23) → (Eq let27 let23) → (Eq let29 let28) → (Eq let30 let9) → (Eq let32 let25) → (Eq let33 let6) → (Eq let34 let7) → (Eq let39 let38) → (Eq let41 let40) → (Eq let12 let12) → let42 → (Eq let31 let24) → (Eq let44 let43) → (Eq let46 let45) → (Eq let53 let53) → let54 → (Eq let49 let55) → (Eq let50 let56) → (Eq let51 let57) → let53 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Neg.neg (Int.ofNat 1))
  let let3 := (binrel% HMul.hMul let2 skoZ)
  let let4 := (binrel% HMul.hMul let2 skoX)
  let let5 := (binrel% HMul.hMul let2 skoY)
  let let6 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let4 let3))
  let let7 := (binrel% GE.ge let6 let1)
  let let8 := (Rat.ofInt 0)
  let let9 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let10 := (binrel% LE.le let9 let8)
  let let11 := (Rat.ofInt 1)
  let let12 := (Neg.neg let11)
  let let13 := (binrel% LT.lt let12 let1)
  let let14 := (binrel% HAdd.hAdd let9 let6)
  let let15 := (binrel% HMul.hMul let11 let8)
  let let16 := (Rat.ofInt 2)
  let let17 := (Neg.neg let16)
  let let18 := (binrel% HMul.hMul let12 let16)
  let let19 := (binrel% GT.gt let11 let1)
  let let20 := (binrel% HAdd.hAdd let8 let17)
  let let21 := (binrel% LE.le let8 let17)
  let let22 := (Int.ofNat 2)
  let let23 := (binrel% GE.ge let9 let22)
  let let24 := (binrel% HAdd.hAdd let5 let4)
  let let25 := (binrel% HAdd.hAdd let22 let24)
  let let26 := (binrel% LE.le let25 skoZ)
  let let27 := (binrel% GE.ge let9 let16)
  let let28 := (binrel% GE.ge skoY let1)
  let let29 := (binrel% LE.le let8 skoY)
  let let30 := (binrel% HMul.hMul let11 let9)
  let let31 := (binrel% HAdd.hAdd let4 let5)
  let let32 := (binrel% HAdd.hAdd let16 let31)
  let let33 := (binrel% HMul.hMul let12 let9)
  let let34 := (binrel% LE.le skoZ let24)
  let let35 := (binrel% HMul.hMul skoY let12)
  let let36 := (binrel% HMul.hMul skoX let12)
  let let37 := (binrel% HAdd.hAdd let36 let35)
  let let38 := (binrel% HAdd.hAdd let16 let37)
  let let39 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let16 let36) let35)
  let let40 := (binrel% GE.ge let3 let2)
  let let41 := (binrel% LE.le skoZ let11)
  let let42 := (Eq let36 let4)
  let let43 := (binrel% GE.ge let6 (Neg.neg let22))
  let let44 := (binrel% LE.le skoZ let25)
  let let45 := (binrel% GE.ge skoZ let1)
  let let46 := (binrel% LE.le let8 skoZ)
  let let47 := (binrel% LE.le let39 skoZ)
  let let48 := (binrel% LE.le skoZ let39)
  let let49 := (binrel% LE.le skoY let11)
  let let50 := (binrel% LE.le skoX let11)
  let let51 := (binrel% LE.le let8 skoX)
  let let52 := (binrel% LE.le skoZ let37)
  let let53 := (And let52 (And let51 (And let29 (And let46 (And let50 (And let49 (And let41 (And let48 let47))))))))
  let let54 := (Eq let35 let5)
  let let55 := (binrel% GE.ge let5 let2)
  let let56 := (binrel% GE.ge let4 let2)
  let let57 := (binrel% GE.ge skoX let1)
  let let58 := (And let7 (And let57 (And let28 (And let45 (And let56 (And let55 (And let40 (And let43 let23))))))))
  let let59 := (Eq let53 let58)
  let let60 := (Not let23)
  let let61 := (Not let7)
  let let62 := (binrel% HAdd.hAdd let15 let18)
  let let63 := (binrel% HAdd.hAdd let30 let33)
  let let64 := (binrel% LE.le let63 let62)
  let let65 := (binrel% LE.le let33 let18)
  let let66 := (And let13 let27)
  let let67 := (binrel% LE.le let30 let15)
  let let68 := (And let19 let10)
fun lean_r0 : (Eq let10 let7) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let13 True) => -- EVALUATE
fun lean_r2 : (Eq let14 let8) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let15 let8) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let19 True) => -- EVALUATE
fun lean_r6 : (Eq let20 let17) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let21 False) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let26 let23) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let27 let23) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let30 let9) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let32 let25) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let33 let6) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let34 let7) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let12 let12) => -- THEORY_REWRITE_ARITH
fun lean_r18 : let42 => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let31 let24) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let46 let45) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let53 let53) => -- THEORY_REWRITE_BOOL
fun lean_r23 : let54 => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let49 let55) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let50 let56) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let51 let57) => -- THEORY_REWRITE_ARITH
fun lean_a27 : let53 => by
have lean_s0 : (Or let61 (Or let60 False)) :=
  (scope (fun lean_a28 : let7 =>
    (scope (fun lean_a29 : let23 =>
      have lean_s0 : let19 := by timed trueElim lean_r5
      have lean_s1 : (Eq let7 let10) := by timed Eq.symm lean_r0
      have lean_s2 : let10 := by timed eqResolve lean_a28 lean_s1
      have lean_s3 : let68 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let68 let67) := by arithMulPos [let9, let8, let11], 1
      have lean_s5 : let67 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let13 := by timed trueElim lean_r1
      have lean_s7 : (Eq let23 let27) := by timed Eq.symm lean_r9
      have lean_s8 : let27 := by timed eqResolve lean_a29 lean_s7
      have lean_s9 : let66 := by timed And.intro lean_s6 lean_s8
      have lean_s10 : (Implies let66 let65) := by arithMulNeg [let9, let16, let12], 3
      have lean_s11 : let65 := by timed modusPonens lean_s9 lean_s10
      have lean_s12 : let64 := by sumBounds [lean_s5, lean_s11]
      let lean_s13 := by timed flipCongrArg lean_r11 [HAdd.hAdd]
      have lean_s14 : (Eq let63 let14) := by timed congr lean_s13 lean_r13
      have lean_s15 : (Eq let63 let8) := by timed Eq.trans lean_s14 lean_r2
      let lean_s16 := by timed flipCongrArg lean_s15 [LE.le]
      let lean_s17 := by timed flipCongrArg lean_r3 [HAdd.hAdd]
      have lean_s18 : (Eq let62 let20) := by timed congr lean_s17 lean_r4
      have lean_s19 : (Eq let62 let17) := by timed Eq.trans lean_s18 lean_r6
      have lean_s20 : (Eq let64 let21) := by timed congr lean_s16 lean_s19
      have lean_s21 : (Eq let64 False) := by timed Eq.trans lean_s20 lean_r7
      show False from by timed eqResolve lean_s12 lean_s21
  ))))
have lean_s1 : (Not (And let7 let23)) := by liftOrNToNeg lean_s0
have lean_s2 : (Or let61 let60) := by timed flipNotAnd lean_s1 [let7, let23]
have lean_s3 : (Eq And And) := by timed rfl
have lean_s4 : (Eq skoZ skoZ) := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [LE.le]
have lean_s6 : (Eq skoX skoX) := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [HMul.hMul]
have lean_s8 : (Eq let36 let36) := by timed congr lean_s7 lean_r17
have lean_s9 : let42 := by timed Eq.trans lean_s8 lean_r18
let lean_s10 := by timed flipCongrArg lean_s9 [HAdd.hAdd]
have lean_s11 : (Eq skoY skoY) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [HMul.hMul]
have lean_s13 : (Eq let35 let35) := by timed congr lean_s12 lean_r17
have lean_s14 : let54 := by timed Eq.trans lean_s13 lean_r23
have lean_s15 : (Eq let37 let31) := by timed congr lean_s10 lean_s14
have lean_s16 : (Eq let37 let24) := by timed Eq.trans lean_s15 lean_r19
have lean_s17 : (Eq let52 let34) := by timed congr lean_s5 lean_s16
have lean_s18 : (Eq let52 let7) := by timed Eq.trans lean_s17 lean_r14
let lean_s19 := by timed congr lean_s3 lean_s18
let lean_s20 := by timed congr lean_s3 lean_r26
let lean_s21 := by timed congr lean_s3 lean_r10
let lean_s22 := by timed congr lean_s3 lean_r21
let lean_s23 := by timed congr lean_s3 lean_r25
let lean_s24 := by timed congr lean_s3 lean_r24
let lean_s25 := by timed congr lean_s3 lean_r16
let lean_s26 := by timed flipCongrArg lean_s4 [LE.le]
have lean_s27 : (Eq let16 let16) := by timed rfl
let lean_s28 := by timed congrHAdd lean_s9 lean_s14
have lean_s29 : (Eq let38 let32) := by timed congrHAdd lean_s27 lean_s28
have lean_s30 : (Eq let38 let25) := by timed Eq.trans lean_s29 lean_r12
have lean_s31 : (Eq let39 let25) := by timed Eq.trans lean_r15 lean_s30
have lean_s32 : (Eq let48 let44) := by timed congr lean_s26 lean_s31
have lean_s33 : (Eq let48 let43) := by timed Eq.trans lean_s32 lean_r20
let lean_s34 := by timed congr lean_s3 lean_s33
let lean_s35 := by timed flipCongrArg lean_s31 [LE.le]
have lean_s36 : (Eq let47 let26) := by timed congr lean_s35 lean_s4
have lean_s37 : (Eq let47 let23) := by timed Eq.trans lean_s36 lean_r8
let lean_s38 := by timed congr lean_s34 lean_s37
let lean_s39 := by timed congr lean_s25 lean_s38
let lean_s40 := by timed congr lean_s24 lean_s39
let lean_s41 := by timed congr lean_s23 lean_s40
let lean_s42 := by timed congr lean_s22 lean_s41
let lean_s43 := by timed congr lean_s21 lean_s42
let lean_s44 := by timed congr lean_s20 lean_s43
have lean_s45 : let59 := by timed congr lean_s19 lean_s44
have lean_s46 : let59 := by timed Eq.trans lean_r22 lean_s45
have lean_s47 : let58 := by timed eqResolve lean_a27 lean_s46
have lean_s48 : let23 := by andElim lean_s47, 8
let lean_s49 := by R2 lean_s2, lean_s48, let23, [(- 1), 0]
have lean_s50 : let7 := by andElim lean_s47, 0
exact (show False from by R2 lean_s49, lean_s50, let7, [0, 0])


