open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 2)
  let let5 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoZ skoX)) let4)
  let let6 := (Neg.neg (Int.ofNat 1))
  let let7 := (binrel% HMul.hMul let6 skoX)
  let let8 := (binrel% HMul.hMul let6 skoY)
  let let9 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let8 let7))
  let let10 := (binrel% LE.le let9 skoZ)
  let let11 := (Neg.neg let2)
  let let12 := (binrel% HMul.hMul skoX let11)
  let let13 := (Eq let12 let7)
  let let14 := (binrel% HMul.hMul skoY let11)
  let let15 := (Eq let14 let8)
  let let16 := (Rat.ofInt 2)
  let let17 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let12 let14))
  let let18 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let16 let12) let14)
  let let19 := (Rat.ofInt 0)
  let let20 := (binrel% HAdd.hAdd skoY let8)
  let let21 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let7 let8))
  let let22 := (binrel% HMul.hMul let6 skoZ)
  let let23 := (binrel% GE.ge let22 let6)
  let let24 := (binrel% LE.le skoZ let2)
  let let25 := (binrel% HMul.hMul let2 skoY)
  let let26 := (binrel% GE.ge let8 let6)
  let let27 := (binrel% LE.le skoY let2)
  let let28 := (binrel% GE.ge skoY let6)
  let let29 := (Not let28)
  let let30 := (Not let29)
  let let31 := (binrel% HMul.hMul let11 skoY)
  let let32 := (binrel% HAdd.hAdd let11 let19)
  let let33 := (binrel% GE.ge let7 let6)
  let let34 := (binrel% LE.le skoX let2)
  let let35 := (binrel% LT.lt let11 let1)
  let let36 := (binrel% GE.ge skoZ let1)
  let let37 := (binrel% LE.le let19 skoZ)
  let let38 := (binrel% GE.ge skoY let1)
  let let39 := (binrel% LE.le let19 skoY)
  let let40 := (binrel% HMul.hMul let2 let11)
  let let41 := (binrel% GE.ge skoX let1)
  let let42 := (binrel% LE.le let19 skoX)
  let let43 := (binrel% HMul.hMul let11 let19)
  let let44 := (binrel% LE.le skoZ let18)
  let let45 := (binrel% LE.le let18 skoZ)
  let let46 := (binrel% LE.le let11 skoY)
  let let47 := (Not let46)
  let let48 := (And let47 (And let45 (And let44 (And let24 (And let27 (And let34 (And let37 (And let39 let42))))))))
  let let49 := (binrel% GE.ge skoY let11)
  let let50 := (Not let49)
  let let51 := (binrel% LT.lt skoY let11)
  let let52 := (binrel% GE.ge (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let22 let7)) (Neg.neg let4))
  let let53 := (binrel% LE.le skoZ let9)
  let let54 := (Eq let46 let28)
  let let55 := (Not True)
  let let56 := (binrel% GE.ge let19 let11)
  let let57 := (binrel% HAdd.hAdd let40 let43)
  let let58 := (binrel% HAdd.hAdd let25 let31)
  let let59 := (binrel% GE.ge let58 let57)
  let let60 := (Not let59)
  let let61 := (binrel% LT.lt let58 let57)
  let let62 := (binrel% GE.ge skoY let19)
  let let63 := (And let29 (And let5 (And let52 (And let23 (And let26 (And let33 (And let36 (And let38 let41))))))))
  let let64 := (Eq let48 let63)
  let let65 := (Not let38)
  let let66 := (Or let28 let65)
  let let67 := (Or let30 let65)
  let let68 := (binrel% LE.le let31 let43)
  let let69 := (And let35 let62)
  let let70 := (binrel% LT.lt let25 let40)
  let let71 := (And let3 let51)
(Eq let3 True) → (Eq let10 let5) → let13 → (Eq let11 let11) → let15 → (Eq let18 let17) → (Eq let20 let19) → (Eq let21 let9) → (Eq let24 let23) → (Eq let25 skoY) → (Eq let27 let26) → (Eq let30 let28) → (Eq let31 let8) → (Eq let32 let11) → (Eq let34 let33) → (Eq let35 True) → (Eq let37 let36) → (Eq let39 let38) → (Eq let40 let11) → (Eq let42 let41) → (Eq let43 let19) → (Eq let48 let48) → (Eq let51 let50) → (Eq let53 let52) → let54 → (Eq let55 False) → (Eq let56 True) → (Eq let61 let60) → (Eq let62 let38) → (Eq let49 let28) → let48 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 2)
  let let5 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoZ skoX)) let4)
  let let6 := (Neg.neg (Int.ofNat 1))
  let let7 := (binrel% HMul.hMul let6 skoX)
  let let8 := (binrel% HMul.hMul let6 skoY)
  let let9 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let8 let7))
  let let10 := (binrel% LE.le let9 skoZ)
  let let11 := (Neg.neg let2)
  let let12 := (binrel% HMul.hMul skoX let11)
  let let13 := (Eq let12 let7)
  let let14 := (binrel% HMul.hMul skoY let11)
  let let15 := (Eq let14 let8)
  let let16 := (Rat.ofInt 2)
  let let17 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let12 let14))
  let let18 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let16 let12) let14)
  let let19 := (Rat.ofInt 0)
  let let20 := (binrel% HAdd.hAdd skoY let8)
  let let21 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let7 let8))
  let let22 := (binrel% HMul.hMul let6 skoZ)
  let let23 := (binrel% GE.ge let22 let6)
  let let24 := (binrel% LE.le skoZ let2)
  let let25 := (binrel% HMul.hMul let2 skoY)
  let let26 := (binrel% GE.ge let8 let6)
  let let27 := (binrel% LE.le skoY let2)
  let let28 := (binrel% GE.ge skoY let6)
  let let29 := (Not let28)
  let let30 := (Not let29)
  let let31 := (binrel% HMul.hMul let11 skoY)
  let let32 := (binrel% HAdd.hAdd let11 let19)
  let let33 := (binrel% GE.ge let7 let6)
  let let34 := (binrel% LE.le skoX let2)
  let let35 := (binrel% LT.lt let11 let1)
  let let36 := (binrel% GE.ge skoZ let1)
  let let37 := (binrel% LE.le let19 skoZ)
  let let38 := (binrel% GE.ge skoY let1)
  let let39 := (binrel% LE.le let19 skoY)
  let let40 := (binrel% HMul.hMul let2 let11)
  let let41 := (binrel% GE.ge skoX let1)
  let let42 := (binrel% LE.le let19 skoX)
  let let43 := (binrel% HMul.hMul let11 let19)
  let let44 := (binrel% LE.le skoZ let18)
  let let45 := (binrel% LE.le let18 skoZ)
  let let46 := (binrel% LE.le let11 skoY)
  let let47 := (Not let46)
  let let48 := (And let47 (And let45 (And let44 (And let24 (And let27 (And let34 (And let37 (And let39 let42))))))))
  let let49 := (binrel% GE.ge skoY let11)
  let let50 := (Not let49)
  let let51 := (binrel% LT.lt skoY let11)
  let let52 := (binrel% GE.ge (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let22 let7)) (Neg.neg let4))
  let let53 := (binrel% LE.le skoZ let9)
  let let54 := (Eq let46 let28)
  let let55 := (Not True)
  let let56 := (binrel% GE.ge let19 let11)
  let let57 := (binrel% HAdd.hAdd let40 let43)
  let let58 := (binrel% HAdd.hAdd let25 let31)
  let let59 := (binrel% GE.ge let58 let57)
  let let60 := (Not let59)
  let let61 := (binrel% LT.lt let58 let57)
  let let62 := (binrel% GE.ge skoY let19)
  let let63 := (And let29 (And let5 (And let52 (And let23 (And let26 (And let33 (And let36 (And let38 let41))))))))
  let let64 := (Eq let48 let63)
  let let65 := (Not let38)
  let let66 := (Or let28 let65)
  let let67 := (Or let30 let65)
  let let68 := (binrel% LE.le let31 let43)
  let let69 := (And let35 let62)
  let let70 := (binrel% LT.lt let25 let40)
  let let71 := (And let3 let51)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let10 let5) => -- THEORY_REWRITE_ARITH
fun lean_r2 : let13 => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let11 let11) => -- THEORY_REWRITE_ARITH
fun lean_r4 : let15 => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let21 let9) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let25 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let30 let28) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let31 let8) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let32 let11) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let35 True) => -- EVALUATE
fun lean_r16 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let40 let11) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let43 let19) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let48 let48) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let53 let52) => -- THEORY_REWRITE_ARITH
fun lean_r24 : let54 => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let55 False) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let56 True) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let61 let60) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let62 let38) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let49 let28) => -- THEORY_REWRITE_ARITH
fun lean_a30 : let48 => by
have lean_s0 : (Or let30 (Or let65 False)) :=
  (scope (fun lean_a31 : let29 =>
    (scope (fun lean_a32 : let38 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let50 let29) := by timed flipCongrArg lean_r29 [Not]
      have lean_s2 : (Eq let51 let29) := by timed Eq.trans lean_r22 lean_s1
      have lean_s3 : (Eq let29 let51) := by timed Eq.symm lean_s2
      have lean_s4 : let51 := by timed eqResolve lean_a31 lean_s3
      have lean_s5 : let71 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let71 let70) := by arithMulPos [skoY, let11, let2], 0
      have lean_s7 : let70 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let35 := by timed trueElim lean_r15
      have lean_s9 : (Eq let38 let62) := by timed Eq.symm lean_r28
      have lean_s10 : let62 := by timed eqResolve lean_a32 lean_s9
      have lean_s11 : let69 := by timed And.intro lean_s8 lean_s10
      have lean_s12 : (Implies let69 let68) := by arithMulNeg [skoY, let19, let11], 3
      have lean_s13 : let68 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let61 := by sumBounds [lean_s7, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r9 [HAdd.hAdd]
      have lean_s16 : (Eq let58 let20) := by timed congr lean_s15 lean_r12
      have lean_s17 : (Eq let58 let19) := by timed Eq.trans lean_s16 lean_r6
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r18 [HAdd.hAdd]
      have lean_s20 : (Eq let57 let32) := by timed congr lean_s19 lean_r20
      have lean_s21 : (Eq let57 let11) := by timed Eq.trans lean_s20 lean_r13
      have lean_s22 : (Eq let59 let56) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let59 True) := by timed Eq.trans lean_s22 lean_r26
      have lean_s24 : (Eq let60 let55) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let60 False) := by timed Eq.trans lean_s24 lean_r25
      have lean_s26 : (Eq let61 False) := by timed Eq.trans lean_r27 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let29 let38)) := by liftOrNToNeg lean_s0
have lean_s2 : let67 := by timed flipNotAnd lean_s1 [let29, let38]
let lean_s3 := by timed flipCongrArg lean_r11 [Or]
have lean_s4 : (Eq let65 let65) := by timed rfl
have lean_s5 : (Eq let67 let66) := by timed congr lean_s3 lean_s4
have lean_s6 : let66 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
let lean_s8 := by timed flipCongrArg lean_r3 [LE.le]
have lean_s9 : (Eq skoY skoY) := by timed rfl
have lean_s10 : (Eq let46 let46) := by timed congr lean_s8 lean_s9
have lean_s11 : let54 := by timed Eq.trans lean_s10 lean_r24
have lean_s12 : (Eq let47 let29) := by timed flipCongrArg lean_s11 [Not]
let lean_s13 := by timed congr lean_s7 lean_s12
have lean_s14 : (Eq let16 let16) := by timed rfl
have lean_s15 : (Eq skoX skoX) := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [HMul.hMul]
have lean_s17 : (Eq let12 let12) := by timed congr lean_s16 lean_r3
have lean_s18 : let13 := by timed Eq.trans lean_s17 lean_r2
let lean_s19 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s20 : (Eq let14 let14) := by timed congr lean_s19 lean_r3
have lean_s21 : let15 := by timed Eq.trans lean_s20 lean_r4
let lean_s22 := by timed congrHAdd lean_s18 lean_s21
have lean_s23 : (Eq let17 let21) := by timed congrHAdd lean_s14 lean_s22
have lean_s24 : (Eq let17 let9) := by timed Eq.trans lean_s23 lean_r7
have lean_s25 : (Eq let18 let9) := by timed Eq.trans lean_r5 lean_s24
let lean_s26 := by timed flipCongrArg lean_s25 [LE.le]
have lean_s27 : (Eq skoZ skoZ) := by timed rfl
have lean_s28 : (Eq let45 let10) := by timed congr lean_s26 lean_s27
have lean_s29 : (Eq let45 let5) := by timed Eq.trans lean_s28 lean_r1
let lean_s30 := by timed congr lean_s7 lean_s29
let lean_s31 := by timed flipCongrArg lean_s27 [LE.le]
have lean_s32 : (Eq let44 let53) := by timed congr lean_s31 lean_s25
have lean_s33 : (Eq let44 let52) := by timed Eq.trans lean_s32 lean_r23
let lean_s34 := by timed congr lean_s7 lean_s33
let lean_s35 := by timed congr lean_s7 lean_r8
let lean_s36 := by timed congr lean_s7 lean_r10
let lean_s37 := by timed congr lean_s7 lean_r14
let lean_s38 := by timed congr lean_s7 lean_r16
let lean_s39 := by timed congr lean_s7 lean_r17
let lean_s40 := by timed congr lean_s39 lean_r19
let lean_s41 := by timed congr lean_s38 lean_s40
let lean_s42 := by timed congr lean_s37 lean_s41
let lean_s43 := by timed congr lean_s36 lean_s42
let lean_s44 := by timed congr lean_s35 lean_s43
let lean_s45 := by timed congr lean_s34 lean_s44
let lean_s46 := by timed congr lean_s30 lean_s45
have lean_s47 : let64 := by timed congr lean_s13 lean_s46
have lean_s48 : let64 := by timed Eq.trans lean_r21 lean_s47
have lean_s49 : let63 := by timed eqResolve lean_a30 lean_s48
have lean_s50 : let38 := by andElim lean_s49, 7
let lean_s51 := by R2 lean_s6, lean_s50, let38, [(- 1), 0]
have lean_s52 : let29 := by andElim lean_s49, 0
exact (show False from by R1 lean_s51, lean_s52, let28, [0, 0])


