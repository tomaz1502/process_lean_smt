open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Neg.neg let2)
  let let5 := (binrel% LT.lt let4 let1)
  let let6 := (Int.ofNat 2)
  let let7 := (binrel% HDiv.hDiv (Int.ofNat 3) let6)
  let let8 := (binrel% HMul.hMul let2 let7)
  let let9 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let10 := (binrel% HMul.hMul let2 let9)
  let let11 := (Int.ofNat 1)
  let let12 := (Neg.neg (binrel% HDiv.hDiv let11 let6))
  let let13 := (Rat.ofInt 0)
  let let14 := (binrel% LE.le let13 let12)
  let let15 := (binrel% HMul.hMul skoY let4)
  let let16 := (binrel% HMul.hMul skoX let4)
  let let17 := (binrel% HAdd.hAdd let16 let15)
  let let18 := (Rat.ofInt 2)
  let let19 := (binrel% HDiv.hDiv (Rat.ofInt 3) let18)
  let let20 := (binrel% HAdd.hAdd let19 let17)
  let let21 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let19 let16) let15)
  let let22 := (Neg.neg let18)
  let let23 := (binrel% HMul.hMul let4 let18)
  let let24 := (Neg.neg let11)
  let let25 := (binrel% HMul.hMul let24 skoZ)
  let let26 := (binrel% HMul.hMul let24 skoX)
  let let27 := (binrel% HMul.hMul let24 skoY)
  let let28 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let26 let25))
  let let29 := (binrel% GE.ge let28 (Neg.neg let7))
  let let30 := (binrel% HAdd.hAdd let27 let26)
  let let31 := (binrel% HAdd.hAdd let7 let30)
  let let32 := (binrel% LE.le skoZ let31)
  let let33 := (binrel% HMul.hMul let4 let9)
  let let34 := (binrel% GE.ge let9 let6)
  let let35 := (binrel% HAdd.hAdd let6 let30)
  let let36 := (binrel% LE.le let35 skoZ)
  let let37 := (binrel% LE.le let9 let7)
  let let38 := (binrel% HAdd.hAdd let7 let22)
  let let39 := (Eq let16 let26)
  let let40 := (binrel% HAdd.hAdd let26 let27)
  let let41 := (binrel% HAdd.hAdd let18 let40)
  let let42 := (binrel% HAdd.hAdd let18 let17)
  let let43 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let18 let16) let15)
  let let44 := (binrel% HAdd.hAdd let9 let28)
  let let45 := (binrel% HAdd.hAdd let7 let40)
  let let46 := (binrel% GE.ge let25 let24)
  let let47 := (binrel% LE.le skoZ let2)
  let let48 := (binrel% LE.le let43 skoZ)
  let let49 := (binrel% LE.le skoZ let43)
  let let50 := (binrel% LE.le skoY let2)
  let let51 := (binrel% LE.le skoX let2)
  let let52 := (binrel% LE.le let13 skoZ)
  let let53 := (binrel% LE.le let13 skoY)
  let let54 := (binrel% LE.le let13 skoX)
  let let55 := (binrel% LE.le skoZ let21)
  let let56 := (And let55 (And let54 (And let53 (And let52 (And let51 (And let50 (And let47 (And let49 let48))))))))
  let let57 := (binrel% GE.ge let9 let18)
  let let58 := (binrel% GE.ge let28 (Neg.neg let6))
  let let59 := (binrel% LE.le skoZ let35)
  let let60 := (binrel% GE.ge skoZ let1)
  let let61 := (Eq let15 let27)
  let let62 := (binrel% GE.ge let27 let24)
  let let63 := (binrel% GE.ge let26 let24)
  let let64 := (binrel% GE.ge skoY let1)
  let let65 := (binrel% GE.ge skoX let1)
  let let66 := (And let29 (And let65 (And let64 (And let60 (And let63 (And let62 (And let46 (And let58 let34))))))))
  let let67 := (Eq let56 let66)
  let let68 := (Not let34)
  let let69 := (Not let29)
  let let70 := (binrel% HAdd.hAdd let8 let23)
  let let71 := (binrel% HAdd.hAdd let10 let33)
  let let72 := (binrel% LE.le let71 let70)
  let let73 := (binrel% LE.le let33 let23)
  let let74 := (And let5 let57)
  let let75 := (binrel% LE.le let10 let8)
  let let76 := (And let3 let37)
(Eq let3 True) → (Eq let5 True) → (Eq let8 let7) → (Eq let10 let9) → (Eq let14 False) → (Eq let21 let20) → (Eq let23 let22) → (Eq let32 let29) → (Eq let33 let28) → (Eq let19 let7) → (Eq let36 let34) → (Eq let37 let29) → (Eq let38 let12) → let39 → (Eq let41 let35) → (Eq let43 let42) → (Eq let44 let13) → (Eq let45 let31) → (Eq let47 let46) → (Eq let56 let56) → (Eq let4 let4) → (Eq let57 let34) → (Eq let59 let58) → (Eq let52 let60) → let61 → (Eq let50 let62) → (Eq let51 let63) → (Eq let53 let64) → (Eq let54 let65) → let56 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Neg.neg let2)
  let let5 := (binrel% LT.lt let4 let1)
  let let6 := (Int.ofNat 2)
  let let7 := (binrel% HDiv.hDiv (Int.ofNat 3) let6)
  let let8 := (binrel% HMul.hMul let2 let7)
  let let9 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let10 := (binrel% HMul.hMul let2 let9)
  let let11 := (Int.ofNat 1)
  let let12 := (Neg.neg (binrel% HDiv.hDiv let11 let6))
  let let13 := (Rat.ofInt 0)
  let let14 := (binrel% LE.le let13 let12)
  let let15 := (binrel% HMul.hMul skoY let4)
  let let16 := (binrel% HMul.hMul skoX let4)
  let let17 := (binrel% HAdd.hAdd let16 let15)
  let let18 := (Rat.ofInt 2)
  let let19 := (binrel% HDiv.hDiv (Rat.ofInt 3) let18)
  let let20 := (binrel% HAdd.hAdd let19 let17)
  let let21 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let19 let16) let15)
  let let22 := (Neg.neg let18)
  let let23 := (binrel% HMul.hMul let4 let18)
  let let24 := (Neg.neg let11)
  let let25 := (binrel% HMul.hMul let24 skoZ)
  let let26 := (binrel% HMul.hMul let24 skoX)
  let let27 := (binrel% HMul.hMul let24 skoY)
  let let28 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let26 let25))
  let let29 := (binrel% GE.ge let28 (Neg.neg let7))
  let let30 := (binrel% HAdd.hAdd let27 let26)
  let let31 := (binrel% HAdd.hAdd let7 let30)
  let let32 := (binrel% LE.le skoZ let31)
  let let33 := (binrel% HMul.hMul let4 let9)
  let let34 := (binrel% GE.ge let9 let6)
  let let35 := (binrel% HAdd.hAdd let6 let30)
  let let36 := (binrel% LE.le let35 skoZ)
  let let37 := (binrel% LE.le let9 let7)
  let let38 := (binrel% HAdd.hAdd let7 let22)
  let let39 := (Eq let16 let26)
  let let40 := (binrel% HAdd.hAdd let26 let27)
  let let41 := (binrel% HAdd.hAdd let18 let40)
  let let42 := (binrel% HAdd.hAdd let18 let17)
  let let43 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let18 let16) let15)
  let let44 := (binrel% HAdd.hAdd let9 let28)
  let let45 := (binrel% HAdd.hAdd let7 let40)
  let let46 := (binrel% GE.ge let25 let24)
  let let47 := (binrel% LE.le skoZ let2)
  let let48 := (binrel% LE.le let43 skoZ)
  let let49 := (binrel% LE.le skoZ let43)
  let let50 := (binrel% LE.le skoY let2)
  let let51 := (binrel% LE.le skoX let2)
  let let52 := (binrel% LE.le let13 skoZ)
  let let53 := (binrel% LE.le let13 skoY)
  let let54 := (binrel% LE.le let13 skoX)
  let let55 := (binrel% LE.le skoZ let21)
  let let56 := (And let55 (And let54 (And let53 (And let52 (And let51 (And let50 (And let47 (And let49 let48))))))))
  let let57 := (binrel% GE.ge let9 let18)
  let let58 := (binrel% GE.ge let28 (Neg.neg let6))
  let let59 := (binrel% LE.le skoZ let35)
  let let60 := (binrel% GE.ge skoZ let1)
  let let61 := (Eq let15 let27)
  let let62 := (binrel% GE.ge let27 let24)
  let let63 := (binrel% GE.ge let26 let24)
  let let64 := (binrel% GE.ge skoY let1)
  let let65 := (binrel% GE.ge skoX let1)
  let let66 := (And let29 (And let65 (And let64 (And let60 (And let63 (And let62 (And let46 (And let58 let34))))))))
  let let67 := (Eq let56 let66)
  let let68 := (Not let34)
  let let69 := (Not let29)
  let let70 := (binrel% HAdd.hAdd let8 let23)
  let let71 := (binrel% HAdd.hAdd let10 let33)
  let let72 := (binrel% LE.le let71 let70)
  let let73 := (binrel% LE.le let33 let23)
  let let74 := (And let5 let57)
  let let75 := (binrel% LE.le let10 let8)
  let let76 := (And let3 let37)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let5 True) => -- EVALUATE
fun lean_r2 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let14 False) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let32 let29) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let33 let28) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let19 let7) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let36 let34) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let37 let29) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let38 let12) => -- THEORY_REWRITE_ARITH
fun lean_r13 : let39 => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let41 let35) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let43 let42) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let44 let13) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let45 let31) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let47 let46) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let56 let56) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let4 let4) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let57 let34) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let59 let58) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let52 let60) => -- THEORY_REWRITE_ARITH
fun lean_r24 : let61 => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let50 let62) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let51 let63) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let53 let64) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let54 let65) => -- THEORY_REWRITE_ARITH
fun lean_a29 : let56 => by
have lean_s0 : (Or let69 (Or let68 False)) :=
  (scope (fun lean_a30 : let29 =>
    (scope (fun lean_a31 : let34 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let29 let37) := by timed Eq.symm lean_r11
      have lean_s2 : let37 := by timed eqResolve lean_a30 lean_s1
      have lean_s3 : let76 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let76 let75) := by arithMulPos [let9, let7, let2], 1
      have lean_s5 : let75 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let5 := by timed trueElim lean_r1
      have lean_s7 : (Eq let34 let57) := by timed Eq.symm lean_r21
      have lean_s8 : let57 := by timed eqResolve lean_a31 lean_s7
      have lean_s9 : let74 := by timed And.intro lean_s6 lean_s8
      have lean_s10 : (Implies let74 let73) := by arithMulNeg [let9, let18, let4], 3
      have lean_s11 : let73 := by timed modusPonens lean_s9 lean_s10
      have lean_s12 : let72 := by sumBounds [lean_s5, lean_s11]
      let lean_s13 := by timed flipCongrArg lean_r3 [HAdd.hAdd]
      have lean_s14 : (Eq let71 let44) := by timed congr lean_s13 lean_r8
      have lean_s15 : (Eq let71 let13) := by timed Eq.trans lean_s14 lean_r16
      let lean_s16 := by timed flipCongrArg lean_s15 [LE.le]
      let lean_s17 := by timed flipCongrArg lean_r2 [HAdd.hAdd]
      have lean_s18 : (Eq let70 let38) := by timed congr lean_s17 lean_r6
      have lean_s19 : (Eq let70 let12) := by timed Eq.trans lean_s18 lean_r12
      have lean_s20 : (Eq let72 let14) := by timed congr lean_s16 lean_s19
      have lean_s21 : (Eq let72 False) := by timed Eq.trans lean_s20 lean_r4
      show False from by timed eqResolve lean_s12 lean_s21
  ))))
have lean_s1 : (Not (And let29 let34)) := by liftOrNToNeg lean_s0
have lean_s2 : (Or let69 let68) := by timed flipNotAnd lean_s1 [let29, let34]
have lean_s3 : (Eq And And) := by timed rfl
have lean_s4 : (Eq skoZ skoZ) := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [LE.le]
have lean_s6 : (Eq skoX skoX) := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [HMul.hMul]
have lean_s8 : (Eq let16 let16) := by timed congr lean_s7 lean_r20
have lean_s9 : let39 := by timed Eq.trans lean_s8 lean_r13
have lean_s10 : (Eq skoY skoY) := by timed rfl
let lean_s11 := by timed flipCongrArg lean_s10 [HMul.hMul]
have lean_s12 : (Eq let15 let15) := by timed congr lean_s11 lean_r20
have lean_s13 : let61 := by timed Eq.trans lean_s12 lean_r24
let lean_s14 := by timed congrHAdd lean_s9 lean_s13
have lean_s15 : (Eq let20 let45) := by timed congrHAdd lean_r9 lean_s14
have lean_s16 : (Eq let20 let31) := by timed Eq.trans lean_s15 lean_r17
have lean_s17 : (Eq let21 let31) := by timed Eq.trans lean_r5 lean_s16
have lean_s18 : (Eq let55 let32) := by timed congr lean_s5 lean_s17
have lean_s19 : (Eq let55 let29) := by timed Eq.trans lean_s18 lean_r7
let lean_s20 := by timed congr lean_s3 lean_s19
let lean_s21 := by timed congr lean_s3 lean_r28
let lean_s22 := by timed congr lean_s3 lean_r27
let lean_s23 := by timed congr lean_s3 lean_r23
let lean_s24 := by timed congr lean_s3 lean_r26
let lean_s25 := by timed congr lean_s3 lean_r25
let lean_s26 := by timed congr lean_s3 lean_r18
let lean_s27 := by timed flipCongrArg lean_s4 [LE.le]
have lean_s28 : (Eq let18 let18) := by timed rfl
let lean_s29 := by timed congrHAdd lean_s9 lean_s13
have lean_s30 : (Eq let42 let41) := by timed congrHAdd lean_s28 lean_s29
have lean_s31 : (Eq let42 let35) := by timed Eq.trans lean_s30 lean_r14
have lean_s32 : (Eq let43 let35) := by timed Eq.trans lean_r15 lean_s31
have lean_s33 : (Eq let49 let59) := by timed congr lean_s27 lean_s32
have lean_s34 : (Eq let49 let58) := by timed Eq.trans lean_s33 lean_r22
let lean_s35 := by timed congr lean_s3 lean_s34
let lean_s36 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s37 : (Eq let48 let36) := by timed congr lean_s36 lean_s4
have lean_s38 : (Eq let48 let34) := by timed Eq.trans lean_s37 lean_r10
let lean_s39 := by timed congr lean_s35 lean_s38
let lean_s40 := by timed congr lean_s26 lean_s39
let lean_s41 := by timed congr lean_s25 lean_s40
let lean_s42 := by timed congr lean_s24 lean_s41
let lean_s43 := by timed congr lean_s23 lean_s42
let lean_s44 := by timed congr lean_s22 lean_s43
let lean_s45 := by timed congr lean_s21 lean_s44
have lean_s46 : let67 := by timed congr lean_s20 lean_s45
have lean_s47 : let67 := by timed Eq.trans lean_r19 lean_s46
have lean_s48 : let66 := by timed eqResolve lean_a29 lean_s47
have lean_s49 : let34 := by andElim lean_s48, 8
let lean_s50 := by R2 lean_s2, lean_s49, let34, [(- 1), 0]
have lean_s51 : let29 := by andElim lean_s48, 0
exact (show False from by R2 lean_s50, lean_s51, let29, [0, 0])


