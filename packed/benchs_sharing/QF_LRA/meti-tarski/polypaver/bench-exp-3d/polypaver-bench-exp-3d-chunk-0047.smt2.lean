open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 skoY)
  let let7 := (binrel% GE.ge let6 let5)
  let let8 := (binrel% LE.le skoY let2)
  let let9 := (Neg.neg let2)
  let let10 := (binrel% HMul.hMul skoY let9)
  let let11 := (Eq let10 let6)
  let let12 := (Int.ofNat 9)
  let let13 := (binrel% HDiv.hDiv (Int.ofNat 14) let12)
  let let14 := (binrel% HMul.hMul let5 skoZ)
  let let15 := (binrel% HMul.hMul let5 skoX)
  let let16 := (binrel% GE.ge (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let15 let14)) let13)
  let let17 := (Neg.neg let13)
  let let18 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let6 let15))
  let let19 := (binrel% LE.le skoZ let18)
  let let20 := (binrel% HMul.hMul skoX let9)
  let let21 := (Neg.neg (Rat.ofInt 14))
  let let22 := (binrel% HDiv.hDiv let21 (Rat.ofInt 9))
  let let23 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let20 let10))
  let let24 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let22 let20) let10)
  let let25 := (binrel% GE.ge let14 let5)
  let let26 := (binrel% LE.le skoZ let2)
  let let27 := (binrel% GE.ge skoZ let1)
  let let28 := (Rat.ofInt 0)
  let let29 := (binrel% GE.ge skoZ let28)
  let let30 := (Eq let20 let15)
  let let31 := (binrel% GE.ge skoY let1)
  let let32 := (binrel% LE.le let28 skoY)
  let let33 := (binrel% GE.ge let15 let5)
  let let34 := (binrel% LE.le skoX let2)
  let let35 := (binrel% LE.le let28 skoZ)
  let let36 := (binrel% LE.le let28 let17)
  let let37 := (binrel% GE.ge skoX let1)
  let let38 := (binrel% LE.le let28 skoX)
  let let39 := (binrel% LE.le skoZ let24)
  let let40 := (And let39 (And let26 (And let8 (And let34 (And let35 (And let32 let38))))))
  let let41 := (binrel% HMul.hMul let2 let17)
  let let42 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let43 := (binrel% LE.le let42 let17)
  let let44 := (binrel% GE.ge skoY let28)
  let let45 := (binrel% HDiv.hDiv let4 let12)
  let let46 := (binrel% HMul.hMul let21 let45)
  let let47 := (Eq let46 let17)
  let let48 := (Not let43)
  let let49 := (binrel% GT.gt let42 let17)
  let let50 := (Eq let49 let48)
  let let51 := (binrel% HMul.hMul let9 skoY)
  let let52 := (binrel% HAdd.hAdd let15 let6)
  let let53 := (binrel% HAdd.hAdd let17 let52)
  let let54 := (binrel% LT.lt let9 let1)
  let let55 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let28 let28)))
  let let56 := (binrel% GE.ge skoX let28)
  let let57 := (binrel% HMul.hMul let9 let28)
  let let58 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let14 let52))
  let let59 := (binrel% HMul.hMul let9 skoX)
  let let60 := (binrel% HMul.hMul let9 skoZ)
  let let61 := (binrel% HMul.hMul let2 let42)
  let let62 := (And let16 (And let25 (And let7 (And let33 (And let27 (And let31 let37))))))
  let let63 := (Eq let40 let62)
  let let64 := (Not let37)
  let let65 := (Not let31)
  let let66 := (Not let27)
  let let67 := (Not let16)
  let let68 := (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let57 let57)))
  let let69 := (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let59 let51)))
  let let70 := (binrel% LE.le let69 let68)
  let let71 := (binrel% LE.le let51 let57)
  let let72 := (And let54 let44)
  let let73 := (binrel% LE.le let59 let57)
  let let74 := (And let54 let56)
  let let75 := (binrel% LE.le let60 let57)
  let let76 := (And let54 let29)
  let let77 := (binrel% LE.le let61 let41)
  let let78 := (And let3 let43)
(Eq let3 True) → (Eq let8 let7) → (Eq let9 let9) → let11 → (Eq let19 let16) → (Eq let24 let23) → (Eq let26 let25) → (Eq let29 let27) → let30 → (Eq let32 let31) → (Eq let34 let33) → (Eq let35 let27) → (Eq let36 False) → (Eq let38 let37) → (Eq let40 let40) → (Eq let41 let17) → (Eq let43 let16) → (Eq let44 let31) → let47 → let50 → (Eq let51 let6) → (Eq let53 let18) → (Eq let54 True) → (Eq let55 let17) → (Eq let56 let37) → (Eq let57 let28) → (Eq let58 let28) → (Eq let59 let15) → (Eq let21 let21) → (Eq let60 let14) → (Eq let22 let46) → (Eq let61 let42) → let40 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 skoY)
  let let7 := (binrel% GE.ge let6 let5)
  let let8 := (binrel% LE.le skoY let2)
  let let9 := (Neg.neg let2)
  let let10 := (binrel% HMul.hMul skoY let9)
  let let11 := (Eq let10 let6)
  let let12 := (Int.ofNat 9)
  let let13 := (binrel% HDiv.hDiv (Int.ofNat 14) let12)
  let let14 := (binrel% HMul.hMul let5 skoZ)
  let let15 := (binrel% HMul.hMul let5 skoX)
  let let16 := (binrel% GE.ge (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let15 let14)) let13)
  let let17 := (Neg.neg let13)
  let let18 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let6 let15))
  let let19 := (binrel% LE.le skoZ let18)
  let let20 := (binrel% HMul.hMul skoX let9)
  let let21 := (Neg.neg (Rat.ofInt 14))
  let let22 := (binrel% HDiv.hDiv let21 (Rat.ofInt 9))
  let let23 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let20 let10))
  let let24 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let22 let20) let10)
  let let25 := (binrel% GE.ge let14 let5)
  let let26 := (binrel% LE.le skoZ let2)
  let let27 := (binrel% GE.ge skoZ let1)
  let let28 := (Rat.ofInt 0)
  let let29 := (binrel% GE.ge skoZ let28)
  let let30 := (Eq let20 let15)
  let let31 := (binrel% GE.ge skoY let1)
  let let32 := (binrel% LE.le let28 skoY)
  let let33 := (binrel% GE.ge let15 let5)
  let let34 := (binrel% LE.le skoX let2)
  let let35 := (binrel% LE.le let28 skoZ)
  let let36 := (binrel% LE.le let28 let17)
  let let37 := (binrel% GE.ge skoX let1)
  let let38 := (binrel% LE.le let28 skoX)
  let let39 := (binrel% LE.le skoZ let24)
  let let40 := (And let39 (And let26 (And let8 (And let34 (And let35 (And let32 let38))))))
  let let41 := (binrel% HMul.hMul let2 let17)
  let let42 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let43 := (binrel% LE.le let42 let17)
  let let44 := (binrel% GE.ge skoY let28)
  let let45 := (binrel% HDiv.hDiv let4 let12)
  let let46 := (binrel% HMul.hMul let21 let45)
  let let47 := (Eq let46 let17)
  let let48 := (Not let43)
  let let49 := (binrel% GT.gt let42 let17)
  let let50 := (Eq let49 let48)
  let let51 := (binrel% HMul.hMul let9 skoY)
  let let52 := (binrel% HAdd.hAdd let15 let6)
  let let53 := (binrel% HAdd.hAdd let17 let52)
  let let54 := (binrel% LT.lt let9 let1)
  let let55 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let28 let28)))
  let let56 := (binrel% GE.ge skoX let28)
  let let57 := (binrel% HMul.hMul let9 let28)
  let let58 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let14 let52))
  let let59 := (binrel% HMul.hMul let9 skoX)
  let let60 := (binrel% HMul.hMul let9 skoZ)
  let let61 := (binrel% HMul.hMul let2 let42)
  let let62 := (And let16 (And let25 (And let7 (And let33 (And let27 (And let31 let37))))))
  let let63 := (Eq let40 let62)
  let let64 := (Not let37)
  let let65 := (Not let31)
  let let66 := (Not let27)
  let let67 := (Not let16)
  let let68 := (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let57 let57)))
  let let69 := (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let59 let51)))
  let let70 := (binrel% LE.le let69 let68)
  let let71 := (binrel% LE.le let51 let57)
  let let72 := (And let54 let44)
  let let73 := (binrel% LE.le let59 let57)
  let let74 := (And let54 let56)
  let let75 := (binrel% LE.le let60 let57)
  let let76 := (And let54 let29)
  let let77 := (binrel% LE.le let61 let41)
  let let78 := (And let3 let43)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let9 let9) => -- THEORY_REWRITE_ARITH
fun lean_r3 : let11 => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let19 let16) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let26 let25) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let29 let27) => -- THEORY_REWRITE_ARITH
fun lean_r8 : let30 => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let32 let31) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let35 let27) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let36 False) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let38 let37) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let40 let40) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let41 let17) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let43 let16) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let44 let31) => -- THEORY_REWRITE_ARITH
fun lean_r18 : let47 => -- THEORY_REWRITE_ARITH
fun lean_r19 : let50 => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let51 let6) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let53 let18) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let54 True) => -- EVALUATE
fun lean_r23 : (Eq let55 let17) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let56 let37) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let57 let28) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let58 let28) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let59 let15) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let21 let21) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let60 let14) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let22 let46) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let61 let42) => -- THEORY_REWRITE_ARITH
fun lean_a32 : let40 => by
have lean_s0 : (Or let65 (Or let64 (Or let66 (Or let67 False)))) :=
  (scope (fun lean_a33 : let31 =>
    (scope (fun lean_a34 : let37 =>
      (scope (fun lean_a35 : let27 =>
        (scope (fun lean_a36 : let16 =>
          have lean_s0 : (Eq let16 let43) := by timed Eq.symm lean_r16
          have lean_s1 : let43 := by timed eqResolve lean_a36 lean_s0
          have lean_s2 : (Or let48 False) :=
            (scope (fun lean_a37 : let43 =>
              have lean_s2 : let3 := by timed trueElim lean_r0
              have lean_s3 : let78 := by timed And.intro lean_s2 lean_a37
              have lean_s4 : (Implies let78 let77) := by arithMulPos [let42, let17, let2], 1
              have lean_s5 : let77 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let54 := by timed trueElim lean_r22
              have lean_s7 : (Eq let27 let29) := by timed Eq.symm lean_r7
              have lean_s8 : let29 := by timed eqResolve lean_a35 lean_s7
              have lean_s9 : let76 := by timed And.intro lean_s6 lean_s8
              have lean_s10 : (Implies let76 let75) := by arithMulNeg [skoZ, let28, let9], 3
              have lean_s11 : let75 := by timed modusPonens lean_s9 lean_s10
              have lean_s12 : (Eq let37 let56) := by timed Eq.symm lean_r24
              have lean_s13 : let56 := by timed eqResolve lean_a34 lean_s12
              have lean_s14 : let74 := by timed And.intro lean_s6 lean_s13
              have lean_s15 : (Implies let74 let73) := by arithMulNeg [skoX, let28, let9], 3
              have lean_s16 : let73 := by timed modusPonens lean_s14 lean_s15
              have lean_s17 : (Eq let31 let44) := by timed Eq.symm lean_r17
              have lean_s18 : let44 := by timed eqResolve lean_a33 lean_s17
              have lean_s19 : let72 := by timed And.intro lean_s6 lean_s18
              have lean_s20 : (Implies let72 let71) := by arithMulNeg [skoY, let28, let9], 3
              have lean_s21 : let71 := by timed modusPonens lean_s19 lean_s20
              have lean_s22 : let70 := by sumBounds [lean_s5, lean_s11, lean_s16, lean_s21]
              let lean_s23 := by timed congrHAdd lean_r27 lean_r20
              let lean_s24 := by timed congrHAdd lean_r29 lean_s23
              have lean_s25 : (Eq let69 let58) := by timed congrHAdd lean_r31 lean_s24
              have lean_s26 : (Eq let69 let28) := by timed Eq.trans lean_s25 lean_r26
              let lean_s27 := by timed flipCongrArg lean_s26 [LE.le]
              let lean_s28 := by timed congrHAdd lean_r25 lean_r25
              let lean_s29 := by timed congrHAdd lean_r25 lean_s28
              have lean_s30 : (Eq let68 let55) := by timed congrHAdd lean_r15 lean_s29
              have lean_s31 : (Eq let68 let17) := by timed Eq.trans lean_s30 lean_r23
              have lean_s32 : (Eq let70 let36) := by timed congr lean_s27 lean_s31
              have lean_s33 : (Eq let70 False) := by timed Eq.trans lean_s32 lean_r12
              show False from by timed eqResolve lean_s22 lean_s33
            ))
          have lean_s3 : let48 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let48 let67) := by timed flipCongrArg lean_r16 [Not]
          have lean_s5 : (Eq let49 let67) := by timed Eq.trans lean_r19 lean_s4
          have lean_s6 : (Eq let67 let49) := by timed Eq.symm lean_s5
          have lean_s7 : (Eq let48 let49) := by timed Eq.trans lean_s4 lean_s6
          have lean_s8 : let49 := by timed eqResolve lean_s3 lean_s7
          have lean_s9 : (Eq let67 let48) := by timed Eq.symm lean_s4
          have lean_s10 : let50 := by timed Eq.trans lean_s5 lean_s9
          have lean_s11 : let48 := by timed eqResolve lean_s8 lean_s10
          show False from by timed contradiction lean_s1 lean_s11
  ))))))))
have lean_s1 : (Not (And let31 (And let37 (And let27 let16)))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or let65 (Or let64 (Or let66 let67))) := by timed flipNotAnd lean_s1 [let31, let37, let27, let16]
have lean_s3 : (Or let67 (Or let66 (Or let65 let64))) := by permutateOr lean_s2, [3, 2, 0, 1], (- 1)
have lean_s4 : (Eq And And) := by timed rfl
have lean_s5 : (Eq skoZ skoZ) := by timed rfl
let lean_s6 := by timed flipCongrArg lean_s5 [LE.le]
let lean_s7 := by timed flipCongrArg lean_r28 [HMul.hMul]
have lean_s8 : (Eq let45 let45) := by timed rfl
have lean_s9 : (Eq let46 let46) := by timed congr lean_s7 lean_s8
have lean_s10 : let47 := by timed Eq.trans lean_s9 lean_r18
have lean_s11 : (Eq let22 let17) := by timed Eq.trans lean_r30 lean_s10
have lean_s12 : (Eq skoX skoX) := by timed rfl
let lean_s13 := by timed flipCongrArg lean_s12 [HMul.hMul]
have lean_s14 : (Eq let20 let20) := by timed congr lean_s13 lean_r2
have lean_s15 : let30 := by timed Eq.trans lean_s14 lean_r8
have lean_s16 : (Eq skoY skoY) := by timed rfl
let lean_s17 := by timed flipCongrArg lean_s16 [HMul.hMul]
have lean_s18 : (Eq let10 let10) := by timed congr lean_s17 lean_r2
have lean_s19 : let11 := by timed Eq.trans lean_s18 lean_r3
let lean_s20 := by timed congrHAdd lean_s15 lean_s19
have lean_s21 : (Eq let23 let53) := by timed congrHAdd lean_s11 lean_s20
have lean_s22 : (Eq let23 let18) := by timed Eq.trans lean_s21 lean_r21
have lean_s23 : (Eq let24 let18) := by timed Eq.trans lean_r5 lean_s22
have lean_s24 : (Eq let39 let19) := by timed congr lean_s6 lean_s23
have lean_s25 : (Eq let39 let16) := by timed Eq.trans lean_s24 lean_r4
let lean_s26 := by timed congr lean_s4 lean_s25
let lean_s27 := by timed congr lean_s4 lean_r6
let lean_s28 := by timed congr lean_s4 lean_r1
let lean_s29 := by timed congr lean_s4 lean_r10
let lean_s30 := by timed congr lean_s4 lean_r11
let lean_s31 := by timed congr lean_s4 lean_r9
let lean_s32 := by timed congr lean_s31 lean_r13
let lean_s33 := by timed congr lean_s30 lean_s32
let lean_s34 := by timed congr lean_s29 lean_s33
let lean_s35 := by timed congr lean_s28 lean_s34
let lean_s36 := by timed congr lean_s27 lean_s35
have lean_s37 : let63 := by timed congr lean_s26 lean_s36
have lean_s38 : let63 := by timed Eq.trans lean_r14 lean_s37
have lean_s39 : let62 := by timed eqResolve lean_a32 lean_s38
have lean_s40 : let37 := by andElim lean_s39, 6
let lean_s41 := by R2 lean_s3, lean_s40, let37, [(- 1), 0]
have lean_s42 : let31 := by andElim lean_s39, 5
let lean_s43 := by R2 lean_s41, lean_s42, let31, [(- 1), 0]
have lean_s44 : let27 := by andElim lean_s39, 4
let lean_s45 := by R2 lean_s43, lean_s44, let27, [(- 1), 0]
have lean_s46 : let16 := by andElim lean_s39, 0
exact (show False from by R2 lean_s45, lean_s46, let16, [0, 0])


