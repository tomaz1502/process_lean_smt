open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul skoY let2)
  let let4 := (binrel% HMul.hMul skoX let2)
  let let5 := (Rat.ofInt 2)
  let let6 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let5 let4) let3)
  let let7 := (binrel% LE.le let6 skoZ)
  let let8 := (binrel% LE.le skoZ let6)
  let let9 := (binrel% LE.le skoZ let1)
  let let10 := (binrel% LE.le skoY let1)
  let let11 := (binrel% LE.le skoX let1)
  let let12 := (Rat.ofInt 0)
  let let13 := (binrel% LE.le let12 skoZ)
  let let14 := (binrel% LE.le let12 skoY)
  let let15 := (binrel% LE.le let12 skoX)
  let let16 := (binrel% HDiv.hDiv (Rat.ofInt 3) let5)
  let let17 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let16 let4) let3)
  let let18 := (binrel% LE.le skoZ let17)
  let let19 := (Not let18)
  let let20 := (Not let7)
  let let21 := (And let20 (And let19 (And let15 (And let14 (And let13 (And let11 (And let10 (And let9 (And let8 let7)))))))))
  let let22 := (Neg.neg (Int.ofNat 1))
  let let23 := (binrel% HMul.hMul let22 skoX)
  let let24 := (binrel% HMul.hMul let22 skoY)
  let let25 := (binrel% HAdd.hAdd let24 let23)
  let let26 := (Int.ofNat 2)
  let let27 := (binrel% HDiv.hDiv (Int.ofNat 3) let26)
  let let28 := (binrel% HAdd.hAdd let27 let25)
  let let29 := (binrel% HAdd.hAdd let23 let24)
  let let30 := (binrel% HAdd.hAdd let27 let29)
  let let31 := (binrel% HMul.hMul let22 skoZ)
  let let32 := (binrel% HAdd.hAdd let31 let25)
  let let33 := (binrel% GE.ge let32 (Neg.neg let27))
  let let34 := (binrel% LE.le skoZ let28)
  let let35 := (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) let26)
  let let36 := (binrel% HAdd.hAdd let26 let25)
  let let37 := (binrel% LE.le let36 skoZ)
  let let38 := (Eq let4 let23)
  let let39 := (binrel% HAdd.hAdd let5 let29)
  let let40 := (binrel% HAdd.hAdd let4 let3)
  let let41 := (binrel% HAdd.hAdd let5 let40)
  let let42 := (binrel% GE.ge let31 let22)
  let let43 := (binrel% GE.ge let32 (Neg.neg let26))
  let let44 := (binrel% LE.le skoZ let36)
  let let45 := (Int.ofNat 0)
  let let46 := (binrel% GE.ge skoZ let45)
  let let47 := (Eq let3 let24)
  let let48 := (binrel% GE.ge let24 let22)
  let let49 := (binrel% GE.ge let23 let22)
  let let50 := (binrel% HAdd.hAdd let16 let40)
  let let51 := (binrel% GE.ge skoY let45)
  let let52 := (binrel% GE.ge skoX let45)
  let let53 := (Not let35)
  let let54 := (Not let33)
  let let55 := (And let53 (And let54 (And let52 (And let51 (And let46 (And let49 (And let48 (And let42 (And let43 let35)))))))))
  let let56 := (Eq let21 let55)
(Eq let21 let21) → (Eq let30 let28) → (Eq let34 let33) → (Eq let37 let35) → let38 → (Eq let39 let36) → (Eq let6 let41) → (Eq let9 let42) → (Eq let2 let2) → (Eq let44 let43) → (Eq let16 let27) → (Eq let13 let46) → let47 → (Eq let10 let48) → (Eq let11 let49) → (Eq let17 let50) → (Eq let14 let51) → (Eq let15 let52) → let21 → False :=
  let let1 := (Rat.ofInt 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul skoY let2)
  let let4 := (binrel% HMul.hMul skoX let2)
  let let5 := (Rat.ofInt 2)
  let let6 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let5 let4) let3)
  let let7 := (binrel% LE.le let6 skoZ)
  let let8 := (binrel% LE.le skoZ let6)
  let let9 := (binrel% LE.le skoZ let1)
  let let10 := (binrel% LE.le skoY let1)
  let let11 := (binrel% LE.le skoX let1)
  let let12 := (Rat.ofInt 0)
  let let13 := (binrel% LE.le let12 skoZ)
  let let14 := (binrel% LE.le let12 skoY)
  let let15 := (binrel% LE.le let12 skoX)
  let let16 := (binrel% HDiv.hDiv (Rat.ofInt 3) let5)
  let let17 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let16 let4) let3)
  let let18 := (binrel% LE.le skoZ let17)
  let let19 := (Not let18)
  let let20 := (Not let7)
  let let21 := (And let20 (And let19 (And let15 (And let14 (And let13 (And let11 (And let10 (And let9 (And let8 let7)))))))))
  let let22 := (Neg.neg (Int.ofNat 1))
  let let23 := (binrel% HMul.hMul let22 skoX)
  let let24 := (binrel% HMul.hMul let22 skoY)
  let let25 := (binrel% HAdd.hAdd let24 let23)
  let let26 := (Int.ofNat 2)
  let let27 := (binrel% HDiv.hDiv (Int.ofNat 3) let26)
  let let28 := (binrel% HAdd.hAdd let27 let25)
  let let29 := (binrel% HAdd.hAdd let23 let24)
  let let30 := (binrel% HAdd.hAdd let27 let29)
  let let31 := (binrel% HMul.hMul let22 skoZ)
  let let32 := (binrel% HAdd.hAdd let31 let25)
  let let33 := (binrel% GE.ge let32 (Neg.neg let27))
  let let34 := (binrel% LE.le skoZ let28)
  let let35 := (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) let26)
  let let36 := (binrel% HAdd.hAdd let26 let25)
  let let37 := (binrel% LE.le let36 skoZ)
  let let38 := (Eq let4 let23)
  let let39 := (binrel% HAdd.hAdd let5 let29)
  let let40 := (binrel% HAdd.hAdd let4 let3)
  let let41 := (binrel% HAdd.hAdd let5 let40)
  let let42 := (binrel% GE.ge let31 let22)
  let let43 := (binrel% GE.ge let32 (Neg.neg let26))
  let let44 := (binrel% LE.le skoZ let36)
  let let45 := (Int.ofNat 0)
  let let46 := (binrel% GE.ge skoZ let45)
  let let47 := (Eq let3 let24)
  let let48 := (binrel% GE.ge let24 let22)
  let let49 := (binrel% GE.ge let23 let22)
  let let50 := (binrel% HAdd.hAdd let16 let40)
  let let51 := (binrel% GE.ge skoY let45)
  let let52 := (binrel% GE.ge skoX let45)
  let let53 := (Not let35)
  let let54 := (Not let33)
  let let55 := (And let53 (And let54 (And let52 (And let51 (And let46 (And let49 (And let48 (And let42 (And let43 let35)))))))))
  let let56 := (Eq let21 let55)
fun lean_r0 : (Eq let21 let21) => -- THEORY_REWRITE_BOOL
fun lean_r1 : (Eq let30 let28) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let37 let35) => -- THEORY_REWRITE_ARITH
fun lean_r4 : let38 => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let39 let36) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let6 let41) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let9 let42) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let2 let2) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let16 let27) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let13 let46) => -- THEORY_REWRITE_ARITH
fun lean_r12 : let47 => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let10 let48) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let11 let49) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let17 let50) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let14 let51) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let15 let52) => -- THEORY_REWRITE_ARITH
fun lean_a18 : let21 => by
have lean_s0 : (Eq And And) := by timed rfl
have lean_s1 : (Eq let5 let5) := by timed rfl
have lean_s2 : (Eq skoX skoX) := by timed rfl
let lean_s3 := by timed flipCongrArg lean_s2 [HMul.hMul]
have lean_s4 : (Eq let4 let4) := by timed congr lean_s3 lean_r8
have lean_s5 : let38 := by timed Eq.trans lean_s4 lean_r4
have lean_s6 : (Eq skoY skoY) := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [HMul.hMul]
have lean_s8 : (Eq let3 let3) := by timed congr lean_s7 lean_r8
have lean_s9 : let47 := by timed Eq.trans lean_s8 lean_r12
let lean_s10 := by timed congrHAdd lean_s5 lean_s9
have lean_s11 : (Eq let41 let39) := by timed congrHAdd lean_s1 lean_s10
have lean_s12 : (Eq let41 let36) := by timed Eq.trans lean_s11 lean_r5
have lean_s13 : (Eq let6 let36) := by timed Eq.trans lean_r6 lean_s12
let lean_s14 := by timed flipCongrArg lean_s13 [LE.le]
have lean_s15 : (Eq skoZ skoZ) := by timed rfl
have lean_s16 : (Eq let7 let37) := by timed congr lean_s14 lean_s15
have lean_s17 : (Eq let7 let35) := by timed Eq.trans lean_s16 lean_r3
have lean_s18 : (Eq let20 let53) := by timed flipCongrArg lean_s17 [Not]
let lean_s19 := by timed congr lean_s0 lean_s18
let lean_s20 := by timed flipCongrArg lean_s15 [LE.le]
let lean_s21 := by timed congrHAdd lean_s5 lean_s9
have lean_s22 : (Eq let50 let30) := by timed congrHAdd lean_r10 lean_s21
have lean_s23 : (Eq let50 let28) := by timed Eq.trans lean_s22 lean_r1
have lean_s24 : (Eq let17 let28) := by timed Eq.trans lean_r15 lean_s23
have lean_s25 : (Eq let18 let34) := by timed congr lean_s20 lean_s24
have lean_s26 : (Eq let18 let33) := by timed Eq.trans lean_s25 lean_r2
have lean_s27 : (Eq let19 let54) := by timed flipCongrArg lean_s26 [Not]
let lean_s28 := by timed congr lean_s0 lean_s27
let lean_s29 := by timed congr lean_s0 lean_r17
let lean_s30 := by timed congr lean_s0 lean_r16
let lean_s31 := by timed congr lean_s0 lean_r11
let lean_s32 := by timed congr lean_s0 lean_r14
let lean_s33 := by timed congr lean_s0 lean_r13
let lean_s34 := by timed congr lean_s0 lean_r7
let lean_s35 := by timed flipCongrArg lean_s15 [LE.le]
have lean_s36 : (Eq let8 let44) := by timed congr lean_s35 lean_s13
have lean_s37 : (Eq let8 let43) := by timed Eq.trans lean_s36 lean_r9
let lean_s38 := by timed congr lean_s0 lean_s37
let lean_s39 := by timed congr lean_s38 lean_s17
let lean_s40 := by timed congr lean_s34 lean_s39
let lean_s41 := by timed congr lean_s33 lean_s40
let lean_s42 := by timed congr lean_s32 lean_s41
let lean_s43 := by timed congr lean_s31 lean_s42
let lean_s44 := by timed congr lean_s30 lean_s43
let lean_s45 := by timed congr lean_s29 lean_s44
let lean_s46 := by timed congr lean_s28 lean_s45
have lean_s47 : let56 := by timed congr lean_s19 lean_s46
have lean_s48 : let56 := by timed Eq.trans lean_r0 lean_s47
have lean_s49 : let55 := by timed eqResolve lean_a18 lean_s48
have lean_s50 : let35 := by andElim lean_s49, 9
have lean_s51 : let55 := by timed eqResolve lean_a18 lean_s48
have lean_s52 : let53 := by andElim lean_s51, 0
exact (show False from by timed contradiction lean_s50 lean_s52)


