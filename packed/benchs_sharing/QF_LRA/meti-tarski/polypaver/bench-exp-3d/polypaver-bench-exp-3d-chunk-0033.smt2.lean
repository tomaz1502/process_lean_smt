open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (binrel% GE.ge skoX let1)
  let let3 := (Rat.ofInt 0)
  let let4 := (binrel% GE.ge skoX let3)
  let let5 := (Rat.ofInt 1)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% LT.lt let6 let1)
  let let8 := (binrel% GE.ge skoY let1)
  let let9 := (binrel% GE.ge skoY let3)
  let let10 := (Neg.neg (Int.ofNat 1))
  let let11 := (binrel% HMul.hMul let10 skoX)
  let let12 := (binrel% HMul.hMul let10 skoY)
  let let13 := (binrel% HAdd.hAdd let12 let11)
  let let14 := (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% HAdd.hAdd let11 let12)
  let let17 := (binrel% HAdd.hAdd let14 let16)
  let let18 := (binrel% GE.ge skoZ let1)
  let let19 := (binrel% GE.ge skoZ let3)
  let let20 := (binrel% HMul.hMul let10 skoZ)
  let let21 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let22 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let20 let16))
  let let23 := (binrel% GT.gt let5 let1)
  let let24 := (binrel% GE.ge (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let11 let20)) (Neg.neg let14))
  let let25 := (binrel% LE.le skoZ let15)
  let let26 := (binrel% HMul.hMul let5 let21)
  let let27 := (binrel% GE.ge let20 let10)
  let let28 := (binrel% LE.le skoZ let5)
  let let29 := (binrel% HMul.hMul skoY let6)
  let let30 := (Eq let29 let12)
  let let31 := (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2))
  let let32 := (binrel% LE.le let3 skoY)
  let let33 := (binrel% LE.le let3 skoX)
  let let34 := (binrel% LE.le let3 skoZ)
  let let35 := (binrel% LE.le skoX let5)
  let let36 := (binrel% LE.le skoY let5)
  let let37 := (binrel% HMul.hMul skoX let6)
  let let38 := (binrel% HAdd.hAdd let37 let29)
  let let39 := (binrel% LE.le let38 skoZ)
  let let40 := (Not let39)
  let let41 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let31 let37) let29)
  let let42 := (binrel% LE.le skoZ let41)
  let let43 := (And let42 (And let40 (And let28 (And let36 (And let35 (And let34 (And let32 let33)))))))
  let let44 := (Eq let37 let11)
  let let45 := (binrel% HAdd.hAdd let31 let38)
  let let46 := (binrel% GE.ge let21 let1)
  let let47 := (binrel% LE.le let13 skoZ)
  let let48 := (binrel% GE.ge let3 let3)
  let let49 := (binrel% HMul.hMul let6 skoZ)
  let let50 := (binrel% GE.ge let12 let10)
  let let51 := (Eq let46 let46)
  let let52 := (binrel% HMul.hMul let6 let3)
  let let53 := (binrel% HMul.hMul let5 let3)
  let let54 := (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let52 let52)))
  let let55 := (binrel% HMul.hMul let6 skoY)
  let let56 := (binrel% HMul.hMul let6 skoX)
  let let57 := (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let56 let55)))
  let let58 := (binrel% GE.ge let57 let54)
  let let59 := (Not let58)
  let let60 := (binrel% LT.lt let57 let54)
  let let61 := (Not let46)
  let let62 := (Not let61)
  let let63 := (Eq let62 let46)
  let let64 := (Eq let46 let62)
  let let65 := (Not True)
  let let66 := (binrel% GE.ge let21 let3)
  let let67 := (Not let66)
  let let68 := (binrel% LT.lt let21 let3)
  let let69 := (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let3 let3)))
  let let70 := (binrel% GE.ge let11 let10)
  let let71 := (And let24 (And let61 (And let27 (And let50 (And let70 (And let18 (And let8 let2)))))))
  let let72 := (Eq let43 let71)
  let let73 := (Not let2)
  let let74 := (Not let8)
  let let75 := (Not let18)
  let let76 := (Or let74 (Or let73 (Or let75 let46)))
  let let77 := (Or let74 (Or let73 (Or let75 let62)))
  let let78 := (Not let68)
  let let79 := (binrel% LE.le let55 let52)
  let let80 := (And let7 let9)
  let let81 := (binrel% LE.le let56 let52)
  let let82 := (And let7 let4)
  let let83 := (binrel% LE.le let49 let52)
  let let84 := (And let7 let19)
  let let85 := (binrel% LT.lt let26 let53)
  let let86 := (And let23 let68)
(Eq let4 let2) → (Eq let7 True) → (Eq let9 let8) → (Eq let17 let15) → (Eq let19 let18) → (Eq let22 let3) → (Eq let23 True) → (Eq let25 let24) → (Eq let16 let13) → (Eq let26 let21) → (Eq let28 let27) → let30 → (Eq let6 let6) → (Eq let31 let14) → (Eq let32 let8) → (Eq let43 let43) → let44 → (Eq let33 let2) → (Eq let41 let45) → (Eq let47 let46) → (Eq let48 True) → (Eq let49 let20) → (Eq let36 let50) → (Eq let51 True) → (Eq let60 let59) → let63 → (Eq let63 let64) → (Eq let65 False) → (Eq let66 let46) → (Eq let53 let3) → (Eq let68 let67) → (Eq let69 let3) → (Eq let52 let3) → (Eq let34 let18) → (Eq let55 let12) → (Eq let35 let70) → (Eq let56 let11) → let43 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (binrel% GE.ge skoX let1)
  let let3 := (Rat.ofInt 0)
  let let4 := (binrel% GE.ge skoX let3)
  let let5 := (Rat.ofInt 1)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% LT.lt let6 let1)
  let let8 := (binrel% GE.ge skoY let1)
  let let9 := (binrel% GE.ge skoY let3)
  let let10 := (Neg.neg (Int.ofNat 1))
  let let11 := (binrel% HMul.hMul let10 skoX)
  let let12 := (binrel% HMul.hMul let10 skoY)
  let let13 := (binrel% HAdd.hAdd let12 let11)
  let let14 := (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% HAdd.hAdd let11 let12)
  let let17 := (binrel% HAdd.hAdd let14 let16)
  let let18 := (binrel% GE.ge skoZ let1)
  let let19 := (binrel% GE.ge skoZ let3)
  let let20 := (binrel% HMul.hMul let10 skoZ)
  let let21 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let22 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let20 let16))
  let let23 := (binrel% GT.gt let5 let1)
  let let24 := (binrel% GE.ge (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let11 let20)) (Neg.neg let14))
  let let25 := (binrel% LE.le skoZ let15)
  let let26 := (binrel% HMul.hMul let5 let21)
  let let27 := (binrel% GE.ge let20 let10)
  let let28 := (binrel% LE.le skoZ let5)
  let let29 := (binrel% HMul.hMul skoY let6)
  let let30 := (Eq let29 let12)
  let let31 := (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2))
  let let32 := (binrel% LE.le let3 skoY)
  let let33 := (binrel% LE.le let3 skoX)
  let let34 := (binrel% LE.le let3 skoZ)
  let let35 := (binrel% LE.le skoX let5)
  let let36 := (binrel% LE.le skoY let5)
  let let37 := (binrel% HMul.hMul skoX let6)
  let let38 := (binrel% HAdd.hAdd let37 let29)
  let let39 := (binrel% LE.le let38 skoZ)
  let let40 := (Not let39)
  let let41 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let31 let37) let29)
  let let42 := (binrel% LE.le skoZ let41)
  let let43 := (And let42 (And let40 (And let28 (And let36 (And let35 (And let34 (And let32 let33)))))))
  let let44 := (Eq let37 let11)
  let let45 := (binrel% HAdd.hAdd let31 let38)
  let let46 := (binrel% GE.ge let21 let1)
  let let47 := (binrel% LE.le let13 skoZ)
  let let48 := (binrel% GE.ge let3 let3)
  let let49 := (binrel% HMul.hMul let6 skoZ)
  let let50 := (binrel% GE.ge let12 let10)
  let let51 := (Eq let46 let46)
  let let52 := (binrel% HMul.hMul let6 let3)
  let let53 := (binrel% HMul.hMul let5 let3)
  let let54 := (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let52 let52)))
  let let55 := (binrel% HMul.hMul let6 skoY)
  let let56 := (binrel% HMul.hMul let6 skoX)
  let let57 := (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let56 let55)))
  let let58 := (binrel% GE.ge let57 let54)
  let let59 := (Not let58)
  let let60 := (binrel% LT.lt let57 let54)
  let let61 := (Not let46)
  let let62 := (Not let61)
  let let63 := (Eq let62 let46)
  let let64 := (Eq let46 let62)
  let let65 := (Not True)
  let let66 := (binrel% GE.ge let21 let3)
  let let67 := (Not let66)
  let let68 := (binrel% LT.lt let21 let3)
  let let69 := (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let3 let3)))
  let let70 := (binrel% GE.ge let11 let10)
  let let71 := (And let24 (And let61 (And let27 (And let50 (And let70 (And let18 (And let8 let2)))))))
  let let72 := (Eq let43 let71)
  let let73 := (Not let2)
  let let74 := (Not let8)
  let let75 := (Not let18)
  let let76 := (Or let74 (Or let73 (Or let75 let46)))
  let let77 := (Or let74 (Or let73 (Or let75 let62)))
  let let78 := (Not let68)
  let let79 := (binrel% LE.le let55 let52)
  let let80 := (And let7 let9)
  let let81 := (binrel% LE.le let56 let52)
  let let82 := (And let7 let4)
  let let83 := (binrel% LE.le let49 let52)
  let let84 := (And let7 let19)
  let let85 := (binrel% LT.lt let26 let53)
  let let86 := (And let23 let68)
fun lean_r0 : (Eq let4 let2) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let7 True) => -- EVALUATE
fun lean_r2 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let17 let15) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let22 let3) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let23 True) => -- EVALUATE
fun lean_r7 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let16 let13) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let26 let21) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r11 : let30 => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let6 let6) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let31 let14) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let32 let8) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let43 let43) => -- THEORY_REWRITE_BOOL
fun lean_r16 : let44 => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let33 let2) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let41 let45) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let47 let46) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let48 True) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let49 let20) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let36 let50) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let51 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let60 let59) => -- THEORY_REWRITE_ARITH
fun lean_r25 : let63 => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let63 let64) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let65 False) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let66 let46) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let53 let3) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let68 let67) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let69 let3) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let52 let3) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let34 let18) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let55 let12) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let35 let70) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let56 let11) => -- THEORY_REWRITE_ARITH
fun lean_a37 : let43 => by
have lean_s0 : (Or let74 (Or let73 (Or let75 (Or let62 False)))) :=
  (scope (fun lean_a38 : let8 =>
    (scope (fun lean_a39 : let2 =>
      (scope (fun lean_a40 : let18 =>
        (scope (fun lean_a41 : let61 =>
          have lean_s0 : (Eq let67 let61) := by timed flipCongrArg lean_r28 [Not]
          have lean_s1 : (Eq let68 let61) := by timed Eq.trans lean_r30 lean_s0
          have lean_s2 : (Eq let61 let68) := by timed Eq.symm lean_s1
          have lean_s3 : let68 := by timed eqResolve lean_a41 lean_s2
          have lean_s4 : (Or let78 False) :=
            (scope (fun lean_a42 : let68 =>
              have lean_s4 : let23 := by timed trueElim lean_r6
              have lean_s5 : let86 := by timed And.intro lean_s4 lean_a42
              have lean_s6 : (Implies let86 let85) := by arithMulPos [let21, let3, let5], 0
              have lean_s7 : let85 := by timed modusPonens lean_s5 lean_s6
              have lean_s8 : let7 := by timed trueElim lean_r1
              have lean_s9 : (Eq let18 let19) := by timed Eq.symm lean_r4
              have lean_s10 : let19 := by timed eqResolve lean_a40 lean_s9
              have lean_s11 : let84 := by timed And.intro lean_s8 lean_s10
              have lean_s12 : (Implies let84 let83) := by arithMulNeg [skoZ, let3, let6], 3
              have lean_s13 : let83 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let2 let4) := by timed Eq.symm lean_r0
              have lean_s15 : let4 := by timed eqResolve lean_a39 lean_s14
              have lean_s16 : let82 := by timed And.intro lean_s8 lean_s15
              have lean_s17 : (Implies let82 let81) := by arithMulNeg [skoX, let3, let6], 3
              have lean_s18 : let81 := by timed modusPonens lean_s16 lean_s17
              have lean_s19 : (Eq let8 let9) := by timed Eq.symm lean_r2
              have lean_s20 : let9 := by timed eqResolve lean_a38 lean_s19
              have lean_s21 : let80 := by timed And.intro lean_s8 lean_s20
              have lean_s22 : (Implies let80 let79) := by arithMulNeg [skoY, let3, let6], 3
              have lean_s23 : let79 := by timed modusPonens lean_s21 lean_s22
              have lean_s24 : let60 := by sumBounds [lean_s7, lean_s13, lean_s18, lean_s23]
              let lean_s25 := by timed congrHAdd lean_r36 lean_r34
              let lean_s26 := by timed congrHAdd lean_r21 lean_s25
              have lean_s27 : (Eq let57 let22) := by timed congrHAdd lean_r9 lean_s26
              have lean_s28 : (Eq let57 let3) := by timed Eq.trans lean_s27 lean_r5
              let lean_s29 := by timed flipCongrArg lean_s28 [GE.ge]
              let lean_s30 := by timed congrHAdd lean_r32 lean_r32
              let lean_s31 := by timed congrHAdd lean_r32 lean_s30
              have lean_s32 : (Eq let54 let69) := by timed congrHAdd lean_r29 lean_s31
              have lean_s33 : (Eq let54 let3) := by timed Eq.trans lean_s32 lean_r31
              have lean_s34 : (Eq let58 let48) := by timed congr lean_s29 lean_s33
              have lean_s35 : (Eq let58 True) := by timed Eq.trans lean_s34 lean_r20
              have lean_s36 : (Eq let59 let65) := by timed flipCongrArg lean_s35 [Not]
              have lean_s37 : (Eq let59 False) := by timed Eq.trans lean_s36 lean_r27
              have lean_s38 : (Eq let60 False) := by timed Eq.trans lean_r24 lean_s37
              show False from by timed eqResolve lean_s24 lean_s38
            ))
          have lean_s5 : let78 := by liftOrNToNeg lean_s4
          have lean_s6 : (Eq let78 let62) := by timed flipCongrArg lean_s1 [Not]
          have lean_s7 : (Eq let78 let46) := by timed Eq.trans lean_s6 lean_r25
          have lean_s8 : (Eq let46 let66) := by timed Eq.symm lean_r28
          have lean_s9 : (Eq let78 let66) := by timed Eq.trans lean_s7 lean_s8
          have lean_s10 : let66 := by timed eqResolve lean_s5 lean_s9
          have lean_s11 : (Eq let46 let78) := by timed Eq.symm lean_s7
          have lean_s12 : (Eq let66 let78) := by timed Eq.trans lean_r28 lean_s11
          have lean_s13 : let78 := by timed eqResolve lean_s10 lean_s12
          show False from by timed contradiction lean_s3 lean_s13
  ))))))))
have lean_s1 : (Not (And let8 (And let2 (And let18 let61)))) := by liftOrNToNeg lean_s0
have lean_s2 : let77 := by timed flipNotAnd lean_s1 [let8, let2, let18, let61]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let74 let74) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let73 let73) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : (Eq let75 let75) := by timed rfl
let lean_s9 := by timed congr lean_s3 lean_s8
have lean_s10 : let51 := by timed rfl
let lean_s11 := by timed flipCongrArg lean_s10 [Eq]
have lean_s12 : (Eq let64 let51) := by timed congr lean_s11 lean_r25
have lean_s13 : (Eq let64 True) := by timed Eq.trans lean_s12 lean_r23
have lean_s14 : (Eq let63 True) := by timed Eq.trans lean_r26 lean_s13
have lean_s15 : let63 := by timed trueElim lean_s14
let lean_s16 := by timed congr lean_s9 lean_s15
let lean_s17 := by timed congr lean_s7 lean_s16
have lean_s18 : (Eq let77 let76) := by timed congr lean_s5 lean_s17
have lean_s19 : let76 := by timed eqResolve lean_s2 lean_s18
have lean_s20 : (Or let46 (Or let75 (Or let74 let73))) := by permutateOr lean_s19, [3, 2, 0, 1], (- 1)
have lean_s21 : (Eq And And) := by timed rfl
have lean_s22 : (Eq skoZ skoZ) := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [LE.le]
have lean_s24 : (Eq skoX skoX) := by timed rfl
let lean_s25 := by timed flipCongrArg lean_s24 [HMul.hMul]
have lean_s26 : (Eq let37 let37) := by timed congr lean_s25 lean_r12
have lean_s27 : let44 := by timed Eq.trans lean_s26 lean_r16
have lean_s28 : (Eq skoY skoY) := by timed rfl
let lean_s29 := by timed flipCongrArg lean_s28 [HMul.hMul]
have lean_s30 : (Eq let29 let29) := by timed congr lean_s29 lean_r12
have lean_s31 : let30 := by timed Eq.trans lean_s30 lean_r11
let lean_s32 := by timed congrHAdd lean_s27 lean_s31
have lean_s33 : (Eq let45 let17) := by timed congrHAdd lean_r13 lean_s32
have lean_s34 : (Eq let45 let15) := by timed Eq.trans lean_s33 lean_r3
have lean_s35 : (Eq let41 let15) := by timed Eq.trans lean_r18 lean_s34
have lean_s36 : (Eq let42 let25) := by timed congr lean_s23 lean_s35
have lean_s37 : (Eq let42 let24) := by timed Eq.trans lean_s36 lean_r7
let lean_s38 := by timed congr lean_s21 lean_s37
let lean_s39 := by timed flipCongrArg lean_s27 [HAdd.hAdd]
have lean_s40 : (Eq let38 let16) := by timed congr lean_s39 lean_s31
have lean_s41 : (Eq let38 let13) := by timed Eq.trans lean_s40 lean_r8
let lean_s42 := by timed flipCongrArg lean_s41 [LE.le]
have lean_s43 : (Eq let39 let47) := by timed congr lean_s42 lean_s22
have lean_s44 : (Eq let39 let46) := by timed Eq.trans lean_s43 lean_r19
have lean_s45 : (Eq let40 let61) := by timed flipCongrArg lean_s44 [Not]
let lean_s46 := by timed congr lean_s21 lean_s45
let lean_s47 := by timed congr lean_s21 lean_r10
let lean_s48 := by timed congr lean_s21 lean_r22
let lean_s49 := by timed congr lean_s21 lean_r35
let lean_s50 := by timed congr lean_s21 lean_r33
let lean_s51 := by timed congr lean_s21 lean_r14
let lean_s52 := by timed congr lean_s51 lean_r17
let lean_s53 := by timed congr lean_s50 lean_s52
let lean_s54 := by timed congr lean_s49 lean_s53
let lean_s55 := by timed congr lean_s48 lean_s54
let lean_s56 := by timed congr lean_s47 lean_s55
let lean_s57 := by timed congr lean_s46 lean_s56
have lean_s58 : let72 := by timed congr lean_s38 lean_s57
have lean_s59 : let72 := by timed Eq.trans lean_r15 lean_s58
have lean_s60 : let71 := by timed eqResolve lean_a37 lean_s59
have lean_s61 : let2 := by andElim lean_s60, 7
let lean_s62 := by R2 lean_s20, lean_s61, let2, [(- 1), 0]
have lean_s63 : let8 := by andElim lean_s60, 6
let lean_s64 := by R2 lean_s62, lean_s63, let8, [(- 1), 0]
have lean_s65 : let18 := by andElim lean_s60, 5
let lean_s66 := by R2 lean_s64, lean_s65, let18, [(- 1), 0]
have lean_s67 : let61 := by andElim lean_s60, 1
exact (show False from by R1 lean_s66, lean_s67, let46, [0, 0])


