open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))
  let let5 := (Neg.neg let4)
  let let6 := (Int.ofNat 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 skoZ)
  let let9 := (binrel% HMul.hMul let7 skoX)
  let let10 := (binrel% HMul.hMul let7 skoY)
  let let11 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 let8))
  let let12 := (binrel% GE.ge let11 let5)
  let let13 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let14 := (binrel% LE.le let13 let4)
  let let15 := (Neg.neg let2)
  let let16 := (binrel% HMul.hMul let15 let4)
  let let17 := (Int.ofNat 9)
  let let18 := (binrel% HDiv.hDiv (Int.ofNat 14) let17)
  let let19 := (Neg.neg let18)
  let let20 := (binrel% HMul.hMul let2 let19)
  let let21 := (binrel% HAdd.hAdd let20 let16)
  let let22 := (binrel% HMul.hMul let15 let13)
  let let23 := (binrel% HMul.hMul let2 let13)
  let let24 := (binrel% HAdd.hAdd let23 let22)
  let let25 := (binrel% GE.ge let24 let21)
  let let26 := (Not let25)
  let let27 := (binrel% LT.lt let24 let21)
  let let28 := (binrel% HMul.hMul skoY let15)
  let let29 := (binrel% HMul.hMul skoX let15)
  let let30 := (binrel% HAdd.hAdd let29 let28)
  let let31 := (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2))
  let let32 := (binrel% HAdd.hAdd let31 let30)
  let let33 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let31 let29) let28)
  let let34 := (Neg.neg (Rat.ofInt 14))
  let let35 := (binrel% GE.ge let10 let7)
  let let36 := (binrel% LE.le skoY let2)
  let let37 := (binrel% HAdd.hAdd let10 let9)
  let let38 := (binrel% HAdd.hAdd let4 let37)
  let let39 := (binrel% LE.le skoZ let38)
  let let40 := (Eq let28 let10)
  let let41 := (binrel% GE.ge let11 let18)
  let let42 := (binrel% LE.le let13 let19)
  let let43 := (binrel% GE.ge let9 let7)
  let let44 := (binrel% LE.le skoX let2)
  let let45 := (Not let14)
  let let46 := (binrel% GT.gt let13 let4)
  let let47 := (binrel% HAdd.hAdd let9 let10)
  let let48 := (binrel% HAdd.hAdd let4 let47)
  let let49 := (Not True)
  let let50 := (binrel% GE.ge skoY let1)
  let let51 := (Rat.ofInt 0)
  let let52 := (binrel% LE.le let51 skoY)
  let let53 := (binrel% GE.ge skoX let1)
  let let54 := (binrel% LE.le let51 skoX)
  let let55 := (binrel% HAdd.hAdd let19 let37)
  let let56 := (binrel% LE.le skoZ let55)
  let let57 := (binrel% HAdd.hAdd let19 let47)
  let let58 := (binrel% HDiv.hDiv let6 let17)
  let let59 := (binrel% HMul.hMul let34 let58)
  let let60 := (Eq let59 let19)
  let let61 := (binrel% GE.ge let8 let7)
  let let62 := (binrel% LE.le skoZ let2)
  let let63 := (binrel% LT.lt let15 let1)
  let let64 := (binrel% HDiv.hDiv let34 (Rat.ofInt 9))
  let let65 := (binrel% HAdd.hAdd let64 let30)
  let let66 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let64 let29) let28)
  let let67 := (binrel% LE.le let51 skoZ)
  let let68 := (binrel% LE.le skoZ let33)
  let let69 := (Not let68)
  let let70 := (binrel% LE.le skoZ let66)
  let let71 := (And let70 (And let69 (And let62 (And let36 (And let44 (And let67 (And let52 let54)))))))
  let let72 := (binrel% GE.ge skoZ let1)
  let let73 := (Eq let29 let9)
  let let74 := (Not let12)
  let let75 := (Not let74)
  let let76 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 55) (Int.ofNat 18)))
  let let77 := (binrel% GE.ge let51 let76)
  let let78 := (binrel% HAdd.hAdd let19 let5)
  let let79 := (binrel% HAdd.hAdd let13 let11)
  let let80 := (And let41 (And let74 (And let61 (And let35 (And let43 (And let72 (And let50 let53)))))))
  let let81 := (Eq let71 let80)
  let let82 := (Not let41)
  let let83 := (Or let12 let82)
  let let84 := (Or let75 let82)
  let let85 := (binrel% LT.lt let22 let16)
  let let86 := (And let63 let46)
  let let87 := (binrel% LE.le let23 let20)
  let let88 := (And let3 let42)
(Eq let3 True) → (Eq let14 let12) → (Eq let27 let26) → (Eq let33 let32) → (Eq let34 let34) → (Eq let36 let35) → (Eq let39 let12) → let40 → (Eq let42 let41) → (Eq let15 let15) → (Eq let44 let43) → (Eq let46 let45) → (Eq let48 let38) → (Eq let49 False) → (Eq let52 let50) → (Eq let16 let5) → (Eq let54 let53) → (Eq let56 let41) → (Eq let57 let55) → let60 → (Eq let62 let61) → (Eq let22 let11) → (Eq let63 True) → (Eq let66 let65) → (Eq let23 let13) → (Eq let71 let71) → (Eq let20 let19) → (Eq let67 let72) → let73 → (Eq let75 let12) → (Eq let64 let59) → (Eq let77 True) → (Eq let78 let76) → (Eq let31 let4) → (Eq let79 let51) → let71 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% HDiv.hDiv (Int.ofNat 3) (Int.ofNat 2))
  let let5 := (Neg.neg let4)
  let let6 := (Int.ofNat 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 skoZ)
  let let9 := (binrel% HMul.hMul let7 skoX)
  let let10 := (binrel% HMul.hMul let7 skoY)
  let let11 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 let8))
  let let12 := (binrel% GE.ge let11 let5)
  let let13 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let14 := (binrel% LE.le let13 let4)
  let let15 := (Neg.neg let2)
  let let16 := (binrel% HMul.hMul let15 let4)
  let let17 := (Int.ofNat 9)
  let let18 := (binrel% HDiv.hDiv (Int.ofNat 14) let17)
  let let19 := (Neg.neg let18)
  let let20 := (binrel% HMul.hMul let2 let19)
  let let21 := (binrel% HAdd.hAdd let20 let16)
  let let22 := (binrel% HMul.hMul let15 let13)
  let let23 := (binrel% HMul.hMul let2 let13)
  let let24 := (binrel% HAdd.hAdd let23 let22)
  let let25 := (binrel% GE.ge let24 let21)
  let let26 := (Not let25)
  let let27 := (binrel% LT.lt let24 let21)
  let let28 := (binrel% HMul.hMul skoY let15)
  let let29 := (binrel% HMul.hMul skoX let15)
  let let30 := (binrel% HAdd.hAdd let29 let28)
  let let31 := (binrel% HDiv.hDiv (Rat.ofInt 3) (Rat.ofInt 2))
  let let32 := (binrel% HAdd.hAdd let31 let30)
  let let33 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let31 let29) let28)
  let let34 := (Neg.neg (Rat.ofInt 14))
  let let35 := (binrel% GE.ge let10 let7)
  let let36 := (binrel% LE.le skoY let2)
  let let37 := (binrel% HAdd.hAdd let10 let9)
  let let38 := (binrel% HAdd.hAdd let4 let37)
  let let39 := (binrel% LE.le skoZ let38)
  let let40 := (Eq let28 let10)
  let let41 := (binrel% GE.ge let11 let18)
  let let42 := (binrel% LE.le let13 let19)
  let let43 := (binrel% GE.ge let9 let7)
  let let44 := (binrel% LE.le skoX let2)
  let let45 := (Not let14)
  let let46 := (binrel% GT.gt let13 let4)
  let let47 := (binrel% HAdd.hAdd let9 let10)
  let let48 := (binrel% HAdd.hAdd let4 let47)
  let let49 := (Not True)
  let let50 := (binrel% GE.ge skoY let1)
  let let51 := (Rat.ofInt 0)
  let let52 := (binrel% LE.le let51 skoY)
  let let53 := (binrel% GE.ge skoX let1)
  let let54 := (binrel% LE.le let51 skoX)
  let let55 := (binrel% HAdd.hAdd let19 let37)
  let let56 := (binrel% LE.le skoZ let55)
  let let57 := (binrel% HAdd.hAdd let19 let47)
  let let58 := (binrel% HDiv.hDiv let6 let17)
  let let59 := (binrel% HMul.hMul let34 let58)
  let let60 := (Eq let59 let19)
  let let61 := (binrel% GE.ge let8 let7)
  let let62 := (binrel% LE.le skoZ let2)
  let let63 := (binrel% LT.lt let15 let1)
  let let64 := (binrel% HDiv.hDiv let34 (Rat.ofInt 9))
  let let65 := (binrel% HAdd.hAdd let64 let30)
  let let66 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let64 let29) let28)
  let let67 := (binrel% LE.le let51 skoZ)
  let let68 := (binrel% LE.le skoZ let33)
  let let69 := (Not let68)
  let let70 := (binrel% LE.le skoZ let66)
  let let71 := (And let70 (And let69 (And let62 (And let36 (And let44 (And let67 (And let52 let54)))))))
  let let72 := (binrel% GE.ge skoZ let1)
  let let73 := (Eq let29 let9)
  let let74 := (Not let12)
  let let75 := (Not let74)
  let let76 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 55) (Int.ofNat 18)))
  let let77 := (binrel% GE.ge let51 let76)
  let let78 := (binrel% HAdd.hAdd let19 let5)
  let let79 := (binrel% HAdd.hAdd let13 let11)
  let let80 := (And let41 (And let74 (And let61 (And let35 (And let43 (And let72 (And let50 let53)))))))
  let let81 := (Eq let71 let80)
  let let82 := (Not let41)
  let let83 := (Or let12 let82)
  let let84 := (Or let75 let82)
  let let85 := (binrel% LT.lt let22 let16)
  let let86 := (And let63 let46)
  let let87 := (binrel% LE.le let23 let20)
  let let88 := (And let3 let42)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let14 let12) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let34 let34) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let39 let12) => -- THEORY_REWRITE_ARITH
fun lean_r7 : let40 => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let15 let15) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let46 let45) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let48 let38) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let49 False) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let52 let50) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let16 let5) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let54 let53) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let56 let41) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let57 let55) => -- THEORY_REWRITE_ARITH
fun lean_r19 : let60 => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let62 let61) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let22 let11) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let63 True) => -- EVALUATE
fun lean_r23 : (Eq let66 let65) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let23 let13) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let71 let71) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let67 let72) => -- THEORY_REWRITE_ARITH
fun lean_r28 : let73 => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let75 let12) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let64 let59) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let77 True) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let78 let76) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let31 let4) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let79 let51) => -- THEORY_REWRITE_ARITH
fun lean_a35 : let71 => by
have lean_s0 : (Or let75 (Or let82 False)) :=
  (scope (fun lean_a36 : let74 =>
    (scope (fun lean_a37 : let41 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let41 let42) := by timed Eq.symm lean_r8
      have lean_s2 : let42 := by timed eqResolve lean_a37 lean_s1
      have lean_s3 : let88 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let88 let87) := by arithMulPos [let13, let19, let2], 1
      have lean_s5 : let87 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let63 := by timed trueElim lean_r22
      have lean_s7 : (Eq let45 let74) := by timed flipCongrArg lean_r1 [Not]
      have lean_s8 : (Eq let46 let74) := by timed Eq.trans lean_r11 lean_s7
      have lean_s9 : (Eq let74 let46) := by timed Eq.symm lean_s8
      have lean_s10 : let46 := by timed eqResolve lean_a36 lean_s9
      have lean_s11 : let86 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let86 let85) := by arithMulNeg [let13, let4, let15], 2
      have lean_s13 : let85 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let27 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r24 [HAdd.hAdd]
      have lean_s16 : (Eq let24 let79) := by timed congr lean_s15 lean_r21
      have lean_s17 : (Eq let24 let51) := by timed Eq.trans lean_s16 lean_r34
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r26 [HAdd.hAdd]
      have lean_s20 : (Eq let21 let78) := by timed congr lean_s19 lean_r15
      have lean_s21 : (Eq let21 let76) := by timed Eq.trans lean_s20 lean_r32
      have lean_s22 : (Eq let25 let77) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let25 True) := by timed Eq.trans lean_s22 lean_r31
      have lean_s24 : (Eq let26 let49) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let26 False) := by timed Eq.trans lean_s24 lean_r13
      have lean_s26 : (Eq let27 False) := by timed Eq.trans lean_r2 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let74 let41)) := by liftOrNToNeg lean_s0
have lean_s2 : let84 := by timed flipNotAnd lean_s1 [let74, let41]
let lean_s3 := by timed flipCongrArg lean_r29 [Or]
have lean_s4 : (Eq let82 let82) := by timed rfl
have lean_s5 : (Eq let84 let83) := by timed congr lean_s3 lean_s4
have lean_s6 : let83 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
have lean_s8 : (Eq skoZ skoZ) := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [LE.le]
let lean_s10 := by timed flipCongrArg lean_r4 [HMul.hMul]
have lean_s11 : (Eq let58 let58) := by timed rfl
have lean_s12 : (Eq let59 let59) := by timed congr lean_s10 lean_s11
have lean_s13 : let60 := by timed Eq.trans lean_s12 lean_r19
have lean_s14 : (Eq let64 let19) := by timed Eq.trans lean_r30 lean_s13
have lean_s15 : (Eq skoX skoX) := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [HMul.hMul]
have lean_s17 : (Eq let29 let29) := by timed congr lean_s16 lean_r9
have lean_s18 : let73 := by timed Eq.trans lean_s17 lean_r28
have lean_s19 : (Eq skoY skoY) := by timed rfl
let lean_s20 := by timed flipCongrArg lean_s19 [HMul.hMul]
have lean_s21 : (Eq let28 let28) := by timed congr lean_s20 lean_r9
have lean_s22 : let40 := by timed Eq.trans lean_s21 lean_r7
let lean_s23 := by timed congrHAdd lean_s18 lean_s22
have lean_s24 : (Eq let65 let57) := by timed congrHAdd lean_s14 lean_s23
have lean_s25 : (Eq let65 let55) := by timed Eq.trans lean_s24 lean_r18
have lean_s26 : (Eq let66 let55) := by timed Eq.trans lean_r23 lean_s25
have lean_s27 : (Eq let70 let56) := by timed congr lean_s9 lean_s26
have lean_s28 : (Eq let70 let41) := by timed Eq.trans lean_s27 lean_r17
let lean_s29 := by timed congr lean_s7 lean_s28
let lean_s30 := by timed flipCongrArg lean_s8 [LE.le]
let lean_s31 := by timed congrHAdd lean_s18 lean_s22
have lean_s32 : (Eq let32 let48) := by timed congrHAdd lean_r33 lean_s31
have lean_s33 : (Eq let32 let38) := by timed Eq.trans lean_s32 lean_r12
have lean_s34 : (Eq let33 let38) := by timed Eq.trans lean_r3 lean_s33
have lean_s35 : (Eq let68 let39) := by timed congr lean_s30 lean_s34
have lean_s36 : (Eq let68 let12) := by timed Eq.trans lean_s35 lean_r6
have lean_s37 : (Eq let69 let74) := by timed flipCongrArg lean_s36 [Not]
let lean_s38 := by timed congr lean_s7 lean_s37
let lean_s39 := by timed congr lean_s7 lean_r20
let lean_s40 := by timed congr lean_s7 lean_r5
let lean_s41 := by timed congr lean_s7 lean_r10
let lean_s42 := by timed congr lean_s7 lean_r27
let lean_s43 := by timed congr lean_s7 lean_r14
let lean_s44 := by timed congr lean_s43 lean_r16
let lean_s45 := by timed congr lean_s42 lean_s44
let lean_s46 := by timed congr lean_s41 lean_s45
let lean_s47 := by timed congr lean_s40 lean_s46
let lean_s48 := by timed congr lean_s39 lean_s47
let lean_s49 := by timed congr lean_s38 lean_s48
have lean_s50 : let81 := by timed congr lean_s29 lean_s49
have lean_s51 : let81 := by timed Eq.trans lean_r25 lean_s50
have lean_s52 : let80 := by timed eqResolve lean_a35 lean_s51
have lean_s53 : let74 := by andElim lean_s52, 1
let lean_s54 := by R1 lean_s6, lean_s53, let12, [(- 1), 0]
have lean_s55 : let41 := by andElim lean_s52, 0
exact (show False from by R2 lean_s54, lean_s55, let41, [0, 0])


