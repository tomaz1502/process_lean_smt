open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Int.ofNat 2)
  let let6 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let7 := (binrel% GE.ge let6 let5)
  let let8 := (Rat.ofInt 2)
  let let9 := (binrel% GE.ge let6 let8)
  let let10 := (Rat.ofInt 0)
  let let11 := (Int.ofNat 1)
  let let12 := (Neg.neg let11)
  let let13 := (binrel% HMul.hMul let12 skoX)
  let let14 := (binrel% HMul.hMul let12 skoY)
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% HMul.hMul let12 skoZ)
  let let17 := (binrel% HAdd.hAdd let16 let15)
  let let18 := (binrel% HAdd.hAdd let6 let17)
  let let19 := (binrel% HDiv.hDiv (Int.ofNat 3) let5)
  let let20 := (binrel% HMul.hMul let2 let19)
  let let21 := (Neg.neg let8)
  let let22 := (binrel% HMul.hMul let3 let8)
  let let23 := (binrel% GE.ge let17 (Neg.neg let19))
  let let24 := (binrel% LE.le let6 let19)
  let let25 := (Neg.neg (binrel% HDiv.hDiv let11 let5))
  let let26 := (binrel% HAdd.hAdd let19 let21)
  let let27 := (binrel% HAdd.hAdd let5 let15)
  let let28 := (binrel% HAdd.hAdd let13 let14)
  let let29 := (binrel% HAdd.hAdd let8 let28)
  let let30 := (binrel% LE.le let27 skoZ)
  let let31 := (binrel% HMul.hMul let2 let6)
  let let32 := (binrel% LE.le let10 let25)
  let let33 := (binrel% HMul.hMul skoY let3)
  let let34 := (binrel% HMul.hMul skoX let3)
  let let35 := (binrel% HAdd.hAdd let34 let33)
  let let36 := (binrel% HAdd.hAdd let8 let35)
  let let37 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let8 let34) let33)
  let let38 := (binrel% GE.ge skoX let1)
  let let39 := (binrel% LE.le let10 skoX)
  let let40 := (binrel% GT.gt let2 let1)
  let let41 := (binrel% HAdd.hAdd let19 let15)
  let let42 := (binrel% HAdd.hAdd let19 let28)
  let let43 := (binrel% LE.le let10 skoY)
  let let44 := (binrel% LE.le let10 skoZ)
  let let45 := (binrel% LE.le skoX let2)
  let let46 := (binrel% LE.le skoY let2)
  let let47 := (binrel% LE.le skoZ let2)
  let let48 := (binrel% HDiv.hDiv (Rat.ofInt 3) let8)
  let let49 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let48 let34) let33)
  let let50 := (binrel% LE.le skoZ let49)
  let let51 := (binrel% LE.le let37 skoZ)
  let let52 := (And let51 (And let50 (And let47 (And let46 (And let45 (And let44 (And let43 let39)))))))
  let let53 := (binrel% GE.ge skoY let1)
  let let54 := (binrel% HMul.hMul let3 let6)
  let let55 := (Eq let33 let14)
  let let56 := (binrel% GE.ge let14 let12)
  let let57 := (binrel% GE.ge skoZ let1)
  let let58 := (binrel% GE.ge let16 let12)
  let let59 := (binrel% GE.ge let13 let12)
  let let60 := (binrel% HAdd.hAdd let48 let35)
  let let61 := (binrel% LE.le skoZ let41)
  let let62 := (Eq let34 let13)
  let let63 := (And let7 (And let23 (And let58 (And let56 (And let59 (And let57 (And let53 let38)))))))
  let let64 := (Eq let52 let63)
  let let65 := (Not let23)
  let let66 := (Not let7)
  let let67 := (binrel% HAdd.hAdd let20 let22)
  let let68 := (binrel% HAdd.hAdd let31 let54)
  let let69 := (binrel% LE.le let68 let67)
  let let70 := (binrel% LE.le let54 let22)
  let let71 := (And let4 let9)
  let let72 := (binrel% LE.le let31 let20)
  let let73 := (And let40 let24)
(Eq let4 True) → (Eq let9 let7) → (Eq let18 let10) → (Eq let20 let19) → (Eq let22 let21) → (Eq let24 let23) → (Eq let26 let25) → (Eq let29 let27) → (Eq let30 let7) → (Eq let31 let6) → (Eq let32 False) → (Eq let37 let36) → (Eq let39 let38) → (Eq let40 True) → (Eq let42 let41) → (Eq let52 let52) → (Eq let43 let53) → (Eq let54 let17) → (Eq let3 let3) → let55 → (Eq let46 let56) → (Eq let44 let57) → (Eq let48 let19) → (Eq let47 let58) → (Eq let45 let59) → (Eq let49 let60) → (Eq let61 let23) → let62 → let52 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Int.ofNat 2)
  let let6 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let7 := (binrel% GE.ge let6 let5)
  let let8 := (Rat.ofInt 2)
  let let9 := (binrel% GE.ge let6 let8)
  let let10 := (Rat.ofInt 0)
  let let11 := (Int.ofNat 1)
  let let12 := (Neg.neg let11)
  let let13 := (binrel% HMul.hMul let12 skoX)
  let let14 := (binrel% HMul.hMul let12 skoY)
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% HMul.hMul let12 skoZ)
  let let17 := (binrel% HAdd.hAdd let16 let15)
  let let18 := (binrel% HAdd.hAdd let6 let17)
  let let19 := (binrel% HDiv.hDiv (Int.ofNat 3) let5)
  let let20 := (binrel% HMul.hMul let2 let19)
  let let21 := (Neg.neg let8)
  let let22 := (binrel% HMul.hMul let3 let8)
  let let23 := (binrel% GE.ge let17 (Neg.neg let19))
  let let24 := (binrel% LE.le let6 let19)
  let let25 := (Neg.neg (binrel% HDiv.hDiv let11 let5))
  let let26 := (binrel% HAdd.hAdd let19 let21)
  let let27 := (binrel% HAdd.hAdd let5 let15)
  let let28 := (binrel% HAdd.hAdd let13 let14)
  let let29 := (binrel% HAdd.hAdd let8 let28)
  let let30 := (binrel% LE.le let27 skoZ)
  let let31 := (binrel% HMul.hMul let2 let6)
  let let32 := (binrel% LE.le let10 let25)
  let let33 := (binrel% HMul.hMul skoY let3)
  let let34 := (binrel% HMul.hMul skoX let3)
  let let35 := (binrel% HAdd.hAdd let34 let33)
  let let36 := (binrel% HAdd.hAdd let8 let35)
  let let37 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let8 let34) let33)
  let let38 := (binrel% GE.ge skoX let1)
  let let39 := (binrel% LE.le let10 skoX)
  let let40 := (binrel% GT.gt let2 let1)
  let let41 := (binrel% HAdd.hAdd let19 let15)
  let let42 := (binrel% HAdd.hAdd let19 let28)
  let let43 := (binrel% LE.le let10 skoY)
  let let44 := (binrel% LE.le let10 skoZ)
  let let45 := (binrel% LE.le skoX let2)
  let let46 := (binrel% LE.le skoY let2)
  let let47 := (binrel% LE.le skoZ let2)
  let let48 := (binrel% HDiv.hDiv (Rat.ofInt 3) let8)
  let let49 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let48 let34) let33)
  let let50 := (binrel% LE.le skoZ let49)
  let let51 := (binrel% LE.le let37 skoZ)
  let let52 := (And let51 (And let50 (And let47 (And let46 (And let45 (And let44 (And let43 let39)))))))
  let let53 := (binrel% GE.ge skoY let1)
  let let54 := (binrel% HMul.hMul let3 let6)
  let let55 := (Eq let33 let14)
  let let56 := (binrel% GE.ge let14 let12)
  let let57 := (binrel% GE.ge skoZ let1)
  let let58 := (binrel% GE.ge let16 let12)
  let let59 := (binrel% GE.ge let13 let12)
  let let60 := (binrel% HAdd.hAdd let48 let35)
  let let61 := (binrel% LE.le skoZ let41)
  let let62 := (Eq let34 let13)
  let let63 := (And let7 (And let23 (And let58 (And let56 (And let59 (And let57 (And let53 let38)))))))
  let let64 := (Eq let52 let63)
  let let65 := (Not let23)
  let let66 := (Not let7)
  let let67 := (binrel% HAdd.hAdd let20 let22)
  let let68 := (binrel% HAdd.hAdd let31 let54)
  let let69 := (binrel% LE.le let68 let67)
  let let70 := (binrel% LE.le let54 let22)
  let let71 := (And let4 let9)
  let let72 := (binrel% LE.le let31 let20)
  let let73 := (And let40 let24)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let9 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let18 let10) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let26 let25) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let29 let27) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let30 let7) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let31 let6) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let32 False) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let40 True) => -- EVALUATE
fun lean_r14 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let52 let52) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let43 let53) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let54 let17) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let3 let3) => -- THEORY_REWRITE_ARITH
fun lean_r19 : let55 => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let46 let56) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let44 let57) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let48 let19) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let47 let58) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let45 let59) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let49 let60) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let61 let23) => -- THEORY_REWRITE_ARITH
fun lean_r27 : let62 => -- THEORY_REWRITE_ARITH
fun lean_a28 : let52 => by
have lean_s0 : (Or let66 (Or let65 False)) :=
  (scope (fun lean_a29 : let7 =>
    (scope (fun lean_a30 : let23 =>
      have lean_s0 : let40 := by timed trueElim lean_r13
      have lean_s1 : (Eq let23 let24) := by timed Eq.symm lean_r5
      have lean_s2 : let24 := by timed eqResolve lean_a30 lean_s1
      have lean_s3 : let73 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let73 let72) := by arithMulPos [let6, let19, let2], 1
      have lean_s5 : let72 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let4 := by timed trueElim lean_r0
      have lean_s7 : (Eq let7 let9) := by timed Eq.symm lean_r1
      have lean_s8 : let9 := by timed eqResolve lean_a29 lean_s7
      have lean_s9 : let71 := by timed And.intro lean_s6 lean_s8
      have lean_s10 : (Implies let71 let70) := by arithMulNeg [let6, let8, let3], 3
      have lean_s11 : let70 := by timed modusPonens lean_s9 lean_s10
      have lean_s12 : let69 := by sumBounds [lean_s5, lean_s11]
      let lean_s13 := by timed flipCongrArg lean_r9 [HAdd.hAdd]
      have lean_s14 : (Eq let68 let18) := by timed congr lean_s13 lean_r17
      have lean_s15 : (Eq let68 let10) := by timed Eq.trans lean_s14 lean_r2
      let lean_s16 := by timed flipCongrArg lean_s15 [LE.le]
      let lean_s17 := by timed flipCongrArg lean_r3 [HAdd.hAdd]
      have lean_s18 : (Eq let67 let26) := by timed congr lean_s17 lean_r4
      have lean_s19 : (Eq let67 let25) := by timed Eq.trans lean_s18 lean_r6
      have lean_s20 : (Eq let69 let32) := by timed congr lean_s16 lean_s19
      have lean_s21 : (Eq let69 False) := by timed Eq.trans lean_s20 lean_r10
      show False from by timed eqResolve lean_s12 lean_s21
  ))))
have lean_s1 : (Not (And let7 let23)) := by liftOrNToNeg lean_s0
have lean_s2 : (Or let66 let65) := by timed flipNotAnd lean_s1 [let7, let23]
have lean_s3 : (Eq And And) := by timed rfl
have lean_s4 : (Eq let8 let8) := by timed rfl
have lean_s5 : (Eq skoX skoX) := by timed rfl
let lean_s6 := by timed flipCongrArg lean_s5 [HMul.hMul]
have lean_s7 : (Eq let34 let34) := by timed congr lean_s6 lean_r18
have lean_s8 : let62 := by timed Eq.trans lean_s7 lean_r27
have lean_s9 : (Eq skoY skoY) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s11 : (Eq let33 let33) := by timed congr lean_s10 lean_r18
have lean_s12 : let55 := by timed Eq.trans lean_s11 lean_r19
let lean_s13 := by timed congrHAdd lean_s8 lean_s12
have lean_s14 : (Eq let36 let29) := by timed congrHAdd lean_s4 lean_s13
have lean_s15 : (Eq let36 let27) := by timed Eq.trans lean_s14 lean_r7
have lean_s16 : (Eq let37 let27) := by timed Eq.trans lean_r11 lean_s15
let lean_s17 := by timed flipCongrArg lean_s16 [LE.le]
have lean_s18 : (Eq skoZ skoZ) := by timed rfl
have lean_s19 : (Eq let51 let30) := by timed congr lean_s17 lean_s18
have lean_s20 : (Eq let51 let7) := by timed Eq.trans lean_s19 lean_r8
let lean_s21 := by timed congr lean_s3 lean_s20
let lean_s22 := by timed flipCongrArg lean_s18 [LE.le]
let lean_s23 := by timed congrHAdd lean_s8 lean_s12
have lean_s24 : (Eq let60 let42) := by timed congrHAdd lean_r22 lean_s23
have lean_s25 : (Eq let60 let41) := by timed Eq.trans lean_s24 lean_r14
have lean_s26 : (Eq let49 let41) := by timed Eq.trans lean_r25 lean_s25
have lean_s27 : (Eq let50 let61) := by timed congr lean_s22 lean_s26
have lean_s28 : (Eq let50 let23) := by timed Eq.trans lean_s27 lean_r26
let lean_s29 := by timed congr lean_s3 lean_s28
let lean_s30 := by timed congr lean_s3 lean_r23
let lean_s31 := by timed congr lean_s3 lean_r20
let lean_s32 := by timed congr lean_s3 lean_r24
let lean_s33 := by timed congr lean_s3 lean_r21
let lean_s34 := by timed congr lean_s3 lean_r16
let lean_s35 := by timed congr lean_s34 lean_r12
let lean_s36 := by timed congr lean_s33 lean_s35
let lean_s37 := by timed congr lean_s32 lean_s36
let lean_s38 := by timed congr lean_s31 lean_s37
let lean_s39 := by timed congr lean_s30 lean_s38
let lean_s40 := by timed congr lean_s29 lean_s39
have lean_s41 : let64 := by timed congr lean_s21 lean_s40
have lean_s42 : let64 := by timed Eq.trans lean_r15 lean_s41
have lean_s43 : let63 := by timed eqResolve lean_a28 lean_s42
have lean_s44 : let23 := by andElim lean_s43, 1
let lean_s45 := by R2 lean_s2, lean_s44, let23, [(- 1), 0]
have lean_s46 : let7 := by andElim lean_s43, 0
exact (show False from by R2 lean_s45, lean_s46, let7, [0, 0])


