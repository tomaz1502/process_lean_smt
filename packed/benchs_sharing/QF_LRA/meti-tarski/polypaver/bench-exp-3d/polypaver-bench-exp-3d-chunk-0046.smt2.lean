open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 2)
  let let5 := (binrel% HDiv.hDiv (Int.ofNat 3) let4)
  let let6 := (Int.ofNat 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 skoZ)
  let let9 := (binrel% HMul.hMul let7 skoX)
  let let10 := (binrel% HMul.hMul let7 skoY)
  let let11 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 let8))
  let let12 := (binrel% GE.ge let11 (Neg.neg let5))
  let let13 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let14 := (binrel% LE.le let13 let5)
  let let15 := (binrel% GE.ge let11 (Neg.neg let4))
  let let16 := (Rat.ofInt 2)
  let let17 := (binrel% LE.le let13 let16)
  let let18 := (Neg.neg let2)
  let let19 := (binrel% HMul.hMul skoY let18)
  let let20 := (Eq let19 let10)
  let let21 := (Rat.ofInt 0)
  let let22 := (binrel% HAdd.hAdd let13 let11)
  let let23 := (binrel% GE.ge let8 let7)
  let let24 := (binrel% LE.le skoZ let2)
  let let25 := (binrel% LT.lt let18 let1)
  let let26 := (binrel% HDiv.hDiv (Rat.ofInt 3) let16)
  let let27 := (binrel% GE.ge let9 let7)
  let let28 := (binrel% LE.le skoX let2)
  let let29 := (binrel% GE.ge let10 let7)
  let let30 := (binrel% LE.le skoY let2)
  let let31 := (binrel% HMul.hMul skoX let18)
  let let32 := (binrel% HAdd.hAdd let31 let19)
  let let33 := (binrel% HAdd.hAdd let16 let32)
  let let34 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let16 let31) let19)
  let let35 := (binrel% HAdd.hAdd let10 let9)
  let let36 := (binrel% HAdd.hAdd let4 let35)
  let let37 := (binrel% HAdd.hAdd let9 let10)
  let let38 := (binrel% HAdd.hAdd let16 let37)
  let let39 := (binrel% HAdd.hAdd let26 let32)
  let let40 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let26 let31) let19)
  let let41 := (binrel% GE.ge skoY let1)
  let let42 := (binrel% LE.le let21 skoY)
  let let43 := (binrel% HMul.hMul let18 let16)
  let let44 := (binrel% HMul.hMul let2 let5)
  let let45 := (binrel% HAdd.hAdd let44 let43)
  let let46 := (binrel% HMul.hMul let18 let13)
  let let47 := (binrel% HMul.hMul let2 let13)
  let let48 := (binrel% HAdd.hAdd let47 let46)
  let let49 := (binrel% GE.ge let48 let45)
  let let50 := (Not let49)
  let let51 := (binrel% LT.lt let48 let45)
  let let52 := (binrel% HAdd.hAdd let5 let35)
  let let53 := (binrel% LE.le skoZ let52)
  let let54 := (Not True)
  let let55 := (binrel% GE.ge skoZ let1)
  let let56 := (binrel% LE.le let21 skoZ)
  let let57 := (Eq let31 let9)
  let let58 := (binrel% GE.ge skoX let1)
  let let59 := (binrel% LE.le let21 skoX)
  let let60 := (Not let15)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le skoZ let34)
  let let63 := (Not let62)
  let let64 := (binrel% LE.le skoZ let40)
  let let65 := (And let64 (And let63 (And let24 (And let30 (And let28 (And let56 (And let42 let59)))))))
  let let66 := (Neg.neg (binrel% HDiv.hDiv let6 let4))
  let let67 := (Neg.neg let16)
  let let68 := (binrel% HAdd.hAdd let5 let67)
  let let69 := (binrel% LE.le skoZ let36)
  let let70 := (binrel% GE.ge let21 let66)
  let let71 := (binrel% HAdd.hAdd let5 let37)
  let let72 := (Not let17)
  let let73 := (binrel% GT.gt let13 let16)
  let let74 := (And let12 (And let60 (And let23 (And let29 (And let27 (And let55 (And let41 let58)))))))
  let let75 := (Eq let65 let74)
  let let76 := (Not let12)
  let let77 := (Or let15 let76)
  let let78 := (Or let61 let76)
  let let79 := (binrel% LT.lt let46 let43)
  let let80 := (And let25 let73)
  let let81 := (binrel% LE.le let47 let44)
  let let82 := (And let3 let14)
(Eq let3 True) → (Eq let14 let12) → (Eq let17 let15) → let20 → (Eq let22 let21) → (Eq let24 let23) → (Eq let18 let18) → (Eq let25 True) → (Eq let26 let5) → (Eq let28 let27) → (Eq let30 let29) → (Eq let34 let33) → (Eq let38 let36) → (Eq let40 let39) → (Eq let42 let41) → (Eq let51 let50) → (Eq let53 let12) → (Eq let54 False) → (Eq let44 let5) → (Eq let56 let55) → let57 → (Eq let47 let13) → (Eq let59 let58) → (Eq let46 let11) → (Eq let61 let15) → (Eq let65 let65) → (Eq let68 let66) → (Eq let43 let67) → (Eq let69 let15) → (Eq let70 True) → (Eq let71 let52) → (Eq let73 let72) → let65 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 2)
  let let5 := (binrel% HDiv.hDiv (Int.ofNat 3) let4)
  let let6 := (Int.ofNat 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 skoZ)
  let let9 := (binrel% HMul.hMul let7 skoX)
  let let10 := (binrel% HMul.hMul let7 skoY)
  let let11 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let9 let8))
  let let12 := (binrel% GE.ge let11 (Neg.neg let5))
  let let13 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let14 := (binrel% LE.le let13 let5)
  let let15 := (binrel% GE.ge let11 (Neg.neg let4))
  let let16 := (Rat.ofInt 2)
  let let17 := (binrel% LE.le let13 let16)
  let let18 := (Neg.neg let2)
  let let19 := (binrel% HMul.hMul skoY let18)
  let let20 := (Eq let19 let10)
  let let21 := (Rat.ofInt 0)
  let let22 := (binrel% HAdd.hAdd let13 let11)
  let let23 := (binrel% GE.ge let8 let7)
  let let24 := (binrel% LE.le skoZ let2)
  let let25 := (binrel% LT.lt let18 let1)
  let let26 := (binrel% HDiv.hDiv (Rat.ofInt 3) let16)
  let let27 := (binrel% GE.ge let9 let7)
  let let28 := (binrel% LE.le skoX let2)
  let let29 := (binrel% GE.ge let10 let7)
  let let30 := (binrel% LE.le skoY let2)
  let let31 := (binrel% HMul.hMul skoX let18)
  let let32 := (binrel% HAdd.hAdd let31 let19)
  let let33 := (binrel% HAdd.hAdd let16 let32)
  let let34 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let16 let31) let19)
  let let35 := (binrel% HAdd.hAdd let10 let9)
  let let36 := (binrel% HAdd.hAdd let4 let35)
  let let37 := (binrel% HAdd.hAdd let9 let10)
  let let38 := (binrel% HAdd.hAdd let16 let37)
  let let39 := (binrel% HAdd.hAdd let26 let32)
  let let40 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let26 let31) let19)
  let let41 := (binrel% GE.ge skoY let1)
  let let42 := (binrel% LE.le let21 skoY)
  let let43 := (binrel% HMul.hMul let18 let16)
  let let44 := (binrel% HMul.hMul let2 let5)
  let let45 := (binrel% HAdd.hAdd let44 let43)
  let let46 := (binrel% HMul.hMul let18 let13)
  let let47 := (binrel% HMul.hMul let2 let13)
  let let48 := (binrel% HAdd.hAdd let47 let46)
  let let49 := (binrel% GE.ge let48 let45)
  let let50 := (Not let49)
  let let51 := (binrel% LT.lt let48 let45)
  let let52 := (binrel% HAdd.hAdd let5 let35)
  let let53 := (binrel% LE.le skoZ let52)
  let let54 := (Not True)
  let let55 := (binrel% GE.ge skoZ let1)
  let let56 := (binrel% LE.le let21 skoZ)
  let let57 := (Eq let31 let9)
  let let58 := (binrel% GE.ge skoX let1)
  let let59 := (binrel% LE.le let21 skoX)
  let let60 := (Not let15)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le skoZ let34)
  let let63 := (Not let62)
  let let64 := (binrel% LE.le skoZ let40)
  let let65 := (And let64 (And let63 (And let24 (And let30 (And let28 (And let56 (And let42 let59)))))))
  let let66 := (Neg.neg (binrel% HDiv.hDiv let6 let4))
  let let67 := (Neg.neg let16)
  let let68 := (binrel% HAdd.hAdd let5 let67)
  let let69 := (binrel% LE.le skoZ let36)
  let let70 := (binrel% GE.ge let21 let66)
  let let71 := (binrel% HAdd.hAdd let5 let37)
  let let72 := (Not let17)
  let let73 := (binrel% GT.gt let13 let16)
  let let74 := (And let12 (And let60 (And let23 (And let29 (And let27 (And let55 (And let41 let58)))))))
  let let75 := (Eq let65 let74)
  let let76 := (Not let12)
  let let77 := (Or let15 let76)
  let let78 := (Or let61 let76)
  let let79 := (binrel% LT.lt let46 let43)
  let let80 := (And let25 let73)
  let let81 := (binrel% LE.le let47 let44)
  let let82 := (And let3 let14)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let14 let12) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let17 let15) => -- THEORY_REWRITE_ARITH
fun lean_r3 : let20 => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let18 let18) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let25 True) => -- EVALUATE
fun lean_r8 : (Eq let26 let5) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let30 let29) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let38 let36) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let40 let39) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let53 let12) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let54 False) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let44 let5) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let56 let55) => -- THEORY_REWRITE_ARITH
fun lean_r20 : let57 => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let47 let13) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let59 let58) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let46 let11) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let61 let15) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let65 let65) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let68 let66) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let43 let67) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let69 let15) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let70 True) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let71 let52) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let73 let72) => -- THEORY_REWRITE_ARITH
fun lean_a32 : let65 => by
have lean_s0 : (Or let61 (Or let76 False)) :=
  (scope (fun lean_a33 : let60 =>
    (scope (fun lean_a34 : let12 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let12 let14) := by timed Eq.symm lean_r1
      have lean_s2 : let14 := by timed eqResolve lean_a34 lean_s1
      have lean_s3 : let82 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let82 let81) := by arithMulPos [let13, let5, let2], 1
      have lean_s5 : let81 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let25 := by timed trueElim lean_r7
      have lean_s7 : (Eq let72 let60) := by timed flipCongrArg lean_r2 [Not]
      have lean_s8 : (Eq let73 let60) := by timed Eq.trans lean_r31 lean_s7
      have lean_s9 : (Eq let60 let73) := by timed Eq.symm lean_s8
      have lean_s10 : let73 := by timed eqResolve lean_a33 lean_s9
      have lean_s11 : let80 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let80 let79) := by arithMulNeg [let13, let16, let18], 2
      have lean_s13 : let79 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let51 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r21 [HAdd.hAdd]
      have lean_s16 : (Eq let48 let22) := by timed congr lean_s15 lean_r23
      have lean_s17 : (Eq let48 let21) := by timed Eq.trans lean_s16 lean_r4
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r18 [HAdd.hAdd]
      have lean_s20 : (Eq let45 let68) := by timed congr lean_s19 lean_r27
      have lean_s21 : (Eq let45 let66) := by timed Eq.trans lean_s20 lean_r26
      have lean_s22 : (Eq let49 let70) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let49 True) := by timed Eq.trans lean_s22 lean_r29
      have lean_s24 : (Eq let50 let54) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let50 False) := by timed Eq.trans lean_s24 lean_r17
      have lean_s26 : (Eq let51 False) := by timed Eq.trans lean_r15 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let60 let12)) := by liftOrNToNeg lean_s0
have lean_s2 : let78 := by timed flipNotAnd lean_s1 [let60, let12]
let lean_s3 := by timed flipCongrArg lean_r24 [Or]
have lean_s4 : (Eq let76 let76) := by timed rfl
have lean_s5 : (Eq let78 let77) := by timed congr lean_s3 lean_s4
have lean_s6 : let77 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
have lean_s8 : (Eq skoZ skoZ) := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [LE.le]
have lean_s10 : (Eq skoX skoX) := by timed rfl
let lean_s11 := by timed flipCongrArg lean_s10 [HMul.hMul]
have lean_s12 : (Eq let31 let31) := by timed congr lean_s11 lean_r6
have lean_s13 : let57 := by timed Eq.trans lean_s12 lean_r20
have lean_s14 : (Eq skoY skoY) := by timed rfl
let lean_s15 := by timed flipCongrArg lean_s14 [HMul.hMul]
have lean_s16 : (Eq let19 let19) := by timed congr lean_s15 lean_r6
have lean_s17 : let20 := by timed Eq.trans lean_s16 lean_r3
let lean_s18 := by timed congrHAdd lean_s13 lean_s17
have lean_s19 : (Eq let39 let71) := by timed congrHAdd lean_r8 lean_s18
have lean_s20 : (Eq let39 let52) := by timed Eq.trans lean_s19 lean_r30
have lean_s21 : (Eq let40 let52) := by timed Eq.trans lean_r13 lean_s20
have lean_s22 : (Eq let64 let53) := by timed congr lean_s9 lean_s21
have lean_s23 : (Eq let64 let12) := by timed Eq.trans lean_s22 lean_r16
let lean_s24 := by timed congr lean_s7 lean_s23
let lean_s25 := by timed flipCongrArg lean_s8 [LE.le]
have lean_s26 : (Eq let16 let16) := by timed rfl
let lean_s27 := by timed congrHAdd lean_s13 lean_s17
have lean_s28 : (Eq let33 let38) := by timed congrHAdd lean_s26 lean_s27
have lean_s29 : (Eq let33 let36) := by timed Eq.trans lean_s28 lean_r12
have lean_s30 : (Eq let34 let36) := by timed Eq.trans lean_r11 lean_s29
have lean_s31 : (Eq let62 let69) := by timed congr lean_s25 lean_s30
have lean_s32 : (Eq let62 let15) := by timed Eq.trans lean_s31 lean_r28
have lean_s33 : (Eq let63 let60) := by timed flipCongrArg lean_s32 [Not]
let lean_s34 := by timed congr lean_s7 lean_s33
let lean_s35 := by timed congr lean_s7 lean_r5
let lean_s36 := by timed congr lean_s7 lean_r10
let lean_s37 := by timed congr lean_s7 lean_r9
let lean_s38 := by timed congr lean_s7 lean_r19
let lean_s39 := by timed congr lean_s7 lean_r14
let lean_s40 := by timed congr lean_s39 lean_r22
let lean_s41 := by timed congr lean_s38 lean_s40
let lean_s42 := by timed congr lean_s37 lean_s41
let lean_s43 := by timed congr lean_s36 lean_s42
let lean_s44 := by timed congr lean_s35 lean_s43
let lean_s45 := by timed congr lean_s34 lean_s44
have lean_s46 : let75 := by timed congr lean_s24 lean_s45
have lean_s47 : let75 := by timed Eq.trans lean_r25 lean_s46
have lean_s48 : let74 := by timed eqResolve lean_a32 lean_s47
have lean_s49 : let60 := by andElim lean_s48, 1
let lean_s50 := by R1 lean_s6, lean_s49, let15, [(- 1), 0]
have lean_s51 : let12 := by andElim lean_s48, 0
exact (show False from by R2 lean_s50, lean_s51, let12, [0, 0])


