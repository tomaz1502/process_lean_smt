open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoS3 : Rat}
variable {skoX : Rat}
variable {skoSX : Rat}
variable {skoSX : Rat}
variable {skoS3 : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% LE.le skoS3 let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoS3 let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% LT.lt let8 let1)
  let let10 := (binrel% LE.le skoSX let4)
  let let11 := (Not let10)
  let let12 := (binrel% GT.gt skoSX let4)
  let let13 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let4 let4))
  let let14 := (binrel% HMul.hMul let2 let4)
  let let15 := (Neg.neg (Int.ofNat 1))
  let let16 := (binrel% GE.ge (binrel% HMul.hMul let15 skoS3) let1)
  let let17 := (Not let16)
  let let18 := (Not let17)
  let let19 := (Eq let16 let18)
  let let20 := (Eq let18 let16)
  let let21 := (Int.ofNat 3)
  let let22 := (binrel% HAdd.hAdd skoSX (binrel% HMul.hMul let21 skoS3))
  let let23 := (binrel% HMul.hMul let2 let22)
  let let24 := (Neg.neg (Rat.ofInt 3))
  let let25 := (binrel% HMul.hMul (Neg.neg let21) skoS3)
  let let26 := (binrel% HMul.hMul skoS3 let24)
  let let27 := (Eq let26 let25)
  let let28 := (binrel% LT.lt let24 let1)
  let let29 := (binrel% GE.ge let22 let1)
  let let30 := (binrel% LE.le let25 skoSX)
  let let31 := (Eq let29 let29)
  let let32 := (binrel% HMul.hMul let8 let4)
  let let33 := (binrel% GE.ge (binrel% HMul.hMul let15 skoX) let1)
  let let34 := (binrel% LE.le skoX let4)
  let let35 := (binrel% HMul.hMul let24 skoS3)
  let let36 := (Not let29)
  let let37 := (Not let36)
  let let38 := (Eq let29 let37)
  let let39 := (Eq let37 let29)
  let let40 := (binrel% HMul.hMul let15 skoSX)
  let let41 := (binrel% GE.ge let40 let1)
  let let42 := (Eq let41 let41)
  let let43 := (Not let41)
  let let44 := (Not let43)
  let let45 := (Eq let44 let41)
  let let46 := (Eq let41 let44)
  let let47 := (binrel% GE.ge let22 let4)
  let let48 := (Not True)
  let let49 := (Not let47)
  let let50 := (binrel% LT.lt let22 let4)
  let let51 := (binrel% GE.ge let4 let4)
  let let52 := (binrel% HMul.hMul let24 let4)
  let let53 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let25 let40))
  let let54 := (Eq let16 let16)
  let let55 := (binrel% HMul.hMul let8 skoSX)
  let let56 := (Not let34)
  let let57 := (binrel% LE.le let26 skoSX)
  let let58 := (Not let57)
  let let59 := (And let58 (And let56 (And let11 let6)))
  let let60 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let52 let32))
  let let61 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let35 let55))
  let let62 := (binrel% GE.ge let61 let60)
  let let63 := (Not let62)
  let let64 := (binrel% LT.lt let61 let60)
  let let65 := (Not let33)
  let let66 := (And let36 (And let65 (And let43 let17)))
  let let67 := (Eq let59 let66)
  let let68 := (Or let41 (Or let16 let29))
  let let69 := (Or let44 (Or let18 let37))
  let let70 := (Not let50)
  let let71 := (binrel% LT.lt let55 let32)
  let let72 := (And let9 let12)
  let let73 := (binrel% LT.lt let35 let52)
  let let74 := (And let28 let7)
  let let75 := (binrel% LT.lt let23 let14)
  let let76 := (And let3 let50)
(Eq let3 True) → (Eq let7 let6) → (Eq let9 True) → (Eq let12 let11) → (Eq let13 let4) → (Eq let14 let4) → (Eq let20 let19) → (Eq let23 let22) → (Eq let24 let24) → let27 → (Eq let5 let16) → (Eq let28 True) → (Eq let30 let29) → (Eq let31 True) → (Eq let32 let4) → (Eq let34 let33) → let20 → (Eq let35 let25) → (Eq let39 let38) → (Eq let10 let41) → (Eq let42 True) → let45 → (Eq let45 let46) → (Eq let47 let29) → (Eq let48 False) → let39 → (Eq let50 let49) → (Eq let51 True) → (Eq let52 let4) → (Eq let53 let4) → (Eq let54 True) → (Eq let55 let40) → (Eq let59 let59) → (Eq let64 let63) → let59 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% LE.le skoS3 let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoS3 let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% LT.lt let8 let1)
  let let10 := (binrel% LE.le skoSX let4)
  let let11 := (Not let10)
  let let12 := (binrel% GT.gt skoSX let4)
  let let13 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let4 let4))
  let let14 := (binrel% HMul.hMul let2 let4)
  let let15 := (Neg.neg (Int.ofNat 1))
  let let16 := (binrel% GE.ge (binrel% HMul.hMul let15 skoS3) let1)
  let let17 := (Not let16)
  let let18 := (Not let17)
  let let19 := (Eq let16 let18)
  let let20 := (Eq let18 let16)
  let let21 := (Int.ofNat 3)
  let let22 := (binrel% HAdd.hAdd skoSX (binrel% HMul.hMul let21 skoS3))
  let let23 := (binrel% HMul.hMul let2 let22)
  let let24 := (Neg.neg (Rat.ofInt 3))
  let let25 := (binrel% HMul.hMul (Neg.neg let21) skoS3)
  let let26 := (binrel% HMul.hMul skoS3 let24)
  let let27 := (Eq let26 let25)
  let let28 := (binrel% LT.lt let24 let1)
  let let29 := (binrel% GE.ge let22 let1)
  let let30 := (binrel% LE.le let25 skoSX)
  let let31 := (Eq let29 let29)
  let let32 := (binrel% HMul.hMul let8 let4)
  let let33 := (binrel% GE.ge (binrel% HMul.hMul let15 skoX) let1)
  let let34 := (binrel% LE.le skoX let4)
  let let35 := (binrel% HMul.hMul let24 skoS3)
  let let36 := (Not let29)
  let let37 := (Not let36)
  let let38 := (Eq let29 let37)
  let let39 := (Eq let37 let29)
  let let40 := (binrel% HMul.hMul let15 skoSX)
  let let41 := (binrel% GE.ge let40 let1)
  let let42 := (Eq let41 let41)
  let let43 := (Not let41)
  let let44 := (Not let43)
  let let45 := (Eq let44 let41)
  let let46 := (Eq let41 let44)
  let let47 := (binrel% GE.ge let22 let4)
  let let48 := (Not True)
  let let49 := (Not let47)
  let let50 := (binrel% LT.lt let22 let4)
  let let51 := (binrel% GE.ge let4 let4)
  let let52 := (binrel% HMul.hMul let24 let4)
  let let53 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let25 let40))
  let let54 := (Eq let16 let16)
  let let55 := (binrel% HMul.hMul let8 skoSX)
  let let56 := (Not let34)
  let let57 := (binrel% LE.le let26 skoSX)
  let let58 := (Not let57)
  let let59 := (And let58 (And let56 (And let11 let6)))
  let let60 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let52 let32))
  let let61 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let35 let55))
  let let62 := (binrel% GE.ge let61 let60)
  let let63 := (Not let62)
  let let64 := (binrel% LT.lt let61 let60)
  let let65 := (Not let33)
  let let66 := (And let36 (And let65 (And let43 let17)))
  let let67 := (Eq let59 let66)
  let let68 := (Or let41 (Or let16 let29))
  let let69 := (Or let44 (Or let18 let37))
  let let70 := (Not let50)
  let let71 := (binrel% LT.lt let55 let32)
  let let72 := (And let9 let12)
  let let73 := (binrel% LT.lt let35 let52)
  let let74 := (And let28 let7)
  let let75 := (binrel% LT.lt let23 let14)
  let let76 := (And let3 let50)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let9 True) => -- EVALUATE
fun lean_r3 : (Eq let12 let11) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let13 let4) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let14 let4) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let20 let19) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let24 let24) => -- THEORY_REWRITE_ARITH
fun lean_r9 : let27 => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let5 let16) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let28 True) => -- EVALUATE
fun lean_r12 : (Eq let30 let29) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let31 True) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let32 let4) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r16 : let20 => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let35 let25) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let39 let38) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let10 let41) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let42 True) => -- THEORY_REWRITE_BOOL
fun lean_r21 : let45 => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let45 let46) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let47 let29) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let48 False) => -- THEORY_REWRITE_BOOL
fun lean_r25 : let39 => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let51 True) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let52 let4) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let53 let4) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let54 True) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let55 let40) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let59 let59) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let64 let63) => -- THEORY_REWRITE_ARITH
fun lean_a34 : let59 => by
have lean_s0 : (Or let44 (Or let18 (Or let37 False))) :=
  (scope (fun lean_a35 : let43 =>
    (scope (fun lean_a36 : let17 =>
      (scope (fun lean_a37 : let36 =>
        have lean_s0 : (Eq let49 let36) := by timed flipCongrArg lean_r23 [Not]
        have lean_s1 : (Eq let50 let36) := by timed Eq.trans lean_r26 lean_s0
        have lean_s2 : (Eq let36 let50) := by timed Eq.symm lean_s1
        have lean_s3 : let50 := by timed eqResolve lean_a37 lean_s2
        have lean_s4 : (Or let70 False) :=
          (scope (fun lean_a38 : let50 =>
            have lean_s4 : let3 := by timed trueElim lean_r0
            have lean_s5 : let76 := by timed And.intro lean_s4 lean_a38
            have lean_s6 : (Implies let76 let75) := by arithMulPos [let22, let4, let2], 0
            have lean_s7 : let75 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let28 := by timed trueElim lean_r11
            have lean_s9 : (Eq let6 let17) := by timed flipCongrArg lean_r10 [Not]
            have lean_s10 : (Eq let7 let17) := by timed Eq.trans lean_r1 lean_s9
            have lean_s11 : (Eq let17 let7) := by timed Eq.symm lean_s10
            have lean_s12 : let7 := by timed eqResolve lean_a36 lean_s11
            have lean_s13 : let74 := by timed And.intro lean_s8 lean_s12
            have lean_s14 : (Implies let74 let73) := by arithMulNeg [skoS3, let4, let24], 2
            have lean_s15 : let73 := by timed modusPonens lean_s13 lean_s14
            have lean_s16 : let9 := by timed trueElim lean_r2
            have lean_s17 : (Eq let11 let43) := by timed flipCongrArg lean_r19 [Not]
            have lean_s18 : (Eq let12 let43) := by timed Eq.trans lean_r3 lean_s17
            have lean_s19 : (Eq let43 let12) := by timed Eq.symm lean_s18
            have lean_s20 : let12 := by timed eqResolve lean_a35 lean_s19
            have lean_s21 : let72 := by timed And.intro lean_s16 lean_s20
            have lean_s22 : (Implies let72 let71) := by arithMulNeg [skoSX, let4, let8], 2
            have lean_s23 : let71 := by timed modusPonens lean_s21 lean_s22
            have lean_s24 : let64 := by sumBounds [lean_s7, lean_s15, lean_s23]
            let lean_s25 := by timed congrHAdd lean_r17 lean_r31
            have lean_s26 : (Eq let61 let53) := by timed congrHAdd lean_r7 lean_s25
            have lean_s27 : (Eq let61 let4) := by timed Eq.trans lean_s26 lean_r29
            let lean_s28 := by timed flipCongrArg lean_s27 [GE.ge]
            let lean_s29 := by timed congrHAdd lean_r28 lean_r14
            have lean_s30 : (Eq let60 let13) := by timed congrHAdd lean_r5 lean_s29
            have lean_s31 : (Eq let60 let4) := by timed Eq.trans lean_s30 lean_r4
            have lean_s32 : (Eq let62 let51) := by timed congr lean_s28 lean_s31
            have lean_s33 : (Eq let62 True) := by timed Eq.trans lean_s32 lean_r27
            have lean_s34 : (Eq let63 let48) := by timed flipCongrArg lean_s33 [Not]
            have lean_s35 : (Eq let63 False) := by timed Eq.trans lean_s34 lean_r24
            have lean_s36 : (Eq let64 False) := by timed Eq.trans lean_r33 lean_s35
            show False from by timed eqResolve lean_s24 lean_s36
          ))
        have lean_s5 : let70 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let70 let37) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let70 let29) := by timed Eq.trans lean_s6 lean_r25
        have lean_s8 : (Eq let29 let47) := by timed Eq.symm lean_r23
        have lean_s9 : (Eq let70 let47) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let47 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let29 let70) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let47 let70) := by timed Eq.trans lean_r23 lean_s11
        have lean_s13 : let70 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let43 (And let17 let36))) := by liftOrNToNeg lean_s0
have lean_s2 : let69 := by timed flipNotAnd lean_s1 [let43, let17, let36]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let42 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let46 let42) := by timed congr lean_s5 lean_r21
have lean_s7 : (Eq let46 True) := by timed Eq.trans lean_s6 lean_r20
have lean_s8 : (Eq let45 True) := by timed Eq.trans lean_r22 lean_s7
have lean_s9 : let45 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let54 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let19 let54) := by timed congr lean_s12 lean_r16
have lean_s14 : (Eq let19 True) := by timed Eq.trans lean_s13 lean_r30
have lean_s15 : (Eq let20 True) := by timed Eq.trans lean_r6 lean_s14
have lean_s16 : let20 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let31 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let38 let31) := by timed congr lean_s19 lean_r25
have lean_s21 : (Eq let38 True) := by timed Eq.trans lean_s20 lean_r13
have lean_s22 : (Eq let39 True) := by timed Eq.trans lean_r18 lean_s21
have lean_s23 : let39 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq let69 let68) := by timed congr lean_s10 lean_s24
have lean_s26 : let68 := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Or let29 (Or let41 let16)) := by permutateOr lean_s26, [2, 0, 1], (- 1)
have lean_s28 : (Eq And And) := by timed rfl
have lean_s29 : (Eq skoS3 skoS3) := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [HMul.hMul]
have lean_s31 : (Eq let26 let26) := by timed congr lean_s30 lean_r8
have lean_s32 : let27 := by timed Eq.trans lean_s31 lean_r9
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq skoSX skoSX) := by timed rfl
have lean_s35 : (Eq let57 let30) := by timed congr lean_s33 lean_s34
have lean_s36 : (Eq let57 let29) := by timed Eq.trans lean_s35 lean_r12
have lean_s37 : (Eq let58 let36) := by timed flipCongrArg lean_s36 [Not]
let lean_s38 := by timed congr lean_s28 lean_s37
have lean_s39 : (Eq let56 let65) := by timed flipCongrArg lean_r15 [Not]
let lean_s40 := by timed congr lean_s28 lean_s39
have lean_s41 : (Eq let11 let43) := by timed flipCongrArg lean_r19 [Not]
let lean_s42 := by timed congr lean_s28 lean_s41
have lean_s43 : (Eq let6 let17) := by timed flipCongrArg lean_r10 [Not]
let lean_s44 := by timed congr lean_s42 lean_s43
let lean_s45 := by timed congr lean_s40 lean_s44
have lean_s46 : let67 := by timed congr lean_s38 lean_s45
have lean_s47 : let67 := by timed Eq.trans lean_r32 lean_s46
have lean_s48 : let66 := by timed eqResolve lean_a34 lean_s47
have lean_s49 : let17 := by andElim lean_s48, 3
let lean_s50 := by R1 lean_s27, lean_s49, let16, [(- 1), 0]
have lean_s51 : let43 := by andElim lean_s48, 2
let lean_s52 := by R1 lean_s50, lean_s51, let41, [(- 1), 0]
have lean_s53 : let36 := by andElim lean_s48, 0
exact (show False from by R1 lean_s52, lean_s53, let29, [0, 0])


