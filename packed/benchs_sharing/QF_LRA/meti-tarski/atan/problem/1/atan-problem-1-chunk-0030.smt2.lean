open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoSX : Rat}
variable {skoS3 : Rat}
variable {skoX : Rat}
variable {skoSX : Rat}
variable {skoS3 : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% LE.le skoS3 let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoS3 let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% LT.lt let8 let1)
  let let10 := (binrel% HMul.hMul let8 let4)
  let let11 := (Neg.neg (Rat.ofInt 3))
  let let12 := (binrel% HMul.hMul let11 let4)
  let let13 := (binrel% HMul.hMul let2 let4)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 let10))
  let let15 := (binrel% HMul.hMul let8 skoSX)
  let let16 := (binrel% HMul.hMul let11 skoS3)
  let let17 := (Int.ofNat 3)
  let let18 := (binrel% HAdd.hAdd skoSX (binrel% HMul.hMul let17 skoS3))
  let let19 := (binrel% HMul.hMul let2 let18)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let16 let15))
  let let21 := (binrel% GE.ge let20 let14)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let20 let14)
  let let24 := (Neg.neg (Int.ofNat 1))
  let let25 := (binrel% GE.ge (binrel% HMul.hMul let24 skoS3) let1)
  let let26 := (Not let25)
  let let27 := (Not let26)
  let let28 := (Eq let27 let25)
  let let29 := (binrel% HMul.hMul (Neg.neg let17) skoS3)
  let let30 := (Eq let25 let25)
  let let31 := (binrel% LE.le skoSX let4)
  let let32 := (Not let31)
  let let33 := (binrel% LE.le skoX let4)
  let let34 := (Not let33)
  let let35 := (binrel% LE.le skoX let2)
  let let36 := (Not let35)
  let let37 := (binrel% HMul.hMul skoS3 let11)
  let let38 := (binrel% LE.le let37 skoSX)
  let let39 := (Not let38)
  let let40 := (And let39 (And let36 (And let34 (And let32 let6))))
  let let41 := (binrel% HMul.hMul let24 skoSX)
  let let42 := (Eq let37 let29)
  let let43 := (binrel% GE.ge let41 let1)
  let let44 := (binrel% LT.lt let11 let1)
  let let45 := (binrel% GE.ge let18 let1)
  let let46 := (Eq let45 let45)
  let let47 := (binrel% HMul.hMul let24 skoX)
  let let48 := (binrel% GE.ge let47 let24)
  let let49 := (Not let45)
  let let50 := (Not let49)
  let let51 := (Eq let45 let50)
  let let52 := (Eq let50 let45)
  let let53 := (binrel% GE.ge let47 let1)
  let let54 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let4 let4))
  let let55 := (binrel% GT.gt skoSX let4)
  let let56 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let29 let41))
  let let57 := (Eq let25 let27)
  let let58 := (Eq let43 let43)
  let let59 := (Not True)
  let let60 := (Not let43)
  let let61 := (Not let60)
  let let62 := (Eq let61 let43)
  let let63 := (Eq let43 let61)
  let let64 := (binrel% GE.ge let4 let4)
  let let65 := (binrel% GE.ge let18 let4)
  let let66 := (binrel% LE.le let29 skoSX)
  let let67 := (Not let65)
  let let68 := (binrel% LT.lt let18 let4)
  let let69 := (Not let53)
  let let70 := (Not let48)
  let let71 := (And let49 (And let70 (And let69 (And let60 let26))))
  let let72 := (Eq let40 let71)
  let let73 := (Or let43 (Or let25 let45))
  let let74 := (Or let61 (Or let27 let50))
  let let75 := (Not let68)
  let let76 := (binrel% LT.lt let15 let10)
  let let77 := (And let9 let55)
  let let78 := (binrel% LT.lt let16 let12)
  let let79 := (And let44 let7)
  let let80 := (binrel% LT.lt let19 let13)
  let let81 := (And let3 let68)
(Eq let3 True) → (Eq let7 let6) → (Eq let9 True) → (Eq let23 let22) → let28 → (Eq let16 let29) → (Eq let30 True) → (Eq let40 let40) → (Eq let11 let11) → (Eq let15 let41) → let42 → (Eq let31 let43) → (Eq let12 let4) → (Eq let44 True) → (Eq let46 True) → (Eq let35 let48) → (Eq let52 let51) → (Eq let33 let53) → (Eq let54 let4) → (Eq let55 let32) → (Eq let5 let25) → (Eq let56 let4) → (Eq let28 let57) → (Eq let19 let18) → (Eq let58 True) → (Eq let59 False) → let62 → (Eq let62 let63) → (Eq let64 True) → (Eq let65 let45) → (Eq let66 let45) → (Eq let13 let4) → let52 → (Eq let68 let67) → (Eq let10 let4) → let40 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% LE.le skoS3 let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoS3 let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% LT.lt let8 let1)
  let let10 := (binrel% HMul.hMul let8 let4)
  let let11 := (Neg.neg (Rat.ofInt 3))
  let let12 := (binrel% HMul.hMul let11 let4)
  let let13 := (binrel% HMul.hMul let2 let4)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 let10))
  let let15 := (binrel% HMul.hMul let8 skoSX)
  let let16 := (binrel% HMul.hMul let11 skoS3)
  let let17 := (Int.ofNat 3)
  let let18 := (binrel% HAdd.hAdd skoSX (binrel% HMul.hMul let17 skoS3))
  let let19 := (binrel% HMul.hMul let2 let18)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let16 let15))
  let let21 := (binrel% GE.ge let20 let14)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let20 let14)
  let let24 := (Neg.neg (Int.ofNat 1))
  let let25 := (binrel% GE.ge (binrel% HMul.hMul let24 skoS3) let1)
  let let26 := (Not let25)
  let let27 := (Not let26)
  let let28 := (Eq let27 let25)
  let let29 := (binrel% HMul.hMul (Neg.neg let17) skoS3)
  let let30 := (Eq let25 let25)
  let let31 := (binrel% LE.le skoSX let4)
  let let32 := (Not let31)
  let let33 := (binrel% LE.le skoX let4)
  let let34 := (Not let33)
  let let35 := (binrel% LE.le skoX let2)
  let let36 := (Not let35)
  let let37 := (binrel% HMul.hMul skoS3 let11)
  let let38 := (binrel% LE.le let37 skoSX)
  let let39 := (Not let38)
  let let40 := (And let39 (And let36 (And let34 (And let32 let6))))
  let let41 := (binrel% HMul.hMul let24 skoSX)
  let let42 := (Eq let37 let29)
  let let43 := (binrel% GE.ge let41 let1)
  let let44 := (binrel% LT.lt let11 let1)
  let let45 := (binrel% GE.ge let18 let1)
  let let46 := (Eq let45 let45)
  let let47 := (binrel% HMul.hMul let24 skoX)
  let let48 := (binrel% GE.ge let47 let24)
  let let49 := (Not let45)
  let let50 := (Not let49)
  let let51 := (Eq let45 let50)
  let let52 := (Eq let50 let45)
  let let53 := (binrel% GE.ge let47 let1)
  let let54 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let4 let4))
  let let55 := (binrel% GT.gt skoSX let4)
  let let56 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let29 let41))
  let let57 := (Eq let25 let27)
  let let58 := (Eq let43 let43)
  let let59 := (Not True)
  let let60 := (Not let43)
  let let61 := (Not let60)
  let let62 := (Eq let61 let43)
  let let63 := (Eq let43 let61)
  let let64 := (binrel% GE.ge let4 let4)
  let let65 := (binrel% GE.ge let18 let4)
  let let66 := (binrel% LE.le let29 skoSX)
  let let67 := (Not let65)
  let let68 := (binrel% LT.lt let18 let4)
  let let69 := (Not let53)
  let let70 := (Not let48)
  let let71 := (And let49 (And let70 (And let69 (And let60 let26))))
  let let72 := (Eq let40 let71)
  let let73 := (Or let43 (Or let25 let45))
  let let74 := (Or let61 (Or let27 let50))
  let let75 := (Not let68)
  let let76 := (binrel% LT.lt let15 let10)
  let let77 := (And let9 let55)
  let let78 := (binrel% LT.lt let16 let12)
  let let79 := (And let44 let7)
  let let80 := (binrel% LT.lt let19 let13)
  let let81 := (And let3 let68)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let9 True) => -- EVALUATE
fun lean_r3 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r4 : let28 => -- THEORY_REWRITE_BOOL
fun lean_r5 : (Eq let16 let29) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let30 True) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let40 let40) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let11 let11) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let15 let41) => -- THEORY_REWRITE_ARITH
fun lean_r10 : let42 => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let31 let43) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let12 let4) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let44 True) => -- EVALUATE
fun lean_r14 : (Eq let46 True) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let35 let48) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let52 let51) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let33 let53) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let54 let4) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let55 let32) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let5 let25) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let56 let4) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let28 let57) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let58 True) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let59 False) => -- THEORY_REWRITE_BOOL
fun lean_r26 : let62 => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let62 let63) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let64 True) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let65 let45) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let66 let45) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let13 let4) => -- THEORY_REWRITE_ARITH
fun lean_r32 : let52 => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let68 let67) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let10 let4) => -- THEORY_REWRITE_ARITH
fun lean_a35 : let40 => by
have lean_s0 : (Or let61 (Or let27 (Or let50 False))) :=
  (scope (fun lean_a36 : let60 =>
    (scope (fun lean_a37 : let26 =>
      (scope (fun lean_a38 : let49 =>
        have lean_s0 : (Eq let67 let49) := by timed flipCongrArg lean_r29 [Not]
        have lean_s1 : (Eq let68 let49) := by timed Eq.trans lean_r33 lean_s0
        have lean_s2 : (Eq let49 let68) := by timed Eq.symm lean_s1
        have lean_s3 : let68 := by timed eqResolve lean_a38 lean_s2
        have lean_s4 : (Or let75 False) :=
          (scope (fun lean_a39 : let68 =>
            have lean_s4 : let3 := by timed trueElim lean_r0
            have lean_s5 : let81 := by timed And.intro lean_s4 lean_a39
            have lean_s6 : (Implies let81 let80) := by arithMulPos [let18, let4, let2], 0
            have lean_s7 : let80 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let44 := by timed trueElim lean_r13
            have lean_s9 : (Eq let6 let26) := by timed flipCongrArg lean_r20 [Not]
            have lean_s10 : (Eq let7 let26) := by timed Eq.trans lean_r1 lean_s9
            have lean_s11 : (Eq let26 let7) := by timed Eq.symm lean_s10
            have lean_s12 : let7 := by timed eqResolve lean_a37 lean_s11
            have lean_s13 : let79 := by timed And.intro lean_s8 lean_s12
            have lean_s14 : (Implies let79 let78) := by arithMulNeg [skoS3, let4, let11], 2
            have lean_s15 : let78 := by timed modusPonens lean_s13 lean_s14
            have lean_s16 : let9 := by timed trueElim lean_r2
            have lean_s17 : (Eq let32 let60) := by timed flipCongrArg lean_r11 [Not]
            have lean_s18 : (Eq let55 let60) := by timed Eq.trans lean_r19 lean_s17
            have lean_s19 : (Eq let60 let55) := by timed Eq.symm lean_s18
            have lean_s20 : let55 := by timed eqResolve lean_a36 lean_s19
            have lean_s21 : let77 := by timed And.intro lean_s16 lean_s20
            have lean_s22 : (Implies let77 let76) := by arithMulNeg [skoSX, let4, let8], 2
            have lean_s23 : let76 := by timed modusPonens lean_s21 lean_s22
            have lean_s24 : let23 := by sumBounds [lean_s7, lean_s15, lean_s23]
            let lean_s25 := by timed congrHAdd lean_r5 lean_r9
            have lean_s26 : (Eq let20 let56) := by timed congrHAdd lean_r23 lean_s25
            have lean_s27 : (Eq let20 let4) := by timed Eq.trans lean_s26 lean_r21
            let lean_s28 := by timed flipCongrArg lean_s27 [GE.ge]
            let lean_s29 := by timed congrHAdd lean_r12 lean_r34
            have lean_s30 : (Eq let14 let54) := by timed congrHAdd lean_r31 lean_s29
            have lean_s31 : (Eq let14 let4) := by timed Eq.trans lean_s30 lean_r18
            have lean_s32 : (Eq let21 let64) := by timed congr lean_s28 lean_s31
            have lean_s33 : (Eq let21 True) := by timed Eq.trans lean_s32 lean_r28
            have lean_s34 : (Eq let22 let59) := by timed flipCongrArg lean_s33 [Not]
            have lean_s35 : (Eq let22 False) := by timed Eq.trans lean_s34 lean_r25
            have lean_s36 : (Eq let23 False) := by timed Eq.trans lean_r3 lean_s35
            show False from by timed eqResolve lean_s24 lean_s36
          ))
        have lean_s5 : let75 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let75 let50) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let75 let45) := by timed Eq.trans lean_s6 lean_r32
        have lean_s8 : (Eq let45 let65) := by timed Eq.symm lean_r29
        have lean_s9 : (Eq let75 let65) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let65 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let45 let75) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let65 let75) := by timed Eq.trans lean_r29 lean_s11
        have lean_s13 : let75 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let60 (And let26 let49))) := by liftOrNToNeg lean_s0
have lean_s2 : let74 := by timed flipNotAnd lean_s1 [let60, let26, let49]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let58 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let63 let58) := by timed congr lean_s5 lean_r26
have lean_s7 : (Eq let63 True) := by timed Eq.trans lean_s6 lean_r24
have lean_s8 : (Eq let62 True) := by timed Eq.trans lean_r27 lean_s7
have lean_s9 : let62 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let30 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let57 let30) := by timed congr lean_s12 lean_r4
have lean_s14 : (Eq let57 True) := by timed Eq.trans lean_s13 lean_r6
have lean_s15 : (Eq let28 True) := by timed Eq.trans lean_r22 lean_s14
have lean_s16 : let28 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let46 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let51 let46) := by timed congr lean_s19 lean_r32
have lean_s21 : (Eq let51 True) := by timed Eq.trans lean_s20 lean_r14
have lean_s22 : (Eq let52 True) := by timed Eq.trans lean_r16 lean_s21
have lean_s23 : let52 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq let74 let73) := by timed congr lean_s10 lean_s24
have lean_s26 : let73 := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Or let45 (Or let43 let25)) := by permutateOr lean_s26, [2, 0, 1], (- 1)
have lean_s28 : (Eq And And) := by timed rfl
have lean_s29 : (Eq skoS3 skoS3) := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [HMul.hMul]
have lean_s31 : (Eq let37 let37) := by timed congr lean_s30 lean_r8
have lean_s32 : let42 := by timed Eq.trans lean_s31 lean_r10
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq skoSX skoSX) := by timed rfl
have lean_s35 : (Eq let38 let66) := by timed congr lean_s33 lean_s34
have lean_s36 : (Eq let38 let45) := by timed Eq.trans lean_s35 lean_r30
have lean_s37 : (Eq let39 let49) := by timed flipCongrArg lean_s36 [Not]
let lean_s38 := by timed congr lean_s28 lean_s37
have lean_s39 : (Eq let36 let70) := by timed flipCongrArg lean_r15 [Not]
let lean_s40 := by timed congr lean_s28 lean_s39
have lean_s41 : (Eq let34 let69) := by timed flipCongrArg lean_r17 [Not]
let lean_s42 := by timed congr lean_s28 lean_s41
have lean_s43 : (Eq let32 let60) := by timed flipCongrArg lean_r11 [Not]
let lean_s44 := by timed congr lean_s28 lean_s43
have lean_s45 : (Eq let6 let26) := by timed flipCongrArg lean_r20 [Not]
let lean_s46 := by timed congr lean_s44 lean_s45
let lean_s47 := by timed congr lean_s42 lean_s46
let lean_s48 := by timed congr lean_s40 lean_s47
have lean_s49 : let72 := by timed congr lean_s38 lean_s48
have lean_s50 : let72 := by timed Eq.trans lean_r7 lean_s49
have lean_s51 : let71 := by timed eqResolve lean_a35 lean_s50
have lean_s52 : let26 := by andElim lean_s51, 4
let lean_s53 := by R1 lean_s27, lean_s52, let25, [(- 1), 0]
have lean_s54 : let60 := by andElim lean_s51, 3
let lean_s55 := by R1 lean_s53, lean_s54, let43, [(- 1), 0]
have lean_s56 : let49 := by andElim lean_s51, 0
exact (show False from by R1 lean_s55, lean_s56, let45, [0, 0])


