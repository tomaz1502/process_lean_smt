open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoT : Rat}
variable {skoA : Rat}
variable {skoT : Rat}
variable {skoB : Rat}
variable {skoB : Rat}
variable {skoA : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% GE.ge skoA let1)
  let let3 := (Not let2)
  let let4 := (binrel% LT.lt skoA let1)
  let let5 := (Int.ofNat 0)
  let let6 := (binrel% GE.ge skoA let5)
  let let7 := (Rat.ofInt 1)
  let let8 := (Neg.neg let7)
  let let9 := (binrel% LT.lt let8 let5)
  let let10 := (Neg.neg (Int.ofNat 1))
  let let11 := (binrel% HMul.hMul let10 skoA)
  let let12 := (binrel% HMul.hMul let8 skoA)
  let let13 := (binrel% HMul.hMul let7 let1)
  let let14 := (binrel% HMul.hMul let8 let1)
  let let15 := (binrel% HAdd.hAdd let1 let1)
  let let16 := (binrel% LE.le skoA let1)
  let let17 := (Not let16)
  let let18 := (binrel% GT.gt skoA let1)
  let let19 := (Not True)
  let let20 := (binrel% GT.gt let7 let5)
  let let21 := (binrel% GE.ge let11 let5)
  let let22 := (binrel% HMul.hMul let10 let1)
  let let23 := (Eq let1 let1)
  let let24 := (binrel% HMul.hMul let10 skoB)
  let let25 := (binrel% HAdd.hAdd let24 skoA)
  let let26 := (binrel% GE.ge let25 let5)
  let let27 := (binrel% LE.le skoB skoA)
  let let28 := (Not let27)
  let let29 := (binrel% LE.le skoT let7)
  let let30 := (Not let29)
  let let31 := (binrel% HMul.hMul skoA let8)
  let let32 := (binrel% LE.le skoB let31)
  let let33 := (Not let32)
  let let34 := (Eq skoB let1)
  let let35 := (And let34 (And let33 (And let30 let28)))
  let let36 := (binrel% HAdd.hAdd let1 skoA)
  let let37 := (binrel% GE.ge (binrel% HMul.hMul let10 skoT) let10)
  let let38 := (binrel% HAdd.hAdd skoA let11)
  let let39 := (binrel% HAdd.hAdd let24 let11)
  let let40 := (binrel% GE.ge let39 let5)
  let let41 := (binrel% LE.le skoB let11)
  let let42 := (binrel% HAdd.hAdd let13 let14)
  let let43 := (binrel% HMul.hMul let7 skoA)
  let let44 := (binrel% HAdd.hAdd let43 let12)
  let let45 := (binrel% GE.ge let44 let42)
  let let46 := (Not let45)
  let let47 := (binrel% LT.lt let44 let42)
  let let48 := (binrel% HAdd.hAdd let1 let11)
  let let49 := (Not let21)
  let let50 := (Not let49)
  let let51 := (binrel% GE.ge let1 let1)
  let let52 := (Not let6)
  let let53 := (Not let37)
  let let54 := (And let49 (And let53 let52))
  let let55 := (And True let54)
  let let56 := (Eq let31 let11)
  let let57 := (Not let52)
  let let58 := (Not let26)
  let let59 := (Not let40)
  let let60 := (And let34 (And let59 (And let53 let58)))
  let let61 := (binrel% HAdd.hAdd let22 skoA)
  let let62 := (binrel% GE.ge let61 let5)
  let let63 := (Not let62)
  let let64 := (binrel% HAdd.hAdd let22 let11)
  let let65 := (binrel% GE.ge let64 let5)
  let let66 := (Not let65)
  let let67 := (And let23 (And let66 (And let53 let63)))
  let let68 := (Eq let5 let5)
  let let69 := (Eq skoA skoA)
  let let70 := (Eq let53 let53)
  let let71 := (Eq And And)
  let let72 := (Eq let11 let11)
  let let73 := (Eq let35 let60)
  let let74 := (Or let21 let6)
  let let75 := (Or let50 let57)
  let let76 := (binrel% LT.lt let12 let14)
  let let77 := (And let9 let18)
  let let78 := (binrel% LT.lt let43 let13)
  let let79 := (And let20 let4)
(Eq let4 let3) → (Eq let2 let6) → (Eq let9 True) → (Eq let12 let11) → (Eq let13 let1) → (Eq let14 let1) → (Eq let15 let1) → (Eq let18 let17) → (Eq let19 False) → (Eq let20 True) → (Eq let16 let21) → (Eq let22 let1) → (Eq let23 True) → (Eq let27 let26) → (Eq let35 let35) → (Eq let36 skoA) → (Eq let29 let37) → (Eq let38 let1) → (Eq let41 let40) → (Eq let47 let46) → (Eq let48 let11) → (Eq let50 let21) → (Eq let51 True) → (Eq let55 let54) → (Eq let8 let8) → (Eq let43 skoA) → let56 → (Eq let57 let6) → let35 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% GE.ge skoA let1)
  let let3 := (Not let2)
  let let4 := (binrel% LT.lt skoA let1)
  let let5 := (Int.ofNat 0)
  let let6 := (binrel% GE.ge skoA let5)
  let let7 := (Rat.ofInt 1)
  let let8 := (Neg.neg let7)
  let let9 := (binrel% LT.lt let8 let5)
  let let10 := (Neg.neg (Int.ofNat 1))
  let let11 := (binrel% HMul.hMul let10 skoA)
  let let12 := (binrel% HMul.hMul let8 skoA)
  let let13 := (binrel% HMul.hMul let7 let1)
  let let14 := (binrel% HMul.hMul let8 let1)
  let let15 := (binrel% HAdd.hAdd let1 let1)
  let let16 := (binrel% LE.le skoA let1)
  let let17 := (Not let16)
  let let18 := (binrel% GT.gt skoA let1)
  let let19 := (Not True)
  let let20 := (binrel% GT.gt let7 let5)
  let let21 := (binrel% GE.ge let11 let5)
  let let22 := (binrel% HMul.hMul let10 let1)
  let let23 := (Eq let1 let1)
  let let24 := (binrel% HMul.hMul let10 skoB)
  let let25 := (binrel% HAdd.hAdd let24 skoA)
  let let26 := (binrel% GE.ge let25 let5)
  let let27 := (binrel% LE.le skoB skoA)
  let let28 := (Not let27)
  let let29 := (binrel% LE.le skoT let7)
  let let30 := (Not let29)
  let let31 := (binrel% HMul.hMul skoA let8)
  let let32 := (binrel% LE.le skoB let31)
  let let33 := (Not let32)
  let let34 := (Eq skoB let1)
  let let35 := (And let34 (And let33 (And let30 let28)))
  let let36 := (binrel% HAdd.hAdd let1 skoA)
  let let37 := (binrel% GE.ge (binrel% HMul.hMul let10 skoT) let10)
  let let38 := (binrel% HAdd.hAdd skoA let11)
  let let39 := (binrel% HAdd.hAdd let24 let11)
  let let40 := (binrel% GE.ge let39 let5)
  let let41 := (binrel% LE.le skoB let11)
  let let42 := (binrel% HAdd.hAdd let13 let14)
  let let43 := (binrel% HMul.hMul let7 skoA)
  let let44 := (binrel% HAdd.hAdd let43 let12)
  let let45 := (binrel% GE.ge let44 let42)
  let let46 := (Not let45)
  let let47 := (binrel% LT.lt let44 let42)
  let let48 := (binrel% HAdd.hAdd let1 let11)
  let let49 := (Not let21)
  let let50 := (Not let49)
  let let51 := (binrel% GE.ge let1 let1)
  let let52 := (Not let6)
  let let53 := (Not let37)
  let let54 := (And let49 (And let53 let52))
  let let55 := (And True let54)
  let let56 := (Eq let31 let11)
  let let57 := (Not let52)
  let let58 := (Not let26)
  let let59 := (Not let40)
  let let60 := (And let34 (And let59 (And let53 let58)))
  let let61 := (binrel% HAdd.hAdd let22 skoA)
  let let62 := (binrel% GE.ge let61 let5)
  let let63 := (Not let62)
  let let64 := (binrel% HAdd.hAdd let22 let11)
  let let65 := (binrel% GE.ge let64 let5)
  let let66 := (Not let65)
  let let67 := (And let23 (And let66 (And let53 let63)))
  let let68 := (Eq let5 let5)
  let let69 := (Eq skoA skoA)
  let let70 := (Eq let53 let53)
  let let71 := (Eq And And)
  let let72 := (Eq let11 let11)
  let let73 := (Eq let35 let60)
  let let74 := (Or let21 let6)
  let let75 := (Or let50 let57)
  let let76 := (binrel% LT.lt let12 let14)
  let let77 := (And let9 let18)
  let let78 := (binrel% LT.lt let43 let13)
  let let79 := (And let20 let4)
fun lean_r0 : (Eq let4 let3) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let2 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let9 True) => -- EVALUATE
fun lean_r3 : (Eq let12 let11) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let13 let1) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let14 let1) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let15 let1) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let19 False) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let20 True) => -- EVALUATE
fun lean_r10 : (Eq let16 let21) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let22 let1) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let23 True) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let35 let35) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let36 skoA) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let29 let37) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let38 let1) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let47 let46) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let48 let11) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let50 let21) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let51 True) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let55 let54) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let8 let8) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let43 skoA) => -- THEORY_REWRITE_ARITH
fun lean_r26 : let56 => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let57 let6) => -- THEORY_REWRITE_BOOL
fun lean_a28 : let35 => by
have lean_s0 : (Or let50 (Or let57 False)) :=
  (scope (fun lean_a29 : let49 =>
    (scope (fun lean_a30 : let52 =>
      have lean_s0 : let20 := by timed trueElim lean_r9
      have lean_s1 : (Eq let3 let52) := by timed flipCongrArg lean_r1 [Not]
      have lean_s2 : (Eq let4 let52) := by timed Eq.trans lean_r0 lean_s1
      have lean_s3 : (Eq let52 let4) := by timed Eq.symm lean_s2
      have lean_s4 : let4 := by timed eqResolve lean_a30 lean_s3
      have lean_s5 : let79 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let79 let78) := by arithMulPos [skoA, let1, let7], 0
      have lean_s7 : let78 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let9 := by timed trueElim lean_r2
      have lean_s9 : (Eq let17 let49) := by timed flipCongrArg lean_r10 [Not]
      have lean_s10 : (Eq let18 let49) := by timed Eq.trans lean_r7 lean_s9
      have lean_s11 : (Eq let49 let18) := by timed Eq.symm lean_s10
      have lean_s12 : let18 := by timed eqResolve lean_a29 lean_s11
      have lean_s13 : let77 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let77 let76) := by arithMulNeg [skoA, let1, let8], 2
      have lean_s15 : let76 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let47 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r25 [HAdd.hAdd]
      have lean_s18 : (Eq let44 let38) := by timed congr lean_s17 lean_r3
      have lean_s19 : (Eq let44 let1) := by timed Eq.trans lean_s18 lean_r17
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r4 [HAdd.hAdd]
      have lean_s22 : (Eq let42 let15) := by timed congr lean_s21 lean_r5
      have lean_s23 : (Eq let42 let1) := by timed Eq.trans lean_s22 lean_r6
      have lean_s24 : (Eq let45 let51) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let45 True) := by timed Eq.trans lean_s24 lean_r22
      have lean_s26 : (Eq let46 let19) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let46 False) := by timed Eq.trans lean_s26 lean_r8
      have lean_s28 : (Eq let47 False) := by timed Eq.trans lean_r19 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let49 let52)) := by liftOrNToNeg lean_s0
have lean_s2 : let75 := by timed flipNotAnd lean_s1 [let49, let52]
let lean_s3 := by timed flipCongrArg lean_r21 [Or]
have lean_s4 : (Eq let75 let74) := by timed congr lean_s3 lean_r27
have lean_s5 : let74 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : let71 := by timed rfl
have lean_s7 : (Eq let34 let34) := by timed rfl
let lean_s8 := by timed congr lean_s6 lean_s7
have lean_s9 : (Eq skoB skoB) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [LE.le]
have lean_s11 : let69 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [HMul.hMul]
have lean_s13 : (Eq let31 let31) := by timed congr lean_s12 lean_r24
have lean_s14 : let56 := by timed Eq.trans lean_s13 lean_r26
have lean_s15 : (Eq let32 let41) := by timed congr lean_s10 lean_s14
have lean_s16 : (Eq let32 let40) := by timed Eq.trans lean_s15 lean_r18
have lean_s17 : (Eq let33 let59) := by timed flipCongrArg lean_s16 [Not]
let lean_s18 := by timed congr lean_s6 lean_s17
have lean_s19 : (Eq let30 let53) := by timed flipCongrArg lean_r16 [Not]
let lean_s20 := by timed congr lean_s6 lean_s19
have lean_s21 : (Eq let28 let58) := by timed flipCongrArg lean_r13 [Not]
let lean_s22 := by timed congr lean_s20 lean_s21
let lean_s23 := by timed congr lean_s18 lean_s22
have lean_s24 : let73 := by timed congr lean_s8 lean_s23
have lean_s25 : let73 := by timed Eq.trans lean_r14 lean_s24
have lean_s26 : let71 := by timed rfl
have lean_s27 : let60 := by timed eqResolve lean_a28 lean_s25
have lean_s28 : let34 := by andElim lean_s27, 0
let lean_s29 := by timed flipCongrArg lean_s28 [Eq]
have lean_s30 : let23 := by timed rfl
have lean_s31 : (Eq let34 let23) := by timed congr lean_s29 lean_s30
let lean_s32 := by timed congr lean_s26 lean_s31
have lean_s33 : (Eq let10 let10) := by timed rfl
let lean_s34 := by timed flipCongrArg lean_s33 [HMul.hMul]
have lean_s35 : (Eq let24 let22) := by timed congr lean_s34 lean_s28
let lean_s36 := by timed flipCongrArg lean_s35 [HAdd.hAdd]
have lean_s37 : let72 := by timed rfl
have lean_s38 : (Eq let39 let64) := by timed congr lean_s36 lean_s37
let lean_s39 := by timed flipCongrArg lean_s38 [GE.ge]
have lean_s40 : let68 := by timed rfl
have lean_s41 : (Eq let40 let65) := by timed congr lean_s39 lean_s40
have lean_s42 : (Eq let59 let66) := by timed flipCongrArg lean_s41 [Not]
let lean_s43 := by timed congr lean_s26 lean_s42
have lean_s44 : let70 := by timed rfl
let lean_s45 := by timed congr lean_s26 lean_s44
let lean_s46 := by timed flipCongrArg lean_s35 [HAdd.hAdd]
have lean_s47 : let69 := by timed rfl
have lean_s48 : (Eq let25 let61) := by timed congr lean_s46 lean_s47
let lean_s49 := by timed flipCongrArg lean_s48 [GE.ge]
have lean_s50 : (Eq let26 let62) := by timed congr lean_s49 lean_s40
have lean_s51 : (Eq let58 let63) := by timed flipCongrArg lean_s50 [Not]
let lean_s52 := by timed congr lean_s45 lean_s51
let lean_s53 := by timed congr lean_s43 lean_s52
have lean_s54 : (Eq let60 let67) := by timed congr lean_s32 lean_s53
have lean_s55 : let71 := by timed rfl
let lean_s56 := by timed congr lean_s55 lean_r12
let lean_s57 := by timed flipCongrArg lean_r11 [HAdd.hAdd]
have lean_s58 : let72 := by timed rfl
have lean_s59 : (Eq let64 let48) := by timed congr lean_s57 lean_s58
have lean_s60 : (Eq let64 let11) := by timed Eq.trans lean_s59 lean_r20
let lean_s61 := by timed flipCongrArg lean_s60 [GE.ge]
have lean_s62 : let68 := by timed rfl
have lean_s63 : (Eq let65 let21) := by timed congr lean_s61 lean_s62
have lean_s64 : (Eq let66 let49) := by timed flipCongrArg lean_s63 [Not]
let lean_s65 := by timed congr lean_s55 lean_s64
have lean_s66 : let70 := by timed rfl
let lean_s67 := by timed congr lean_s55 lean_s66
let lean_s68 := by timed flipCongrArg lean_r11 [HAdd.hAdd]
have lean_s69 : (Eq let61 let36) := by timed congr lean_s68 lean_s11
have lean_s70 : (Eq let61 skoA) := by timed Eq.trans lean_s69 lean_r15
let lean_s71 := by timed flipCongrArg lean_s70 [GE.ge]
have lean_s72 : (Eq let62 let6) := by timed congr lean_s71 lean_s62
have lean_s73 : (Eq let63 let52) := by timed flipCongrArg lean_s72 [Not]
let lean_s74 := by timed congr lean_s67 lean_s73
let lean_s75 := by timed congr lean_s65 lean_s74
have lean_s76 : (Eq let67 let55) := by timed congr lean_s56 lean_s75
have lean_s77 : (Eq let67 let54) := by timed Eq.trans lean_s76 lean_r23
have lean_s78 : (Eq let60 let54) := by timed Eq.trans lean_s54 lean_s77
have lean_s79 : (Eq let35 let54) := by timed Eq.trans lean_s25 lean_s78
have lean_s80 : let54 := by timed eqResolve lean_a28 lean_s79
have lean_s81 : let52 := by andElim lean_s80, 2
let lean_s82 := by R1 lean_s5, lean_s81, let6, [(- 1), 0]
have lean_s83 : let49 := by andElim lean_s80, 0
exact (show False from by R1 lean_s82, lean_s83, let21, [0, 0])


