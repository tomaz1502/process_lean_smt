open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoB : Rat}
variable {skoT : Rat}
variable {skoA : Rat}
variable {skoT : Rat}
variable {skoB : Rat}
variable {skoA : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 2)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% HMul.hMul let2 let4)
  let let6 := (Rat.ofInt 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 let4)
  let let9 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let8 let5))
  let let10 := (binrel% HMul.hMul let2 skoB)
  let let11 := (binrel% HAdd.hAdd skoB skoA)
  let let12 := (binrel% HMul.hMul let7 let11)
  let let13 := (Neg.neg (Int.ofNat 1))
  let let14 := (binrel% HMul.hMul let13 skoA)
  let let15 := (binrel% HAdd.hAdd skoB let14)
  let let16 := (binrel% HMul.hMul let7 let15)
  let let17 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let12 let10))
  let let18 := (binrel% GE.ge let17 let9)
  let let19 := (Not let18)
  let let20 := (binrel% LT.lt let17 let9)
  let let21 := (binrel% HMul.hMul let13 skoB)
  let let22 := (binrel% HAdd.hAdd let21 skoA)
  let let23 := (binrel% HAdd.hAdd let21 let14)
  let let24 := (binrel% HMul.hMul (Int.ofNat 2) skoB)
  let let25 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let4 let4))
  let let26 := (binrel% GE.ge let4 let4)
  let let27 := (binrel% LE.le let15 let4)
  let let28 := (Not let27)
  let let29 := (binrel% GT.gt let15 let4)
  let let30 := (Not True)
  let let31 := (binrel% GE.ge let22 let1)
  let let32 := (Not let31)
  let let33 := (Not let32)
  let let34 := (Eq let31 let33)
  let let35 := (Eq let33 let31)
  let let36 := (binrel% GE.ge (binrel% HMul.hMul let13 skoT) let13)
  let let37 := (binrel% LE.le skoT let6)
  let let38 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let23 let24))
  let let39 := (Eq let31 let31)
  let let40 := (binrel% GE.ge let23 let1)
  let let41 := (binrel% LE.le skoB let14)
  let let42 := (binrel% HMul.hMul skoA let7)
  let let43 := (Eq let42 let14)
  let let44 := (binrel% LE.le skoB skoA)
  let let45 := (binrel% LE.le let11 let4)
  let let46 := (Eq let40 let40)
  let let47 := (Not let44)
  let let48 := (Not let37)
  let let49 := (binrel% LE.le skoB let42)
  let let50 := (Not let49)
  let let51 := (binrel% LE.le skoB let4)
  let let52 := (And let51 (And let50 (And let48 let47)))
  let let53 := (Not let45)
  let let54 := (binrel% GT.gt let11 let4)
  let let55 := (Not let40)
  let let56 := (Not let55)
  let let57 := (Eq let56 let40)
  let let58 := (binrel% LT.lt let7 let1)
  let let59 := (binrel% GE.ge let21 let1)
  let let60 := (Eq let40 let56)
  let let61 := (Not let36)
  let let62 := (And let59 (And let55 (And let61 let32)))
  let let63 := (Eq let52 let62)
  let let64 := (Not let59)
  let let65 := (Or let64 (Or let40 let31))
  let let66 := (Or let64 (Or let56 let33))
  let let67 := (Not let29)
  let let68 := (binrel% LE.le let10 let5)
  let let69 := (And let3 let51)
  let let70 := (binrel% LT.lt let12 let8)
  let let71 := (And let58 let54)
  let let72 := (binrel% LT.lt let16 let8)
  let let73 := (And let58 let29)
(Eq let3 True) → (Eq let20 let19) → (Eq let16 let22) → (Eq let12 let23) → (Eq let10 let24) → (Eq let25 let4) → (Eq let26 True) → (Eq let29 let28) → (Eq let30 False) → (Eq let27 let31) → (Eq let35 let34) → (Eq let37 let36) → (Eq let38 let4) → (Eq let39 True) → (Eq let41 let40) → let35 → let43 → (Eq let44 let31) → (Eq let7 let7) → (Eq let45 let40) → (Eq let5 let4) → (Eq let46 True) → (Eq let52 let52) → (Eq let54 let53) → (Eq let8 let4) → let57 → (Eq let58 True) → (Eq let51 let59) → (Eq let57 let60) → let52 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 2)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% HMul.hMul let2 let4)
  let let6 := (Rat.ofInt 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 let4)
  let let9 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let8 let5))
  let let10 := (binrel% HMul.hMul let2 skoB)
  let let11 := (binrel% HAdd.hAdd skoB skoA)
  let let12 := (binrel% HMul.hMul let7 let11)
  let let13 := (Neg.neg (Int.ofNat 1))
  let let14 := (binrel% HMul.hMul let13 skoA)
  let let15 := (binrel% HAdd.hAdd skoB let14)
  let let16 := (binrel% HMul.hMul let7 let15)
  let let17 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let12 let10))
  let let18 := (binrel% GE.ge let17 let9)
  let let19 := (Not let18)
  let let20 := (binrel% LT.lt let17 let9)
  let let21 := (binrel% HMul.hMul let13 skoB)
  let let22 := (binrel% HAdd.hAdd let21 skoA)
  let let23 := (binrel% HAdd.hAdd let21 let14)
  let let24 := (binrel% HMul.hMul (Int.ofNat 2) skoB)
  let let25 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let4 let4))
  let let26 := (binrel% GE.ge let4 let4)
  let let27 := (binrel% LE.le let15 let4)
  let let28 := (Not let27)
  let let29 := (binrel% GT.gt let15 let4)
  let let30 := (Not True)
  let let31 := (binrel% GE.ge let22 let1)
  let let32 := (Not let31)
  let let33 := (Not let32)
  let let34 := (Eq let31 let33)
  let let35 := (Eq let33 let31)
  let let36 := (binrel% GE.ge (binrel% HMul.hMul let13 skoT) let13)
  let let37 := (binrel% LE.le skoT let6)
  let let38 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let23 let24))
  let let39 := (Eq let31 let31)
  let let40 := (binrel% GE.ge let23 let1)
  let let41 := (binrel% LE.le skoB let14)
  let let42 := (binrel% HMul.hMul skoA let7)
  let let43 := (Eq let42 let14)
  let let44 := (binrel% LE.le skoB skoA)
  let let45 := (binrel% LE.le let11 let4)
  let let46 := (Eq let40 let40)
  let let47 := (Not let44)
  let let48 := (Not let37)
  let let49 := (binrel% LE.le skoB let42)
  let let50 := (Not let49)
  let let51 := (binrel% LE.le skoB let4)
  let let52 := (And let51 (And let50 (And let48 let47)))
  let let53 := (Not let45)
  let let54 := (binrel% GT.gt let11 let4)
  let let55 := (Not let40)
  let let56 := (Not let55)
  let let57 := (Eq let56 let40)
  let let58 := (binrel% LT.lt let7 let1)
  let let59 := (binrel% GE.ge let21 let1)
  let let60 := (Eq let40 let56)
  let let61 := (Not let36)
  let let62 := (And let59 (And let55 (And let61 let32)))
  let let63 := (Eq let52 let62)
  let let64 := (Not let59)
  let let65 := (Or let64 (Or let40 let31))
  let let66 := (Or let64 (Or let56 let33))
  let let67 := (Not let29)
  let let68 := (binrel% LE.le let10 let5)
  let let69 := (And let3 let51)
  let let70 := (binrel% LT.lt let12 let8)
  let let71 := (And let58 let54)
  let let72 := (binrel% LT.lt let16 let8)
  let let73 := (And let58 let29)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let16 let22) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let12 let23) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let10 let24) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let25 let4) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let26 True) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let30 False) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let27 let31) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let35 let34) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let38 let4) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let39 True) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r15 : let35 => -- THEORY_REWRITE_BOOL
fun lean_r16 : let43 => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let44 let31) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let7 let7) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let45 let40) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let5 let4) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let46 True) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let52 let52) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let54 let53) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let8 let4) => -- THEORY_REWRITE_ARITH
fun lean_r25 : let57 => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let58 True) => -- EVALUATE
fun lean_r27 : (Eq let51 let59) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let57 let60) => -- THEORY_REWRITE_BOOL
fun lean_a29 : let52 => by
have lean_s0 : (Or let64 (Or let56 (Or let33 False))) :=
  (scope (fun lean_a30 : let59 =>
    (scope (fun lean_a31 : let55 =>
      (scope (fun lean_a32 : let32 =>
        have lean_s0 : (Eq let28 let32) := by timed flipCongrArg lean_r9 [Not]
        have lean_s1 : (Eq let29 let32) := by timed Eq.trans lean_r7 lean_s0
        have lean_s2 : (Eq let32 let29) := by timed Eq.symm lean_s1
        have lean_s3 : let29 := by timed eqResolve lean_a32 lean_s2
        have lean_s4 : (Or let67 False) :=
          (scope (fun lean_a33 : let29 =>
            have lean_s4 : let58 := by timed trueElim lean_r26
            have lean_s5 : let73 := by timed And.intro lean_s4 lean_a33
            have lean_s6 : (Implies let73 let72) := by arithMulNeg [let15, let4, let7], 2
            have lean_s7 : let72 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let53 let55) := by timed flipCongrArg lean_r19 [Not]
            have lean_s9 : (Eq let54 let55) := by timed Eq.trans lean_r23 lean_s8
            have lean_s10 : (Eq let55 let54) := by timed Eq.symm lean_s9
            have lean_s11 : let54 := by timed eqResolve lean_a31 lean_s10
            have lean_s12 : let71 := by timed And.intro lean_s4 lean_s11
            have lean_s13 : (Implies let71 let70) := by arithMulNeg [let11, let4, let7], 2
            have lean_s14 : let70 := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : let3 := by timed trueElim lean_r0
            have lean_s16 : (Eq let59 let51) := by timed Eq.symm lean_r27
            have lean_s17 : let51 := by timed eqResolve lean_a30 lean_s16
            have lean_s18 : let69 := by timed And.intro lean_s15 lean_s17
            have lean_s19 : (Implies let69 let68) := by arithMulPos [skoB, let4, let2], 1
            have lean_s20 : let68 := by timed modusPonens lean_s18 lean_s19
            have lean_s21 : let20 := by sumBounds [lean_s7, lean_s14, lean_s20]
            let lean_s22 := by timed congrHAdd lean_r3 lean_r4
            have lean_s23 : (Eq let17 let38) := by timed congrHAdd lean_r2 lean_s22
            have lean_s24 : (Eq let17 let4) := by timed Eq.trans lean_s23 lean_r12
            let lean_s25 := by timed flipCongrArg lean_s24 [GE.ge]
            let lean_s26 := by timed congrHAdd lean_r24 lean_r20
            have lean_s27 : (Eq let9 let25) := by timed congrHAdd lean_r24 lean_s26
            have lean_s28 : (Eq let9 let4) := by timed Eq.trans lean_s27 lean_r5
            have lean_s29 : (Eq let18 let26) := by timed congr lean_s25 lean_s28
            have lean_s30 : (Eq let18 True) := by timed Eq.trans lean_s29 lean_r6
            have lean_s31 : (Eq let19 let30) := by timed flipCongrArg lean_s30 [Not]
            have lean_s32 : (Eq let19 False) := by timed Eq.trans lean_s31 lean_r8
            have lean_s33 : (Eq let20 False) := by timed Eq.trans lean_r1 lean_s32
            show False from by timed eqResolve lean_s21 lean_s33
          ))
        have lean_s5 : let67 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let67 let33) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let67 let31) := by timed Eq.trans lean_s6 lean_r15
        have lean_s8 : (Eq let31 let27) := by timed Eq.symm lean_r9
        have lean_s9 : (Eq let67 let27) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let27 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let31 let67) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let27 let67) := by timed Eq.trans lean_r9 lean_s11
        have lean_s13 : let67 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let59 (And let55 let32))) := by liftOrNToNeg lean_s0
have lean_s2 : let66 := by timed flipNotAnd lean_s1 [let59, let55, let32]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let64 let64) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let46 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let60 let46) := by timed congr lean_s7 lean_r25
have lean_s9 : (Eq let60 True) := by timed Eq.trans lean_s8 lean_r21
have lean_s10 : (Eq let57 True) := by timed Eq.trans lean_r28 lean_s9
have lean_s11 : let57 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let39 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let34 let39) := by timed congr lean_s14 lean_r15
have lean_s16 : (Eq let34 True) := by timed Eq.trans lean_s15 lean_r13
have lean_s17 : (Eq let35 True) := by timed Eq.trans lean_r10 lean_s16
have lean_s18 : let35 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s12 lean_s18
have lean_s20 : (Eq let66 let65) := by timed congr lean_s5 lean_s19
have lean_s21 : let65 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let40 (Or let31 let64)) := by permutateOr lean_s21, [1, 2, 0], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
let lean_s24 := by timed congr lean_s23 lean_r27
have lean_s25 : (Eq skoB skoB) := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [LE.le]
have lean_s27 : (Eq skoA skoA) := by timed rfl
let lean_s28 := by timed flipCongrArg lean_s27 [HMul.hMul]
have lean_s29 : (Eq let42 let42) := by timed congr lean_s28 lean_r18
have lean_s30 : let43 := by timed Eq.trans lean_s29 lean_r16
have lean_s31 : (Eq let49 let41) := by timed congr lean_s26 lean_s30
have lean_s32 : (Eq let49 let40) := by timed Eq.trans lean_s31 lean_r14
have lean_s33 : (Eq let50 let55) := by timed flipCongrArg lean_s32 [Not]
let lean_s34 := by timed congr lean_s23 lean_s33
have lean_s35 : (Eq let48 let61) := by timed flipCongrArg lean_r11 [Not]
let lean_s36 := by timed congr lean_s23 lean_s35
have lean_s37 : (Eq let47 let32) := by timed flipCongrArg lean_r17 [Not]
let lean_s38 := by timed congr lean_s36 lean_s37
let lean_s39 := by timed congr lean_s34 lean_s38
have lean_s40 : let63 := by timed congr lean_s24 lean_s39
have lean_s41 : let63 := by timed Eq.trans lean_r22 lean_s40
have lean_s42 : let62 := by timed eqResolve lean_a29 lean_s41
have lean_s43 : let32 := by andElim lean_s42, 3
let lean_s44 := by R1 lean_s22, lean_s43, let31, [(- 1), 0]
have lean_s45 : let55 := by andElim lean_s42, 1
let lean_s46 := by R1 lean_s44, lean_s45, let40, [(- 1), 0]
have lean_s47 : let59 := by andElim lean_s42, 0
exact (show False from by R2 lean_s46, lean_s47, let59, [0, 0])


