open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoB : Rat}
variable {skoT : Rat}
variable {skoA : Rat}
variable {skoT : Rat}
variable {skoB : Rat}
variable {skoA : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% LE.le skoA let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoA let4)
  let let8 := (binrel% HAdd.hAdd skoA skoT)
  let let9 := (binrel% GE.ge let8 let1)
  let let10 := (Neg.neg (Int.ofNat 1))
  let let11 := (binrel% HMul.hMul let10 skoA)
  let let12 := (binrel% LE.le let11 skoT)
  let let13 := (Neg.neg let2)
  let let14 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let13 let4))
  let let15 := (Eq let9 let9)
  let let16 := (binrel% HMul.hMul let13 let2)
  let let17 := (binrel% LE.le skoB skoA)
  let let18 := (Not let17)
  let let19 := (binrel% LE.le skoT let2)
  let let20 := (Not let19)
  let let21 := (binrel% HMul.hMul skoA let13)
  let let22 := (binrel% LE.le skoB let21)
  let let23 := (Not let22)
  let let24 := (binrel% LE.le let21 skoT)
  let let25 := (Not let24)
  let let26 := (And let25 (And let6 (And let23 (And let20 let18))))
  let let27 := (binrel% HMul.hMul let10 skoB)
  let let28 := (binrel% GE.ge (binrel% HAdd.hAdd skoA let27) let1)
  let let29 := (binrel% GE.ge let11 let1)
  let let30 := (Not let29)
  let let31 := (Not let30)
  let let32 := (Eq let29 let31)
  let let33 := (Eq let31 let29)
  let let34 := (Eq let21 let11)
  let let35 := (Not True)
  let let36 := (Not let9)
  let let37 := (Not let36)
  let let38 := (Eq let9 let37)
  let let39 := (Eq let37 let9)
  let let40 := (binrel% HMul.hMul let10 skoT)
  let let41 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let40 let11))
  let let42 := (binrel% GE.ge (binrel% HAdd.hAdd let11 let27) let1)
  let let43 := (binrel% LE.le skoB let11)
  let let44 := (binrel% LT.lt let13 let1)
  let let45 := (binrel% GE.ge let40 let10)
  let let46 := (binrel% HMul.hMul let13 let4)
  let let47 := (binrel% HMul.hMul let2 let4)
  let let48 := (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd let16 let46))
  let let49 := (binrel% HMul.hMul let13 skoA)
  let let50 := (binrel% HMul.hMul let13 skoT)
  let let51 := (binrel% HMul.hMul let2 let8)
  let let52 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 let49))
  let let53 := (binrel% GE.ge let52 let48)
  let let54 := (Not let53)
  let let55 := (binrel% LT.lt let52 let48)
  let let56 := (Not let45)
  let let57 := (Not let56)
  let let58 := (Eq let45 let57)
  let let59 := (Eq let57 let45)
  let let60 := (Eq let29 let29)
  let let61 := (binrel% GE.ge let8 let4)
  let let62 := (Not let61)
  let let63 := (binrel% LT.lt let8 let4)
  let let64 := (binrel% GE.ge let4 let13)
  let let65 := (binrel% GT.gt skoT let2)
  let let66 := (Eq let45 let45)
  let let67 := (Not let28)
  let let68 := (Not let42)
  let let69 := (And let36 (And let30 (And let68 (And let56 let67))))
  let let70 := (Eq let26 let69)
  let let71 := (Or let29 (Or let45 let9))
  let let72 := (Or let31 (Or let57 let37))
  let let73 := (Not let63)
  let let74 := (binrel% LT.lt let49 let46)
  let let75 := (And let44 let7)
  let let76 := (binrel% LT.lt let50 let16)
  let let77 := (And let44 let65)
  let let78 := (binrel% LT.lt let51 let47)
  let let79 := (And let3 let63)
(Eq let3 True) → (Eq let7 let6) → (Eq let12 let9) → (Eq let14 let13) → (Eq let15 True) → (Eq let16 let13) → (Eq let26 let26) → (Eq let17 let28) → (Eq let33 let32) → (Eq let5 let29) → let34 → (Eq let35 False) → (Eq let13 let13) → (Eq let39 let38) → (Eq let41 let4) → (Eq let43 let42) → (Eq let44 True) → (Eq let19 let45) → (Eq let55 let54) → (Eq let59 let58) → (Eq let60 True) → let33 → (Eq let61 let9) → let39 → (Eq let63 let62) → (Eq let64 True) → (Eq let65 let20) → (Eq let46 let4) → (Eq let47 let4) → (Eq let49 let11) → (Eq let66 True) → (Eq let50 let40) → let59 → (Eq let51 let8) → let26 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% LE.le skoA let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoA let4)
  let let8 := (binrel% HAdd.hAdd skoA skoT)
  let let9 := (binrel% GE.ge let8 let1)
  let let10 := (Neg.neg (Int.ofNat 1))
  let let11 := (binrel% HMul.hMul let10 skoA)
  let let12 := (binrel% LE.le let11 skoT)
  let let13 := (Neg.neg let2)
  let let14 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let13 let4))
  let let15 := (Eq let9 let9)
  let let16 := (binrel% HMul.hMul let13 let2)
  let let17 := (binrel% LE.le skoB skoA)
  let let18 := (Not let17)
  let let19 := (binrel% LE.le skoT let2)
  let let20 := (Not let19)
  let let21 := (binrel% HMul.hMul skoA let13)
  let let22 := (binrel% LE.le skoB let21)
  let let23 := (Not let22)
  let let24 := (binrel% LE.le let21 skoT)
  let let25 := (Not let24)
  let let26 := (And let25 (And let6 (And let23 (And let20 let18))))
  let let27 := (binrel% HMul.hMul let10 skoB)
  let let28 := (binrel% GE.ge (binrel% HAdd.hAdd skoA let27) let1)
  let let29 := (binrel% GE.ge let11 let1)
  let let30 := (Not let29)
  let let31 := (Not let30)
  let let32 := (Eq let29 let31)
  let let33 := (Eq let31 let29)
  let let34 := (Eq let21 let11)
  let let35 := (Not True)
  let let36 := (Not let9)
  let let37 := (Not let36)
  let let38 := (Eq let9 let37)
  let let39 := (Eq let37 let9)
  let let40 := (binrel% HMul.hMul let10 skoT)
  let let41 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let40 let11))
  let let42 := (binrel% GE.ge (binrel% HAdd.hAdd let11 let27) let1)
  let let43 := (binrel% LE.le skoB let11)
  let let44 := (binrel% LT.lt let13 let1)
  let let45 := (binrel% GE.ge let40 let10)
  let let46 := (binrel% HMul.hMul let13 let4)
  let let47 := (binrel% HMul.hMul let2 let4)
  let let48 := (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd let16 let46))
  let let49 := (binrel% HMul.hMul let13 skoA)
  let let50 := (binrel% HMul.hMul let13 skoT)
  let let51 := (binrel% HMul.hMul let2 let8)
  let let52 := (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let50 let49))
  let let53 := (binrel% GE.ge let52 let48)
  let let54 := (Not let53)
  let let55 := (binrel% LT.lt let52 let48)
  let let56 := (Not let45)
  let let57 := (Not let56)
  let let58 := (Eq let45 let57)
  let let59 := (Eq let57 let45)
  let let60 := (Eq let29 let29)
  let let61 := (binrel% GE.ge let8 let4)
  let let62 := (Not let61)
  let let63 := (binrel% LT.lt let8 let4)
  let let64 := (binrel% GE.ge let4 let13)
  let let65 := (binrel% GT.gt skoT let2)
  let let66 := (Eq let45 let45)
  let let67 := (Not let28)
  let let68 := (Not let42)
  let let69 := (And let36 (And let30 (And let68 (And let56 let67))))
  let let70 := (Eq let26 let69)
  let let71 := (Or let29 (Or let45 let9))
  let let72 := (Or let31 (Or let57 let37))
  let let73 := (Not let63)
  let let74 := (binrel% LT.lt let49 let46)
  let let75 := (And let44 let7)
  let let76 := (binrel% LT.lt let50 let16)
  let let77 := (And let44 let65)
  let let78 := (binrel% LT.lt let51 let47)
  let let79 := (And let3 let63)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let12 let9) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let14 let13) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let15 True) => -- THEORY_REWRITE_BOOL
fun lean_r5 : (Eq let16 let13) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let26 let26) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let17 let28) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let33 let32) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let5 let29) => -- THEORY_REWRITE_ARITH
fun lean_r10 : let34 => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let35 False) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let13 let13) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let39 let38) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let41 let4) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let43 let42) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let44 True) => -- EVALUATE
fun lean_r17 : (Eq let19 let45) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let59 let58) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let60 True) => -- THEORY_REWRITE_BOOL
fun lean_r21 : let33 => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let61 let9) => -- THEORY_REWRITE_ARITH
fun lean_r23 : let39 => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let64 True) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let65 let20) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let46 let4) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let47 let4) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let49 let11) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let66 True) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let50 let40) => -- THEORY_REWRITE_ARITH
fun lean_r32 : let59 => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let51 let8) => -- THEORY_REWRITE_ARITH
fun lean_a34 : let26 => by
have lean_s0 : (Or let31 (Or let57 (Or let37 False))) :=
  (scope (fun lean_a35 : let30 =>
    (scope (fun lean_a36 : let56 =>
      (scope (fun lean_a37 : let36 =>
        have lean_s0 : (Eq let62 let36) := by timed flipCongrArg lean_r22 [Not]
        have lean_s1 : (Eq let63 let36) := by timed Eq.trans lean_r24 lean_s0
        have lean_s2 : (Eq let36 let63) := by timed Eq.symm lean_s1
        have lean_s3 : let63 := by timed eqResolve lean_a37 lean_s2
        have lean_s4 : (Or let73 False) :=
          (scope (fun lean_a38 : let63 =>
            have lean_s4 : let3 := by timed trueElim lean_r0
            have lean_s5 : let79 := by timed And.intro lean_s4 lean_a38
            have lean_s6 : (Implies let79 let78) := by arithMulPos [let8, let4, let2], 0
            have lean_s7 : let78 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let44 := by timed trueElim lean_r16
            have lean_s9 : (Eq let20 let56) := by timed flipCongrArg lean_r17 [Not]
            have lean_s10 : (Eq let65 let56) := by timed Eq.trans lean_r26 lean_s9
            have lean_s11 : (Eq let56 let65) := by timed Eq.symm lean_s10
            have lean_s12 : let65 := by timed eqResolve lean_a36 lean_s11
            have lean_s13 : let77 := by timed And.intro lean_s8 lean_s12
            have lean_s14 : (Implies let77 let76) := by arithMulNeg [skoT, let2, let13], 2
            have lean_s15 : let76 := by timed modusPonens lean_s13 lean_s14
            have lean_s16 : (Eq let6 let30) := by timed flipCongrArg lean_r9 [Not]
            have lean_s17 : (Eq let7 let30) := by timed Eq.trans lean_r1 lean_s16
            have lean_s18 : (Eq let30 let7) := by timed Eq.symm lean_s17
            have lean_s19 : let7 := by timed eqResolve lean_a35 lean_s18
            have lean_s20 : let75 := by timed And.intro lean_s8 lean_s19
            have lean_s21 : (Implies let75 let74) := by arithMulNeg [skoA, let4, let13], 2
            have lean_s22 : let74 := by timed modusPonens lean_s20 lean_s21
            have lean_s23 : let55 := by sumBounds [lean_s7, lean_s15, lean_s22]
            let lean_s24 := by timed congrHAdd lean_r31 lean_r29
            have lean_s25 : (Eq let52 let41) := by timed congrHAdd lean_r33 lean_s24
            have lean_s26 : (Eq let52 let4) := by timed Eq.trans lean_s25 lean_r14
            let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
            let lean_s28 := by timed congrHAdd lean_r5 lean_r27
            have lean_s29 : (Eq let48 let14) := by timed congrHAdd lean_r28 lean_s28
            have lean_s30 : (Eq let48 let13) := by timed Eq.trans lean_s29 lean_r3
            have lean_s31 : (Eq let53 let64) := by timed congr lean_s27 lean_s30
            have lean_s32 : (Eq let53 True) := by timed Eq.trans lean_s31 lean_r25
            have lean_s33 : (Eq let54 let35) := by timed flipCongrArg lean_s32 [Not]
            have lean_s34 : (Eq let54 False) := by timed Eq.trans lean_s33 lean_r11
            have lean_s35 : (Eq let55 False) := by timed Eq.trans lean_r18 lean_s34
            show False from by timed eqResolve lean_s23 lean_s35
          ))
        have lean_s5 : let73 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let73 let37) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let73 let9) := by timed Eq.trans lean_s6 lean_r23
        have lean_s8 : (Eq let9 let61) := by timed Eq.symm lean_r22
        have lean_s9 : (Eq let73 let61) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let61 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let9 let73) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let61 let73) := by timed Eq.trans lean_r22 lean_s11
        have lean_s13 : let73 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let30 (And let56 let36))) := by liftOrNToNeg lean_s0
have lean_s2 : let72 := by timed flipNotAnd lean_s1 [let30, let56, let36]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let60 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let32 let60) := by timed congr lean_s5 lean_r21
have lean_s7 : (Eq let32 True) := by timed Eq.trans lean_s6 lean_r20
have lean_s8 : (Eq let33 True) := by timed Eq.trans lean_r8 lean_s7
have lean_s9 : let33 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let66 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let58 let66) := by timed congr lean_s12 lean_r32
have lean_s14 : (Eq let58 True) := by timed Eq.trans lean_s13 lean_r30
have lean_s15 : (Eq let59 True) := by timed Eq.trans lean_r19 lean_s14
have lean_s16 : let59 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let15 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let38 let15) := by timed congr lean_s19 lean_r23
have lean_s21 : (Eq let38 True) := by timed Eq.trans lean_s20 lean_r4
have lean_s22 : (Eq let39 True) := by timed Eq.trans lean_r13 lean_s21
have lean_s23 : let39 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq let72 let71) := by timed congr lean_s10 lean_s24
have lean_s26 : let71 := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Or let9 (Or let29 let45)) := by permutateOr lean_s26, [2, 0, 1], (- 1)
have lean_s28 : (Eq And And) := by timed rfl
have lean_s29 : (Eq skoA skoA) := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [HMul.hMul]
have lean_s31 : (Eq let21 let21) := by timed congr lean_s30 lean_r12
have lean_s32 : let34 := by timed Eq.trans lean_s31 lean_r10
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq skoT skoT) := by timed rfl
have lean_s35 : (Eq let24 let12) := by timed congr lean_s33 lean_s34
have lean_s36 : (Eq let24 let9) := by timed Eq.trans lean_s35 lean_r2
have lean_s37 : (Eq let25 let36) := by timed flipCongrArg lean_s36 [Not]
let lean_s38 := by timed congr lean_s28 lean_s37
have lean_s39 : (Eq let6 let30) := by timed flipCongrArg lean_r9 [Not]
let lean_s40 := by timed congr lean_s28 lean_s39
have lean_s41 : (Eq skoB skoB) := by timed rfl
let lean_s42 := by timed flipCongrArg lean_s41 [LE.le]
have lean_s43 : (Eq let22 let43) := by timed congr lean_s42 lean_s32
have lean_s44 : (Eq let22 let42) := by timed Eq.trans lean_s43 lean_r15
have lean_s45 : (Eq let23 let68) := by timed flipCongrArg lean_s44 [Not]
let lean_s46 := by timed congr lean_s28 lean_s45
have lean_s47 : (Eq let20 let56) := by timed flipCongrArg lean_r17 [Not]
let lean_s48 := by timed congr lean_s28 lean_s47
have lean_s49 : (Eq let18 let67) := by timed flipCongrArg lean_r7 [Not]
let lean_s50 := by timed congr lean_s48 lean_s49
let lean_s51 := by timed congr lean_s46 lean_s50
let lean_s52 := by timed congr lean_s40 lean_s51
have lean_s53 : let70 := by timed congr lean_s38 lean_s52
have lean_s54 : let70 := by timed Eq.trans lean_r6 lean_s53
have lean_s55 : let69 := by timed eqResolve lean_a34 lean_s54
have lean_s56 : let56 := by andElim lean_s55, 3
let lean_s57 := by R1 lean_s27, lean_s56, let45, [(- 1), 0]
have lean_s58 : let30 := by andElim lean_s55, 1
let lean_s59 := by R1 lean_s57, lean_s58, let29, [(- 1), 0]
have lean_s60 : let36 := by andElim lean_s55, 0
exact (show False from by R1 lean_s59, lean_s60, let9, [0, 0])


