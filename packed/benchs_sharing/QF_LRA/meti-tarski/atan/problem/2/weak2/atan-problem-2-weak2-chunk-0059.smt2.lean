open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoB : Rat}
variable {skoT : Rat}
variable {skoA : Rat}
variable {skoT : Rat}
variable {skoB : Rat}
variable {skoA : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% GE.ge skoT let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% GE.ge skoT let5)
  let let7 := (binrel% HMul.hMul let2 skoT)
  let let8 := (binrel% HMul.hMul let2 let5)
  let let9 := (Neg.neg let2)
  let let10 := (binrel% HMul.hMul let9 let2)
  let let11 := (Neg.neg (Int.ofNat 1))
  let let12 := (binrel% HMul.hMul let11 skoT)
  let let13 := (binrel% HMul.hMul let9 skoT)
  let let14 := (binrel% GE.ge let12 let11)
  let let15 := (binrel% LE.le skoT let2)
  let let16 := (binrel% HAdd.hAdd let5 let9)
  let let17 := (binrel% LE.le let5 skoT)
  let let18 := (binrel% HAdd.hAdd let8 let10)
  let let19 := (binrel% HAdd.hAdd let7 let13)
  let let20 := (binrel% GE.ge let19 let18)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt let19 let18)
  let let23 := (binrel% HMul.hMul let11 skoA)
  let let24 := (binrel% GE.ge let23 let1)
  let let25 := (binrel% LE.le skoA let5)
  let let26 := (binrel% HMul.hMul let11 skoB)
  let let27 := (binrel% GE.ge (binrel% HAdd.hAdd let26 let23) let1)
  let let28 := (binrel% LE.le skoB let23)
  let let29 := (Not let6)
  let let30 := (binrel% LT.lt skoT let5)
  let let31 := (binrel% HMul.hMul skoA let9)
  let let32 := (Eq let31 let23)
  let let33 := (binrel% GE.ge (binrel% HAdd.hAdd let26 skoT) let1)
  let let34 := (binrel% LE.le skoB skoT)
  let let35 := (binrel% LT.lt let9 let1)
  let let36 := (Not let4)
  let let37 := (Not let36)
  let let38 := (binrel% LE.le skoB skoA)
  let let39 := (Not let38)
  let let40 := (Not let15)
  let let41 := (binrel% LE.le skoB let31)
  let let42 := (Not let41)
  let let43 := (Not let34)
  let let44 := (Not let25)
  let let45 := (Not let17)
  let let46 := (And let45 (And let44 (And let43 (And let42 (And let40 let39)))))
  let let47 := (binrel% HAdd.hAdd skoT let12)
  let let48 := (binrel% GE.ge (binrel% HAdd.hAdd let26 skoA) let1)
  let let49 := (Not let14)
  let let50 := (Not let49)
  let let51 := (binrel% GT.gt skoT let2)
  let let52 := (Not True)
  let let53 := (binrel% GE.ge let5 let9)
  let let54 := (Not let48)
  let let55 := (Not let27)
  let let56 := (Not let33)
  let let57 := (Not let24)
  let let58 := (And let36 (And let57 (And let56 (And let55 (And let49 let54)))))
  let let59 := (Eq let46 let58)
  let let60 := (Or let4 let14)
  let let61 := (Or let37 let50)
  let let62 := (binrel% LT.lt let13 let10)
  let let63 := (And let35 let51)
  let let64 := (binrel% LT.lt let7 let8)
  let let65 := (And let3 let30)
(Eq let3 True) → (Eq let6 let4) → (Eq let7 skoT) → (Eq let8 let5) → (Eq let10 let9) → (Eq let13 let12) → (Eq let15 let14) → (Eq let16 let9) → (Eq let17 let4) → (Eq let22 let21) → (Eq let25 let24) → (Eq let28 let27) → (Eq let30 let29) → let32 → (Eq let34 let33) → (Eq let35 True) → (Eq let37 let4) → (Eq let46 let46) → (Eq let47 let5) → (Eq let38 let48) → (Eq let9 let9) → (Eq let50 let14) → (Eq let51 let40) → (Eq let52 False) → (Eq let53 True) → let46 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% GE.ge skoT let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% GE.ge skoT let5)
  let let7 := (binrel% HMul.hMul let2 skoT)
  let let8 := (binrel% HMul.hMul let2 let5)
  let let9 := (Neg.neg let2)
  let let10 := (binrel% HMul.hMul let9 let2)
  let let11 := (Neg.neg (Int.ofNat 1))
  let let12 := (binrel% HMul.hMul let11 skoT)
  let let13 := (binrel% HMul.hMul let9 skoT)
  let let14 := (binrel% GE.ge let12 let11)
  let let15 := (binrel% LE.le skoT let2)
  let let16 := (binrel% HAdd.hAdd let5 let9)
  let let17 := (binrel% LE.le let5 skoT)
  let let18 := (binrel% HAdd.hAdd let8 let10)
  let let19 := (binrel% HAdd.hAdd let7 let13)
  let let20 := (binrel% GE.ge let19 let18)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt let19 let18)
  let let23 := (binrel% HMul.hMul let11 skoA)
  let let24 := (binrel% GE.ge let23 let1)
  let let25 := (binrel% LE.le skoA let5)
  let let26 := (binrel% HMul.hMul let11 skoB)
  let let27 := (binrel% GE.ge (binrel% HAdd.hAdd let26 let23) let1)
  let let28 := (binrel% LE.le skoB let23)
  let let29 := (Not let6)
  let let30 := (binrel% LT.lt skoT let5)
  let let31 := (binrel% HMul.hMul skoA let9)
  let let32 := (Eq let31 let23)
  let let33 := (binrel% GE.ge (binrel% HAdd.hAdd let26 skoT) let1)
  let let34 := (binrel% LE.le skoB skoT)
  let let35 := (binrel% LT.lt let9 let1)
  let let36 := (Not let4)
  let let37 := (Not let36)
  let let38 := (binrel% LE.le skoB skoA)
  let let39 := (Not let38)
  let let40 := (Not let15)
  let let41 := (binrel% LE.le skoB let31)
  let let42 := (Not let41)
  let let43 := (Not let34)
  let let44 := (Not let25)
  let let45 := (Not let17)
  let let46 := (And let45 (And let44 (And let43 (And let42 (And let40 let39)))))
  let let47 := (binrel% HAdd.hAdd skoT let12)
  let let48 := (binrel% GE.ge (binrel% HAdd.hAdd let26 skoA) let1)
  let let49 := (Not let14)
  let let50 := (Not let49)
  let let51 := (binrel% GT.gt skoT let2)
  let let52 := (Not True)
  let let53 := (binrel% GE.ge let5 let9)
  let let54 := (Not let48)
  let let55 := (Not let27)
  let let56 := (Not let33)
  let let57 := (Not let24)
  let let58 := (And let36 (And let57 (And let56 (And let55 (And let49 let54)))))
  let let59 := (Eq let46 let58)
  let let60 := (Or let4 let14)
  let let61 := (Or let37 let50)
  let let62 := (binrel% LT.lt let13 let10)
  let let63 := (And let35 let51)
  let let64 := (binrel% LT.lt let7 let8)
  let let65 := (And let3 let30)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let6 let4) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let7 skoT) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let8 let5) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let15 let14) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let16 let9) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let17 let4) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let30 let29) => -- THEORY_REWRITE_ARITH
fun lean_r13 : let32 => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let35 True) => -- EVALUATE
fun lean_r16 : (Eq let37 let4) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let46 let46) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let47 let5) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let38 let48) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let9 let9) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let50 let14) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let51 let40) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let52 False) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let53 True) => -- THEORY_REWRITE_ARITH
fun lean_a25 : let46 => by
have lean_s0 : (Or let37 (Or let50 False)) :=
  (scope (fun lean_a26 : let36 =>
    (scope (fun lean_a27 : let49 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let29 let36) := by timed flipCongrArg lean_r1 [Not]
      have lean_s2 : (Eq let30 let36) := by timed Eq.trans lean_r12 lean_s1
      have lean_s3 : (Eq let36 let30) := by timed Eq.symm lean_s2
      have lean_s4 : let30 := by timed eqResolve lean_a26 lean_s3
      have lean_s5 : let65 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let65 let64) := by arithMulPos [skoT, let5, let2], 0
      have lean_s7 : let64 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let35 := by timed trueElim lean_r15
      have lean_s9 : (Eq let40 let49) := by timed flipCongrArg lean_r6 [Not]
      have lean_s10 : (Eq let51 let49) := by timed Eq.trans lean_r22 lean_s9
      have lean_s11 : (Eq let49 let51) := by timed Eq.symm lean_s10
      have lean_s12 : let51 := by timed eqResolve lean_a27 lean_s11
      have lean_s13 : let63 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let63 let62) := by arithMulNeg [skoT, let2, let9], 2
      have lean_s15 : let62 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let22 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r2 [HAdd.hAdd]
      have lean_s18 : (Eq let19 let47) := by timed congr lean_s17 lean_r5
      have lean_s19 : (Eq let19 let5) := by timed Eq.trans lean_s18 lean_r18
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r3 [HAdd.hAdd]
      have lean_s22 : (Eq let18 let16) := by timed congr lean_s21 lean_r4
      have lean_s23 : (Eq let18 let9) := by timed Eq.trans lean_s22 lean_r7
      have lean_s24 : (Eq let20 let53) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let20 True) := by timed Eq.trans lean_s24 lean_r24
      have lean_s26 : (Eq let21 let52) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let21 False) := by timed Eq.trans lean_s26 lean_r23
      have lean_s28 : (Eq let22 False) := by timed Eq.trans lean_r9 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let36 let49)) := by liftOrNToNeg lean_s0
have lean_s2 : let61 := by timed flipNotAnd lean_s1 [let36, let49]
let lean_s3 := by timed flipCongrArg lean_r16 [Or]
have lean_s4 : (Eq let61 let60) := by timed congr lean_s3 lean_r21
have lean_s5 : let60 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
have lean_s7 : (Eq let45 let36) := by timed flipCongrArg lean_r8 [Not]
let lean_s8 := by timed congr lean_s6 lean_s7
have lean_s9 : (Eq let44 let57) := by timed flipCongrArg lean_r10 [Not]
let lean_s10 := by timed congr lean_s6 lean_s9
have lean_s11 : (Eq let43 let56) := by timed flipCongrArg lean_r14 [Not]
let lean_s12 := by timed congr lean_s6 lean_s11
have lean_s13 : (Eq skoB skoB) := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [LE.le]
have lean_s15 : (Eq skoA skoA) := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [HMul.hMul]
have lean_s17 : (Eq let31 let31) := by timed congr lean_s16 lean_r20
have lean_s18 : let32 := by timed Eq.trans lean_s17 lean_r13
have lean_s19 : (Eq let41 let28) := by timed congr lean_s14 lean_s18
have lean_s20 : (Eq let41 let27) := by timed Eq.trans lean_s19 lean_r11
have lean_s21 : (Eq let42 let55) := by timed flipCongrArg lean_s20 [Not]
let lean_s22 := by timed congr lean_s6 lean_s21
have lean_s23 : (Eq let40 let49) := by timed flipCongrArg lean_r6 [Not]
let lean_s24 := by timed congr lean_s6 lean_s23
have lean_s25 : (Eq let39 let54) := by timed flipCongrArg lean_r19 [Not]
let lean_s26 := by timed congr lean_s24 lean_s25
let lean_s27 := by timed congr lean_s22 lean_s26
let lean_s28 := by timed congr lean_s12 lean_s27
let lean_s29 := by timed congr lean_s10 lean_s28
have lean_s30 : let59 := by timed congr lean_s8 lean_s29
have lean_s31 : let59 := by timed Eq.trans lean_r17 lean_s30
have lean_s32 : let58 := by timed eqResolve lean_a25 lean_s31
have lean_s33 : let49 := by andElim lean_s32, 4
let lean_s34 := by R1 lean_s5, lean_s33, let14, [(- 1), 0]
have lean_s35 : let36 := by andElim lean_s32, 0
exact (show False from by R1 lean_s34, lean_s35, let4, [0, 0])


