open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoB : Rat}
variable {skoT : Rat}
variable {skoA : Rat}
variable {skoT : Rat}
variable {skoB : Rat}
variable {skoA : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% HAdd.hAdd skoB skoA)
  let let7 := (binrel% LE.le let6 let5)
  let let8 := (Not let7)
  let let9 := (binrel% GT.gt let6 let5)
  let let10 := (Rat.ofInt 2)
  let let11 := (binrel% GT.gt let10 let1)
  let let12 := (binrel% GE.ge skoB let1)
  let let13 := (binrel% GE.ge skoB let5)
  let let14 := (Neg.neg (Int.ofNat 1))
  let let15 := (binrel% HMul.hMul let14 skoA)
  let let16 := (binrel% HMul.hMul let14 skoB)
  let let17 := (binrel% HAdd.hAdd let16 let15)
  let let18 := (binrel% GE.ge let17 let1)
  let let19 := (binrel% HAdd.hAdd let16 skoA)
  let let20 := (binrel% GE.ge let19 let1)
  let let21 := (Not let20)
  let let22 := (Not let21)
  let let23 := (Eq let20 let22)
  let let24 := (Eq let22 let20)
  let let25 := (binrel% HMul.hMul skoA let3)
  let let26 := (Eq let25 let15)
  let let27 := (Eq let20 let20)
  let let28 := (binrel% LE.le skoB skoA)
  let let29 := (Not let28)
  let let30 := (binrel% LE.le skoT let2)
  let let31 := (Not let30)
  let let32 := (binrel% LE.le skoB let25)
  let let33 := (Not let32)
  let let34 := (binrel% LE.le skoT let5)
  let let35 := (Not let34)
  let let36 := (binrel% LE.le let5 skoB)
  let let37 := (Not let36)
  let let38 := (And let37 (And let35 (And let33 (And let31 let29))))
  let let39 := (Eq let18 let18)
  let let40 := (binrel% LE.le skoB let15)
  let let41 := (binrel% HMul.hMul let10 let5)
  let let42 := (binrel% HMul.hMul let3 let5)
  let let43 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let42 let41))
  let let44 := (binrel% HMul.hMul let10 skoB)
  let let45 := (binrel% HMul.hMul let3 let6)
  let let46 := (binrel% HAdd.hAdd skoB let15)
  let let47 := (binrel% HMul.hMul let3 let46)
  let let48 := (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd let45 let44))
  let let49 := (binrel% GE.ge let48 let43)
  let let50 := (Not let49)
  let let51 := (binrel% LT.lt let48 let43)
  let let52 := (binrel% HMul.hMul let14 skoT)
  let let53 := (binrel% GE.ge let52 let14)
  let let54 := (Not let18)
  let let55 := (Not let54)
  let let56 := (Eq let55 let18)
  let let57 := (binrel% HMul.hMul (Int.ofNat 2) skoB)
  let let58 := (binrel% GE.ge let52 let1)
  let let59 := (Eq let18 let55)
  let let60 := (Eq let12 let12)
  let let61 := (Not let12)
  let let62 := (Not let61)
  let let63 := (Eq let62 let12)
  let let64 := (binrel% LE.le let46 let5)
  let let65 := (Not True)
  let let66 := (Eq let12 let62)
  let let67 := (Not let64)
  let let68 := (binrel% GT.gt let46 let5)
  let let69 := (binrel% GE.ge let5 let5)
  let let70 := (Not let13)
  let let71 := (binrel% LT.lt skoB let5)
  let let72 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let73 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let17 let57))
  let let74 := (Not let53)
  let let75 := (Not let58)
  let let76 := (And let61 (And let75 (And let54 (And let74 let21))))
  let let77 := (Eq let38 let76)
  let let78 := (Or let12 (Or let18 let20))
  let let79 := (Or let62 (Or let55 let22))
  let let80 := (Not let68)
  let let81 := (binrel% LT.lt let44 let41)
  let let82 := (And let11 let71)
  let let83 := (binrel% LT.lt let45 let42)
  let let84 := (And let4 let9)
  let let85 := (binrel% LT.lt let47 let42)
  let let86 := (And let4 let68)
(Eq let4 True) → (Eq let9 let8) → (Eq let11 True) → (Eq let13 let12) → (Eq let7 let18) → (Eq let24 let23) → let26 → let24 → (Eq let27 True) → (Eq let38 let38) → (Eq let28 let20) → (Eq let3 let3) → (Eq let39 True) → (Eq let40 let18) → (Eq let51 let50) → (Eq let36 let12) → (Eq let47 let19) → (Eq let30 let53) → let56 → (Eq let44 let57) → (Eq let34 let58) → (Eq let56 let59) → (Eq let45 let17) → (Eq let60 True) → let63 → (Eq let64 let20) → (Eq let65 False) → (Eq let63 let66) → (Eq let68 let67) → (Eq let69 True) → (Eq let71 let70) → (Eq let72 let5) → (Eq let41 let5) → (Eq let42 let5) → (Eq let73 let5) → let38 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% HAdd.hAdd skoB skoA)
  let let7 := (binrel% LE.le let6 let5)
  let let8 := (Not let7)
  let let9 := (binrel% GT.gt let6 let5)
  let let10 := (Rat.ofInt 2)
  let let11 := (binrel% GT.gt let10 let1)
  let let12 := (binrel% GE.ge skoB let1)
  let let13 := (binrel% GE.ge skoB let5)
  let let14 := (Neg.neg (Int.ofNat 1))
  let let15 := (binrel% HMul.hMul let14 skoA)
  let let16 := (binrel% HMul.hMul let14 skoB)
  let let17 := (binrel% HAdd.hAdd let16 let15)
  let let18 := (binrel% GE.ge let17 let1)
  let let19 := (binrel% HAdd.hAdd let16 skoA)
  let let20 := (binrel% GE.ge let19 let1)
  let let21 := (Not let20)
  let let22 := (Not let21)
  let let23 := (Eq let20 let22)
  let let24 := (Eq let22 let20)
  let let25 := (binrel% HMul.hMul skoA let3)
  let let26 := (Eq let25 let15)
  let let27 := (Eq let20 let20)
  let let28 := (binrel% LE.le skoB skoA)
  let let29 := (Not let28)
  let let30 := (binrel% LE.le skoT let2)
  let let31 := (Not let30)
  let let32 := (binrel% LE.le skoB let25)
  let let33 := (Not let32)
  let let34 := (binrel% LE.le skoT let5)
  let let35 := (Not let34)
  let let36 := (binrel% LE.le let5 skoB)
  let let37 := (Not let36)
  let let38 := (And let37 (And let35 (And let33 (And let31 let29))))
  let let39 := (Eq let18 let18)
  let let40 := (binrel% LE.le skoB let15)
  let let41 := (binrel% HMul.hMul let10 let5)
  let let42 := (binrel% HMul.hMul let3 let5)
  let let43 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let42 let41))
  let let44 := (binrel% HMul.hMul let10 skoB)
  let let45 := (binrel% HMul.hMul let3 let6)
  let let46 := (binrel% HAdd.hAdd skoB let15)
  let let47 := (binrel% HMul.hMul let3 let46)
  let let48 := (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd let45 let44))
  let let49 := (binrel% GE.ge let48 let43)
  let let50 := (Not let49)
  let let51 := (binrel% LT.lt let48 let43)
  let let52 := (binrel% HMul.hMul let14 skoT)
  let let53 := (binrel% GE.ge let52 let14)
  let let54 := (Not let18)
  let let55 := (Not let54)
  let let56 := (Eq let55 let18)
  let let57 := (binrel% HMul.hMul (Int.ofNat 2) skoB)
  let let58 := (binrel% GE.ge let52 let1)
  let let59 := (Eq let18 let55)
  let let60 := (Eq let12 let12)
  let let61 := (Not let12)
  let let62 := (Not let61)
  let let63 := (Eq let62 let12)
  let let64 := (binrel% LE.le let46 let5)
  let let65 := (Not True)
  let let66 := (Eq let12 let62)
  let let67 := (Not let64)
  let let68 := (binrel% GT.gt let46 let5)
  let let69 := (binrel% GE.ge let5 let5)
  let let70 := (Not let13)
  let let71 := (binrel% LT.lt skoB let5)
  let let72 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let73 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let17 let57))
  let let74 := (Not let53)
  let let75 := (Not let58)
  let let76 := (And let61 (And let75 (And let54 (And let74 let21))))
  let let77 := (Eq let38 let76)
  let let78 := (Or let12 (Or let18 let20))
  let let79 := (Or let62 (Or let55 let22))
  let let80 := (Not let68)
  let let81 := (binrel% LT.lt let44 let41)
  let let82 := (And let11 let71)
  let let83 := (binrel% LT.lt let45 let42)
  let let84 := (And let4 let9)
  let let85 := (binrel% LT.lt let47 let42)
  let let86 := (And let4 let68)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let11 True) => -- EVALUATE
fun lean_r3 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let7 let18) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let24 let23) => -- THEORY_REWRITE_BOOL
fun lean_r6 : let26 => -- THEORY_REWRITE_ARITH
fun lean_r7 : let24 => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let27 True) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let38 let38) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let28 let20) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let3 let3) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let39 True) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let40 let18) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let36 let12) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let47 let19) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let30 let53) => -- THEORY_REWRITE_ARITH
fun lean_r18 : let56 => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let44 let57) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let34 let58) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let56 let59) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let45 let17) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let60 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : let63 => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let64 let20) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let65 False) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let63 let66) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let68 let67) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let69 True) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let71 let70) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let72 let5) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let41 let5) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let42 let5) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let73 let5) => -- THEORY_REWRITE_ARITH
fun lean_a35 : let38 => by
have lean_s0 : (Or let62 (Or let55 (Or let22 False))) :=
  (scope (fun lean_a36 : let61 =>
    (scope (fun lean_a37 : let54 =>
      (scope (fun lean_a38 : let21 =>
        have lean_s0 : (Eq let67 let21) := by timed flipCongrArg lean_r25 [Not]
        have lean_s1 : (Eq let68 let21) := by timed Eq.trans lean_r28 lean_s0
        have lean_s2 : (Eq let21 let68) := by timed Eq.symm lean_s1
        have lean_s3 : let68 := by timed eqResolve lean_a38 lean_s2
        have lean_s4 : (Or let80 False) :=
          (scope (fun lean_a39 : let68 =>
            have lean_s4 : let4 := by timed trueElim lean_r0
            have lean_s5 : let86 := by timed And.intro lean_s4 lean_a39
            have lean_s6 : (Implies let86 let85) := by arithMulNeg [let46, let5, let3], 2
            have lean_s7 : let85 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let8 let54) := by timed flipCongrArg lean_r4 [Not]
            have lean_s9 : (Eq let9 let54) := by timed Eq.trans lean_r1 lean_s8
            have lean_s10 : (Eq let54 let9) := by timed Eq.symm lean_s9
            have lean_s11 : let9 := by timed eqResolve lean_a37 lean_s10
            have lean_s12 : let84 := by timed And.intro lean_s4 lean_s11
            have lean_s13 : (Implies let84 let83) := by arithMulNeg [let6, let5, let3], 2
            have lean_s14 : let83 := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : let11 := by timed trueElim lean_r2
            have lean_s16 : (Eq let70 let61) := by timed flipCongrArg lean_r3 [Not]
            have lean_s17 : (Eq let71 let61) := by timed Eq.trans lean_r30 lean_s16
            have lean_s18 : (Eq let61 let71) := by timed Eq.symm lean_s17
            have lean_s19 : let71 := by timed eqResolve lean_a36 lean_s18
            have lean_s20 : let82 := by timed And.intro lean_s15 lean_s19
            have lean_s21 : (Implies let82 let81) := by arithMulPos [skoB, let5, let10], 0
            have lean_s22 : let81 := by timed modusPonens lean_s20 lean_s21
            have lean_s23 : let51 := by sumBounds [lean_s7, lean_s14, lean_s22]
            let lean_s24 := by timed congrHAdd lean_r22 lean_r19
            have lean_s25 : (Eq let48 let73) := by timed congrHAdd lean_r16 lean_s24
            have lean_s26 : (Eq let48 let5) := by timed Eq.trans lean_s25 lean_r34
            let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
            let lean_s28 := by timed congrHAdd lean_r33 lean_r32
            have lean_s29 : (Eq let43 let72) := by timed congrHAdd lean_r33 lean_s28
            have lean_s30 : (Eq let43 let5) := by timed Eq.trans lean_s29 lean_r31
            have lean_s31 : (Eq let49 let69) := by timed congr lean_s27 lean_s30
            have lean_s32 : (Eq let49 True) := by timed Eq.trans lean_s31 lean_r29
            have lean_s33 : (Eq let50 let65) := by timed flipCongrArg lean_s32 [Not]
            have lean_s34 : (Eq let50 False) := by timed Eq.trans lean_s33 lean_r26
            have lean_s35 : (Eq let51 False) := by timed Eq.trans lean_r14 lean_s34
            show False from by timed eqResolve lean_s23 lean_s35
          ))
        have lean_s5 : let80 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let80 let22) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let80 let20) := by timed Eq.trans lean_s6 lean_r7
        have lean_s8 : (Eq let20 let64) := by timed Eq.symm lean_r25
        have lean_s9 : (Eq let80 let64) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let64 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let20 let80) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let64 let80) := by timed Eq.trans lean_r25 lean_s11
        have lean_s13 : let80 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let61 (And let54 let21))) := by liftOrNToNeg lean_s0
have lean_s2 : let79 := by timed flipNotAnd lean_s1 [let61, let54, let21]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let60 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let66 let60) := by timed congr lean_s5 lean_r24
have lean_s7 : (Eq let66 True) := by timed Eq.trans lean_s6 lean_r23
have lean_s8 : (Eq let63 True) := by timed Eq.trans lean_r27 lean_s7
have lean_s9 : let63 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let39 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let59 let39) := by timed congr lean_s12 lean_r18
have lean_s14 : (Eq let59 True) := by timed Eq.trans lean_s13 lean_r12
have lean_s15 : (Eq let56 True) := by timed Eq.trans lean_r21 lean_s14
have lean_s16 : let56 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let27 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let23 let27) := by timed congr lean_s19 lean_r7
have lean_s21 : (Eq let23 True) := by timed Eq.trans lean_s20 lean_r8
have lean_s22 : (Eq let24 True) := by timed Eq.trans lean_r5 lean_s21
have lean_s23 : let24 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq let79 let78) := by timed congr lean_s10 lean_s24
have lean_s26 : let78 := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Eq And And) := by timed rfl
have lean_s28 : (Eq let37 let61) := by timed flipCongrArg lean_r15 [Not]
let lean_s29 := by timed congr lean_s27 lean_s28
have lean_s30 : (Eq let35 let75) := by timed flipCongrArg lean_r20 [Not]
let lean_s31 := by timed congr lean_s27 lean_s30
have lean_s32 : (Eq skoB skoB) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq skoA skoA) := by timed rfl
let lean_s35 := by timed flipCongrArg lean_s34 [HMul.hMul]
have lean_s36 : (Eq let25 let25) := by timed congr lean_s35 lean_r11
have lean_s37 : let26 := by timed Eq.trans lean_s36 lean_r6
have lean_s38 : (Eq let32 let40) := by timed congr lean_s33 lean_s37
have lean_s39 : (Eq let32 let18) := by timed Eq.trans lean_s38 lean_r13
have lean_s40 : (Eq let33 let54) := by timed flipCongrArg lean_s39 [Not]
let lean_s41 := by timed congr lean_s27 lean_s40
have lean_s42 : (Eq let31 let74) := by timed flipCongrArg lean_r17 [Not]
let lean_s43 := by timed congr lean_s27 lean_s42
have lean_s44 : (Eq let29 let21) := by timed flipCongrArg lean_r10 [Not]
let lean_s45 := by timed congr lean_s43 lean_s44
let lean_s46 := by timed congr lean_s41 lean_s45
let lean_s47 := by timed congr lean_s31 lean_s46
have lean_s48 : let77 := by timed congr lean_s29 lean_s47
have lean_s49 : let77 := by timed Eq.trans lean_r9 lean_s48
have lean_s50 : let76 := by timed eqResolve lean_a35 lean_s49
have lean_s51 : let21 := by andElim lean_s50, 4
let lean_s52 := by R1 lean_s26, lean_s51, let20, [(- 1), 0]
have lean_s53 : let54 := by andElim lean_s50, 2
let lean_s54 := by R1 lean_s52, lean_s53, let18, [(- 1), 0]
have lean_s55 : let61 := by andElim lean_s50, 0
exact (show False from by R1 lean_s54, lean_s55, let12, [0, 0])


