open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoB : Rat}
variable {skoT : Rat}
variable {skoA : Rat}
variable {skoT : Rat}
variable {skoB : Rat}
variable {skoA : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoA let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoA let5)
  let let9 := (binrel% HAdd.hAdd skoA skoT)
  let let10 := (binrel% GE.ge let9 let1)
  let let11 := (Not let10)
  let let12 := (Not let11)
  let let13 := (Eq let10 let12)
  let let14 := (Eq let12 let10)
  let let15 := (Neg.neg (Int.ofNat 1))
  let let16 := (binrel% HMul.hMul let15 skoA)
  let let17 := (binrel% HMul.hMul let15 skoT)
  let let18 := (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let17 let16))
  let let19 := (Eq let10 let10)
  let let20 := (binrel% LE.le skoB skoA)
  let let21 := (Not let20)
  let let22 := (binrel% LE.le skoT let2)
  let let23 := (Not let22)
  let let24 := (binrel% HMul.hMul skoA let3)
  let let25 := (binrel% LE.le skoB let24)
  let let26 := (Not let25)
  let let27 := (binrel% LE.le skoB skoT)
  let let28 := (Not let27)
  let let29 := (binrel% LE.le let24 skoT)
  let let30 := (Not let29)
  let let31 := (And let30 (And let7 (And let28 (And let26 (And let23 let21)))))
  let let32 := (binrel% LE.le let16 skoT)
  let let33 := (binrel% HMul.hMul let2 let9)
  let let34 := (binrel% GE.ge let17 let15)
  let let35 := (Not let34)
  let let36 := (Not let35)
  let let37 := (Eq let36 let34)
  let let38 := (binrel% GT.gt let2 let1)
  let let39 := (binrel% GE.ge let9 let5)
  let let40 := (binrel% HMul.hMul let15 skoB)
  let let41 := (binrel% GE.ge (binrel% HAdd.hAdd let40 skoT) let1)
  let let42 := (binrel% HMul.hMul let3 let2)
  let let43 := (Eq let24 let16)
  let let44 := (binrel% GT.gt skoT let2)
  let let45 := (binrel% HMul.hMul let3 let5)
  let let46 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let3 let5))
  let let47 := (binrel% GE.ge (binrel% HAdd.hAdd let16 let40) let1)
  let let48 := (binrel% LE.le skoB let16)
  let let49 := (binrel% GE.ge let16 let1)
  let let50 := (Not let49)
  let let51 := (Not let50)
  let let52 := (Eq let49 let51)
  let let53 := (Eq let51 let49)
  let let54 := (binrel% HMul.hMul let2 let5)
  let let55 := (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let42 let45))
  let let56 := (binrel% HMul.hMul let3 skoA)
  let let57 := (binrel% HMul.hMul let3 skoT)
  let let58 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let57 let56))
  let let59 := (binrel% GE.ge let58 let55)
  let let60 := (Not let59)
  let let61 := (binrel% LT.lt let58 let55)
  let let62 := (Eq let34 let36)
  let let63 := (Eq let49 let49)
  let let64 := (Not let39)
  let let65 := (binrel% LT.lt let9 let5)
  let let66 := (binrel% GE.ge (binrel% HAdd.hAdd skoA let40) let1)
  let let67 := (binrel% GE.ge let5 let3)
  let let68 := (Not True)
  let let69 := (Eq let34 let34)
  let let70 := (Not let66)
  let let71 := (Not let47)
  let let72 := (Not let41)
  let let73 := (And let11 (And let50 (And let72 (And let71 (And let35 let70)))))
  let let74 := (Eq let31 let73)
  let let75 := (Or let49 (Or let34 let10))
  let let76 := (Or let51 (Or let36 let12))
  let let77 := (Not let65)
  let let78 := (binrel% LT.lt let56 let45)
  let let79 := (And let4 let8)
  let let80 := (binrel% LT.lt let57 let42)
  let let81 := (And let4 let44)
  let let82 := (binrel% LT.lt let33 let54)
  let let83 := (And let38 let65)
(Eq let4 True) → (Eq let8 let7) → (Eq let14 let13) → (Eq let18 let5) → (Eq let19 True) → (Eq let31 let31) → (Eq let32 let10) → (Eq let33 let9) → let37 → (Eq let38 True) → (Eq let3 let3) → (Eq let39 let10) → (Eq let27 let41) → (Eq let42 let3) → let43 → (Eq let44 let23) → (Eq let45 let5) → (Eq let46 let3) → (Eq let48 let47) → (Eq let6 let49) → (Eq let22 let34) → (Eq let53 let52) → (Eq let61 let60) → (Eq let37 let62) → (Eq let63 True) → let53 → let14 → (Eq let65 let64) → (Eq let20 let66) → (Eq let67 True) → (Eq let68 False) → (Eq let54 let5) → (Eq let56 let16) → (Eq let69 True) → (Eq let57 let17) → let31 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoA let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoA let5)
  let let9 := (binrel% HAdd.hAdd skoA skoT)
  let let10 := (binrel% GE.ge let9 let1)
  let let11 := (Not let10)
  let let12 := (Not let11)
  let let13 := (Eq let10 let12)
  let let14 := (Eq let12 let10)
  let let15 := (Neg.neg (Int.ofNat 1))
  let let16 := (binrel% HMul.hMul let15 skoA)
  let let17 := (binrel% HMul.hMul let15 skoT)
  let let18 := (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let17 let16))
  let let19 := (Eq let10 let10)
  let let20 := (binrel% LE.le skoB skoA)
  let let21 := (Not let20)
  let let22 := (binrel% LE.le skoT let2)
  let let23 := (Not let22)
  let let24 := (binrel% HMul.hMul skoA let3)
  let let25 := (binrel% LE.le skoB let24)
  let let26 := (Not let25)
  let let27 := (binrel% LE.le skoB skoT)
  let let28 := (Not let27)
  let let29 := (binrel% LE.le let24 skoT)
  let let30 := (Not let29)
  let let31 := (And let30 (And let7 (And let28 (And let26 (And let23 let21)))))
  let let32 := (binrel% LE.le let16 skoT)
  let let33 := (binrel% HMul.hMul let2 let9)
  let let34 := (binrel% GE.ge let17 let15)
  let let35 := (Not let34)
  let let36 := (Not let35)
  let let37 := (Eq let36 let34)
  let let38 := (binrel% GT.gt let2 let1)
  let let39 := (binrel% GE.ge let9 let5)
  let let40 := (binrel% HMul.hMul let15 skoB)
  let let41 := (binrel% GE.ge (binrel% HAdd.hAdd let40 skoT) let1)
  let let42 := (binrel% HMul.hMul let3 let2)
  let let43 := (Eq let24 let16)
  let let44 := (binrel% GT.gt skoT let2)
  let let45 := (binrel% HMul.hMul let3 let5)
  let let46 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let3 let5))
  let let47 := (binrel% GE.ge (binrel% HAdd.hAdd let16 let40) let1)
  let let48 := (binrel% LE.le skoB let16)
  let let49 := (binrel% GE.ge let16 let1)
  let let50 := (Not let49)
  let let51 := (Not let50)
  let let52 := (Eq let49 let51)
  let let53 := (Eq let51 let49)
  let let54 := (binrel% HMul.hMul let2 let5)
  let let55 := (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let42 let45))
  let let56 := (binrel% HMul.hMul let3 skoA)
  let let57 := (binrel% HMul.hMul let3 skoT)
  let let58 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let57 let56))
  let let59 := (binrel% GE.ge let58 let55)
  let let60 := (Not let59)
  let let61 := (binrel% LT.lt let58 let55)
  let let62 := (Eq let34 let36)
  let let63 := (Eq let49 let49)
  let let64 := (Not let39)
  let let65 := (binrel% LT.lt let9 let5)
  let let66 := (binrel% GE.ge (binrel% HAdd.hAdd skoA let40) let1)
  let let67 := (binrel% GE.ge let5 let3)
  let let68 := (Not True)
  let let69 := (Eq let34 let34)
  let let70 := (Not let66)
  let let71 := (Not let47)
  let let72 := (Not let41)
  let let73 := (And let11 (And let50 (And let72 (And let71 (And let35 let70)))))
  let let74 := (Eq let31 let73)
  let let75 := (Or let49 (Or let34 let10))
  let let76 := (Or let51 (Or let36 let12))
  let let77 := (Not let65)
  let let78 := (binrel% LT.lt let56 let45)
  let let79 := (And let4 let8)
  let let80 := (binrel% LT.lt let57 let42)
  let let81 := (And let4 let44)
  let let82 := (binrel% LT.lt let33 let54)
  let let83 := (And let38 let65)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let14 let13) => -- THEORY_REWRITE_BOOL
fun lean_r3 : (Eq let18 let5) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let19 True) => -- THEORY_REWRITE_BOOL
fun lean_r5 : (Eq let31 let31) => -- THEORY_REWRITE_BOOL
fun lean_r6 : (Eq let32 let10) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let33 let9) => -- THEORY_REWRITE_ARITH
fun lean_r8 : let37 => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let38 True) => -- EVALUATE
fun lean_r10 : (Eq let3 let3) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let39 let10) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let27 let41) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let42 let3) => -- THEORY_REWRITE_ARITH
fun lean_r14 : let43 => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let44 let23) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let45 let5) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let46 let3) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let48 let47) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let6 let49) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let22 let34) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let53 let52) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let61 let60) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let37 let62) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let63 True) => -- THEORY_REWRITE_BOOL
fun lean_r25 : let53 => -- THEORY_REWRITE_BOOL
fun lean_r26 : let14 => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let65 let64) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let20 let66) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let67 True) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let68 False) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let54 let5) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let56 let16) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let69 True) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let57 let17) => -- THEORY_REWRITE_ARITH
fun lean_a35 : let31 => by
have lean_s0 : (Or let51 (Or let36 (Or let12 False))) :=
  (scope (fun lean_a36 : let50 =>
    (scope (fun lean_a37 : let35 =>
      (scope (fun lean_a38 : let11 =>
        have lean_s0 : (Eq let64 let11) := by timed flipCongrArg lean_r11 [Not]
        have lean_s1 : (Eq let65 let11) := by timed Eq.trans lean_r27 lean_s0
        have lean_s2 : (Eq let11 let65) := by timed Eq.symm lean_s1
        have lean_s3 : let65 := by timed eqResolve lean_a38 lean_s2
        have lean_s4 : (Or let77 False) :=
          (scope (fun lean_a39 : let65 =>
            have lean_s4 : let38 := by timed trueElim lean_r9
            have lean_s5 : let83 := by timed And.intro lean_s4 lean_a39
            have lean_s6 : (Implies let83 let82) := by arithMulPos [let9, let5, let2], 0
            have lean_s7 : let82 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let4 := by timed trueElim lean_r0
            have lean_s9 : (Eq let23 let35) := by timed flipCongrArg lean_r20 [Not]
            have lean_s10 : (Eq let44 let35) := by timed Eq.trans lean_r15 lean_s9
            have lean_s11 : (Eq let35 let44) := by timed Eq.symm lean_s10
            have lean_s12 : let44 := by timed eqResolve lean_a37 lean_s11
            have lean_s13 : let81 := by timed And.intro lean_s8 lean_s12
            have lean_s14 : (Implies let81 let80) := by arithMulNeg [skoT, let2, let3], 2
            have lean_s15 : let80 := by timed modusPonens lean_s13 lean_s14
            have lean_s16 : (Eq let7 let50) := by timed flipCongrArg lean_r19 [Not]
            have lean_s17 : (Eq let8 let50) := by timed Eq.trans lean_r1 lean_s16
            have lean_s18 : (Eq let50 let8) := by timed Eq.symm lean_s17
            have lean_s19 : let8 := by timed eqResolve lean_a36 lean_s18
            have lean_s20 : let79 := by timed And.intro lean_s8 lean_s19
            have lean_s21 : (Implies let79 let78) := by arithMulNeg [skoA, let5, let3], 2
            have lean_s22 : let78 := by timed modusPonens lean_s20 lean_s21
            have lean_s23 : let61 := by sumBounds [lean_s7, lean_s15, lean_s22]
            let lean_s24 := by timed congrHAdd lean_r34 lean_r32
            have lean_s25 : (Eq let58 let18) := by timed congrHAdd lean_r7 lean_s24
            have lean_s26 : (Eq let58 let5) := by timed Eq.trans lean_s25 lean_r3
            let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
            let lean_s28 := by timed congrHAdd lean_r13 lean_r16
            have lean_s29 : (Eq let55 let46) := by timed congrHAdd lean_r31 lean_s28
            have lean_s30 : (Eq let55 let3) := by timed Eq.trans lean_s29 lean_r17
            have lean_s31 : (Eq let59 let67) := by timed congr lean_s27 lean_s30
            have lean_s32 : (Eq let59 True) := by timed Eq.trans lean_s31 lean_r29
            have lean_s33 : (Eq let60 let68) := by timed flipCongrArg lean_s32 [Not]
            have lean_s34 : (Eq let60 False) := by timed Eq.trans lean_s33 lean_r30
            have lean_s35 : (Eq let61 False) := by timed Eq.trans lean_r22 lean_s34
            show False from by timed eqResolve lean_s23 lean_s35
          ))
        have lean_s5 : let77 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let77 let12) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let77 let10) := by timed Eq.trans lean_s6 lean_r26
        have lean_s8 : (Eq let10 let39) := by timed Eq.symm lean_r11
        have lean_s9 : (Eq let77 let39) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let39 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let10 let77) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let39 let77) := by timed Eq.trans lean_r11 lean_s11
        have lean_s13 : let77 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let50 (And let35 let11))) := by liftOrNToNeg lean_s0
have lean_s2 : let76 := by timed flipNotAnd lean_s1 [let50, let35, let11]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let63 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let52 let63) := by timed congr lean_s5 lean_r25
have lean_s7 : (Eq let52 True) := by timed Eq.trans lean_s6 lean_r24
have lean_s8 : (Eq let53 True) := by timed Eq.trans lean_r21 lean_s7
have lean_s9 : let53 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let69 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let62 let69) := by timed congr lean_s12 lean_r8
have lean_s14 : (Eq let62 True) := by timed Eq.trans lean_s13 lean_r33
have lean_s15 : (Eq let37 True) := by timed Eq.trans lean_r23 lean_s14
have lean_s16 : let37 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let19 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let13 let19) := by timed congr lean_s19 lean_r26
have lean_s21 : (Eq let13 True) := by timed Eq.trans lean_s20 lean_r4
have lean_s22 : (Eq let14 True) := by timed Eq.trans lean_r2 lean_s21
have lean_s23 : let14 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq let76 let75) := by timed congr lean_s10 lean_s24
have lean_s26 : let75 := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Or let10 (Or let49 let34)) := by permutateOr lean_s26, [2, 0, 1], (- 1)
have lean_s28 : (Eq And And) := by timed rfl
have lean_s29 : (Eq skoA skoA) := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [HMul.hMul]
have lean_s31 : (Eq let24 let24) := by timed congr lean_s30 lean_r10
have lean_s32 : let43 := by timed Eq.trans lean_s31 lean_r14
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq skoT skoT) := by timed rfl
have lean_s35 : (Eq let29 let32) := by timed congr lean_s33 lean_s34
have lean_s36 : (Eq let29 let10) := by timed Eq.trans lean_s35 lean_r6
have lean_s37 : (Eq let30 let11) := by timed flipCongrArg lean_s36 [Not]
let lean_s38 := by timed congr lean_s28 lean_s37
have lean_s39 : (Eq let7 let50) := by timed flipCongrArg lean_r19 [Not]
let lean_s40 := by timed congr lean_s28 lean_s39
have lean_s41 : (Eq let28 let72) := by timed flipCongrArg lean_r12 [Not]
let lean_s42 := by timed congr lean_s28 lean_s41
have lean_s43 : (Eq skoB skoB) := by timed rfl
let lean_s44 := by timed flipCongrArg lean_s43 [LE.le]
have lean_s45 : (Eq let25 let48) := by timed congr lean_s44 lean_s32
have lean_s46 : (Eq let25 let47) := by timed Eq.trans lean_s45 lean_r18
have lean_s47 : (Eq let26 let71) := by timed flipCongrArg lean_s46 [Not]
let lean_s48 := by timed congr lean_s28 lean_s47
have lean_s49 : (Eq let23 let35) := by timed flipCongrArg lean_r20 [Not]
let lean_s50 := by timed congr lean_s28 lean_s49
have lean_s51 : (Eq let21 let70) := by timed flipCongrArg lean_r28 [Not]
let lean_s52 := by timed congr lean_s50 lean_s51
let lean_s53 := by timed congr lean_s48 lean_s52
let lean_s54 := by timed congr lean_s42 lean_s53
let lean_s55 := by timed congr lean_s40 lean_s54
have lean_s56 : let74 := by timed congr lean_s38 lean_s55
have lean_s57 : let74 := by timed Eq.trans lean_r5 lean_s56
have lean_s58 : let73 := by timed eqResolve lean_a35 lean_s57
have lean_s59 : let35 := by andElim lean_s58, 4
let lean_s60 := by R1 lean_s27, lean_s59, let34, [(- 1), 0]
have lean_s61 : let50 := by andElim lean_s58, 1
let lean_s62 := by R1 lean_s60, lean_s61, let49, [(- 1), 0]
have lean_s63 : let11 := by andElim lean_s58, 0
exact (show False from by R1 lean_s62, lean_s63, let10, [0, 0])


