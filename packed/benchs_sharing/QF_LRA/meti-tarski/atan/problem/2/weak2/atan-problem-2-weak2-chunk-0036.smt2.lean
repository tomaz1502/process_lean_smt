open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoB : Rat}
variable {skoT : Rat}
variable {skoA : Rat}
variable {skoT : Rat}
variable {skoB : Rat}
variable {skoA : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% HAdd.hAdd skoB skoA)
  let let7 := (binrel% LE.le let6 let5)
  let let8 := (Not let7)
  let let9 := (binrel% GT.gt let6 let5)
  let let10 := (Rat.ofInt 2)
  let let11 := (binrel% GT.gt let10 let1)
  let let12 := (Neg.neg (Int.ofNat 1))
  let let13 := (binrel% HMul.hMul let12 skoA)
  let let14 := (binrel% HMul.hMul let12 skoB)
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% GE.ge let15 let1)
  let let17 := (Eq let16 let16)
  let let18 := (binrel% HAdd.hAdd let14 skoA)
  let let19 := (binrel% GE.ge let18 let1)
  let let20 := (Not let19)
  let let21 := (Not let20)
  let let22 := (Eq let19 let21)
  let let23 := (Eq let21 let19)
  let let24 := (Eq let19 let19)
  let let25 := (binrel% LE.le skoB skoA)
  let let26 := (Not let25)
  let let27 := (binrel% LE.le skoT let2)
  let let28 := (Not let27)
  let let29 := (binrel% HMul.hMul skoA let3)
  let let30 := (binrel% LE.le skoB let29)
  let let31 := (Not let30)
  let let32 := (binrel% LE.le let5 skoB)
  let let33 := (Not let32)
  let let34 := (And let33 (And let31 (And let28 let26)))
  let let35 := (Not let16)
  let let36 := (Not let35)
  let let37 := (Eq let16 let36)
  let let38 := (Eq let36 let16)
  let let39 := (binrel% HMul.hMul let3 let6)
  let let40 := (binrel% HMul.hMul (Int.ofNat 2) skoB)
  let let41 := (binrel% HMul.hMul let10 skoB)
  let let42 := (binrel% HMul.hMul let10 let5)
  let let43 := (binrel% HMul.hMul let3 let5)
  let let44 := (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let43 let42))
  let let45 := (binrel% HAdd.hAdd skoB let13)
  let let46 := (binrel% HMul.hMul let3 let45)
  let let47 := (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let39 let41))
  let let48 := (binrel% GE.ge let47 let44)
  let let49 := (Not let48)
  let let50 := (binrel% LT.lt let47 let44)
  let let51 := (binrel% GE.ge skoB let1)
  let let52 := (Eq let29 let13)
  let let53 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let15 let40))
  let let54 := (binrel% GE.ge (binrel% HMul.hMul let12 skoT) let12)
  let let55 := (Eq let51 let51)
  let let56 := (Not let51)
  let let57 := (Not let56)
  let let58 := (Eq let57 let51)
  let let59 := (binrel% LE.le let45 let5)
  let let60 := (Not True)
  let let61 := (Eq let51 let57)
  let let62 := (Not let59)
  let let63 := (binrel% GT.gt let45 let5)
  let let64 := (binrel% GE.ge let5 let5)
  let let65 := (binrel% GE.ge skoB let5)
  let let66 := (Not let65)
  let let67 := (binrel% LT.lt skoB let5)
  let let68 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let69 := (binrel% LE.le skoB let13)
  let let70 := (Not let54)
  let let71 := (And let56 (And let35 (And let70 let20)))
  let let72 := (Eq let34 let71)
  let let73 := (Or let51 (Or let16 let19))
  let let74 := (Or let57 (Or let36 let21))
  let let75 := (Not let63)
  let let76 := (binrel% LT.lt let41 let42)
  let let77 := (And let11 let67)
  let let78 := (binrel% LT.lt let39 let43)
  let let79 := (And let4 let9)
  let let80 := (binrel% LT.lt let46 let43)
  let let81 := (And let4 let63)
(Eq let4 True) → (Eq let9 let8) → (Eq let11 True) → (Eq let17 True) → (Eq let7 let16) → (Eq let23 let22) → let23 → (Eq let24 True) → (Eq let34 let34) → (Eq let38 let37) → (Eq let39 let15) → (Eq let3 let3) → let38 → (Eq let25 let19) → (Eq let41 let40) → (Eq let50 let49) → (Eq let32 let51) → (Eq let46 let18) → let52 → (Eq let53 let5) → (Eq let42 let5) → (Eq let27 let54) → (Eq let55 True) → let58 → (Eq let59 let19) → (Eq let60 False) → (Eq let58 let61) → (Eq let63 let62) → (Eq let64 True) → (Eq let67 let66) → (Eq let68 let5) → (Eq let69 let16) → (Eq let43 let5) → (Eq let65 let51) → let34 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% HAdd.hAdd skoB skoA)
  let let7 := (binrel% LE.le let6 let5)
  let let8 := (Not let7)
  let let9 := (binrel% GT.gt let6 let5)
  let let10 := (Rat.ofInt 2)
  let let11 := (binrel% GT.gt let10 let1)
  let let12 := (Neg.neg (Int.ofNat 1))
  let let13 := (binrel% HMul.hMul let12 skoA)
  let let14 := (binrel% HMul.hMul let12 skoB)
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% GE.ge let15 let1)
  let let17 := (Eq let16 let16)
  let let18 := (binrel% HAdd.hAdd let14 skoA)
  let let19 := (binrel% GE.ge let18 let1)
  let let20 := (Not let19)
  let let21 := (Not let20)
  let let22 := (Eq let19 let21)
  let let23 := (Eq let21 let19)
  let let24 := (Eq let19 let19)
  let let25 := (binrel% LE.le skoB skoA)
  let let26 := (Not let25)
  let let27 := (binrel% LE.le skoT let2)
  let let28 := (Not let27)
  let let29 := (binrel% HMul.hMul skoA let3)
  let let30 := (binrel% LE.le skoB let29)
  let let31 := (Not let30)
  let let32 := (binrel% LE.le let5 skoB)
  let let33 := (Not let32)
  let let34 := (And let33 (And let31 (And let28 let26)))
  let let35 := (Not let16)
  let let36 := (Not let35)
  let let37 := (Eq let16 let36)
  let let38 := (Eq let36 let16)
  let let39 := (binrel% HMul.hMul let3 let6)
  let let40 := (binrel% HMul.hMul (Int.ofNat 2) skoB)
  let let41 := (binrel% HMul.hMul let10 skoB)
  let let42 := (binrel% HMul.hMul let10 let5)
  let let43 := (binrel% HMul.hMul let3 let5)
  let let44 := (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let43 let42))
  let let45 := (binrel% HAdd.hAdd skoB let13)
  let let46 := (binrel% HMul.hMul let3 let45)
  let let47 := (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let39 let41))
  let let48 := (binrel% GE.ge let47 let44)
  let let49 := (Not let48)
  let let50 := (binrel% LT.lt let47 let44)
  let let51 := (binrel% GE.ge skoB let1)
  let let52 := (Eq let29 let13)
  let let53 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let15 let40))
  let let54 := (binrel% GE.ge (binrel% HMul.hMul let12 skoT) let12)
  let let55 := (Eq let51 let51)
  let let56 := (Not let51)
  let let57 := (Not let56)
  let let58 := (Eq let57 let51)
  let let59 := (binrel% LE.le let45 let5)
  let let60 := (Not True)
  let let61 := (Eq let51 let57)
  let let62 := (Not let59)
  let let63 := (binrel% GT.gt let45 let5)
  let let64 := (binrel% GE.ge let5 let5)
  let let65 := (binrel% GE.ge skoB let5)
  let let66 := (Not let65)
  let let67 := (binrel% LT.lt skoB let5)
  let let68 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let69 := (binrel% LE.le skoB let13)
  let let70 := (Not let54)
  let let71 := (And let56 (And let35 (And let70 let20)))
  let let72 := (Eq let34 let71)
  let let73 := (Or let51 (Or let16 let19))
  let let74 := (Or let57 (Or let36 let21))
  let let75 := (Not let63)
  let let76 := (binrel% LT.lt let41 let42)
  let let77 := (And let11 let67)
  let let78 := (binrel% LT.lt let39 let43)
  let let79 := (And let4 let9)
  let let80 := (binrel% LT.lt let46 let43)
  let let81 := (And let4 let63)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let11 True) => -- EVALUATE
fun lean_r3 : (Eq let17 True) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq let7 let16) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let23 let22) => -- THEORY_REWRITE_BOOL
fun lean_r6 : let23 => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let24 True) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let34 let34) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let38 let37) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let39 let15) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let3 let3) => -- THEORY_REWRITE_ARITH
fun lean_r12 : let38 => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let25 let19) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let32 let51) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let46 let18) => -- THEORY_REWRITE_ARITH
fun lean_r18 : let52 => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let53 let5) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let42 let5) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let27 let54) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let55 True) => -- THEORY_REWRITE_BOOL
fun lean_r23 : let58 => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let59 let19) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let60 False) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let58 let61) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let64 True) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let68 let5) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let69 let16) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let43 let5) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let65 let51) => -- THEORY_REWRITE_ARITH
fun lean_a34 : let34 => by
have lean_s0 : (Or let57 (Or let36 (Or let21 False))) :=
  (scope (fun lean_a35 : let56 =>
    (scope (fun lean_a36 : let35 =>
      (scope (fun lean_a37 : let20 =>
        have lean_s0 : (Eq let62 let20) := by timed flipCongrArg lean_r24 [Not]
        have lean_s1 : (Eq let63 let20) := by timed Eq.trans lean_r27 lean_s0
        have lean_s2 : (Eq let20 let63) := by timed Eq.symm lean_s1
        have lean_s3 : let63 := by timed eqResolve lean_a37 lean_s2
        have lean_s4 : (Or let75 False) :=
          (scope (fun lean_a38 : let63 =>
            have lean_s4 : let4 := by timed trueElim lean_r0
            have lean_s5 : let81 := by timed And.intro lean_s4 lean_a38
            have lean_s6 : (Implies let81 let80) := by arithMulNeg [let45, let5, let3], 2
            have lean_s7 : let80 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let8 let35) := by timed flipCongrArg lean_r4 [Not]
            have lean_s9 : (Eq let9 let35) := by timed Eq.trans lean_r1 lean_s8
            have lean_s10 : (Eq let35 let9) := by timed Eq.symm lean_s9
            have lean_s11 : let9 := by timed eqResolve lean_a36 lean_s10
            have lean_s12 : let79 := by timed And.intro lean_s4 lean_s11
            have lean_s13 : (Implies let79 let78) := by arithMulNeg [let6, let5, let3], 2
            have lean_s14 : let78 := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : let11 := by timed trueElim lean_r2
            have lean_s16 : (Eq let66 let56) := by timed flipCongrArg lean_r33 [Not]
            have lean_s17 : (Eq let67 let56) := by timed Eq.trans lean_r29 lean_s16
            have lean_s18 : (Eq let56 let67) := by timed Eq.symm lean_s17
            have lean_s19 : let67 := by timed eqResolve lean_a35 lean_s18
            have lean_s20 : let77 := by timed And.intro lean_s15 lean_s19
            have lean_s21 : (Implies let77 let76) := by arithMulPos [skoB, let5, let10], 0
            have lean_s22 : let76 := by timed modusPonens lean_s20 lean_s21
            have lean_s23 : let50 := by sumBounds [lean_s7, lean_s14, lean_s22]
            let lean_s24 := by timed congrHAdd lean_r10 lean_r14
            have lean_s25 : (Eq let47 let53) := by timed congrHAdd lean_r17 lean_s24
            have lean_s26 : (Eq let47 let5) := by timed Eq.trans lean_s25 lean_r19
            let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
            let lean_s28 := by timed congrHAdd lean_r32 lean_r20
            have lean_s29 : (Eq let44 let68) := by timed congrHAdd lean_r32 lean_s28
            have lean_s30 : (Eq let44 let5) := by timed Eq.trans lean_s29 lean_r30
            have lean_s31 : (Eq let48 let64) := by timed congr lean_s27 lean_s30
            have lean_s32 : (Eq let48 True) := by timed Eq.trans lean_s31 lean_r28
            have lean_s33 : (Eq let49 let60) := by timed flipCongrArg lean_s32 [Not]
            have lean_s34 : (Eq let49 False) := by timed Eq.trans lean_s33 lean_r25
            have lean_s35 : (Eq let50 False) := by timed Eq.trans lean_r15 lean_s34
            show False from by timed eqResolve lean_s23 lean_s35
          ))
        have lean_s5 : let75 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let75 let21) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let75 let19) := by timed Eq.trans lean_s6 lean_r6
        have lean_s8 : (Eq let19 let59) := by timed Eq.symm lean_r24
        have lean_s9 : (Eq let75 let59) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let59 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let19 let75) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let59 let75) := by timed Eq.trans lean_r24 lean_s11
        have lean_s13 : let75 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let56 (And let35 let20))) := by liftOrNToNeg lean_s0
have lean_s2 : let74 := by timed flipNotAnd lean_s1 [let56, let35, let20]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let55 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let61 let55) := by timed congr lean_s5 lean_r23
have lean_s7 : (Eq let61 True) := by timed Eq.trans lean_s6 lean_r22
have lean_s8 : (Eq let58 True) := by timed Eq.trans lean_r26 lean_s7
have lean_s9 : let58 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let17 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let37 let17) := by timed congr lean_s12 lean_r12
have lean_s14 : (Eq let37 True) := by timed Eq.trans lean_s13 lean_r3
have lean_s15 : (Eq let38 True) := by timed Eq.trans lean_r9 lean_s14
have lean_s16 : let38 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let24 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let22 let24) := by timed congr lean_s19 lean_r6
have lean_s21 : (Eq let22 True) := by timed Eq.trans lean_s20 lean_r7
have lean_s22 : (Eq let23 True) := by timed Eq.trans lean_r5 lean_s21
have lean_s23 : let23 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq let74 let73) := by timed congr lean_s10 lean_s24
have lean_s26 : let73 := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Eq And And) := by timed rfl
have lean_s28 : (Eq let33 let56) := by timed flipCongrArg lean_r16 [Not]
let lean_s29 := by timed congr lean_s27 lean_s28
have lean_s30 : (Eq skoB skoB) := by timed rfl
let lean_s31 := by timed flipCongrArg lean_s30 [LE.le]
have lean_s32 : (Eq skoA skoA) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [HMul.hMul]
have lean_s34 : (Eq let29 let29) := by timed congr lean_s33 lean_r11
have lean_s35 : let52 := by timed Eq.trans lean_s34 lean_r18
have lean_s36 : (Eq let30 let69) := by timed congr lean_s31 lean_s35
have lean_s37 : (Eq let30 let16) := by timed Eq.trans lean_s36 lean_r31
have lean_s38 : (Eq let31 let35) := by timed flipCongrArg lean_s37 [Not]
let lean_s39 := by timed congr lean_s27 lean_s38
have lean_s40 : (Eq let28 let70) := by timed flipCongrArg lean_r21 [Not]
let lean_s41 := by timed congr lean_s27 lean_s40
have lean_s42 : (Eq let26 let20) := by timed flipCongrArg lean_r13 [Not]
let lean_s43 := by timed congr lean_s41 lean_s42
let lean_s44 := by timed congr lean_s39 lean_s43
have lean_s45 : let72 := by timed congr lean_s29 lean_s44
have lean_s46 : let72 := by timed Eq.trans lean_r8 lean_s45
have lean_s47 : let71 := by timed eqResolve lean_a34 lean_s46
have lean_s48 : let20 := by andElim lean_s47, 3
let lean_s49 := by R1 lean_s26, lean_s48, let19, [(- 1), 0]
have lean_s50 : let35 := by andElim lean_s47, 1
let lean_s51 := by R1 lean_s49, lean_s50, let16, [(- 1), 0]
have lean_s52 : let56 := by andElim lean_s47, 0
exact (show False from by R1 lean_s51, lean_s52, let51, [0, 0])


