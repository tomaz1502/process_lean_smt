open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoC : Rat}
variable {skoX : Rat}
variable {skoS : Rat}
variable {skoS : Rat}
variable {skoC : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Neg.neg let2)
  let let5 := (binrel% LT.lt let4 let1)
  let let6 := (binrel% HDiv.hDiv (Int.ofNat 177) (Int.ofNat 366500000))
  let let7 := (binrel% HMul.hMul let4 let6)
  let let8 := (Int.ofNat 1)
  let let9 := (binrel% HDiv.hDiv let8 (Int.ofNat 10000000))
  let let10 := (binrel% HMul.hMul let2 let9)
  let let11 := (binrel% HAdd.hAdd let10 let7)
  let let12 := (binrel% HMul.hMul let4 skoX)
  let let13 := (binrel% HMul.hMul let2 skoX)
  let let14 := (binrel% HAdd.hAdd let13 let12)
  let let15 := (binrel% GE.ge let14 let11)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let11)
  let let18 := (Neg.neg let6)
  let let19 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2807) (Int.ofNat 7330000000)))
  let let20 := (binrel% HAdd.hAdd let9 let18)
  let let21 := (Not True)
  let let22 := (Neg.neg let8)
  let let23 := (binrel% HMul.hMul let22 skoX)
  let let24 := (binrel% GE.ge let23 let18)
  let let25 := (binrel% LE.le skoX let6)
  let let26 := (binrel% GE.ge let23 (Neg.neg let9))
  let let27 := (binrel% LE.le skoX let9)
  let let28 := (Rat.ofInt 0)
  let let29 := (binrel% HAdd.hAdd skoX let23)
  let let30 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10000000))
  let let31 := (binrel% HDiv.hDiv (Rat.ofInt 177) (Rat.ofInt 366500000))
  let let32 := (Int.ofNat 3400)
  let let33 := (Int.ofNat 7383)
  let let34 := (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let22 skoC) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv let33 let32)) skoS)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3800) (Int.ofNat 17))))
  let let35 := (Neg.neg (binrel% HDiv.hDiv let32 let33))
  let let36 := (binrel% HMul.hMul let35 skoC)
  let let37 := (binrel% HDiv.hDiv (Int.ofNat 760000) let33)
  let let38 := (binrel% HAdd.hAdd let37 let36)
  let let39 := (binrel% LE.le skoS let38)
  let let40 := (binrel% LE.le let28 skoX)
  let let41 := (binrel% LE.le skoX let30)
  let let42 := (binrel% LE.le skoX let31)
  let let43 := (Not let42)
  let let44 := (Rat.ofInt 7383)
  let let45 := (Neg.neg (Rat.ofInt 3400))
  let let46 := (binrel% HDiv.hDiv let45 let44)
  let let47 := (binrel% HMul.hMul skoC let46)
  let let48 := (binrel% HDiv.hDiv (Rat.ofInt 760000) let44)
  let let49 := (binrel% HAdd.hAdd let48 let47)
  let let50 := (binrel% LE.le skoS let49)
  let let51 := (Not let50)
  let let52 := (And let51 (And let43 (And let41 let40)))
  let let53 := (binrel% HDiv.hDiv let8 let33)
  let let54 := (binrel% HMul.hMul let45 let53)
  let let55 := (Eq let54 let35)
  let let56 := (Not let24)
  let let57 := (Not let56)
  let let58 := (binrel% GE.ge skoX let1)
  let let59 := (binrel% HMul.hMul skoC let35)
  let let60 := (Not let25)
  let let61 := (binrel% GT.gt skoX let6)
  let let62 := (binrel% GE.ge let28 let19)
  let let63 := (Not let34)
  let let64 := (And let63 (And let56 (And let26 let58)))
  let let65 := (Eq let52 let64)
  let let66 := (Not let26)
  let let67 := (Or let24 let66)
  let let68 := (Or let57 let66)
  let let69 := (binrel% LT.lt let12 let7)
  let let70 := (And let5 let61)
  let let71 := (binrel% LE.le let13 let10)
  let let72 := (And let3 let27)
(Eq let3 True) → (Eq let5 True) → (Eq let17 let16) → (Eq let13 skoX) → (Eq let10 let9) → (Eq let7 let18) → (Eq let20 let19) → (Eq let21 False) → (Eq let25 let24) → (Eq let27 let26) → (Eq let29 let28) → (Eq let30 let9) → (Eq let31 let6) → (Eq let39 let34) → (Eq let52 let52) → let55 → (Eq let57 let24) → (Eq let40 let58) → (Eq let59 let36) → (Eq let61 let60) → (Eq let45 let45) → (Eq let12 let23) → (Eq let46 let54) → (Eq let62 True) → (Eq let48 let37) → let52 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Neg.neg let2)
  let let5 := (binrel% LT.lt let4 let1)
  let let6 := (binrel% HDiv.hDiv (Int.ofNat 177) (Int.ofNat 366500000))
  let let7 := (binrel% HMul.hMul let4 let6)
  let let8 := (Int.ofNat 1)
  let let9 := (binrel% HDiv.hDiv let8 (Int.ofNat 10000000))
  let let10 := (binrel% HMul.hMul let2 let9)
  let let11 := (binrel% HAdd.hAdd let10 let7)
  let let12 := (binrel% HMul.hMul let4 skoX)
  let let13 := (binrel% HMul.hMul let2 skoX)
  let let14 := (binrel% HAdd.hAdd let13 let12)
  let let15 := (binrel% GE.ge let14 let11)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let11)
  let let18 := (Neg.neg let6)
  let let19 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2807) (Int.ofNat 7330000000)))
  let let20 := (binrel% HAdd.hAdd let9 let18)
  let let21 := (Not True)
  let let22 := (Neg.neg let8)
  let let23 := (binrel% HMul.hMul let22 skoX)
  let let24 := (binrel% GE.ge let23 let18)
  let let25 := (binrel% LE.le skoX let6)
  let let26 := (binrel% GE.ge let23 (Neg.neg let9))
  let let27 := (binrel% LE.le skoX let9)
  let let28 := (Rat.ofInt 0)
  let let29 := (binrel% HAdd.hAdd skoX let23)
  let let30 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10000000))
  let let31 := (binrel% HDiv.hDiv (Rat.ofInt 177) (Rat.ofInt 366500000))
  let let32 := (Int.ofNat 3400)
  let let33 := (Int.ofNat 7383)
  let let34 := (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let22 skoC) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv let33 let32)) skoS)) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3800) (Int.ofNat 17))))
  let let35 := (Neg.neg (binrel% HDiv.hDiv let32 let33))
  let let36 := (binrel% HMul.hMul let35 skoC)
  let let37 := (binrel% HDiv.hDiv (Int.ofNat 760000) let33)
  let let38 := (binrel% HAdd.hAdd let37 let36)
  let let39 := (binrel% LE.le skoS let38)
  let let40 := (binrel% LE.le let28 skoX)
  let let41 := (binrel% LE.le skoX let30)
  let let42 := (binrel% LE.le skoX let31)
  let let43 := (Not let42)
  let let44 := (Rat.ofInt 7383)
  let let45 := (Neg.neg (Rat.ofInt 3400))
  let let46 := (binrel% HDiv.hDiv let45 let44)
  let let47 := (binrel% HMul.hMul skoC let46)
  let let48 := (binrel% HDiv.hDiv (Rat.ofInt 760000) let44)
  let let49 := (binrel% HAdd.hAdd let48 let47)
  let let50 := (binrel% LE.le skoS let49)
  let let51 := (Not let50)
  let let52 := (And let51 (And let43 (And let41 let40)))
  let let53 := (binrel% HDiv.hDiv let8 let33)
  let let54 := (binrel% HMul.hMul let45 let53)
  let let55 := (Eq let54 let35)
  let let56 := (Not let24)
  let let57 := (Not let56)
  let let58 := (binrel% GE.ge skoX let1)
  let let59 := (binrel% HMul.hMul skoC let35)
  let let60 := (Not let25)
  let let61 := (binrel% GT.gt skoX let6)
  let let62 := (binrel% GE.ge let28 let19)
  let let63 := (Not let34)
  let let64 := (And let63 (And let56 (And let26 let58)))
  let let65 := (Eq let52 let64)
  let let66 := (Not let26)
  let let67 := (Or let24 let66)
  let let68 := (Or let57 let66)
  let let69 := (binrel% LT.lt let12 let7)
  let let70 := (And let5 let61)
  let let71 := (binrel% LE.le let13 let10)
  let let72 := (And let3 let27)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let5 True) => -- EVALUATE
fun lean_r2 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let13 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let7 let18) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let21 False) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let30 let9) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let31 let6) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let39 let34) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let52 let52) => -- THEORY_REWRITE_BOOL
fun lean_r15 : let55 => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let57 let24) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let40 let58) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let59 let36) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let61 let60) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let45 let45) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let12 let23) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let46 let54) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let62 True) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let48 let37) => -- THEORY_REWRITE_ARITH
fun lean_a25 : let52 => by
have lean_s0 : (Or let57 (Or let66 False)) :=
  (scope (fun lean_a26 : let56 =>
    (scope (fun lean_a27 : let26 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let26 let27) := by timed Eq.symm lean_r9
      have lean_s2 : let27 := by timed eqResolve lean_a27 lean_s1
      have lean_s3 : let72 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let72 let71) := by arithMulPos [skoX, let9, let2], 1
      have lean_s5 : let71 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let5 := by timed trueElim lean_r1
      have lean_s7 : (Eq let60 let56) := by timed flipCongrArg lean_r8 [Not]
      have lean_s8 : (Eq let61 let56) := by timed Eq.trans lean_r19 lean_s7
      have lean_s9 : (Eq let56 let61) := by timed Eq.symm lean_s8
      have lean_s10 : let61 := by timed eqResolve lean_a26 lean_s9
      have lean_s11 : let70 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let70 let69) := by arithMulNeg [skoX, let6, let4], 2
      have lean_s13 : let69 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let17 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r3 [HAdd.hAdd]
      have lean_s16 : (Eq let14 let29) := by timed congr lean_s15 lean_r21
      have lean_s17 : (Eq let14 let28) := by timed Eq.trans lean_s16 lean_r10
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r4 [HAdd.hAdd]
      have lean_s20 : (Eq let11 let20) := by timed congr lean_s19 lean_r5
      have lean_s21 : (Eq let11 let19) := by timed Eq.trans lean_s20 lean_r6
      have lean_s22 : (Eq let15 let62) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let15 True) := by timed Eq.trans lean_s22 lean_r23
      have lean_s24 : (Eq let16 let21) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let16 False) := by timed Eq.trans lean_s24 lean_r7
      have lean_s26 : (Eq let17 False) := by timed Eq.trans lean_r2 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let56 let26)) := by liftOrNToNeg lean_s0
have lean_s2 : let68 := by timed flipNotAnd lean_s1 [let56, let26]
let lean_s3 := by timed flipCongrArg lean_r16 [Or]
have lean_s4 : (Eq let66 let66) := by timed rfl
have lean_s5 : (Eq let68 let67) := by timed congr lean_s3 lean_s4
have lean_s6 : let67 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
have lean_s8 : (Eq skoS skoS) := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [LE.le]
let lean_s10 := by timed flipCongrArg lean_r24 [HAdd.hAdd]
have lean_s11 : (Eq skoC skoC) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [HMul.hMul]
let lean_s13 := by timed flipCongrArg lean_r20 [HMul.hMul]
have lean_s14 : (Eq let53 let53) := by timed rfl
have lean_s15 : (Eq let54 let54) := by timed congr lean_s13 lean_s14
have lean_s16 : let55 := by timed Eq.trans lean_s15 lean_r15
have lean_s17 : (Eq let46 let35) := by timed Eq.trans lean_r22 lean_s16
have lean_s18 : (Eq let47 let59) := by timed congr lean_s12 lean_s17
have lean_s19 : (Eq let47 let36) := by timed Eq.trans lean_s18 lean_r18
have lean_s20 : (Eq let49 let38) := by timed congr lean_s10 lean_s19
have lean_s21 : (Eq let50 let39) := by timed congr lean_s9 lean_s20
have lean_s22 : (Eq let50 let34) := by timed Eq.trans lean_s21 lean_r13
have lean_s23 : (Eq let51 let63) := by timed flipCongrArg lean_s22 [Not]
let lean_s24 := by timed congr lean_s7 lean_s23
have lean_s25 : (Eq skoX skoX) := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [LE.le]
have lean_s27 : (Eq let42 let25) := by timed congr lean_s26 lean_r12
have lean_s28 : (Eq let42 let24) := by timed Eq.trans lean_s27 lean_r8
have lean_s29 : (Eq let43 let56) := by timed flipCongrArg lean_s28 [Not]
let lean_s30 := by timed congr lean_s7 lean_s29
let lean_s31 := by timed flipCongrArg lean_s25 [LE.le]
have lean_s32 : (Eq let41 let27) := by timed congr lean_s31 lean_r11
have lean_s33 : (Eq let41 let26) := by timed Eq.trans lean_s32 lean_r9
let lean_s34 := by timed congr lean_s7 lean_s33
let lean_s35 := by timed congr lean_s34 lean_r17
let lean_s36 := by timed congr lean_s30 lean_s35
have lean_s37 : let65 := by timed congr lean_s24 lean_s36
have lean_s38 : let65 := by timed Eq.trans lean_r14 lean_s37
have lean_s39 : let64 := by timed eqResolve lean_a25 lean_s38
have lean_s40 : let26 := by andElim lean_s39, 2
let lean_s41 := by R2 lean_s6, lean_s40, let26, [(- 1), 0]
have lean_s42 : let56 := by andElim lean_s39, 1
exact (show False from by R1 lean_s41, lean_s42, let24, [0, 0])


