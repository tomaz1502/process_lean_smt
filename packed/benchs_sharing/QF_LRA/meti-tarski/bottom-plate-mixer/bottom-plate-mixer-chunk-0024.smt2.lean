open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoC : Rat}
variable {skoS : Rat}
variable {skoC : Rat}
variable {skoX : Rat}
variable {skoS : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 skoX)
  let let4 := (Rat.ofInt 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 skoX)
  let let7 := (Int.ofNat 0)
  let let8 := (binrel% LT.lt let5 let7)
  let let9 := (binrel% HDiv.hDiv let1 (Int.ofNat 10000000))
  let let10 := (binrel% HMul.hMul let4 let9)
  let let11 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2807) (Int.ofNat 7330000000)))
  let let12 := (Rat.ofInt 0)
  let let13 := (binrel% LE.le let12 let11)
  let let14 := (binrel% HMul.hMul let4 skoX)
  let let15 := (binrel% LE.le let12 skoX)
  let let16 := (binrel% HDiv.hDiv let4 (Rat.ofInt 10000000))
  let let17 := (binrel% LE.le skoX let16)
  let let18 := (Rat.ofInt 7383)
  let let19 := (Neg.neg (Rat.ofInt 3400))
  let let20 := (binrel% HDiv.hDiv let19 let18)
  let let21 := (binrel% HMul.hMul skoC let20)
  let let22 := (binrel% HDiv.hDiv (Rat.ofInt 760000) let18)
  let let23 := (binrel% HAdd.hAdd let22 let21)
  let let24 := (binrel% LE.le let23 skoS)
  let let25 := (Not let24)
  let let26 := (binrel% HDiv.hDiv (Rat.ofInt 177) (Rat.ofInt 366500000))
  let let27 := (binrel% LE.le skoX let26)
  let let28 := (binrel% LE.le skoS let23)
  let let29 := (binrel% LE.le let26 skoX)
  let let30 := (And let29 (And let28 (And let27 (And let25 (And let17 let15)))))
  let let31 := (binrel% GE.ge skoX let7)
  let let32 := (binrel% HDiv.hDiv (Int.ofNat 3800) (Int.ofNat 17))
  let let33 := (Int.ofNat 3400)
  let let34 := (Int.ofNat 7383)
  let let35 := (binrel% HDiv.hDiv let34 let33)
  let let36 := (binrel% GE.ge (binrel% HAdd.hAdd skoC (binrel% HMul.hMul let35 skoS)) let32)
  let let37 := (Neg.neg (binrel% HDiv.hDiv let33 let34))
  let let38 := (binrel% HMul.hMul let37 skoC)
  let let39 := (binrel% HDiv.hDiv (Int.ofNat 760000) let34)
  let let40 := (binrel% HAdd.hAdd let39 let38)
  let let41 := (binrel% LE.le let40 skoS)
  let let42 := (binrel% HMul.hMul skoC let37)
  let let43 := (binrel% HAdd.hAdd skoX let3)
  let let44 := (binrel% HDiv.hDiv let1 let34)
  let let45 := (binrel% HMul.hMul let19 let44)
  let let46 := (Eq let45 let37)
  let let47 := (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let2 skoC) (binrel% HMul.hMul (Neg.neg let35) skoS)) (Neg.neg let32))
  let let48 := (binrel% LE.le skoS let40)
  let let49 := (binrel% GT.gt let4 let7)
  let let50 := (binrel% HDiv.hDiv (Int.ofNat 177) (Int.ofNat 366500000))
  let let51 := (Neg.neg let50)
  let let52 := (binrel% HMul.hMul let5 let50)
  let let53 := (binrel% HAdd.hAdd let9 let51)
  let let54 := (binrel% GE.ge let3 let51)
  let let55 := (binrel% LE.le skoX let50)
  let let56 := (binrel% GE.ge let3 (Neg.neg let9))
  let let57 := (binrel% LE.le skoX let9)
  let let58 := (binrel% GE.ge skoX let50)
  let let59 := (binrel% LE.le let50 skoX)
  let let60 := (Not let36)
  let let61 := (And let58 (And let47 (And let54 (And let60 (And let56 let31)))))
  let let62 := (Eq let30 let61)
  let let63 := (Not let56)
  let let64 := (Not let58)
  let let65 := (binrel% HAdd.hAdd let10 let52)
  let let66 := (binrel% HAdd.hAdd let14 let6)
  let let67 := (binrel% LE.le let66 let65)
  let let68 := (binrel% LE.le let6 let52)
  let let69 := (And let8 let58)
  let let70 := (binrel% LE.le let14 let10)
  let let71 := (And let49 let57)
(Eq let6 let3) → (Eq let8 True) → (Eq let10 let9) → (Eq let13 False) → (Eq let14 skoX) → (Eq let30 let30) → (Eq let15 let31) → (Eq let16 let9) → (Eq let19 let19) → (Eq let41 let36) → (Eq let42 let38) → (Eq let43 let12) → let46 → (Eq let48 let47) → (Eq let49 True) → (Eq let20 let45) → (Eq let52 let51) → (Eq let26 let50) → (Eq let22 let39) → (Eq let53 let11) → (Eq let55 let54) → (Eq let57 let56) → (Eq let59 let58) → let30 → False :=
  let let1 := (Int.ofNat 1)
  let let2 := (Neg.neg let1)
  let let3 := (binrel% HMul.hMul let2 skoX)
  let let4 := (Rat.ofInt 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 skoX)
  let let7 := (Int.ofNat 0)
  let let8 := (binrel% LT.lt let5 let7)
  let let9 := (binrel% HDiv.hDiv let1 (Int.ofNat 10000000))
  let let10 := (binrel% HMul.hMul let4 let9)
  let let11 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2807) (Int.ofNat 7330000000)))
  let let12 := (Rat.ofInt 0)
  let let13 := (binrel% LE.le let12 let11)
  let let14 := (binrel% HMul.hMul let4 skoX)
  let let15 := (binrel% LE.le let12 skoX)
  let let16 := (binrel% HDiv.hDiv let4 (Rat.ofInt 10000000))
  let let17 := (binrel% LE.le skoX let16)
  let let18 := (Rat.ofInt 7383)
  let let19 := (Neg.neg (Rat.ofInt 3400))
  let let20 := (binrel% HDiv.hDiv let19 let18)
  let let21 := (binrel% HMul.hMul skoC let20)
  let let22 := (binrel% HDiv.hDiv (Rat.ofInt 760000) let18)
  let let23 := (binrel% HAdd.hAdd let22 let21)
  let let24 := (binrel% LE.le let23 skoS)
  let let25 := (Not let24)
  let let26 := (binrel% HDiv.hDiv (Rat.ofInt 177) (Rat.ofInt 366500000))
  let let27 := (binrel% LE.le skoX let26)
  let let28 := (binrel% LE.le skoS let23)
  let let29 := (binrel% LE.le let26 skoX)
  let let30 := (And let29 (And let28 (And let27 (And let25 (And let17 let15)))))
  let let31 := (binrel% GE.ge skoX let7)
  let let32 := (binrel% HDiv.hDiv (Int.ofNat 3800) (Int.ofNat 17))
  let let33 := (Int.ofNat 3400)
  let let34 := (Int.ofNat 7383)
  let let35 := (binrel% HDiv.hDiv let34 let33)
  let let36 := (binrel% GE.ge (binrel% HAdd.hAdd skoC (binrel% HMul.hMul let35 skoS)) let32)
  let let37 := (Neg.neg (binrel% HDiv.hDiv let33 let34))
  let let38 := (binrel% HMul.hMul let37 skoC)
  let let39 := (binrel% HDiv.hDiv (Int.ofNat 760000) let34)
  let let40 := (binrel% HAdd.hAdd let39 let38)
  let let41 := (binrel% LE.le let40 skoS)
  let let42 := (binrel% HMul.hMul skoC let37)
  let let43 := (binrel% HAdd.hAdd skoX let3)
  let let44 := (binrel% HDiv.hDiv let1 let34)
  let let45 := (binrel% HMul.hMul let19 let44)
  let let46 := (Eq let45 let37)
  let let47 := (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let2 skoC) (binrel% HMul.hMul (Neg.neg let35) skoS)) (Neg.neg let32))
  let let48 := (binrel% LE.le skoS let40)
  let let49 := (binrel% GT.gt let4 let7)
  let let50 := (binrel% HDiv.hDiv (Int.ofNat 177) (Int.ofNat 366500000))
  let let51 := (Neg.neg let50)
  let let52 := (binrel% HMul.hMul let5 let50)
  let let53 := (binrel% HAdd.hAdd let9 let51)
  let let54 := (binrel% GE.ge let3 let51)
  let let55 := (binrel% LE.le skoX let50)
  let let56 := (binrel% GE.ge let3 (Neg.neg let9))
  let let57 := (binrel% LE.le skoX let9)
  let let58 := (binrel% GE.ge skoX let50)
  let let59 := (binrel% LE.le let50 skoX)
  let let60 := (Not let36)
  let let61 := (And let58 (And let47 (And let54 (And let60 (And let56 let31)))))
  let let62 := (Eq let30 let61)
  let let63 := (Not let56)
  let let64 := (Not let58)
  let let65 := (binrel% HAdd.hAdd let10 let52)
  let let66 := (binrel% HAdd.hAdd let14 let6)
  let let67 := (binrel% LE.le let66 let65)
  let let68 := (binrel% LE.le let6 let52)
  let let69 := (And let8 let58)
  let let70 := (binrel% LE.le let14 let10)
  let let71 := (And let49 let57)
fun lean_r0 : (Eq let6 let3) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let8 True) => -- EVALUATE
fun lean_r2 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let13 False) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let14 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let30 let30) => -- THEORY_REWRITE_BOOL
fun lean_r6 : (Eq let15 let31) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let16 let9) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let19 let19) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let41 let36) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let42 let38) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let43 let12) => -- THEORY_REWRITE_ARITH
fun lean_r12 : let46 => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let48 let47) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let49 True) => -- EVALUATE
fun lean_r15 : (Eq let20 let45) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let26 let50) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let22 let39) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let53 let11) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let57 let56) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let59 let58) => -- THEORY_REWRITE_ARITH
fun lean_a23 : let30 => by
have lean_s0 : (Or let64 (Or let63 False)) :=
  (scope (fun lean_a24 : let58 =>
    (scope (fun lean_a25 : let56 =>
      have lean_s0 : let49 := by timed trueElim lean_r14
      have lean_s1 : (Eq let56 let57) := by timed Eq.symm lean_r21
      have lean_s2 : let57 := by timed eqResolve lean_a25 lean_s1
      have lean_s3 : let71 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let71 let70) := by arithMulPos [skoX, let9, let4], 1
      have lean_s5 : let70 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let8 := by timed trueElim lean_r1
      have lean_s7 : let69 := by timed And.intro lean_s6 lean_a24
      have lean_s8 : (Implies let69 let68) := by arithMulNeg [skoX, let50, let5], 3
      have lean_s9 : let68 := by timed modusPonens lean_s7 lean_s8
      have lean_s10 : let67 := by sumBounds [lean_s5, lean_s9]
      let lean_s11 := by timed flipCongrArg lean_r4 [HAdd.hAdd]
      have lean_s12 : (Eq let66 let43) := by timed congr lean_s11 lean_r0
      have lean_s13 : (Eq let66 let12) := by timed Eq.trans lean_s12 lean_r11
      let lean_s14 := by timed flipCongrArg lean_s13 [LE.le]
      let lean_s15 := by timed flipCongrArg lean_r2 [HAdd.hAdd]
      have lean_s16 : (Eq let65 let53) := by timed congr lean_s15 lean_r16
      have lean_s17 : (Eq let65 let11) := by timed Eq.trans lean_s16 lean_r19
      have lean_s18 : (Eq let67 let13) := by timed congr lean_s14 lean_s17
      have lean_s19 : (Eq let67 False) := by timed Eq.trans lean_s18 lean_r3
      show False from by timed eqResolve lean_s10 lean_s19
  ))))
have lean_s1 : (Not (And let58 let56)) := by liftOrNToNeg lean_s0
have lean_s2 : (Or let64 let63) := by timed flipNotAnd lean_s1 [let58, let56]
have lean_s3 : (Eq And And) := by timed rfl
let lean_s4 := by timed flipCongrArg lean_r17 [LE.le]
have lean_s5 : (Eq skoX skoX) := by timed rfl
have lean_s6 : (Eq let29 let59) := by timed congr lean_s4 lean_s5
have lean_s7 : (Eq let29 let58) := by timed Eq.trans lean_s6 lean_r22
let lean_s8 := by timed congr lean_s3 lean_s7
have lean_s9 : (Eq skoS skoS) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [LE.le]
let lean_s11 := by timed flipCongrArg lean_r18 [HAdd.hAdd]
have lean_s12 : (Eq skoC skoC) := by timed rfl
let lean_s13 := by timed flipCongrArg lean_s12 [HMul.hMul]
let lean_s14 := by timed flipCongrArg lean_r8 [HMul.hMul]
have lean_s15 : (Eq let44 let44) := by timed rfl
have lean_s16 : (Eq let45 let45) := by timed congr lean_s14 lean_s15
have lean_s17 : let46 := by timed Eq.trans lean_s16 lean_r12
have lean_s18 : (Eq let20 let37) := by timed Eq.trans lean_r15 lean_s17
have lean_s19 : (Eq let21 let42) := by timed congr lean_s13 lean_s18
have lean_s20 : (Eq let21 let38) := by timed Eq.trans lean_s19 lean_r10
have lean_s21 : (Eq let23 let40) := by timed congr lean_s11 lean_s20
have lean_s22 : (Eq let28 let48) := by timed congr lean_s10 lean_s21
have lean_s23 : (Eq let28 let47) := by timed Eq.trans lean_s22 lean_r13
let lean_s24 := by timed congr lean_s3 lean_s23
let lean_s25 := by timed flipCongrArg lean_s5 [LE.le]
have lean_s26 : (Eq let27 let55) := by timed congr lean_s25 lean_r17
have lean_s27 : (Eq let27 let54) := by timed Eq.trans lean_s26 lean_r20
let lean_s28 := by timed congr lean_s3 lean_s27
let lean_s29 := by timed flipCongrArg lean_s21 [LE.le]
have lean_s30 : (Eq let24 let41) := by timed congr lean_s29 lean_s9
have lean_s31 : (Eq let24 let36) := by timed Eq.trans lean_s30 lean_r9
have lean_s32 : (Eq let25 let60) := by timed flipCongrArg lean_s31 [Not]
let lean_s33 := by timed congr lean_s3 lean_s32
let lean_s34 := by timed flipCongrArg lean_s5 [LE.le]
have lean_s35 : (Eq let17 let57) := by timed congr lean_s34 lean_r7
have lean_s36 : (Eq let17 let56) := by timed Eq.trans lean_s35 lean_r21
let lean_s37 := by timed congr lean_s3 lean_s36
let lean_s38 := by timed congr lean_s37 lean_r6
let lean_s39 := by timed congr lean_s33 lean_s38
let lean_s40 := by timed congr lean_s28 lean_s39
let lean_s41 := by timed congr lean_s24 lean_s40
have lean_s42 : let62 := by timed congr lean_s8 lean_s41
have lean_s43 : let62 := by timed Eq.trans lean_r5 lean_s42
have lean_s44 : let61 := by timed eqResolve lean_a23 lean_s43
have lean_s45 : let56 := by andElim lean_s44, 4
let lean_s46 := by R2 lean_s2, lean_s45, let56, [(- 1), 0]
have lean_s47 : let58 := by andElim lean_s44, 0
exact (show False from by R2 lean_s46, lean_s47, let58, [0, 0])


