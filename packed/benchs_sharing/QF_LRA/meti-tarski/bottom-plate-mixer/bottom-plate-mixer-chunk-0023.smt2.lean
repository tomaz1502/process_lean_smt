open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoSB : Rat}
variable {skoC : Rat}
variable {skoS : Rat}
variable {skoX : Rat}
variable {skoSB : Rat}
variable {skoC : Rat}
variable {skoCB : Rat}
variable {skoCB : Rat}
variable {skoS : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Neg.neg let2)
  let let5 := (binrel% LT.lt let4 let1)
  let let6 := (Int.ofNat 1)
  let let7 := (binrel% HDiv.hDiv let6 (Int.ofNat 10000000))
  let let8 := (binrel% HMul.hMul let2 let7)
  let let9 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2807) (Int.ofNat 7330000000)))
  let let10 := (binrel% HDiv.hDiv (Int.ofNat 177) (Int.ofNat 366500000))
  let let11 := (Neg.neg let10)
  let let12 := (binrel% HAdd.hAdd let7 let11)
  let let13 := (binrel% HMul.hMul let4 let10)
  let let14 := (Int.ofNat 13)
  let let15 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 570) let14))
  let let16 := (binrel% HDiv.hDiv let6 let14)
  let let17 := (Neg.neg (Rat.ofInt 570))
  let let18 := (binrel% HMul.hMul let17 let16)
  let let19 := (Eq let18 let15)
  let let20 := (binrel% HMul.hMul let15 skoC)
  let let21 := (binrel% HMul.hMul skoC let15)
  let let22 := (binrel% GE.ge skoX let1)
  let let23 := (Rat.ofInt 0)
  let let24 := (binrel% LE.le let23 skoX)
  let let25 := (Neg.neg let6)
  let let26 := (binrel% HMul.hMul let25 skoX)
  let let27 := (binrel% GE.ge let26 let11)
  let let28 := (binrel% LE.le skoX let10)
  let let29 := (Int.ofNat 65)
  let let30 := (binrel% HDiv.hDiv let6 let29)
  let let31 := (Neg.neg (Rat.ofInt 49))
  let let32 := (binrel% HMul.hMul let31 let30)
  let let33 := (binrel% HDiv.hDiv let31 (Rat.ofInt 65))
  let let34 := (binrel% HMul.hMul let2 skoX)
  let let35 := (Neg.neg (Rat.ofInt 200))
  let let36 := (binrel% HMul.hMul skoS let35)
  let let37 := (binrel% HMul.hMul skoCB let33)
  let let38 := (binrel% HDiv.hDiv let17 (Rat.ofInt 13))
  let let39 := (binrel% HMul.hMul skoC let38)
  let let40 := (binrel% HDiv.hDiv (Rat.ofInt 12695) (Rat.ofInt 52))
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let37 let36)))
  let let42 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let40 let39) let37) let36)
  let let43 := (Int.ofNat 49)
  let let44 := (Neg.neg (binrel% HDiv.hDiv let43 let29))
  let let45 := (Eq let32 let44)
  let let46 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10000000))
  let let47 := (Int.ofNat 7383)
  let let48 := (binrel% HDiv.hDiv (Int.ofNat 760000) let47)
  let let49 := (binrel% HDiv.hDiv (Int.ofNat 3400) let47)
  let let50 := (binrel% GE.ge (binrel% HAdd.hAdd skoS (binrel% HMul.hMul let49 skoC)) let48)
  let let51 := (Neg.neg let49)
  let let52 := (binrel% HMul.hMul let51 skoC)
  let let53 := (binrel% HAdd.hAdd let48 let52)
  let let54 := (binrel% LE.le let53 skoS)
  let let55 := (binrel% HMul.hMul let44 skoCB)
  let let56 := (Int.ofNat 200)
  let let57 := (binrel% HMul.hMul (Neg.neg let56) skoS)
  let let58 := (binrel% HDiv.hDiv (Int.ofNat 12695) (Int.ofNat 52))
  let let59 := (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let20 let55)))
  let let60 := (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let55 let57)))
  let let61 := (binrel% HMul.hMul skoC let51)
  let let62 := (binrel% HMul.hMul skoCB let44)
  let let63 := (binrel% HDiv.hDiv let6 let47)
  let let64 := (Neg.neg (Rat.ofInt 3400))
  let let65 := (binrel% HMul.hMul let64 let63)
  let let66 := (Rat.ofInt 7383)
  let let67 := (binrel% HDiv.hDiv let64 let66)
  let let68 := (binrel% GE.ge let26 (Neg.neg let7))
  let let69 := (binrel% LE.le skoX let7)
  let let70 := (binrel% HAdd.hAdd skoX let26)
  let let71 := (binrel% HDiv.hDiv (Rat.ofInt 177) (Rat.ofInt 366500000))
  let let72 := (binrel% HMul.hMul let25 skoS)
  let let73 := (binrel% GE.ge (binrel% HAdd.hAdd let72 let52) (Neg.neg let48))
  let let74 := (binrel% LE.le skoS let53)
  let let75 := (binrel% HDiv.hDiv (Rat.ofInt 760000) let66)
  let let76 := (binrel% LE.le let23 let9)
  let let77 := (binrel% GE.ge (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 57) (Int.ofNat 260))) skoC) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv let43 (Int.ofNat 13000))) skoCB) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv let6 let56)) skoSB)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2539) (Int.ofNat 2080))))
  let let78 := (binrel% LE.le skoSB let59)
  let let79 := (Eq let65 let51)
  let let80 := (binrel% HMul.hMul let4 skoX)
  let let81 := (binrel% GE.ge skoX let10)
  let let82 := (binrel% LE.le let10 skoX)
  let let83 := (Eq let36 let57)
  let let84 := (binrel% LE.le skoX let46)
  let let85 := (binrel% LE.le skoSB let42)
  let let86 := (Not let85)
  let let87 := (binrel% LE.le skoX let71)
  let let88 := (binrel% HMul.hMul skoC let67)
  let let89 := (binrel% HAdd.hAdd let75 let88)
  let let90 := (binrel% LE.le skoS let89)
  let let91 := (binrel% LE.le let89 skoS)
  let let92 := (binrel% LE.le let71 skoX)
  let let93 := (And let92 (And let91 (And let90 (And let87 (And let86 (And let84 let24))))))
  let let94 := (Not let77)
  let let95 := (And let81 (And let50 (And let73 (And let27 (And let94 (And let68 let22))))))
  let let96 := (Eq let93 let95)
  let let97 := (Not let68)
  let let98 := (Not let81)
  let let99 := (binrel% HAdd.hAdd let8 let13)
  let let100 := (binrel% HAdd.hAdd let34 let80)
  let let101 := (binrel% LE.le let100 let99)
  let let102 := (binrel% LE.le let80 let13)
  let let103 := (And let5 let81)
  let let104 := (binrel% LE.le let34 let8)
  let let105 := (And let3 let69)
(Eq let3 True) → (Eq let5 True) → (Eq let8 let7) → (Eq let12 let9) → (Eq let13 let11) → let19 → (Eq let21 let20) → (Eq let24 let22) → (Eq let28 let27) → (Eq let33 let32) → (Eq let34 skoX) → (Eq let42 let41) → let45 → (Eq let46 let7) → (Eq let54 let50) → (Eq let35 let35) → (Eq let60 let59) → (Eq let31 let31) → (Eq let61 let52) → (Eq let62 let55) → (Eq let67 let65) → (Eq let69 let68) → (Eq let17 let17) → (Eq let70 let23) → (Eq let38 let18) → (Eq let71 let10) → (Eq let64 let64) → (Eq let74 let73) → (Eq let75 let48) → (Eq let76 False) → (Eq let78 let77) → let79 → (Eq let80 let26) → (Eq let40 let58) → (Eq let82 let81) → let83 → (Eq let93 let93) → let93 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Neg.neg let2)
  let let5 := (binrel% LT.lt let4 let1)
  let let6 := (Int.ofNat 1)
  let let7 := (binrel% HDiv.hDiv let6 (Int.ofNat 10000000))
  let let8 := (binrel% HMul.hMul let2 let7)
  let let9 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2807) (Int.ofNat 7330000000)))
  let let10 := (binrel% HDiv.hDiv (Int.ofNat 177) (Int.ofNat 366500000))
  let let11 := (Neg.neg let10)
  let let12 := (binrel% HAdd.hAdd let7 let11)
  let let13 := (binrel% HMul.hMul let4 let10)
  let let14 := (Int.ofNat 13)
  let let15 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 570) let14))
  let let16 := (binrel% HDiv.hDiv let6 let14)
  let let17 := (Neg.neg (Rat.ofInt 570))
  let let18 := (binrel% HMul.hMul let17 let16)
  let let19 := (Eq let18 let15)
  let let20 := (binrel% HMul.hMul let15 skoC)
  let let21 := (binrel% HMul.hMul skoC let15)
  let let22 := (binrel% GE.ge skoX let1)
  let let23 := (Rat.ofInt 0)
  let let24 := (binrel% LE.le let23 skoX)
  let let25 := (Neg.neg let6)
  let let26 := (binrel% HMul.hMul let25 skoX)
  let let27 := (binrel% GE.ge let26 let11)
  let let28 := (binrel% LE.le skoX let10)
  let let29 := (Int.ofNat 65)
  let let30 := (binrel% HDiv.hDiv let6 let29)
  let let31 := (Neg.neg (Rat.ofInt 49))
  let let32 := (binrel% HMul.hMul let31 let30)
  let let33 := (binrel% HDiv.hDiv let31 (Rat.ofInt 65))
  let let34 := (binrel% HMul.hMul let2 skoX)
  let let35 := (Neg.neg (Rat.ofInt 200))
  let let36 := (binrel% HMul.hMul skoS let35)
  let let37 := (binrel% HMul.hMul skoCB let33)
  let let38 := (binrel% HDiv.hDiv let17 (Rat.ofInt 13))
  let let39 := (binrel% HMul.hMul skoC let38)
  let let40 := (binrel% HDiv.hDiv (Rat.ofInt 12695) (Rat.ofInt 52))
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let37 let36)))
  let let42 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd (binrel% HAdd.hAdd let40 let39) let37) let36)
  let let43 := (Int.ofNat 49)
  let let44 := (Neg.neg (binrel% HDiv.hDiv let43 let29))
  let let45 := (Eq let32 let44)
  let let46 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10000000))
  let let47 := (Int.ofNat 7383)
  let let48 := (binrel% HDiv.hDiv (Int.ofNat 760000) let47)
  let let49 := (binrel% HDiv.hDiv (Int.ofNat 3400) let47)
  let let50 := (binrel% GE.ge (binrel% HAdd.hAdd skoS (binrel% HMul.hMul let49 skoC)) let48)
  let let51 := (Neg.neg let49)
  let let52 := (binrel% HMul.hMul let51 skoC)
  let let53 := (binrel% HAdd.hAdd let48 let52)
  let let54 := (binrel% LE.le let53 skoS)
  let let55 := (binrel% HMul.hMul let44 skoCB)
  let let56 := (Int.ofNat 200)
  let let57 := (binrel% HMul.hMul (Neg.neg let56) skoS)
  let let58 := (binrel% HDiv.hDiv (Int.ofNat 12695) (Int.ofNat 52))
  let let59 := (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let20 let55)))
  let let60 := (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let55 let57)))
  let let61 := (binrel% HMul.hMul skoC let51)
  let let62 := (binrel% HMul.hMul skoCB let44)
  let let63 := (binrel% HDiv.hDiv let6 let47)
  let let64 := (Neg.neg (Rat.ofInt 3400))
  let let65 := (binrel% HMul.hMul let64 let63)
  let let66 := (Rat.ofInt 7383)
  let let67 := (binrel% HDiv.hDiv let64 let66)
  let let68 := (binrel% GE.ge let26 (Neg.neg let7))
  let let69 := (binrel% LE.le skoX let7)
  let let70 := (binrel% HAdd.hAdd skoX let26)
  let let71 := (binrel% HDiv.hDiv (Rat.ofInt 177) (Rat.ofInt 366500000))
  let let72 := (binrel% HMul.hMul let25 skoS)
  let let73 := (binrel% GE.ge (binrel% HAdd.hAdd let72 let52) (Neg.neg let48))
  let let74 := (binrel% LE.le skoS let53)
  let let75 := (binrel% HDiv.hDiv (Rat.ofInt 760000) let66)
  let let76 := (binrel% LE.le let23 let9)
  let let77 := (binrel% GE.ge (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 57) (Int.ofNat 260))) skoC) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv let43 (Int.ofNat 13000))) skoCB) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv let6 let56)) skoSB)))) (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2539) (Int.ofNat 2080))))
  let let78 := (binrel% LE.le skoSB let59)
  let let79 := (Eq let65 let51)
  let let80 := (binrel% HMul.hMul let4 skoX)
  let let81 := (binrel% GE.ge skoX let10)
  let let82 := (binrel% LE.le let10 skoX)
  let let83 := (Eq let36 let57)
  let let84 := (binrel% LE.le skoX let46)
  let let85 := (binrel% LE.le skoSB let42)
  let let86 := (Not let85)
  let let87 := (binrel% LE.le skoX let71)
  let let88 := (binrel% HMul.hMul skoC let67)
  let let89 := (binrel% HAdd.hAdd let75 let88)
  let let90 := (binrel% LE.le skoS let89)
  let let91 := (binrel% LE.le let89 skoS)
  let let92 := (binrel% LE.le let71 skoX)
  let let93 := (And let92 (And let91 (And let90 (And let87 (And let86 (And let84 let24))))))
  let let94 := (Not let77)
  let let95 := (And let81 (And let50 (And let73 (And let27 (And let94 (And let68 let22))))))
  let let96 := (Eq let93 let95)
  let let97 := (Not let68)
  let let98 := (Not let81)
  let let99 := (binrel% HAdd.hAdd let8 let13)
  let let100 := (binrel% HAdd.hAdd let34 let80)
  let let101 := (binrel% LE.le let100 let99)
  let let102 := (binrel% LE.le let80 let13)
  let let103 := (And let5 let81)
  let let104 := (binrel% LE.le let34 let8)
  let let105 := (And let3 let69)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let5 True) => -- EVALUATE
fun lean_r2 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let12 let9) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let13 let11) => -- THEORY_REWRITE_ARITH
fun lean_r5 : let19 => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let24 let22) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let34 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r12 : let45 => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let46 let7) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let54 let50) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let35 let35) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let60 let59) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let31 let31) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let61 let52) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let62 let55) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let67 let65) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let69 let68) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let17 let17) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let70 let23) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let38 let18) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let71 let10) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let64 let64) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let74 let73) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let75 let48) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let76 False) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let78 let77) => -- THEORY_REWRITE_ARITH
fun lean_r31 : let79 => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let80 let26) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let40 let58) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let82 let81) => -- THEORY_REWRITE_ARITH
fun lean_r35 : let83 => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let93 let93) => -- THEORY_REWRITE_BOOL
fun lean_a37 : let93 => by
have lean_s0 : (Or let98 (Or let97 False)) :=
  (scope (fun lean_a38 : let81 =>
    (scope (fun lean_a39 : let68 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let68 let69) := by timed Eq.symm lean_r21
      have lean_s2 : let69 := by timed eqResolve lean_a39 lean_s1
      have lean_s3 : let105 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let105 let104) := by arithMulPos [skoX, let7, let2], 1
      have lean_s5 : let104 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let5 := by timed trueElim lean_r1
      have lean_s7 : let103 := by timed And.intro lean_s6 lean_a38
      have lean_s8 : (Implies let103 let102) := by arithMulNeg [skoX, let10, let4], 3
      have lean_s9 : let102 := by timed modusPonens lean_s7 lean_s8
      have lean_s10 : let101 := by sumBounds [lean_s5, lean_s9]
      let lean_s11 := by timed flipCongrArg lean_r10 [HAdd.hAdd]
      have lean_s12 : (Eq let100 let70) := by timed congr lean_s11 lean_r32
      have lean_s13 : (Eq let100 let23) := by timed Eq.trans lean_s12 lean_r23
      let lean_s14 := by timed flipCongrArg lean_s13 [LE.le]
      let lean_s15 := by timed flipCongrArg lean_r2 [HAdd.hAdd]
      have lean_s16 : (Eq let99 let12) := by timed congr lean_s15 lean_r4
      have lean_s17 : (Eq let99 let9) := by timed Eq.trans lean_s16 lean_r3
      have lean_s18 : (Eq let101 let76) := by timed congr lean_s14 lean_s17
      have lean_s19 : (Eq let101 False) := by timed Eq.trans lean_s18 lean_r29
      show False from by timed eqResolve lean_s10 lean_s19
  ))))
have lean_s1 : (Not (And let81 let68)) := by liftOrNToNeg lean_s0
have lean_s2 : (Or let98 let97) := by timed flipNotAnd lean_s1 [let81, let68]
have lean_s3 : (Eq And And) := by timed rfl
let lean_s4 := by timed flipCongrArg lean_r25 [LE.le]
have lean_s5 : (Eq skoX skoX) := by timed rfl
have lean_s6 : (Eq let92 let82) := by timed congr lean_s4 lean_s5
have lean_s7 : (Eq let92 let81) := by timed Eq.trans lean_s6 lean_r34
let lean_s8 := by timed congr lean_s3 lean_s7
let lean_s9 := by timed flipCongrArg lean_r28 [HAdd.hAdd]
have lean_s10 : (Eq skoC skoC) := by timed rfl
let lean_s11 := by timed flipCongrArg lean_s10 [HMul.hMul]
let lean_s12 := by timed flipCongrArg lean_r26 [HMul.hMul]
have lean_s13 : (Eq let63 let63) := by timed rfl
have lean_s14 : (Eq let65 let65) := by timed congr lean_s12 lean_s13
have lean_s15 : let79 := by timed Eq.trans lean_s14 lean_r31
have lean_s16 : (Eq let67 let51) := by timed Eq.trans lean_r20 lean_s15
have lean_s17 : (Eq let88 let61) := by timed congr lean_s11 lean_s16
have lean_s18 : (Eq let88 let52) := by timed Eq.trans lean_s17 lean_r18
have lean_s19 : (Eq let89 let53) := by timed congr lean_s9 lean_s18
let lean_s20 := by timed flipCongrArg lean_s19 [LE.le]
have lean_s21 : (Eq skoS skoS) := by timed rfl
have lean_s22 : (Eq let91 let54) := by timed congr lean_s20 lean_s21
have lean_s23 : (Eq let91 let50) := by timed Eq.trans lean_s22 lean_r14
let lean_s24 := by timed congr lean_s3 lean_s23
let lean_s25 := by timed flipCongrArg lean_s21 [LE.le]
have lean_s26 : (Eq let90 let74) := by timed congr lean_s25 lean_s19
have lean_s27 : (Eq let90 let73) := by timed Eq.trans lean_s26 lean_r27
let lean_s28 := by timed congr lean_s3 lean_s27
let lean_s29 := by timed flipCongrArg lean_s5 [LE.le]
have lean_s30 : (Eq let87 let28) := by timed congr lean_s29 lean_r25
have lean_s31 : (Eq let87 let27) := by timed Eq.trans lean_s30 lean_r8
let lean_s32 := by timed congr lean_s3 lean_s31
have lean_s33 : (Eq skoSB skoSB) := by timed rfl
let lean_s34 := by timed flipCongrArg lean_s33 [LE.le]
let lean_s35 := by timed flipCongrArg lean_s10 [HMul.hMul]
let lean_s36 := by timed flipCongrArg lean_r22 [HMul.hMul]
have lean_s37 : (Eq let16 let16) := by timed rfl
have lean_s38 : (Eq let18 let18) := by timed congr lean_s36 lean_s37
have lean_s39 : let19 := by timed Eq.trans lean_s38 lean_r5
have lean_s40 : (Eq let38 let15) := by timed Eq.trans lean_r24 lean_s39
have lean_s41 : (Eq let39 let21) := by timed congr lean_s35 lean_s40
have lean_s42 : (Eq let39 let20) := by timed Eq.trans lean_s41 lean_r6
have lean_s43 : (Eq skoCB skoCB) := by timed rfl
let lean_s44 := by timed flipCongrArg lean_s43 [HMul.hMul]
let lean_s45 := by timed flipCongrArg lean_r17 [HMul.hMul]
have lean_s46 : (Eq let30 let30) := by timed rfl
have lean_s47 : (Eq let32 let32) := by timed congr lean_s45 lean_s46
have lean_s48 : let45 := by timed Eq.trans lean_s47 lean_r12
have lean_s49 : (Eq let33 let44) := by timed Eq.trans lean_r9 lean_s48
have lean_s50 : (Eq let37 let62) := by timed congr lean_s44 lean_s49
have lean_s51 : (Eq let37 let55) := by timed Eq.trans lean_s50 lean_r19
let lean_s52 := by timed flipCongrArg lean_s21 [HMul.hMul]
have lean_s53 : (Eq let36 let36) := by timed congr lean_s52 lean_r15
have lean_s54 : let83 := by timed Eq.trans lean_s53 lean_r35
let lean_s55 := by timed congrHAdd lean_s51 lean_s54
let lean_s56 := by timed congrHAdd lean_s42 lean_s55
have lean_s57 : (Eq let41 let60) := by timed congrHAdd lean_r33 lean_s56
have lean_s58 : (Eq let41 let59) := by timed Eq.trans lean_s57 lean_r16
have lean_s59 : (Eq let42 let59) := by timed Eq.trans lean_r11 lean_s58
have lean_s60 : (Eq let85 let78) := by timed congr lean_s34 lean_s59
have lean_s61 : (Eq let85 let77) := by timed Eq.trans lean_s60 lean_r30
have lean_s62 : (Eq let86 let94) := by timed flipCongrArg lean_s61 [Not]
let lean_s63 := by timed congr lean_s3 lean_s62
let lean_s64 := by timed flipCongrArg lean_s5 [LE.le]
have lean_s65 : (Eq let84 let69) := by timed congr lean_s64 lean_r13
have lean_s66 : (Eq let84 let68) := by timed Eq.trans lean_s65 lean_r21
let lean_s67 := by timed congr lean_s3 lean_s66
let lean_s68 := by timed congr lean_s67 lean_r7
let lean_s69 := by timed congr lean_s63 lean_s68
let lean_s70 := by timed congr lean_s32 lean_s69
let lean_s71 := by timed congr lean_s28 lean_s70
let lean_s72 := by timed congr lean_s24 lean_s71
have lean_s73 : let96 := by timed congr lean_s8 lean_s72
have lean_s74 : let96 := by timed Eq.trans lean_r36 lean_s73
have lean_s75 : let95 := by timed eqResolve lean_a37 lean_s74
have lean_s76 : let68 := by andElim lean_s75, 5
let lean_s77 := by R2 lean_s2, lean_s76, let68, [(- 1), 0]
have lean_s78 : let81 := by andElim lean_s75, 0
exact (show False from by R2 lean_s77, lean_s78, let81, [0, 0])


