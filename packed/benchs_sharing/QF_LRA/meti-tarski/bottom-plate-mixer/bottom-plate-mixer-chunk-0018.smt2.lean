open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoC : Rat}
variable {skoX : Rat}
variable {skoC : Rat}
variable {skoS : Rat}
variable {skoS : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% HDiv.hDiv (Int.ofNat 177) (Int.ofNat 366500000))
  let let5 := (binrel% LE.le skoX let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoX let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% HMul.hMul let8 let4)
  let let10 := (Int.ofNat 1)
  let let11 := (binrel% HDiv.hDiv let10 (Int.ofNat 10000000))
  let let12 := (binrel% HMul.hMul let2 let11)
  let let13 := (binrel% HAdd.hAdd let12 let9)
  let let14 := (binrel% HMul.hMul let8 skoX)
  let let15 := (binrel% HMul.hMul let2 skoX)
  let let16 := (binrel% HAdd.hAdd let15 let14)
  let let17 := (binrel% GE.ge let16 let13)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let13)
  let let20 := (Neg.neg let10)
  let let21 := (binrel% HMul.hMul let20 skoX)
  let let22 := (Rat.ofInt 0)
  let let23 := (binrel% HAdd.hAdd skoX let21)
  let let24 := (Neg.neg let4)
  let let25 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2807) (Int.ofNat 7330000000)))
  let let26 := (binrel% HAdd.hAdd let11 let24)
  let let27 := (Not True)
  let let28 := (binrel% LT.lt let8 let1)
  let let29 := (binrel% GE.ge let21 let24)
  let let30 := (Int.ofNat 7383)
  let let31 := (binrel% HDiv.hDiv let10 let30)
  let let32 := (Neg.neg (Rat.ofInt 3400))
  let let33 := (binrel% HMul.hMul let32 let31)
  let let34 := (Rat.ofInt 7383)
  let let35 := (binrel% HDiv.hDiv let32 let34)
  let let36 := (binrel% LE.le let22 skoX)
  let let37 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10000000))
  let let38 := (binrel% LE.le skoX let37)
  let let39 := (binrel% HDiv.hDiv (Rat.ofInt 177) (Rat.ofInt 366500000))
  let let40 := (binrel% LE.le skoX let39)
  let let41 := (Not let40)
  let let42 := (binrel% HMul.hMul skoC let35)
  let let43 := (binrel% HDiv.hDiv (Rat.ofInt 760000) let34)
  let let44 := (binrel% HAdd.hAdd let43 let42)
  let let45 := (binrel% LE.le let44 skoS)
  let let46 := (Not let45)
  let let47 := (binrel% LE.le skoS let44)
  let let48 := (And let47 (And let46 (And let41 (And let38 let36))))
  let let49 := (binrel% GE.ge let21 (Neg.neg let11))
  let let50 := (binrel% LE.le skoX let11)
  let let51 := (Int.ofNat 3400)
  let let52 := (Neg.neg (binrel% HDiv.hDiv let51 let30))
  let let53 := (Eq let33 let52)
  let let54 := (binrel% HDiv.hDiv (Int.ofNat 760000) let30)
  let let55 := (binrel% HMul.hMul let52 skoC)
  let let56 := (binrel% HMul.hMul skoC let52)
  let let57 := (Not let29)
  let let58 := (Not let57)
  let let59 := (binrel% HDiv.hDiv (Int.ofNat 3800) (Int.ofNat 17))
  let let60 := (binrel% HDiv.hDiv let30 let51)
  let let61 := (binrel% GE.ge (binrel% HAdd.hAdd skoC (binrel% HMul.hMul let60 skoS)) let59)
  let let62 := (binrel% HAdd.hAdd let54 let55)
  let let63 := (binrel% LE.le let62 skoS)
  let let64 := (binrel% GE.ge let22 let25)
  let let65 := (binrel% GE.ge skoX let1)
  let let66 := (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let20 skoC) (binrel% HMul.hMul (Neg.neg let60) skoS)) (Neg.neg let59))
  let let67 := (binrel% LE.le skoS let62)
  let let68 := (Not let61)
  let let69 := (And let66 (And let68 (And let57 (And let49 let65))))
  let let70 := (Eq let48 let69)
  let let71 := (Not let49)
  let let72 := (Or let29 let71)
  let let73 := (Or let58 let71)
  let let74 := (binrel% LT.lt let14 let9)
  let let75 := (And let28 let7)
  let let76 := (binrel% LE.le let15 let12)
  let let77 := (And let3 let50)
(Eq let3 True) → (Eq let7 let6) → (Eq let19 let18) → (Eq let15 skoX) → (Eq let14 let21) → (Eq let23 let22) → (Eq let12 let11) → (Eq let9 let24) → (Eq let26 let25) → (Eq let27 False) → (Eq let28 True) → (Eq let5 let29) → (Eq let35 let33) → (Eq let48 let48) → (Eq let50 let49) → let53 → (Eq let37 let11) → (Eq let43 let54) → (Eq let39 let4) → (Eq let56 let55) → (Eq let58 let29) → (Eq let63 let61) → (Eq let32 let32) → (Eq let64 True) → (Eq let36 let65) → (Eq let67 let66) → let48 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% HDiv.hDiv (Int.ofNat 177) (Int.ofNat 366500000))
  let let5 := (binrel% LE.le skoX let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoX let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% HMul.hMul let8 let4)
  let let10 := (Int.ofNat 1)
  let let11 := (binrel% HDiv.hDiv let10 (Int.ofNat 10000000))
  let let12 := (binrel% HMul.hMul let2 let11)
  let let13 := (binrel% HAdd.hAdd let12 let9)
  let let14 := (binrel% HMul.hMul let8 skoX)
  let let15 := (binrel% HMul.hMul let2 skoX)
  let let16 := (binrel% HAdd.hAdd let15 let14)
  let let17 := (binrel% GE.ge let16 let13)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let13)
  let let20 := (Neg.neg let10)
  let let21 := (binrel% HMul.hMul let20 skoX)
  let let22 := (Rat.ofInt 0)
  let let23 := (binrel% HAdd.hAdd skoX let21)
  let let24 := (Neg.neg let4)
  let let25 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2807) (Int.ofNat 7330000000)))
  let let26 := (binrel% HAdd.hAdd let11 let24)
  let let27 := (Not True)
  let let28 := (binrel% LT.lt let8 let1)
  let let29 := (binrel% GE.ge let21 let24)
  let let30 := (Int.ofNat 7383)
  let let31 := (binrel% HDiv.hDiv let10 let30)
  let let32 := (Neg.neg (Rat.ofInt 3400))
  let let33 := (binrel% HMul.hMul let32 let31)
  let let34 := (Rat.ofInt 7383)
  let let35 := (binrel% HDiv.hDiv let32 let34)
  let let36 := (binrel% LE.le let22 skoX)
  let let37 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10000000))
  let let38 := (binrel% LE.le skoX let37)
  let let39 := (binrel% HDiv.hDiv (Rat.ofInt 177) (Rat.ofInt 366500000))
  let let40 := (binrel% LE.le skoX let39)
  let let41 := (Not let40)
  let let42 := (binrel% HMul.hMul skoC let35)
  let let43 := (binrel% HDiv.hDiv (Rat.ofInt 760000) let34)
  let let44 := (binrel% HAdd.hAdd let43 let42)
  let let45 := (binrel% LE.le let44 skoS)
  let let46 := (Not let45)
  let let47 := (binrel% LE.le skoS let44)
  let let48 := (And let47 (And let46 (And let41 (And let38 let36))))
  let let49 := (binrel% GE.ge let21 (Neg.neg let11))
  let let50 := (binrel% LE.le skoX let11)
  let let51 := (Int.ofNat 3400)
  let let52 := (Neg.neg (binrel% HDiv.hDiv let51 let30))
  let let53 := (Eq let33 let52)
  let let54 := (binrel% HDiv.hDiv (Int.ofNat 760000) let30)
  let let55 := (binrel% HMul.hMul let52 skoC)
  let let56 := (binrel% HMul.hMul skoC let52)
  let let57 := (Not let29)
  let let58 := (Not let57)
  let let59 := (binrel% HDiv.hDiv (Int.ofNat 3800) (Int.ofNat 17))
  let let60 := (binrel% HDiv.hDiv let30 let51)
  let let61 := (binrel% GE.ge (binrel% HAdd.hAdd skoC (binrel% HMul.hMul let60 skoS)) let59)
  let let62 := (binrel% HAdd.hAdd let54 let55)
  let let63 := (binrel% LE.le let62 skoS)
  let let64 := (binrel% GE.ge let22 let25)
  let let65 := (binrel% GE.ge skoX let1)
  let let66 := (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let20 skoC) (binrel% HMul.hMul (Neg.neg let60) skoS)) (Neg.neg let59))
  let let67 := (binrel% LE.le skoS let62)
  let let68 := (Not let61)
  let let69 := (And let66 (And let68 (And let57 (And let49 let65))))
  let let70 := (Eq let48 let69)
  let let71 := (Not let49)
  let let72 := (Or let29 let71)
  let let73 := (Or let58 let71)
  let let74 := (binrel% LT.lt let14 let9)
  let let75 := (And let28 let7)
  let let76 := (binrel% LE.le let15 let12)
  let let77 := (And let3 let50)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let15 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let14 let21) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let12 let11) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let9 let24) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let26 let25) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let27 False) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let28 True) => -- EVALUATE
fun lean_r11 : (Eq let5 let29) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let35 let33) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let48 let48) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r15 : let53 => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let37 let11) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let43 let54) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let39 let4) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let56 let55) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let58 let29) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let63 let61) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let32 let32) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let64 True) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let36 let65) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_a26 : let48 => by
have lean_s0 : (Or let58 (Or let71 False)) :=
  (scope (fun lean_a27 : let57 =>
    (scope (fun lean_a28 : let49 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let49 let50) := by timed Eq.symm lean_r14
      have lean_s2 : let50 := by timed eqResolve lean_a28 lean_s1
      have lean_s3 : let77 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let77 let76) := by arithMulPos [skoX, let11, let2], 1
      have lean_s5 : let76 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let28 := by timed trueElim lean_r10
      have lean_s7 : (Eq let6 let57) := by timed flipCongrArg lean_r11 [Not]
      have lean_s8 : (Eq let7 let57) := by timed Eq.trans lean_r1 lean_s7
      have lean_s9 : (Eq let57 let7) := by timed Eq.symm lean_s8
      have lean_s10 : let7 := by timed eqResolve lean_a27 lean_s9
      have lean_s11 : let75 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let75 let74) := by arithMulNeg [skoX, let4, let8], 2
      have lean_s13 : let74 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let19 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r3 [HAdd.hAdd]
      have lean_s16 : (Eq let16 let23) := by timed congr lean_s15 lean_r4
      have lean_s17 : (Eq let16 let22) := by timed Eq.trans lean_s16 lean_r5
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r6 [HAdd.hAdd]
      have lean_s20 : (Eq let13 let26) := by timed congr lean_s19 lean_r7
      have lean_s21 : (Eq let13 let25) := by timed Eq.trans lean_s20 lean_r8
      have lean_s22 : (Eq let17 let64) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let17 True) := by timed Eq.trans lean_s22 lean_r23
      have lean_s24 : (Eq let18 let27) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let18 False) := by timed Eq.trans lean_s24 lean_r9
      have lean_s26 : (Eq let19 False) := by timed Eq.trans lean_r2 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let57 let49)) := by liftOrNToNeg lean_s0
have lean_s2 : let73 := by timed flipNotAnd lean_s1 [let57, let49]
let lean_s3 := by timed flipCongrArg lean_r20 [Or]
have lean_s4 : (Eq let71 let71) := by timed rfl
have lean_s5 : (Eq let73 let72) := by timed congr lean_s3 lean_s4
have lean_s6 : let72 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
have lean_s8 : (Eq skoS skoS) := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [LE.le]
let lean_s10 := by timed flipCongrArg lean_r17 [HAdd.hAdd]
have lean_s11 : (Eq skoC skoC) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [HMul.hMul]
let lean_s13 := by timed flipCongrArg lean_r22 [HMul.hMul]
have lean_s14 : (Eq let31 let31) := by timed rfl
have lean_s15 : (Eq let33 let33) := by timed congr lean_s13 lean_s14
have lean_s16 : let53 := by timed Eq.trans lean_s15 lean_r15
have lean_s17 : (Eq let35 let52) := by timed Eq.trans lean_r12 lean_s16
have lean_s18 : (Eq let42 let56) := by timed congr lean_s12 lean_s17
have lean_s19 : (Eq let42 let55) := by timed Eq.trans lean_s18 lean_r19
have lean_s20 : (Eq let44 let62) := by timed congr lean_s10 lean_s19
have lean_s21 : (Eq let47 let67) := by timed congr lean_s9 lean_s20
have lean_s22 : (Eq let47 let66) := by timed Eq.trans lean_s21 lean_r25
let lean_s23 := by timed congr lean_s7 lean_s22
let lean_s24 := by timed flipCongrArg lean_s20 [LE.le]
have lean_s25 : (Eq let45 let63) := by timed congr lean_s24 lean_s8
have lean_s26 : (Eq let45 let61) := by timed Eq.trans lean_s25 lean_r21
have lean_s27 : (Eq let46 let68) := by timed flipCongrArg lean_s26 [Not]
let lean_s28 := by timed congr lean_s7 lean_s27
have lean_s29 : (Eq skoX skoX) := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [LE.le]
have lean_s31 : (Eq let40 let5) := by timed congr lean_s30 lean_r18
have lean_s32 : (Eq let40 let29) := by timed Eq.trans lean_s31 lean_r11
have lean_s33 : (Eq let41 let57) := by timed flipCongrArg lean_s32 [Not]
let lean_s34 := by timed congr lean_s7 lean_s33
let lean_s35 := by timed flipCongrArg lean_s29 [LE.le]
have lean_s36 : (Eq let38 let50) := by timed congr lean_s35 lean_r16
have lean_s37 : (Eq let38 let49) := by timed Eq.trans lean_s36 lean_r14
let lean_s38 := by timed congr lean_s7 lean_s37
let lean_s39 := by timed congr lean_s38 lean_r24
let lean_s40 := by timed congr lean_s34 lean_s39
let lean_s41 := by timed congr lean_s28 lean_s40
have lean_s42 : let70 := by timed congr lean_s23 lean_s41
have lean_s43 : let70 := by timed Eq.trans lean_r13 lean_s42
have lean_s44 : let69 := by timed eqResolve lean_a26 lean_s43
have lean_s45 : let49 := by andElim lean_s44, 3
let lean_s46 := by R2 lean_s6, lean_s45, let49, [(- 1), 0]
have lean_s47 : let57 := by andElim lean_s44, 2
exact (show False from by R1 lean_s46, lean_s47, let29, [0, 0])


