open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoY : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (Int.ofNat 10)
  let let3 := (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let2) skoX))
  let let4 := (binrel% GE.ge let3 let1)
  let let5 := (Not let4)
  let let6 := (binrel% LT.lt let3 let1)
  let let7 := (Int.ofNat 0)
  let let8 := (Rat.ofInt 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% LT.lt let9 let7)
  let let11 := (binrel% GT.gt let8 let7)
  let let12 := (binrel% HMul.hMul let2 skoX)
  let let13 := (Neg.neg (Int.ofNat 1))
  let let14 := (binrel% HMul.hMul let13 skoY)
  let let15 := (binrel% HAdd.hAdd let14 let12)
  let let16 := (binrel% GE.ge let15 let7)
  let let17 := (binrel% LE.le let3 let1)
  let let18 := (binrel% HMul.hMul let8 let3)
  let let19 := (Not let17)
  let let20 := (binrel% GT.gt let3 let1)
  let let21 := (binrel% HMul.hMul let9 let3)
  let let22 := (binrel% HAdd.hAdd let3 let15)
  let let23 := (binrel% HMul.hMul let9 let1)
  let let24 := (Not True)
  let let25 := (binrel% HAdd.hAdd let1 let1)
  let let26 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let27 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let28 := (binrel% GE.ge (binrel% HAdd.hAdd let14 skoX) let7)
  let let29 := (binrel% LE.le skoY skoX)
  let let30 := (binrel% GE.ge let3 let7)
  let let31 := (binrel% HMul.hMul let8 let1)
  let let32 := (binrel% LE.le skoY let12)
  let let33 := (binrel% HMul.hMul skoX (Rat.ofInt 10))
  let let34 := (Not let30)
  let let35 := (Not let34)
  let let36 := (binrel% LE.le let12 skoY)
  let let37 := (binrel% HAdd.hAdd let31 let23)
  let let38 := (binrel% HAdd.hAdd let18 let21)
  let let39 := (binrel% GE.ge let38 let37)
  let let40 := (Not let39)
  let let41 := (binrel% LT.lt let38 let37)
  let let42 := (binrel% GE.ge pi let26)
  let let43 := (binrel% LE.le let26 pi)
  let let44 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let45 := (binrel% LE.le pi let44)
  let let46 := (Not let45)
  let let47 := (binrel% LE.le let27 pi)
  let let48 := (Not let47)
  let let49 := (Not let29)
  let let50 := (binrel% LE.le skoY let33)
  let let51 := (Not let50)
  let let52 := (binrel% LE.le let33 skoY)
  let let53 := (Not let52)
  let let54 := (And let53 (And let51 (And let49 (And let48 let46))))
  let let55 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let56 := (binrel% GE.ge (binrel% HMul.hMul let13 pi) (Neg.neg let55))
  let let57 := (binrel% LE.le pi let55)
  let let58 := (Not let16)
  let let59 := (Not let58)
  let let60 := (binrel% GE.ge let1 let1)
  let let61 := (Not let56)
  let let62 := (Not let42)
  let let63 := (Not let28)
  let let64 := (And let34 (And let58 (And let63 (And let62 let61))))
  let let65 := (Eq let54 let64)
  let let66 := (Or let30 let16)
  let let67 := (Or let35 let59)
  let let68 := (binrel% LT.lt let21 let23)
  let let69 := (And let10 let20)
  let let70 := (binrel% LT.lt let18 let31)
  let let71 := (And let11 let6)
(Eq let6 let5) → (Eq let10 True) → (Eq let11 True) → (Eq let17 let16) → (Eq let18 let3) → (Eq let20 let19) → (Eq let21 let15) → (Eq let22 let1) → (Eq let23 let1) → (Eq let24 False) → (Eq let25 let1) → (Eq let27 let26) → (Eq let29 let28) → (Eq let4 let30) → (Eq let31 let1) → (Eq let32 let16) → (Eq let33 let12) → (Eq let35 let30) → (Eq let36 let30) → (Eq let41 let40) → (Eq let43 let42) → (Eq let54 let54) → (Eq let57 let56) → (Eq let59 let16) → (Eq let44 let55) → (Eq let60 True) → let54 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (Int.ofNat 10)
  let let3 := (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let2) skoX))
  let let4 := (binrel% GE.ge let3 let1)
  let let5 := (Not let4)
  let let6 := (binrel% LT.lt let3 let1)
  let let7 := (Int.ofNat 0)
  let let8 := (Rat.ofInt 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% LT.lt let9 let7)
  let let11 := (binrel% GT.gt let8 let7)
  let let12 := (binrel% HMul.hMul let2 skoX)
  let let13 := (Neg.neg (Int.ofNat 1))
  let let14 := (binrel% HMul.hMul let13 skoY)
  let let15 := (binrel% HAdd.hAdd let14 let12)
  let let16 := (binrel% GE.ge let15 let7)
  let let17 := (binrel% LE.le let3 let1)
  let let18 := (binrel% HMul.hMul let8 let3)
  let let19 := (Not let17)
  let let20 := (binrel% GT.gt let3 let1)
  let let21 := (binrel% HMul.hMul let9 let3)
  let let22 := (binrel% HAdd.hAdd let3 let15)
  let let23 := (binrel% HMul.hMul let9 let1)
  let let24 := (Not True)
  let let25 := (binrel% HAdd.hAdd let1 let1)
  let let26 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let27 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let28 := (binrel% GE.ge (binrel% HAdd.hAdd let14 skoX) let7)
  let let29 := (binrel% LE.le skoY skoX)
  let let30 := (binrel% GE.ge let3 let7)
  let let31 := (binrel% HMul.hMul let8 let1)
  let let32 := (binrel% LE.le skoY let12)
  let let33 := (binrel% HMul.hMul skoX (Rat.ofInt 10))
  let let34 := (Not let30)
  let let35 := (Not let34)
  let let36 := (binrel% LE.le let12 skoY)
  let let37 := (binrel% HAdd.hAdd let31 let23)
  let let38 := (binrel% HAdd.hAdd let18 let21)
  let let39 := (binrel% GE.ge let38 let37)
  let let40 := (Not let39)
  let let41 := (binrel% LT.lt let38 let37)
  let let42 := (binrel% GE.ge pi let26)
  let let43 := (binrel% LE.le let26 pi)
  let let44 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let45 := (binrel% LE.le pi let44)
  let let46 := (Not let45)
  let let47 := (binrel% LE.le let27 pi)
  let let48 := (Not let47)
  let let49 := (Not let29)
  let let50 := (binrel% LE.le skoY let33)
  let let51 := (Not let50)
  let let52 := (binrel% LE.le let33 skoY)
  let let53 := (Not let52)
  let let54 := (And let53 (And let51 (And let49 (And let48 let46))))
  let let55 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let56 := (binrel% GE.ge (binrel% HMul.hMul let13 pi) (Neg.neg let55))
  let let57 := (binrel% LE.le pi let55)
  let let58 := (Not let16)
  let let59 := (Not let58)
  let let60 := (binrel% GE.ge let1 let1)
  let let61 := (Not let56)
  let let62 := (Not let42)
  let let63 := (Not let28)
  let let64 := (And let34 (And let58 (And let63 (And let62 let61))))
  let let65 := (Eq let54 let64)
  let let66 := (Or let30 let16)
  let let67 := (Or let35 let59)
  let let68 := (binrel% LT.lt let21 let23)
  let let69 := (And let10 let20)
  let let70 := (binrel% LT.lt let18 let31)
  let let71 := (And let11 let6)
fun lean_r0 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let10 True) => -- EVALUATE
fun lean_r2 : (Eq let11 True) => -- EVALUATE
fun lean_r3 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let18 let3) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let21 let15) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let22 let1) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let23 let1) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let24 False) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let25 let1) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let4 let30) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let31 let1) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let32 let16) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let33 let12) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let35 let30) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let36 let30) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let43 let42) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let54 let54) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let57 let56) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let59 let16) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let44 let55) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let60 True) => -- THEORY_REWRITE_ARITH
fun lean_a26 : let54 => by
have lean_s0 : (Or let35 (Or let59 False)) :=
  (scope (fun lean_a27 : let34 =>
    (scope (fun lean_a28 : let58 =>
      have lean_s0 : let11 := by timed trueElim lean_r2
      have lean_s1 : (Eq let5 let34) := by timed flipCongrArg lean_r13 [Not]
      have lean_s2 : (Eq let6 let34) := by timed Eq.trans lean_r0 lean_s1
      have lean_s3 : (Eq let34 let6) := by timed Eq.symm lean_s2
      have lean_s4 : let6 := by timed eqResolve lean_a27 lean_s3
      have lean_s5 : let71 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let71 let70) := by arithMulPos [let3, let1, let8], 0
      have lean_s7 : let70 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let10 := by timed trueElim lean_r1
      have lean_s9 : (Eq let19 let58) := by timed flipCongrArg lean_r3 [Not]
      have lean_s10 : (Eq let20 let58) := by timed Eq.trans lean_r5 lean_s9
      have lean_s11 : (Eq let58 let20) := by timed Eq.symm lean_s10
      have lean_s12 : let20 := by timed eqResolve lean_a28 lean_s11
      have lean_s13 : let69 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let69 let68) := by arithMulNeg [let3, let1, let9], 2
      have lean_s15 : let68 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let41 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r4 [HAdd.hAdd]
      have lean_s18 : (Eq let38 let22) := by timed congr lean_s17 lean_r6
      have lean_s19 : (Eq let38 let1) := by timed Eq.trans lean_s18 lean_r7
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r14 [HAdd.hAdd]
      have lean_s22 : (Eq let37 let25) := by timed congr lean_s21 lean_r8
      have lean_s23 : (Eq let37 let1) := by timed Eq.trans lean_s22 lean_r10
      have lean_s24 : (Eq let39 let60) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let39 True) := by timed Eq.trans lean_s24 lean_r25
      have lean_s26 : (Eq let40 let24) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let40 False) := by timed Eq.trans lean_s26 lean_r9
      have lean_s28 : (Eq let41 False) := by timed Eq.trans lean_r19 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let34 let58)) := by liftOrNToNeg lean_s0
have lean_s2 : let67 := by timed flipNotAnd lean_s1 [let34, let58]
let lean_s3 := by timed flipCongrArg lean_r17 [Or]
have lean_s4 : (Eq let67 let66) := by timed congr lean_s3 lean_r23
have lean_s5 : let66 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
let lean_s7 := by timed flipCongrArg lean_r16 [LE.le]
have lean_s8 : (Eq skoY skoY) := by timed rfl
have lean_s9 : (Eq let52 let36) := by timed congr lean_s7 lean_s8
have lean_s10 : (Eq let52 let30) := by timed Eq.trans lean_s9 lean_r18
have lean_s11 : (Eq let53 let34) := by timed flipCongrArg lean_s10 [Not]
let lean_s12 := by timed congr lean_s6 lean_s11
let lean_s13 := by timed flipCongrArg lean_s8 [LE.le]
have lean_s14 : (Eq let50 let32) := by timed congr lean_s13 lean_r16
have lean_s15 : (Eq let50 let16) := by timed Eq.trans lean_s14 lean_r15
have lean_s16 : (Eq let51 let58) := by timed flipCongrArg lean_s15 [Not]
let lean_s17 := by timed congr lean_s6 lean_s16
have lean_s18 : (Eq let49 let63) := by timed flipCongrArg lean_r12 [Not]
let lean_s19 := by timed congr lean_s6 lean_s18
let lean_s20 := by timed flipCongrArg lean_r11 [LE.le]
have lean_s21 : (Eq pi pi) := by timed rfl
have lean_s22 : (Eq let47 let43) := by timed congr lean_s20 lean_s21
have lean_s23 : (Eq let47 let42) := by timed Eq.trans lean_s22 lean_r20
have lean_s24 : (Eq let48 let62) := by timed flipCongrArg lean_s23 [Not]
let lean_s25 := by timed congr lean_s6 lean_s24
let lean_s26 := by timed flipCongrArg lean_s21 [LE.le]
have lean_s27 : (Eq let45 let57) := by timed congr lean_s26 lean_r24
have lean_s28 : (Eq let45 let56) := by timed Eq.trans lean_s27 lean_r22
have lean_s29 : (Eq let46 let61) := by timed flipCongrArg lean_s28 [Not]
let lean_s30 := by timed congr lean_s25 lean_s29
let lean_s31 := by timed congr lean_s19 lean_s30
let lean_s32 := by timed congr lean_s17 lean_s31
have lean_s33 : let65 := by timed congr lean_s12 lean_s32
have lean_s34 : let65 := by timed Eq.trans lean_r21 lean_s33
have lean_s35 : let64 := by timed eqResolve lean_a26 lean_s34
have lean_s36 : let58 := by andElim lean_s35, 1
let lean_s37 := by R1 lean_s5, lean_s36, let16, [(- 1), 0]
have lean_s38 : let34 := by andElim lean_s35, 0
exact (show False from by R1 lean_s37, lean_s38, let30, [0, 0])


