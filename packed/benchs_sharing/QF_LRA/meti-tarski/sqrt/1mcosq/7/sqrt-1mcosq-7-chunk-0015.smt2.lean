open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 skoY)
  let let5 := (binrel% HAdd.hAdd let4 skoX)
  let let6 := (binrel% GE.ge let5 let1)
  let let7 := (Not let6)
  let let8 := (binrel% HDiv.hDiv let2 (Int.ofNat 20))
  let let9 := (binrel% GE.ge skoX let8)
  let let10 := (And let9 let7)
  let let11 := (Int.ofNat 2)
  let let12 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let11) skoY)) let1)
  let let13 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let14 := (binrel% GE.ge pi let13)
  let let15 := (Not let14)
  let let16 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let17 := (binrel% GE.ge (binrel% HMul.hMul let3 pi) (Neg.neg let16))
  let let18 := (Not let17)
  let let19 := (And let18 (And let15 (And let12 let10)))
  let let20 := (binrel% GE.ge let4 let1)
  let let21 := (And let20 (And (Not (And let20 (binrel% GE.ge skoY let1))) let19))
  let let22 := (Rat.ofInt 0)
  let let23 := (Not (Eq skoY let22))
  let let24 := (And let20 (And let23 let19))
  let let25 := (binrel% LE.le pi let16)
  let let26 := (binrel% HMul.hMul let3 skoX)
  let let27 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let26 skoY))
  let let28 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let29 := (Rat.ofInt 1)
  let let30 := (Neg.neg let29)
  let let31 := (binrel% HMul.hMul let30 let22)
  let let32 := (Eq let6 let6)
  let let33 := (binrel% HAdd.hAdd skoY let26)
  let let34 := (binrel% HMul.hMul let30 let33)
  let let35 := (binrel% LE.le let13 pi)
  let let36 := (binrel% LT.lt let30 let1)
  let let37 := (binrel% LE.le skoY let22)
  let let38 := (binrel% LE.le let8 skoX)
  let let39 := (Neg.neg let8)
  let let40 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let39 let22))
  let let41 := (binrel% HDiv.hDiv let2 let11)
  let let42 := (binrel% HDiv.hDiv let29 (Rat.ofInt 2))
  let let43 := (binrel% LE.le skoY skoX)
  let let44 := (Not let43)
  let let45 := (binrel% HDiv.hDiv let29 (Rat.ofInt 20))
  let let46 := (binrel% LE.le let45 skoX)
  let let47 := (binrel% HMul.hMul pi let42)
  let let48 := (binrel% LE.le skoY let47)
  let let49 := (binrel% LE.le let28 pi)
  let let50 := (Not let49)
  let let51 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let52 := (binrel% LE.le pi let51)
  let let53 := (Not let52)
  let let54 := (And let37 (And let23 (And let53 (And let50 (And let48 (And let46 let44))))))
  let let55 := (binrel% HMul.hMul let41 pi)
  let let56 := (binrel% LE.le skoY let55)
  let let57 := (binrel% HMul.hMul let29 let22)
  let let58 := (Not let7)
  let let59 := (Eq let6 let58)
  let let60 := (Eq let58 let6)
  let let61 := (binrel% LE.le let33 let22)
  let let62 := (Not let61)
  let let63 := (binrel% GT.gt let33 let22)
  let let64 := (Not True)
  let let65 := (binrel% HMul.hMul let30 let8)
  let let66 := (binrel% GE.ge let22 let39)
  let let67 := (binrel% HMul.hMul pi let41)
  let let68 := (binrel% HMul.hMul let29 skoY)
  let let69 := (binrel% HMul.hMul let30 skoX)
  let let70 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let65 let57))
  let let71 := (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let69 let68))
  let let72 := (binrel% GE.ge let71 let70)
  let let73 := (Not let72)
  let let74 := (binrel% LT.lt let71 let70)
  let let75 := (binrel% GT.gt let29 let1)
  let let76 := (Eq let54 let24)
  let let77 := (Not let9)
  let let78 := (Not let20)
  let let79 := (Or let78 (Or let77 let6))
  let let80 := (Or let78 (Or let77 let58))
  let let81 := (Not let63)
  let let82 := (binrel% LE.le let68 let57)
  let let83 := (And let75 let37)
  let let84 := (binrel% LE.le let69 let65)
  let let85 := (And let36 let9)
  let let86 := (binrel% LT.lt let34 let31)
  let let87 := (And let36 let63)
(Eq let24 let21) → (Eq let25 let17) → (Eq let27 let22) → (Eq let28 let13) → (Eq let31 let22) → (Eq let32 True) → (Eq let34 let5) → (Eq let35 let14) → (Eq let36 True) → (Eq let37 let20) → (Eq let38 let9) → (Eq let40 let39) → (Eq let42 let41) → (Eq let54 let54) → (Eq let56 let12) → (Eq let57 let22) → (Eq let51 let16) → (Eq let43 let6) → (Eq let60 let59) → (Eq let61 let6) → (Eq let63 let62) → let60 → (Eq let64 False) → (Eq let45 let8) → (Eq let65 let39) → (Eq let66 True) → (Eq let67 let55) → (Eq let68 skoY) → (Eq let69 let26) → (Eq let74 let73) → (Eq let75 True) → let54 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 skoY)
  let let5 := (binrel% HAdd.hAdd let4 skoX)
  let let6 := (binrel% GE.ge let5 let1)
  let let7 := (Not let6)
  let let8 := (binrel% HDiv.hDiv let2 (Int.ofNat 20))
  let let9 := (binrel% GE.ge skoX let8)
  let let10 := (And let9 let7)
  let let11 := (Int.ofNat 2)
  let let12 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let11) skoY)) let1)
  let let13 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let14 := (binrel% GE.ge pi let13)
  let let15 := (Not let14)
  let let16 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let17 := (binrel% GE.ge (binrel% HMul.hMul let3 pi) (Neg.neg let16))
  let let18 := (Not let17)
  let let19 := (And let18 (And let15 (And let12 let10)))
  let let20 := (binrel% GE.ge let4 let1)
  let let21 := (And let20 (And (Not (And let20 (binrel% GE.ge skoY let1))) let19))
  let let22 := (Rat.ofInt 0)
  let let23 := (Not (Eq skoY let22))
  let let24 := (And let20 (And let23 let19))
  let let25 := (binrel% LE.le pi let16)
  let let26 := (binrel% HMul.hMul let3 skoX)
  let let27 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let26 skoY))
  let let28 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let29 := (Rat.ofInt 1)
  let let30 := (Neg.neg let29)
  let let31 := (binrel% HMul.hMul let30 let22)
  let let32 := (Eq let6 let6)
  let let33 := (binrel% HAdd.hAdd skoY let26)
  let let34 := (binrel% HMul.hMul let30 let33)
  let let35 := (binrel% LE.le let13 pi)
  let let36 := (binrel% LT.lt let30 let1)
  let let37 := (binrel% LE.le skoY let22)
  let let38 := (binrel% LE.le let8 skoX)
  let let39 := (Neg.neg let8)
  let let40 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let39 let22))
  let let41 := (binrel% HDiv.hDiv let2 let11)
  let let42 := (binrel% HDiv.hDiv let29 (Rat.ofInt 2))
  let let43 := (binrel% LE.le skoY skoX)
  let let44 := (Not let43)
  let let45 := (binrel% HDiv.hDiv let29 (Rat.ofInt 20))
  let let46 := (binrel% LE.le let45 skoX)
  let let47 := (binrel% HMul.hMul pi let42)
  let let48 := (binrel% LE.le skoY let47)
  let let49 := (binrel% LE.le let28 pi)
  let let50 := (Not let49)
  let let51 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let52 := (binrel% LE.le pi let51)
  let let53 := (Not let52)
  let let54 := (And let37 (And let23 (And let53 (And let50 (And let48 (And let46 let44))))))
  let let55 := (binrel% HMul.hMul let41 pi)
  let let56 := (binrel% LE.le skoY let55)
  let let57 := (binrel% HMul.hMul let29 let22)
  let let58 := (Not let7)
  let let59 := (Eq let6 let58)
  let let60 := (Eq let58 let6)
  let let61 := (binrel% LE.le let33 let22)
  let let62 := (Not let61)
  let let63 := (binrel% GT.gt let33 let22)
  let let64 := (Not True)
  let let65 := (binrel% HMul.hMul let30 let8)
  let let66 := (binrel% GE.ge let22 let39)
  let let67 := (binrel% HMul.hMul pi let41)
  let let68 := (binrel% HMul.hMul let29 skoY)
  let let69 := (binrel% HMul.hMul let30 skoX)
  let let70 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let65 let57))
  let let71 := (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let69 let68))
  let let72 := (binrel% GE.ge let71 let70)
  let let73 := (Not let72)
  let let74 := (binrel% LT.lt let71 let70)
  let let75 := (binrel% GT.gt let29 let1)
  let let76 := (Eq let54 let24)
  let let77 := (Not let9)
  let let78 := (Not let20)
  let let79 := (Or let78 (Or let77 let6))
  let let80 := (Or let78 (Or let77 let58))
  let let81 := (Not let63)
  let let82 := (binrel% LE.le let68 let57)
  let let83 := (And let75 let37)
  let let84 := (binrel% LE.le let69 let65)
  let let85 := (And let36 let9)
  let let86 := (binrel% LT.lt let34 let31)
  let let87 := (And let36 let63)
fun lean_h0 : (Eq let24 let21) => -- PREPROCESS
fun lean_r1 : (Eq let25 let17) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let27 let22) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let28 let13) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let31 let22) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let32 True) => -- THEORY_REWRITE_BOOL
fun lean_r6 : (Eq let34 let5) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let35 let14) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let36 True) => -- EVALUATE
fun lean_r9 : (Eq let37 let20) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let38 let9) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let40 let39) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let54 let54) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let56 let12) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let57 let22) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let51 let16) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let43 let6) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let60 let59) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let61 let6) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r21 : let60 => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let64 False) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let45 let8) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let65 let39) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let66 True) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let67 let55) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let68 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let69 let26) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let74 let73) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let75 True) => -- EVALUATE
fun lean_a31 : let54 => by
have lean_s0 : (Or let78 (Or let77 (Or let58 False))) :=
  (scope (fun lean_a32 : let20 =>
    (scope (fun lean_a33 : let9 =>
      (scope (fun lean_a34 : let7 =>
        have lean_s0 : (Eq let62 let7) := by timed flipCongrArg lean_r19 [Not]
        have lean_s1 : (Eq let63 let7) := by timed Eq.trans lean_r20 lean_s0
        have lean_s2 : (Eq let7 let63) := by timed Eq.symm lean_s1
        have lean_s3 : let63 := by timed eqResolve lean_a34 lean_s2
        have lean_s4 : (Or let81 False) :=
          (scope (fun lean_a35 : let63 =>
            have lean_s4 : let36 := by timed trueElim lean_r8
            have lean_s5 : let87 := by timed And.intro lean_s4 lean_a35
            have lean_s6 : (Implies let87 let86) := by arithMulNeg [let33, let22, let30], 2
            have lean_s7 : let86 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let85 := by timed And.intro lean_s4 lean_a33
            have lean_s9 : (Implies let85 let84) := by arithMulNeg [skoX, let8, let30], 3
            have lean_s10 : let84 := by timed modusPonens lean_s8 lean_s9
            have lean_s11 : let75 := by timed trueElim lean_r30
            have lean_s12 : (Eq let20 let37) := by timed Eq.symm lean_r9
            have lean_s13 : let37 := by timed eqResolve lean_a32 lean_s12
            have lean_s14 : let83 := by timed And.intro lean_s11 lean_s13
            have lean_s15 : (Implies let83 let82) := by arithMulPos [skoY, let22, let29], 1
            have lean_s16 : let82 := by timed modusPonens lean_s14 lean_s15
            have lean_s17 : let74 := by sumBounds [lean_s7, lean_s10, lean_s16]
            let lean_s18 := by timed congrHAdd lean_r28 lean_r27
            have lean_s19 : (Eq let71 let27) := by timed congrHAdd lean_r6 lean_s18
            have lean_s20 : (Eq let71 let22) := by timed Eq.trans lean_s19 lean_r2
            let lean_s21 := by timed flipCongrArg lean_s20 [GE.ge]
            let lean_s22 := by timed congrHAdd lean_r24 lean_r15
            have lean_s23 : (Eq let70 let40) := by timed congrHAdd lean_r4 lean_s22
            have lean_s24 : (Eq let70 let39) := by timed Eq.trans lean_s23 lean_r11
            have lean_s25 : (Eq let72 let66) := by timed congr lean_s21 lean_s24
            have lean_s26 : (Eq let72 True) := by timed Eq.trans lean_s25 lean_r25
            have lean_s27 : (Eq let73 let64) := by timed flipCongrArg lean_s26 [Not]
            have lean_s28 : (Eq let73 False) := by timed Eq.trans lean_s27 lean_r22
            have lean_s29 : (Eq let74 False) := by timed Eq.trans lean_r29 lean_s28
            show False from by timed eqResolve lean_s17 lean_s29
          ))
        have lean_s5 : let81 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let81 let58) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let81 let6) := by timed Eq.trans lean_s6 lean_r21
        have lean_s8 : (Eq let6 let61) := by timed Eq.symm lean_r19
        have lean_s9 : (Eq let81 let61) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let61 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let6 let81) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let61 let81) := by timed Eq.trans lean_r19 lean_s11
        have lean_s13 : let81 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let20 let10)) := by liftOrNToNeg lean_s0
have lean_s2 : let80 := by timed flipNotAnd lean_s1 [let20, let9, let7]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let78 let78) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let77 let77) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : let32 := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [Eq]
have lean_s10 : (Eq let59 let32) := by timed congr lean_s9 lean_r21
have lean_s11 : (Eq let59 True) := by timed Eq.trans lean_s10 lean_r5
have lean_s12 : (Eq let60 True) := by timed Eq.trans lean_r18 lean_s11
have lean_s13 : let60 := by timed trueElim lean_s12
let lean_s14 := by timed congr lean_s7 lean_s13
have lean_s15 : (Eq let80 let79) := by timed congr lean_s5 lean_s14
have lean_s16 : let79 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let6 (Or let78 let77)) := by permutateOr lean_s16, [2, 0, 1], (- 1)
have lean_s18 : (Eq And And) := by timed rfl
let lean_s19 := by timed congr lean_s18 lean_r9
have lean_s20 : (Eq let23 let23) := by timed rfl
let lean_s21 := by timed congr lean_s18 lean_s20
have lean_s22 : (Eq pi pi) := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [LE.le]
have lean_s24 : (Eq let52 let25) := by timed congr lean_s23 lean_r16
have lean_s25 : (Eq let52 let17) := by timed Eq.trans lean_s24 lean_r1
have lean_s26 : (Eq let53 let18) := by timed flipCongrArg lean_s25 [Not]
let lean_s27 := by timed congr lean_s18 lean_s26
let lean_s28 := by timed flipCongrArg lean_r3 [LE.le]
have lean_s29 : (Eq let49 let35) := by timed congr lean_s28 lean_s22
have lean_s30 : (Eq let49 let14) := by timed Eq.trans lean_s29 lean_r7
have lean_s31 : (Eq let50 let15) := by timed flipCongrArg lean_s30 [Not]
let lean_s32 := by timed congr lean_s18 lean_s31
have lean_s33 : (Eq skoY skoY) := by timed rfl
let lean_s34 := by timed flipCongrArg lean_s33 [LE.le]
let lean_s35 := by timed flipCongrArg lean_s22 [HMul.hMul]
have lean_s36 : (Eq let47 let67) := by timed congr lean_s35 lean_r12
have lean_s37 : (Eq let47 let55) := by timed Eq.trans lean_s36 lean_r26
have lean_s38 : (Eq let48 let56) := by timed congr lean_s34 lean_s37
have lean_s39 : (Eq let48 let12) := by timed Eq.trans lean_s38 lean_r14
let lean_s40 := by timed congr lean_s18 lean_s39
let lean_s41 := by timed flipCongrArg lean_r23 [LE.le]
have lean_s42 : (Eq skoX skoX) := by timed rfl
have lean_s43 : (Eq let46 let38) := by timed congr lean_s41 lean_s42
have lean_s44 : (Eq let46 let9) := by timed Eq.trans lean_s43 lean_r10
let lean_s45 := by timed congr lean_s18 lean_s44
have lean_s46 : (Eq let44 let7) := by timed flipCongrArg lean_r17 [Not]
let lean_s47 := by timed congr lean_s45 lean_s46
let lean_s48 := by timed congr lean_s40 lean_s47
let lean_s49 := by timed congr lean_s32 lean_s48
let lean_s50 := by timed congr lean_s27 lean_s49
let lean_s51 := by timed congr lean_s21 lean_s50
have lean_s52 : let76 := by timed congr lean_s19 lean_s51
have lean_s53 : let76 := by timed Eq.trans lean_r13 lean_s52
have lean_s54 : (Eq let54 let21) := by timed Eq.trans lean_s53 lean_h0
have lean_s55 : let21 := by timed eqResolve lean_a31 lean_s54
have lean_s56 : let7 := by andElim lean_s55, 6
let lean_s57 := by R1 lean_s17, lean_s56, let6, [(- 1), 0]
have lean_s58 : let9 := by andElim lean_s55, 5
let lean_s59 := by R2 lean_s57, lean_s58, let9, [(- 1), 0]
have lean_s60 : let20 := by andElim lean_s55, 0
exact (show False from by R2 lean_s59, lean_s60, let20, [0, 0])


