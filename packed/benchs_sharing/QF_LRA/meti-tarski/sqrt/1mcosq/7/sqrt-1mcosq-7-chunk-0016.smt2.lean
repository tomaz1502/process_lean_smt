open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let5 := (binrel% GE.ge pi let4)
  let let6 := (binrel% LE.le let4 pi)
  let let7 := (Int.ofNat 2)
  let let8 := (Int.ofNat 1)
  let let9 := (binrel% HDiv.hDiv let8 let7)
  let let10 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let11 := (binrel% HDiv.hDiv let8 (Int.ofNat 20))
  let let12 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let13 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let14 := (Rat.ofInt 0)
  let let15 := (Neg.neg let8)
  let let16 := (binrel% HMul.hMul let15 skoX)
  let let17 := (binrel% HAdd.hAdd skoX let16)
  let let18 := (binrel% GE.ge skoX let11)
  let let19 := (binrel% LE.le let11 skoX)
  let let20 := (binrel% HMul.hMul let9 pi)
  let let21 := (binrel% HMul.hMul pi let9)
  let let22 := (binrel% GE.ge skoX let14)
  let let23 := (Not let22)
  let let24 := (binrel% LT.lt skoX let14)
  let let25 := (binrel% LE.le skoY skoX)
  let let26 := (Not let25)
  let let27 := (binrel% LE.le let12 skoX)
  let let28 := (binrel% HMul.hMul pi let10)
  let let29 := (binrel% LE.le skoY let28)
  let let30 := (binrel% LE.le let13 pi)
  let let31 := (Not let30)
  let let32 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let33 := (binrel% LE.le pi let32)
  let let34 := (Not let33)
  let let35 := (Eq skoY let14)
  let let36 := (And let35 (And let34 (And let31 (And let29 (And let27 let26)))))
  let let37 := (binrel% HMul.hMul let15 skoY)
  let let38 := (binrel% HAdd.hAdd let37 skoX)
  let let39 := (binrel% GE.ge let38 let1)
  let let40 := (Neg.neg let7)
  let let41 := (binrel% HMul.hMul let40 let14)
  let let42 := (Neg.neg let2)
  let let43 := (binrel% LT.lt let42 let1)
  let let44 := (Neg.neg let11)
  let let45 := (binrel% HMul.hMul let42 let11)
  let let46 := (binrel% GE.ge skoX let1)
  let let47 := (binrel% HAdd.hAdd let14 skoX)
  let let48 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let49 := (binrel% GE.ge (binrel% HMul.hMul let15 pi) (Neg.neg let48))
  let let50 := (binrel% LE.le pi let48)
  let let51 := (binrel% GE.ge let14 let44)
  let let52 := (binrel% HMul.hMul let40 skoY)
  let let53 := (binrel% HAdd.hAdd pi let52)
  let let54 := (binrel% GE.ge let53 let1)
  let let55 := (binrel% LE.le skoY let20)
  let let56 := (binrel% HMul.hMul let2 let14)
  let let57 := (binrel% HAdd.hAdd let56 let45)
  let let58 := (binrel% HMul.hMul let42 skoX)
  let let59 := (binrel% HMul.hMul let2 skoX)
  let let60 := (binrel% HAdd.hAdd let59 let58)
  let let61 := (binrel% GE.ge let60 let57)
  let let62 := (Not let61)
  let let63 := (binrel% LT.lt let60 let57)
  let let64 := (Not let46)
  let let65 := (Not let64)
  let let66 := (Not True)
  let let67 := (binrel% HMul.hMul let15 let14)
  let let68 := (binrel% GE.ge pi let1)
  let let69 := (Not let5)
  let let70 := (Not let49)
  let let71 := (And let70 (And let69 (And let68 (And let18 let64))))
  let let72 := (And True let71)
  let let73 := (binrel% HAdd.hAdd let14 let44)
  let let74 := (binrel% HAdd.hAdd pi let14)
  let let75 := (Eq let14 let14)
  let let76 := (Not let39)
  let let77 := (And let35 (And let70 (And let69 (And let54 (And let18 let76)))))
  let let78 := (binrel% HAdd.hAdd let67 skoX)
  let let79 := (binrel% GE.ge let78 let1)
  let let80 := (Not let79)
  let let81 := (binrel% HAdd.hAdd pi let41)
  let let82 := (binrel% GE.ge let81 let1)
  let let83 := (And let75 (And let70 (And let69 (And let82 (And let18 let80)))))
  let let84 := (Eq let1 let1)
  let let85 := (Eq skoX skoX)
  let let86 := (Eq let18 let18)
  let let87 := (Eq And And)
  let let88 := (Eq pi pi)
  let let89 := (Eq let69 let69)
  let let90 := (Eq let70 let70)
  let let91 := (Eq let36 let77)
  let let92 := (Not let18)
  let let93 := (Or let46 let92)
  let let94 := (Or let65 let92)
  let let95 := (binrel% LE.le let58 let45)
  let let96 := (And let43 let18)
  let let97 := (binrel% LT.lt let59 let56)
  let let98 := (And let3 let24)
(Eq let3 True) → (Eq let6 let5) → (Eq let10 let9) → (Eq let12 let11) → (Eq let13 let4) → (Eq let17 let14) → (Eq let19 let18) → (Eq let21 let20) → (Eq let24 let23) → (Eq let36 let36) → (Eq let25 let39) → (Eq let41 let14) → (Eq let43 True) → (Eq let45 let44) → (Eq let22 let46) → (Eq let47 skoX) → (Eq let50 let49) → (Eq let32 let48) → (Eq let51 True) → (Eq let55 let54) → (Eq let63 let62) → (Eq let65 let46) → (Eq let59 skoX) → (Eq let66 False) → (Eq let67 let14) → (Eq let72 let71) → (Eq let73 let44) → (Eq let74 pi) → (Eq let56 let14) → (Eq let75 True) → (Eq let58 let16) → let36 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let5 := (binrel% GE.ge pi let4)
  let let6 := (binrel% LE.le let4 pi)
  let let7 := (Int.ofNat 2)
  let let8 := (Int.ofNat 1)
  let let9 := (binrel% HDiv.hDiv let8 let7)
  let let10 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let11 := (binrel% HDiv.hDiv let8 (Int.ofNat 20))
  let let12 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let13 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let14 := (Rat.ofInt 0)
  let let15 := (Neg.neg let8)
  let let16 := (binrel% HMul.hMul let15 skoX)
  let let17 := (binrel% HAdd.hAdd skoX let16)
  let let18 := (binrel% GE.ge skoX let11)
  let let19 := (binrel% LE.le let11 skoX)
  let let20 := (binrel% HMul.hMul let9 pi)
  let let21 := (binrel% HMul.hMul pi let9)
  let let22 := (binrel% GE.ge skoX let14)
  let let23 := (Not let22)
  let let24 := (binrel% LT.lt skoX let14)
  let let25 := (binrel% LE.le skoY skoX)
  let let26 := (Not let25)
  let let27 := (binrel% LE.le let12 skoX)
  let let28 := (binrel% HMul.hMul pi let10)
  let let29 := (binrel% LE.le skoY let28)
  let let30 := (binrel% LE.le let13 pi)
  let let31 := (Not let30)
  let let32 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let33 := (binrel% LE.le pi let32)
  let let34 := (Not let33)
  let let35 := (Eq skoY let14)
  let let36 := (And let35 (And let34 (And let31 (And let29 (And let27 let26)))))
  let let37 := (binrel% HMul.hMul let15 skoY)
  let let38 := (binrel% HAdd.hAdd let37 skoX)
  let let39 := (binrel% GE.ge let38 let1)
  let let40 := (Neg.neg let7)
  let let41 := (binrel% HMul.hMul let40 let14)
  let let42 := (Neg.neg let2)
  let let43 := (binrel% LT.lt let42 let1)
  let let44 := (Neg.neg let11)
  let let45 := (binrel% HMul.hMul let42 let11)
  let let46 := (binrel% GE.ge skoX let1)
  let let47 := (binrel% HAdd.hAdd let14 skoX)
  let let48 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let49 := (binrel% GE.ge (binrel% HMul.hMul let15 pi) (Neg.neg let48))
  let let50 := (binrel% LE.le pi let48)
  let let51 := (binrel% GE.ge let14 let44)
  let let52 := (binrel% HMul.hMul let40 skoY)
  let let53 := (binrel% HAdd.hAdd pi let52)
  let let54 := (binrel% GE.ge let53 let1)
  let let55 := (binrel% LE.le skoY let20)
  let let56 := (binrel% HMul.hMul let2 let14)
  let let57 := (binrel% HAdd.hAdd let56 let45)
  let let58 := (binrel% HMul.hMul let42 skoX)
  let let59 := (binrel% HMul.hMul let2 skoX)
  let let60 := (binrel% HAdd.hAdd let59 let58)
  let let61 := (binrel% GE.ge let60 let57)
  let let62 := (Not let61)
  let let63 := (binrel% LT.lt let60 let57)
  let let64 := (Not let46)
  let let65 := (Not let64)
  let let66 := (Not True)
  let let67 := (binrel% HMul.hMul let15 let14)
  let let68 := (binrel% GE.ge pi let1)
  let let69 := (Not let5)
  let let70 := (Not let49)
  let let71 := (And let70 (And let69 (And let68 (And let18 let64))))
  let let72 := (And True let71)
  let let73 := (binrel% HAdd.hAdd let14 let44)
  let let74 := (binrel% HAdd.hAdd pi let14)
  let let75 := (Eq let14 let14)
  let let76 := (Not let39)
  let let77 := (And let35 (And let70 (And let69 (And let54 (And let18 let76)))))
  let let78 := (binrel% HAdd.hAdd let67 skoX)
  let let79 := (binrel% GE.ge let78 let1)
  let let80 := (Not let79)
  let let81 := (binrel% HAdd.hAdd pi let41)
  let let82 := (binrel% GE.ge let81 let1)
  let let83 := (And let75 (And let70 (And let69 (And let82 (And let18 let80)))))
  let let84 := (Eq let1 let1)
  let let85 := (Eq skoX skoX)
  let let86 := (Eq let18 let18)
  let let87 := (Eq And And)
  let let88 := (Eq pi pi)
  let let89 := (Eq let69 let69)
  let let90 := (Eq let70 let70)
  let let91 := (Eq let36 let77)
  let let92 := (Not let18)
  let let93 := (Or let46 let92)
  let let94 := (Or let65 let92)
  let let95 := (binrel% LE.le let58 let45)
  let let96 := (And let43 let18)
  let let97 := (binrel% LT.lt let59 let56)
  let let98 := (And let3 let24)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let12 let11) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let13 let4) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let17 let14) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let36 let36) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let25 let39) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let41 let14) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let43 True) => -- EVALUATE
fun lean_r13 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let22 let46) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let47 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let32 let48) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let51 True) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let65 let46) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let59 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let66 False) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let67 let14) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let72 let71) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let73 let44) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let74 pi) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let56 let14) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let75 True) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let58 let16) => -- THEORY_REWRITE_ARITH
fun lean_a31 : let36 => by
have lean_s0 : (Or let65 (Or let92 False)) :=
  (scope (fun lean_a32 : let64 =>
    (scope (fun lean_a33 : let18 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let23 let64) := by timed flipCongrArg lean_r14 [Not]
      have lean_s2 : (Eq let24 let64) := by timed Eq.trans lean_r8 lean_s1
      have lean_s3 : (Eq let64 let24) := by timed Eq.symm lean_s2
      have lean_s4 : let24 := by timed eqResolve lean_a32 lean_s3
      have lean_s5 : let98 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let98 let97) := by arithMulPos [skoX, let14, let2], 0
      have lean_s7 : let97 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let43 := by timed trueElim lean_r12
      have lean_s9 : let96 := by timed And.intro lean_s8 lean_a33
      have lean_s10 : (Implies let96 let95) := by arithMulNeg [skoX, let11, let42], 3
      have lean_s11 : let95 := by timed modusPonens lean_s9 lean_s10
      have lean_s12 : let63 := by sumBounds [lean_s7, lean_s11]
      let lean_s13 := by timed flipCongrArg lean_r22 [HAdd.hAdd]
      have lean_s14 : (Eq let60 let17) := by timed congr lean_s13 lean_r30
      have lean_s15 : (Eq let60 let14) := by timed Eq.trans lean_s14 lean_r5
      let lean_s16 := by timed flipCongrArg lean_s15 [GE.ge]
      let lean_s17 := by timed flipCongrArg lean_r28 [HAdd.hAdd]
      have lean_s18 : (Eq let57 let73) := by timed congr lean_s17 lean_r13
      have lean_s19 : (Eq let57 let44) := by timed Eq.trans lean_s18 lean_r26
      have lean_s20 : (Eq let61 let51) := by timed congr lean_s16 lean_s19
      have lean_s21 : (Eq let61 True) := by timed Eq.trans lean_s20 lean_r18
      have lean_s22 : (Eq let62 let66) := by timed flipCongrArg lean_s21 [Not]
      have lean_s23 : (Eq let62 False) := by timed Eq.trans lean_s22 lean_r23
      have lean_s24 : (Eq let63 False) := by timed Eq.trans lean_r20 lean_s23
      show False from by timed eqResolve lean_s12 lean_s24
  ))))
have lean_s1 : (Not (And let64 let18)) := by liftOrNToNeg lean_s0
have lean_s2 : let94 := by timed flipNotAnd lean_s1 [let64, let18]
let lean_s3 := by timed flipCongrArg lean_r21 [Or]
have lean_s4 : (Eq let92 let92) := by timed rfl
have lean_s5 : (Eq let94 let93) := by timed congr lean_s3 lean_s4
have lean_s6 : let93 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : let87 := by timed rfl
have lean_s8 : (Eq let35 let35) := by timed rfl
let lean_s9 := by timed congr lean_s7 lean_s8
have lean_s10 : let88 := by timed rfl
let lean_s11 := by timed flipCongrArg lean_s10 [LE.le]
have lean_s12 : (Eq let33 let50) := by timed congr lean_s11 lean_r17
have lean_s13 : (Eq let33 let49) := by timed Eq.trans lean_s12 lean_r16
have lean_s14 : (Eq let34 let70) := by timed flipCongrArg lean_s13 [Not]
let lean_s15 := by timed congr lean_s7 lean_s14
let lean_s16 := by timed flipCongrArg lean_r4 [LE.le]
have lean_s17 : (Eq let30 let6) := by timed congr lean_s16 lean_s10
have lean_s18 : (Eq let30 let5) := by timed Eq.trans lean_s17 lean_r1
have lean_s19 : (Eq let31 let69) := by timed flipCongrArg lean_s18 [Not]
let lean_s20 := by timed congr lean_s7 lean_s19
have lean_s21 : (Eq skoY skoY) := by timed rfl
let lean_s22 := by timed flipCongrArg lean_s21 [LE.le]
let lean_s23 := by timed flipCongrArg lean_s10 [HMul.hMul]
have lean_s24 : (Eq let28 let21) := by timed congr lean_s23 lean_r2
have lean_s25 : (Eq let28 let20) := by timed Eq.trans lean_s24 lean_r7
have lean_s26 : (Eq let29 let55) := by timed congr lean_s22 lean_s25
have lean_s27 : (Eq let29 let54) := by timed Eq.trans lean_s26 lean_r19
let lean_s28 := by timed congr lean_s7 lean_s27
let lean_s29 := by timed flipCongrArg lean_r3 [LE.le]
have lean_s30 : let85 := by timed rfl
have lean_s31 : (Eq let27 let19) := by timed congr lean_s29 lean_s30
have lean_s32 : (Eq let27 let18) := by timed Eq.trans lean_s31 lean_r6
let lean_s33 := by timed congr lean_s7 lean_s32
have lean_s34 : (Eq let26 let76) := by timed flipCongrArg lean_r10 [Not]
let lean_s35 := by timed congr lean_s33 lean_s34
let lean_s36 := by timed congr lean_s28 lean_s35
let lean_s37 := by timed congr lean_s20 lean_s36
let lean_s38 := by timed congr lean_s15 lean_s37
have lean_s39 : let91 := by timed congr lean_s9 lean_s38
have lean_s40 : let91 := by timed Eq.trans lean_r9 lean_s39
have lean_s41 : let87 := by timed rfl
have lean_s42 : let77 := by timed eqResolve lean_a31 lean_s40
have lean_s43 : let35 := by andElim lean_s42, 0
let lean_s44 := by timed flipCongrArg lean_s43 [Eq]
have lean_s45 : let75 := by timed rfl
have lean_s46 : (Eq let35 let75) := by timed congr lean_s44 lean_s45
let lean_s47 := by timed congr lean_s41 lean_s46
have lean_s48 : let90 := by timed rfl
let lean_s49 := by timed congr lean_s41 lean_s48
have lean_s50 : let89 := by timed rfl
let lean_s51 := by timed congr lean_s41 lean_s50
have lean_s52 : let88 := by timed rfl
let lean_s53 := by timed flipCongrArg lean_s52 [HAdd.hAdd]
have lean_s54 : (Eq let40 let40) := by timed rfl
let lean_s55 := by timed flipCongrArg lean_s54 [HMul.hMul]
have lean_s56 : (Eq let52 let41) := by timed congr lean_s55 lean_s43
have lean_s57 : (Eq let53 let81) := by timed congr lean_s53 lean_s56
let lean_s58 := by timed flipCongrArg lean_s57 [GE.ge]
have lean_s59 : let84 := by timed rfl
have lean_s60 : (Eq let54 let82) := by timed congr lean_s58 lean_s59
let lean_s61 := by timed congr lean_s41 lean_s60
have lean_s62 : let86 := by timed rfl
let lean_s63 := by timed congr lean_s41 lean_s62
have lean_s64 : (Eq let15 let15) := by timed rfl
let lean_s65 := by timed flipCongrArg lean_s64 [HMul.hMul]
have lean_s66 : (Eq let37 let67) := by timed congr lean_s65 lean_s43
let lean_s67 := by timed flipCongrArg lean_s66 [HAdd.hAdd]
have lean_s68 : let85 := by timed rfl
have lean_s69 : (Eq let38 let78) := by timed congr lean_s67 lean_s68
let lean_s70 := by timed flipCongrArg lean_s69 [GE.ge]
have lean_s71 : (Eq let39 let79) := by timed congr lean_s70 lean_s59
have lean_s72 : (Eq let76 let80) := by timed flipCongrArg lean_s71 [Not]
let lean_s73 := by timed congr lean_s63 lean_s72
let lean_s74 := by timed congr lean_s61 lean_s73
let lean_s75 := by timed congr lean_s51 lean_s74
let lean_s76 := by timed congr lean_s49 lean_s75
have lean_s77 : (Eq let77 let83) := by timed congr lean_s47 lean_s76
have lean_s78 : let87 := by timed rfl
let lean_s79 := by timed congr lean_s78 lean_r29
have lean_s80 : let90 := by timed rfl
let lean_s81 := by timed congr lean_s78 lean_s80
have lean_s82 : let89 := by timed rfl
let lean_s83 := by timed congr lean_s78 lean_s82
let lean_s84 := by timed flipCongrArg lean_s10 [HAdd.hAdd]
have lean_s85 : (Eq let81 let74) := by timed congr lean_s84 lean_r11
have lean_s86 : (Eq let81 pi) := by timed Eq.trans lean_s85 lean_r27
let lean_s87 := by timed flipCongrArg lean_s86 [GE.ge]
have lean_s88 : let84 := by timed rfl
have lean_s89 : (Eq let82 let68) := by timed congr lean_s87 lean_s88
let lean_s90 := by timed congr lean_s78 lean_s89
have lean_s91 : let86 := by timed rfl
let lean_s92 := by timed congr lean_s78 lean_s91
let lean_s93 := by timed flipCongrArg lean_r24 [HAdd.hAdd]
have lean_s94 : (Eq let78 let47) := by timed congr lean_s93 lean_s30
have lean_s95 : (Eq let78 skoX) := by timed Eq.trans lean_s94 lean_r15
let lean_s96 := by timed flipCongrArg lean_s95 [GE.ge]
have lean_s97 : (Eq let79 let46) := by timed congr lean_s96 lean_s88
have lean_s98 : (Eq let80 let64) := by timed flipCongrArg lean_s97 [Not]
let lean_s99 := by timed congr lean_s92 lean_s98
let lean_s100 := by timed congr lean_s90 lean_s99
let lean_s101 := by timed congr lean_s83 lean_s100
let lean_s102 := by timed congr lean_s81 lean_s101
have lean_s103 : (Eq let83 let72) := by timed congr lean_s79 lean_s102
have lean_s104 : (Eq let83 let71) := by timed Eq.trans lean_s103 lean_r25
have lean_s105 : (Eq let77 let71) := by timed Eq.trans lean_s77 lean_s104
have lean_s106 : (Eq let36 let71) := by timed Eq.trans lean_s40 lean_s105
have lean_s107 : let71 := by timed eqResolve lean_a31 lean_s106
have lean_s108 : let64 := by andElim lean_s107, 4
let lean_s109 := by R1 lean_s6, lean_s108, let46, [(- 1), 0]
have lean_s110 : let18 := by andElim lean_s107, 3
exact (show False from by R2 lean_s109, lean_s110, let18, [0, 0])


