open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 10)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% LT.lt let6 let1)
  let let8 := (Int.ofNat 10)
  let let9 := (binrel% HMul.hMul let8 skoX)
  let let10 := (binrel% HMul.hMul skoX let5)
  let let11 := (Int.ofNat 1)
  let let12 := (Neg.neg let11)
  let let13 := (binrel% HMul.hMul let12 skoY)
  let let14 := (binrel% HAdd.hAdd let13 let9)
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (binrel% LE.le skoY let9)
  let let17 := (binrel% HDiv.hDiv let11 (Int.ofNat 2))
  let let18 := (Neg.neg let17)
  let let19 := (Rat.ofInt 0)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let18 let19))
  let let21 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let22 := (binrel% HMul.hMul let2 skoY)
  let let23 := (binrel% HDiv.hDiv let11 (Int.ofNat 20))
  let let24 := (binrel% GE.ge skoX let23)
  let let25 := (binrel% LE.le let23 skoX)
  let let26 := (binrel% HMul.hMul (Neg.neg let8) skoX)
  let let27 := (binrel% HAdd.hAdd skoY let26)
  let let28 := (binrel% HMul.hMul let3 let27)
  let let29 := (binrel% HMul.hMul let17 pi)
  let let30 := (binrel% HMul.hMul pi let17)
  let let31 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let26 skoY))
  let let32 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let33 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let34 := (binrel% GE.ge (binrel% HAdd.hAdd let13 skoX) let1)
  let let35 := (binrel% LE.le skoY skoX)
  let let36 := (binrel% GE.ge pi let32)
  let let37 := (binrel% LE.le let32 pi)
  let let38 := (binrel% GE.ge let27 let19)
  let let39 := (Not let38)
  let let40 := (binrel% LT.lt let27 let19)
  let let41 := (Eq let40 let39)
  let let42 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let43 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let44 := (binrel% LE.le pi let43)
  let let45 := (Not let44)
  let let46 := (binrel% LE.le let33 pi)
  let let47 := (Not let46)
  let let48 := (binrel% HMul.hMul pi let21)
  let let49 := (binrel% LE.le skoY let48)
  let let50 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let51 := (binrel% LE.le let50 skoX)
  let let52 := (Not let35)
  let let53 := (binrel% LE.le skoY let19)
  let let54 := (binrel% LE.le skoY let10)
  let let55 := (Not let54)
  let let56 := (binrel% LE.le let10 skoY)
  let let57 := (Not let56)
  let let58 := (Or let57 (Or let55 let53))
  let let59 := (binrel% LE.le let19 skoY)
  let let60 := (And let59 (And let56 (And let53 (And let54 (And let58 (And let52 (And let51 (And let49 (And let47 let45)))))))))
  let let61 := (binrel% GE.ge (binrel% HAdd.hAdd let13 let29) let1)
  let let62 := (binrel% LE.le skoY let29)
  let let63 := (binrel% GE.ge (binrel% HMul.hMul let12 pi) (Neg.neg let42))
  let let64 := (binrel% LE.le pi let42)
  let let65 := (binrel% GE.ge let27 let1)
  let let66 := (binrel% LE.le let9 skoY)
  let let67 := (binrel% GE.ge skoY let1)
  let let68 := (binrel% LE.le let19 let18)
  let let69 := (binrel% GT.gt let2 let1)
  let let70 := (binrel% HMul.hMul let2 let19)
  let let71 := (binrel% HMul.hMul let6 let23)
  let let72 := (binrel% HMul.hMul let3 let19)
  let let73 := (binrel% GE.ge let13 let1)
  let let74 := (binrel% HMul.hMul let6 skoX)
  let let75 := (Not let63)
  let let76 := (Not let36)
  let let77 := (Not let34)
  let let78 := (Not let15)
  let let79 := (Not let65)
  let let80 := (Or let79 (Or let78 let73))
  let let81 := (And let67 (And let65 (And let73 (And let15 (And let80 (And let77 (And let24 (And let61 (And let76 let75)))))))))
  let let82 := (Eq let60 let81)
  let let83 := (Eq let58 let80)
  let let84 := (Not let24)
  let let85 := (Not let73)
  let let86 := (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let71 let70))
  let let87 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let74 let22))
  let let88 := (binrel% LE.le let87 let86)
  let let89 := (binrel% LE.le let22 let70)
  let let90 := (And let69 let53)
  let let91 := (binrel% LE.le let74 let71)
  let let92 := (And let7 let24)
  let let93 := (binrel% LE.le let28 let72)
  let let94 := (And let4 let38)
(Eq let4 True) → (Eq let7 True) → (Eq let10 let9) → (Eq let16 let15) → (Eq let20 let18) → (Eq let21 let17) → (Eq let22 skoY) → (Eq let25 let24) → (Eq let28 let14) → (Eq let30 let29) → (Eq let31 let19) → (Eq let33 let32) → (Eq let35 let34) → (Eq let37 let36) → let41 → (Eq let43 let42) → (Eq let60 let60) → (Eq let62 let61) → (Eq let64 let63) → (Eq let66 let65) → (Eq let59 let67) → (Eq let38 let65) → (Eq let68 False) → (Eq let58 let58) → (Eq let69 True) → (Eq let70 let19) → (Eq let50 let23) → (Eq let71 let18) → (Eq let72 let19) → (Eq let53 let73) → (Eq let74 let26) → let60 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 10)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% LT.lt let6 let1)
  let let8 := (Int.ofNat 10)
  let let9 := (binrel% HMul.hMul let8 skoX)
  let let10 := (binrel% HMul.hMul skoX let5)
  let let11 := (Int.ofNat 1)
  let let12 := (Neg.neg let11)
  let let13 := (binrel% HMul.hMul let12 skoY)
  let let14 := (binrel% HAdd.hAdd let13 let9)
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (binrel% LE.le skoY let9)
  let let17 := (binrel% HDiv.hDiv let11 (Int.ofNat 2))
  let let18 := (Neg.neg let17)
  let let19 := (Rat.ofInt 0)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let18 let19))
  let let21 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let22 := (binrel% HMul.hMul let2 skoY)
  let let23 := (binrel% HDiv.hDiv let11 (Int.ofNat 20))
  let let24 := (binrel% GE.ge skoX let23)
  let let25 := (binrel% LE.le let23 skoX)
  let let26 := (binrel% HMul.hMul (Neg.neg let8) skoX)
  let let27 := (binrel% HAdd.hAdd skoY let26)
  let let28 := (binrel% HMul.hMul let3 let27)
  let let29 := (binrel% HMul.hMul let17 pi)
  let let30 := (binrel% HMul.hMul pi let17)
  let let31 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let26 skoY))
  let let32 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let33 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let34 := (binrel% GE.ge (binrel% HAdd.hAdd let13 skoX) let1)
  let let35 := (binrel% LE.le skoY skoX)
  let let36 := (binrel% GE.ge pi let32)
  let let37 := (binrel% LE.le let32 pi)
  let let38 := (binrel% GE.ge let27 let19)
  let let39 := (Not let38)
  let let40 := (binrel% LT.lt let27 let19)
  let let41 := (Eq let40 let39)
  let let42 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let43 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let44 := (binrel% LE.le pi let43)
  let let45 := (Not let44)
  let let46 := (binrel% LE.le let33 pi)
  let let47 := (Not let46)
  let let48 := (binrel% HMul.hMul pi let21)
  let let49 := (binrel% LE.le skoY let48)
  let let50 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let51 := (binrel% LE.le let50 skoX)
  let let52 := (Not let35)
  let let53 := (binrel% LE.le skoY let19)
  let let54 := (binrel% LE.le skoY let10)
  let let55 := (Not let54)
  let let56 := (binrel% LE.le let10 skoY)
  let let57 := (Not let56)
  let let58 := (Or let57 (Or let55 let53))
  let let59 := (binrel% LE.le let19 skoY)
  let let60 := (And let59 (And let56 (And let53 (And let54 (And let58 (And let52 (And let51 (And let49 (And let47 let45)))))))))
  let let61 := (binrel% GE.ge (binrel% HAdd.hAdd let13 let29) let1)
  let let62 := (binrel% LE.le skoY let29)
  let let63 := (binrel% GE.ge (binrel% HMul.hMul let12 pi) (Neg.neg let42))
  let let64 := (binrel% LE.le pi let42)
  let let65 := (binrel% GE.ge let27 let1)
  let let66 := (binrel% LE.le let9 skoY)
  let let67 := (binrel% GE.ge skoY let1)
  let let68 := (binrel% LE.le let19 let18)
  let let69 := (binrel% GT.gt let2 let1)
  let let70 := (binrel% HMul.hMul let2 let19)
  let let71 := (binrel% HMul.hMul let6 let23)
  let let72 := (binrel% HMul.hMul let3 let19)
  let let73 := (binrel% GE.ge let13 let1)
  let let74 := (binrel% HMul.hMul let6 skoX)
  let let75 := (Not let63)
  let let76 := (Not let36)
  let let77 := (Not let34)
  let let78 := (Not let15)
  let let79 := (Not let65)
  let let80 := (Or let79 (Or let78 let73))
  let let81 := (And let67 (And let65 (And let73 (And let15 (And let80 (And let77 (And let24 (And let61 (And let76 let75)))))))))
  let let82 := (Eq let60 let81)
  let let83 := (Eq let58 let80)
  let let84 := (Not let24)
  let let85 := (Not let73)
  let let86 := (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let71 let70))
  let let87 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let74 let22))
  let let88 := (binrel% LE.le let87 let86)
  let let89 := (binrel% LE.le let22 let70)
  let let90 := (And let69 let53)
  let let91 := (binrel% LE.le let74 let71)
  let let92 := (And let7 let24)
  let let93 := (binrel% LE.le let28 let72)
  let let94 := (And let4 let38)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let7 True) => -- EVALUATE
fun lean_r2 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let16 let15) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let20 let18) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let21 let17) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let22 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let28 let14) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let30 let29) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let31 let19) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r14 : let41 => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let43 let42) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let60 let60) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let62 let61) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let64 let63) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let66 let65) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let59 let67) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let38 let65) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let68 False) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let58 let58) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let69 True) => -- EVALUATE
fun lean_r25 : (Eq let70 let19) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let50 let23) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let71 let18) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let72 let19) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let53 let73) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let74 let26) => -- THEORY_REWRITE_ARITH
fun lean_a31 : let60 => by
have lean_s0 : (Or let85 (Or let84 (Or let79 False))) :=
  (scope (fun lean_a32 : let73 =>
    (scope (fun lean_a33 : let24 =>
      (scope (fun lean_a34 : let65 =>
        have lean_s0 : (Eq let65 let38) := by timed Eq.symm lean_r21
        have lean_s1 : let38 := by timed eqResolve lean_a34 lean_s0
        have lean_s2 : (Or let39 False) :=
          (scope (fun lean_a35 : let38 =>
            have lean_s2 : let4 := by timed trueElim lean_r0
            have lean_s3 : let94 := by timed And.intro lean_s2 lean_a35
            have lean_s4 : (Implies let94 let93) := by arithMulNeg [let27, let19, let3], 3
            have lean_s5 : let93 := by timed modusPonens lean_s3 lean_s4
            have lean_s6 : let7 := by timed trueElim lean_r1
            have lean_s7 : let92 := by timed And.intro lean_s6 lean_a33
            have lean_s8 : (Implies let92 let91) := by arithMulNeg [skoX, let23, let6], 3
            have lean_s9 : let91 := by timed modusPonens lean_s7 lean_s8
            have lean_s10 : let69 := by timed trueElim lean_r24
            have lean_s11 : (Eq let73 let53) := by timed Eq.symm lean_r29
            have lean_s12 : let53 := by timed eqResolve lean_a32 lean_s11
            have lean_s13 : let90 := by timed And.intro lean_s10 lean_s12
            have lean_s14 : (Implies let90 let89) := by arithMulPos [skoY, let19, let2], 1
            have lean_s15 : let89 := by timed modusPonens lean_s13 lean_s14
            have lean_s16 : let88 := by sumBounds [lean_s5, lean_s9, lean_s15]
            let lean_s17 := by timed congrHAdd lean_r30 lean_r6
            have lean_s18 : (Eq let87 let31) := by timed congrHAdd lean_r8 lean_s17
            have lean_s19 : (Eq let87 let19) := by timed Eq.trans lean_s18 lean_r10
            let lean_s20 := by timed flipCongrArg lean_s19 [LE.le]
            let lean_s21 := by timed congrHAdd lean_r27 lean_r25
            have lean_s22 : (Eq let86 let20) := by timed congrHAdd lean_r28 lean_s21
            have lean_s23 : (Eq let86 let18) := by timed Eq.trans lean_s22 lean_r4
            have lean_s24 : (Eq let88 let68) := by timed congr lean_s20 lean_s23
            have lean_s25 : (Eq let88 False) := by timed Eq.trans lean_s24 lean_r22
            show False from by timed eqResolve lean_s16 lean_s25
          ))
        have lean_s3 : let39 := by liftOrNToNeg lean_s2
        have lean_s4 : (Eq let39 let79) := by timed flipCongrArg lean_r21 [Not]
        have lean_s5 : (Eq let40 let79) := by timed Eq.trans lean_r14 lean_s4
        have lean_s6 : (Eq let79 let40) := by timed Eq.symm lean_s5
        have lean_s7 : (Eq let39 let40) := by timed Eq.trans lean_s4 lean_s6
        have lean_s8 : let40 := by timed eqResolve lean_s3 lean_s7
        have lean_s9 : (Eq let79 let39) := by timed Eq.symm lean_s4
        have lean_s10 : let41 := by timed Eq.trans lean_s5 lean_s9
        have lean_s11 : let39 := by timed eqResolve lean_s8 lean_s10
        show False from by timed contradiction lean_s1 lean_s11
  ))))))
have lean_s1 : (Not (And let73 (And let24 let65))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or let85 (Or let84 let79)) := by timed flipNotAnd lean_s1 [let73, let24, let65]
have lean_s3 : (Or let79 (Or let85 let84)) := by permutateOr lean_s2, [2, 0, 1], (- 1)
have lean_s4 : (Eq And And) := by timed rfl
let lean_s5 := by timed congr lean_s4 lean_r20
let lean_s6 := by timed flipCongrArg lean_r2 [LE.le]
have lean_s7 : (Eq skoY skoY) := by timed rfl
have lean_s8 : (Eq let56 let66) := by timed congr lean_s6 lean_s7
have lean_s9 : (Eq let56 let65) := by timed Eq.trans lean_s8 lean_r19
let lean_s10 := by timed congr lean_s4 lean_s9
let lean_s11 := by timed congr lean_s4 lean_r29
let lean_s12 := by timed flipCongrArg lean_s7 [LE.le]
have lean_s13 : (Eq let54 let16) := by timed congr lean_s12 lean_r2
have lean_s14 : (Eq let54 let15) := by timed Eq.trans lean_s13 lean_r3
let lean_s15 := by timed congr lean_s4 lean_s14
have lean_s16 : (Eq Or Or) := by timed rfl
have lean_s17 : (Eq let57 let79) := by timed flipCongrArg lean_s9 [Not]
let lean_s18 := by timed congr lean_s16 lean_s17
have lean_s19 : (Eq let55 let78) := by timed flipCongrArg lean_s14 [Not]
let lean_s20 := by timed congr lean_s16 lean_s19
let lean_s21 := by timed congr lean_s20 lean_r29
have lean_s22 : let83 := by timed congr lean_s18 lean_s21
have lean_s23 : let83 := by timed Eq.trans lean_r23 lean_s22
let lean_s24 := by timed congr lean_s4 lean_s23
have lean_s25 : (Eq let52 let77) := by timed flipCongrArg lean_r12 [Not]
let lean_s26 := by timed congr lean_s4 lean_s25
let lean_s27 := by timed flipCongrArg lean_r26 [LE.le]
have lean_s28 : (Eq skoX skoX) := by timed rfl
have lean_s29 : (Eq let51 let25) := by timed congr lean_s27 lean_s28
have lean_s30 : (Eq let51 let24) := by timed Eq.trans lean_s29 lean_r7
let lean_s31 := by timed congr lean_s4 lean_s30
let lean_s32 := by timed flipCongrArg lean_s7 [LE.le]
have lean_s33 : (Eq pi pi) := by timed rfl
let lean_s34 := by timed flipCongrArg lean_s33 [HMul.hMul]
have lean_s35 : (Eq let48 let30) := by timed congr lean_s34 lean_r5
have lean_s36 : (Eq let48 let29) := by timed Eq.trans lean_s35 lean_r9
have lean_s37 : (Eq let49 let62) := by timed congr lean_s32 lean_s36
have lean_s38 : (Eq let49 let61) := by timed Eq.trans lean_s37 lean_r17
let lean_s39 := by timed congr lean_s4 lean_s38
let lean_s40 := by timed flipCongrArg lean_r11 [LE.le]
have lean_s41 : (Eq let46 let37) := by timed congr lean_s40 lean_s33
have lean_s42 : (Eq let46 let36) := by timed Eq.trans lean_s41 lean_r13
have lean_s43 : (Eq let47 let76) := by timed flipCongrArg lean_s42 [Not]
let lean_s44 := by timed congr lean_s4 lean_s43
let lean_s45 := by timed flipCongrArg lean_s33 [LE.le]
have lean_s46 : (Eq let44 let64) := by timed congr lean_s45 lean_r15
have lean_s47 : (Eq let44 let63) := by timed Eq.trans lean_s46 lean_r18
have lean_s48 : (Eq let45 let75) := by timed flipCongrArg lean_s47 [Not]
let lean_s49 := by timed congr lean_s44 lean_s48
let lean_s50 := by timed congr lean_s39 lean_s49
let lean_s51 := by timed congr lean_s31 lean_s50
let lean_s52 := by timed congr lean_s26 lean_s51
let lean_s53 := by timed congr lean_s24 lean_s52
let lean_s54 := by timed congr lean_s15 lean_s53
let lean_s55 := by timed congr lean_s11 lean_s54
let lean_s56 := by timed congr lean_s10 lean_s55
have lean_s57 : let82 := by timed congr lean_s5 lean_s56
have lean_s58 : let82 := by timed Eq.trans lean_r16 lean_s57
have lean_s59 : let81 := by timed eqResolve lean_a31 lean_s58
have lean_s60 : let24 := by andElim lean_s59, 6
let lean_s61 := by R2 lean_s3, lean_s60, let24, [(- 1), 0]
have lean_s62 : let73 := by andElim lean_s59, 2
let lean_s63 := by R2 lean_s61, lean_s62, let73, [(- 1), 0]
have lean_s64 : let65 := by andElim lean_s59, 1
exact (show False from by R2 lean_s63, lean_s64, let65, [0, 0])


