open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (binrel% GT.gt let2 let1)
  let let6 := (binrel% GE.ge skoY let1)
  let let7 := (Rat.ofInt 0)
  let let8 := (binrel% GE.ge skoY let7)
  let let9 := (binrel% HMul.hMul let2 let7)
  let let10 := (Int.ofNat 1)
  let let11 := (binrel% HDiv.hDiv let10 (Int.ofNat 20))
  let let12 := (binrel% HMul.hMul let3 let11)
  let let13 := (binrel% HMul.hMul let3 let7)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 let9))
  let let15 := (binrel% HMul.hMul let2 skoY)
  let let16 := (binrel% HMul.hMul let3 skoX)
  let let17 := (Neg.neg let10)
  let let18 := (binrel% HMul.hMul let17 skoX)
  let let19 := (binrel% HAdd.hAdd skoY let18)
  let let20 := (binrel% HMul.hMul let3 let19)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let16 let15))
  let let22 := (binrel% GE.ge let21 let14)
  let let23 := (Not let22)
  let let24 := (binrel% LT.lt let21 let14)
  let let25 := (binrel% HAdd.hAdd (binrel% HMul.hMul let17 skoY) skoX)
  let let26 := (Int.ofNat 2)
  let let27 := (binrel% HDiv.hDiv let10 let26)
  let let28 := (binrel% HMul.hMul let27 pi)
  let let29 := (binrel% HMul.hMul pi let27)
  let let30 := (binrel% GE.ge let25 let1)
  let let31 := (Eq let30 let30)
  let let32 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let33 := (binrel% GE.ge skoX let11)
  let let34 := (binrel% LE.le let11 skoX)
  let let35 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let36 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let37 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let38 := (Eq let6 let6)
  let let39 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let40 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let41 := (binrel% LE.le pi let40)
  let let42 := (Not let41)
  let let43 := (binrel% LE.le let36 pi)
  let let44 := (Not let43)
  let let45 := (binrel% HMul.hMul pi let32)
  let let46 := (binrel% LE.le skoY let45)
  let let47 := (binrel% LE.le let37 skoX)
  let let48 := (binrel% LE.le skoY skoX)
  let let49 := (Not let48)
  let let50 := (binrel% LE.le let7 skoY)
  let let51 := (Not let50)
  let let52 := (And let51 (And let49 (And let47 (And let46 (And let44 let42)))))
  let let53 := (Neg.neg let11)
  let let54 := (binrel% GE.ge let7 let53)
  let let55 := (Not let8)
  let let56 := (binrel% LT.lt skoY let7)
  let let57 := (binrel% GE.ge pi let35)
  let let58 := (binrel% LE.le let35 pi)
  let let59 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let53 let7))
  let let60 := (Not let6)
  let let61 := (Not let60)
  let let62 := (Eq let61 let6)
  let let63 := (binrel% GE.ge (binrel% HMul.hMul let17 pi) (Neg.neg let39))
  let let64 := (binrel% LE.le pi let39)
  let let65 := (Not True)
  let let66 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let26) skoY)) let1)
  let let67 := (binrel% LE.le skoY let28)
  let let68 := (Eq let6 let61)
  let let69 := (binrel% LE.le let19 let7)
  let let70 := (Not let69)
  let let71 := (binrel% GT.gt let19 let7)
  let let72 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let18 skoY))
  let let73 := (Not let30)
  let let74 := (Not let73)
  let let75 := (Eq let74 let30)
  let let76 := (Eq let30 let74)
  let let77 := (Not let63)
  let let78 := (Not let57)
  let let79 := (And let60 (And let73 (And let33 (And let66 (And let78 let77)))))
  let let80 := (Eq let52 let79)
  let let81 := (Not let33)
  let let82 := (Or let6 (Or let81 let30))
  let let83 := (Or let61 (Or let81 let74))
  let let84 := (Not let71)
  let let85 := (binrel% LT.lt let15 let9)
  let let86 := (And let5 let56)
  let let87 := (binrel% LE.le let16 let12)
  let let88 := (And let4 let33)
  let let89 := (binrel% LT.lt let20 let13)
  let let90 := (And let4 let71)
(Eq let4 True) → (Eq let5 True) → (Eq let8 let6) → (Eq let24 let23) → (Eq let20 let25) → (Eq let29 let28) → (Eq let31 True) → (Eq let32 let27) → (Eq let34 let33) → (Eq let36 let35) → (Eq let37 let11) → (Eq let38 True) → (Eq let9 let7) → (Eq let40 let39) → (Eq let52 let52) → (Eq let54 True) → (Eq let56 let55) → (Eq let58 let57) → (Eq let59 let53) → let62 → (Eq let48 let30) → (Eq let64 let63) → (Eq let65 False) → (Eq let67 let66) → (Eq let12 let53) → (Eq let50 let6) → (Eq let62 let68) → (Eq let13 let7) → (Eq let69 let30) → (Eq let71 let70) → (Eq let72 let7) → let75 → (Eq let15 skoY) → (Eq let75 let76) → (Eq let16 let18) → let52 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (binrel% GT.gt let2 let1)
  let let6 := (binrel% GE.ge skoY let1)
  let let7 := (Rat.ofInt 0)
  let let8 := (binrel% GE.ge skoY let7)
  let let9 := (binrel% HMul.hMul let2 let7)
  let let10 := (Int.ofNat 1)
  let let11 := (binrel% HDiv.hDiv let10 (Int.ofNat 20))
  let let12 := (binrel% HMul.hMul let3 let11)
  let let13 := (binrel% HMul.hMul let3 let7)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 let9))
  let let15 := (binrel% HMul.hMul let2 skoY)
  let let16 := (binrel% HMul.hMul let3 skoX)
  let let17 := (Neg.neg let10)
  let let18 := (binrel% HMul.hMul let17 skoX)
  let let19 := (binrel% HAdd.hAdd skoY let18)
  let let20 := (binrel% HMul.hMul let3 let19)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let16 let15))
  let let22 := (binrel% GE.ge let21 let14)
  let let23 := (Not let22)
  let let24 := (binrel% LT.lt let21 let14)
  let let25 := (binrel% HAdd.hAdd (binrel% HMul.hMul let17 skoY) skoX)
  let let26 := (Int.ofNat 2)
  let let27 := (binrel% HDiv.hDiv let10 let26)
  let let28 := (binrel% HMul.hMul let27 pi)
  let let29 := (binrel% HMul.hMul pi let27)
  let let30 := (binrel% GE.ge let25 let1)
  let let31 := (Eq let30 let30)
  let let32 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let33 := (binrel% GE.ge skoX let11)
  let let34 := (binrel% LE.le let11 skoX)
  let let35 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let36 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let37 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let38 := (Eq let6 let6)
  let let39 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let40 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let41 := (binrel% LE.le pi let40)
  let let42 := (Not let41)
  let let43 := (binrel% LE.le let36 pi)
  let let44 := (Not let43)
  let let45 := (binrel% HMul.hMul pi let32)
  let let46 := (binrel% LE.le skoY let45)
  let let47 := (binrel% LE.le let37 skoX)
  let let48 := (binrel% LE.le skoY skoX)
  let let49 := (Not let48)
  let let50 := (binrel% LE.le let7 skoY)
  let let51 := (Not let50)
  let let52 := (And let51 (And let49 (And let47 (And let46 (And let44 let42)))))
  let let53 := (Neg.neg let11)
  let let54 := (binrel% GE.ge let7 let53)
  let let55 := (Not let8)
  let let56 := (binrel% LT.lt skoY let7)
  let let57 := (binrel% GE.ge pi let35)
  let let58 := (binrel% LE.le let35 pi)
  let let59 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let53 let7))
  let let60 := (Not let6)
  let let61 := (Not let60)
  let let62 := (Eq let61 let6)
  let let63 := (binrel% GE.ge (binrel% HMul.hMul let17 pi) (Neg.neg let39))
  let let64 := (binrel% LE.le pi let39)
  let let65 := (Not True)
  let let66 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let26) skoY)) let1)
  let let67 := (binrel% LE.le skoY let28)
  let let68 := (Eq let6 let61)
  let let69 := (binrel% LE.le let19 let7)
  let let70 := (Not let69)
  let let71 := (binrel% GT.gt let19 let7)
  let let72 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let18 skoY))
  let let73 := (Not let30)
  let let74 := (Not let73)
  let let75 := (Eq let74 let30)
  let let76 := (Eq let30 let74)
  let let77 := (Not let63)
  let let78 := (Not let57)
  let let79 := (And let60 (And let73 (And let33 (And let66 (And let78 let77)))))
  let let80 := (Eq let52 let79)
  let let81 := (Not let33)
  let let82 := (Or let6 (Or let81 let30))
  let let83 := (Or let61 (Or let81 let74))
  let let84 := (Not let71)
  let let85 := (binrel% LT.lt let15 let9)
  let let86 := (And let5 let56)
  let let87 := (binrel% LE.le let16 let12)
  let let88 := (And let4 let33)
  let let89 := (binrel% LT.lt let20 let13)
  let let90 := (And let4 let71)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let5 True) => -- EVALUATE
fun lean_r2 : (Eq let8 let6) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let20 let25) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let31 True) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let32 let27) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let37 let11) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let38 True) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let9 let7) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let40 let39) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let52 let52) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let54 True) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let56 let55) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let58 let57) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let59 let53) => -- THEORY_REWRITE_ARITH
fun lean_r19 : let62 => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let48 let30) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let64 let63) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let65 False) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let12 let53) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let50 let6) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let62 let68) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let13 let7) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let69 let30) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let71 let70) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let72 let7) => -- THEORY_REWRITE_ARITH
fun lean_r31 : let75 => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let15 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let75 let76) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let16 let18) => -- THEORY_REWRITE_ARITH
fun lean_a35 : let52 => by
have lean_s0 : (Or let61 (Or let81 (Or let74 False))) :=
  (scope (fun lean_a36 : let60 =>
    (scope (fun lean_a37 : let33 =>
      (scope (fun lean_a38 : let73 =>
        have lean_s0 : (Eq let70 let73) := by timed flipCongrArg lean_r28 [Not]
        have lean_s1 : (Eq let71 let73) := by timed Eq.trans lean_r29 lean_s0
        have lean_s2 : (Eq let73 let71) := by timed Eq.symm lean_s1
        have lean_s3 : let71 := by timed eqResolve lean_a38 lean_s2
        have lean_s4 : (Or let84 False) :=
          (scope (fun lean_a39 : let71 =>
            have lean_s4 : let4 := by timed trueElim lean_r0
            have lean_s5 : let90 := by timed And.intro lean_s4 lean_a39
            have lean_s6 : (Implies let90 let89) := by arithMulNeg [let19, let7, let3], 2
            have lean_s7 : let89 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let88 := by timed And.intro lean_s4 lean_a37
            have lean_s9 : (Implies let88 let87) := by arithMulNeg [skoX, let11, let3], 3
            have lean_s10 : let87 := by timed modusPonens lean_s8 lean_s9
            have lean_s11 : let5 := by timed trueElim lean_r1
            have lean_s12 : (Eq let55 let60) := by timed flipCongrArg lean_r2 [Not]
            have lean_s13 : (Eq let56 let60) := by timed Eq.trans lean_r16 lean_s12
            have lean_s14 : (Eq let60 let56) := by timed Eq.symm lean_s13
            have lean_s15 : let56 := by timed eqResolve lean_a36 lean_s14
            have lean_s16 : let86 := by timed And.intro lean_s11 lean_s15
            have lean_s17 : (Implies let86 let85) := by arithMulPos [skoY, let7, let2], 0
            have lean_s18 : let85 := by timed modusPonens lean_s16 lean_s17
            have lean_s19 : let24 := by sumBounds [lean_s7, lean_s10, lean_s18]
            let lean_s20 := by timed congrHAdd lean_r34 lean_r32
            have lean_s21 : (Eq let21 let72) := by timed congrHAdd lean_r4 lean_s20
            have lean_s22 : (Eq let21 let7) := by timed Eq.trans lean_s21 lean_r30
            let lean_s23 := by timed flipCongrArg lean_s22 [GE.ge]
            let lean_s24 := by timed congrHAdd lean_r24 lean_r12
            have lean_s25 : (Eq let14 let59) := by timed congrHAdd lean_r27 lean_s24
            have lean_s26 : (Eq let14 let53) := by timed Eq.trans lean_s25 lean_r18
            have lean_s27 : (Eq let22 let54) := by timed congr lean_s23 lean_s26
            have lean_s28 : (Eq let22 True) := by timed Eq.trans lean_s27 lean_r15
            have lean_s29 : (Eq let23 let65) := by timed flipCongrArg lean_s28 [Not]
            have lean_s30 : (Eq let23 False) := by timed Eq.trans lean_s29 lean_r22
            have lean_s31 : (Eq let24 False) := by timed Eq.trans lean_r3 lean_s30
            show False from by timed eqResolve lean_s19 lean_s31
          ))
        have lean_s5 : let84 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let84 let74) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let84 let30) := by timed Eq.trans lean_s6 lean_r31
        have lean_s8 : (Eq let30 let69) := by timed Eq.symm lean_r28
        have lean_s9 : (Eq let84 let69) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let69 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let30 let84) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let69 let84) := by timed Eq.trans lean_r28 lean_s11
        have lean_s13 : let84 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let60 (And let33 let73))) := by liftOrNToNeg lean_s0
have lean_s2 : let83 := by timed flipNotAnd lean_s1 [let60, let33, let73]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let38 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let68 let38) := by timed congr lean_s5 lean_r19
have lean_s7 : (Eq let68 True) := by timed Eq.trans lean_s6 lean_r11
have lean_s8 : (Eq let62 True) := by timed Eq.trans lean_r26 lean_s7
have lean_s9 : let62 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq let81 let81) := by timed rfl
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let31 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let76 let31) := by timed congr lean_s14 lean_r31
have lean_s16 : (Eq let76 True) := by timed Eq.trans lean_s15 lean_r6
have lean_s17 : (Eq let75 True) := by timed Eq.trans lean_r33 lean_s16
have lean_s18 : let75 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s12 lean_s18
have lean_s20 : (Eq let83 let82) := by timed congr lean_s10 lean_s19
have lean_s21 : let82 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let6 (Or let30 let81)) := by permutateOr lean_s21, [0, 2, 1], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
have lean_s24 : (Eq let51 let60) := by timed flipCongrArg lean_r25 [Not]
let lean_s25 := by timed congr lean_s23 lean_s24
have lean_s26 : (Eq let49 let73) := by timed flipCongrArg lean_r20 [Not]
let lean_s27 := by timed congr lean_s23 lean_s26
let lean_s28 := by timed flipCongrArg lean_r10 [LE.le]
have lean_s29 : (Eq skoX skoX) := by timed rfl
have lean_s30 : (Eq let47 let34) := by timed congr lean_s28 lean_s29
have lean_s31 : (Eq let47 let33) := by timed Eq.trans lean_s30 lean_r8
let lean_s32 := by timed congr lean_s23 lean_s31
have lean_s33 : (Eq skoY skoY) := by timed rfl
let lean_s34 := by timed flipCongrArg lean_s33 [LE.le]
have lean_s35 : (Eq pi pi) := by timed rfl
let lean_s36 := by timed flipCongrArg lean_s35 [HMul.hMul]
have lean_s37 : (Eq let45 let29) := by timed congr lean_s36 lean_r7
have lean_s38 : (Eq let45 let28) := by timed Eq.trans lean_s37 lean_r5
have lean_s39 : (Eq let46 let67) := by timed congr lean_s34 lean_s38
have lean_s40 : (Eq let46 let66) := by timed Eq.trans lean_s39 lean_r23
let lean_s41 := by timed congr lean_s23 lean_s40
let lean_s42 := by timed flipCongrArg lean_r9 [LE.le]
have lean_s43 : (Eq let43 let58) := by timed congr lean_s42 lean_s35
have lean_s44 : (Eq let43 let57) := by timed Eq.trans lean_s43 lean_r17
have lean_s45 : (Eq let44 let78) := by timed flipCongrArg lean_s44 [Not]
let lean_s46 := by timed congr lean_s23 lean_s45
let lean_s47 := by timed flipCongrArg lean_s35 [LE.le]
have lean_s48 : (Eq let41 let64) := by timed congr lean_s47 lean_r13
have lean_s49 : (Eq let41 let63) := by timed Eq.trans lean_s48 lean_r21
have lean_s50 : (Eq let42 let77) := by timed flipCongrArg lean_s49 [Not]
let lean_s51 := by timed congr lean_s46 lean_s50
let lean_s52 := by timed congr lean_s41 lean_s51
let lean_s53 := by timed congr lean_s32 lean_s52
let lean_s54 := by timed congr lean_s27 lean_s53
have lean_s55 : let80 := by timed congr lean_s25 lean_s54
have lean_s56 : let80 := by timed Eq.trans lean_r14 lean_s55
have lean_s57 : let79 := by timed eqResolve lean_a35 lean_s56
have lean_s58 : let33 := by andElim lean_s57, 2
let lean_s59 := by R2 lean_s22, lean_s58, let33, [(- 1), 0]
have lean_s60 : let73 := by andElim lean_s57, 1
let lean_s61 := by R1 lean_s59, lean_s60, let30, [(- 1), 0]
have lean_s62 : let60 := by andElim lean_s57, 0
exact (show False from by R1 lean_s61, lean_s62, let6, [0, 0])


