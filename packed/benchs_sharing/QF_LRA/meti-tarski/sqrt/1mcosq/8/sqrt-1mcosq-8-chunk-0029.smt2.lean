open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Int.ofNat 1)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% HMul.hMul let6 skoY)
  let let8 := (binrel% HAdd.hAdd let7 skoX)
  let let9 := (binrel% HMul.hMul let6 skoX)
  let let10 := (binrel% HAdd.hAdd skoY let9)
  let let11 := (binrel% HMul.hMul let3 let10)
  let let12 := (binrel% GT.gt let2 let1)
  let let13 := (Int.ofNat 5)
  let let14 := (binrel% HDiv.hDiv let5 let13)
  let let15 := (Neg.neg let14)
  let let16 := (binrel% HMul.hMul let3 let14)
  let let17 := (Eq let16 let15)
  let let18 := (Int.ofNat 2)
  let let19 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let18) skoY)) (binrel% HDiv.hDiv let18 let13))
  let let20 := (binrel% HDiv.hDiv let5 let18)
  let let21 := (binrel% HMul.hMul let20 pi)
  let let22 := (binrel% HAdd.hAdd let15 let21)
  let let23 := (binrel% LE.le skoY let22)
  let let24 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let25 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let26 := (binrel% GE.ge (binrel% HMul.hMul let6 pi) (Neg.neg let24))
  let let27 := (binrel% LE.le pi let24)
  let let28 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let29 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let30 := (binrel% GE.ge let7 let1)
  let let31 := (Rat.ofInt 0)
  let let32 := (binrel% LE.le skoY let31)
  let let33 := (binrel% HMul.hMul pi let20)
  let let34 := (binrel% HMul.hMul let2 let31)
  let let35 := (binrel% HDiv.hDiv let5 (Int.ofNat 10))
  let let36 := (binrel% HMul.hMul let3 let35)
  let let37 := (binrel% HMul.hMul let3 let31)
  let let38 := (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 let34))
  let let39 := (binrel% HMul.hMul let2 skoY)
  let let40 := (binrel% HMul.hMul let3 skoX)
  let let41 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let40 let39))
  let let42 := (binrel% GE.ge let41 let38)
  let let43 := (Not let42)
  let let44 := (binrel% LT.lt let41 let38)
  let let45 := (binrel% GE.ge let8 let1)
  let let46 := (Eq let45 let45)
  let let47 := (binrel% GE.ge pi let28)
  let let48 := (binrel% LE.le let28 pi)
  let let49 := (binrel% HDiv.hDiv let3 (Rat.ofInt 5))
  let let50 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let51 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10))
  let let52 := (Neg.neg let35)
  let let53 := (binrel% GE.ge let31 let52)
  let let54 := (binrel% GE.ge skoX let35)
  let let55 := (binrel% LE.le let35 skoX)
  let let56 := (binrel% LE.le skoY skoX)
  let let57 := (Not let56)
  let let58 := (binrel% LE.le let51 skoX)
  let let59 := (binrel% LE.le let29 pi)
  let let60 := (Not let59)
  let let61 := (binrel% LE.le pi let25)
  let let62 := (Not let61)
  let let63 := (binrel% HMul.hMul pi let50)
  let let64 := (binrel% HAdd.hAdd let49 let63)
  let let65 := (binrel% LE.le skoY let64)
  let let66 := (And let32 (And let65 (And let62 (And let60 (And let58 let57)))))
  let let67 := (Not let45)
  let let68 := (Not let67)
  let let69 := (Eq let68 let45)
  let let70 := (Not True)
  let let71 := (Eq let45 let68)
  let let72 := (binrel% LE.le let10 let31)
  let let73 := (Not let72)
  let let74 := (binrel% GT.gt let10 let31)
  let let75 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let52 let31))
  let let76 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let9 skoY))
  let let77 := (And let54 let67)
  let let78 := (Not let47)
  let let79 := (Not let26)
  let let80 := (And let30 (And let19 (And let79 (And let78 let77))))
  let let81 := (Eq let66 let80)
  let let82 := (Not let54)
  let let83 := (Not let30)
  let let84 := (Or let83 (Or let82 let45))
  let let85 := (Or let83 (Or let82 let68))
  let let86 := (Not let74)
  let let87 := (binrel% LE.le let39 let34)
  let let88 := (And let12 let32)
  let let89 := (binrel% LE.le let40 let36)
  let let90 := (And let4 let54)
  let let91 := (binrel% LT.lt let11 let37)
  let let92 := (And let4 let74)
(Eq let4 True) → (Eq let11 let8) → (Eq let12 True) → let17 → (Eq let23 let19) → (Eq let3 let3) → (Eq let25 let24) → (Eq let27 let26) → (Eq let29 let28) → (Eq let32 let30) → (Eq let33 let21) → (Eq let44 let43) → (Eq let46 True) → (Eq let48 let47) → (Eq let49 let16) → (Eq let50 let20) → (Eq let51 let35) → (Eq let53 True) → (Eq let55 let54) → (Eq let56 let45) → (Eq let66 let66) → let69 → (Eq let70 False) → (Eq let36 let52) → (Eq let69 let71) → (Eq let37 let31) → (Eq let72 let45) → (Eq let74 let73) → (Eq let75 let52) → (Eq let34 let31) → (Eq let76 let31) → (Eq let39 skoY) → (Eq let40 let9) → let66 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Int.ofNat 1)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% HMul.hMul let6 skoY)
  let let8 := (binrel% HAdd.hAdd let7 skoX)
  let let9 := (binrel% HMul.hMul let6 skoX)
  let let10 := (binrel% HAdd.hAdd skoY let9)
  let let11 := (binrel% HMul.hMul let3 let10)
  let let12 := (binrel% GT.gt let2 let1)
  let let13 := (Int.ofNat 5)
  let let14 := (binrel% HDiv.hDiv let5 let13)
  let let15 := (Neg.neg let14)
  let let16 := (binrel% HMul.hMul let3 let14)
  let let17 := (Eq let16 let15)
  let let18 := (Int.ofNat 2)
  let let19 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let18) skoY)) (binrel% HDiv.hDiv let18 let13))
  let let20 := (binrel% HDiv.hDiv let5 let18)
  let let21 := (binrel% HMul.hMul let20 pi)
  let let22 := (binrel% HAdd.hAdd let15 let21)
  let let23 := (binrel% LE.le skoY let22)
  let let24 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let25 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let26 := (binrel% GE.ge (binrel% HMul.hMul let6 pi) (Neg.neg let24))
  let let27 := (binrel% LE.le pi let24)
  let let28 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let29 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let30 := (binrel% GE.ge let7 let1)
  let let31 := (Rat.ofInt 0)
  let let32 := (binrel% LE.le skoY let31)
  let let33 := (binrel% HMul.hMul pi let20)
  let let34 := (binrel% HMul.hMul let2 let31)
  let let35 := (binrel% HDiv.hDiv let5 (Int.ofNat 10))
  let let36 := (binrel% HMul.hMul let3 let35)
  let let37 := (binrel% HMul.hMul let3 let31)
  let let38 := (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let36 let34))
  let let39 := (binrel% HMul.hMul let2 skoY)
  let let40 := (binrel% HMul.hMul let3 skoX)
  let let41 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let40 let39))
  let let42 := (binrel% GE.ge let41 let38)
  let let43 := (Not let42)
  let let44 := (binrel% LT.lt let41 let38)
  let let45 := (binrel% GE.ge let8 let1)
  let let46 := (Eq let45 let45)
  let let47 := (binrel% GE.ge pi let28)
  let let48 := (binrel% LE.le let28 pi)
  let let49 := (binrel% HDiv.hDiv let3 (Rat.ofInt 5))
  let let50 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let51 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10))
  let let52 := (Neg.neg let35)
  let let53 := (binrel% GE.ge let31 let52)
  let let54 := (binrel% GE.ge skoX let35)
  let let55 := (binrel% LE.le let35 skoX)
  let let56 := (binrel% LE.le skoY skoX)
  let let57 := (Not let56)
  let let58 := (binrel% LE.le let51 skoX)
  let let59 := (binrel% LE.le let29 pi)
  let let60 := (Not let59)
  let let61 := (binrel% LE.le pi let25)
  let let62 := (Not let61)
  let let63 := (binrel% HMul.hMul pi let50)
  let let64 := (binrel% HAdd.hAdd let49 let63)
  let let65 := (binrel% LE.le skoY let64)
  let let66 := (And let32 (And let65 (And let62 (And let60 (And let58 let57)))))
  let let67 := (Not let45)
  let let68 := (Not let67)
  let let69 := (Eq let68 let45)
  let let70 := (Not True)
  let let71 := (Eq let45 let68)
  let let72 := (binrel% LE.le let10 let31)
  let let73 := (Not let72)
  let let74 := (binrel% GT.gt let10 let31)
  let let75 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let52 let31))
  let let76 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let9 skoY))
  let let77 := (And let54 let67)
  let let78 := (Not let47)
  let let79 := (Not let26)
  let let80 := (And let30 (And let19 (And let79 (And let78 let77))))
  let let81 := (Eq let66 let80)
  let let82 := (Not let54)
  let let83 := (Not let30)
  let let84 := (Or let83 (Or let82 let45))
  let let85 := (Or let83 (Or let82 let68))
  let let86 := (Not let74)
  let let87 := (binrel% LE.le let39 let34)
  let let88 := (And let12 let32)
  let let89 := (binrel% LE.le let40 let36)
  let let90 := (And let4 let54)
  let let91 := (binrel% LT.lt let11 let37)
  let let92 := (And let4 let74)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let11 let8) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let12 True) => -- EVALUATE
fun lean_r3 : let17 => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let23 let19) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let3 let3) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let32 let30) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let33 let21) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let46 True) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let48 let47) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let49 let16) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let50 let20) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let51 let35) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let53 True) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let56 let45) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let66 let66) => -- THEORY_REWRITE_BOOL
fun lean_r21 : let69 => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let70 False) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let36 let52) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let69 let71) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let37 let31) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let72 let45) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let74 let73) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let75 let52) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let34 let31) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let76 let31) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let39 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let40 let9) => -- THEORY_REWRITE_ARITH
fun lean_a33 : let66 => by
have lean_s0 : (Or let83 (Or let82 (Or let68 False))) :=
  (scope (fun lean_a34 : let30 =>
    (scope (fun lean_a35 : let54 =>
      (scope (fun lean_a36 : let67 =>
        have lean_s0 : (Eq let73 let67) := by timed flipCongrArg lean_r26 [Not]
        have lean_s1 : (Eq let74 let67) := by timed Eq.trans lean_r27 lean_s0
        have lean_s2 : (Eq let67 let74) := by timed Eq.symm lean_s1
        have lean_s3 : let74 := by timed eqResolve lean_a36 lean_s2
        have lean_s4 : (Or let86 False) :=
          (scope (fun lean_a37 : let74 =>
            have lean_s4 : let4 := by timed trueElim lean_r0
            have lean_s5 : let92 := by timed And.intro lean_s4 lean_a37
            have lean_s6 : (Implies let92 let91) := by arithMulNeg [let10, let31, let3], 2
            have lean_s7 : let91 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let90 := by timed And.intro lean_s4 lean_a35
            have lean_s9 : (Implies let90 let89) := by arithMulNeg [skoX, let35, let3], 3
            have lean_s10 : let89 := by timed modusPonens lean_s8 lean_s9
            have lean_s11 : let12 := by timed trueElim lean_r2
            have lean_s12 : (Eq let30 let32) := by timed Eq.symm lean_r9
            have lean_s13 : let32 := by timed eqResolve lean_a34 lean_s12
            have lean_s14 : let88 := by timed And.intro lean_s11 lean_s13
            have lean_s15 : (Implies let88 let87) := by arithMulPos [skoY, let31, let2], 1
            have lean_s16 : let87 := by timed modusPonens lean_s14 lean_s15
            have lean_s17 : let44 := by sumBounds [lean_s7, lean_s10, lean_s16]
            let lean_s18 := by timed congrHAdd lean_r32 lean_r31
            have lean_s19 : (Eq let41 let76) := by timed congrHAdd lean_r1 lean_s18
            have lean_s20 : (Eq let41 let31) := by timed Eq.trans lean_s19 lean_r30
            let lean_s21 := by timed flipCongrArg lean_s20 [GE.ge]
            let lean_s22 := by timed congrHAdd lean_r23 lean_r29
            have lean_s23 : (Eq let38 let75) := by timed congrHAdd lean_r25 lean_s22
            have lean_s24 : (Eq let38 let52) := by timed Eq.trans lean_s23 lean_r28
            have lean_s25 : (Eq let42 let53) := by timed congr lean_s21 lean_s24
            have lean_s26 : (Eq let42 True) := by timed Eq.trans lean_s25 lean_r17
            have lean_s27 : (Eq let43 let70) := by timed flipCongrArg lean_s26 [Not]
            have lean_s28 : (Eq let43 False) := by timed Eq.trans lean_s27 lean_r22
            have lean_s29 : (Eq let44 False) := by timed Eq.trans lean_r11 lean_s28
            show False from by timed eqResolve lean_s17 lean_s29
          ))
        have lean_s5 : let86 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let86 let68) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let86 let45) := by timed Eq.trans lean_s6 lean_r21
        have lean_s8 : (Eq let45 let72) := by timed Eq.symm lean_r26
        have lean_s9 : (Eq let86 let72) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let72 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let45 let86) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let72 let86) := by timed Eq.trans lean_r26 lean_s11
        have lean_s13 : let86 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let30 let77)) := by liftOrNToNeg lean_s0
have lean_s2 : let85 := by timed flipNotAnd lean_s1 [let30, let54, let67]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let83 let83) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let82 let82) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : let46 := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [Eq]
have lean_s10 : (Eq let71 let46) := by timed congr lean_s9 lean_r21
have lean_s11 : (Eq let71 True) := by timed Eq.trans lean_s10 lean_r12
have lean_s12 : (Eq let69 True) := by timed Eq.trans lean_r24 lean_s11
have lean_s13 : let69 := by timed trueElim lean_s12
let lean_s14 := by timed congr lean_s7 lean_s13
have lean_s15 : (Eq let85 let84) := by timed congr lean_s5 lean_s14
have lean_s16 : let84 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let45 (Or let83 let82)) := by permutateOr lean_s16, [2, 0, 1], (- 1)
have lean_s18 : (Eq And And) := by timed rfl
let lean_s19 := by timed congr lean_s18 lean_r9
have lean_s20 : (Eq skoY skoY) := by timed rfl
let lean_s21 := by timed flipCongrArg lean_s20 [LE.le]
let lean_s22 := by timed flipCongrArg lean_r5 [HMul.hMul]
have lean_s23 : (Eq let14 let14) := by timed rfl
have lean_s24 : (Eq let16 let16) := by timed congr lean_s22 lean_s23
have lean_s25 : let17 := by timed Eq.trans lean_s24 lean_r3
have lean_s26 : (Eq let49 let15) := by timed Eq.trans lean_r14 lean_s25
let lean_s27 := by timed flipCongrArg lean_s26 [HAdd.hAdd]
have lean_s28 : (Eq pi pi) := by timed rfl
let lean_s29 := by timed flipCongrArg lean_s28 [HMul.hMul]
have lean_s30 : (Eq let63 let33) := by timed congr lean_s29 lean_r15
have lean_s31 : (Eq let63 let21) := by timed Eq.trans lean_s30 lean_r10
have lean_s32 : (Eq let64 let22) := by timed congr lean_s27 lean_s31
have lean_s33 : (Eq let65 let23) := by timed congr lean_s21 lean_s32
have lean_s34 : (Eq let65 let19) := by timed Eq.trans lean_s33 lean_r4
let lean_s35 := by timed congr lean_s18 lean_s34
let lean_s36 := by timed flipCongrArg lean_s28 [LE.le]
have lean_s37 : (Eq let61 let27) := by timed congr lean_s36 lean_r6
have lean_s38 : (Eq let61 let26) := by timed Eq.trans lean_s37 lean_r7
have lean_s39 : (Eq let62 let79) := by timed flipCongrArg lean_s38 [Not]
let lean_s40 := by timed congr lean_s18 lean_s39
let lean_s41 := by timed flipCongrArg lean_r8 [LE.le]
have lean_s42 : (Eq let59 let48) := by timed congr lean_s41 lean_s28
have lean_s43 : (Eq let59 let47) := by timed Eq.trans lean_s42 lean_r13
have lean_s44 : (Eq let60 let78) := by timed flipCongrArg lean_s43 [Not]
let lean_s45 := by timed congr lean_s18 lean_s44
let lean_s46 := by timed flipCongrArg lean_r16 [LE.le]
have lean_s47 : (Eq skoX skoX) := by timed rfl
have lean_s48 : (Eq let58 let55) := by timed congr lean_s46 lean_s47
have lean_s49 : (Eq let58 let54) := by timed Eq.trans lean_s48 lean_r18
let lean_s50 := by timed congr lean_s18 lean_s49
have lean_s51 : (Eq let57 let67) := by timed flipCongrArg lean_r19 [Not]
let lean_s52 := by timed congr lean_s50 lean_s51
let lean_s53 := by timed congr lean_s45 lean_s52
let lean_s54 := by timed congr lean_s40 lean_s53
let lean_s55 := by timed congr lean_s35 lean_s54
have lean_s56 : let81 := by timed congr lean_s19 lean_s55
have lean_s57 : let81 := by timed Eq.trans lean_r20 lean_s56
have lean_s58 : let80 := by timed eqResolve lean_a33 lean_s57
have lean_s59 : let67 := by andElim lean_s58, 5
let lean_s60 := by R1 lean_s17, lean_s59, let45, [(- 1), 0]
have lean_s61 : let54 := by andElim lean_s58, 4
let lean_s62 := by R2 lean_s60, lean_s61, let54, [(- 1), 0]
have lean_s63 : let30 := by andElim lean_s58, 0
exact (show False from by R2 lean_s62, lean_s63, let30, [0, 0])


