open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% GE.ge skoX let4)
  let let6 := (Not let5)
  let let7 := (binrel% LT.lt skoX let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% LT.lt let8 let1)
  let let10 := (Int.ofNat 1)
  let let11 := (binrel% HDiv.hDiv let10 (Int.ofNat 10))
  let let12 := (binrel% HMul.hMul let8 let11)
  let let13 := (binrel% HMul.hMul let2 let4)
  let let14 := (binrel% HAdd.hAdd let13 let12)
  let let15 := (binrel% HMul.hMul let8 skoX)
  let let16 := (binrel% HMul.hMul let2 skoX)
  let let17 := (binrel% HAdd.hAdd let16 let15)
  let let18 := (binrel% GE.ge let17 let14)
  let let19 := (Not let18)
  let let20 := (binrel% LT.lt let17 let14)
  let let21 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let22 := (Neg.neg let10)
  let let23 := (binrel% GE.ge (binrel% HMul.hMul let22 pi) (Neg.neg let21))
  let let24 := (binrel% LE.le pi let21)
  let let25 := (Int.ofNat 2)
  let let26 := (binrel% HDiv.hDiv let10 let25)
  let let27 := (binrel% HMul.hMul let26 pi)
  let let28 := (binrel% HMul.hMul pi let26)
  let let29 := (binrel% HMul.hMul let22 let4)
  let let30 := (binrel% GE.ge skoX let1)
  let let31 := (binrel% HMul.hMul let22 skoY)
  let let32 := (binrel% HAdd.hAdd let31 skoX)
  let let33 := (binrel% GE.ge let32 let1)
  let let34 := (binrel% LE.le skoY skoX)
  let let35 := (Neg.neg let11)
  let let36 := (binrel% GE.ge let4 let35)
  let let37 := (binrel% HAdd.hAdd let4 skoX)
  let let38 := (Int.ofNat 5)
  let let39 := (binrel% HDiv.hDiv let25 let38)
  let let40 := (Neg.neg let25)
  let let41 := (binrel% HMul.hMul let40 skoY)
  let let42 := (binrel% HAdd.hAdd pi let41)
  let let43 := (binrel% GE.ge let42 let39)
  let let44 := (binrel% HDiv.hDiv let10 let38)
  let let45 := (Neg.neg let44)
  let let46 := (binrel% HAdd.hAdd let45 let27)
  let let47 := (binrel% LE.le skoY let46)
  let let48 := (binrel% HMul.hMul let8 let44)
  let let49 := (binrel% HDiv.hDiv let8 (Rat.ofInt 5))
  let let50 := (binrel% HMul.hMul let40 let4)
  let let51 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let52 := (Eq let4 let4)
  let let53 := (binrel% HAdd.hAdd let4 let35)
  let let54 := (Eq let48 let45)
  let let55 := (binrel% HAdd.hAdd pi let4)
  let let56 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let57 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let58 := (binrel% GE.ge pi let39)
  let let59 := (Not let23)
  let let60 := (binrel% GE.ge pi let56)
  let let61 := (Not let60)
  let let62 := (binrel% GE.ge skoX let11)
  let let63 := (Not let30)
  let let64 := (And let63 (And let62 (And let61 (And let59 let58))))
  let let65 := (And True let64)
  let let66 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let67 := (binrel% LE.le let56 pi)
  let let68 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10))
  let let69 := (binrel% HMul.hMul pi let66)
  let let70 := (binrel% HAdd.hAdd let49 let69)
  let let71 := (binrel% LE.le skoY let70)
  let let72 := (binrel% LE.le pi let51)
  let let73 := (Not let72)
  let let74 := (binrel% LE.le let57 pi)
  let let75 := (Not let74)
  let let76 := (binrel% LE.le let68 skoX)
  let let77 := (Not let34)
  let let78 := (Eq skoY let4)
  let let79 := (And let78 (And let77 (And let76 (And let75 (And let73 let71)))))
  let let80 := (Not let63)
  let let81 := (binrel% LE.le let11 skoX)
  let let82 := (Not True)
  let let83 := (binrel% HMul.hMul let22 skoX)
  let let84 := (binrel% HAdd.hAdd skoX let83)
  let let85 := (Not let33)
  let let86 := (And let78 (And let85 (And let62 (And let61 (And let59 let43)))))
  let let87 := (binrel% HAdd.hAdd pi let50)
  let let88 := (binrel% GE.ge let87 let39)
  let let89 := (binrel% HAdd.hAdd let29 skoX)
  let let90 := (binrel% GE.ge let89 let1)
  let let91 := (Not let90)
  let let92 := (And let52 (And let91 (And let62 (And let61 (And let59 let88)))))
  let let93 := (Eq let39 let39)
  let let94 := (Eq pi pi)
  let let95 := (Eq let59 let59)
  let let96 := (Eq And And)
  let let97 := (Eq let61 let61)
  let let98 := (Eq let62 let62)
  let let99 := (Eq let1 let1)
  let let100 := (Eq skoX skoX)
  let let101 := (Eq let79 let86)
  let let102 := (Not let62)
  let let103 := (Or let30 let102)
  let let104 := (Or let80 let102)
  let let105 := (binrel% LE.le let15 let12)
  let let106 := (And let9 let62)
  let let107 := (binrel% LT.lt let16 let13)
  let let108 := (And let3 let7)
(Eq let3 True) → (Eq let7 let6) → (Eq let9 True) → (Eq let20 let19) → (Eq let24 let23) → (Eq let28 let27) → (Eq let29 let4) → (Eq let5 let30) → (Eq let34 let33) → (Eq let36 True) → (Eq let37 skoX) → (Eq let47 let43) → (Eq let49 let48) → (Eq let16 skoX) → (Eq let50 let4) → (Eq let51 let21) → (Eq let52 True) → (Eq let53 let35) → let54 → (Eq let55 pi) → (Eq let57 let56) → (Eq let65 let64) → (Eq let66 let26) → (Eq let13 let4) → (Eq let67 let60) → (Eq let68 let11) → (Eq let79 let79) → (Eq let80 let30) → (Eq let81 let62) → (Eq let82 False) → (Eq let12 let35) → (Eq let84 let4) → (Eq let8 let8) → (Eq let15 let83) → let79 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% GE.ge skoX let4)
  let let6 := (Not let5)
  let let7 := (binrel% LT.lt skoX let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% LT.lt let8 let1)
  let let10 := (Int.ofNat 1)
  let let11 := (binrel% HDiv.hDiv let10 (Int.ofNat 10))
  let let12 := (binrel% HMul.hMul let8 let11)
  let let13 := (binrel% HMul.hMul let2 let4)
  let let14 := (binrel% HAdd.hAdd let13 let12)
  let let15 := (binrel% HMul.hMul let8 skoX)
  let let16 := (binrel% HMul.hMul let2 skoX)
  let let17 := (binrel% HAdd.hAdd let16 let15)
  let let18 := (binrel% GE.ge let17 let14)
  let let19 := (Not let18)
  let let20 := (binrel% LT.lt let17 let14)
  let let21 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let22 := (Neg.neg let10)
  let let23 := (binrel% GE.ge (binrel% HMul.hMul let22 pi) (Neg.neg let21))
  let let24 := (binrel% LE.le pi let21)
  let let25 := (Int.ofNat 2)
  let let26 := (binrel% HDiv.hDiv let10 let25)
  let let27 := (binrel% HMul.hMul let26 pi)
  let let28 := (binrel% HMul.hMul pi let26)
  let let29 := (binrel% HMul.hMul let22 let4)
  let let30 := (binrel% GE.ge skoX let1)
  let let31 := (binrel% HMul.hMul let22 skoY)
  let let32 := (binrel% HAdd.hAdd let31 skoX)
  let let33 := (binrel% GE.ge let32 let1)
  let let34 := (binrel% LE.le skoY skoX)
  let let35 := (Neg.neg let11)
  let let36 := (binrel% GE.ge let4 let35)
  let let37 := (binrel% HAdd.hAdd let4 skoX)
  let let38 := (Int.ofNat 5)
  let let39 := (binrel% HDiv.hDiv let25 let38)
  let let40 := (Neg.neg let25)
  let let41 := (binrel% HMul.hMul let40 skoY)
  let let42 := (binrel% HAdd.hAdd pi let41)
  let let43 := (binrel% GE.ge let42 let39)
  let let44 := (binrel% HDiv.hDiv let10 let38)
  let let45 := (Neg.neg let44)
  let let46 := (binrel% HAdd.hAdd let45 let27)
  let let47 := (binrel% LE.le skoY let46)
  let let48 := (binrel% HMul.hMul let8 let44)
  let let49 := (binrel% HDiv.hDiv let8 (Rat.ofInt 5))
  let let50 := (binrel% HMul.hMul let40 let4)
  let let51 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let52 := (Eq let4 let4)
  let let53 := (binrel% HAdd.hAdd let4 let35)
  let let54 := (Eq let48 let45)
  let let55 := (binrel% HAdd.hAdd pi let4)
  let let56 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let57 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let58 := (binrel% GE.ge pi let39)
  let let59 := (Not let23)
  let let60 := (binrel% GE.ge pi let56)
  let let61 := (Not let60)
  let let62 := (binrel% GE.ge skoX let11)
  let let63 := (Not let30)
  let let64 := (And let63 (And let62 (And let61 (And let59 let58))))
  let let65 := (And True let64)
  let let66 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let67 := (binrel% LE.le let56 pi)
  let let68 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10))
  let let69 := (binrel% HMul.hMul pi let66)
  let let70 := (binrel% HAdd.hAdd let49 let69)
  let let71 := (binrel% LE.le skoY let70)
  let let72 := (binrel% LE.le pi let51)
  let let73 := (Not let72)
  let let74 := (binrel% LE.le let57 pi)
  let let75 := (Not let74)
  let let76 := (binrel% LE.le let68 skoX)
  let let77 := (Not let34)
  let let78 := (Eq skoY let4)
  let let79 := (And let78 (And let77 (And let76 (And let75 (And let73 let71)))))
  let let80 := (Not let63)
  let let81 := (binrel% LE.le let11 skoX)
  let let82 := (Not True)
  let let83 := (binrel% HMul.hMul let22 skoX)
  let let84 := (binrel% HAdd.hAdd skoX let83)
  let let85 := (Not let33)
  let let86 := (And let78 (And let85 (And let62 (And let61 (And let59 let43)))))
  let let87 := (binrel% HAdd.hAdd pi let50)
  let let88 := (binrel% GE.ge let87 let39)
  let let89 := (binrel% HAdd.hAdd let29 skoX)
  let let90 := (binrel% GE.ge let89 let1)
  let let91 := (Not let90)
  let let92 := (And let52 (And let91 (And let62 (And let61 (And let59 let88)))))
  let let93 := (Eq let39 let39)
  let let94 := (Eq pi pi)
  let let95 := (Eq let59 let59)
  let let96 := (Eq And And)
  let let97 := (Eq let61 let61)
  let let98 := (Eq let62 let62)
  let let99 := (Eq let1 let1)
  let let100 := (Eq skoX skoX)
  let let101 := (Eq let79 let86)
  let let102 := (Not let62)
  let let103 := (Or let30 let102)
  let let104 := (Or let80 let102)
  let let105 := (binrel% LE.le let15 let12)
  let let106 := (And let9 let62)
  let let107 := (binrel% LT.lt let16 let13)
  let let108 := (And let3 let7)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let9 True) => -- EVALUATE
fun lean_r3 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let29 let4) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let5 let30) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let36 True) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let37 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let47 let43) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let49 let48) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let16 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let50 let4) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let51 let21) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let52 True) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let53 let35) => -- THEORY_REWRITE_ARITH
fun lean_r18 : let54 => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let55 pi) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let57 let56) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let65 let64) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let66 let26) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let13 let4) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let67 let60) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let68 let11) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let79 let79) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let80 let30) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let81 let62) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let82 False) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let12 let35) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let84 let4) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let8 let8) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let15 let83) => -- THEORY_REWRITE_ARITH
fun lean_a34 : let79 => by
have lean_s0 : (Or let80 (Or let102 False)) :=
  (scope (fun lean_a35 : let63 =>
    (scope (fun lean_a36 : let62 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let6 let63) := by timed flipCongrArg lean_r7 [Not]
      have lean_s2 : (Eq let7 let63) := by timed Eq.trans lean_r1 lean_s1
      have lean_s3 : (Eq let63 let7) := by timed Eq.symm lean_s2
      have lean_s4 : let7 := by timed eqResolve lean_a35 lean_s3
      have lean_s5 : let108 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let108 let107) := by arithMulPos [skoX, let4, let2], 0
      have lean_s7 : let107 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let9 := by timed trueElim lean_r2
      have lean_s9 : let106 := by timed And.intro lean_s8 lean_a36
      have lean_s10 : (Implies let106 let105) := by arithMulNeg [skoX, let11, let8], 3
      have lean_s11 : let105 := by timed modusPonens lean_s9 lean_s10
      have lean_s12 : let20 := by sumBounds [lean_s7, lean_s11]
      let lean_s13 := by timed flipCongrArg lean_r13 [HAdd.hAdd]
      have lean_s14 : (Eq let17 let84) := by timed congr lean_s13 lean_r33
      have lean_s15 : (Eq let17 let4) := by timed Eq.trans lean_s14 lean_r31
      let lean_s16 := by timed flipCongrArg lean_s15 [GE.ge]
      let lean_s17 := by timed flipCongrArg lean_r23 [HAdd.hAdd]
      have lean_s18 : (Eq let14 let53) := by timed congr lean_s17 lean_r30
      have lean_s19 : (Eq let14 let35) := by timed Eq.trans lean_s18 lean_r17
      have lean_s20 : (Eq let18 let36) := by timed congr lean_s16 lean_s19
      have lean_s21 : (Eq let18 True) := by timed Eq.trans lean_s20 lean_r9
      have lean_s22 : (Eq let19 let82) := by timed flipCongrArg lean_s21 [Not]
      have lean_s23 : (Eq let19 False) := by timed Eq.trans lean_s22 lean_r29
      have lean_s24 : (Eq let20 False) := by timed Eq.trans lean_r3 lean_s23
      show False from by timed eqResolve lean_s12 lean_s24
  ))))
have lean_s1 : (Not (And let63 let62)) := by liftOrNToNeg lean_s0
have lean_s2 : let104 := by timed flipNotAnd lean_s1 [let63, let62]
let lean_s3 := by timed flipCongrArg lean_r27 [Or]
have lean_s4 : (Eq let102 let102) := by timed rfl
have lean_s5 : (Eq let104 let103) := by timed congr lean_s3 lean_s4
have lean_s6 : let103 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : let96 := by timed rfl
have lean_s8 : (Eq let78 let78) := by timed rfl
let lean_s9 := by timed congr lean_s7 lean_s8
have lean_s10 : (Eq let77 let85) := by timed flipCongrArg lean_r8 [Not]
let lean_s11 := by timed congr lean_s7 lean_s10
let lean_s12 := by timed flipCongrArg lean_r25 [LE.le]
have lean_s13 : let100 := by timed rfl
have lean_s14 : (Eq let76 let81) := by timed congr lean_s12 lean_s13
have lean_s15 : (Eq let76 let62) := by timed Eq.trans lean_s14 lean_r28
let lean_s16 := by timed congr lean_s7 lean_s15
let lean_s17 := by timed flipCongrArg lean_r20 [LE.le]
have lean_s18 : let94 := by timed rfl
have lean_s19 : (Eq let74 let67) := by timed congr lean_s17 lean_s18
have lean_s20 : (Eq let74 let60) := by timed Eq.trans lean_s19 lean_r24
have lean_s21 : (Eq let75 let61) := by timed flipCongrArg lean_s20 [Not]
let lean_s22 := by timed congr lean_s7 lean_s21
let lean_s23 := by timed flipCongrArg lean_s18 [LE.le]
have lean_s24 : (Eq let72 let24) := by timed congr lean_s23 lean_r15
have lean_s25 : (Eq let72 let23) := by timed Eq.trans lean_s24 lean_r4
have lean_s26 : (Eq let73 let59) := by timed flipCongrArg lean_s25 [Not]
let lean_s27 := by timed congr lean_s7 lean_s26
have lean_s28 : (Eq skoY skoY) := by timed rfl
let lean_s29 := by timed flipCongrArg lean_s28 [LE.le]
let lean_s30 := by timed flipCongrArg lean_r32 [HMul.hMul]
have lean_s31 : (Eq let44 let44) := by timed rfl
have lean_s32 : (Eq let48 let48) := by timed congr lean_s30 lean_s31
have lean_s33 : let54 := by timed Eq.trans lean_s32 lean_r18
have lean_s34 : (Eq let49 let45) := by timed Eq.trans lean_r12 lean_s33
let lean_s35 := by timed flipCongrArg lean_s34 [HAdd.hAdd]
let lean_s36 := by timed flipCongrArg lean_s18 [HMul.hMul]
have lean_s37 : (Eq let69 let28) := by timed congr lean_s36 lean_r22
have lean_s38 : (Eq let69 let27) := by timed Eq.trans lean_s37 lean_r5
have lean_s39 : (Eq let70 let46) := by timed congr lean_s35 lean_s38
have lean_s40 : (Eq let71 let47) := by timed congr lean_s29 lean_s39
have lean_s41 : (Eq let71 let43) := by timed Eq.trans lean_s40 lean_r11
let lean_s42 := by timed congr lean_s27 lean_s41
let lean_s43 := by timed congr lean_s22 lean_s42
let lean_s44 := by timed congr lean_s16 lean_s43
let lean_s45 := by timed congr lean_s11 lean_s44
have lean_s46 : let101 := by timed congr lean_s9 lean_s45
have lean_s47 : let101 := by timed Eq.trans lean_r26 lean_s46
have lean_s48 : let96 := by timed rfl
have lean_s49 : let86 := by timed eqResolve lean_a34 lean_s47
have lean_s50 : let78 := by andElim lean_s49, 0
let lean_s51 := by timed flipCongrArg lean_s50 [Eq]
have lean_s52 : let52 := by timed rfl
have lean_s53 : (Eq let78 let52) := by timed congr lean_s51 lean_s52
let lean_s54 := by timed congr lean_s48 lean_s53
have lean_s55 : (Eq let22 let22) := by timed rfl
let lean_s56 := by timed flipCongrArg lean_s55 [HMul.hMul]
have lean_s57 : (Eq let31 let29) := by timed congr lean_s56 lean_s50
let lean_s58 := by timed flipCongrArg lean_s57 [HAdd.hAdd]
have lean_s59 : let100 := by timed rfl
have lean_s60 : (Eq let32 let89) := by timed congr lean_s58 lean_s59
let lean_s61 := by timed flipCongrArg lean_s60 [GE.ge]
have lean_s62 : let99 := by timed rfl
have lean_s63 : (Eq let33 let90) := by timed congr lean_s61 lean_s62
have lean_s64 : (Eq let85 let91) := by timed flipCongrArg lean_s63 [Not]
let lean_s65 := by timed congr lean_s48 lean_s64
have lean_s66 : let98 := by timed rfl
let lean_s67 := by timed congr lean_s48 lean_s66
have lean_s68 : let97 := by timed rfl
let lean_s69 := by timed congr lean_s48 lean_s68
have lean_s70 : let95 := by timed rfl
let lean_s71 := by timed congr lean_s48 lean_s70
have lean_s72 : let94 := by timed rfl
let lean_s73 := by timed flipCongrArg lean_s72 [HAdd.hAdd]
have lean_s74 : (Eq let40 let40) := by timed rfl
let lean_s75 := by timed flipCongrArg lean_s74 [HMul.hMul]
have lean_s76 : (Eq let41 let50) := by timed congr lean_s75 lean_s50
have lean_s77 : (Eq let42 let87) := by timed congr lean_s73 lean_s76
let lean_s78 := by timed flipCongrArg lean_s77 [GE.ge]
have lean_s79 : let93 := by timed rfl
have lean_s80 : (Eq let43 let88) := by timed congr lean_s78 lean_s79
let lean_s81 := by timed congr lean_s71 lean_s80
let lean_s82 := by timed congr lean_s69 lean_s81
let lean_s83 := by timed congr lean_s67 lean_s82
let lean_s84 := by timed congr lean_s65 lean_s83
have lean_s85 : (Eq let86 let92) := by timed congr lean_s54 lean_s84
have lean_s86 : let96 := by timed rfl
let lean_s87 := by timed congr lean_s86 lean_r16
let lean_s88 := by timed flipCongrArg lean_r6 [HAdd.hAdd]
have lean_s89 : (Eq let89 let37) := by timed congr lean_s88 lean_s13
have lean_s90 : (Eq let89 skoX) := by timed Eq.trans lean_s89 lean_r10
let lean_s91 := by timed flipCongrArg lean_s90 [GE.ge]
have lean_s92 : let99 := by timed rfl
have lean_s93 : (Eq let90 let30) := by timed congr lean_s91 lean_s92
have lean_s94 : (Eq let91 let63) := by timed flipCongrArg lean_s93 [Not]
let lean_s95 := by timed congr lean_s86 lean_s94
have lean_s96 : let98 := by timed rfl
let lean_s97 := by timed congr lean_s86 lean_s96
have lean_s98 : let97 := by timed rfl
let lean_s99 := by timed congr lean_s86 lean_s98
have lean_s100 : let95 := by timed rfl
let lean_s101 := by timed congr lean_s86 lean_s100
let lean_s102 := by timed flipCongrArg lean_s18 [HAdd.hAdd]
have lean_s103 : (Eq let87 let55) := by timed congr lean_s102 lean_r14
have lean_s104 : (Eq let87 pi) := by timed Eq.trans lean_s103 lean_r19
let lean_s105 := by timed flipCongrArg lean_s104 [GE.ge]
have lean_s106 : let93 := by timed rfl
have lean_s107 : (Eq let88 let58) := by timed congr lean_s105 lean_s106
let lean_s108 := by timed congr lean_s101 lean_s107
let lean_s109 := by timed congr lean_s99 lean_s108
let lean_s110 := by timed congr lean_s97 lean_s109
let lean_s111 := by timed congr lean_s95 lean_s110
have lean_s112 : (Eq let92 let65) := by timed congr lean_s87 lean_s111
have lean_s113 : (Eq let92 let64) := by timed Eq.trans lean_s112 lean_r21
have lean_s114 : (Eq let86 let64) := by timed Eq.trans lean_s85 lean_s113
have lean_s115 : (Eq let79 let64) := by timed Eq.trans lean_s47 lean_s114
have lean_s116 : let64 := by timed eqResolve lean_a34 lean_s115
have lean_s117 : let62 := by andElim lean_s116, 1
let lean_s118 := by R2 lean_s6, lean_s117, let62, [(- 1), 0]
have lean_s119 : let63 := by andElim lean_s116, 0
exact (show False from by R1 lean_s118, lean_s119, let30, [0, 0])


