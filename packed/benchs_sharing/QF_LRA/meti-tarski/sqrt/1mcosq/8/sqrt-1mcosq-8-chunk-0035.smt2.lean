open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% GE.ge skoY let4)
  let let6 := (Not let5)
  let let7 := (binrel% LT.lt skoY let4)
  let let8 := (binrel% HMul.hMul let2 let4)
  let let9 := (Int.ofNat 1)
  let let10 := (binrel% HDiv.hDiv let9 (Int.ofNat 10))
  let let11 := (Neg.neg let2)
  let let12 := (binrel% HMul.hMul let11 let10)
  let let13 := (binrel% HMul.hMul let11 let4)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 let8))
  let let15 := (binrel% HMul.hMul let2 skoY)
  let let16 := (binrel% HMul.hMul let11 skoX)
  let let17 := (Neg.neg let9)
  let let18 := (binrel% HMul.hMul let17 skoX)
  let let19 := (binrel% HAdd.hAdd skoY let18)
  let let20 := (binrel% HMul.hMul let11 let19)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let16 let15))
  let let22 := (binrel% GE.ge let21 let14)
  let let23 := (Not let22)
  let let24 := (binrel% LT.lt let21 let14)
  let let25 := (binrel% HAdd.hAdd (binrel% HMul.hMul let17 skoY) skoX)
  let let26 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let18 skoY))
  let let27 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10))
  let let28 := (binrel% GE.ge skoX let10)
  let let29 := (binrel% LE.le let10 skoX)
  let let30 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let31 := (binrel% GE.ge pi let30)
  let let32 := (binrel% LE.le let30 pi)
  let let33 := (binrel% GE.ge skoY let1)
  let let34 := (Int.ofNat 5)
  let let35 := (binrel% HDiv.hDiv let9 let34)
  let let36 := (Neg.neg let35)
  let let37 := (binrel% HMul.hMul let11 let35)
  let let38 := (Eq let37 let36)
  let let39 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let40 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let41 := (binrel% LT.lt let11 let1)
  let let42 := (Neg.neg let10)
  let let43 := (binrel% GE.ge let25 let1)
  let let44 := (Not let43)
  let let45 := (Not let44)
  let let46 := (Eq let45 let43)
  let let47 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let48 := (Not True)
  let let49 := (Int.ofNat 2)
  let let50 := (binrel% HDiv.hDiv let9 let49)
  let let51 := (binrel% HMul.hMul let50 pi)
  let let52 := (binrel% HMul.hMul pi let50)
  let let53 := (binrel% LE.le skoY skoX)
  let let54 := (binrel% HDiv.hDiv let11 (Rat.ofInt 5))
  let let55 := (Eq let43 let45)
  let let56 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let49) skoY)) (binrel% HDiv.hDiv let49 let34))
  let let57 := (binrel% HAdd.hAdd let36 let51)
  let let58 := (binrel% LE.le skoY let57)
  let let59 := (Not let33)
  let let60 := (Not let59)
  let let61 := (Eq let33 let60)
  let let62 := (Eq let60 let33)
  let let63 := (binrel% LE.le let4 skoY)
  let let64 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let65 := (binrel% HMul.hMul pi let64)
  let let66 := (binrel% HAdd.hAdd let54 let65)
  let let67 := (binrel% LE.le skoY let66)
  let let68 := (binrel% LE.le pi let40)
  let let69 := (Not let68)
  let let70 := (binrel% LE.le let47 pi)
  let let71 := (Not let70)
  let let72 := (binrel% LE.le let27 skoX)
  let let73 := (Not let53)
  let let74 := (Not let63)
  let let75 := (And let74 (And let73 (And let72 (And let71 (And let69 let67)))))
  let let76 := (Eq let43 let43)
  let let77 := (Eq let33 let33)
  let let78 := (binrel% GE.ge (binrel% HMul.hMul let17 pi) (Neg.neg let39))
  let let79 := (binrel% LE.le pi let39)
  let let80 := (binrel% LE.le let19 let4)
  let let81 := (Not let80)
  let let82 := (binrel% GT.gt let19 let4)
  let let83 := (binrel% GE.ge let4 let42)
  let let84 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let42 let4))
  let let85 := (Not let78)
  let let86 := (Not let31)
  let let87 := (And let59 (And let44 (And let28 (And let86 (And let85 let56)))))
  let let88 := (Eq let75 let87)
  let let89 := (Not let28)
  let let90 := (Or let33 (Or let89 let43))
  let let91 := (Or let60 (Or let89 let45))
  let let92 := (Not let82)
  let let93 := (binrel% LT.lt let15 let8)
  let let94 := (And let3 let7)
  let let95 := (binrel% LE.le let16 let12)
  let let96 := (And let41 let28)
  let let97 := (binrel% LT.lt let20 let13)
  let let98 := (And let41 let82)
(Eq let3 True) → (Eq let7 let6) → (Eq let24 let23) → (Eq let16 let18) → (Eq let15 skoY) → (Eq let26 let4) → (Eq let27 let10) → (Eq let20 let25) → (Eq let29 let28) → (Eq let32 let31) → (Eq let5 let33) → let38 → (Eq let40 let39) → (Eq let41 True) → (Eq let12 let42) → (Eq let11 let11) → let46 → (Eq let47 let30) → (Eq let48 False) → (Eq let52 let51) → (Eq let8 let4) → (Eq let53 let43) → (Eq let54 let37) → (Eq let46 let55) → (Eq let58 let56) → (Eq let62 let61) → (Eq let63 let33) → (Eq let75 let75) → (Eq let76 True) → (Eq let77 True) → let62 → (Eq let79 let78) → (Eq let13 let4) → (Eq let80 let43) → (Eq let82 let81) → (Eq let64 let50) → (Eq let83 True) → (Eq let84 let42) → let75 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% GE.ge skoY let4)
  let let6 := (Not let5)
  let let7 := (binrel% LT.lt skoY let4)
  let let8 := (binrel% HMul.hMul let2 let4)
  let let9 := (Int.ofNat 1)
  let let10 := (binrel% HDiv.hDiv let9 (Int.ofNat 10))
  let let11 := (Neg.neg let2)
  let let12 := (binrel% HMul.hMul let11 let10)
  let let13 := (binrel% HMul.hMul let11 let4)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 let8))
  let let15 := (binrel% HMul.hMul let2 skoY)
  let let16 := (binrel% HMul.hMul let11 skoX)
  let let17 := (Neg.neg let9)
  let let18 := (binrel% HMul.hMul let17 skoX)
  let let19 := (binrel% HAdd.hAdd skoY let18)
  let let20 := (binrel% HMul.hMul let11 let19)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let16 let15))
  let let22 := (binrel% GE.ge let21 let14)
  let let23 := (Not let22)
  let let24 := (binrel% LT.lt let21 let14)
  let let25 := (binrel% HAdd.hAdd (binrel% HMul.hMul let17 skoY) skoX)
  let let26 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let18 skoY))
  let let27 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10))
  let let28 := (binrel% GE.ge skoX let10)
  let let29 := (binrel% LE.le let10 skoX)
  let let30 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let31 := (binrel% GE.ge pi let30)
  let let32 := (binrel% LE.le let30 pi)
  let let33 := (binrel% GE.ge skoY let1)
  let let34 := (Int.ofNat 5)
  let let35 := (binrel% HDiv.hDiv let9 let34)
  let let36 := (Neg.neg let35)
  let let37 := (binrel% HMul.hMul let11 let35)
  let let38 := (Eq let37 let36)
  let let39 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let40 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let41 := (binrel% LT.lt let11 let1)
  let let42 := (Neg.neg let10)
  let let43 := (binrel% GE.ge let25 let1)
  let let44 := (Not let43)
  let let45 := (Not let44)
  let let46 := (Eq let45 let43)
  let let47 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let48 := (Not True)
  let let49 := (Int.ofNat 2)
  let let50 := (binrel% HDiv.hDiv let9 let49)
  let let51 := (binrel% HMul.hMul let50 pi)
  let let52 := (binrel% HMul.hMul pi let50)
  let let53 := (binrel% LE.le skoY skoX)
  let let54 := (binrel% HDiv.hDiv let11 (Rat.ofInt 5))
  let let55 := (Eq let43 let45)
  let let56 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let49) skoY)) (binrel% HDiv.hDiv let49 let34))
  let let57 := (binrel% HAdd.hAdd let36 let51)
  let let58 := (binrel% LE.le skoY let57)
  let let59 := (Not let33)
  let let60 := (Not let59)
  let let61 := (Eq let33 let60)
  let let62 := (Eq let60 let33)
  let let63 := (binrel% LE.le let4 skoY)
  let let64 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let65 := (binrel% HMul.hMul pi let64)
  let let66 := (binrel% HAdd.hAdd let54 let65)
  let let67 := (binrel% LE.le skoY let66)
  let let68 := (binrel% LE.le pi let40)
  let let69 := (Not let68)
  let let70 := (binrel% LE.le let47 pi)
  let let71 := (Not let70)
  let let72 := (binrel% LE.le let27 skoX)
  let let73 := (Not let53)
  let let74 := (Not let63)
  let let75 := (And let74 (And let73 (And let72 (And let71 (And let69 let67)))))
  let let76 := (Eq let43 let43)
  let let77 := (Eq let33 let33)
  let let78 := (binrel% GE.ge (binrel% HMul.hMul let17 pi) (Neg.neg let39))
  let let79 := (binrel% LE.le pi let39)
  let let80 := (binrel% LE.le let19 let4)
  let let81 := (Not let80)
  let let82 := (binrel% GT.gt let19 let4)
  let let83 := (binrel% GE.ge let4 let42)
  let let84 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let42 let4))
  let let85 := (Not let78)
  let let86 := (Not let31)
  let let87 := (And let59 (And let44 (And let28 (And let86 (And let85 let56)))))
  let let88 := (Eq let75 let87)
  let let89 := (Not let28)
  let let90 := (Or let33 (Or let89 let43))
  let let91 := (Or let60 (Or let89 let45))
  let let92 := (Not let82)
  let let93 := (binrel% LT.lt let15 let8)
  let let94 := (And let3 let7)
  let let95 := (binrel% LE.le let16 let12)
  let let96 := (And let41 let28)
  let let97 := (binrel% LT.lt let20 let13)
  let let98 := (And let41 let82)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let16 let18) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let15 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let26 let4) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let27 let10) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let20 let25) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let32 let31) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let5 let33) => -- THEORY_REWRITE_ARITH
fun lean_r11 : let38 => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let40 let39) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let41 True) => -- EVALUATE
fun lean_r14 : (Eq let12 let42) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let11 let11) => -- THEORY_REWRITE_ARITH
fun lean_r16 : let46 => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let47 let30) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let48 False) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let8 let4) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let53 let43) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let54 let37) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let46 let55) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let58 let56) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let62 let61) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let63 let33) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let75 let75) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let76 True) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let77 True) => -- THEORY_REWRITE_BOOL
fun lean_r30 : let62 => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let79 let78) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let13 let4) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let80 let43) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let82 let81) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let64 let50) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let83 True) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let84 let42) => -- THEORY_REWRITE_ARITH
fun lean_a38 : let75 => by
have lean_s0 : (Or let60 (Or let89 (Or let45 False))) :=
  (scope (fun lean_a39 : let59 =>
    (scope (fun lean_a40 : let28 =>
      (scope (fun lean_a41 : let44 =>
        have lean_s0 : (Eq let81 let44) := by timed flipCongrArg lean_r33 [Not]
        have lean_s1 : (Eq let82 let44) := by timed Eq.trans lean_r34 lean_s0
        have lean_s2 : (Eq let44 let82) := by timed Eq.symm lean_s1
        have lean_s3 : let82 := by timed eqResolve lean_a41 lean_s2
        have lean_s4 : (Or let92 False) :=
          (scope (fun lean_a42 : let82 =>
            have lean_s4 : let41 := by timed trueElim lean_r13
            have lean_s5 : let98 := by timed And.intro lean_s4 lean_a42
            have lean_s6 : (Implies let98 let97) := by arithMulNeg [let19, let4, let11], 2
            have lean_s7 : let97 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let96 := by timed And.intro lean_s4 lean_a40
            have lean_s9 : (Implies let96 let95) := by arithMulNeg [skoX, let10, let11], 3
            have lean_s10 : let95 := by timed modusPonens lean_s8 lean_s9
            have lean_s11 : let3 := by timed trueElim lean_r0
            have lean_s12 : (Eq let6 let59) := by timed flipCongrArg lean_r10 [Not]
            have lean_s13 : (Eq let7 let59) := by timed Eq.trans lean_r1 lean_s12
            have lean_s14 : (Eq let59 let7) := by timed Eq.symm lean_s13
            have lean_s15 : let7 := by timed eqResolve lean_a39 lean_s14
            have lean_s16 : let94 := by timed And.intro lean_s11 lean_s15
            have lean_s17 : (Implies let94 let93) := by arithMulPos [skoY, let4, let2], 0
            have lean_s18 : let93 := by timed modusPonens lean_s16 lean_s17
            have lean_s19 : let24 := by sumBounds [lean_s7, lean_s10, lean_s18]
            let lean_s20 := by timed congrHAdd lean_r3 lean_r4
            have lean_s21 : (Eq let21 let26) := by timed congrHAdd lean_r7 lean_s20
            have lean_s22 : (Eq let21 let4) := by timed Eq.trans lean_s21 lean_r5
            let lean_s23 := by timed flipCongrArg lean_s22 [GE.ge]
            let lean_s24 := by timed congrHAdd lean_r14 lean_r20
            have lean_s25 : (Eq let14 let84) := by timed congrHAdd lean_r32 lean_s24
            have lean_s26 : (Eq let14 let42) := by timed Eq.trans lean_s25 lean_r37
            have lean_s27 : (Eq let22 let83) := by timed congr lean_s23 lean_s26
            have lean_s28 : (Eq let22 True) := by timed Eq.trans lean_s27 lean_r36
            have lean_s29 : (Eq let23 let48) := by timed flipCongrArg lean_s28 [Not]
            have lean_s30 : (Eq let23 False) := by timed Eq.trans lean_s29 lean_r18
            have lean_s31 : (Eq let24 False) := by timed Eq.trans lean_r2 lean_s30
            show False from by timed eqResolve lean_s19 lean_s31
          ))
        have lean_s5 : let92 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let92 let45) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let92 let43) := by timed Eq.trans lean_s6 lean_r16
        have lean_s8 : (Eq let43 let80) := by timed Eq.symm lean_r33
        have lean_s9 : (Eq let92 let80) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let80 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let43 let92) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let80 let92) := by timed Eq.trans lean_r33 lean_s11
        have lean_s13 : let92 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let59 (And let28 let44))) := by liftOrNToNeg lean_s0
have lean_s2 : let91 := by timed flipNotAnd lean_s1 [let59, let28, let44]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let77 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let61 let77) := by timed congr lean_s5 lean_r30
have lean_s7 : (Eq let61 True) := by timed Eq.trans lean_s6 lean_r29
have lean_s8 : (Eq let62 True) := by timed Eq.trans lean_r25 lean_s7
have lean_s9 : let62 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq let89 let89) := by timed rfl
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let76 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let55 let76) := by timed congr lean_s14 lean_r16
have lean_s16 : (Eq let55 True) := by timed Eq.trans lean_s15 lean_r28
have lean_s17 : (Eq let46 True) := by timed Eq.trans lean_r23 lean_s16
have lean_s18 : let46 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s12 lean_s18
have lean_s20 : (Eq let91 let90) := by timed congr lean_s10 lean_s19
have lean_s21 : let90 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let33 (Or let43 let89)) := by permutateOr lean_s21, [0, 2, 1], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
have lean_s24 : (Eq let74 let59) := by timed flipCongrArg lean_r26 [Not]
let lean_s25 := by timed congr lean_s23 lean_s24
have lean_s26 : (Eq let73 let44) := by timed flipCongrArg lean_r21 [Not]
let lean_s27 := by timed congr lean_s23 lean_s26
let lean_s28 := by timed flipCongrArg lean_r6 [LE.le]
have lean_s29 : (Eq skoX skoX) := by timed rfl
have lean_s30 : (Eq let72 let29) := by timed congr lean_s28 lean_s29
have lean_s31 : (Eq let72 let28) := by timed Eq.trans lean_s30 lean_r8
let lean_s32 := by timed congr lean_s23 lean_s31
let lean_s33 := by timed flipCongrArg lean_r17 [LE.le]
have lean_s34 : (Eq pi pi) := by timed rfl
have lean_s35 : (Eq let70 let32) := by timed congr lean_s33 lean_s34
have lean_s36 : (Eq let70 let31) := by timed Eq.trans lean_s35 lean_r9
have lean_s37 : (Eq let71 let86) := by timed flipCongrArg lean_s36 [Not]
let lean_s38 := by timed congr lean_s23 lean_s37
let lean_s39 := by timed flipCongrArg lean_s34 [LE.le]
have lean_s40 : (Eq let68 let79) := by timed congr lean_s39 lean_r12
have lean_s41 : (Eq let68 let78) := by timed Eq.trans lean_s40 lean_r31
have lean_s42 : (Eq let69 let85) := by timed flipCongrArg lean_s41 [Not]
let lean_s43 := by timed congr lean_s23 lean_s42
have lean_s44 : (Eq skoY skoY) := by timed rfl
let lean_s45 := by timed flipCongrArg lean_s44 [LE.le]
let lean_s46 := by timed flipCongrArg lean_r15 [HMul.hMul]
have lean_s47 : (Eq let35 let35) := by timed rfl
have lean_s48 : (Eq let37 let37) := by timed congr lean_s46 lean_s47
have lean_s49 : let38 := by timed Eq.trans lean_s48 lean_r11
have lean_s50 : (Eq let54 let36) := by timed Eq.trans lean_r22 lean_s49
let lean_s51 := by timed flipCongrArg lean_s50 [HAdd.hAdd]
let lean_s52 := by timed flipCongrArg lean_s34 [HMul.hMul]
have lean_s53 : (Eq let65 let52) := by timed congr lean_s52 lean_r35
have lean_s54 : (Eq let65 let51) := by timed Eq.trans lean_s53 lean_r19
have lean_s55 : (Eq let66 let57) := by timed congr lean_s51 lean_s54
have lean_s56 : (Eq let67 let58) := by timed congr lean_s45 lean_s55
have lean_s57 : (Eq let67 let56) := by timed Eq.trans lean_s56 lean_r24
let lean_s58 := by timed congr lean_s43 lean_s57
let lean_s59 := by timed congr lean_s38 lean_s58
let lean_s60 := by timed congr lean_s32 lean_s59
let lean_s61 := by timed congr lean_s27 lean_s60
have lean_s62 : let88 := by timed congr lean_s25 lean_s61
have lean_s63 : let88 := by timed Eq.trans lean_r27 lean_s62
have lean_s64 : let87 := by timed eqResolve lean_a38 lean_s63
have lean_s65 : let28 := by andElim lean_s64, 2
let lean_s66 := by R2 lean_s22, lean_s65, let28, [(- 1), 0]
have lean_s67 : let44 := by andElim lean_s64, 1
let lean_s68 := by R1 lean_s66, lean_s67, let43, [(- 1), 0]
have lean_s69 : let59 := by andElim lean_s64, 0
exact (show False from by R1 lean_s68, lean_s69, let33, [0, 0])


