open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% HMul.hMul let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (binrel% HDiv.hDiv let4 (Int.ofNat 10))
  let let6 := (Neg.neg let2)
  let let7 := (binrel% HMul.hMul let6 let5)
  let let8 := (binrel% HMul.hMul let6 let1)
  let let9 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let7 let3))
  let let10 := (binrel% HMul.hMul let2 skoY)
  let let11 := (binrel% HMul.hMul let6 skoX)
  let let12 := (Neg.neg let4)
  let let13 := (binrel% HMul.hMul let12 skoX)
  let let14 := (binrel% HAdd.hAdd skoY let13)
  let let15 := (binrel% HMul.hMul let6 let14)
  let let16 := (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let11 let10))
  let let17 := (binrel% GE.ge let16 let9)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let9)
  let let20 := (binrel% HMul.hMul let12 skoY)
  let let21 := (binrel% HAdd.hAdd let20 skoX)
  let let22 := (Int.ofNat 0)
  let let23 := (binrel% GT.gt let2 let22)
  let let24 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10))
  let let25 := (binrel% HDiv.hDiv let4 (Int.ofNat 5))
  let let26 := (Neg.neg let25)
  let let27 := (binrel% HMul.hMul let6 let25)
  let let28 := (Eq let27 let26)
  let let29 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let30 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let31 := (binrel% LT.lt let6 let22)
  let let32 := (binrel% HDiv.hDiv let4 (Int.ofNat 2))
  let let33 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let34 := (binrel% GE.ge (binrel% HMul.hMul let12 pi) (Neg.neg let29))
  let let35 := (binrel% LE.le pi let29)
  let let36 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let37 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let38 := (binrel% HMul.hMul let32 pi)
  let let39 := (binrel% HMul.hMul pi let32)
  let let40 := (binrel% GE.ge let21 let22)
  let let41 := (binrel% LE.le skoY skoX)
  let let42 := (Neg.neg let5)
  let let43 := (binrel% GE.ge (binrel% HAdd.hAdd let20 let38) let25)
  let let44 := (binrel% HAdd.hAdd let26 let38)
  let let45 := (binrel% LE.le skoY let44)
  let let46 := (binrel% GE.ge skoY let22)
  let let47 := (binrel% LE.le let1 skoY)
  let let48 := (binrel% GE.ge let20 let22)
  let let49 := (binrel% LE.le skoY let1)
  let let50 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let42 let1))
  let let51 := (binrel% HMul.hMul pi let33)
  let let52 := (binrel% HDiv.hDiv let6 (Rat.ofInt 5))
  let let53 := (binrel% HAdd.hAdd let52 let51)
  let let54 := (binrel% LE.le skoY let53)
  let let55 := (binrel% LE.le pi let30)
  let let56 := (Not let55)
  let let57 := (binrel% LE.le let37 pi)
  let let58 := (Not let57)
  let let59 := (binrel% LE.le let24 skoX)
  let let60 := (Not let41)
  let let61 := (Not let47)
  let let62 := (And let49 (And let61 (And let60 (And let59 (And let58 (And let56 let54))))))
  let let63 := (binrel% GE.ge pi let36)
  let let64 := (binrel% LE.le let36 pi)
  let let65 := (Eq let40 let40)
  let let66 := (Not True)
  let let67 := (Not let40)
  let let68 := (Not let67)
  let let69 := (Eq let68 let40)
  let let70 := (binrel% GE.ge skoX let5)
  let let71 := (binrel% LE.le let5 skoX)
  let let72 := (Eq let40 let68)
  let let73 := (binrel% LE.le let14 let1)
  let let74 := (Not let73)
  let let75 := (binrel% GT.gt let14 let1)
  let let76 := (binrel% GE.ge let1 let42)
  let let77 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let13 skoY))
  let let78 := (Not let34)
  let let79 := (Not let63)
  let let80 := (Not let46)
  let let81 := (And let48 (And let80 (And let67 (And let70 (And let79 (And let78 let43))))))
  let let82 := (Eq let62 let81)
  let let83 := (Not let70)
  let let84 := (Not let48)
  let let85 := (Or let84 (Or let83 let40))
  let let86 := (Or let84 (Or let83 let68))
  let let87 := (Not let75)
  let let88 := (binrel% LE.le let10 let3)
  let let89 := (And let23 let49)
  let let90 := (binrel% LE.le let11 let7)
  let let91 := (And let31 let70)
  let let92 := (binrel% LT.lt let15 let8)
  let let93 := (And let31 let75)
(Eq let19 let18) → (Eq let15 let21) → (Eq let11 let13) → (Eq let23 True) → (Eq let24 let5) → let28 → (Eq let30 let29) → (Eq let31 True) → (Eq let33 let32) → (Eq let35 let34) → (Eq let3 let1) → (Eq let37 let36) → (Eq let39 let38) → (Eq let41 let40) → (Eq let6 let6) → (Eq let7 let42) → (Eq let45 let43) → (Eq let47 let46) → (Eq let49 let48) → (Eq let50 let42) → (Eq let62 let62) → (Eq let64 let63) → (Eq let65 True) → (Eq let66 False) → let69 → (Eq let71 let70) → (Eq let69 let72) → (Eq let75 let74) → (Eq let76 True) → (Eq let52 let27) → (Eq let73 let40) → (Eq let8 let1) → (Eq let77 let1) → (Eq let10 skoY) → let62 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% HMul.hMul let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (binrel% HDiv.hDiv let4 (Int.ofNat 10))
  let let6 := (Neg.neg let2)
  let let7 := (binrel% HMul.hMul let6 let5)
  let let8 := (binrel% HMul.hMul let6 let1)
  let let9 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let7 let3))
  let let10 := (binrel% HMul.hMul let2 skoY)
  let let11 := (binrel% HMul.hMul let6 skoX)
  let let12 := (Neg.neg let4)
  let let13 := (binrel% HMul.hMul let12 skoX)
  let let14 := (binrel% HAdd.hAdd skoY let13)
  let let15 := (binrel% HMul.hMul let6 let14)
  let let16 := (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let11 let10))
  let let17 := (binrel% GE.ge let16 let9)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let9)
  let let20 := (binrel% HMul.hMul let12 skoY)
  let let21 := (binrel% HAdd.hAdd let20 skoX)
  let let22 := (Int.ofNat 0)
  let let23 := (binrel% GT.gt let2 let22)
  let let24 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10))
  let let25 := (binrel% HDiv.hDiv let4 (Int.ofNat 5))
  let let26 := (Neg.neg let25)
  let let27 := (binrel% HMul.hMul let6 let25)
  let let28 := (Eq let27 let26)
  let let29 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let30 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let31 := (binrel% LT.lt let6 let22)
  let let32 := (binrel% HDiv.hDiv let4 (Int.ofNat 2))
  let let33 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let34 := (binrel% GE.ge (binrel% HMul.hMul let12 pi) (Neg.neg let29))
  let let35 := (binrel% LE.le pi let29)
  let let36 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let37 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let38 := (binrel% HMul.hMul let32 pi)
  let let39 := (binrel% HMul.hMul pi let32)
  let let40 := (binrel% GE.ge let21 let22)
  let let41 := (binrel% LE.le skoY skoX)
  let let42 := (Neg.neg let5)
  let let43 := (binrel% GE.ge (binrel% HAdd.hAdd let20 let38) let25)
  let let44 := (binrel% HAdd.hAdd let26 let38)
  let let45 := (binrel% LE.le skoY let44)
  let let46 := (binrel% GE.ge skoY let22)
  let let47 := (binrel% LE.le let1 skoY)
  let let48 := (binrel% GE.ge let20 let22)
  let let49 := (binrel% LE.le skoY let1)
  let let50 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let42 let1))
  let let51 := (binrel% HMul.hMul pi let33)
  let let52 := (binrel% HDiv.hDiv let6 (Rat.ofInt 5))
  let let53 := (binrel% HAdd.hAdd let52 let51)
  let let54 := (binrel% LE.le skoY let53)
  let let55 := (binrel% LE.le pi let30)
  let let56 := (Not let55)
  let let57 := (binrel% LE.le let37 pi)
  let let58 := (Not let57)
  let let59 := (binrel% LE.le let24 skoX)
  let let60 := (Not let41)
  let let61 := (Not let47)
  let let62 := (And let49 (And let61 (And let60 (And let59 (And let58 (And let56 let54))))))
  let let63 := (binrel% GE.ge pi let36)
  let let64 := (binrel% LE.le let36 pi)
  let let65 := (Eq let40 let40)
  let let66 := (Not True)
  let let67 := (Not let40)
  let let68 := (Not let67)
  let let69 := (Eq let68 let40)
  let let70 := (binrel% GE.ge skoX let5)
  let let71 := (binrel% LE.le let5 skoX)
  let let72 := (Eq let40 let68)
  let let73 := (binrel% LE.le let14 let1)
  let let74 := (Not let73)
  let let75 := (binrel% GT.gt let14 let1)
  let let76 := (binrel% GE.ge let1 let42)
  let let77 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let13 skoY))
  let let78 := (Not let34)
  let let79 := (Not let63)
  let let80 := (Not let46)
  let let81 := (And let48 (And let80 (And let67 (And let70 (And let79 (And let78 let43))))))
  let let82 := (Eq let62 let81)
  let let83 := (Not let70)
  let let84 := (Not let48)
  let let85 := (Or let84 (Or let83 let40))
  let let86 := (Or let84 (Or let83 let68))
  let let87 := (Not let75)
  let let88 := (binrel% LE.le let10 let3)
  let let89 := (And let23 let49)
  let let90 := (binrel% LE.le let11 let7)
  let let91 := (And let31 let70)
  let let92 := (binrel% LT.lt let15 let8)
  let let93 := (And let31 let75)
fun lean_r0 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let15 let21) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let11 let13) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let23 True) => -- EVALUATE
fun lean_r4 : (Eq let24 let5) => -- THEORY_REWRITE_ARITH
fun lean_r5 : let28 => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let30 let29) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let31 True) => -- EVALUATE
fun lean_r8 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let3 let1) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let6 let6) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let7 let42) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let45 let43) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let47 let46) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let49 let48) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let50 let42) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let62 let62) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let64 let63) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let65 True) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let66 False) => -- THEORY_REWRITE_BOOL
fun lean_r24 : let69 => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let71 let70) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let69 let72) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let75 let74) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let76 True) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let52 let27) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let73 let40) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let8 let1) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let77 let1) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let10 skoY) => -- THEORY_REWRITE_ARITH
fun lean_a34 : let62 => by
have lean_s0 : (Or let84 (Or let83 (Or let68 False))) :=
  (scope (fun lean_a35 : let48 =>
    (scope (fun lean_a36 : let70 =>
      (scope (fun lean_a37 : let67 =>
        have lean_s0 : (Eq let74 let67) := by timed flipCongrArg lean_r30 [Not]
        have lean_s1 : (Eq let75 let67) := by timed Eq.trans lean_r27 lean_s0
        have lean_s2 : (Eq let67 let75) := by timed Eq.symm lean_s1
        have lean_s3 : let75 := by timed eqResolve lean_a37 lean_s2
        have lean_s4 : (Or let87 False) :=
          (scope (fun lean_a38 : let75 =>
            have lean_s4 : let31 := by timed trueElim lean_r7
            have lean_s5 : let93 := by timed And.intro lean_s4 lean_a38
            have lean_s6 : (Implies let93 let92) := by arithMulNeg [let14, let1, let6], 2
            have lean_s7 : let92 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let91 := by timed And.intro lean_s4 lean_a36
            have lean_s9 : (Implies let91 let90) := by arithMulNeg [skoX, let5, let6], 3
            have lean_s10 : let90 := by timed modusPonens lean_s8 lean_s9
            have lean_s11 : let23 := by timed trueElim lean_r3
            have lean_s12 : (Eq let48 let49) := by timed Eq.symm lean_r18
            have lean_s13 : let49 := by timed eqResolve lean_a35 lean_s12
            have lean_s14 : let89 := by timed And.intro lean_s11 lean_s13
            have lean_s15 : (Implies let89 let88) := by arithMulPos [skoY, let1, let2], 1
            have lean_s16 : let88 := by timed modusPonens lean_s14 lean_s15
            have lean_s17 : let19 := by sumBounds [lean_s7, lean_s10, lean_s16]
            let lean_s18 := by timed congrHAdd lean_r2 lean_r33
            have lean_s19 : (Eq let16 let77) := by timed congrHAdd lean_r1 lean_s18
            have lean_s20 : (Eq let16 let1) := by timed Eq.trans lean_s19 lean_r32
            let lean_s21 := by timed flipCongrArg lean_s20 [GE.ge]
            let lean_s22 := by timed congrHAdd lean_r15 lean_r10
            have lean_s23 : (Eq let9 let50) := by timed congrHAdd lean_r31 lean_s22
            have lean_s24 : (Eq let9 let42) := by timed Eq.trans lean_s23 lean_r19
            have lean_s25 : (Eq let17 let76) := by timed congr lean_s21 lean_s24
            have lean_s26 : (Eq let17 True) := by timed Eq.trans lean_s25 lean_r28
            have lean_s27 : (Eq let18 let66) := by timed flipCongrArg lean_s26 [Not]
            have lean_s28 : (Eq let18 False) := by timed Eq.trans lean_s27 lean_r23
            have lean_s29 : (Eq let19 False) := by timed Eq.trans lean_r0 lean_s28
            show False from by timed eqResolve lean_s17 lean_s29
          ))
        have lean_s5 : let87 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let87 let68) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let87 let40) := by timed Eq.trans lean_s6 lean_r24
        have lean_s8 : (Eq let40 let73) := by timed Eq.symm lean_r30
        have lean_s9 : (Eq let87 let73) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let73 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let40 let87) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let73 let87) := by timed Eq.trans lean_r30 lean_s11
        have lean_s13 : let87 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let48 (And let70 let67))) := by liftOrNToNeg lean_s0
have lean_s2 : let86 := by timed flipNotAnd lean_s1 [let48, let70, let67]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let84 let84) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let83 let83) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : let65 := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [Eq]
have lean_s10 : (Eq let72 let65) := by timed congr lean_s9 lean_r24
have lean_s11 : (Eq let72 True) := by timed Eq.trans lean_s10 lean_r22
have lean_s12 : (Eq let69 True) := by timed Eq.trans lean_r26 lean_s11
have lean_s13 : let69 := by timed trueElim lean_s12
let lean_s14 := by timed congr lean_s7 lean_s13
have lean_s15 : (Eq let86 let85) := by timed congr lean_s5 lean_s14
have lean_s16 : let85 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let40 (Or let84 let83)) := by permutateOr lean_s16, [2, 0, 1], (- 1)
have lean_s18 : (Eq And And) := by timed rfl
let lean_s19 := by timed congr lean_s18 lean_r18
have lean_s20 : (Eq let61 let80) := by timed flipCongrArg lean_r17 [Not]
let lean_s21 := by timed congr lean_s18 lean_s20
have lean_s22 : (Eq let60 let67) := by timed flipCongrArg lean_r13 [Not]
let lean_s23 := by timed congr lean_s18 lean_s22
let lean_s24 := by timed flipCongrArg lean_r4 [LE.le]
have lean_s25 : (Eq skoX skoX) := by timed rfl
have lean_s26 : (Eq let59 let71) := by timed congr lean_s24 lean_s25
have lean_s27 : (Eq let59 let70) := by timed Eq.trans lean_s26 lean_r25
let lean_s28 := by timed congr lean_s18 lean_s27
let lean_s29 := by timed flipCongrArg lean_r11 [LE.le]
have lean_s30 : (Eq pi pi) := by timed rfl
have lean_s31 : (Eq let57 let64) := by timed congr lean_s29 lean_s30
have lean_s32 : (Eq let57 let63) := by timed Eq.trans lean_s31 lean_r21
have lean_s33 : (Eq let58 let79) := by timed flipCongrArg lean_s32 [Not]
let lean_s34 := by timed congr lean_s18 lean_s33
let lean_s35 := by timed flipCongrArg lean_s30 [LE.le]
have lean_s36 : (Eq let55 let35) := by timed congr lean_s35 lean_r6
have lean_s37 : (Eq let55 let34) := by timed Eq.trans lean_s36 lean_r9
have lean_s38 : (Eq let56 let78) := by timed flipCongrArg lean_s37 [Not]
let lean_s39 := by timed congr lean_s18 lean_s38
have lean_s40 : (Eq skoY skoY) := by timed rfl
let lean_s41 := by timed flipCongrArg lean_s40 [LE.le]
let lean_s42 := by timed flipCongrArg lean_r14 [HMul.hMul]
have lean_s43 : (Eq let25 let25) := by timed rfl
have lean_s44 : (Eq let27 let27) := by timed congr lean_s42 lean_s43
have lean_s45 : let28 := by timed Eq.trans lean_s44 lean_r5
have lean_s46 : (Eq let52 let26) := by timed Eq.trans lean_r29 lean_s45
let lean_s47 := by timed flipCongrArg lean_s46 [HAdd.hAdd]
let lean_s48 := by timed flipCongrArg lean_s30 [HMul.hMul]
have lean_s49 : (Eq let51 let39) := by timed congr lean_s48 lean_r8
have lean_s50 : (Eq let51 let38) := by timed Eq.trans lean_s49 lean_r12
have lean_s51 : (Eq let53 let44) := by timed congr lean_s47 lean_s50
have lean_s52 : (Eq let54 let45) := by timed congr lean_s41 lean_s51
have lean_s53 : (Eq let54 let43) := by timed Eq.trans lean_s52 lean_r16
let lean_s54 := by timed congr lean_s39 lean_s53
let lean_s55 := by timed congr lean_s34 lean_s54
let lean_s56 := by timed congr lean_s28 lean_s55
let lean_s57 := by timed congr lean_s23 lean_s56
let lean_s58 := by timed congr lean_s21 lean_s57
have lean_s59 : let82 := by timed congr lean_s19 lean_s58
have lean_s60 : let82 := by timed Eq.trans lean_r20 lean_s59
have lean_s61 : let81 := by timed eqResolve lean_a34 lean_s60
have lean_s62 : let70 := by andElim lean_s61, 3
let lean_s63 := by R2 lean_s17, lean_s62, let70, [(- 1), 0]
have lean_s64 : let67 := by andElim lean_s61, 2
let lean_s65 := by R1 lean_s63, lean_s64, let40, [(- 1), 0]
have lean_s66 : let48 := by andElim lean_s61, 0
exact (show False from by R2 lean_s65, lean_s66, let48, [0, 0])


