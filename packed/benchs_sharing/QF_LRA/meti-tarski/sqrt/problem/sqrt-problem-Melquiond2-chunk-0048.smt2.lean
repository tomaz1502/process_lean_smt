open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoSXY : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoSXY : Rat}
variable {skoX : Rat}
variable {skoY : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% GE.ge skoSXY let4)
  let let6 := (Not let5)
  let let7 := (binrel% LT.lt skoSXY let4)
  let let8 := (binrel% GE.ge skoSXY let1)
  let let9 := (binrel% HMul.hMul let2 skoSXY)
  let let10 := (Neg.neg (Int.ofNat 1))
  let let11 := (binrel% HMul.hMul let10 skoSXY)
  let let12 := (binrel% HAdd.hAdd skoSXY let11)
  let let13 := (binrel% HMul.hMul let2 let4)
  let let14 := (Neg.neg let2)
  let let15 := (binrel% HMul.hMul let14 let4)
  let let16 := (binrel% HAdd.hAdd let4 let4)
  let let17 := (binrel% LE.le skoSXY let4)
  let let18 := (Not let17)
  let let19 := (binrel% GT.gt skoSXY let4)
  let let20 := (Not True)
  let let21 := (binrel% HMul.hMul let14 skoSXY)
  let let22 := (Not let8)
  let let23 := (Not let22)
  let let24 := (binrel% GE.ge let4 let4)
  let let25 := (binrel% GE.ge let11 let1)
  let let26 := (Int.ofNat 2)
  let let27 := (binrel% HDiv.hDiv (Int.ofNat 3) let26)
  let let28 := (binrel% HMul.hMul let10 skoX)
  let let29 := (binrel% GE.ge let28 (Neg.neg let27))
  let let30 := (binrel% LE.le skoX let27)
  let let31 := (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32))
  let let32 := (binrel% GE.ge skoY let31)
  let let33 := (binrel% LE.le let31 skoY)
  let let34 := (binrel% LE.le let4 skoSXY)
  let let35 := (Rat.ofInt 2)
  let let36 := (binrel% HDiv.hDiv (Rat.ofInt 3) let35)
  let let37 := (binrel% GE.ge (binrel% HMul.hMul let10 skoY) let10)
  let let38 := (binrel% LE.le skoY let2)
  let let39 := (binrel% GE.ge skoX let26)
  let let40 := (binrel% LE.le let35 skoX)
  let let41 := (Not let25)
  let let42 := (Not let41)
  let let43 := (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32))
  let let44 := (binrel% GE.ge (binrel% HAdd.hAdd let28 let11) let1)
  let let45 := (binrel% LE.le skoX let11)
  let let46 := (binrel% HAdd.hAdd let13 let15)
  let let47 := (binrel% HAdd.hAdd let9 let21)
  let let48 := (binrel% GE.ge let47 let46)
  let let49 := (Not let48)
  let let50 := (binrel% LT.lt let47 let46)
  let let51 := (binrel% LT.lt let14 let1)
  let let52 := (binrel% HMul.hMul skoSXY let14)
  let let53 := (Eq let52 let11)
  let let54 := (binrel% LE.le let43 skoY)
  let let55 := (Not let54)
  let let56 := (Not let40)
  let let57 := (binrel% LE.le skoX let36)
  let let58 := (Not let57)
  let let59 := (Not let38)
  let let60 := (binrel% LE.le skoX let52)
  let let61 := (Not let60)
  let let62 := (Not let34)
  let let63 := (And let62 (And let61 (And let59 (And let58 (And let18 (And let56 let55))))))
  let let64 := (Not let32)
  let let65 := (Not let39)
  let let66 := (Not let29)
  let let67 := (Not let37)
  let let68 := (Not let44)
  let let69 := (And let22 (And let68 (And let67 (And let66 (And let41 (And let65 let64))))))
  let let70 := (Eq let63 let69)
  let let71 := (Or let8 let25)
  let let72 := (Or let23 let42)
  let let73 := (binrel% LT.lt let21 let15)
  let let74 := (And let51 let19)
  let let75 := (binrel% LT.lt let9 let13)
  let let76 := (And let3 let7)
(Eq let3 True) → (Eq let7 let6) → (Eq let5 let8) → (Eq let9 skoSXY) → (Eq let12 let4) → (Eq let13 let4) → (Eq let15 let4) → (Eq let16 let4) → (Eq let19 let18) → (Eq let20 False) → (Eq let21 let11) → (Eq let23 let8) → (Eq let24 True) → (Eq let17 let25) → (Eq let30 let29) → (Eq let33 let32) → (Eq let34 let8) → (Eq let36 let27) → (Eq let38 let37) → (Eq let40 let39) → (Eq let42 let25) → (Eq let43 let31) → (Eq let45 let44) → (Eq let50 let49) → (Eq let14 let14) → (Eq let51 True) → let53 → (Eq let63 let63) → let63 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% GE.ge skoSXY let4)
  let let6 := (Not let5)
  let let7 := (binrel% LT.lt skoSXY let4)
  let let8 := (binrel% GE.ge skoSXY let1)
  let let9 := (binrel% HMul.hMul let2 skoSXY)
  let let10 := (Neg.neg (Int.ofNat 1))
  let let11 := (binrel% HMul.hMul let10 skoSXY)
  let let12 := (binrel% HAdd.hAdd skoSXY let11)
  let let13 := (binrel% HMul.hMul let2 let4)
  let let14 := (Neg.neg let2)
  let let15 := (binrel% HMul.hMul let14 let4)
  let let16 := (binrel% HAdd.hAdd let4 let4)
  let let17 := (binrel% LE.le skoSXY let4)
  let let18 := (Not let17)
  let let19 := (binrel% GT.gt skoSXY let4)
  let let20 := (Not True)
  let let21 := (binrel% HMul.hMul let14 skoSXY)
  let let22 := (Not let8)
  let let23 := (Not let22)
  let let24 := (binrel% GE.ge let4 let4)
  let let25 := (binrel% GE.ge let11 let1)
  let let26 := (Int.ofNat 2)
  let let27 := (binrel% HDiv.hDiv (Int.ofNat 3) let26)
  let let28 := (binrel% HMul.hMul let10 skoX)
  let let29 := (binrel% GE.ge let28 (Neg.neg let27))
  let let30 := (binrel% LE.le skoX let27)
  let let31 := (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32))
  let let32 := (binrel% GE.ge skoY let31)
  let let33 := (binrel% LE.le let31 skoY)
  let let34 := (binrel% LE.le let4 skoSXY)
  let let35 := (Rat.ofInt 2)
  let let36 := (binrel% HDiv.hDiv (Rat.ofInt 3) let35)
  let let37 := (binrel% GE.ge (binrel% HMul.hMul let10 skoY) let10)
  let let38 := (binrel% LE.le skoY let2)
  let let39 := (binrel% GE.ge skoX let26)
  let let40 := (binrel% LE.le let35 skoX)
  let let41 := (Not let25)
  let let42 := (Not let41)
  let let43 := (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32))
  let let44 := (binrel% GE.ge (binrel% HAdd.hAdd let28 let11) let1)
  let let45 := (binrel% LE.le skoX let11)
  let let46 := (binrel% HAdd.hAdd let13 let15)
  let let47 := (binrel% HAdd.hAdd let9 let21)
  let let48 := (binrel% GE.ge let47 let46)
  let let49 := (Not let48)
  let let50 := (binrel% LT.lt let47 let46)
  let let51 := (binrel% LT.lt let14 let1)
  let let52 := (binrel% HMul.hMul skoSXY let14)
  let let53 := (Eq let52 let11)
  let let54 := (binrel% LE.le let43 skoY)
  let let55 := (Not let54)
  let let56 := (Not let40)
  let let57 := (binrel% LE.le skoX let36)
  let let58 := (Not let57)
  let let59 := (Not let38)
  let let60 := (binrel% LE.le skoX let52)
  let let61 := (Not let60)
  let let62 := (Not let34)
  let let63 := (And let62 (And let61 (And let59 (And let58 (And let18 (And let56 let55))))))
  let let64 := (Not let32)
  let let65 := (Not let39)
  let let66 := (Not let29)
  let let67 := (Not let37)
  let let68 := (Not let44)
  let let69 := (And let22 (And let68 (And let67 (And let66 (And let41 (And let65 let64))))))
  let let70 := (Eq let63 let69)
  let let71 := (Or let8 let25)
  let let72 := (Or let23 let42)
  let let73 := (binrel% LT.lt let21 let15)
  let let74 := (And let51 let19)
  let let75 := (binrel% LT.lt let9 let13)
  let let76 := (And let3 let7)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let5 let8) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let9 skoSXY) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let12 let4) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let13 let4) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let15 let4) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let16 let4) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let20 False) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let21 let11) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let23 let8) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let24 True) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let17 let25) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let30 let29) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let34 let8) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let36 let27) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let38 let37) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let40 let39) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let42 let25) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let43 let31) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let14 let14) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let51 True) => -- EVALUATE
fun lean_r26 : let53 => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let63 let63) => -- THEORY_REWRITE_BOOL
fun lean_a28 : let63 => by
have lean_s0 : (Or let23 (Or let42 False)) :=
  (scope (fun lean_a29 : let22 =>
    (scope (fun lean_a30 : let41 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let6 let22) := by timed flipCongrArg lean_r2 [Not]
      have lean_s2 : (Eq let7 let22) := by timed Eq.trans lean_r1 lean_s1
      have lean_s3 : (Eq let22 let7) := by timed Eq.symm lean_s2
      have lean_s4 : let7 := by timed eqResolve lean_a29 lean_s3
      have lean_s5 : let76 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let76 let75) := by arithMulPos [skoSXY, let4, let2], 0
      have lean_s7 : let75 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let51 := by timed trueElim lean_r25
      have lean_s9 : (Eq let18 let41) := by timed flipCongrArg lean_r13 [Not]
      have lean_s10 : (Eq let19 let41) := by timed Eq.trans lean_r8 lean_s9
      have lean_s11 : (Eq let41 let19) := by timed Eq.symm lean_s10
      have lean_s12 : let19 := by timed eqResolve lean_a30 lean_s11
      have lean_s13 : let74 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let74 let73) := by arithMulNeg [skoSXY, let4, let14], 2
      have lean_s15 : let73 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let50 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r3 [HAdd.hAdd]
      have lean_s18 : (Eq let47 let12) := by timed congr lean_s17 lean_r10
      have lean_s19 : (Eq let47 let4) := by timed Eq.trans lean_s18 lean_r4
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r5 [HAdd.hAdd]
      have lean_s22 : (Eq let46 let16) := by timed congr lean_s21 lean_r6
      have lean_s23 : (Eq let46 let4) := by timed Eq.trans lean_s22 lean_r7
      have lean_s24 : (Eq let48 let24) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let48 True) := by timed Eq.trans lean_s24 lean_r12
      have lean_s26 : (Eq let49 let20) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let49 False) := by timed Eq.trans lean_s26 lean_r9
      have lean_s28 : (Eq let50 False) := by timed Eq.trans lean_r23 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let22 let41)) := by liftOrNToNeg lean_s0
have lean_s2 : let72 := by timed flipNotAnd lean_s1 [let22, let41]
let lean_s3 := by timed flipCongrArg lean_r11 [Or]
have lean_s4 : (Eq let72 let71) := by timed congr lean_s3 lean_r20
have lean_s5 : let71 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
have lean_s7 : (Eq let62 let22) := by timed flipCongrArg lean_r16 [Not]
let lean_s8 := by timed congr lean_s6 lean_s7
have lean_s9 : (Eq skoX skoX) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [LE.le]
have lean_s11 : (Eq skoSXY skoSXY) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [HMul.hMul]
have lean_s13 : (Eq let52 let52) := by timed congr lean_s12 lean_r24
have lean_s14 : let53 := by timed Eq.trans lean_s13 lean_r26
have lean_s15 : (Eq let60 let45) := by timed congr lean_s10 lean_s14
have lean_s16 : (Eq let60 let44) := by timed Eq.trans lean_s15 lean_r22
have lean_s17 : (Eq let61 let68) := by timed flipCongrArg lean_s16 [Not]
let lean_s18 := by timed congr lean_s6 lean_s17
have lean_s19 : (Eq let59 let67) := by timed flipCongrArg lean_r18 [Not]
let lean_s20 := by timed congr lean_s6 lean_s19
let lean_s21 := by timed flipCongrArg lean_s9 [LE.le]
have lean_s22 : (Eq let57 let30) := by timed congr lean_s21 lean_r17
have lean_s23 : (Eq let57 let29) := by timed Eq.trans lean_s22 lean_r14
have lean_s24 : (Eq let58 let66) := by timed flipCongrArg lean_s23 [Not]
let lean_s25 := by timed congr lean_s6 lean_s24
have lean_s26 : (Eq let18 let41) := by timed flipCongrArg lean_r13 [Not]
let lean_s27 := by timed congr lean_s6 lean_s26
have lean_s28 : (Eq let56 let65) := by timed flipCongrArg lean_r19 [Not]
let lean_s29 := by timed congr lean_s6 lean_s28
let lean_s30 := by timed flipCongrArg lean_r21 [LE.le]
have lean_s31 : (Eq skoY skoY) := by timed rfl
have lean_s32 : (Eq let54 let33) := by timed congr lean_s30 lean_s31
have lean_s33 : (Eq let54 let32) := by timed Eq.trans lean_s32 lean_r15
have lean_s34 : (Eq let55 let64) := by timed flipCongrArg lean_s33 [Not]
let lean_s35 := by timed congr lean_s29 lean_s34
let lean_s36 := by timed congr lean_s27 lean_s35
let lean_s37 := by timed congr lean_s25 lean_s36
let lean_s38 := by timed congr lean_s20 lean_s37
let lean_s39 := by timed congr lean_s18 lean_s38
have lean_s40 : let70 := by timed congr lean_s8 lean_s39
have lean_s41 : let70 := by timed Eq.trans lean_r27 lean_s40
have lean_s42 : let69 := by timed eqResolve lean_a28 lean_s41
have lean_s43 : let41 := by andElim lean_s42, 4
let lean_s44 := by R1 lean_s5, lean_s43, let25, [(- 1), 0]
have lean_s45 : let22 := by andElim lean_s42, 0
exact (show False from by R1 lean_s44, lean_s45, let8, [0, 0])


