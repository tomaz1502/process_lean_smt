open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoSXY : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoSXY : Rat}
variable {skoX : Rat}
variable {skoY : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% LE.le skoSXY let1)
  let let3 := (Not let2)
  let let4 := (binrel% GT.gt skoSXY let1)
  let let5 := (Int.ofNat 2)
  let let6 := (binrel% HDiv.hDiv (Int.ofNat 3) let5)
  let let7 := (binrel% LE.le skoX let6)
  let let8 := (Not let7)
  let let9 := (binrel% GT.gt skoX let6)
  let let10 := (binrel% HAdd.hAdd skoX skoSXY)
  let let11 := (Rat.ofInt 1)
  let let12 := (binrel% HMul.hMul let11 let10)
  let let13 := (Neg.neg (Int.ofNat 1))
  let let14 := (binrel% HMul.hMul let13 skoSXY)
  let let15 := (Neg.neg let11)
  let let16 := (binrel% HMul.hMul let15 skoSXY)
  let let17 := (binrel% HMul.hMul let13 skoX)
  let let18 := (binrel% HMul.hMul let15 skoX)
  let let19 := (binrel% GE.ge let10 let1)
  let let20 := (Not let19)
  let let21 := (binrel% LT.lt let10 let1)
  let let22 := (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32))
  let let23 := (binrel% LE.le let22 skoY)
  let let24 := (Not let23)
  let let25 := (Rat.ofInt 2)
  let let26 := (binrel% LE.le let25 skoX)
  let let27 := (Not let26)
  let let28 := (binrel% HDiv.hDiv (Rat.ofInt 3) let25)
  let let29 := (binrel% LE.le skoX let28)
  let let30 := (Not let29)
  let let31 := (binrel% LE.le skoY let11)
  let let32 := (Not let31)
  let let33 := (binrel% HMul.hMul skoSXY let15)
  let let34 := (binrel% LE.le let33 skoX)
  let let35 := (Not let34)
  let let36 := (And let35 (And let32 (And let30 (And let3 (And let27 let24)))))
  let let37 := (Eq let33 let14)
  let let38 := (binrel% HMul.hMul let15 let6)
  let let39 := (binrel% HMul.hMul let15 let1)
  let let40 := (binrel% HMul.hMul let11 let1)
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 let38))
  let let42 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let16 let18))
  let let43 := (binrel% GE.ge let42 let41)
  let let44 := (Not let43)
  let let45 := (binrel% LT.lt let42 let41)
  let let46 := (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32))
  let let47 := (Neg.neg let6)
  let let48 := (binrel% GE.ge let17 let47)
  let let49 := (Not let48)
  let let50 := (Not let49)
  let let51 := (Eq let48 let50)
  let let52 := (Eq let50 let48)
  let let53 := (Int.ofNat 0)
  let let54 := (binrel% GT.gt let11 let53)
  let let55 := (binrel% GE.ge let10 let53)
  let let56 := (Not let55)
  let let57 := (Not let56)
  let let58 := (Eq let57 let55)
  let let59 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let14 let17))
  let let60 := (binrel% GE.ge (binrel% HMul.hMul let13 skoY) let13)
  let let61 := (Eq let48 let48)
  let let62 := (Eq let55 let55)
  let let63 := (binrel% GE.ge skoY let46)
  let let64 := (binrel% LE.le let46 skoY)
  let let65 := (Not True)
  let let66 := (binrel% GE.ge let14 let53)
  let let67 := (binrel% LT.lt let15 let53)
  let let68 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let47))
  let let69 := (binrel% GE.ge skoX let5)
  let let70 := (binrel% LE.le let14 skoX)
  let let71 := (Eq let55 let57)
  let let72 := (Eq let66 let66)
  let let73 := (Not let66)
  let let74 := (Not let73)
  let let75 := (Eq let74 let66)
  let let76 := (Eq let66 let74)
  let let77 := (binrel% GE.ge let1 let47)
  let let78 := (Not let63)
  let let79 := (Not let69)
  let let80 := (Not let60)
  let let81 := (And let56 (And let80 (And let49 (And let73 (And let79 let78)))))
  let let82 := (Eq let36 let81)
  let let83 := (Or let48 (Or let66 let55))
  let let84 := (Or let50 (Or let74 let57))
  let let85 := (Not let21)
  let let86 := (binrel% LT.lt let18 let38)
  let let87 := (And let67 let9)
  let let88 := (binrel% LT.lt let16 let39)
  let let89 := (And let67 let4)
  let let90 := (binrel% LT.lt let12 let40)
  let let91 := (And let54 let21)
(Eq let4 let3) → (Eq let9 let8) → (Eq let12 let10) → (Eq let16 let14) → (Eq let18 let17) → (Eq let21 let20) → (Eq let36 let36) → let37 → (Eq let45 let44) → (Eq let15 let15) → (Eq let22 let46) → (Eq let52 let51) → (Eq let54 True) → let58 → (Eq let59 let1) → (Eq let31 let60) → (Eq let61 True) → (Eq let28 let6) → (Eq let40 let1) → (Eq let62 True) → (Eq let64 let63) → (Eq let65 False) → (Eq let38 let47) → (Eq let7 let48) → (Eq let2 let66) → (Eq let67 True) → (Eq let68 let47) → (Eq let26 let69) → (Eq let70 let55) → (Eq let58 let71) → (Eq let72 True) → let75 → (Eq let75 let76) → (Eq let77 True) → let52 → (Eq let19 let55) → (Eq let39 let1) → let36 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% LE.le skoSXY let1)
  let let3 := (Not let2)
  let let4 := (binrel% GT.gt skoSXY let1)
  let let5 := (Int.ofNat 2)
  let let6 := (binrel% HDiv.hDiv (Int.ofNat 3) let5)
  let let7 := (binrel% LE.le skoX let6)
  let let8 := (Not let7)
  let let9 := (binrel% GT.gt skoX let6)
  let let10 := (binrel% HAdd.hAdd skoX skoSXY)
  let let11 := (Rat.ofInt 1)
  let let12 := (binrel% HMul.hMul let11 let10)
  let let13 := (Neg.neg (Int.ofNat 1))
  let let14 := (binrel% HMul.hMul let13 skoSXY)
  let let15 := (Neg.neg let11)
  let let16 := (binrel% HMul.hMul let15 skoSXY)
  let let17 := (binrel% HMul.hMul let13 skoX)
  let let18 := (binrel% HMul.hMul let15 skoX)
  let let19 := (binrel% GE.ge let10 let1)
  let let20 := (Not let19)
  let let21 := (binrel% LT.lt let10 let1)
  let let22 := (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32))
  let let23 := (binrel% LE.le let22 skoY)
  let let24 := (Not let23)
  let let25 := (Rat.ofInt 2)
  let let26 := (binrel% LE.le let25 skoX)
  let let27 := (Not let26)
  let let28 := (binrel% HDiv.hDiv (Rat.ofInt 3) let25)
  let let29 := (binrel% LE.le skoX let28)
  let let30 := (Not let29)
  let let31 := (binrel% LE.le skoY let11)
  let let32 := (Not let31)
  let let33 := (binrel% HMul.hMul skoSXY let15)
  let let34 := (binrel% LE.le let33 skoX)
  let let35 := (Not let34)
  let let36 := (And let35 (And let32 (And let30 (And let3 (And let27 let24)))))
  let let37 := (Eq let33 let14)
  let let38 := (binrel% HMul.hMul let15 let6)
  let let39 := (binrel% HMul.hMul let15 let1)
  let let40 := (binrel% HMul.hMul let11 let1)
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let39 let38))
  let let42 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let16 let18))
  let let43 := (binrel% GE.ge let42 let41)
  let let44 := (Not let43)
  let let45 := (binrel% LT.lt let42 let41)
  let let46 := (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32))
  let let47 := (Neg.neg let6)
  let let48 := (binrel% GE.ge let17 let47)
  let let49 := (Not let48)
  let let50 := (Not let49)
  let let51 := (Eq let48 let50)
  let let52 := (Eq let50 let48)
  let let53 := (Int.ofNat 0)
  let let54 := (binrel% GT.gt let11 let53)
  let let55 := (binrel% GE.ge let10 let53)
  let let56 := (Not let55)
  let let57 := (Not let56)
  let let58 := (Eq let57 let55)
  let let59 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let14 let17))
  let let60 := (binrel% GE.ge (binrel% HMul.hMul let13 skoY) let13)
  let let61 := (Eq let48 let48)
  let let62 := (Eq let55 let55)
  let let63 := (binrel% GE.ge skoY let46)
  let let64 := (binrel% LE.le let46 skoY)
  let let65 := (Not True)
  let let66 := (binrel% GE.ge let14 let53)
  let let67 := (binrel% LT.lt let15 let53)
  let let68 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let47))
  let let69 := (binrel% GE.ge skoX let5)
  let let70 := (binrel% LE.le let14 skoX)
  let let71 := (Eq let55 let57)
  let let72 := (Eq let66 let66)
  let let73 := (Not let66)
  let let74 := (Not let73)
  let let75 := (Eq let74 let66)
  let let76 := (Eq let66 let74)
  let let77 := (binrel% GE.ge let1 let47)
  let let78 := (Not let63)
  let let79 := (Not let69)
  let let80 := (Not let60)
  let let81 := (And let56 (And let80 (And let49 (And let73 (And let79 let78)))))
  let let82 := (Eq let36 let81)
  let let83 := (Or let48 (Or let66 let55))
  let let84 := (Or let50 (Or let74 let57))
  let let85 := (Not let21)
  let let86 := (binrel% LT.lt let18 let38)
  let let87 := (And let67 let9)
  let let88 := (binrel% LT.lt let16 let39)
  let let89 := (And let67 let4)
  let let90 := (binrel% LT.lt let12 let40)
  let let91 := (And let54 let21)
fun lean_r0 : (Eq let4 let3) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let12 let10) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let16 let14) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let36 let36) => -- THEORY_REWRITE_BOOL
fun lean_r7 : let37 => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let15 let15) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let22 let46) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let52 let51) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let54 True) => -- EVALUATE
fun lean_r13 : let58 => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let59 let1) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let31 let60) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let61 True) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let28 let6) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let40 let1) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let62 True) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let64 let63) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let65 False) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let38 let47) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let7 let48) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let2 let66) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let67 True) => -- EVALUATE
fun lean_r26 : (Eq let68 let47) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let26 let69) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let70 let55) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let58 let71) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let72 True) => -- THEORY_REWRITE_BOOL
fun lean_r31 : let75 => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let75 let76) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let77 True) => -- THEORY_REWRITE_ARITH
fun lean_r34 : let52 => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let19 let55) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let39 let1) => -- THEORY_REWRITE_ARITH
fun lean_a37 : let36 => by
have lean_s0 : (Or let50 (Or let74 (Or let57 False))) :=
  (scope (fun lean_a38 : let49 =>
    (scope (fun lean_a39 : let73 =>
      (scope (fun lean_a40 : let56 =>
        have lean_s0 : (Eq let20 let56) := by timed flipCongrArg lean_r35 [Not]
        have lean_s1 : (Eq let21 let56) := by timed Eq.trans lean_r5 lean_s0
        have lean_s2 : (Eq let56 let21) := by timed Eq.symm lean_s1
        have lean_s3 : let21 := by timed eqResolve lean_a40 lean_s2
        have lean_s4 : (Or let85 False) :=
          (scope (fun lean_a41 : let21 =>
            have lean_s4 : let54 := by timed trueElim lean_r12
            have lean_s5 : let91 := by timed And.intro lean_s4 lean_a41
            have lean_s6 : (Implies let91 let90) := by arithMulPos [let10, let1, let11], 0
            have lean_s7 : let90 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let67 := by timed trueElim lean_r25
            have lean_s9 : (Eq let3 let73) := by timed flipCongrArg lean_r24 [Not]
            have lean_s10 : (Eq let4 let73) := by timed Eq.trans lean_r0 lean_s9
            have lean_s11 : (Eq let73 let4) := by timed Eq.symm lean_s10
            have lean_s12 : let4 := by timed eqResolve lean_a39 lean_s11
            have lean_s13 : let89 := by timed And.intro lean_s8 lean_s12
            have lean_s14 : (Implies let89 let88) := by arithMulNeg [skoSXY, let1, let15], 2
            have lean_s15 : let88 := by timed modusPonens lean_s13 lean_s14
            have lean_s16 : (Eq let8 let49) := by timed flipCongrArg lean_r23 [Not]
            have lean_s17 : (Eq let9 let49) := by timed Eq.trans lean_r1 lean_s16
            have lean_s18 : (Eq let49 let9) := by timed Eq.symm lean_s17
            have lean_s19 : let9 := by timed eqResolve lean_a38 lean_s18
            have lean_s20 : let87 := by timed And.intro lean_s8 lean_s19
            have lean_s21 : (Implies let87 let86) := by arithMulNeg [skoX, let6, let15], 2
            have lean_s22 : let86 := by timed modusPonens lean_s20 lean_s21
            have lean_s23 : let45 := by sumBounds [lean_s7, lean_s15, lean_s22]
            let lean_s24 := by timed congrHAdd lean_r3 lean_r4
            have lean_s25 : (Eq let42 let59) := by timed congrHAdd lean_r2 lean_s24
            have lean_s26 : (Eq let42 let1) := by timed Eq.trans lean_s25 lean_r14
            let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
            let lean_s28 := by timed congrHAdd lean_r36 lean_r22
            have lean_s29 : (Eq let41 let68) := by timed congrHAdd lean_r18 lean_s28
            have lean_s30 : (Eq let41 let47) := by timed Eq.trans lean_s29 lean_r26
            have lean_s31 : (Eq let43 let77) := by timed congr lean_s27 lean_s30
            have lean_s32 : (Eq let43 True) := by timed Eq.trans lean_s31 lean_r33
            have lean_s33 : (Eq let44 let65) := by timed flipCongrArg lean_s32 [Not]
            have lean_s34 : (Eq let44 False) := by timed Eq.trans lean_s33 lean_r21
            have lean_s35 : (Eq let45 False) := by timed Eq.trans lean_r8 lean_s34
            show False from by timed eqResolve lean_s23 lean_s35
          ))
        have lean_s5 : let85 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let85 let57) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let85 let55) := by timed Eq.trans lean_s6 lean_r13
        have lean_s8 : (Eq let55 let19) := by timed Eq.symm lean_r35
        have lean_s9 : (Eq let85 let19) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let19 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let55 let85) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let19 let85) := by timed Eq.trans lean_r35 lean_s11
        have lean_s13 : let85 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let49 (And let73 let56))) := by liftOrNToNeg lean_s0
have lean_s2 : let84 := by timed flipNotAnd lean_s1 [let49, let73, let56]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let61 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let51 let61) := by timed congr lean_s5 lean_r34
have lean_s7 : (Eq let51 True) := by timed Eq.trans lean_s6 lean_r16
have lean_s8 : (Eq let52 True) := by timed Eq.trans lean_r11 lean_s7
have lean_s9 : let52 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let72 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let76 let72) := by timed congr lean_s12 lean_r31
have lean_s14 : (Eq let76 True) := by timed Eq.trans lean_s13 lean_r30
have lean_s15 : (Eq let75 True) := by timed Eq.trans lean_r32 lean_s14
have lean_s16 : let75 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let62 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let71 let62) := by timed congr lean_s19 lean_r13
have lean_s21 : (Eq let71 True) := by timed Eq.trans lean_s20 lean_r19
have lean_s22 : (Eq let58 True) := by timed Eq.trans lean_r29 lean_s21
have lean_s23 : let58 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq let84 let83) := by timed congr lean_s10 lean_s24
have lean_s26 : let83 := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Or let55 (Or let48 let66)) := by permutateOr lean_s26, [2, 0, 1], (- 1)
have lean_s28 : (Eq And And) := by timed rfl
have lean_s29 : (Eq skoSXY skoSXY) := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [HMul.hMul]
have lean_s31 : (Eq let33 let33) := by timed congr lean_s30 lean_r9
have lean_s32 : let37 := by timed Eq.trans lean_s31 lean_r7
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq skoX skoX) := by timed rfl
have lean_s35 : (Eq let34 let70) := by timed congr lean_s33 lean_s34
have lean_s36 : (Eq let34 let55) := by timed Eq.trans lean_s35 lean_r28
have lean_s37 : (Eq let35 let56) := by timed flipCongrArg lean_s36 [Not]
let lean_s38 := by timed congr lean_s28 lean_s37
have lean_s39 : (Eq let32 let80) := by timed flipCongrArg lean_r15 [Not]
let lean_s40 := by timed congr lean_s28 lean_s39
let lean_s41 := by timed flipCongrArg lean_s34 [LE.le]
have lean_s42 : (Eq let29 let7) := by timed congr lean_s41 lean_r17
have lean_s43 : (Eq let29 let48) := by timed Eq.trans lean_s42 lean_r23
have lean_s44 : (Eq let30 let49) := by timed flipCongrArg lean_s43 [Not]
let lean_s45 := by timed congr lean_s28 lean_s44
have lean_s46 : (Eq let3 let73) := by timed flipCongrArg lean_r24 [Not]
let lean_s47 := by timed congr lean_s28 lean_s46
have lean_s48 : (Eq let27 let79) := by timed flipCongrArg lean_r27 [Not]
let lean_s49 := by timed congr lean_s28 lean_s48
let lean_s50 := by timed flipCongrArg lean_r10 [LE.le]
have lean_s51 : (Eq skoY skoY) := by timed rfl
have lean_s52 : (Eq let23 let64) := by timed congr lean_s50 lean_s51
have lean_s53 : (Eq let23 let63) := by timed Eq.trans lean_s52 lean_r20
have lean_s54 : (Eq let24 let78) := by timed flipCongrArg lean_s53 [Not]
let lean_s55 := by timed congr lean_s49 lean_s54
let lean_s56 := by timed congr lean_s47 lean_s55
let lean_s57 := by timed congr lean_s45 lean_s56
let lean_s58 := by timed congr lean_s40 lean_s57
have lean_s59 : let82 := by timed congr lean_s38 lean_s58
have lean_s60 : let82 := by timed Eq.trans lean_r6 lean_s59
have lean_s61 : let81 := by timed eqResolve lean_a37 lean_s60
have lean_s62 : let73 := by andElim lean_s61, 3
let lean_s63 := by R1 lean_s27, lean_s62, let66, [(- 1), 0]
have lean_s64 : let49 := by andElim lean_s61, 2
let lean_s65 := by R1 lean_s63, lean_s64, let48, [(- 1), 0]
have lean_s66 : let56 := by andElim lean_s61, 0
exact (show False from by R1 lean_s65, lean_s66, let55, [0, 0])


