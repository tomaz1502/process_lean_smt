open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoSXY : Rat}
variable {skoSXY : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoY : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 2)
  let let5 := (binrel% HDiv.hDiv (Int.ofNat 3) let4)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (Neg.neg (Int.ofNat 1))
  let let10 := (binrel% HMul.hMul let9 skoX)
  let let11 := (Neg.neg let2)
  let let12 := (binrel% HMul.hMul let11 skoX)
  let let13 := (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let4 skoSXY))
  let let14 := (binrel% GE.ge let13 let1)
  let let15 := (Eq let14 let14)
  let let16 := (Rat.ofInt 0)
  let let17 := (binrel% LE.le skoSXY let16)
  let let18 := (Not let17)
  let let19 := (binrel% GT.gt skoSXY let16)
  let let20 := (Rat.ofInt 2)
  let let21 := (Neg.neg let20)
  let let22 := (binrel% HMul.hMul let21 let16)
  let let23 := (Not let14)
  let let24 := (Not let23)
  let let25 := (Eq let24 let14)
  let let26 := (binrel% GE.ge let13 let16)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let13 let16)
  let let29 := (binrel% HMul.hMul (Neg.neg let4) skoSXY)
  let let30 := (binrel% HMul.hMul skoSXY let21)
  let let31 := (Eq let30 let29)
  let let32 := (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32))
  let let33 := (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32))
  let let34 := (Neg.neg let5)
  let let35 := (binrel% GE.ge let10 let34)
  let let36 := (Not let35)
  let let37 := (Not let36)
  let let38 := (Eq let35 let37)
  let let39 := (Eq let37 let35)
  let let40 := (binrel% HDiv.hDiv (Rat.ofInt 3) let20)
  let let41 := (binrel% LE.le let33 skoY)
  let let42 := (Not let41)
  let let43 := (binrel% LE.le let20 skoX)
  let let44 := (Not let43)
  let let45 := (binrel% LE.le skoX let40)
  let let46 := (Not let45)
  let let47 := (binrel% LE.le skoY let2)
  let let48 := (Not let47)
  let let49 := (binrel% LE.le let30 skoX)
  let let50 := (Not let49)
  let let51 := (And let50 (And let48 (And let46 (And let18 (And let44 let42)))))
  let let52 := (binrel% GE.ge skoY let32)
  let let53 := (binrel% LE.le let32 skoY)
  let let54 := (binrel% HMul.hMul let2 let13)
  let let55 := (binrel% GE.ge (binrel% HMul.hMul let9 skoSXY) let1)
  let let56 := (Not let55)
  let let57 := (Not let56)
  let let58 := (Eq let57 let55)
  let let59 := (binrel% GE.ge skoX let4)
  let let60 := (binrel% LE.le let29 skoX)
  let let61 := (Eq let14 let24)
  let let62 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let29 let10))
  let let63 := (binrel% HMul.hMul let21 skoSXY)
  let let64 := (Eq let55 let55)
  let let65 := (binrel% LT.lt let11 let1)
  let let66 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let16 let34))
  let let67 := (binrel% HMul.hMul let11 let5)
  let let68 := (binrel% HMul.hMul let2 let16)
  let let69 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let22 let67))
  let let70 := (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let63 let12))
  let let71 := (binrel% GE.ge let70 let69)
  let let72 := (Not let71)
  let let73 := (binrel% LT.lt let70 let69)
  let let74 := (Eq let55 let57)
  let let75 := (Eq let35 let35)
  let let76 := (binrel% LT.lt let21 let1)
  let let77 := (binrel% GE.ge (binrel% HMul.hMul let9 skoY) let9)
  let let78 := (Not True)
  let let79 := (binrel% GE.ge let16 let34)
  let let80 := (Not let52)
  let let81 := (Not let59)
  let let82 := (Not let77)
  let let83 := (And let23 (And let82 (And let36 (And let56 (And let81 let80)))))
  let let84 := (Eq let51 let83)
  let let85 := (Or let35 (Or let55 let14))
  let let86 := (Or let37 (Or let57 let24))
  let let87 := (Not let28)
  let let88 := (binrel% LT.lt let12 let67)
  let let89 := (And let65 let8)
  let let90 := (binrel% LT.lt let63 let22)
  let let91 := (And let76 let19)
  let let92 := (binrel% LT.lt let54 let68)
  let let93 := (And let3 let28)
(Eq let3 True) → (Eq let8 let7) → (Eq let12 let10) → (Eq let15 True) → (Eq let19 let18) → (Eq let22 let16) → let25 → (Eq let28 let27) → let31 → (Eq let21 let21) → (Eq let33 let32) → (Eq let39 let38) → (Eq let40 let5) → (Eq let51 let51) → (Eq let53 let52) → (Eq let6 let35) → (Eq let54 let13) → let58 → (Eq let43 let59) → (Eq let60 let14) → (Eq let25 let61) → (Eq let62 let16) → (Eq let63 let29) → (Eq let64 True) → (Eq let65 True) → (Eq let17 let55) → (Eq let66 let34) → (Eq let73 let72) → (Eq let58 let74) → (Eq let75 True) → let39 → (Eq let26 let14) → (Eq let76 True) → (Eq let47 let77) → (Eq let68 let16) → (Eq let78 False) → (Eq let79 True) → (Eq let67 let34) → let51 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 2)
  let let5 := (binrel% HDiv.hDiv (Int.ofNat 3) let4)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (Neg.neg (Int.ofNat 1))
  let let10 := (binrel% HMul.hMul let9 skoX)
  let let11 := (Neg.neg let2)
  let let12 := (binrel% HMul.hMul let11 skoX)
  let let13 := (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let4 skoSXY))
  let let14 := (binrel% GE.ge let13 let1)
  let let15 := (Eq let14 let14)
  let let16 := (Rat.ofInt 0)
  let let17 := (binrel% LE.le skoSXY let16)
  let let18 := (Not let17)
  let let19 := (binrel% GT.gt skoSXY let16)
  let let20 := (Rat.ofInt 2)
  let let21 := (Neg.neg let20)
  let let22 := (binrel% HMul.hMul let21 let16)
  let let23 := (Not let14)
  let let24 := (Not let23)
  let let25 := (Eq let24 let14)
  let let26 := (binrel% GE.ge let13 let16)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let13 let16)
  let let29 := (binrel% HMul.hMul (Neg.neg let4) skoSXY)
  let let30 := (binrel% HMul.hMul skoSXY let21)
  let let31 := (Eq let30 let29)
  let let32 := (binrel% HDiv.hDiv (Int.ofNat 33) (Int.ofNat 32))
  let let33 := (binrel% HDiv.hDiv (Rat.ofInt 33) (Rat.ofInt 32))
  let let34 := (Neg.neg let5)
  let let35 := (binrel% GE.ge let10 let34)
  let let36 := (Not let35)
  let let37 := (Not let36)
  let let38 := (Eq let35 let37)
  let let39 := (Eq let37 let35)
  let let40 := (binrel% HDiv.hDiv (Rat.ofInt 3) let20)
  let let41 := (binrel% LE.le let33 skoY)
  let let42 := (Not let41)
  let let43 := (binrel% LE.le let20 skoX)
  let let44 := (Not let43)
  let let45 := (binrel% LE.le skoX let40)
  let let46 := (Not let45)
  let let47 := (binrel% LE.le skoY let2)
  let let48 := (Not let47)
  let let49 := (binrel% LE.le let30 skoX)
  let let50 := (Not let49)
  let let51 := (And let50 (And let48 (And let46 (And let18 (And let44 let42)))))
  let let52 := (binrel% GE.ge skoY let32)
  let let53 := (binrel% LE.le let32 skoY)
  let let54 := (binrel% HMul.hMul let2 let13)
  let let55 := (binrel% GE.ge (binrel% HMul.hMul let9 skoSXY) let1)
  let let56 := (Not let55)
  let let57 := (Not let56)
  let let58 := (Eq let57 let55)
  let let59 := (binrel% GE.ge skoX let4)
  let let60 := (binrel% LE.le let29 skoX)
  let let61 := (Eq let14 let24)
  let let62 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let29 let10))
  let let63 := (binrel% HMul.hMul let21 skoSXY)
  let let64 := (Eq let55 let55)
  let let65 := (binrel% LT.lt let11 let1)
  let let66 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let16 let34))
  let let67 := (binrel% HMul.hMul let11 let5)
  let let68 := (binrel% HMul.hMul let2 let16)
  let let69 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let22 let67))
  let let70 := (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let63 let12))
  let let71 := (binrel% GE.ge let70 let69)
  let let72 := (Not let71)
  let let73 := (binrel% LT.lt let70 let69)
  let let74 := (Eq let55 let57)
  let let75 := (Eq let35 let35)
  let let76 := (binrel% LT.lt let21 let1)
  let let77 := (binrel% GE.ge (binrel% HMul.hMul let9 skoY) let9)
  let let78 := (Not True)
  let let79 := (binrel% GE.ge let16 let34)
  let let80 := (Not let52)
  let let81 := (Not let59)
  let let82 := (Not let77)
  let let83 := (And let23 (And let82 (And let36 (And let56 (And let81 let80)))))
  let let84 := (Eq let51 let83)
  let let85 := (Or let35 (Or let55 let14))
  let let86 := (Or let37 (Or let57 let24))
  let let87 := (Not let28)
  let let88 := (binrel% LT.lt let12 let67)
  let let89 := (And let65 let8)
  let let90 := (binrel% LT.lt let63 let22)
  let let91 := (And let76 let19)
  let let92 := (binrel% LT.lt let54 let68)
  let let93 := (And let3 let28)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let12 let10) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let15 True) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let22 let16) => -- THEORY_REWRITE_ARITH
fun lean_r6 : let25 => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r8 : let31 => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let21 let21) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let39 let38) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let40 let5) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let51 let51) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let53 let52) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let6 let35) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let54 let13) => -- THEORY_REWRITE_ARITH
fun lean_r17 : let58 => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let43 let59) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let60 let14) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let25 let61) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let62 let16) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let63 let29) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let64 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let65 True) => -- EVALUATE
fun lean_r25 : (Eq let17 let55) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let66 let34) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let73 let72) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let58 let74) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let75 True) => -- THEORY_REWRITE_BOOL
fun lean_r30 : let39 => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let26 let14) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let76 True) => -- EVALUATE
fun lean_r33 : (Eq let47 let77) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let68 let16) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let78 False) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let79 True) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let67 let34) => -- THEORY_REWRITE_ARITH
fun lean_a38 : let51 => by
have lean_s0 : (Or let37 (Or let57 (Or let24 False))) :=
  (scope (fun lean_a39 : let36 =>
    (scope (fun lean_a40 : let56 =>
      (scope (fun lean_a41 : let23 =>
        have lean_s0 : (Eq let27 let23) := by timed flipCongrArg lean_r31 [Not]
        have lean_s1 : (Eq let28 let23) := by timed Eq.trans lean_r7 lean_s0
        have lean_s2 : (Eq let23 let28) := by timed Eq.symm lean_s1
        have lean_s3 : let28 := by timed eqResolve lean_a41 lean_s2
        have lean_s4 : (Or let87 False) :=
          (scope (fun lean_a42 : let28 =>
            have lean_s4 : let3 := by timed trueElim lean_r0
            have lean_s5 : let93 := by timed And.intro lean_s4 lean_a42
            have lean_s6 : (Implies let93 let92) := by arithMulPos [let13, let16, let2], 0
            have lean_s7 : let92 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let76 := by timed trueElim lean_r32
            have lean_s9 : (Eq let18 let56) := by timed flipCongrArg lean_r25 [Not]
            have lean_s10 : (Eq let19 let56) := by timed Eq.trans lean_r4 lean_s9
            have lean_s11 : (Eq let56 let19) := by timed Eq.symm lean_s10
            have lean_s12 : let19 := by timed eqResolve lean_a40 lean_s11
            have lean_s13 : let91 := by timed And.intro lean_s8 lean_s12
            have lean_s14 : (Implies let91 let90) := by arithMulNeg [skoSXY, let16, let21], 2
            have lean_s15 : let90 := by timed modusPonens lean_s13 lean_s14
            have lean_s16 : let65 := by timed trueElim lean_r24
            have lean_s17 : (Eq let7 let36) := by timed flipCongrArg lean_r15 [Not]
            have lean_s18 : (Eq let8 let36) := by timed Eq.trans lean_r1 lean_s17
            have lean_s19 : (Eq let36 let8) := by timed Eq.symm lean_s18
            have lean_s20 : let8 := by timed eqResolve lean_a39 lean_s19
            have lean_s21 : let89 := by timed And.intro lean_s16 lean_s20
            have lean_s22 : (Implies let89 let88) := by arithMulNeg [skoX, let5, let11], 2
            have lean_s23 : let88 := by timed modusPonens lean_s21 lean_s22
            have lean_s24 : let73 := by sumBounds [lean_s7, lean_s15, lean_s23]
            let lean_s25 := by timed congrHAdd lean_r22 lean_r2
            have lean_s26 : (Eq let70 let62) := by timed congrHAdd lean_r16 lean_s25
            have lean_s27 : (Eq let70 let16) := by timed Eq.trans lean_s26 lean_r21
            let lean_s28 := by timed flipCongrArg lean_s27 [GE.ge]
            let lean_s29 := by timed congrHAdd lean_r5 lean_r37
            have lean_s30 : (Eq let69 let66) := by timed congrHAdd lean_r34 lean_s29
            have lean_s31 : (Eq let69 let34) := by timed Eq.trans lean_s30 lean_r26
            have lean_s32 : (Eq let71 let79) := by timed congr lean_s28 lean_s31
            have lean_s33 : (Eq let71 True) := by timed Eq.trans lean_s32 lean_r36
            have lean_s34 : (Eq let72 let78) := by timed flipCongrArg lean_s33 [Not]
            have lean_s35 : (Eq let72 False) := by timed Eq.trans lean_s34 lean_r35
            have lean_s36 : (Eq let73 False) := by timed Eq.trans lean_r27 lean_s35
            show False from by timed eqResolve lean_s24 lean_s36
          ))
        have lean_s5 : let87 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let87 let24) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let87 let14) := by timed Eq.trans lean_s6 lean_r6
        have lean_s8 : (Eq let14 let26) := by timed Eq.symm lean_r31
        have lean_s9 : (Eq let87 let26) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let26 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let14 let87) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let26 let87) := by timed Eq.trans lean_r31 lean_s11
        have lean_s13 : let87 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let36 (And let56 let23))) := by liftOrNToNeg lean_s0
have lean_s2 : let86 := by timed flipNotAnd lean_s1 [let36, let56, let23]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let75 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let38 let75) := by timed congr lean_s5 lean_r30
have lean_s7 : (Eq let38 True) := by timed Eq.trans lean_s6 lean_r29
have lean_s8 : (Eq let39 True) := by timed Eq.trans lean_r11 lean_s7
have lean_s9 : let39 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let64 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let74 let64) := by timed congr lean_s12 lean_r17
have lean_s14 : (Eq let74 True) := by timed Eq.trans lean_s13 lean_r23
have lean_s15 : (Eq let58 True) := by timed Eq.trans lean_r28 lean_s14
have lean_s16 : let58 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let15 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let61 let15) := by timed congr lean_s19 lean_r6
have lean_s21 : (Eq let61 True) := by timed Eq.trans lean_s20 lean_r3
have lean_s22 : (Eq let25 True) := by timed Eq.trans lean_r20 lean_s21
have lean_s23 : let25 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq let86 let85) := by timed congr lean_s10 lean_s24
have lean_s26 : let85 := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Or let14 (Or let35 let55)) := by permutateOr lean_s26, [2, 0, 1], (- 1)
have lean_s28 : (Eq And And) := by timed rfl
have lean_s29 : (Eq skoSXY skoSXY) := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [HMul.hMul]
have lean_s31 : (Eq let30 let30) := by timed congr lean_s30 lean_r9
have lean_s32 : let31 := by timed Eq.trans lean_s31 lean_r8
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq skoX skoX) := by timed rfl
have lean_s35 : (Eq let49 let60) := by timed congr lean_s33 lean_s34
have lean_s36 : (Eq let49 let14) := by timed Eq.trans lean_s35 lean_r19
have lean_s37 : (Eq let50 let23) := by timed flipCongrArg lean_s36 [Not]
let lean_s38 := by timed congr lean_s28 lean_s37
have lean_s39 : (Eq let48 let82) := by timed flipCongrArg lean_r33 [Not]
let lean_s40 := by timed congr lean_s28 lean_s39
let lean_s41 := by timed flipCongrArg lean_s34 [LE.le]
have lean_s42 : (Eq let45 let6) := by timed congr lean_s41 lean_r12
have lean_s43 : (Eq let45 let35) := by timed Eq.trans lean_s42 lean_r15
have lean_s44 : (Eq let46 let36) := by timed flipCongrArg lean_s43 [Not]
let lean_s45 := by timed congr lean_s28 lean_s44
have lean_s46 : (Eq let18 let56) := by timed flipCongrArg lean_r25 [Not]
let lean_s47 := by timed congr lean_s28 lean_s46
have lean_s48 : (Eq let44 let81) := by timed flipCongrArg lean_r18 [Not]
let lean_s49 := by timed congr lean_s28 lean_s48
let lean_s50 := by timed flipCongrArg lean_r10 [LE.le]
have lean_s51 : (Eq skoY skoY) := by timed rfl
have lean_s52 : (Eq let41 let53) := by timed congr lean_s50 lean_s51
have lean_s53 : (Eq let41 let52) := by timed Eq.trans lean_s52 lean_r14
have lean_s54 : (Eq let42 let80) := by timed flipCongrArg lean_s53 [Not]
let lean_s55 := by timed congr lean_s49 lean_s54
let lean_s56 := by timed congr lean_s47 lean_s55
let lean_s57 := by timed congr lean_s45 lean_s56
let lean_s58 := by timed congr lean_s40 lean_s57
have lean_s59 : let84 := by timed congr lean_s38 lean_s58
have lean_s60 : let84 := by timed Eq.trans lean_r13 lean_s59
have lean_s61 : let83 := by timed eqResolve lean_a38 lean_s60
have lean_s62 : let56 := by andElim lean_s61, 3
let lean_s63 := by R1 lean_s27, lean_s62, let55, [(- 1), 0]
have lean_s64 : let36 := by andElim lean_s61, 2
let lean_s65 := by R1 lean_s63, lean_s64, let35, [(- 1), 0]
have lean_s66 : let23 := by andElim lean_s61, 0
exact (show False from by R1 lean_s65, lean_s66, let14, [0, 0])


