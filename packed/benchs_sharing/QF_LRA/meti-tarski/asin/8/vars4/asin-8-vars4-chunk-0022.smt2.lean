open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoSP : Rat}
variable {skoSM : Rat}
variable {skoS2 : Rat}
variable {skoSP : Rat}
variable {skoSM : Rat}
variable {skoS2 : Rat}
variable {skoX : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% LE.le skoSM let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoSM let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% LT.lt let8 let1)
  let let10 := (binrel% LE.le skoSP let4)
  let let11 := (Not let10)
  let let12 := (binrel% GT.gt skoSP let4)
  let let13 := (binrel% HAdd.hAdd skoSP skoSM)
  let let14 := (binrel% HMul.hMul let2 let13)
  let let15 := (Int.ofNat 1)
  let let16 := (Neg.neg let15)
  let let17 := (binrel% HMul.hMul let16 skoSM)
  let let18 := (binrel% HMul.hMul let8 skoSM)
  let let19 := (Neg.neg (Int.ofNat 4))
  let let20 := (binrel% GE.ge let13 let19)
  let let21 := (Eq let20 let20)
  let let22 := (Not True)
  let let23 := (binrel% HMul.hMul let8 let4)
  let let24 := (binrel% HMul.hMul skoSM let8)
  let let25 := (Eq let24 let17)
  let let26 := (binrel% GE.ge (binrel% HMul.hMul let16 skoX) let1)
  let let27 := (binrel% LE.le skoX let4)
  let let28 := (binrel% HAdd.hAdd let19 let17)
  let let29 := (binrel% LE.le let28 skoSP)
  let let30 := (Neg.neg (Rat.ofInt 4))
  let let31 := (binrel% HMul.hMul let2 let30)
  let let32 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let23 let23))
  let let33 := (binrel% HMul.hMul let8 skoSP)
  let let34 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let18 let33))
  let let35 := (binrel% GE.ge let34 let32)
  let let36 := (Not let35)
  let let37 := (binrel% LT.lt let34 let32)
  let let38 := (binrel% HAdd.hAdd let30 let17)
  let let39 := (binrel% HMul.hMul let16 skoSP)
  let let40 := (binrel% GE.ge let39 let1)
  let let41 := (Not let20)
  let let42 := (Not let41)
  let let43 := (Eq let42 let20)
  let let44 := (binrel% GE.ge let13 let30)
  let let45 := (Not let44)
  let let46 := (binrel% LT.lt let13 let30)
  let let47 := (binrel% GE.ge (binrel% HMul.hMul let16 skoS2) let1)
  let let48 := (binrel% LE.le skoS2 let4)
  let let49 := (binrel% LE.le let2 skoX)
  let let50 := (Not let49)
  let let51 := (Not let48)
  let let52 := (Not let27)
  let let53 := (binrel% HAdd.hAdd let30 let24)
  let let54 := (binrel% LE.le let53 skoSP)
  let let55 := (Not let54)
  let let56 := (And let55 (And let52 (And let11 (And let6 (And let51 let50)))))
  let let57 := (binrel% GE.ge skoX let15)
  let let58 := (Eq let20 let42)
  let let59 := (binrel% GE.ge let17 let1)
  let let60 := (Eq let59 let59)
  let let61 := (Not let59)
  let let62 := (Not let61)
  let let63 := (Eq let62 let59)
  let let64 := (Eq let59 let62)
  let let65 := (Eq let40 let40)
  let let66 := (binrel% GE.ge let4 let30)
  let let67 := (Not let40)
  let let68 := (Not let67)
  let let69 := (Eq let68 let40)
  let let70 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let17 let39))
  let let71 := (Eq let40 let68)
  let let72 := (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let4 let4))
  let let73 := (Not let57)
  let let74 := (Not let47)
  let let75 := (Not let26)
  let let76 := (And let41 (And let75 (And let67 (And let61 (And let74 let73)))))
  let let77 := (Eq let56 let76)
  let let78 := (Or let40 (Or let59 let20))
  let let79 := (Or let68 (Or let62 let42))
  let let80 := (Not let46)
  let let81 := (binrel% LT.lt let33 let23)
  let let82 := (And let9 let12)
  let let83 := (binrel% LT.lt let18 let23)
  let let84 := (And let9 let7)
  let let85 := (binrel% LT.lt let14 let31)
  let let86 := (And let3 let46)
(Eq let3 True) → (Eq let7 let6) → (Eq let9 True) → (Eq let12 let11) → (Eq let14 let13) → (Eq let18 let17) → (Eq let21 True) → (Eq let22 False) → (Eq let23 let4) → let25 → (Eq let27 let26) → (Eq let29 let20) → (Eq let37 let36) → (Eq let8 let8) → (Eq let38 let28) → (Eq let10 let40) → let43 → (Eq let46 let45) → (Eq let48 let47) → (Eq let31 let30) → (Eq let56 let56) → (Eq let49 let57) → (Eq let43 let58) → (Eq let60 True) → let63 → (Eq let30 let30) → (Eq let63 let64) → (Eq let65 True) → (Eq let66 True) → (Eq let5 let59) → let69 → (Eq let44 let20) → (Eq let70 let4) → (Eq let69 let71) → (Eq let72 let30) → (Eq let33 let39) → let56 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% LE.le skoSM let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoSM let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% LT.lt let8 let1)
  let let10 := (binrel% LE.le skoSP let4)
  let let11 := (Not let10)
  let let12 := (binrel% GT.gt skoSP let4)
  let let13 := (binrel% HAdd.hAdd skoSP skoSM)
  let let14 := (binrel% HMul.hMul let2 let13)
  let let15 := (Int.ofNat 1)
  let let16 := (Neg.neg let15)
  let let17 := (binrel% HMul.hMul let16 skoSM)
  let let18 := (binrel% HMul.hMul let8 skoSM)
  let let19 := (Neg.neg (Int.ofNat 4))
  let let20 := (binrel% GE.ge let13 let19)
  let let21 := (Eq let20 let20)
  let let22 := (Not True)
  let let23 := (binrel% HMul.hMul let8 let4)
  let let24 := (binrel% HMul.hMul skoSM let8)
  let let25 := (Eq let24 let17)
  let let26 := (binrel% GE.ge (binrel% HMul.hMul let16 skoX) let1)
  let let27 := (binrel% LE.le skoX let4)
  let let28 := (binrel% HAdd.hAdd let19 let17)
  let let29 := (binrel% LE.le let28 skoSP)
  let let30 := (Neg.neg (Rat.ofInt 4))
  let let31 := (binrel% HMul.hMul let2 let30)
  let let32 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let23 let23))
  let let33 := (binrel% HMul.hMul let8 skoSP)
  let let34 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let18 let33))
  let let35 := (binrel% GE.ge let34 let32)
  let let36 := (Not let35)
  let let37 := (binrel% LT.lt let34 let32)
  let let38 := (binrel% HAdd.hAdd let30 let17)
  let let39 := (binrel% HMul.hMul let16 skoSP)
  let let40 := (binrel% GE.ge let39 let1)
  let let41 := (Not let20)
  let let42 := (Not let41)
  let let43 := (Eq let42 let20)
  let let44 := (binrel% GE.ge let13 let30)
  let let45 := (Not let44)
  let let46 := (binrel% LT.lt let13 let30)
  let let47 := (binrel% GE.ge (binrel% HMul.hMul let16 skoS2) let1)
  let let48 := (binrel% LE.le skoS2 let4)
  let let49 := (binrel% LE.le let2 skoX)
  let let50 := (Not let49)
  let let51 := (Not let48)
  let let52 := (Not let27)
  let let53 := (binrel% HAdd.hAdd let30 let24)
  let let54 := (binrel% LE.le let53 skoSP)
  let let55 := (Not let54)
  let let56 := (And let55 (And let52 (And let11 (And let6 (And let51 let50)))))
  let let57 := (binrel% GE.ge skoX let15)
  let let58 := (Eq let20 let42)
  let let59 := (binrel% GE.ge let17 let1)
  let let60 := (Eq let59 let59)
  let let61 := (Not let59)
  let let62 := (Not let61)
  let let63 := (Eq let62 let59)
  let let64 := (Eq let59 let62)
  let let65 := (Eq let40 let40)
  let let66 := (binrel% GE.ge let4 let30)
  let let67 := (Not let40)
  let let68 := (Not let67)
  let let69 := (Eq let68 let40)
  let let70 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let17 let39))
  let let71 := (Eq let40 let68)
  let let72 := (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let4 let4))
  let let73 := (Not let57)
  let let74 := (Not let47)
  let let75 := (Not let26)
  let let76 := (And let41 (And let75 (And let67 (And let61 (And let74 let73)))))
  let let77 := (Eq let56 let76)
  let let78 := (Or let40 (Or let59 let20))
  let let79 := (Or let68 (Or let62 let42))
  let let80 := (Not let46)
  let let81 := (binrel% LT.lt let33 let23)
  let let82 := (And let9 let12)
  let let83 := (binrel% LT.lt let18 let23)
  let let84 := (And let9 let7)
  let let85 := (binrel% LT.lt let14 let31)
  let let86 := (And let3 let46)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let9 True) => -- EVALUATE
fun lean_r3 : (Eq let12 let11) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let14 let13) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let21 True) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let22 False) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let23 let4) => -- THEORY_REWRITE_ARITH
fun lean_r9 : let25 => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let29 let20) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let8 let8) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let38 let28) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let10 let40) => -- THEORY_REWRITE_ARITH
fun lean_r16 : let43 => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let46 let45) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let48 let47) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let56 let56) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let49 let57) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let43 let58) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let60 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : let63 => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let30 let30) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let63 let64) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let65 True) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let66 True) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let5 let59) => -- THEORY_REWRITE_ARITH
fun lean_r30 : let69 => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let44 let20) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let70 let4) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let69 let71) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let72 let30) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let33 let39) => -- THEORY_REWRITE_ARITH
fun lean_a36 : let56 => by
have lean_s0 : (Or let68 (Or let62 (Or let42 False))) :=
  (scope (fun lean_a37 : let67 =>
    (scope (fun lean_a38 : let61 =>
      (scope (fun lean_a39 : let41 =>
        have lean_s0 : (Eq let45 let41) := by timed flipCongrArg lean_r31 [Not]
        have lean_s1 : (Eq let46 let41) := by timed Eq.trans lean_r17 lean_s0
        have lean_s2 : (Eq let41 let46) := by timed Eq.symm lean_s1
        have lean_s3 : let46 := by timed eqResolve lean_a39 lean_s2
        have lean_s4 : (Or let80 False) :=
          (scope (fun lean_a40 : let46 =>
            have lean_s4 : let3 := by timed trueElim lean_r0
            have lean_s5 : let86 := by timed And.intro lean_s4 lean_a40
            have lean_s6 : (Implies let86 let85) := by arithMulPos [let13, let30, let2], 0
            have lean_s7 : let85 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let9 := by timed trueElim lean_r2
            have lean_s9 : (Eq let6 let61) := by timed flipCongrArg lean_r29 [Not]
            have lean_s10 : (Eq let7 let61) := by timed Eq.trans lean_r1 lean_s9
            have lean_s11 : (Eq let61 let7) := by timed Eq.symm lean_s10
            have lean_s12 : let7 := by timed eqResolve lean_a38 lean_s11
            have lean_s13 : let84 := by timed And.intro lean_s8 lean_s12
            have lean_s14 : (Implies let84 let83) := by arithMulNeg [skoSM, let4, let8], 2
            have lean_s15 : let83 := by timed modusPonens lean_s13 lean_s14
            have lean_s16 : (Eq let11 let67) := by timed flipCongrArg lean_r15 [Not]
            have lean_s17 : (Eq let12 let67) := by timed Eq.trans lean_r3 lean_s16
            have lean_s18 : (Eq let67 let12) := by timed Eq.symm lean_s17
            have lean_s19 : let12 := by timed eqResolve lean_a37 lean_s18
            have lean_s20 : let82 := by timed And.intro lean_s8 lean_s19
            have lean_s21 : (Implies let82 let81) := by arithMulNeg [skoSP, let4, let8], 2
            have lean_s22 : let81 := by timed modusPonens lean_s20 lean_s21
            have lean_s23 : let37 := by sumBounds [lean_s7, lean_s15, lean_s22]
            let lean_s24 := by timed congrHAdd lean_r5 lean_r35
            have lean_s25 : (Eq let34 let70) := by timed congrHAdd lean_r4 lean_s24
            have lean_s26 : (Eq let34 let4) := by timed Eq.trans lean_s25 lean_r32
            let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
            let lean_s28 := by timed congrHAdd lean_r8 lean_r8
            have lean_s29 : (Eq let32 let72) := by timed congrHAdd lean_r19 lean_s28
            have lean_s30 : (Eq let32 let30) := by timed Eq.trans lean_s29 lean_r34
            have lean_s31 : (Eq let35 let66) := by timed congr lean_s27 lean_s30
            have lean_s32 : (Eq let35 True) := by timed Eq.trans lean_s31 lean_r28
            have lean_s33 : (Eq let36 let22) := by timed flipCongrArg lean_s32 [Not]
            have lean_s34 : (Eq let36 False) := by timed Eq.trans lean_s33 lean_r7
            have lean_s35 : (Eq let37 False) := by timed Eq.trans lean_r12 lean_s34
            show False from by timed eqResolve lean_s23 lean_s35
          ))
        have lean_s5 : let80 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let80 let42) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let80 let20) := by timed Eq.trans lean_s6 lean_r16
        have lean_s8 : (Eq let20 let44) := by timed Eq.symm lean_r31
        have lean_s9 : (Eq let80 let44) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let44 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let20 let80) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let44 let80) := by timed Eq.trans lean_r31 lean_s11
        have lean_s13 : let80 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let67 (And let61 let41))) := by liftOrNToNeg lean_s0
have lean_s2 : let79 := by timed flipNotAnd lean_s1 [let67, let61, let41]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let65 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let71 let65) := by timed congr lean_s5 lean_r30
have lean_s7 : (Eq let71 True) := by timed Eq.trans lean_s6 lean_r27
have lean_s8 : (Eq let69 True) := by timed Eq.trans lean_r33 lean_s7
have lean_s9 : let69 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let60 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let64 let60) := by timed congr lean_s12 lean_r24
have lean_s14 : (Eq let64 True) := by timed Eq.trans lean_s13 lean_r23
have lean_s15 : (Eq let63 True) := by timed Eq.trans lean_r26 lean_s14
have lean_s16 : let63 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let21 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let58 let21) := by timed congr lean_s19 lean_r16
have lean_s21 : (Eq let58 True) := by timed Eq.trans lean_s20 lean_r6
have lean_s22 : (Eq let43 True) := by timed Eq.trans lean_r22 lean_s21
have lean_s23 : let43 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq let79 let78) := by timed congr lean_s10 lean_s24
have lean_s26 : let78 := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Or let20 (Or let40 let59)) := by permutateOr lean_s26, [2, 0, 1], (- 1)
have lean_s28 : (Eq And And) := by timed rfl
let lean_s29 := by timed flipCongrArg lean_r25 [HAdd.hAdd]
have lean_s30 : (Eq skoSM skoSM) := by timed rfl
let lean_s31 := by timed flipCongrArg lean_s30 [HMul.hMul]
have lean_s32 : (Eq let24 let24) := by timed congr lean_s31 lean_r13
have lean_s33 : let25 := by timed Eq.trans lean_s32 lean_r9
have lean_s34 : (Eq let53 let38) := by timed congr lean_s29 lean_s33
have lean_s35 : (Eq let53 let28) := by timed Eq.trans lean_s34 lean_r14
let lean_s36 := by timed flipCongrArg lean_s35 [LE.le]
have lean_s37 : (Eq skoSP skoSP) := by timed rfl
have lean_s38 : (Eq let54 let29) := by timed congr lean_s36 lean_s37
have lean_s39 : (Eq let54 let20) := by timed Eq.trans lean_s38 lean_r11
have lean_s40 : (Eq let55 let41) := by timed flipCongrArg lean_s39 [Not]
let lean_s41 := by timed congr lean_s28 lean_s40
have lean_s42 : (Eq let52 let75) := by timed flipCongrArg lean_r10 [Not]
let lean_s43 := by timed congr lean_s28 lean_s42
have lean_s44 : (Eq let11 let67) := by timed flipCongrArg lean_r15 [Not]
let lean_s45 := by timed congr lean_s28 lean_s44
have lean_s46 : (Eq let6 let61) := by timed flipCongrArg lean_r29 [Not]
let lean_s47 := by timed congr lean_s28 lean_s46
have lean_s48 : (Eq let51 let74) := by timed flipCongrArg lean_r18 [Not]
let lean_s49 := by timed congr lean_s28 lean_s48
have lean_s50 : (Eq let50 let73) := by timed flipCongrArg lean_r21 [Not]
let lean_s51 := by timed congr lean_s49 lean_s50
let lean_s52 := by timed congr lean_s47 lean_s51
let lean_s53 := by timed congr lean_s45 lean_s52
let lean_s54 := by timed congr lean_s43 lean_s53
have lean_s55 : let77 := by timed congr lean_s41 lean_s54
have lean_s56 : let77 := by timed Eq.trans lean_r20 lean_s55
have lean_s57 : let76 := by timed eqResolve lean_a36 lean_s56
have lean_s58 : let61 := by andElim lean_s57, 3
let lean_s59 := by R1 lean_s27, lean_s58, let59, [(- 1), 0]
have lean_s60 : let67 := by andElim lean_s57, 2
let lean_s61 := by R1 lean_s59, lean_s60, let40, [(- 1), 0]
have lean_s62 : let41 := by andElim lean_s57, 0
exact (show False from by R1 lean_s61, lean_s62, let20, [0, 0])


