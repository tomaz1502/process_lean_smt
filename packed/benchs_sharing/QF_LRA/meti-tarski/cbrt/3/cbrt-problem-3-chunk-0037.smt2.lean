open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Neg.neg let2)
  let let5 := (binrel% LT.lt let4 let1)
  let let6 := (Int.ofNat 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 skoZ)
  let let9 := (binrel% HMul.hMul let4 skoZ)
  let let10 := (Rat.ofInt 0)
  let let11 := (binrel% HMul.hMul let7 skoY)
  let let12 := (binrel% HMul.hMul let7 skoX)
  let let13 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let11 let8)))
  let let15 := (Int.ofNat 5)
  let let16 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 32) let15))
  let let17 := (binrel% HMul.hMul let2 let16)
  let let18 := (binrel% HMul.hMul let4 let10)
  let let19 := (binrel% LE.le skoZ let10)
  let let20 := (Not let19)
  let let21 := (binrel% GT.gt skoZ let10)
  let let22 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let10 let10)))
  let let23 := (binrel% GE.ge let10 let16)
  let let24 := (binrel% HDiv.hDiv let6 let15)
  let let25 := (Neg.neg (Rat.ofInt 32))
  let let26 := (binrel% HMul.hMul let25 let24)
  let let27 := (Eq let26 let16)
  let let28 := (binrel% HMul.hMul skoX let4)
  let let29 := (Eq let28 let12)
  let let30 := (binrel% GE.ge let13 let16)
  let let31 := (Not let30)
  let let32 := (Not let31)
  let let33 := (Eq let32 let30)
  let let34 := (binrel% HAdd.hAdd let11 let12)
  let let35 := (binrel% HAdd.hAdd let16 let34)
  let let36 := (binrel% HAdd.hAdd let12 let11)
  let let37 := (binrel% HAdd.hAdd let16 let36)
  let let38 := (binrel% GE.ge let8 let1)
  let let39 := (Not let38)
  let let40 := (Not let39)
  let let41 := (Eq let38 let40)
  let let42 := (Eq let40 let38)
  let let43 := (binrel% HMul.hMul let4 skoY)
  let let44 := (binrel% HMul.hMul skoY let4)
  let let45 := (Eq let44 let11)
  let let46 := (binrel% HAdd.hAdd let28 let44)
  let let47 := (binrel% HAdd.hAdd let2 let46)
  let let48 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let28) let44)
  let let49 := (binrel% HAdd.hAdd let6 let34)
  let let50 := (binrel% HAdd.hAdd let2 let36)
  let let51 := (binrel% GE.ge let13 let6)
  let let52 := (binrel% LE.le let49 skoZ)
  let let53 := (binrel% LE.le skoX let10)
  let let54 := (Not let53)
  let let55 := (binrel% GT.gt skoX let10)
  let let56 := (binrel% GE.ge let12 let1)
  let let57 := (Not let56)
  let let58 := (Not let57)
  let let59 := (Eq let58 let56)
  let let60 := (binrel% HDiv.hDiv let25 (Rat.ofInt 5))
  let let61 := (binrel% HAdd.hAdd let60 let46)
  let let62 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let60 let28) let44)
  let let63 := (binrel% GE.ge let11 let1)
  let let64 := (binrel% LE.le skoY let10)
  let let65 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let18 let18)))
  let let66 := (binrel% HMul.hMul let4 skoX)
  let let67 := (binrel% HMul.hMul let2 let13)
  let let68 := (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let43 let9)))
  let let69 := (binrel% GE.ge let68 let65)
  let let70 := (Not let69)
  let let71 := (binrel% LT.lt let68 let65)
  let let72 := (Not True)
  let let73 := (Not let63)
  let let74 := (Not let73)
  let let75 := (Eq let63 let74)
  let let76 := (Eq let74 let63)
  let let77 := (Not let64)
  let let78 := (binrel% GT.gt skoY let10)
  let let79 := (Eq let30 let32)
  let let80 := (binrel% LE.le let48 skoZ)
  let let81 := (Not let80)
  let let82 := (binrel% LE.le let62 skoZ)
  let let83 := (Not let82)
  let let84 := (And let83 (And let81 (And let20 (And let77 let54))))
  let let85 := (binrel% LT.lt let13 let16)
  let let86 := (Eq let30 let30)
  let let87 := (Eq let56 let56)
  let let88 := (Eq let56 let58)
  let let89 := (Eq let63 let63)
  let let90 := (binrel% LE.le let35 skoZ)
  let let91 := (Eq let38 let38)
  let let92 := (Not let51)
  let let93 := (And let31 (And let92 (And let39 (And let73 let57))))
  let let94 := (Eq let84 let93)
  let let95 := (Or let38 (Or let63 (Or let56 let30)))
  let let96 := (Or let40 (Or let74 (Or let58 let32)))
  let let97 := (Not let85)
  let let98 := (binrel% LT.lt let9 let18)
  let let99 := (And let5 let21)
  let let100 := (binrel% LT.lt let43 let18)
  let let101 := (And let5 let78)
  let let102 := (binrel% LT.lt let66 let18)
  let let103 := (And let5 let55)
  let let104 := (binrel% LT.lt let67 let17)
  let let105 := (And let3 let85)
(Eq let3 True) → (Eq let5 True) → (Eq let9 let8) → (Eq let14 let10) → (Eq let17 let16) → (Eq let18 let10) → (Eq let21 let20) → (Eq let22 let16) → (Eq let23 True) → let27 → let29 → (Eq let25 let25) → let33 → (Eq let37 let35) → (Eq let42 let41) → (Eq let43 let11) → (Eq let4 let4) → let45 → let42 → (Eq let48 let47) → (Eq let50 let49) → (Eq let52 let51) → (Eq let55 let54) → let59 → (Eq let19 let38) → (Eq let62 let61) → (Eq let64 let63) → (Eq let71 let70) → (Eq let72 False) → (Eq let76 let75) → (Eq let53 let56) → (Eq let60 let26) → (Eq let78 let77) → (Eq let33 let79) → (Eq let84 let84) → (Eq let85 let31) → (Eq let86 True) → (Eq let87 True) → (Eq let59 let88) → (Eq let66 let12) → (Eq let89 True) → (Eq let67 let13) → let76 → (Eq let90 let30) → (Eq let91 True) → let84 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Neg.neg let2)
  let let5 := (binrel% LT.lt let4 let1)
  let let6 := (Int.ofNat 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 skoZ)
  let let9 := (binrel% HMul.hMul let4 skoZ)
  let let10 := (Rat.ofInt 0)
  let let11 := (binrel% HMul.hMul let7 skoY)
  let let12 := (binrel% HMul.hMul let7 skoX)
  let let13 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let11 let8)))
  let let15 := (Int.ofNat 5)
  let let16 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 32) let15))
  let let17 := (binrel% HMul.hMul let2 let16)
  let let18 := (binrel% HMul.hMul let4 let10)
  let let19 := (binrel% LE.le skoZ let10)
  let let20 := (Not let19)
  let let21 := (binrel% GT.gt skoZ let10)
  let let22 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let10 let10)))
  let let23 := (binrel% GE.ge let10 let16)
  let let24 := (binrel% HDiv.hDiv let6 let15)
  let let25 := (Neg.neg (Rat.ofInt 32))
  let let26 := (binrel% HMul.hMul let25 let24)
  let let27 := (Eq let26 let16)
  let let28 := (binrel% HMul.hMul skoX let4)
  let let29 := (Eq let28 let12)
  let let30 := (binrel% GE.ge let13 let16)
  let let31 := (Not let30)
  let let32 := (Not let31)
  let let33 := (Eq let32 let30)
  let let34 := (binrel% HAdd.hAdd let11 let12)
  let let35 := (binrel% HAdd.hAdd let16 let34)
  let let36 := (binrel% HAdd.hAdd let12 let11)
  let let37 := (binrel% HAdd.hAdd let16 let36)
  let let38 := (binrel% GE.ge let8 let1)
  let let39 := (Not let38)
  let let40 := (Not let39)
  let let41 := (Eq let38 let40)
  let let42 := (Eq let40 let38)
  let let43 := (binrel% HMul.hMul let4 skoY)
  let let44 := (binrel% HMul.hMul skoY let4)
  let let45 := (Eq let44 let11)
  let let46 := (binrel% HAdd.hAdd let28 let44)
  let let47 := (binrel% HAdd.hAdd let2 let46)
  let let48 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let28) let44)
  let let49 := (binrel% HAdd.hAdd let6 let34)
  let let50 := (binrel% HAdd.hAdd let2 let36)
  let let51 := (binrel% GE.ge let13 let6)
  let let52 := (binrel% LE.le let49 skoZ)
  let let53 := (binrel% LE.le skoX let10)
  let let54 := (Not let53)
  let let55 := (binrel% GT.gt skoX let10)
  let let56 := (binrel% GE.ge let12 let1)
  let let57 := (Not let56)
  let let58 := (Not let57)
  let let59 := (Eq let58 let56)
  let let60 := (binrel% HDiv.hDiv let25 (Rat.ofInt 5))
  let let61 := (binrel% HAdd.hAdd let60 let46)
  let let62 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let60 let28) let44)
  let let63 := (binrel% GE.ge let11 let1)
  let let64 := (binrel% LE.le skoY let10)
  let let65 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let18 let18)))
  let let66 := (binrel% HMul.hMul let4 skoX)
  let let67 := (binrel% HMul.hMul let2 let13)
  let let68 := (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let43 let9)))
  let let69 := (binrel% GE.ge let68 let65)
  let let70 := (Not let69)
  let let71 := (binrel% LT.lt let68 let65)
  let let72 := (Not True)
  let let73 := (Not let63)
  let let74 := (Not let73)
  let let75 := (Eq let63 let74)
  let let76 := (Eq let74 let63)
  let let77 := (Not let64)
  let let78 := (binrel% GT.gt skoY let10)
  let let79 := (Eq let30 let32)
  let let80 := (binrel% LE.le let48 skoZ)
  let let81 := (Not let80)
  let let82 := (binrel% LE.le let62 skoZ)
  let let83 := (Not let82)
  let let84 := (And let83 (And let81 (And let20 (And let77 let54))))
  let let85 := (binrel% LT.lt let13 let16)
  let let86 := (Eq let30 let30)
  let let87 := (Eq let56 let56)
  let let88 := (Eq let56 let58)
  let let89 := (Eq let63 let63)
  let let90 := (binrel% LE.le let35 skoZ)
  let let91 := (Eq let38 let38)
  let let92 := (Not let51)
  let let93 := (And let31 (And let92 (And let39 (And let73 let57))))
  let let94 := (Eq let84 let93)
  let let95 := (Or let38 (Or let63 (Or let56 let30)))
  let let96 := (Or let40 (Or let74 (Or let58 let32)))
  let let97 := (Not let85)
  let let98 := (binrel% LT.lt let9 let18)
  let let99 := (And let5 let21)
  let let100 := (binrel% LT.lt let43 let18)
  let let101 := (And let5 let78)
  let let102 := (binrel% LT.lt let66 let18)
  let let103 := (And let5 let55)
  let let104 := (binrel% LT.lt let67 let17)
  let let105 := (And let3 let85)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let5 True) => -- EVALUATE
fun lean_r2 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let14 let10) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let18 let10) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let22 let16) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let23 True) => -- THEORY_REWRITE_ARITH
fun lean_r9 : let27 => -- THEORY_REWRITE_ARITH
fun lean_r10 : let29 => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let25 let25) => -- THEORY_REWRITE_ARITH
fun lean_r12 : let33 => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let37 let35) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let42 let41) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let43 let11) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let4 let4) => -- THEORY_REWRITE_ARITH
fun lean_r17 : let45 => -- THEORY_REWRITE_ARITH
fun lean_r18 : let42 => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let48 let47) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r23 : let59 => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let19 let38) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let62 let61) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let64 let63) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let71 let70) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let72 False) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let76 let75) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let53 let56) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let60 let26) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let78 let77) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let33 let79) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let84 let84) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let85 let31) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let86 True) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let87 True) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let59 let88) => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let66 let12) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let89 True) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let67 let13) => -- THEORY_REWRITE_ARITH
fun lean_r42 : let76 => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq let90 let30) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let91 True) => -- THEORY_REWRITE_BOOL
fun lean_a45 : let84 => by
have lean_s0 : (Or let40 (Or let74 (Or let58 (Or let32 False)))) :=
  (scope (fun lean_a46 : let39 =>
    (scope (fun lean_a47 : let73 =>
      (scope (fun lean_a48 : let57 =>
        (scope (fun lean_a49 : let31 =>
          have lean_s0 : (Eq let31 let85) := by timed Eq.symm lean_r35
          have lean_s1 : let85 := by timed eqResolve lean_a49 lean_s0
          have lean_s2 : (Or let97 False) :=
            (scope (fun lean_a50 : let85 =>
              have lean_s2 : let3 := by timed trueElim lean_r0
              have lean_s3 : let105 := by timed And.intro lean_s2 lean_a50
              have lean_s4 : (Implies let105 let104) := by arithMulPos [let13, let16, let2], 0
              have lean_s5 : let104 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let5 := by timed trueElim lean_r1
              have lean_s7 : (Eq let54 let57) := by timed flipCongrArg lean_r30 [Not]
              have lean_s8 : (Eq let55 let57) := by timed Eq.trans lean_r22 lean_s7
              have lean_s9 : (Eq let57 let55) := by timed Eq.symm lean_s8
              have lean_s10 : let55 := by timed eqResolve lean_a48 lean_s9
              have lean_s11 : let103 := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies let103 let102) := by arithMulNeg [skoX, let10, let4], 2
              have lean_s13 : let102 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let77 let73) := by timed flipCongrArg lean_r26 [Not]
              have lean_s15 : (Eq let78 let73) := by timed Eq.trans lean_r32 lean_s14
              have lean_s16 : (Eq let73 let78) := by timed Eq.symm lean_s15
              have lean_s17 : let78 := by timed eqResolve lean_a47 lean_s16
              have lean_s18 : let101 := by timed And.intro lean_s6 lean_s17
              have lean_s19 : (Implies let101 let100) := by arithMulNeg [skoY, let10, let4], 2
              have lean_s20 : let100 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : (Eq let20 let39) := by timed flipCongrArg lean_r24 [Not]
              have lean_s22 : (Eq let21 let39) := by timed Eq.trans lean_r6 lean_s21
              have lean_s23 : (Eq let39 let21) := by timed Eq.symm lean_s22
              have lean_s24 : let21 := by timed eqResolve lean_a46 lean_s23
              have lean_s25 : let99 := by timed And.intro lean_s6 lean_s24
              have lean_s26 : (Implies let99 let98) := by arithMulNeg [skoZ, let10, let4], 2
              have lean_s27 : let98 := by timed modusPonens lean_s25 lean_s26
              have lean_s28 : let71 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27]
              let lean_s29 := by timed congrHAdd lean_r15 lean_r2
              let lean_s30 := by timed congrHAdd lean_r39 lean_s29
              have lean_s31 : (Eq let68 let14) := by timed congrHAdd lean_r41 lean_s30
              have lean_s32 : (Eq let68 let10) := by timed Eq.trans lean_s31 lean_r3
              let lean_s33 := by timed flipCongrArg lean_s32 [GE.ge]
              let lean_s34 := by timed congrHAdd lean_r5 lean_r5
              let lean_s35 := by timed congrHAdd lean_r5 lean_s34
              have lean_s36 : (Eq let65 let22) := by timed congrHAdd lean_r4 lean_s35
              have lean_s37 : (Eq let65 let16) := by timed Eq.trans lean_s36 lean_r7
              have lean_s38 : (Eq let69 let23) := by timed congr lean_s33 lean_s37
              have lean_s39 : (Eq let69 True) := by timed Eq.trans lean_s38 lean_r8
              have lean_s40 : (Eq let70 let72) := by timed flipCongrArg lean_s39 [Not]
              have lean_s41 : (Eq let70 False) := by timed Eq.trans lean_s40 lean_r28
              have lean_s42 : (Eq let71 False) := by timed Eq.trans lean_r27 lean_s41
              show False from by timed eqResolve lean_s28 lean_s42
            ))
          have lean_s3 : let97 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let97 let32) := by timed flipCongrArg lean_r35 [Not]
          have lean_s5 : (Eq let97 let30) := by timed Eq.trans lean_s4 lean_r12
          have lean_s6 : let30 := by timed eqResolve lean_s3 lean_s5
          have lean_s7 : (Eq let30 let97) := by timed Eq.symm lean_s5
          have lean_s8 : let97 := by timed eqResolve lean_s6 lean_s7
          show False from by timed contradiction lean_s1 lean_s8
  ))))))))
have lean_s1 : (Not (And let39 (And let73 (And let57 let31)))) := by liftOrNToNeg lean_s0
have lean_s2 : let96 := by timed flipNotAnd lean_s1 [let39, let73, let57, let31]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let91 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let41 let91) := by timed congr lean_s5 lean_r18
have lean_s7 : (Eq let41 True) := by timed Eq.trans lean_s6 lean_r44
have lean_s8 : (Eq let42 True) := by timed Eq.trans lean_r14 lean_s7
have lean_s9 : let42 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let89 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let75 let89) := by timed congr lean_s12 lean_r42
have lean_s14 : (Eq let75 True) := by timed Eq.trans lean_s13 lean_r40
have lean_s15 : (Eq let76 True) := by timed Eq.trans lean_r29 lean_s14
have lean_s16 : let76 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let87 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let88 let87) := by timed congr lean_s19 lean_r23
have lean_s21 : (Eq let88 True) := by timed Eq.trans lean_s20 lean_r37
have lean_s22 : (Eq let59 True) := by timed Eq.trans lean_r38 lean_s21
have lean_s23 : let59 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : let86 := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq let79 let86) := by timed congr lean_s26 lean_r12
have lean_s28 : (Eq let79 True) := by timed Eq.trans lean_s27 lean_r36
have lean_s29 : (Eq let33 True) := by timed Eq.trans lean_r33 lean_s28
have lean_s30 : let33 := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s24 lean_s30
let lean_s32 := by timed congr lean_s17 lean_s31
have lean_s33 : (Eq let96 let95) := by timed congr lean_s10 lean_s32
have lean_s34 : let95 := by timed eqResolve lean_s2 lean_s33
have lean_s35 : (Or let30 (Or let38 (Or let63 let56))) := by permutateOr lean_s34, [3, 0, 1, 2], (- 1)
have lean_s36 : (Eq And And) := by timed rfl
let lean_s37 := by timed flipCongrArg lean_r11 [HMul.hMul]
have lean_s38 : (Eq let24 let24) := by timed rfl
have lean_s39 : (Eq let26 let26) := by timed congr lean_s37 lean_s38
have lean_s40 : let27 := by timed Eq.trans lean_s39 lean_r9
have lean_s41 : (Eq let60 let16) := by timed Eq.trans lean_r31 lean_s40
have lean_s42 : (Eq skoX skoX) := by timed rfl
let lean_s43 := by timed flipCongrArg lean_s42 [HMul.hMul]
have lean_s44 : (Eq let28 let28) := by timed congr lean_s43 lean_r16
have lean_s45 : let29 := by timed Eq.trans lean_s44 lean_r10
have lean_s46 : (Eq skoY skoY) := by timed rfl
let lean_s47 := by timed flipCongrArg lean_s46 [HMul.hMul]
have lean_s48 : (Eq let44 let44) := by timed congr lean_s47 lean_r16
have lean_s49 : let45 := by timed Eq.trans lean_s48 lean_r17
let lean_s50 := by timed congrHAdd lean_s45 lean_s49
have lean_s51 : (Eq let61 let37) := by timed congrHAdd lean_s41 lean_s50
have lean_s52 : (Eq let61 let35) := by timed Eq.trans lean_s51 lean_r13
have lean_s53 : (Eq let62 let35) := by timed Eq.trans lean_r25 lean_s52
let lean_s54 := by timed flipCongrArg lean_s53 [LE.le]
have lean_s55 : (Eq skoZ skoZ) := by timed rfl
have lean_s56 : (Eq let82 let90) := by timed congr lean_s54 lean_s55
have lean_s57 : (Eq let82 let30) := by timed Eq.trans lean_s56 lean_r43
have lean_s58 : (Eq let83 let31) := by timed flipCongrArg lean_s57 [Not]
let lean_s59 := by timed congr lean_s36 lean_s58
have lean_s60 : (Eq let2 let2) := by timed rfl
let lean_s61 := by timed congrHAdd lean_s45 lean_s49
have lean_s62 : (Eq let47 let50) := by timed congrHAdd lean_s60 lean_s61
have lean_s63 : (Eq let47 let49) := by timed Eq.trans lean_s62 lean_r20
have lean_s64 : (Eq let48 let49) := by timed Eq.trans lean_r19 lean_s63
let lean_s65 := by timed flipCongrArg lean_s64 [LE.le]
have lean_s66 : (Eq let80 let52) := by timed congr lean_s65 lean_s55
have lean_s67 : (Eq let80 let51) := by timed Eq.trans lean_s66 lean_r21
have lean_s68 : (Eq let81 let92) := by timed flipCongrArg lean_s67 [Not]
let lean_s69 := by timed congr lean_s36 lean_s68
have lean_s70 : (Eq let20 let39) := by timed flipCongrArg lean_r24 [Not]
let lean_s71 := by timed congr lean_s36 lean_s70
have lean_s72 : (Eq let77 let73) := by timed flipCongrArg lean_r26 [Not]
let lean_s73 := by timed congr lean_s36 lean_s72
have lean_s74 : (Eq let54 let57) := by timed flipCongrArg lean_r30 [Not]
let lean_s75 := by timed congr lean_s73 lean_s74
let lean_s76 := by timed congr lean_s71 lean_s75
let lean_s77 := by timed congr lean_s69 lean_s76
have lean_s78 : let94 := by timed congr lean_s59 lean_s77
have lean_s79 : let94 := by timed Eq.trans lean_r34 lean_s78
have lean_s80 : let93 := by timed eqResolve lean_a45 lean_s79
have lean_s81 : let57 := by andElim lean_s80, 4
let lean_s82 := by R1 lean_s35, lean_s81, let56, [(- 1), 0]
have lean_s83 : let73 := by andElim lean_s80, 3
let lean_s84 := by R1 lean_s82, lean_s83, let63, [(- 1), 0]
have lean_s85 : let39 := by andElim lean_s80, 2
let lean_s86 := by R1 lean_s84, lean_s85, let38, [(- 1), 0]
have lean_s87 : let31 := by andElim lean_s80, 0
exact (show False from by R1 lean_s86, lean_s87, let30, [0, 0])


