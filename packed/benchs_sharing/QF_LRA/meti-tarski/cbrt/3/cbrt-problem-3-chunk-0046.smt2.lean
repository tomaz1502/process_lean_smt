open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (binrel% HDiv.hDiv let4 (Int.ofNat 2))
  let let6 := (Neg.neg let5)
  let let7 := (binrel% GE.ge skoZ let6)
  let let8 := (Not let7)
  let let9 := (binrel% LT.lt skoZ let6)
  let let10 := (binrel% HMul.hMul let2 skoZ)
  let let11 := (Neg.neg let4)
  let let12 := (binrel% HMul.hMul let11 skoZ)
  let let13 := (Neg.neg let2)
  let let14 := (binrel% HMul.hMul let13 skoZ)
  let let15 := (binrel% HMul.hMul let2 let6)
  let let16 := (Rat.ofInt 0)
  let let17 := (binrel% HMul.hMul let13 let16)
  let let18 := (binrel% GE.ge let16 let6)
  let let19 := (binrel% LE.le skoZ let16)
  let let20 := (Not let19)
  let let21 := (binrel% GT.gt skoZ let16)
  let let22 := (Not True)
  let let23 := (binrel% HMul.hMul let11 skoX)
  let let24 := (binrel% GE.ge let23 let1)
  let let25 := (binrel% LE.le skoX let16)
  let let26 := (binrel% HAdd.hAdd let6 let16)
  let let27 := (binrel% HMul.hMul let13 let5)
  let let28 := (binrel% HDiv.hDiv let13 (Rat.ofInt 2))
  let let29 := (binrel% HMul.hMul let11 skoY)
  let let30 := (binrel% GE.ge let29 let1)
  let let31 := (binrel% LE.le skoY let16)
  let let32 := (binrel% GE.ge let12 let1)
  let let33 := (binrel% HAdd.hAdd let15 let17)
  let let34 := (binrel% HAdd.hAdd let10 let14)
  let let35 := (binrel% GE.ge let34 let33)
  let let36 := (Not let35)
  let let37 := (binrel% LT.lt let34 let33)
  let let38 := (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) let4)
  let let39 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let29 let23))
  let let40 := (binrel% LE.le let39 skoZ)
  let let41 := (binrel% HMul.hMul skoX let13)
  let let42 := (Eq let41 let23)
  let let43 := (Not let25)
  let let44 := (Not let31)
  let let45 := (binrel% HMul.hMul skoY let13)
  let let46 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let41) let45)
  let let47 := (binrel% LE.le let46 skoZ)
  let let48 := (Not let47)
  let let49 := (binrel% LE.le let28 skoZ)
  let let50 := (Not let49)
  let let51 := (And let50 (And let48 (And let20 (And let44 let43))))
  let let52 := (binrel% HAdd.hAdd skoZ let12)
  let let53 := (Not let32)
  let let54 := (Not let53)
  let let55 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let23 let29))
  let let56 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let41 let45))
  let let57 := (Eq let27 let6)
  let let58 := (Eq let45 let29)
  let let59 := (binrel% LT.lt let13 let1)
  let let60 := (Not let8)
  let let61 := (binrel% LE.le let6 skoZ)
  let let62 := (Not let24)
  let let63 := (Not let30)
  let let64 := (Not let38)
  let let65 := (And let8 (And let64 (And let53 (And let63 let62))))
  let let66 := (Eq let51 let65)
  let let67 := (Or let7 let32)
  let let68 := (Or let60 let54)
  let let69 := (binrel% LT.lt let14 let17)
  let let70 := (And let59 let21)
  let let71 := (binrel% LT.lt let10 let15)
  let let72 := (And let3 let9)
(Eq let3 True) → (Eq let9 let8) → (Eq let10 skoZ) → (Eq let14 let12) → (Eq let15 let6) → (Eq let17 let16) → (Eq let18 True) → (Eq let21 let20) → (Eq let22 False) → (Eq let25 let24) → (Eq let26 let6) → (Eq let28 let27) → (Eq let31 let30) → (Eq let19 let32) → (Eq let37 let36) → (Eq let40 let38) → let42 → (Eq let51 let51) → (Eq let52 let16) → (Eq let54 let32) → (Eq let55 let39) → (Eq let46 let56) → let57 → let58 → (Eq let13 let13) → (Eq let59 True) → (Eq let60 let7) → (Eq let61 let7) → let51 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (binrel% HDiv.hDiv let4 (Int.ofNat 2))
  let let6 := (Neg.neg let5)
  let let7 := (binrel% GE.ge skoZ let6)
  let let8 := (Not let7)
  let let9 := (binrel% LT.lt skoZ let6)
  let let10 := (binrel% HMul.hMul let2 skoZ)
  let let11 := (Neg.neg let4)
  let let12 := (binrel% HMul.hMul let11 skoZ)
  let let13 := (Neg.neg let2)
  let let14 := (binrel% HMul.hMul let13 skoZ)
  let let15 := (binrel% HMul.hMul let2 let6)
  let let16 := (Rat.ofInt 0)
  let let17 := (binrel% HMul.hMul let13 let16)
  let let18 := (binrel% GE.ge let16 let6)
  let let19 := (binrel% LE.le skoZ let16)
  let let20 := (Not let19)
  let let21 := (binrel% GT.gt skoZ let16)
  let let22 := (Not True)
  let let23 := (binrel% HMul.hMul let11 skoX)
  let let24 := (binrel% GE.ge let23 let1)
  let let25 := (binrel% LE.le skoX let16)
  let let26 := (binrel% HAdd.hAdd let6 let16)
  let let27 := (binrel% HMul.hMul let13 let5)
  let let28 := (binrel% HDiv.hDiv let13 (Rat.ofInt 2))
  let let29 := (binrel% HMul.hMul let11 skoY)
  let let30 := (binrel% GE.ge let29 let1)
  let let31 := (binrel% LE.le skoY let16)
  let let32 := (binrel% GE.ge let12 let1)
  let let33 := (binrel% HAdd.hAdd let15 let17)
  let let34 := (binrel% HAdd.hAdd let10 let14)
  let let35 := (binrel% GE.ge let34 let33)
  let let36 := (Not let35)
  let let37 := (binrel% LT.lt let34 let33)
  let let38 := (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) let4)
  let let39 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let29 let23))
  let let40 := (binrel% LE.le let39 skoZ)
  let let41 := (binrel% HMul.hMul skoX let13)
  let let42 := (Eq let41 let23)
  let let43 := (Not let25)
  let let44 := (Not let31)
  let let45 := (binrel% HMul.hMul skoY let13)
  let let46 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let41) let45)
  let let47 := (binrel% LE.le let46 skoZ)
  let let48 := (Not let47)
  let let49 := (binrel% LE.le let28 skoZ)
  let let50 := (Not let49)
  let let51 := (And let50 (And let48 (And let20 (And let44 let43))))
  let let52 := (binrel% HAdd.hAdd skoZ let12)
  let let53 := (Not let32)
  let let54 := (Not let53)
  let let55 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let23 let29))
  let let56 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let41 let45))
  let let57 := (Eq let27 let6)
  let let58 := (Eq let45 let29)
  let let59 := (binrel% LT.lt let13 let1)
  let let60 := (Not let8)
  let let61 := (binrel% LE.le let6 skoZ)
  let let62 := (Not let24)
  let let63 := (Not let30)
  let let64 := (Not let38)
  let let65 := (And let8 (And let64 (And let53 (And let63 let62))))
  let let66 := (Eq let51 let65)
  let let67 := (Or let7 let32)
  let let68 := (Or let60 let54)
  let let69 := (binrel% LT.lt let14 let17)
  let let70 := (And let59 let21)
  let let71 := (binrel% LT.lt let10 let15)
  let let72 := (And let3 let9)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let10 skoZ) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let14 let12) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let15 let6) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let18 True) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let22 False) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let26 let6) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let19 let32) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let40 let38) => -- THEORY_REWRITE_ARITH
fun lean_r16 : let42 => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let51 let51) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let52 let16) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let54 let32) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let55 let39) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let46 let56) => -- THEORY_REWRITE_ARITH
fun lean_r22 : let57 => -- THEORY_REWRITE_ARITH
fun lean_r23 : let58 => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let13 let13) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let59 True) => -- EVALUATE
fun lean_r26 : (Eq let60 let7) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let61 let7) => -- THEORY_REWRITE_ARITH
fun lean_a28 : let51 => by
have lean_s0 : (Or let60 (Or let54 False)) :=
  (scope (fun lean_a29 : let8 =>
    (scope (fun lean_a30 : let53 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let8 let9) := by timed Eq.symm lean_r1
      have lean_s2 : let9 := by timed eqResolve lean_a29 lean_s1
      have lean_s3 : let72 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let72 let71) := by arithMulPos [skoZ, let6, let2], 0
      have lean_s5 : let71 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let59 := by timed trueElim lean_r25
      have lean_s7 : (Eq let20 let53) := by timed flipCongrArg lean_r13 [Not]
      have lean_s8 : (Eq let21 let53) := by timed Eq.trans lean_r7 lean_s7
      have lean_s9 : (Eq let53 let21) := by timed Eq.symm lean_s8
      have lean_s10 : let21 := by timed eqResolve lean_a30 lean_s9
      have lean_s11 : let70 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let70 let69) := by arithMulNeg [skoZ, let16, let13], 2
      have lean_s13 : let69 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let37 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r2 [HAdd.hAdd]
      have lean_s16 : (Eq let34 let52) := by timed congr lean_s15 lean_r3
      have lean_s17 : (Eq let34 let16) := by timed Eq.trans lean_s16 lean_r18
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r4 [HAdd.hAdd]
      have lean_s20 : (Eq let33 let26) := by timed congr lean_s19 lean_r5
      have lean_s21 : (Eq let33 let6) := by timed Eq.trans lean_s20 lean_r10
      have lean_s22 : (Eq let35 let18) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let35 True) := by timed Eq.trans lean_s22 lean_r6
      have lean_s24 : (Eq let36 let22) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let36 False) := by timed Eq.trans lean_s24 lean_r8
      have lean_s26 : (Eq let37 False) := by timed Eq.trans lean_r14 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let8 let53)) := by liftOrNToNeg lean_s0
have lean_s2 : let68 := by timed flipNotAnd lean_s1 [let8, let53]
let lean_s3 := by timed flipCongrArg lean_r26 [Or]
have lean_s4 : (Eq let68 let67) := by timed congr lean_s3 lean_r19
have lean_s5 : let67 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
let lean_s7 := by timed flipCongrArg lean_r24 [HMul.hMul]
have lean_s8 : (Eq let5 let5) := by timed rfl
have lean_s9 : (Eq let27 let27) := by timed congr lean_s7 lean_s8
have lean_s10 : let57 := by timed Eq.trans lean_s9 lean_r22
have lean_s11 : (Eq let28 let6) := by timed Eq.trans lean_r11 lean_s10
let lean_s12 := by timed flipCongrArg lean_s11 [LE.le]
have lean_s13 : (Eq skoZ skoZ) := by timed rfl
have lean_s14 : (Eq let49 let61) := by timed congr lean_s12 lean_s13
have lean_s15 : (Eq let49 let7) := by timed Eq.trans lean_s14 lean_r27
have lean_s16 : (Eq let50 let8) := by timed flipCongrArg lean_s15 [Not]
let lean_s17 := by timed congr lean_s6 lean_s16
have lean_s18 : (Eq let2 let2) := by timed rfl
have lean_s19 : (Eq skoX skoX) := by timed rfl
let lean_s20 := by timed flipCongrArg lean_s19 [HMul.hMul]
have lean_s21 : (Eq let41 let41) := by timed congr lean_s20 lean_r24
have lean_s22 : let42 := by timed Eq.trans lean_s21 lean_r16
have lean_s23 : (Eq skoY skoY) := by timed rfl
let lean_s24 := by timed flipCongrArg lean_s23 [HMul.hMul]
have lean_s25 : (Eq let45 let45) := by timed congr lean_s24 lean_r24
have lean_s26 : let58 := by timed Eq.trans lean_s25 lean_r23
let lean_s27 := by timed congrHAdd lean_s22 lean_s26
have lean_s28 : (Eq let56 let55) := by timed congrHAdd lean_s18 lean_s27
have lean_s29 : (Eq let56 let39) := by timed Eq.trans lean_s28 lean_r20
have lean_s30 : (Eq let46 let39) := by timed Eq.trans lean_r21 lean_s29
let lean_s31 := by timed flipCongrArg lean_s30 [LE.le]
have lean_s32 : (Eq let47 let40) := by timed congr lean_s31 lean_s13
have lean_s33 : (Eq let47 let38) := by timed Eq.trans lean_s32 lean_r15
have lean_s34 : (Eq let48 let64) := by timed flipCongrArg lean_s33 [Not]
let lean_s35 := by timed congr lean_s6 lean_s34
have lean_s36 : (Eq let20 let53) := by timed flipCongrArg lean_r13 [Not]
let lean_s37 := by timed congr lean_s6 lean_s36
have lean_s38 : (Eq let44 let63) := by timed flipCongrArg lean_r12 [Not]
let lean_s39 := by timed congr lean_s6 lean_s38
have lean_s40 : (Eq let43 let62) := by timed flipCongrArg lean_r9 [Not]
let lean_s41 := by timed congr lean_s39 lean_s40
let lean_s42 := by timed congr lean_s37 lean_s41
let lean_s43 := by timed congr lean_s35 lean_s42
have lean_s44 : let66 := by timed congr lean_s17 lean_s43
have lean_s45 : let66 := by timed Eq.trans lean_r17 lean_s44
have lean_s46 : let65 := by timed eqResolve lean_a28 lean_s45
have lean_s47 : let53 := by andElim lean_s46, 2
let lean_s48 := by R1 lean_s5, lean_s47, let32, [(- 1), 0]
have lean_s49 : let8 := by andElim lean_s46, 0
exact (show False from by R1 lean_s48, lean_s49, let7, [0, 0])


