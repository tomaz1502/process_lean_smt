open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 let1)
  let let5 := (Int.ofNat 1)
  let let6 := (binrel% HDiv.hDiv let5 (Int.ofNat 2))
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let2 let7)
  let let9 := (binrel% HAdd.hAdd let8 let4)
  let let10 := (binrel% HMul.hMul let3 skoX)
  let let11 := (binrel% HMul.hMul let2 skoX)
  let let12 := (binrel% HAdd.hAdd let11 let10)
  let let13 := (binrel% GE.ge let12 let9)
  let let14 := (Not let13)
  let let15 := (binrel% LT.lt let12 let9)
  let let16 := (Neg.neg let5)
  let let17 := (binrel% HMul.hMul let16 skoX)
  let let18 := (binrel% HAdd.hAdd skoX let17)
  let let19 := (Int.ofNat 0)
  let let20 := (binrel% GT.gt let2 let19)
  let let21 := (binrel% HAdd.hAdd let7 let1)
  let let22 := (binrel% LE.le skoX let1)
  let let23 := (Not let22)
  let let24 := (binrel% GT.gt skoX let1)
  let let25 := (Not True)
  let let26 := (binrel% LT.lt let3 let19)
  let let27 := (binrel% GE.ge let17 let19)
  let let28 := (Not let27)
  let let29 := (Not let28)
  let let30 := (binrel% HMul.hMul let3 let6)
  let let31 := (binrel% HDiv.hDiv let3 (Rat.ofInt 2))
  let let32 := (binrel% HMul.hMul let16 skoY)
  let let33 := (binrel% GE.ge let32 let19)
  let let34 := (binrel% LE.le skoY let1)
  let let35 := (binrel% GE.ge let17 let6)
  let let36 := (binrel% LE.le skoX let7)
  let let37 := (binrel% GE.ge (binrel% HMul.hMul let16 skoZ) let19)
  let let38 := (binrel% LE.le skoZ let1)
  let let39 := (binrel% HMul.hMul skoY let3)
  let let40 := (Eq let39 let32)
  let let41 := (Not let34)
  let let42 := (Not let38)
  let let43 := (binrel% LE.le skoX let31)
  let let44 := (binrel% HMul.hMul skoX let3)
  let let45 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let44) let39)
  let let46 := (binrel% LE.le let45 skoZ)
  let let47 := (And let46 (And let43 (And let42 (And let41 let23))))
  let let48 := (binrel% GE.ge let1 let7)
  let let49 := (Eq let30 let7)
  let let50 := (binrel% HAdd.hAdd let17 let32)
  let let51 := (binrel% HAdd.hAdd let5 let50)
  let let52 := (binrel% HAdd.hAdd let2 let50)
  let let53 := (Eq let44 let17)
  let let54 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HAdd.hAdd skoZ skoY)) let5)
  let let55 := (binrel% LE.le let51 skoZ)
  let let56 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let44 let39))
  let let57 := (Not let33)
  let let58 := (Not let37)
  let let59 := (And let54 (And let35 (And let58 (And let57 let28))))
  let let60 := (Eq let47 let59)
  let let61 := (Not let35)
  let let62 := (Or let27 let61)
  let let63 := (Or let29 let61)
  let let64 := (binrel% LT.lt let10 let4)
  let let65 := (And let26 let24)
  let let66 := (binrel% LE.le let11 let8)
  let let67 := (And let20 let36)
(Eq let15 let14) → (Eq let11 skoX) → (Eq let10 let17) → (Eq let18 let1) → (Eq let8 let7) → (Eq let4 let1) → (Eq let20 True) → (Eq let21 let7) → (Eq let24 let23) → (Eq let25 False) → (Eq let26 True) → (Eq let29 let27) → (Eq let22 let27) → (Eq let31 let30) → (Eq let34 let33) → (Eq let36 let35) → (Eq let38 let37) → let40 → (Eq let47 let47) → (Eq let48 True) → (Eq let3 let3) → let49 → (Eq let52 let51) → let53 → (Eq let55 let54) → (Eq let45 let56) → let47 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 let1)
  let let5 := (Int.ofNat 1)
  let let6 := (binrel% HDiv.hDiv let5 (Int.ofNat 2))
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let2 let7)
  let let9 := (binrel% HAdd.hAdd let8 let4)
  let let10 := (binrel% HMul.hMul let3 skoX)
  let let11 := (binrel% HMul.hMul let2 skoX)
  let let12 := (binrel% HAdd.hAdd let11 let10)
  let let13 := (binrel% GE.ge let12 let9)
  let let14 := (Not let13)
  let let15 := (binrel% LT.lt let12 let9)
  let let16 := (Neg.neg let5)
  let let17 := (binrel% HMul.hMul let16 skoX)
  let let18 := (binrel% HAdd.hAdd skoX let17)
  let let19 := (Int.ofNat 0)
  let let20 := (binrel% GT.gt let2 let19)
  let let21 := (binrel% HAdd.hAdd let7 let1)
  let let22 := (binrel% LE.le skoX let1)
  let let23 := (Not let22)
  let let24 := (binrel% GT.gt skoX let1)
  let let25 := (Not True)
  let let26 := (binrel% LT.lt let3 let19)
  let let27 := (binrel% GE.ge let17 let19)
  let let28 := (Not let27)
  let let29 := (Not let28)
  let let30 := (binrel% HMul.hMul let3 let6)
  let let31 := (binrel% HDiv.hDiv let3 (Rat.ofInt 2))
  let let32 := (binrel% HMul.hMul let16 skoY)
  let let33 := (binrel% GE.ge let32 let19)
  let let34 := (binrel% LE.le skoY let1)
  let let35 := (binrel% GE.ge let17 let6)
  let let36 := (binrel% LE.le skoX let7)
  let let37 := (binrel% GE.ge (binrel% HMul.hMul let16 skoZ) let19)
  let let38 := (binrel% LE.le skoZ let1)
  let let39 := (binrel% HMul.hMul skoY let3)
  let let40 := (Eq let39 let32)
  let let41 := (Not let34)
  let let42 := (Not let38)
  let let43 := (binrel% LE.le skoX let31)
  let let44 := (binrel% HMul.hMul skoX let3)
  let let45 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let44) let39)
  let let46 := (binrel% LE.le let45 skoZ)
  let let47 := (And let46 (And let43 (And let42 (And let41 let23))))
  let let48 := (binrel% GE.ge let1 let7)
  let let49 := (Eq let30 let7)
  let let50 := (binrel% HAdd.hAdd let17 let32)
  let let51 := (binrel% HAdd.hAdd let5 let50)
  let let52 := (binrel% HAdd.hAdd let2 let50)
  let let53 := (Eq let44 let17)
  let let54 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HAdd.hAdd skoZ skoY)) let5)
  let let55 := (binrel% LE.le let51 skoZ)
  let let56 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let44 let39))
  let let57 := (Not let33)
  let let58 := (Not let37)
  let let59 := (And let54 (And let35 (And let58 (And let57 let28))))
  let let60 := (Eq let47 let59)
  let let61 := (Not let35)
  let let62 := (Or let27 let61)
  let let63 := (Or let29 let61)
  let let64 := (binrel% LT.lt let10 let4)
  let let65 := (And let26 let24)
  let let66 := (binrel% LE.le let11 let8)
  let let67 := (And let20 let36)
fun lean_r0 : (Eq let15 let14) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let11 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let10 let17) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let18 let1) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let4 let1) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let20 True) => -- EVALUATE
fun lean_r7 : (Eq let21 let7) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let25 False) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let26 True) => -- EVALUATE
fun lean_r11 : (Eq let29 let27) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let22 let27) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let38 let37) => -- THEORY_REWRITE_ARITH
fun lean_r17 : let40 => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let47 let47) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let48 True) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let3 let3) => -- THEORY_REWRITE_ARITH
fun lean_r21 : let49 => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r23 : let53 => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let45 let56) => -- THEORY_REWRITE_ARITH
fun lean_a26 : let47 => by
have lean_s0 : (Or let29 (Or let61 False)) :=
  (scope (fun lean_a27 : let28 =>
    (scope (fun lean_a28 : let35 =>
      have lean_s0 : let20 := by timed trueElim lean_r6
      have lean_s1 : (Eq let35 let36) := by timed Eq.symm lean_r15
      have lean_s2 : let36 := by timed eqResolve lean_a28 lean_s1
      have lean_s3 : let67 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let67 let66) := by arithMulPos [skoX, let7, let2], 1
      have lean_s5 : let66 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let26 := by timed trueElim lean_r10
      have lean_s7 : (Eq let23 let28) := by timed flipCongrArg lean_r12 [Not]
      have lean_s8 : (Eq let24 let28) := by timed Eq.trans lean_r8 lean_s7
      have lean_s9 : (Eq let28 let24) := by timed Eq.symm lean_s8
      have lean_s10 : let24 := by timed eqResolve lean_a27 lean_s9
      have lean_s11 : let65 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let65 let64) := by arithMulNeg [skoX, let1, let3], 2
      have lean_s13 : let64 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let15 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r1 [HAdd.hAdd]
      have lean_s16 : (Eq let12 let18) := by timed congr lean_s15 lean_r2
      have lean_s17 : (Eq let12 let1) := by timed Eq.trans lean_s16 lean_r3
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r4 [HAdd.hAdd]
      have lean_s20 : (Eq let9 let21) := by timed congr lean_s19 lean_r5
      have lean_s21 : (Eq let9 let7) := by timed Eq.trans lean_s20 lean_r7
      have lean_s22 : (Eq let13 let48) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let13 True) := by timed Eq.trans lean_s22 lean_r19
      have lean_s24 : (Eq let14 let25) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let14 False) := by timed Eq.trans lean_s24 lean_r9
      have lean_s26 : (Eq let15 False) := by timed Eq.trans lean_r0 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let28 let35)) := by liftOrNToNeg lean_s0
have lean_s2 : let63 := by timed flipNotAnd lean_s1 [let28, let35]
let lean_s3 := by timed flipCongrArg lean_r11 [Or]
have lean_s4 : (Eq let61 let61) := by timed rfl
have lean_s5 : (Eq let63 let62) := by timed congr lean_s3 lean_s4
have lean_s6 : let62 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
have lean_s8 : (Eq let2 let2) := by timed rfl
have lean_s9 : (Eq skoX skoX) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s11 : (Eq let44 let44) := by timed congr lean_s10 lean_r20
have lean_s12 : let53 := by timed Eq.trans lean_s11 lean_r23
have lean_s13 : (Eq skoY skoY) := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [HMul.hMul]
have lean_s15 : (Eq let39 let39) := by timed congr lean_s14 lean_r20
have lean_s16 : let40 := by timed Eq.trans lean_s15 lean_r17
let lean_s17 := by timed congrHAdd lean_s12 lean_s16
have lean_s18 : (Eq let56 let52) := by timed congrHAdd lean_s8 lean_s17
have lean_s19 : (Eq let56 let51) := by timed Eq.trans lean_s18 lean_r22
have lean_s20 : (Eq let45 let51) := by timed Eq.trans lean_r25 lean_s19
let lean_s21 := by timed flipCongrArg lean_s20 [LE.le]
have lean_s22 : (Eq skoZ skoZ) := by timed rfl
have lean_s23 : (Eq let46 let55) := by timed congr lean_s21 lean_s22
have lean_s24 : (Eq let46 let54) := by timed Eq.trans lean_s23 lean_r24
let lean_s25 := by timed congr lean_s7 lean_s24
let lean_s26 := by timed flipCongrArg lean_s9 [LE.le]
let lean_s27 := by timed flipCongrArg lean_r20 [HMul.hMul]
have lean_s28 : (Eq let6 let6) := by timed rfl
have lean_s29 : (Eq let30 let30) := by timed congr lean_s27 lean_s28
have lean_s30 : let49 := by timed Eq.trans lean_s29 lean_r21
have lean_s31 : (Eq let31 let7) := by timed Eq.trans lean_r13 lean_s30
have lean_s32 : (Eq let43 let36) := by timed congr lean_s26 lean_s31
have lean_s33 : (Eq let43 let35) := by timed Eq.trans lean_s32 lean_r15
let lean_s34 := by timed congr lean_s7 lean_s33
have lean_s35 : (Eq let42 let58) := by timed flipCongrArg lean_r16 [Not]
let lean_s36 := by timed congr lean_s7 lean_s35
have lean_s37 : (Eq let41 let57) := by timed flipCongrArg lean_r14 [Not]
let lean_s38 := by timed congr lean_s7 lean_s37
have lean_s39 : (Eq let23 let28) := by timed flipCongrArg lean_r12 [Not]
let lean_s40 := by timed congr lean_s38 lean_s39
let lean_s41 := by timed congr lean_s36 lean_s40
let lean_s42 := by timed congr lean_s34 lean_s41
have lean_s43 : let60 := by timed congr lean_s25 lean_s42
have lean_s44 : let60 := by timed Eq.trans lean_r18 lean_s43
have lean_s45 : let59 := by timed eqResolve lean_a26 lean_s44
have lean_s46 : let28 := by andElim lean_s45, 4
let lean_s47 := by R1 lean_s6, lean_s46, let27, [(- 1), 0]
have lean_s48 : let35 := by andElim lean_s45, 1
exact (show False from by R2 lean_s47, lean_s48, let35, [0, 0])


