open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% LE.le skoX let1)
  let let3 := (Not let2)
  let let4 := (binrel% GT.gt skoX let1)
  let let5 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let6 := (Rat.ofInt 1)
  let let7 := (binrel% HMul.hMul let6 let5)
  let let8 := (Int.ofNat 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% HMul.hMul let9 skoZ)
  let let11 := (Neg.neg let6)
  let let12 := (binrel% HMul.hMul let11 skoZ)
  let let13 := (binrel% HMul.hMul let9 skoX)
  let let14 := (binrel% HMul.hMul let11 skoX)
  let let15 := (binrel% HMul.hMul let11 let1)
  let let16 := (Int.ofNat 0)
  let let17 := (binrel% LT.lt let11 let16)
  let let18 := (Int.ofNat 5)
  let let19 := (binrel% HDiv.hDiv (Int.ofNat 32) let18)
  let let20 := (Neg.neg let19)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1)))
  let let22 := (binrel% HDiv.hDiv let8 let18)
  let let23 := (Neg.neg (Rat.ofInt 32))
  let let24 := (binrel% HMul.hMul let23 let22)
  let let25 := (Eq let24 let20)
  let let26 := (binrel% HMul.hMul skoX let11)
  let let27 := (Eq let26 let13)
  let let28 := (binrel% HMul.hMul let9 skoY)
  let let29 := (binrel% HAdd.hAdd let13 let28)
  let let30 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let10 let29))
  let let31 := (binrel% GE.ge let10 let16)
  let let32 := (Not let31)
  let let33 := (Not let32)
  let let34 := (Eq let33 let31)
  let let35 := (binrel% HAdd.hAdd let28 let13)
  let let36 := (binrel% HAdd.hAdd let20 let35)
  let let37 := (binrel% HAdd.hAdd let20 let29)
  let let38 := (binrel% HMul.hMul let6 let20)
  let let39 := (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let15 let15)))
  let let40 := (binrel% HMul.hMul let11 skoY)
  let let41 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let14 let40)))
  let let42 := (binrel% GE.ge let41 let39)
  let let43 := (Not let42)
  let let44 := (binrel% LT.lt let41 let39)
  let let45 := (binrel% HMul.hMul skoY let11)
  let let46 := (Eq let45 let28)
  let let47 := (binrel% HAdd.hAdd let26 let45)
  let let48 := (binrel% HAdd.hAdd let6 let47)
  let let49 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let6 let26) let45)
  let let50 := (binrel% HAdd.hAdd let8 let35)
  let let51 := (binrel% HAdd.hAdd let6 let29)
  let let52 := (binrel% GE.ge (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let13 let10)) let19)
  let let53 := (binrel% LE.le skoZ let36)
  let let54 := (binrel% GE.ge let5 let8)
  let let55 := (binrel% LE.le let50 skoZ)
  let let56 := (binrel% GT.gt let6 let16)
  let let57 := (binrel% GE.ge let13 let16)
  let let58 := (Not let57)
  let let59 := (Not let58)
  let let60 := (Eq let59 let57)
  let let61 := (binrel% LE.le skoY let1)
  let let62 := (Not let61)
  let let63 := (binrel% GT.gt skoY let1)
  let let64 := (binrel% LE.le skoZ let1)
  let let65 := (binrel% HDiv.hDiv let23 (Rat.ofInt 5))
  let let66 := (binrel% HAdd.hAdd let65 let47)
  let let67 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let65 let26) let45)
  let let68 := (binrel% GE.ge let28 let16)
  let let69 := (Not let68)
  let let70 := (Not let69)
  let let71 := (Eq let68 let70)
  let let72 := (Eq let70 let68)
  let let73 := (binrel% GE.ge let1 let20)
  let let74 := (Not let64)
  let let75 := (binrel% GT.gt skoZ let1)
  let let76 := (Eq let31 let33)
  let let77 := (binrel% LE.le let49 skoZ)
  let let78 := (Not let77)
  let let79 := (binrel% LE.le skoZ let67)
  let let80 := (And let79 (And let78 (And let74 (And let62 let3))))
  let let81 := (Eq let31 let31)
  let let82 := (Eq let57 let57)
  let let83 := (Eq let57 let59)
  let let84 := (Eq let68 let68)
  let let85 := (binrel% LE.le let5 let20)
  let let86 := (Not True)
  let let87 := (Not let85)
  let let88 := (binrel% GT.gt let5 let20)
  let let89 := (Eq let88 let87)
  let let90 := (Not let54)
  let let91 := (And let52 (And let90 (And let32 (And let69 let58))))
  let let92 := (Eq let80 let91)
  let let93 := (Not let52)
  let let94 := (Or let68 (Or let57 (Or let31 let93)))
  let let95 := (Or let70 (Or let59 (Or let33 let93)))
  let let96 := (binrel% LT.lt let40 let15)
  let let97 := (And let17 let63)
  let let98 := (binrel% LT.lt let14 let15)
  let let99 := (And let17 let4)
  let let100 := (binrel% LT.lt let12 let15)
  let let101 := (And let17 let75)
  let let102 := (binrel% LE.le let7 let38)
  let let103 := (And let56 let85)
(Eq let4 let3) → (Eq let7 let5) → (Eq let12 let10) → (Eq let14 let13) → (Eq let15 let1) → (Eq let17 True) → (Eq let21 let20) → let25 → let27 → (Eq let30 let1) → (Eq let23 let23) → let34 → (Eq let37 let36) → (Eq let44 let43) → (Eq let11 let11) → let46 → (Eq let49 let48) → (Eq let51 let50) → (Eq let53 let52) → (Eq let55 let54) → (Eq let56 True) → let60 → (Eq let63 let62) → (Eq let64 let31) → (Eq let67 let66) → (Eq let61 let68) → (Eq let72 let71) → (Eq let73 True) → (Eq let2 let57) → (Eq let75 let74) → (Eq let65 let24) → (Eq let34 let76) → (Eq let40 let28) → (Eq let80 let80) → (Eq let81 True) → (Eq let82 True) → (Eq let60 let83) → (Eq let84 True) → (Eq let38 let20) → (Eq let85 let52) → (Eq let86 False) → let72 → let89 → let80 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% LE.le skoX let1)
  let let3 := (Not let2)
  let let4 := (binrel% GT.gt skoX let1)
  let let5 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let6 := (Rat.ofInt 1)
  let let7 := (binrel% HMul.hMul let6 let5)
  let let8 := (Int.ofNat 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% HMul.hMul let9 skoZ)
  let let11 := (Neg.neg let6)
  let let12 := (binrel% HMul.hMul let11 skoZ)
  let let13 := (binrel% HMul.hMul let9 skoX)
  let let14 := (binrel% HMul.hMul let11 skoX)
  let let15 := (binrel% HMul.hMul let11 let1)
  let let16 := (Int.ofNat 0)
  let let17 := (binrel% LT.lt let11 let16)
  let let18 := (Int.ofNat 5)
  let let19 := (binrel% HDiv.hDiv (Int.ofNat 32) let18)
  let let20 := (Neg.neg let19)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1)))
  let let22 := (binrel% HDiv.hDiv let8 let18)
  let let23 := (Neg.neg (Rat.ofInt 32))
  let let24 := (binrel% HMul.hMul let23 let22)
  let let25 := (Eq let24 let20)
  let let26 := (binrel% HMul.hMul skoX let11)
  let let27 := (Eq let26 let13)
  let let28 := (binrel% HMul.hMul let9 skoY)
  let let29 := (binrel% HAdd.hAdd let13 let28)
  let let30 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let10 let29))
  let let31 := (binrel% GE.ge let10 let16)
  let let32 := (Not let31)
  let let33 := (Not let32)
  let let34 := (Eq let33 let31)
  let let35 := (binrel% HAdd.hAdd let28 let13)
  let let36 := (binrel% HAdd.hAdd let20 let35)
  let let37 := (binrel% HAdd.hAdd let20 let29)
  let let38 := (binrel% HMul.hMul let6 let20)
  let let39 := (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let15 let15)))
  let let40 := (binrel% HMul.hMul let11 skoY)
  let let41 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let14 let40)))
  let let42 := (binrel% GE.ge let41 let39)
  let let43 := (Not let42)
  let let44 := (binrel% LT.lt let41 let39)
  let let45 := (binrel% HMul.hMul skoY let11)
  let let46 := (Eq let45 let28)
  let let47 := (binrel% HAdd.hAdd let26 let45)
  let let48 := (binrel% HAdd.hAdd let6 let47)
  let let49 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let6 let26) let45)
  let let50 := (binrel% HAdd.hAdd let8 let35)
  let let51 := (binrel% HAdd.hAdd let6 let29)
  let let52 := (binrel% GE.ge (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let13 let10)) let19)
  let let53 := (binrel% LE.le skoZ let36)
  let let54 := (binrel% GE.ge let5 let8)
  let let55 := (binrel% LE.le let50 skoZ)
  let let56 := (binrel% GT.gt let6 let16)
  let let57 := (binrel% GE.ge let13 let16)
  let let58 := (Not let57)
  let let59 := (Not let58)
  let let60 := (Eq let59 let57)
  let let61 := (binrel% LE.le skoY let1)
  let let62 := (Not let61)
  let let63 := (binrel% GT.gt skoY let1)
  let let64 := (binrel% LE.le skoZ let1)
  let let65 := (binrel% HDiv.hDiv let23 (Rat.ofInt 5))
  let let66 := (binrel% HAdd.hAdd let65 let47)
  let let67 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let65 let26) let45)
  let let68 := (binrel% GE.ge let28 let16)
  let let69 := (Not let68)
  let let70 := (Not let69)
  let let71 := (Eq let68 let70)
  let let72 := (Eq let70 let68)
  let let73 := (binrel% GE.ge let1 let20)
  let let74 := (Not let64)
  let let75 := (binrel% GT.gt skoZ let1)
  let let76 := (Eq let31 let33)
  let let77 := (binrel% LE.le let49 skoZ)
  let let78 := (Not let77)
  let let79 := (binrel% LE.le skoZ let67)
  let let80 := (And let79 (And let78 (And let74 (And let62 let3))))
  let let81 := (Eq let31 let31)
  let let82 := (Eq let57 let57)
  let let83 := (Eq let57 let59)
  let let84 := (Eq let68 let68)
  let let85 := (binrel% LE.le let5 let20)
  let let86 := (Not True)
  let let87 := (Not let85)
  let let88 := (binrel% GT.gt let5 let20)
  let let89 := (Eq let88 let87)
  let let90 := (Not let54)
  let let91 := (And let52 (And let90 (And let32 (And let69 let58))))
  let let92 := (Eq let80 let91)
  let let93 := (Not let52)
  let let94 := (Or let68 (Or let57 (Or let31 let93)))
  let let95 := (Or let70 (Or let59 (Or let33 let93)))
  let let96 := (binrel% LT.lt let40 let15)
  let let97 := (And let17 let63)
  let let98 := (binrel% LT.lt let14 let15)
  let let99 := (And let17 let4)
  let let100 := (binrel% LT.lt let12 let15)
  let let101 := (And let17 let75)
  let let102 := (binrel% LE.le let7 let38)
  let let103 := (And let56 let85)
fun lean_r0 : (Eq let4 let3) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let7 let5) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let12 let10) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let14 let13) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let15 let1) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let17 True) => -- EVALUATE
fun lean_r6 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r7 : let25 => -- THEORY_REWRITE_ARITH
fun lean_r8 : let27 => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let30 let1) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let23 let23) => -- THEORY_REWRITE_ARITH
fun lean_r11 : let34 => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let11 let11) => -- THEORY_REWRITE_ARITH
fun lean_r15 : let46 => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let49 let48) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let53 let52) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let56 True) => -- EVALUATE
fun lean_r21 : let60 => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let64 let31) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let61 let68) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let72 let71) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let73 True) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let2 let57) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let75 let74) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let65 let24) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let34 let76) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let40 let28) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let80 let80) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let81 True) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let82 True) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let60 let83) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let84 True) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let38 let20) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let85 let52) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let86 False) => -- THEORY_REWRITE_BOOL
fun lean_r41 : let72 => -- THEORY_REWRITE_BOOL
fun lean_r42 : let89 => -- THEORY_REWRITE_ARITH
fun lean_a43 : let80 => by
have lean_s0 : (Or let70 (Or let59 (Or let33 (Or let93 False)))) :=
  (scope (fun lean_a44 : let69 =>
    (scope (fun lean_a45 : let58 =>
      (scope (fun lean_a46 : let32 =>
        (scope (fun lean_a47 : let52 =>
          have lean_s0 : (Eq let52 let85) := by timed Eq.symm lean_r39
          have lean_s1 : let85 := by timed eqResolve lean_a47 lean_s0
          have lean_s2 : (Or let87 False) :=
            (scope (fun lean_a48 : let85 =>
              have lean_s2 : let56 := by timed trueElim lean_r20
              have lean_s3 : let103 := by timed And.intro lean_s2 lean_a48
              have lean_s4 : (Implies let103 let102) := by arithMulPos [let5, let20, let6], 1
              have lean_s5 : let102 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let17 := by timed trueElim lean_r5
              have lean_s7 : (Eq let74 let32) := by timed flipCongrArg lean_r23 [Not]
              have lean_s8 : (Eq let75 let32) := by timed Eq.trans lean_r29 lean_s7
              have lean_s9 : (Eq let32 let75) := by timed Eq.symm lean_s8
              have lean_s10 : let75 := by timed eqResolve lean_a46 lean_s9
              have lean_s11 : let101 := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies let101 let100) := by arithMulNeg [skoZ, let1, let11], 2
              have lean_s13 : let100 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let3 let58) := by timed flipCongrArg lean_r28 [Not]
              have lean_s15 : (Eq let4 let58) := by timed Eq.trans lean_r0 lean_s14
              have lean_s16 : (Eq let58 let4) := by timed Eq.symm lean_s15
              have lean_s17 : let4 := by timed eqResolve lean_a45 lean_s16
              have lean_s18 : let99 := by timed And.intro lean_s6 lean_s17
              have lean_s19 : (Implies let99 let98) := by arithMulNeg [skoX, let1, let11], 2
              have lean_s20 : let98 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : (Eq let62 let69) := by timed flipCongrArg lean_r25 [Not]
              have lean_s22 : (Eq let63 let69) := by timed Eq.trans lean_r22 lean_s21
              have lean_s23 : (Eq let69 let63) := by timed Eq.symm lean_s22
              have lean_s24 : let63 := by timed eqResolve lean_a44 lean_s23
              have lean_s25 : let97 := by timed And.intro lean_s6 lean_s24
              have lean_s26 : (Implies let97 let96) := by arithMulNeg [skoY, let1, let11], 2
              have lean_s27 : let96 := by timed modusPonens lean_s25 lean_s26
              have lean_s28 : let44 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27]
              let lean_s29 := by timed congrHAdd lean_r3 lean_r32
              let lean_s30 := by timed congrHAdd lean_r2 lean_s29
              have lean_s31 : (Eq let41 let30) := by timed congrHAdd lean_r1 lean_s30
              have lean_s32 : (Eq let41 let1) := by timed Eq.trans lean_s31 lean_r9
              let lean_s33 := by timed flipCongrArg lean_s32 [GE.ge]
              let lean_s34 := by timed congrHAdd lean_r4 lean_r4
              let lean_s35 := by timed congrHAdd lean_r4 lean_s34
              have lean_s36 : (Eq let39 let21) := by timed congrHAdd lean_r38 lean_s35
              have lean_s37 : (Eq let39 let20) := by timed Eq.trans lean_s36 lean_r6
              have lean_s38 : (Eq let42 let73) := by timed congr lean_s33 lean_s37
              have lean_s39 : (Eq let42 True) := by timed Eq.trans lean_s38 lean_r27
              have lean_s40 : (Eq let43 let86) := by timed flipCongrArg lean_s39 [Not]
              have lean_s41 : (Eq let43 False) := by timed Eq.trans lean_s40 lean_r40
              have lean_s42 : (Eq let44 False) := by timed Eq.trans lean_r13 lean_s41
              show False from by timed eqResolve lean_s28 lean_s42
            ))
          have lean_s3 : let87 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let87 let93) := by timed flipCongrArg lean_r39 [Not]
          have lean_s5 : (Eq let88 let93) := by timed Eq.trans lean_r42 lean_s4
          have lean_s6 : (Eq let93 let88) := by timed Eq.symm lean_s5
          have lean_s7 : (Eq let87 let88) := by timed Eq.trans lean_s4 lean_s6
          have lean_s8 : let88 := by timed eqResolve lean_s3 lean_s7
          have lean_s9 : (Eq let93 let87) := by timed Eq.symm lean_s4
          have lean_s10 : let89 := by timed Eq.trans lean_s5 lean_s9
          have lean_s11 : let87 := by timed eqResolve lean_s8 lean_s10
          show False from by timed contradiction lean_s1 lean_s11
  ))))))))
have lean_s1 : (Not (And let69 (And let58 (And let32 let52)))) := by liftOrNToNeg lean_s0
have lean_s2 : let95 := by timed flipNotAnd lean_s1 [let69, let58, let32, let52]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let84 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let71 let84) := by timed congr lean_s5 lean_r41
have lean_s7 : (Eq let71 True) := by timed Eq.trans lean_s6 lean_r37
have lean_s8 : (Eq let72 True) := by timed Eq.trans lean_r26 lean_s7
have lean_s9 : let72 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let82 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let83 let82) := by timed congr lean_s12 lean_r21
have lean_s14 : (Eq let83 True) := by timed Eq.trans lean_s13 lean_r35
have lean_s15 : (Eq let60 True) := by timed Eq.trans lean_r36 lean_s14
have lean_s16 : let60 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let81 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let76 let81) := by timed congr lean_s19 lean_r11
have lean_s21 : (Eq let76 True) := by timed Eq.trans lean_s20 lean_r34
have lean_s22 : (Eq let34 True) := by timed Eq.trans lean_r31 lean_s21
have lean_s23 : let34 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : (Eq let93 let93) := by timed rfl
let lean_s26 := by timed congr lean_s24 lean_s25
let lean_s27 := by timed congr lean_s17 lean_s26
have lean_s28 : (Eq let95 let94) := by timed congr lean_s10 lean_s27
have lean_s29 : let94 := by timed eqResolve lean_s2 lean_s28
have lean_s30 : (Or let31 (Or let68 (Or let57 let93))) := by permutateOr lean_s29, [2, 0, 1, 3], (- 1)
have lean_s31 : (Eq And And) := by timed rfl
have lean_s32 : (Eq skoZ skoZ) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
let lean_s34 := by timed flipCongrArg lean_r10 [HMul.hMul]
have lean_s35 : (Eq let22 let22) := by timed rfl
have lean_s36 : (Eq let24 let24) := by timed congr lean_s34 lean_s35
have lean_s37 : let25 := by timed Eq.trans lean_s36 lean_r7
have lean_s38 : (Eq let65 let20) := by timed Eq.trans lean_r30 lean_s37
have lean_s39 : (Eq skoX skoX) := by timed rfl
let lean_s40 := by timed flipCongrArg lean_s39 [HMul.hMul]
have lean_s41 : (Eq let26 let26) := by timed congr lean_s40 lean_r14
have lean_s42 : let27 := by timed Eq.trans lean_s41 lean_r8
have lean_s43 : (Eq skoY skoY) := by timed rfl
let lean_s44 := by timed flipCongrArg lean_s43 [HMul.hMul]
have lean_s45 : (Eq let45 let45) := by timed congr lean_s44 lean_r14
have lean_s46 : let46 := by timed Eq.trans lean_s45 lean_r15
let lean_s47 := by timed congrHAdd lean_s42 lean_s46
have lean_s48 : (Eq let66 let37) := by timed congrHAdd lean_s38 lean_s47
have lean_s49 : (Eq let66 let36) := by timed Eq.trans lean_s48 lean_r12
have lean_s50 : (Eq let67 let36) := by timed Eq.trans lean_r24 lean_s49
have lean_s51 : (Eq let79 let53) := by timed congr lean_s33 lean_s50
have lean_s52 : (Eq let79 let52) := by timed Eq.trans lean_s51 lean_r18
let lean_s53 := by timed congr lean_s31 lean_s52
have lean_s54 : (Eq let6 let6) := by timed rfl
let lean_s55 := by timed congrHAdd lean_s42 lean_s46
have lean_s56 : (Eq let48 let51) := by timed congrHAdd lean_s54 lean_s55
have lean_s57 : (Eq let48 let50) := by timed Eq.trans lean_s56 lean_r17
have lean_s58 : (Eq let49 let50) := by timed Eq.trans lean_r16 lean_s57
let lean_s59 := by timed flipCongrArg lean_s58 [LE.le]
have lean_s60 : (Eq let77 let55) := by timed congr lean_s59 lean_s32
have lean_s61 : (Eq let77 let54) := by timed Eq.trans lean_s60 lean_r19
have lean_s62 : (Eq let78 let90) := by timed flipCongrArg lean_s61 [Not]
let lean_s63 := by timed congr lean_s31 lean_s62
have lean_s64 : (Eq let74 let32) := by timed flipCongrArg lean_r23 [Not]
let lean_s65 := by timed congr lean_s31 lean_s64
have lean_s66 : (Eq let62 let69) := by timed flipCongrArg lean_r25 [Not]
let lean_s67 := by timed congr lean_s31 lean_s66
have lean_s68 : (Eq let3 let58) := by timed flipCongrArg lean_r28 [Not]
let lean_s69 := by timed congr lean_s67 lean_s68
let lean_s70 := by timed congr lean_s65 lean_s69
let lean_s71 := by timed congr lean_s63 lean_s70
have lean_s72 : let92 := by timed congr lean_s53 lean_s71
have lean_s73 : let92 := by timed Eq.trans lean_r33 lean_s72
have lean_s74 : let91 := by timed eqResolve lean_a43 lean_s73
have lean_s75 : let58 := by andElim lean_s74, 4
let lean_s76 := by R1 lean_s30, lean_s75, let57, [(- 1), 0]
have lean_s77 : let69 := by andElim lean_s74, 3
let lean_s78 := by R1 lean_s76, lean_s77, let68, [(- 1), 0]
have lean_s79 : let32 := by andElim lean_s74, 2
let lean_s80 := by R1 lean_s78, lean_s79, let31, [(- 1), 0]
have lean_s81 : let52 := by andElim lean_s74, 0
exact (show False from by R2 lean_s80, lean_s81, let52, [0, 0])


