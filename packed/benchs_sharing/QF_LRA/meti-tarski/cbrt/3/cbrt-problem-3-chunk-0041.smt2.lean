open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Neg.neg let2)
  let let5 := (binrel% LT.lt let4 let1)
  let let6 := (Int.ofNat 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 skoY)
  let let9 := (binrel% HMul.hMul let4 skoY)
  let let10 := (binrel% HMul.hMul let7 skoZ)
  let let11 := (binrel% HMul.hMul let4 skoZ)
  let let12 := (Rat.ofInt 0)
  let let13 := (binrel% HMul.hMul let7 skoX)
  let let14 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let15 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let8 let10)))
  let let16 := (Int.ofNat 5)
  let let17 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 32) let16))
  let let18 := (binrel% HMul.hMul let2 let17)
  let let19 := (binrel% HDiv.hDiv let6 let16)
  let let20 := (Neg.neg (Rat.ofInt 32))
  let let21 := (binrel% HMul.hMul let20 let19)
  let let22 := (binrel% HDiv.hDiv let20 (Rat.ofInt 5))
  let let23 := (binrel% LE.le skoY let12)
  let let24 := (Not let23)
  let let25 := (binrel% GT.gt skoY let12)
  let let26 := (binrel% GE.ge let14 let17)
  let let27 := (Not let26)
  let let28 := (Not let27)
  let let29 := (Eq let26 let28)
  let let30 := (Eq let28 let26)
  let let31 := (Eq let21 let17)
  let let32 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let8 let13))
  let let33 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let13 let8))
  let let34 := (binrel% GE.ge let13 let1)
  let let35 := (Eq let34 let34)
  let let36 := (binrel% HMul.hMul skoY let4)
  let let37 := (Eq let36 let8)
  let let38 := (binrel% HMul.hMul skoX let4)
  let let39 := (Eq let38 let13)
  let let40 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let38 let36))
  let let41 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let22 let38) let36)
  let let42 := (binrel% LE.le let32 skoZ)
  let let43 := (binrel% HMul.hMul let4 let12)
  let let44 := (binrel% GE.ge let10 let1)
  let let45 := (binrel% LE.le skoZ let12)
  let let46 := (binrel% GE.ge let8 let1)
  let let47 := (binrel% LE.le skoX let12)
  let let48 := (Not let47)
  let let49 := (Not let45)
  let let50 := (binrel% LE.le let41 skoZ)
  let let51 := (Not let50)
  let let52 := (And let51 (And let49 (And let24 let48)))
  let let53 := (binrel% LT.lt let14 let17)
  let let54 := (binrel% GE.ge let12 let17)
  let let55 := (Eq let26 let26)
  let let56 := (binrel% GT.gt skoX let12)
  let let57 := (Not let34)
  let let58 := (Not let57)
  let let59 := (Eq let58 let34)
  let let60 := (Eq let34 let58)
  let let61 := (binrel% HMul.hMul let4 skoX)
  let let62 := (Eq let46 let46)
  let let63 := (binrel% HMul.hMul let2 let14)
  let let64 := (Not let46)
  let let65 := (Not let64)
  let let66 := (Eq let65 let46)
  let let67 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let43 let43)))
  let let68 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let9 let11)))
  let let69 := (binrel% GE.ge let68 let67)
  let let70 := (Not let69)
  let let71 := (binrel% LT.lt let68 let67)
  let let72 := (Not True)
  let let73 := (Eq let46 let65)
  let let74 := (Eq let44 let44)
  let let75 := (Not let44)
  let let76 := (Not let75)
  let let77 := (Eq let76 let44)
  let let78 := (Eq let44 let76)
  let let79 := (binrel% GT.gt skoZ let12)
  let let80 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let12 let12)))
  let let81 := (And let27 (And let75 (And let64 let57)))
  let let82 := (Eq let52 let81)
  let let83 := (Or let44 (Or let46 (Or let34 let26)))
  let let84 := (Or let76 (Or let65 (Or let58 let28)))
  let let85 := (Not let53)
  let let86 := (binrel% LT.lt let11 let43)
  let let87 := (And let5 let79)
  let let88 := (binrel% LT.lt let9 let43)
  let let89 := (And let5 let25)
  let let90 := (binrel% LT.lt let61 let43)
  let let91 := (And let5 let56)
  let let92 := (binrel% LT.lt let63 let18)
  let let93 := (And let3 let53)
(Eq let3 True) → (Eq let5 True) → (Eq let9 let8) → (Eq let11 let10) → (Eq let15 let12) → (Eq let18 let17) → (Eq let22 let21) → (Eq let25 let24) → (Eq let30 let29) → let31 → (Eq let33 let32) → (Eq let35 True) → let37 → let39 → (Eq let41 let40) → (Eq let42 let26) → (Eq let43 let12) → (Eq let45 let44) → (Eq let20 let20) → let30 → (Eq let23 let46) → (Eq let52 let52) → (Eq let53 let27) → (Eq let54 True) → (Eq let47 let34) → (Eq let55 True) → (Eq let56 let48) → let59 → (Eq let59 let60) → (Eq let61 let13) → (Eq let62 True) → (Eq let63 let14) → let66 → (Eq let71 let70) → (Eq let72 False) → (Eq let66 let73) → (Eq let74 True) → (Eq let4 let4) → let77 → (Eq let77 let78) → (Eq let79 let49) → (Eq let80 let17) → let52 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Neg.neg let2)
  let let5 := (binrel% LT.lt let4 let1)
  let let6 := (Int.ofNat 1)
  let let7 := (Neg.neg let6)
  let let8 := (binrel% HMul.hMul let7 skoY)
  let let9 := (binrel% HMul.hMul let4 skoY)
  let let10 := (binrel% HMul.hMul let7 skoZ)
  let let11 := (binrel% HMul.hMul let4 skoZ)
  let let12 := (Rat.ofInt 0)
  let let13 := (binrel% HMul.hMul let7 skoX)
  let let14 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let15 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let8 let10)))
  let let16 := (Int.ofNat 5)
  let let17 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 32) let16))
  let let18 := (binrel% HMul.hMul let2 let17)
  let let19 := (binrel% HDiv.hDiv let6 let16)
  let let20 := (Neg.neg (Rat.ofInt 32))
  let let21 := (binrel% HMul.hMul let20 let19)
  let let22 := (binrel% HDiv.hDiv let20 (Rat.ofInt 5))
  let let23 := (binrel% LE.le skoY let12)
  let let24 := (Not let23)
  let let25 := (binrel% GT.gt skoY let12)
  let let26 := (binrel% GE.ge let14 let17)
  let let27 := (Not let26)
  let let28 := (Not let27)
  let let29 := (Eq let26 let28)
  let let30 := (Eq let28 let26)
  let let31 := (Eq let21 let17)
  let let32 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let8 let13))
  let let33 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let13 let8))
  let let34 := (binrel% GE.ge let13 let1)
  let let35 := (Eq let34 let34)
  let let36 := (binrel% HMul.hMul skoY let4)
  let let37 := (Eq let36 let8)
  let let38 := (binrel% HMul.hMul skoX let4)
  let let39 := (Eq let38 let13)
  let let40 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let38 let36))
  let let41 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let22 let38) let36)
  let let42 := (binrel% LE.le let32 skoZ)
  let let43 := (binrel% HMul.hMul let4 let12)
  let let44 := (binrel% GE.ge let10 let1)
  let let45 := (binrel% LE.le skoZ let12)
  let let46 := (binrel% GE.ge let8 let1)
  let let47 := (binrel% LE.le skoX let12)
  let let48 := (Not let47)
  let let49 := (Not let45)
  let let50 := (binrel% LE.le let41 skoZ)
  let let51 := (Not let50)
  let let52 := (And let51 (And let49 (And let24 let48)))
  let let53 := (binrel% LT.lt let14 let17)
  let let54 := (binrel% GE.ge let12 let17)
  let let55 := (Eq let26 let26)
  let let56 := (binrel% GT.gt skoX let12)
  let let57 := (Not let34)
  let let58 := (Not let57)
  let let59 := (Eq let58 let34)
  let let60 := (Eq let34 let58)
  let let61 := (binrel% HMul.hMul let4 skoX)
  let let62 := (Eq let46 let46)
  let let63 := (binrel% HMul.hMul let2 let14)
  let let64 := (Not let46)
  let let65 := (Not let64)
  let let66 := (Eq let65 let46)
  let let67 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let43 (binrel% HAdd.hAdd let43 let43)))
  let let68 := (binrel% HAdd.hAdd let63 (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let9 let11)))
  let let69 := (binrel% GE.ge let68 let67)
  let let70 := (Not let69)
  let let71 := (binrel% LT.lt let68 let67)
  let let72 := (Not True)
  let let73 := (Eq let46 let65)
  let let74 := (Eq let44 let44)
  let let75 := (Not let44)
  let let76 := (Not let75)
  let let77 := (Eq let76 let44)
  let let78 := (Eq let44 let76)
  let let79 := (binrel% GT.gt skoZ let12)
  let let80 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let12 let12)))
  let let81 := (And let27 (And let75 (And let64 let57)))
  let let82 := (Eq let52 let81)
  let let83 := (Or let44 (Or let46 (Or let34 let26)))
  let let84 := (Or let76 (Or let65 (Or let58 let28)))
  let let85 := (Not let53)
  let let86 := (binrel% LT.lt let11 let43)
  let let87 := (And let5 let79)
  let let88 := (binrel% LT.lt let9 let43)
  let let89 := (And let5 let25)
  let let90 := (binrel% LT.lt let61 let43)
  let let91 := (And let5 let56)
  let let92 := (binrel% LT.lt let63 let18)
  let let93 := (And let3 let53)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let5 True) => -- EVALUATE
fun lean_r2 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let11 let10) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let15 let12) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let30 let29) => -- THEORY_REWRITE_BOOL
fun lean_r9 : let31 => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let35 True) => -- THEORY_REWRITE_BOOL
fun lean_r12 : let37 => -- THEORY_REWRITE_ARITH
fun lean_r13 : let39 => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let42 let26) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let43 let12) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let20 let20) => -- THEORY_REWRITE_ARITH
fun lean_r19 : let30 => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let23 let46) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let52 let52) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let53 let27) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let54 True) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let47 let34) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let55 True) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let56 let48) => -- THEORY_REWRITE_ARITH
fun lean_r27 : let59 => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let59 let60) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let61 let13) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let62 True) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let63 let14) => -- THEORY_REWRITE_ARITH
fun lean_r32 : let66 => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let71 let70) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let72 False) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let66 let73) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let74 True) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let4 let4) => -- THEORY_REWRITE_ARITH
fun lean_r38 : let77 => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let77 let78) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let79 let49) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let80 let17) => -- THEORY_REWRITE_ARITH
fun lean_a42 : let52 => by
have lean_s0 : (Or let76 (Or let65 (Or let58 (Or let28 False)))) :=
  (scope (fun lean_a43 : let75 =>
    (scope (fun lean_a44 : let64 =>
      (scope (fun lean_a45 : let57 =>
        (scope (fun lean_a46 : let27 =>
          have lean_s0 : (Eq let27 let53) := by timed Eq.symm lean_r22
          have lean_s1 : let53 := by timed eqResolve lean_a46 lean_s0
          have lean_s2 : (Or let85 False) :=
            (scope (fun lean_a47 : let53 =>
              have lean_s2 : let3 := by timed trueElim lean_r0
              have lean_s3 : let93 := by timed And.intro lean_s2 lean_a47
              have lean_s4 : (Implies let93 let92) := by arithMulPos [let14, let17, let2], 0
              have lean_s5 : let92 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let5 := by timed trueElim lean_r1
              have lean_s7 : (Eq let48 let57) := by timed flipCongrArg lean_r24 [Not]
              have lean_s8 : (Eq let56 let57) := by timed Eq.trans lean_r26 lean_s7
              have lean_s9 : (Eq let57 let56) := by timed Eq.symm lean_s8
              have lean_s10 : let56 := by timed eqResolve lean_a45 lean_s9
              have lean_s11 : let91 := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies let91 let90) := by arithMulNeg [skoX, let12, let4], 2
              have lean_s13 : let90 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let24 let64) := by timed flipCongrArg lean_r20 [Not]
              have lean_s15 : (Eq let25 let64) := by timed Eq.trans lean_r7 lean_s14
              have lean_s16 : (Eq let64 let25) := by timed Eq.symm lean_s15
              have lean_s17 : let25 := by timed eqResolve lean_a44 lean_s16
              have lean_s18 : let89 := by timed And.intro lean_s6 lean_s17
              have lean_s19 : (Implies let89 let88) := by arithMulNeg [skoY, let12, let4], 2
              have lean_s20 : let88 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : (Eq let49 let75) := by timed flipCongrArg lean_r17 [Not]
              have lean_s22 : (Eq let79 let75) := by timed Eq.trans lean_r40 lean_s21
              have lean_s23 : (Eq let75 let79) := by timed Eq.symm lean_s22
              have lean_s24 : let79 := by timed eqResolve lean_a43 lean_s23
              have lean_s25 : let87 := by timed And.intro lean_s6 lean_s24
              have lean_s26 : (Implies let87 let86) := by arithMulNeg [skoZ, let12, let4], 2
              have lean_s27 : let86 := by timed modusPonens lean_s25 lean_s26
              have lean_s28 : let71 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27]
              let lean_s29 := by timed congrHAdd lean_r2 lean_r3
              let lean_s30 := by timed congrHAdd lean_r29 lean_s29
              have lean_s31 : (Eq let68 let15) := by timed congrHAdd lean_r31 lean_s30
              have lean_s32 : (Eq let68 let12) := by timed Eq.trans lean_s31 lean_r4
              let lean_s33 := by timed flipCongrArg lean_s32 [GE.ge]
              let lean_s34 := by timed congrHAdd lean_r16 lean_r16
              let lean_s35 := by timed congrHAdd lean_r16 lean_s34
              have lean_s36 : (Eq let67 let80) := by timed congrHAdd lean_r5 lean_s35
              have lean_s37 : (Eq let67 let17) := by timed Eq.trans lean_s36 lean_r41
              have lean_s38 : (Eq let69 let54) := by timed congr lean_s33 lean_s37
              have lean_s39 : (Eq let69 True) := by timed Eq.trans lean_s38 lean_r23
              have lean_s40 : (Eq let70 let72) := by timed flipCongrArg lean_s39 [Not]
              have lean_s41 : (Eq let70 False) := by timed Eq.trans lean_s40 lean_r34
              have lean_s42 : (Eq let71 False) := by timed Eq.trans lean_r33 lean_s41
              show False from by timed eqResolve lean_s28 lean_s42
            ))
          have lean_s3 : let85 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let85 let28) := by timed flipCongrArg lean_r22 [Not]
          have lean_s5 : (Eq let85 let26) := by timed Eq.trans lean_s4 lean_r19
          have lean_s6 : let26 := by timed eqResolve lean_s3 lean_s5
          have lean_s7 : (Eq let26 let85) := by timed Eq.symm lean_s5
          have lean_s8 : let85 := by timed eqResolve lean_s6 lean_s7
          show False from by timed contradiction lean_s1 lean_s8
  ))))))))
have lean_s1 : (Not (And let75 (And let64 (And let57 let27)))) := by liftOrNToNeg lean_s0
have lean_s2 : let84 := by timed flipNotAnd lean_s1 [let75, let64, let57, let27]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let74 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let78 let74) := by timed congr lean_s5 lean_r38
have lean_s7 : (Eq let78 True) := by timed Eq.trans lean_s6 lean_r36
have lean_s8 : (Eq let77 True) := by timed Eq.trans lean_r39 lean_s7
have lean_s9 : let77 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let62 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let73 let62) := by timed congr lean_s12 lean_r32
have lean_s14 : (Eq let73 True) := by timed Eq.trans lean_s13 lean_r30
have lean_s15 : (Eq let66 True) := by timed Eq.trans lean_r35 lean_s14
have lean_s16 : let66 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let35 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let60 let35) := by timed congr lean_s19 lean_r27
have lean_s21 : (Eq let60 True) := by timed Eq.trans lean_s20 lean_r11
have lean_s22 : (Eq let59 True) := by timed Eq.trans lean_r28 lean_s21
have lean_s23 : let59 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : let55 := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq let29 let55) := by timed congr lean_s26 lean_r19
have lean_s28 : (Eq let29 True) := by timed Eq.trans lean_s27 lean_r25
have lean_s29 : (Eq let30 True) := by timed Eq.trans lean_r8 lean_s28
have lean_s30 : let30 := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s24 lean_s30
let lean_s32 := by timed congr lean_s17 lean_s31
have lean_s33 : (Eq let84 let83) := by timed congr lean_s10 lean_s32
have lean_s34 : let83 := by timed eqResolve lean_s2 lean_s33
have lean_s35 : (Or let26 (Or let44 (Or let46 let34))) := by permutateOr lean_s34, [3, 0, 1, 2], (- 1)
have lean_s36 : (Eq And And) := by timed rfl
let lean_s37 := by timed flipCongrArg lean_r18 [HMul.hMul]
have lean_s38 : (Eq let19 let19) := by timed rfl
have lean_s39 : (Eq let21 let21) := by timed congr lean_s37 lean_s38
have lean_s40 : let31 := by timed Eq.trans lean_s39 lean_r9
have lean_s41 : (Eq let22 let17) := by timed Eq.trans lean_r6 lean_s40
have lean_s42 : (Eq skoX skoX) := by timed rfl
let lean_s43 := by timed flipCongrArg lean_s42 [HMul.hMul]
have lean_s44 : (Eq let38 let38) := by timed congr lean_s43 lean_r37
have lean_s45 : let39 := by timed Eq.trans lean_s44 lean_r13
have lean_s46 : (Eq skoY skoY) := by timed rfl
let lean_s47 := by timed flipCongrArg lean_s46 [HMul.hMul]
have lean_s48 : (Eq let36 let36) := by timed congr lean_s47 lean_r37
have lean_s49 : let37 := by timed Eq.trans lean_s48 lean_r12
let lean_s50 := by timed congrHAdd lean_s45 lean_s49
have lean_s51 : (Eq let40 let33) := by timed congrHAdd lean_s41 lean_s50
have lean_s52 : (Eq let40 let32) := by timed Eq.trans lean_s51 lean_r10
have lean_s53 : (Eq let41 let32) := by timed Eq.trans lean_r14 lean_s52
let lean_s54 := by timed flipCongrArg lean_s53 [LE.le]
have lean_s55 : (Eq skoZ skoZ) := by timed rfl
have lean_s56 : (Eq let50 let42) := by timed congr lean_s54 lean_s55
have lean_s57 : (Eq let50 let26) := by timed Eq.trans lean_s56 lean_r15
have lean_s58 : (Eq let51 let27) := by timed flipCongrArg lean_s57 [Not]
let lean_s59 := by timed congr lean_s36 lean_s58
have lean_s60 : (Eq let49 let75) := by timed flipCongrArg lean_r17 [Not]
let lean_s61 := by timed congr lean_s36 lean_s60
have lean_s62 : (Eq let24 let64) := by timed flipCongrArg lean_r20 [Not]
let lean_s63 := by timed congr lean_s36 lean_s62
have lean_s64 : (Eq let48 let57) := by timed flipCongrArg lean_r24 [Not]
let lean_s65 := by timed congr lean_s63 lean_s64
let lean_s66 := by timed congr lean_s61 lean_s65
have lean_s67 : let82 := by timed congr lean_s59 lean_s66
have lean_s68 : let82 := by timed Eq.trans lean_r21 lean_s67
have lean_s69 : let81 := by timed eqResolve lean_a42 lean_s68
have lean_s70 : let57 := by andElim lean_s69, 3
let lean_s71 := by R1 lean_s35, lean_s70, let34, [(- 1), 0]
have lean_s72 : let64 := by andElim lean_s69, 2
let lean_s73 := by R1 lean_s71, lean_s72, let46, [(- 1), 0]
have lean_s74 : let75 := by andElim lean_s69, 1
let lean_s75 := by R1 lean_s73, lean_s74, let44, [(- 1), 0]
have lean_s76 : let27 := by andElim lean_s69, 0
exact (show False from by R1 lean_s75, lean_s76, let26, [0, 0])


