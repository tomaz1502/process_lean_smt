open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 skoZ)
  let let5 := (binrel% HAdd.hAdd skoZ let4)
  let let6 := (binrel% HDiv.hDiv let2 (Int.ofNat 2))
  let let7 := (Neg.neg let6)
  let let8 := (Rat.ofInt 1)
  let let9 := (binrel% HMul.hMul let8 let7)
  let let10 := (Neg.neg let8)
  let let11 := (binrel% HMul.hMul let10 let1)
  let let12 := (Int.ofNat 0)
  let let13 := (binrel% GT.gt let8 let12)
  let let14 := (binrel% HAdd.hAdd let7 let1)
  let let15 := (binrel% LE.le skoZ let1)
  let let16 := (Not let15)
  let let17 := (binrel% GT.gt skoZ let1)
  let let18 := (Not True)
  let let19 := (binrel% LT.lt let10 let12)
  let let20 := (binrel% GE.ge let4 let12)
  let let21 := (Not let20)
  let let22 := (Not let21)
  let let23 := (binrel% HMul.hMul let3 skoX)
  let let24 := (binrel% GE.ge let23 let12)
  let let25 := (binrel% LE.le skoX let1)
  let let26 := (binrel% HMul.hMul let8 skoZ)
  let let27 := (binrel% HMul.hMul let10 let6)
  let let28 := (binrel% HDiv.hDiv let10 (Rat.ofInt 2))
  let let29 := (binrel% HMul.hMul let3 skoY)
  let let30 := (binrel% GE.ge let29 let12)
  let let31 := (binrel% LE.le skoY let1)
  let let32 := (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) let2)
  let let33 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let29 let23))
  let let34 := (binrel% LE.le let33 skoZ)
  let let35 := (binrel% GE.ge let4 let6)
  let let36 := (binrel% LE.le skoZ let7)
  let let37 := (binrel% GE.ge let1 let7)
  let let38 := (binrel% HMul.hMul skoY let10)
  let let39 := (Eq let38 let29)
  let let40 := (Not let25)
  let let41 := (Not let31)
  let let42 := (binrel% LE.le skoZ let28)
  let let43 := (binrel% HMul.hMul skoX let10)
  let let44 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let8 let43) let38)
  let let45 := (binrel% LE.le let44 skoZ)
  let let46 := (And let45 (And let42 (And let16 (And let41 let40))))
  let let47 := (binrel% HMul.hMul let10 skoZ)
  let let48 := (Eq let27 let7)
  let let49 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let23 let29))
  let let50 := (binrel% HAdd.hAdd let9 let11)
  let let51 := (binrel% HAdd.hAdd let26 let47)
  let let52 := (binrel% GE.ge let51 let50)
  let let53 := (Not let52)
  let let54 := (binrel% LT.lt let51 let50)
  let let55 := (Eq let43 let23)
  let let56 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let43 let38))
  let let57 := (Not let24)
  let let58 := (Not let30)
  let let59 := (And let32 (And let35 (And let21 (And let58 let57))))
  let let60 := (Eq let46 let59)
  let let61 := (Not let35)
  let let62 := (Or let20 let61)
  let let63 := (Or let22 let61)
  let let64 := (binrel% LT.lt let47 let11)
  let let65 := (And let19 let17)
  let let66 := (binrel% LE.le let26 let9)
  let let67 := (And let13 let36)
(Eq let5 let1) → (Eq let9 let7) → (Eq let11 let1) → (Eq let13 True) → (Eq let14 let7) → (Eq let17 let16) → (Eq let18 False) → (Eq let19 True) → (Eq let22 let20) → (Eq let25 let24) → (Eq let26 skoZ) → (Eq let28 let27) → (Eq let31 let30) → (Eq let34 let32) → (Eq let36 let35) → (Eq let37 True) → (Eq let15 let20) → let39 → (Eq let46 let46) → (Eq let47 let4) → (Eq let10 let10) → let48 → (Eq let49 let33) → (Eq let54 let53) → let55 → (Eq let44 let56) → let46 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 skoZ)
  let let5 := (binrel% HAdd.hAdd skoZ let4)
  let let6 := (binrel% HDiv.hDiv let2 (Int.ofNat 2))
  let let7 := (Neg.neg let6)
  let let8 := (Rat.ofInt 1)
  let let9 := (binrel% HMul.hMul let8 let7)
  let let10 := (Neg.neg let8)
  let let11 := (binrel% HMul.hMul let10 let1)
  let let12 := (Int.ofNat 0)
  let let13 := (binrel% GT.gt let8 let12)
  let let14 := (binrel% HAdd.hAdd let7 let1)
  let let15 := (binrel% LE.le skoZ let1)
  let let16 := (Not let15)
  let let17 := (binrel% GT.gt skoZ let1)
  let let18 := (Not True)
  let let19 := (binrel% LT.lt let10 let12)
  let let20 := (binrel% GE.ge let4 let12)
  let let21 := (Not let20)
  let let22 := (Not let21)
  let let23 := (binrel% HMul.hMul let3 skoX)
  let let24 := (binrel% GE.ge let23 let12)
  let let25 := (binrel% LE.le skoX let1)
  let let26 := (binrel% HMul.hMul let8 skoZ)
  let let27 := (binrel% HMul.hMul let10 let6)
  let let28 := (binrel% HDiv.hDiv let10 (Rat.ofInt 2))
  let let29 := (binrel% HMul.hMul let3 skoY)
  let let30 := (binrel% GE.ge let29 let12)
  let let31 := (binrel% LE.le skoY let1)
  let let32 := (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) let2)
  let let33 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let29 let23))
  let let34 := (binrel% LE.le let33 skoZ)
  let let35 := (binrel% GE.ge let4 let6)
  let let36 := (binrel% LE.le skoZ let7)
  let let37 := (binrel% GE.ge let1 let7)
  let let38 := (binrel% HMul.hMul skoY let10)
  let let39 := (Eq let38 let29)
  let let40 := (Not let25)
  let let41 := (Not let31)
  let let42 := (binrel% LE.le skoZ let28)
  let let43 := (binrel% HMul.hMul skoX let10)
  let let44 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let8 let43) let38)
  let let45 := (binrel% LE.le let44 skoZ)
  let let46 := (And let45 (And let42 (And let16 (And let41 let40))))
  let let47 := (binrel% HMul.hMul let10 skoZ)
  let let48 := (Eq let27 let7)
  let let49 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let23 let29))
  let let50 := (binrel% HAdd.hAdd let9 let11)
  let let51 := (binrel% HAdd.hAdd let26 let47)
  let let52 := (binrel% GE.ge let51 let50)
  let let53 := (Not let52)
  let let54 := (binrel% LT.lt let51 let50)
  let let55 := (Eq let43 let23)
  let let56 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let43 let38))
  let let57 := (Not let24)
  let let58 := (Not let30)
  let let59 := (And let32 (And let35 (And let21 (And let58 let57))))
  let let60 := (Eq let46 let59)
  let let61 := (Not let35)
  let let62 := (Or let20 let61)
  let let63 := (Or let22 let61)
  let let64 := (binrel% LT.lt let47 let11)
  let let65 := (And let19 let17)
  let let66 := (binrel% LE.le let26 let9)
  let let67 := (And let13 let36)
fun lean_r0 : (Eq let5 let1) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let9 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let11 let1) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let13 True) => -- EVALUATE
fun lean_r4 : (Eq let14 let7) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let18 False) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let19 True) => -- EVALUATE
fun lean_r8 : (Eq let22 let20) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let26 skoZ) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let34 let32) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let37 True) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let15 let20) => -- THEORY_REWRITE_ARITH
fun lean_r17 : let39 => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let46 let46) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let47 let4) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let10 let10) => -- THEORY_REWRITE_ARITH
fun lean_r21 : let48 => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let49 let33) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let54 let53) => -- THEORY_REWRITE_ARITH
fun lean_r24 : let55 => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let44 let56) => -- THEORY_REWRITE_ARITH
fun lean_a26 : let46 => by
have lean_s0 : (Or let22 (Or let61 False)) :=
  (scope (fun lean_a27 : let21 =>
    (scope (fun lean_a28 : let35 =>
      have lean_s0 : let13 := by timed trueElim lean_r3
      have lean_s1 : (Eq let35 let36) := by timed Eq.symm lean_r14
      have lean_s2 : let36 := by timed eqResolve lean_a28 lean_s1
      have lean_s3 : let67 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let67 let66) := by arithMulPos [skoZ, let7, let8], 1
      have lean_s5 : let66 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let19 := by timed trueElim lean_r7
      have lean_s7 : (Eq let16 let21) := by timed flipCongrArg lean_r16 [Not]
      have lean_s8 : (Eq let17 let21) := by timed Eq.trans lean_r5 lean_s7
      have lean_s9 : (Eq let21 let17) := by timed Eq.symm lean_s8
      have lean_s10 : let17 := by timed eqResolve lean_a27 lean_s9
      have lean_s11 : let65 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let65 let64) := by arithMulNeg [skoZ, let1, let10], 2
      have lean_s13 : let64 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let54 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r10 [HAdd.hAdd]
      have lean_s16 : (Eq let51 let5) := by timed congr lean_s15 lean_r19
      have lean_s17 : (Eq let51 let1) := by timed Eq.trans lean_s16 lean_r0
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r1 [HAdd.hAdd]
      have lean_s20 : (Eq let50 let14) := by timed congr lean_s19 lean_r2
      have lean_s21 : (Eq let50 let7) := by timed Eq.trans lean_s20 lean_r4
      have lean_s22 : (Eq let52 let37) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let52 True) := by timed Eq.trans lean_s22 lean_r15
      have lean_s24 : (Eq let53 let18) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let53 False) := by timed Eq.trans lean_s24 lean_r6
      have lean_s26 : (Eq let54 False) := by timed Eq.trans lean_r23 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let21 let35)) := by liftOrNToNeg lean_s0
have lean_s2 : let63 := by timed flipNotAnd lean_s1 [let21, let35]
let lean_s3 := by timed flipCongrArg lean_r8 [Or]
have lean_s4 : (Eq let61 let61) := by timed rfl
have lean_s5 : (Eq let63 let62) := by timed congr lean_s3 lean_s4
have lean_s6 : let62 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
have lean_s8 : (Eq let8 let8) := by timed rfl
have lean_s9 : (Eq skoX skoX) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s11 : (Eq let43 let43) := by timed congr lean_s10 lean_r20
have lean_s12 : let55 := by timed Eq.trans lean_s11 lean_r24
have lean_s13 : (Eq skoY skoY) := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [HMul.hMul]
have lean_s15 : (Eq let38 let38) := by timed congr lean_s14 lean_r20
have lean_s16 : let39 := by timed Eq.trans lean_s15 lean_r17
let lean_s17 := by timed congrHAdd lean_s12 lean_s16
have lean_s18 : (Eq let56 let49) := by timed congrHAdd lean_s8 lean_s17
have lean_s19 : (Eq let56 let33) := by timed Eq.trans lean_s18 lean_r22
have lean_s20 : (Eq let44 let33) := by timed Eq.trans lean_r25 lean_s19
let lean_s21 := by timed flipCongrArg lean_s20 [LE.le]
have lean_s22 : (Eq skoZ skoZ) := by timed rfl
have lean_s23 : (Eq let45 let34) := by timed congr lean_s21 lean_s22
have lean_s24 : (Eq let45 let32) := by timed Eq.trans lean_s23 lean_r13
let lean_s25 := by timed congr lean_s7 lean_s24
let lean_s26 := by timed flipCongrArg lean_s22 [LE.le]
let lean_s27 := by timed flipCongrArg lean_r20 [HMul.hMul]
have lean_s28 : (Eq let6 let6) := by timed rfl
have lean_s29 : (Eq let27 let27) := by timed congr lean_s27 lean_s28
have lean_s30 : let48 := by timed Eq.trans lean_s29 lean_r21
have lean_s31 : (Eq let28 let7) := by timed Eq.trans lean_r11 lean_s30
have lean_s32 : (Eq let42 let36) := by timed congr lean_s26 lean_s31
have lean_s33 : (Eq let42 let35) := by timed Eq.trans lean_s32 lean_r14
let lean_s34 := by timed congr lean_s7 lean_s33
have lean_s35 : (Eq let16 let21) := by timed flipCongrArg lean_r16 [Not]
let lean_s36 := by timed congr lean_s7 lean_s35
have lean_s37 : (Eq let41 let58) := by timed flipCongrArg lean_r12 [Not]
let lean_s38 := by timed congr lean_s7 lean_s37
have lean_s39 : (Eq let40 let57) := by timed flipCongrArg lean_r9 [Not]
let lean_s40 := by timed congr lean_s38 lean_s39
let lean_s41 := by timed congr lean_s36 lean_s40
let lean_s42 := by timed congr lean_s34 lean_s41
have lean_s43 : let60 := by timed congr lean_s25 lean_s42
have lean_s44 : let60 := by timed Eq.trans lean_r18 lean_s43
have lean_s45 : let59 := by timed eqResolve lean_a26 lean_s44
have lean_s46 : let21 := by andElim lean_s45, 2
let lean_s47 := by R1 lean_s6, lean_s46, let20, [(- 1), 0]
have lean_s48 : let35 := by andElim lean_s45, 1
exact (show False from by R2 lean_s47, lean_s48, let35, [0, 0])


