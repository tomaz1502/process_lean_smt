open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% LE.le skoY let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoY let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% HMul.hMul let8 let4)
  let let10 := (Int.ofNat 5)
  let let11 := (binrel% HDiv.hDiv (Int.ofNat 32) let10)
  let let12 := (Neg.neg let11)
  let let13 := (binrel% HMul.hMul let2 let12)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let9 let9)))
  let let15 := (binrel% HMul.hMul let8 skoY)
  let let16 := (binrel% HMul.hMul let8 skoX)
  let let17 := (binrel% HMul.hMul let8 skoZ)
  let let18 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let19 := (binrel% HMul.hMul let2 let18)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 let15)))
  let let21 := (binrel% GE.ge let20 let14)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let20 let14)
  let let24 := (Int.ofNat 1)
  let let25 := (Neg.neg let24)
  let let26 := (binrel% HMul.hMul let25 skoZ)
  let let27 := (binrel% HMul.hMul let25 skoX)
  let let28 := (binrel% HMul.hMul let25 skoY)
  let let29 := (binrel% LE.le skoZ let4)
  let let30 := (Not let29)
  let let31 := (binrel% GT.gt skoZ let4)
  let let32 := (binrel% HMul.hMul skoY let8)
  let let33 := (binrel% HMul.hMul skoX let8)
  let let34 := (Neg.neg (Rat.ofInt 32))
  let let35 := (binrel% HDiv.hDiv let34 (Rat.ofInt 5))
  let let36 := (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let33 let32))
  let let37 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let35 let33) let32)
  let let38 := (binrel% GE.ge (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 let26)) let11)
  let let39 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let28 let27))
  let let40 := (binrel% LE.le skoZ let39)
  let let41 := (binrel% GE.ge let28 let1)
  let let42 := (Not let41)
  let let43 := (Not let42)
  let let44 := (Eq let41 let43)
  let let45 := (Eq let43 let41)
  let let46 := (Eq let33 let27)
  let let47 := (binrel% GE.ge let27 let1)
  let let48 := (Not let47)
  let let49 := (Not let48)
  let let50 := (Eq let49 let47)
  let let51 := (binrel% GE.ge let26 let1)
  let let52 := (Eq let32 let28)
  let let53 := (binrel% HAdd.hAdd let27 let28)
  let let54 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let26 let53))
  let let55 := (binrel% HDiv.hDiv let24 let10)
  let let56 := (binrel% HMul.hMul let34 let55)
  let let57 := (Not let51)
  let let58 := (Not let57)
  let let59 := (Eq let51 let58)
  let let60 := (Eq let58 let51)
  let let61 := (binrel% LE.le skoX let4)
  let let62 := (Not let61)
  let let63 := (binrel% GT.gt skoX let4)
  let let64 := (Eq let56 let12)
  let let65 := (binrel% LE.le skoZ let37)
  let let66 := (And let65 (And let30 (And let6 let62)))
  let let67 := (Eq let47 let47)
  let let68 := (Eq let47 let49)
  let let69 := (binrel% HAdd.hAdd let12 let53)
  let let70 := (Eq let41 let41)
  let let71 := (Eq let51 let51)
  let let72 := (binrel% LE.le let18 let12)
  let let73 := (Not True)
  let let74 := (Not let72)
  let let75 := (binrel% GT.gt let18 let12)
  let let76 := (Eq let75 let74)
  let let77 := (binrel% GE.ge let4 let12)
  let let78 := (binrel% LT.lt let8 let1)
  let let79 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let4 let4)))
  let let80 := (And let38 (And let57 (And let42 let48)))
  let let81 := (Eq let66 let80)
  let let82 := (Not let38)
  let let83 := (Or let41 (Or let47 (Or let51 let82)))
  let let84 := (Or let43 (Or let49 (Or let58 let82)))
  let let85 := (binrel% LT.lt let15 let9)
  let let86 := (And let78 let7)
  let let87 := (binrel% LT.lt let16 let9)
  let let88 := (And let78 let63)
  let let89 := (binrel% LT.lt let17 let9)
  let let90 := (And let78 let31)
  let let91 := (binrel% LE.le let19 let13)
  let let92 := (And let3 let72)
(Eq let3 True) → (Eq let7 let6) → (Eq let23 let22) → (Eq let19 let18) → (Eq let17 let26) → (Eq let16 let27) → (Eq let15 let28) → (Eq let31 let30) → (Eq let37 let36) → (Eq let40 let38) → (Eq let45 let44) → let46 → let50 → (Eq let8 let8) → let45 → (Eq let29 let51) → let52 → (Eq let54 let4) → (Eq let35 let56) → (Eq let60 let59) → (Eq let63 let62) → let64 → (Eq let5 let41) → (Eq let66 let66) → (Eq let61 let47) → (Eq let67 True) → (Eq let50 let68) → (Eq let69 let39) → (Eq let70 True) → (Eq let71 True) → (Eq let9 let4) → (Eq let13 let12) → (Eq let72 let38) → (Eq let73 False) → (Eq let34 let34) → let60 → let76 → (Eq let77 True) → (Eq let78 True) → (Eq let79 let12) → let66 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% LE.le skoY let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoY let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% HMul.hMul let8 let4)
  let let10 := (Int.ofNat 5)
  let let11 := (binrel% HDiv.hDiv (Int.ofNat 32) let10)
  let let12 := (Neg.neg let11)
  let let13 := (binrel% HMul.hMul let2 let12)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let9 let9)))
  let let15 := (binrel% HMul.hMul let8 skoY)
  let let16 := (binrel% HMul.hMul let8 skoX)
  let let17 := (binrel% HMul.hMul let8 skoZ)
  let let18 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let19 := (binrel% HMul.hMul let2 let18)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 let15)))
  let let21 := (binrel% GE.ge let20 let14)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let20 let14)
  let let24 := (Int.ofNat 1)
  let let25 := (Neg.neg let24)
  let let26 := (binrel% HMul.hMul let25 skoZ)
  let let27 := (binrel% HMul.hMul let25 skoX)
  let let28 := (binrel% HMul.hMul let25 skoY)
  let let29 := (binrel% LE.le skoZ let4)
  let let30 := (Not let29)
  let let31 := (binrel% GT.gt skoZ let4)
  let let32 := (binrel% HMul.hMul skoY let8)
  let let33 := (binrel% HMul.hMul skoX let8)
  let let34 := (Neg.neg (Rat.ofInt 32))
  let let35 := (binrel% HDiv.hDiv let34 (Rat.ofInt 5))
  let let36 := (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let33 let32))
  let let37 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let35 let33) let32)
  let let38 := (binrel% GE.ge (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 let26)) let11)
  let let39 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let28 let27))
  let let40 := (binrel% LE.le skoZ let39)
  let let41 := (binrel% GE.ge let28 let1)
  let let42 := (Not let41)
  let let43 := (Not let42)
  let let44 := (Eq let41 let43)
  let let45 := (Eq let43 let41)
  let let46 := (Eq let33 let27)
  let let47 := (binrel% GE.ge let27 let1)
  let let48 := (Not let47)
  let let49 := (Not let48)
  let let50 := (Eq let49 let47)
  let let51 := (binrel% GE.ge let26 let1)
  let let52 := (Eq let32 let28)
  let let53 := (binrel% HAdd.hAdd let27 let28)
  let let54 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let26 let53))
  let let55 := (binrel% HDiv.hDiv let24 let10)
  let let56 := (binrel% HMul.hMul let34 let55)
  let let57 := (Not let51)
  let let58 := (Not let57)
  let let59 := (Eq let51 let58)
  let let60 := (Eq let58 let51)
  let let61 := (binrel% LE.le skoX let4)
  let let62 := (Not let61)
  let let63 := (binrel% GT.gt skoX let4)
  let let64 := (Eq let56 let12)
  let let65 := (binrel% LE.le skoZ let37)
  let let66 := (And let65 (And let30 (And let6 let62)))
  let let67 := (Eq let47 let47)
  let let68 := (Eq let47 let49)
  let let69 := (binrel% HAdd.hAdd let12 let53)
  let let70 := (Eq let41 let41)
  let let71 := (Eq let51 let51)
  let let72 := (binrel% LE.le let18 let12)
  let let73 := (Not True)
  let let74 := (Not let72)
  let let75 := (binrel% GT.gt let18 let12)
  let let76 := (Eq let75 let74)
  let let77 := (binrel% GE.ge let4 let12)
  let let78 := (binrel% LT.lt let8 let1)
  let let79 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let4 let4)))
  let let80 := (And let38 (And let57 (And let42 let48)))
  let let81 := (Eq let66 let80)
  let let82 := (Not let38)
  let let83 := (Or let41 (Or let47 (Or let51 let82)))
  let let84 := (Or let43 (Or let49 (Or let58 let82)))
  let let85 := (binrel% LT.lt let15 let9)
  let let86 := (And let78 let7)
  let let87 := (binrel% LT.lt let16 let9)
  let let88 := (And let78 let63)
  let let89 := (binrel% LT.lt let17 let9)
  let let90 := (And let78 let31)
  let let91 := (binrel% LE.le let19 let13)
  let let92 := (And let3 let72)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let17 let26) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let16 let27) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let15 let28) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let40 let38) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let45 let44) => -- THEORY_REWRITE_BOOL
fun lean_r11 : let46 => -- THEORY_REWRITE_ARITH
fun lean_r12 : let50 => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let8 let8) => -- THEORY_REWRITE_ARITH
fun lean_r14 : let45 => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let29 let51) => -- THEORY_REWRITE_ARITH
fun lean_r16 : let52 => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let54 let4) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let35 let56) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let60 let59) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r21 : let64 => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let5 let41) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let66 let66) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let61 let47) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let67 True) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let50 let68) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let69 let39) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let70 True) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let71 True) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let9 let4) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let72 let38) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let73 False) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let34 let34) => -- THEORY_REWRITE_ARITH
fun lean_r35 : let60 => -- THEORY_REWRITE_BOOL
fun lean_r36 : let76 => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let77 True) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let78 True) => -- EVALUATE
fun lean_r39 : (Eq let79 let12) => -- THEORY_REWRITE_ARITH
fun lean_a40 : let66 => by
have lean_s0 : (Or let43 (Or let49 (Or let58 (Or let82 False)))) :=
  (scope (fun lean_a41 : let42 =>
    (scope (fun lean_a42 : let48 =>
      (scope (fun lean_a43 : let57 =>
        (scope (fun lean_a44 : let38 =>
          have lean_s0 : (Eq let38 let72) := by timed Eq.symm lean_r32
          have lean_s1 : let72 := by timed eqResolve lean_a44 lean_s0
          have lean_s2 : (Or let74 False) :=
            (scope (fun lean_a45 : let72 =>
              have lean_s2 : let3 := by timed trueElim lean_r0
              have lean_s3 : let92 := by timed And.intro lean_s2 lean_a45
              have lean_s4 : (Implies let92 let91) := by arithMulPos [let18, let12, let2], 1
              have lean_s5 : let91 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let78 := by timed trueElim lean_r38
              have lean_s7 : (Eq let30 let57) := by timed flipCongrArg lean_r15 [Not]
              have lean_s8 : (Eq let31 let57) := by timed Eq.trans lean_r7 lean_s7
              have lean_s9 : (Eq let57 let31) := by timed Eq.symm lean_s8
              have lean_s10 : let31 := by timed eqResolve lean_a43 lean_s9
              have lean_s11 : let90 := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies let90 let89) := by arithMulNeg [skoZ, let4, let8], 2
              have lean_s13 : let89 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let62 let48) := by timed flipCongrArg lean_r24 [Not]
              have lean_s15 : (Eq let63 let48) := by timed Eq.trans lean_r20 lean_s14
              have lean_s16 : (Eq let48 let63) := by timed Eq.symm lean_s15
              have lean_s17 : let63 := by timed eqResolve lean_a42 lean_s16
              have lean_s18 : let88 := by timed And.intro lean_s6 lean_s17
              have lean_s19 : (Implies let88 let87) := by arithMulNeg [skoX, let4, let8], 2
              have lean_s20 : let87 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : (Eq let6 let42) := by timed flipCongrArg lean_r22 [Not]
              have lean_s22 : (Eq let7 let42) := by timed Eq.trans lean_r1 lean_s21
              have lean_s23 : (Eq let42 let7) := by timed Eq.symm lean_s22
              have lean_s24 : let7 := by timed eqResolve lean_a41 lean_s23
              have lean_s25 : let86 := by timed And.intro lean_s6 lean_s24
              have lean_s26 : (Implies let86 let85) := by arithMulNeg [skoY, let4, let8], 2
              have lean_s27 : let85 := by timed modusPonens lean_s25 lean_s26
              have lean_s28 : let23 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27]
              let lean_s29 := by timed congrHAdd lean_r5 lean_r6
              let lean_s30 := by timed congrHAdd lean_r4 lean_s29
              have lean_s31 : (Eq let20 let54) := by timed congrHAdd lean_r3 lean_s30
              have lean_s32 : (Eq let20 let4) := by timed Eq.trans lean_s31 lean_r17
              let lean_s33 := by timed flipCongrArg lean_s32 [GE.ge]
              let lean_s34 := by timed congrHAdd lean_r30 lean_r30
              let lean_s35 := by timed congrHAdd lean_r30 lean_s34
              have lean_s36 : (Eq let14 let79) := by timed congrHAdd lean_r31 lean_s35
              have lean_s37 : (Eq let14 let12) := by timed Eq.trans lean_s36 lean_r39
              have lean_s38 : (Eq let21 let77) := by timed congr lean_s33 lean_s37
              have lean_s39 : (Eq let21 True) := by timed Eq.trans lean_s38 lean_r37
              have lean_s40 : (Eq let22 let73) := by timed flipCongrArg lean_s39 [Not]
              have lean_s41 : (Eq let22 False) := by timed Eq.trans lean_s40 lean_r33
              have lean_s42 : (Eq let23 False) := by timed Eq.trans lean_r2 lean_s41
              show False from by timed eqResolve lean_s28 lean_s42
            ))
          have lean_s3 : let74 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let74 let82) := by timed flipCongrArg lean_r32 [Not]
          have lean_s5 : (Eq let75 let82) := by timed Eq.trans lean_r36 lean_s4
          have lean_s6 : (Eq let82 let75) := by timed Eq.symm lean_s5
          have lean_s7 : (Eq let74 let75) := by timed Eq.trans lean_s4 lean_s6
          have lean_s8 : let75 := by timed eqResolve lean_s3 lean_s7
          have lean_s9 : (Eq let82 let74) := by timed Eq.symm lean_s4
          have lean_s10 : let76 := by timed Eq.trans lean_s5 lean_s9
          have lean_s11 : let74 := by timed eqResolve lean_s8 lean_s10
          show False from by timed contradiction lean_s1 lean_s11
  ))))))))
have lean_s1 : (Not (And let42 (And let48 (And let57 let38)))) := by liftOrNToNeg lean_s0
have lean_s2 : let84 := by timed flipNotAnd lean_s1 [let42, let48, let57, let38]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let70 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let44 let70) := by timed congr lean_s5 lean_r14
have lean_s7 : (Eq let44 True) := by timed Eq.trans lean_s6 lean_r28
have lean_s8 : (Eq let45 True) := by timed Eq.trans lean_r10 lean_s7
have lean_s9 : let45 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let67 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let68 let67) := by timed congr lean_s12 lean_r12
have lean_s14 : (Eq let68 True) := by timed Eq.trans lean_s13 lean_r25
have lean_s15 : (Eq let50 True) := by timed Eq.trans lean_r26 lean_s14
have lean_s16 : let50 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let71 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let59 let71) := by timed congr lean_s19 lean_r35
have lean_s21 : (Eq let59 True) := by timed Eq.trans lean_s20 lean_r29
have lean_s22 : (Eq let60 True) := by timed Eq.trans lean_r19 lean_s21
have lean_s23 : let60 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : (Eq let82 let82) := by timed rfl
let lean_s26 := by timed congr lean_s24 lean_s25
let lean_s27 := by timed congr lean_s17 lean_s26
have lean_s28 : (Eq let84 let83) := by timed congr lean_s10 lean_s27
have lean_s29 : let83 := by timed eqResolve lean_s2 lean_s28
have lean_s30 : (Or let51 (Or let41 (Or let47 let82))) := by permutateOr lean_s29, [2, 0, 1, 3], (- 1)
have lean_s31 : (Eq And And) := by timed rfl
have lean_s32 : (Eq skoZ skoZ) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
let lean_s34 := by timed flipCongrArg lean_r34 [HMul.hMul]
have lean_s35 : (Eq let55 let55) := by timed rfl
have lean_s36 : (Eq let56 let56) := by timed congr lean_s34 lean_s35
have lean_s37 : let64 := by timed Eq.trans lean_s36 lean_r21
have lean_s38 : (Eq let35 let12) := by timed Eq.trans lean_r18 lean_s37
have lean_s39 : (Eq skoX skoX) := by timed rfl
let lean_s40 := by timed flipCongrArg lean_s39 [HMul.hMul]
have lean_s41 : (Eq let33 let33) := by timed congr lean_s40 lean_r13
have lean_s42 : let46 := by timed Eq.trans lean_s41 lean_r11
have lean_s43 : (Eq skoY skoY) := by timed rfl
let lean_s44 := by timed flipCongrArg lean_s43 [HMul.hMul]
have lean_s45 : (Eq let32 let32) := by timed congr lean_s44 lean_r13
have lean_s46 : let52 := by timed Eq.trans lean_s45 lean_r16
let lean_s47 := by timed congrHAdd lean_s42 lean_s46
have lean_s48 : (Eq let36 let69) := by timed congrHAdd lean_s38 lean_s47
have lean_s49 : (Eq let36 let39) := by timed Eq.trans lean_s48 lean_r27
have lean_s50 : (Eq let37 let39) := by timed Eq.trans lean_r8 lean_s49
have lean_s51 : (Eq let65 let40) := by timed congr lean_s33 lean_s50
have lean_s52 : (Eq let65 let38) := by timed Eq.trans lean_s51 lean_r9
let lean_s53 := by timed congr lean_s31 lean_s52
have lean_s54 : (Eq let30 let57) := by timed flipCongrArg lean_r15 [Not]
let lean_s55 := by timed congr lean_s31 lean_s54
have lean_s56 : (Eq let6 let42) := by timed flipCongrArg lean_r22 [Not]
let lean_s57 := by timed congr lean_s31 lean_s56
have lean_s58 : (Eq let62 let48) := by timed flipCongrArg lean_r24 [Not]
let lean_s59 := by timed congr lean_s57 lean_s58
let lean_s60 := by timed congr lean_s55 lean_s59
have lean_s61 : let81 := by timed congr lean_s53 lean_s60
have lean_s62 : let81 := by timed Eq.trans lean_r23 lean_s61
have lean_s63 : let80 := by timed eqResolve lean_a40 lean_s62
have lean_s64 : let48 := by andElim lean_s63, 3
let lean_s65 := by R1 lean_s30, lean_s64, let47, [(- 1), 0]
have lean_s66 : let42 := by andElim lean_s63, 2
let lean_s67 := by R1 lean_s65, lean_s66, let41, [(- 1), 0]
have lean_s68 : let57 := by andElim lean_s63, 1
let lean_s69 := by R1 lean_s67, lean_s68, let51, [(- 1), 0]
have lean_s70 : let38 := by andElim lean_s63, 0
exact (show False from by R2 lean_s69, lean_s70, let38, [0, 0])


