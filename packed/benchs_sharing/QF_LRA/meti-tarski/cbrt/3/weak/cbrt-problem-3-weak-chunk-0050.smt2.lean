open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 20)
  let let5 := (Int.ofNat 1)
  let let6 := (binrel% HDiv.hDiv let5 let4)
  let let7 := (binrel% LE.le skoZ let6)
  let let8 := (Not let7)
  let let9 := (binrel% GT.gt skoZ let6)
  let let10 := (Neg.neg let2)
  let let11 := (binrel% LT.lt let10 let1)
  let let12 := (Neg.neg let5)
  let let13 := (binrel% HMul.hMul let12 skoX)
  let let14 := (binrel% HMul.hMul let10 skoX)
  let let15 := (binrel% HMul.hMul let12 skoY)
  let let16 := (binrel% HMul.hMul let10 skoY)
  let let17 := (Rat.ofInt 0)
  let let18 := (binrel% HAdd.hAdd let13 let15)
  let let19 := (binrel% HMul.hMul let12 skoZ)
  let let20 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let19 let18))
  let let22 := (binrel% LE.le skoY let6)
  let let23 := (Not let22)
  let let24 := (binrel% GT.gt skoY let6)
  let let25 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 131) let4))
  let let26 := (Neg.neg let6)
  let let27 := (Int.ofNat 5)
  let let28 := (binrel% HDiv.hDiv (Int.ofNat 32) let27)
  let let29 := (Neg.neg let28)
  let let30 := (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let26 let26)))
  let let31 := (binrel% GE.ge let17 let25)
  let let32 := (binrel% LE.le let20 let29)
  let let33 := (Not let32)
  let let34 := (binrel% GT.gt let20 let29)
  let let35 := (Eq let34 let33)
  let let36 := (binrel% GE.ge (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let13 let19)) let28)
  let let37 := (binrel% HMul.hMul skoY let10)
  let let38 := (binrel% HMul.hMul skoX let10)
  let let39 := (binrel% HAdd.hAdd let38 let37)
  let let40 := (binrel% HAdd.hAdd let2 let39)
  let let41 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let38) let37)
  let let42 := (binrel% HMul.hMul let2 let20)
  let let43 := (Eq let38 let13)
  let let44 := (binrel% GE.ge let15 let26)
  let let45 := (Eq let44 let44)
  let let46 := (binrel% HMul.hMul let10 skoZ)
  let let47 := (Not True)
  let let48 := (binrel% HAdd.hAdd let15 let13)
  let let49 := (binrel% HAdd.hAdd let5 let48)
  let let50 := (binrel% HAdd.hAdd let2 let18)
  let let51 := (Neg.neg (Rat.ofInt 32))
  let let52 := (binrel% HDiv.hDiv let51 (Rat.ofInt 5))
  let let53 := (binrel% HAdd.hAdd let52 let39)
  let let54 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let52 let38) let37)
  let let55 := (binrel% GE.ge let19 let26)
  let let56 := (Eq let55 let55)
  let let57 := (binrel% HMul.hMul let10 let6)
  let let58 := (binrel% HMul.hMul let2 let29)
  let let59 := (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let57 let57)))
  let let60 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let14 let16)))
  let let61 := (binrel% GE.ge let60 let59)
  let let62 := (Not let61)
  let let63 := (binrel% LT.lt let60 let59)
  let let64 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let65 := (binrel% GE.ge let13 let26)
  let let66 := (binrel% LE.le skoX let6)
  let let67 := (Eq let37 let15)
  let let68 := (Not let65)
  let let69 := (Not let68)
  let let70 := (Eq let65 let69)
  let let71 := (Eq let69 let65)
  let let72 := (Eq let65 let65)
  let let73 := (Not let66)
  let let74 := (binrel% GT.gt skoX let6)
  let let75 := (Int.ofNat 15)
  let let76 := (binrel% GE.ge skoX let75)
  let let77 := (Rat.ofInt 15)
  let let78 := (binrel% LE.le let77 skoX)
  let let79 := (binrel% HDiv.hDiv let5 let27)
  let let80 := (binrel% HMul.hMul let51 let79)
  let let81 := (Not let55)
  let let82 := (Not let81)
  let let83 := (Eq let55 let82)
  let let84 := (Eq let82 let55)
  let let85 := (binrel% HAdd.hAdd let29 let48)
  let let86 := (binrel% LE.le skoZ let85)
  let let87 := (binrel% HAdd.hAdd let29 let18)
  let let88 := (binrel% GE.ge let20 let5)
  let let89 := (binrel% LE.le let49 skoZ)
  let let90 := (Eq let80 let29)
  let let91 := (binrel% GE.ge skoY let75)
  let let92 := (binrel% LE.le let77 skoY)
  let let93 := (Not let78)
  let let94 := (Not let92)
  let let95 := (binrel% LE.le let77 skoZ)
  let let96 := (Not let95)
  let let97 := (binrel% LE.le skoX let64)
  let let98 := (Not let97)
  let let99 := (binrel% LE.le skoY let64)
  let let100 := (Not let99)
  let let101 := (binrel% LE.le skoZ let64)
  let let102 := (Not let101)
  let let103 := (binrel% LE.le let41 skoZ)
  let let104 := (Not let103)
  let let105 := (binrel% LE.le skoZ let54)
  let let106 := (And let105 (And let104 (And let102 (And let100 (And let98 (And let96 (And let94 let93)))))))
  let let107 := (binrel% GE.ge skoZ let75)
  let let108 := (Not let44)
  let let109 := (Not let108)
  let let110 := (Eq let109 let44)
  let let111 := (Eq let44 let109)
  let let112 := (Not let76)
  let let113 := (Not let91)
  let let114 := (Not let107)
  let let115 := (Not let88)
  let let116 := (And let36 (And let115 (And let81 (And let108 (And let68 (And let114 (And let113 let112)))))))
  let let117 := (Eq let106 let116)
  let let118 := (Not let36)
  let let119 := (Or let44 (Or let65 (Or let55 let118)))
  let let120 := (Or let109 (Or let69 (Or let82 let118)))
  let let121 := (binrel% LT.lt let16 let57)
  let let122 := (And let11 let24)
  let let123 := (binrel% LT.lt let14 let57)
  let let124 := (And let11 let74)
  let let125 := (binrel% LT.lt let46 let57)
  let let126 := (And let11 let9)
  let let127 := (binrel% LE.le let42 let58)
  let let128 := (And let3 let32)
(Eq let3 True) → (Eq let9 let8) → (Eq let11 True) → (Eq let14 let13) → (Eq let16 let15) → (Eq let21 let17) → (Eq let24 let23) → (Eq let30 let25) → (Eq let31 True) → let35 → (Eq let32 let36) → (Eq let41 let40) → (Eq let42 let20) → let43 → (Eq let45 True) → (Eq let46 let19) → (Eq let47 False) → (Eq let10 let10) → (Eq let50 let49) → (Eq let54 let53) → (Eq let56 True) → (Eq let22 let44) → (Eq let63 let62) → (Eq let64 let6) → (Eq let66 let65) → let67 → (Eq let71 let70) → (Eq let72 True) → (Eq let7 let55) → (Eq let74 let73) → (Eq let78 let76) → (Eq let52 let80) → (Eq let58 let29) → (Eq let84 let83) → (Eq let86 let36) → (Eq let87 let85) → (Eq let89 let88) → let90 → (Eq let51 let51) → (Eq let57 let26) → let84 → (Eq let92 let91) → (Eq let106 let106) → (Eq let95 let107) → let71 → let110 → (Eq let110 let111) → let106 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 20)
  let let5 := (Int.ofNat 1)
  let let6 := (binrel% HDiv.hDiv let5 let4)
  let let7 := (binrel% LE.le skoZ let6)
  let let8 := (Not let7)
  let let9 := (binrel% GT.gt skoZ let6)
  let let10 := (Neg.neg let2)
  let let11 := (binrel% LT.lt let10 let1)
  let let12 := (Neg.neg let5)
  let let13 := (binrel% HMul.hMul let12 skoX)
  let let14 := (binrel% HMul.hMul let10 skoX)
  let let15 := (binrel% HMul.hMul let12 skoY)
  let let16 := (binrel% HMul.hMul let10 skoY)
  let let17 := (Rat.ofInt 0)
  let let18 := (binrel% HAdd.hAdd let13 let15)
  let let19 := (binrel% HMul.hMul let12 skoZ)
  let let20 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let19 let18))
  let let22 := (binrel% LE.le skoY let6)
  let let23 := (Not let22)
  let let24 := (binrel% GT.gt skoY let6)
  let let25 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 131) let4))
  let let26 := (Neg.neg let6)
  let let27 := (Int.ofNat 5)
  let let28 := (binrel% HDiv.hDiv (Int.ofNat 32) let27)
  let let29 := (Neg.neg let28)
  let let30 := (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let26 let26)))
  let let31 := (binrel% GE.ge let17 let25)
  let let32 := (binrel% LE.le let20 let29)
  let let33 := (Not let32)
  let let34 := (binrel% GT.gt let20 let29)
  let let35 := (Eq let34 let33)
  let let36 := (binrel% GE.ge (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let13 let19)) let28)
  let let37 := (binrel% HMul.hMul skoY let10)
  let let38 := (binrel% HMul.hMul skoX let10)
  let let39 := (binrel% HAdd.hAdd let38 let37)
  let let40 := (binrel% HAdd.hAdd let2 let39)
  let let41 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let38) let37)
  let let42 := (binrel% HMul.hMul let2 let20)
  let let43 := (Eq let38 let13)
  let let44 := (binrel% GE.ge let15 let26)
  let let45 := (Eq let44 let44)
  let let46 := (binrel% HMul.hMul let10 skoZ)
  let let47 := (Not True)
  let let48 := (binrel% HAdd.hAdd let15 let13)
  let let49 := (binrel% HAdd.hAdd let5 let48)
  let let50 := (binrel% HAdd.hAdd let2 let18)
  let let51 := (Neg.neg (Rat.ofInt 32))
  let let52 := (binrel% HDiv.hDiv let51 (Rat.ofInt 5))
  let let53 := (binrel% HAdd.hAdd let52 let39)
  let let54 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let52 let38) let37)
  let let55 := (binrel% GE.ge let19 let26)
  let let56 := (Eq let55 let55)
  let let57 := (binrel% HMul.hMul let10 let6)
  let let58 := (binrel% HMul.hMul let2 let29)
  let let59 := (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let57 (binrel% HAdd.hAdd let57 let57)))
  let let60 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let46 (binrel% HAdd.hAdd let14 let16)))
  let let61 := (binrel% GE.ge let60 let59)
  let let62 := (Not let61)
  let let63 := (binrel% LT.lt let60 let59)
  let let64 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let65 := (binrel% GE.ge let13 let26)
  let let66 := (binrel% LE.le skoX let6)
  let let67 := (Eq let37 let15)
  let let68 := (Not let65)
  let let69 := (Not let68)
  let let70 := (Eq let65 let69)
  let let71 := (Eq let69 let65)
  let let72 := (Eq let65 let65)
  let let73 := (Not let66)
  let let74 := (binrel% GT.gt skoX let6)
  let let75 := (Int.ofNat 15)
  let let76 := (binrel% GE.ge skoX let75)
  let let77 := (Rat.ofInt 15)
  let let78 := (binrel% LE.le let77 skoX)
  let let79 := (binrel% HDiv.hDiv let5 let27)
  let let80 := (binrel% HMul.hMul let51 let79)
  let let81 := (Not let55)
  let let82 := (Not let81)
  let let83 := (Eq let55 let82)
  let let84 := (Eq let82 let55)
  let let85 := (binrel% HAdd.hAdd let29 let48)
  let let86 := (binrel% LE.le skoZ let85)
  let let87 := (binrel% HAdd.hAdd let29 let18)
  let let88 := (binrel% GE.ge let20 let5)
  let let89 := (binrel% LE.le let49 skoZ)
  let let90 := (Eq let80 let29)
  let let91 := (binrel% GE.ge skoY let75)
  let let92 := (binrel% LE.le let77 skoY)
  let let93 := (Not let78)
  let let94 := (Not let92)
  let let95 := (binrel% LE.le let77 skoZ)
  let let96 := (Not let95)
  let let97 := (binrel% LE.le skoX let64)
  let let98 := (Not let97)
  let let99 := (binrel% LE.le skoY let64)
  let let100 := (Not let99)
  let let101 := (binrel% LE.le skoZ let64)
  let let102 := (Not let101)
  let let103 := (binrel% LE.le let41 skoZ)
  let let104 := (Not let103)
  let let105 := (binrel% LE.le skoZ let54)
  let let106 := (And let105 (And let104 (And let102 (And let100 (And let98 (And let96 (And let94 let93)))))))
  let let107 := (binrel% GE.ge skoZ let75)
  let let108 := (Not let44)
  let let109 := (Not let108)
  let let110 := (Eq let109 let44)
  let let111 := (Eq let44 let109)
  let let112 := (Not let76)
  let let113 := (Not let91)
  let let114 := (Not let107)
  let let115 := (Not let88)
  let let116 := (And let36 (And let115 (And let81 (And let108 (And let68 (And let114 (And let113 let112)))))))
  let let117 := (Eq let106 let116)
  let let118 := (Not let36)
  let let119 := (Or let44 (Or let65 (Or let55 let118)))
  let let120 := (Or let109 (Or let69 (Or let82 let118)))
  let let121 := (binrel% LT.lt let16 let57)
  let let122 := (And let11 let24)
  let let123 := (binrel% LT.lt let14 let57)
  let let124 := (And let11 let74)
  let let125 := (binrel% LT.lt let46 let57)
  let let126 := (And let11 let9)
  let let127 := (binrel% LE.le let42 let58)
  let let128 := (And let3 let32)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let11 True) => -- EVALUATE
fun lean_r3 : (Eq let14 let13) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let16 let15) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let21 let17) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let30 let25) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let31 True) => -- THEORY_REWRITE_ARITH
fun lean_r9 : let35 => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let32 let36) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let42 let20) => -- THEORY_REWRITE_ARITH
fun lean_r13 : let43 => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let45 True) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let46 let19) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let47 False) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let10 let10) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let54 let53) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let56 True) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let22 let44) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let64 let6) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let66 let65) => -- THEORY_REWRITE_ARITH
fun lean_r25 : let67 => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let71 let70) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let72 True) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let7 let55) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let74 let73) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let78 let76) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let52 let80) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let58 let29) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let84 let83) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let86 let36) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let87 let85) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let89 let88) => -- THEORY_REWRITE_ARITH
fun lean_r37 : let90 => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let51 let51) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let57 let26) => -- THEORY_REWRITE_ARITH
fun lean_r40 : let84 => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let92 let91) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let106 let106) => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq let95 let107) => -- THEORY_REWRITE_ARITH
fun lean_r44 : let71 => -- THEORY_REWRITE_BOOL
fun lean_r45 : let110 => -- THEORY_REWRITE_BOOL
fun lean_r46 : (Eq let110 let111) => -- THEORY_REWRITE_BOOL
fun lean_a47 : let106 => by
have lean_s0 : (Or let109 (Or let69 (Or let82 (Or let118 False)))) :=
  (scope (fun lean_a48 : let108 =>
    (scope (fun lean_a49 : let68 =>
      (scope (fun lean_a50 : let81 =>
        (scope (fun lean_a51 : let36 =>
          have lean_s0 : (Eq let36 let32) := by timed Eq.symm lean_r10
          have lean_s1 : let32 := by timed eqResolve lean_a51 lean_s0
          have lean_s2 : (Or let33 False) :=
            (scope (fun lean_a52 : let32 =>
              have lean_s2 : let3 := by timed trueElim lean_r0
              have lean_s3 : let128 := by timed And.intro lean_s2 lean_a52
              have lean_s4 : (Implies let128 let127) := by arithMulPos [let20, let29, let2], 1
              have lean_s5 : let127 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let11 := by timed trueElim lean_r2
              have lean_s7 : (Eq let8 let81) := by timed flipCongrArg lean_r28 [Not]
              have lean_s8 : (Eq let9 let81) := by timed Eq.trans lean_r1 lean_s7
              have lean_s9 : (Eq let81 let9) := by timed Eq.symm lean_s8
              have lean_s10 : let9 := by timed eqResolve lean_a50 lean_s9
              have lean_s11 : let126 := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies let126 let125) := by arithMulNeg [skoZ, let6, let10], 2
              have lean_s13 : let125 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let73 let68) := by timed flipCongrArg lean_r24 [Not]
              have lean_s15 : (Eq let74 let68) := by timed Eq.trans lean_r29 lean_s14
              have lean_s16 : (Eq let68 let74) := by timed Eq.symm lean_s15
              have lean_s17 : let74 := by timed eqResolve lean_a49 lean_s16
              have lean_s18 : let124 := by timed And.intro lean_s6 lean_s17
              have lean_s19 : (Implies let124 let123) := by arithMulNeg [skoX, let6, let10], 2
              have lean_s20 : let123 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : (Eq let23 let108) := by timed flipCongrArg lean_r21 [Not]
              have lean_s22 : (Eq let24 let108) := by timed Eq.trans lean_r6 lean_s21
              have lean_s23 : (Eq let108 let24) := by timed Eq.symm lean_s22
              have lean_s24 : let24 := by timed eqResolve lean_a48 lean_s23
              have lean_s25 : let122 := by timed And.intro lean_s6 lean_s24
              have lean_s26 : (Implies let122 let121) := by arithMulNeg [skoY, let6, let10], 2
              have lean_s27 : let121 := by timed modusPonens lean_s25 lean_s26
              have lean_s28 : let63 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27]
              let lean_s29 := by timed congrHAdd lean_r3 lean_r4
              let lean_s30 := by timed congrHAdd lean_r15 lean_s29
              have lean_s31 : (Eq let60 let21) := by timed congrHAdd lean_r12 lean_s30
              have lean_s32 : (Eq let60 let17) := by timed Eq.trans lean_s31 lean_r5
              let lean_s33 := by timed flipCongrArg lean_s32 [GE.ge]
              let lean_s34 := by timed congrHAdd lean_r39 lean_r39
              let lean_s35 := by timed congrHAdd lean_r39 lean_s34
              have lean_s36 : (Eq let59 let30) := by timed congrHAdd lean_r32 lean_s35
              have lean_s37 : (Eq let59 let25) := by timed Eq.trans lean_s36 lean_r7
              have lean_s38 : (Eq let61 let31) := by timed congr lean_s33 lean_s37
              have lean_s39 : (Eq let61 True) := by timed Eq.trans lean_s38 lean_r8
              have lean_s40 : (Eq let62 let47) := by timed flipCongrArg lean_s39 [Not]
              have lean_s41 : (Eq let62 False) := by timed Eq.trans lean_s40 lean_r16
              have lean_s42 : (Eq let63 False) := by timed Eq.trans lean_r22 lean_s41
              show False from by timed eqResolve lean_s28 lean_s42
            ))
          have lean_s3 : let33 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let33 let118) := by timed flipCongrArg lean_r10 [Not]
          have lean_s5 : (Eq let34 let118) := by timed Eq.trans lean_r9 lean_s4
          have lean_s6 : (Eq let118 let34) := by timed Eq.symm lean_s5
          have lean_s7 : (Eq let33 let34) := by timed Eq.trans lean_s4 lean_s6
          have lean_s8 : let34 := by timed eqResolve lean_s3 lean_s7
          have lean_s9 : (Eq let118 let33) := by timed Eq.symm lean_s4
          have lean_s10 : let35 := by timed Eq.trans lean_s5 lean_s9
          have lean_s11 : let33 := by timed eqResolve lean_s8 lean_s10
          show False from by timed contradiction lean_s1 lean_s11
  ))))))))
have lean_s1 : (Not (And let108 (And let68 (And let81 let36)))) := by liftOrNToNeg lean_s0
have lean_s2 : let120 := by timed flipNotAnd lean_s1 [let108, let68, let81, let36]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let45 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let111 let45) := by timed congr lean_s5 lean_r45
have lean_s7 : (Eq let111 True) := by timed Eq.trans lean_s6 lean_r14
have lean_s8 : (Eq let110 True) := by timed Eq.trans lean_r46 lean_s7
have lean_s9 : let110 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let72 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let70 let72) := by timed congr lean_s12 lean_r44
have lean_s14 : (Eq let70 True) := by timed Eq.trans lean_s13 lean_r27
have lean_s15 : (Eq let71 True) := by timed Eq.trans lean_r26 lean_s14
have lean_s16 : let71 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let56 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let83 let56) := by timed congr lean_s19 lean_r40
have lean_s21 : (Eq let83 True) := by timed Eq.trans lean_s20 lean_r20
have lean_s22 : (Eq let84 True) := by timed Eq.trans lean_r33 lean_s21
have lean_s23 : let84 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : (Eq let118 let118) := by timed rfl
let lean_s26 := by timed congr lean_s24 lean_s25
let lean_s27 := by timed congr lean_s17 lean_s26
have lean_s28 : (Eq let120 let119) := by timed congr lean_s10 lean_s27
have lean_s29 : let119 := by timed eqResolve lean_s2 lean_s28
have lean_s30 : (Or let55 (Or let44 (Or let65 let118))) := by permutateOr lean_s29, [2, 0, 1, 3], (- 1)
have lean_s31 : (Eq And And) := by timed rfl
have lean_s32 : (Eq skoZ skoZ) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
let lean_s34 := by timed flipCongrArg lean_r38 [HMul.hMul]
have lean_s35 : (Eq let79 let79) := by timed rfl
have lean_s36 : (Eq let80 let80) := by timed congr lean_s34 lean_s35
have lean_s37 : let90 := by timed Eq.trans lean_s36 lean_r37
have lean_s38 : (Eq let52 let29) := by timed Eq.trans lean_r31 lean_s37
have lean_s39 : (Eq skoX skoX) := by timed rfl
let lean_s40 := by timed flipCongrArg lean_s39 [HMul.hMul]
have lean_s41 : (Eq let38 let38) := by timed congr lean_s40 lean_r17
have lean_s42 : let43 := by timed Eq.trans lean_s41 lean_r13
have lean_s43 : (Eq skoY skoY) := by timed rfl
let lean_s44 := by timed flipCongrArg lean_s43 [HMul.hMul]
have lean_s45 : (Eq let37 let37) := by timed congr lean_s44 lean_r17
have lean_s46 : let67 := by timed Eq.trans lean_s45 lean_r25
let lean_s47 := by timed congrHAdd lean_s42 lean_s46
have lean_s48 : (Eq let53 let87) := by timed congrHAdd lean_s38 lean_s47
have lean_s49 : (Eq let53 let85) := by timed Eq.trans lean_s48 lean_r35
have lean_s50 : (Eq let54 let85) := by timed Eq.trans lean_r19 lean_s49
have lean_s51 : (Eq let105 let86) := by timed congr lean_s33 lean_s50
have lean_s52 : (Eq let105 let36) := by timed Eq.trans lean_s51 lean_r34
let lean_s53 := by timed congr lean_s31 lean_s52
have lean_s54 : (Eq let2 let2) := by timed rfl
let lean_s55 := by timed congrHAdd lean_s42 lean_s46
have lean_s56 : (Eq let40 let50) := by timed congrHAdd lean_s54 lean_s55
have lean_s57 : (Eq let40 let49) := by timed Eq.trans lean_s56 lean_r18
have lean_s58 : (Eq let41 let49) := by timed Eq.trans lean_r11 lean_s57
let lean_s59 := by timed flipCongrArg lean_s58 [LE.le]
have lean_s60 : (Eq let103 let89) := by timed congr lean_s59 lean_s32
have lean_s61 : (Eq let103 let88) := by timed Eq.trans lean_s60 lean_r36
have lean_s62 : (Eq let104 let115) := by timed flipCongrArg lean_s61 [Not]
let lean_s63 := by timed congr lean_s31 lean_s62
let lean_s64 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s65 : (Eq let101 let7) := by timed congr lean_s64 lean_r23
have lean_s66 : (Eq let101 let55) := by timed Eq.trans lean_s65 lean_r28
have lean_s67 : (Eq let102 let81) := by timed flipCongrArg lean_s66 [Not]
let lean_s68 := by timed congr lean_s31 lean_s67
let lean_s69 := by timed flipCongrArg lean_s43 [LE.le]
have lean_s70 : (Eq let99 let22) := by timed congr lean_s69 lean_r23
have lean_s71 : (Eq let99 let44) := by timed Eq.trans lean_s70 lean_r21
have lean_s72 : (Eq let100 let108) := by timed flipCongrArg lean_s71 [Not]
let lean_s73 := by timed congr lean_s31 lean_s72
let lean_s74 := by timed flipCongrArg lean_s39 [LE.le]
have lean_s75 : (Eq let97 let66) := by timed congr lean_s74 lean_r23
have lean_s76 : (Eq let97 let65) := by timed Eq.trans lean_s75 lean_r24
have lean_s77 : (Eq let98 let68) := by timed flipCongrArg lean_s76 [Not]
let lean_s78 := by timed congr lean_s31 lean_s77
have lean_s79 : (Eq let96 let114) := by timed flipCongrArg lean_r43 [Not]
let lean_s80 := by timed congr lean_s31 lean_s79
have lean_s81 : (Eq let94 let113) := by timed flipCongrArg lean_r41 [Not]
let lean_s82 := by timed congr lean_s31 lean_s81
have lean_s83 : (Eq let93 let112) := by timed flipCongrArg lean_r30 [Not]
let lean_s84 := by timed congr lean_s82 lean_s83
let lean_s85 := by timed congr lean_s80 lean_s84
let lean_s86 := by timed congr lean_s78 lean_s85
let lean_s87 := by timed congr lean_s73 lean_s86
let lean_s88 := by timed congr lean_s68 lean_s87
let lean_s89 := by timed congr lean_s63 lean_s88
have lean_s90 : let117 := by timed congr lean_s53 lean_s89
have lean_s91 : let117 := by timed Eq.trans lean_r42 lean_s90
have lean_s92 : let116 := by timed eqResolve lean_a47 lean_s91
have lean_s93 : let68 := by andElim lean_s92, 4
let lean_s94 := by R1 lean_s30, lean_s93, let65, [(- 1), 0]
have lean_s95 : let108 := by andElim lean_s92, 3
let lean_s96 := by R1 lean_s94, lean_s95, let44, [(- 1), 0]
have lean_s97 : let81 := by andElim lean_s92, 2
let lean_s98 := by R1 lean_s96, lean_s97, let55, [(- 1), 0]
have lean_s99 : let36 := by andElim lean_s92, 0
exact (show False from by R2 lean_s98, lean_s99, let36, [0, 0])


