open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 20)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoX let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoX let3)
  let let7 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let8 := (Rat.ofInt 1)
  let let9 := (binrel% HMul.hMul let8 let7)
  let let10 := (Neg.neg let2)
  let let11 := (binrel% HMul.hMul let10 skoX)
  let let12 := (Neg.neg let8)
  let let13 := (binrel% HMul.hMul let12 skoX)
  let let14 := (binrel% HMul.hMul let10 skoZ)
  let let15 := (binrel% HMul.hMul let12 skoZ)
  let let16 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 131) let1))
  let let17 := (Neg.neg let3)
  let let18 := (Int.ofNat 5)
  let let19 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 32) let18))
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let17 let17)))
  let let21 := (binrel% GE.ge let7 let19)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let7 let19)
  let let24 := (binrel% HMul.hMul skoX let12)
  let let25 := (Eq let24 let11)
  let let26 := (Rat.ofInt 0)
  let let27 := (binrel% GE.ge let26 let16)
  let let28 := (binrel% GE.ge let14 let17)
  let let29 := (Not let28)
  let let30 := (Not let29)
  let let31 := (Eq let28 let30)
  let let32 := (Eq let30 let28)
  let let33 := (binrel% HDiv.hDiv let2 let18)
  let let34 := (Neg.neg (Rat.ofInt 32))
  let let35 := (binrel% HMul.hMul let34 let33)
  let let36 := (Eq let35 let19)
  let let37 := (binrel% LE.le skoY let3)
  let let38 := (Not let37)
  let let39 := (binrel% GT.gt skoY let3)
  let let40 := (binrel% HMul.hMul let10 skoY)
  let let41 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let40 let11))
  let let42 := (binrel% LE.le let41 skoZ)
  let let43 := (binrel% GE.ge let11 let17)
  let let44 := (Not let43)
  let let45 := (Not let44)
  let let46 := (Eq let45 let43)
  let let47 := (binrel% HMul.hMul skoY let12)
  let let48 := (Eq let47 let40)
  let let49 := (binrel% HMul.hMul let12 let3)
  let let50 := (binrel% HDiv.hDiv let34 (Rat.ofInt 5))
  let let51 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let24 let47))
  let let52 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let50 let24) let47)
  let let53 := (binrel% GE.ge let40 let17)
  let let54 := (Eq let53 let53)
  let let55 := (binrel% HDiv.hDiv let8 (Rat.ofInt 20))
  let let56 := (Int.ofNat 15)
  let let57 := (binrel% GE.ge skoZ let56)
  let let58 := (Rat.ofInt 15)
  let let59 := (binrel% LE.le let58 skoZ)
  let let60 := (Not True)
  let let61 := (Not let53)
  let let62 := (Not let61)
  let let63 := (Eq let53 let62)
  let let64 := (Eq let62 let53)
  let let65 := (binrel% HMul.hMul let12 skoY)
  let let66 := (binrel% GE.ge skoY let56)
  let let67 := (binrel% LE.le let58 skoY)
  let let68 := (binrel% LE.le skoZ let3)
  let let69 := (binrel% GE.ge skoX let56)
  let let70 := (binrel% LE.le let58 skoX)
  let let71 := (Eq let21 let21)
  let let72 := (Not let68)
  let let73 := (binrel% GT.gt skoZ let3)
  let let74 := (Not let22)
  let let75 := (Eq let74 let21)
  let let76 := (Int.ofNat 0)
  let let77 := (binrel% LT.lt let12 let76)
  let let78 := (Eq let21 let74)
  let let79 := (binrel% HMul.hMul let8 let19)
  let let80 := (Not let70)
  let let81 := (Not let67)
  let let82 := (Not let59)
  let let83 := (binrel% LE.le skoX let55)
  let let84 := (Not let83)
  let let85 := (binrel% LE.le skoY let55)
  let let86 := (Not let85)
  let let87 := (binrel% LE.le skoZ let55)
  let let88 := (Not let87)
  let let89 := (binrel% LE.le let52 skoZ)
  let let90 := (Not let89)
  let let91 := (And let90 (And let88 (And let86 (And let84 (And let82 (And let81 let80))))))
  let let92 := (Eq let43 let43)
  let let93 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let40 let14)))
  let let94 := (Eq let43 let45)
  let let95 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let11 let40))
  let let96 := (binrel% GT.gt let8 let76)
  let let97 := (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let49 let49)))
  let let98 := (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let65 let15)))
  let let99 := (binrel% GE.ge let98 let97)
  let let100 := (Not let99)
  let let101 := (binrel% LT.lt let98 let97)
  let let102 := (Eq let28 let28)
  let let103 := (Not let69)
  let let104 := (Not let66)
  let let105 := (Not let57)
  let let106 := (And let22 (And let29 (And let61 (And let44 (And let105 (And let104 let103))))))
  let let107 := (Eq let91 let106)
  let let108 := (Or let28 (Or let53 (Or let43 let21)))
  let let109 := (Or let30 (Or let62 (Or let45 let74)))
  let let110 := (Not let23)
  let let111 := (binrel% LT.lt let15 let49)
  let let112 := (And let77 let73)
  let let113 := (binrel% LT.lt let65 let49)
  let let114 := (And let77 let39)
  let let115 := (binrel% LT.lt let13 let49)
  let let116 := (And let77 let6)
  let let117 := (binrel% LT.lt let9 let79)
  let let118 := (And let96 let23)
(Eq let6 let5) → (Eq let9 let7) → (Eq let13 let11) → (Eq let15 let14) → (Eq let20 let16) → (Eq let23 let22) → let25 → (Eq let27 True) → (Eq let32 let31) → (Eq let12 let12) → let32 → let36 → (Eq let39 let38) → (Eq let42 let21) → let46 → let48 → (Eq let49 let17) → (Eq let52 let51) → (Eq let37 let53) → (Eq let54 True) → (Eq let55 let3) → (Eq let4 let43) → (Eq let59 let57) → (Eq let60 False) → (Eq let64 let63) → (Eq let65 let40) → (Eq let67 let66) → (Eq let68 let28) → (Eq let70 let69) → (Eq let71 True) → (Eq let34 let34) → (Eq let73 let72) → let75 → (Eq let50 let35) → (Eq let77 True) → (Eq let75 let78) → (Eq let79 let19) → (Eq let91 let91) → (Eq let92 True) → (Eq let93 let26) → (Eq let46 let94) → (Eq let95 let41) → let64 → (Eq let96 True) → (Eq let101 let100) → (Eq let102 True) → let91 → False :=
  let let1 := (Int.ofNat 20)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoX let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoX let3)
  let let7 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let8 := (Rat.ofInt 1)
  let let9 := (binrel% HMul.hMul let8 let7)
  let let10 := (Neg.neg let2)
  let let11 := (binrel% HMul.hMul let10 skoX)
  let let12 := (Neg.neg let8)
  let let13 := (binrel% HMul.hMul let12 skoX)
  let let14 := (binrel% HMul.hMul let10 skoZ)
  let let15 := (binrel% HMul.hMul let12 skoZ)
  let let16 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 131) let1))
  let let17 := (Neg.neg let3)
  let let18 := (Int.ofNat 5)
  let let19 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 32) let18))
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let17 let17)))
  let let21 := (binrel% GE.ge let7 let19)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let7 let19)
  let let24 := (binrel% HMul.hMul skoX let12)
  let let25 := (Eq let24 let11)
  let let26 := (Rat.ofInt 0)
  let let27 := (binrel% GE.ge let26 let16)
  let let28 := (binrel% GE.ge let14 let17)
  let let29 := (Not let28)
  let let30 := (Not let29)
  let let31 := (Eq let28 let30)
  let let32 := (Eq let30 let28)
  let let33 := (binrel% HDiv.hDiv let2 let18)
  let let34 := (Neg.neg (Rat.ofInt 32))
  let let35 := (binrel% HMul.hMul let34 let33)
  let let36 := (Eq let35 let19)
  let let37 := (binrel% LE.le skoY let3)
  let let38 := (Not let37)
  let let39 := (binrel% GT.gt skoY let3)
  let let40 := (binrel% HMul.hMul let10 skoY)
  let let41 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let40 let11))
  let let42 := (binrel% LE.le let41 skoZ)
  let let43 := (binrel% GE.ge let11 let17)
  let let44 := (Not let43)
  let let45 := (Not let44)
  let let46 := (Eq let45 let43)
  let let47 := (binrel% HMul.hMul skoY let12)
  let let48 := (Eq let47 let40)
  let let49 := (binrel% HMul.hMul let12 let3)
  let let50 := (binrel% HDiv.hDiv let34 (Rat.ofInt 5))
  let let51 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let24 let47))
  let let52 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let50 let24) let47)
  let let53 := (binrel% GE.ge let40 let17)
  let let54 := (Eq let53 let53)
  let let55 := (binrel% HDiv.hDiv let8 (Rat.ofInt 20))
  let let56 := (Int.ofNat 15)
  let let57 := (binrel% GE.ge skoZ let56)
  let let58 := (Rat.ofInt 15)
  let let59 := (binrel% LE.le let58 skoZ)
  let let60 := (Not True)
  let let61 := (Not let53)
  let let62 := (Not let61)
  let let63 := (Eq let53 let62)
  let let64 := (Eq let62 let53)
  let let65 := (binrel% HMul.hMul let12 skoY)
  let let66 := (binrel% GE.ge skoY let56)
  let let67 := (binrel% LE.le let58 skoY)
  let let68 := (binrel% LE.le skoZ let3)
  let let69 := (binrel% GE.ge skoX let56)
  let let70 := (binrel% LE.le let58 skoX)
  let let71 := (Eq let21 let21)
  let let72 := (Not let68)
  let let73 := (binrel% GT.gt skoZ let3)
  let let74 := (Not let22)
  let let75 := (Eq let74 let21)
  let let76 := (Int.ofNat 0)
  let let77 := (binrel% LT.lt let12 let76)
  let let78 := (Eq let21 let74)
  let let79 := (binrel% HMul.hMul let8 let19)
  let let80 := (Not let70)
  let let81 := (Not let67)
  let let82 := (Not let59)
  let let83 := (binrel% LE.le skoX let55)
  let let84 := (Not let83)
  let let85 := (binrel% LE.le skoY let55)
  let let86 := (Not let85)
  let let87 := (binrel% LE.le skoZ let55)
  let let88 := (Not let87)
  let let89 := (binrel% LE.le let52 skoZ)
  let let90 := (Not let89)
  let let91 := (And let90 (And let88 (And let86 (And let84 (And let82 (And let81 let80))))))
  let let92 := (Eq let43 let43)
  let let93 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let40 let14)))
  let let94 := (Eq let43 let45)
  let let95 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let11 let40))
  let let96 := (binrel% GT.gt let8 let76)
  let let97 := (binrel% HAdd.hAdd let79 (binrel% HAdd.hAdd let49 (binrel% HAdd.hAdd let49 let49)))
  let let98 := (binrel% HAdd.hAdd let9 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let65 let15)))
  let let99 := (binrel% GE.ge let98 let97)
  let let100 := (Not let99)
  let let101 := (binrel% LT.lt let98 let97)
  let let102 := (Eq let28 let28)
  let let103 := (Not let69)
  let let104 := (Not let66)
  let let105 := (Not let57)
  let let106 := (And let22 (And let29 (And let61 (And let44 (And let105 (And let104 let103))))))
  let let107 := (Eq let91 let106)
  let let108 := (Or let28 (Or let53 (Or let43 let21)))
  let let109 := (Or let30 (Or let62 (Or let45 let74)))
  let let110 := (Not let23)
  let let111 := (binrel% LT.lt let15 let49)
  let let112 := (And let77 let73)
  let let113 := (binrel% LT.lt let65 let49)
  let let114 := (And let77 let39)
  let let115 := (binrel% LT.lt let13 let49)
  let let116 := (And let77 let6)
  let let117 := (binrel% LT.lt let9 let79)
  let let118 := (And let96 let23)
fun lean_r0 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let9 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let13 let11) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let15 let14) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let20 let16) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r6 : let25 => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let27 True) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let32 let31) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let12 let12) => -- THEORY_REWRITE_ARITH
fun lean_r10 : let32 => -- THEORY_REWRITE_BOOL
fun lean_r11 : let36 => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let42 let21) => -- THEORY_REWRITE_ARITH
fun lean_r14 : let46 => -- THEORY_REWRITE_BOOL
fun lean_r15 : let48 => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let49 let17) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let37 let53) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let54 True) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let55 let3) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let4 let43) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let59 let57) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let60 False) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let64 let63) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let65 let40) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let68 let28) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let70 let69) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let71 True) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let34 let34) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let73 let72) => -- THEORY_REWRITE_ARITH
fun lean_r32 : let75 => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let50 let35) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let77 True) => -- EVALUATE
fun lean_r35 : (Eq let75 let78) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let79 let19) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let91 let91) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let92 True) => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let93 let26) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let46 let94) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let95 let41) => -- THEORY_REWRITE_ARITH
fun lean_r42 : let64 => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq let96 True) => -- EVALUATE
fun lean_r44 : (Eq let101 let100) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let102 True) => -- THEORY_REWRITE_BOOL
fun lean_a46 : let91 => by
have lean_s0 : (Or let30 (Or let62 (Or let45 (Or let74 False)))) :=
  (scope (fun lean_a47 : let29 =>
    (scope (fun lean_a48 : let61 =>
      (scope (fun lean_a49 : let44 =>
        (scope (fun lean_a50 : let22 =>
          have lean_s0 : (Eq let22 let23) := by timed Eq.symm lean_r5
          have lean_s1 : let23 := by timed eqResolve lean_a50 lean_s0
          have lean_s2 : (Or let110 False) :=
            (scope (fun lean_a51 : let23 =>
              have lean_s2 : let96 := by timed trueElim lean_r43
              have lean_s3 : let118 := by timed And.intro lean_s2 lean_a51
              have lean_s4 : (Implies let118 let117) := by arithMulPos [let7, let19, let8], 0
              have lean_s5 : let117 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let77 := by timed trueElim lean_r34
              have lean_s7 : (Eq let5 let44) := by timed flipCongrArg lean_r21 [Not]
              have lean_s8 : (Eq let6 let44) := by timed Eq.trans lean_r0 lean_s7
              have lean_s9 : (Eq let44 let6) := by timed Eq.symm lean_s8
              have lean_s10 : let6 := by timed eqResolve lean_a49 lean_s9
              have lean_s11 : let116 := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies let116 let115) := by arithMulNeg [skoX, let3, let12], 2
              have lean_s13 : let115 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let38 let61) := by timed flipCongrArg lean_r18 [Not]
              have lean_s15 : (Eq let39 let61) := by timed Eq.trans lean_r12 lean_s14
              have lean_s16 : (Eq let61 let39) := by timed Eq.symm lean_s15
              have lean_s17 : let39 := by timed eqResolve lean_a48 lean_s16
              have lean_s18 : let114 := by timed And.intro lean_s6 lean_s17
              have lean_s19 : (Implies let114 let113) := by arithMulNeg [skoY, let3, let12], 2
              have lean_s20 : let113 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : (Eq let72 let29) := by timed flipCongrArg lean_r27 [Not]
              have lean_s22 : (Eq let73 let29) := by timed Eq.trans lean_r31 lean_s21
              have lean_s23 : (Eq let29 let73) := by timed Eq.symm lean_s22
              have lean_s24 : let73 := by timed eqResolve lean_a47 lean_s23
              have lean_s25 : let112 := by timed And.intro lean_s6 lean_s24
              have lean_s26 : (Implies let112 let111) := by arithMulNeg [skoZ, let3, let12], 2
              have lean_s27 : let111 := by timed modusPonens lean_s25 lean_s26
              have lean_s28 : let101 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27]
              let lean_s29 := by timed congrHAdd lean_r25 lean_r3
              let lean_s30 := by timed congrHAdd lean_r2 lean_s29
              have lean_s31 : (Eq let98 let93) := by timed congrHAdd lean_r1 lean_s30
              have lean_s32 : (Eq let98 let26) := by timed Eq.trans lean_s31 lean_r39
              let lean_s33 := by timed flipCongrArg lean_s32 [GE.ge]
              let lean_s34 := by timed congrHAdd lean_r16 lean_r16
              let lean_s35 := by timed congrHAdd lean_r16 lean_s34
              have lean_s36 : (Eq let97 let20) := by timed congrHAdd lean_r36 lean_s35
              have lean_s37 : (Eq let97 let16) := by timed Eq.trans lean_s36 lean_r4
              have lean_s38 : (Eq let99 let27) := by timed congr lean_s33 lean_s37
              have lean_s39 : (Eq let99 True) := by timed Eq.trans lean_s38 lean_r7
              have lean_s40 : (Eq let100 let60) := by timed flipCongrArg lean_s39 [Not]
              have lean_s41 : (Eq let100 False) := by timed Eq.trans lean_s40 lean_r23
              have lean_s42 : (Eq let101 False) := by timed Eq.trans lean_r44 lean_s41
              show False from by timed eqResolve lean_s28 lean_s42
            ))
          have lean_s3 : let110 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let110 let74) := by timed flipCongrArg lean_r5 [Not]
          have lean_s5 : (Eq let110 let21) := by timed Eq.trans lean_s4 lean_r32
          have lean_s6 : let21 := by timed eqResolve lean_s3 lean_s5
          have lean_s7 : (Eq let21 let110) := by timed Eq.symm lean_s5
          have lean_s8 : let110 := by timed eqResolve lean_s6 lean_s7
          show False from by timed contradiction lean_s1 lean_s8
  ))))))))
have lean_s1 : (Not (And let29 (And let61 (And let44 let22)))) := by liftOrNToNeg lean_s0
have lean_s2 : let109 := by timed flipNotAnd lean_s1 [let29, let61, let44, let22]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let102 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let31 let102) := by timed congr lean_s5 lean_r10
have lean_s7 : (Eq let31 True) := by timed Eq.trans lean_s6 lean_r45
have lean_s8 : (Eq let32 True) := by timed Eq.trans lean_r8 lean_s7
have lean_s9 : let32 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let54 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let63 let54) := by timed congr lean_s12 lean_r42
have lean_s14 : (Eq let63 True) := by timed Eq.trans lean_s13 lean_r19
have lean_s15 : (Eq let64 True) := by timed Eq.trans lean_r24 lean_s14
have lean_s16 : let64 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let92 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let94 let92) := by timed congr lean_s19 lean_r14
have lean_s21 : (Eq let94 True) := by timed Eq.trans lean_s20 lean_r38
have lean_s22 : (Eq let46 True) := by timed Eq.trans lean_r40 lean_s21
have lean_s23 : let46 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : let71 := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq let78 let71) := by timed congr lean_s26 lean_r32
have lean_s28 : (Eq let78 True) := by timed Eq.trans lean_s27 lean_r29
have lean_s29 : (Eq let75 True) := by timed Eq.trans lean_r35 lean_s28
have lean_s30 : let75 := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s24 lean_s30
let lean_s32 := by timed congr lean_s17 lean_s31
have lean_s33 : (Eq let109 let108) := by timed congr lean_s10 lean_s32
have lean_s34 : let108 := by timed eqResolve lean_s2 lean_s33
have lean_s35 : (Or let21 (Or let28 (Or let53 let43))) := by permutateOr lean_s34, [3, 0, 1, 2], (- 1)
have lean_s36 : (Eq And And) := by timed rfl
let lean_s37 := by timed flipCongrArg lean_r30 [HMul.hMul]
have lean_s38 : (Eq let33 let33) := by timed rfl
have lean_s39 : (Eq let35 let35) := by timed congr lean_s37 lean_s38
have lean_s40 : let36 := by timed Eq.trans lean_s39 lean_r11
have lean_s41 : (Eq let50 let19) := by timed Eq.trans lean_r33 lean_s40
have lean_s42 : (Eq skoX skoX) := by timed rfl
let lean_s43 := by timed flipCongrArg lean_s42 [HMul.hMul]
have lean_s44 : (Eq let24 let24) := by timed congr lean_s43 lean_r9
have lean_s45 : let25 := by timed Eq.trans lean_s44 lean_r6
have lean_s46 : (Eq skoY skoY) := by timed rfl
let lean_s47 := by timed flipCongrArg lean_s46 [HMul.hMul]
have lean_s48 : (Eq let47 let47) := by timed congr lean_s47 lean_r9
have lean_s49 : let48 := by timed Eq.trans lean_s48 lean_r15
let lean_s50 := by timed congrHAdd lean_s45 lean_s49
have lean_s51 : (Eq let51 let95) := by timed congrHAdd lean_s41 lean_s50
have lean_s52 : (Eq let51 let41) := by timed Eq.trans lean_s51 lean_r41
have lean_s53 : (Eq let52 let41) := by timed Eq.trans lean_r17 lean_s52
let lean_s54 := by timed flipCongrArg lean_s53 [LE.le]
have lean_s55 : (Eq skoZ skoZ) := by timed rfl
have lean_s56 : (Eq let89 let42) := by timed congr lean_s54 lean_s55
have lean_s57 : (Eq let89 let21) := by timed Eq.trans lean_s56 lean_r13
have lean_s58 : (Eq let90 let22) := by timed flipCongrArg lean_s57 [Not]
let lean_s59 := by timed congr lean_s36 lean_s58
let lean_s60 := by timed flipCongrArg lean_s55 [LE.le]
have lean_s61 : (Eq let87 let68) := by timed congr lean_s60 lean_r20
have lean_s62 : (Eq let87 let28) := by timed Eq.trans lean_s61 lean_r27
have lean_s63 : (Eq let88 let29) := by timed flipCongrArg lean_s62 [Not]
let lean_s64 := by timed congr lean_s36 lean_s63
let lean_s65 := by timed flipCongrArg lean_s46 [LE.le]
have lean_s66 : (Eq let85 let37) := by timed congr lean_s65 lean_r20
have lean_s67 : (Eq let85 let53) := by timed Eq.trans lean_s66 lean_r18
have lean_s68 : (Eq let86 let61) := by timed flipCongrArg lean_s67 [Not]
let lean_s69 := by timed congr lean_s36 lean_s68
let lean_s70 := by timed flipCongrArg lean_s42 [LE.le]
have lean_s71 : (Eq let83 let4) := by timed congr lean_s70 lean_r20
have lean_s72 : (Eq let83 let43) := by timed Eq.trans lean_s71 lean_r21
have lean_s73 : (Eq let84 let44) := by timed flipCongrArg lean_s72 [Not]
let lean_s74 := by timed congr lean_s36 lean_s73
have lean_s75 : (Eq let82 let105) := by timed flipCongrArg lean_r22 [Not]
let lean_s76 := by timed congr lean_s36 lean_s75
have lean_s77 : (Eq let81 let104) := by timed flipCongrArg lean_r26 [Not]
let lean_s78 := by timed congr lean_s36 lean_s77
have lean_s79 : (Eq let80 let103) := by timed flipCongrArg lean_r28 [Not]
let lean_s80 := by timed congr lean_s78 lean_s79
let lean_s81 := by timed congr lean_s76 lean_s80
let lean_s82 := by timed congr lean_s74 lean_s81
let lean_s83 := by timed congr lean_s69 lean_s82
let lean_s84 := by timed congr lean_s64 lean_s83
have lean_s85 : let107 := by timed congr lean_s59 lean_s84
have lean_s86 : let107 := by timed Eq.trans lean_r37 lean_s85
have lean_s87 : let106 := by timed eqResolve lean_a46 lean_s86
have lean_s88 : let44 := by andElim lean_s87, 3
let lean_s89 := by R1 lean_s35, lean_s88, let43, [(- 1), 0]
have lean_s90 : let61 := by andElim lean_s87, 2
let lean_s91 := by R1 lean_s89, lean_s90, let53, [(- 1), 0]
have lean_s92 : let29 := by andElim lean_s87, 1
let lean_s93 := by R1 lean_s91, lean_s92, let28, [(- 1), 0]
have lean_s94 : let22 := by andElim lean_s87, 0
exact (show False from by R1 lean_s93, lean_s94, let21, [0, 0])


