open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 20)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoZ let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoZ let3)
  let let7 := (binrel% LE.le skoX let3)
  let let8 := (Not let7)
  let let9 := (binrel% GT.gt skoX let3)
  let let10 := (Int.ofNat 0)
  let let11 := (Rat.ofInt 1)
  let let12 := (Neg.neg let11)
  let let13 := (binrel% LT.lt let12 let10)
  let let14 := (binrel% HMul.hMul let12 let3)
  let let15 := (Int.ofNat 5)
  let let16 := (binrel% HDiv.hDiv (Int.ofNat 32) let15)
  let let17 := (Neg.neg let16)
  let let18 := (binrel% HMul.hMul let11 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let14 let14)))
  let let20 := (binrel% HMul.hMul let12 skoY)
  let let21 := (binrel% HMul.hMul let12 skoX)
  let let22 := (binrel% HMul.hMul let12 skoZ)
  let let23 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let24 := (binrel% HMul.hMul let11 let23)
  let let25 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let21 let20)))
  let let26 := (binrel% GE.ge let25 let19)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let19)
  let let29 := (Neg.neg let2)
  let let30 := (binrel% HMul.hMul let29 skoX)
  let let31 := (binrel% HMul.hMul let29 skoY)
  let let32 := (Neg.neg let3)
  let let33 := (binrel% LE.le skoY let3)
  let let34 := (Not let33)
  let let35 := (binrel% GT.gt skoY let3)
  let let36 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 131) let1))
  let let37 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let32 let32)))
  let let38 := (binrel% HMul.hMul skoX let12)
  let let39 := (Eq let38 let30)
  let let40 := (binrel% HDiv.hDiv let2 let15)
  let let41 := (Neg.neg (Rat.ofInt 32))
  let let42 := (binrel% HMul.hMul let41 let40)
  let let43 := (Eq let42 let17)
  let let44 := (binrel% HMul.hMul let29 skoZ)
  let let45 := (binrel% GE.ge (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let30 let44)) let16)
  let let46 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let31 let30))
  let let47 := (binrel% LE.le skoZ let46)
  let let48 := (binrel% GE.ge let30 let32)
  let let49 := (Not let48)
  let let50 := (Not let49)
  let let51 := (Eq let50 let48)
  let let52 := (binrel% HMul.hMul skoY let12)
  let let53 := (Eq let52 let31)
  let let54 := (binrel% HDiv.hDiv let41 (Rat.ofInt 5))
  let let55 := (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let38 let52))
  let let56 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let54 let38) let52)
  let let57 := (binrel% GE.ge let31 let32)
  let let58 := (Eq let57 let57)
  let let59 := (binrel% HDiv.hDiv let11 (Rat.ofInt 20))
  let let60 := (Rat.ofInt 0)
  let let61 := (binrel% GE.ge let60 let36)
  let let62 := (Int.ofNat 15)
  let let63 := (binrel% GE.ge skoZ let62)
  let let64 := (Rat.ofInt 15)
  let let65 := (binrel% LE.le let64 skoZ)
  let let66 := (binrel% GT.gt let11 let10)
  let let67 := (Not let57)
  let let68 := (Not let67)
  let let69 := (Eq let57 let68)
  let let70 := (Eq let68 let57)
  let let71 := (binrel% GE.ge skoY let62)
  let let72 := (binrel% LE.le let64 skoY)
  let let73 := (binrel% LE.le let23 let17)
  let let74 := (binrel% GE.ge let44 let32)
  let let75 := (Not True)
  let let76 := (binrel% GE.ge skoX let62)
  let let77 := (binrel% LE.le let64 skoX)
  let let78 := (Eq let74 let74)
  let let79 := (Not let74)
  let let80 := (Not let79)
  let let81 := (Eq let74 let80)
  let let82 := (Eq let80 let74)
  let let83 := (Not let77)
  let let84 := (Not let72)
  let let85 := (Not let65)
  let let86 := (binrel% LE.le skoX let59)
  let let87 := (Not let86)
  let let88 := (binrel% LE.le skoY let59)
  let let89 := (Not let88)
  let let90 := (binrel% LE.le skoZ let59)
  let let91 := (Not let90)
  let let92 := (binrel% LE.le skoZ let56)
  let let93 := (And let92 (And let91 (And let89 (And let87 (And let85 (And let84 let83))))))
  let let94 := (binrel% HAdd.hAdd let30 let31)
  let let95 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let44 let94))
  let let96 := (Eq let48 let48)
  let let97 := (Eq let48 let50)
  let let98 := (binrel% HAdd.hAdd let17 let94)
  let let99 := (Not let73)
  let let100 := (binrel% GT.gt let23 let17)
  let let101 := (Eq let100 let99)
  let let102 := (Not let76)
  let let103 := (Not let71)
  let let104 := (Not let63)
  let let105 := (And let45 (And let79 (And let67 (And let49 (And let104 (And let103 let102))))))
  let let106 := (Eq let93 let105)
  let let107 := (Not let45)
  let let108 := (Or let57 (Or let48 (Or let74 let107)))
  let let109 := (Or let68 (Or let50 (Or let80 let107)))
  let let110 := (binrel% LT.lt let20 let14)
  let let111 := (And let13 let35)
  let let112 := (binrel% LT.lt let21 let14)
  let let113 := (And let13 let9)
  let let114 := (binrel% LT.lt let22 let14)
  let let115 := (And let13 let6)
  let let116 := (binrel% LE.le let24 let18)
  let let117 := (And let66 let73)
(Eq let6 let5) → (Eq let9 let8) → (Eq let13 True) → (Eq let28 let27) → (Eq let24 let23) → (Eq let21 let30) → (Eq let20 let31) → (Eq let18 let17) → (Eq let14 let32) → (Eq let35 let34) → (Eq let37 let36) → let39 → (Eq let12 let12) → let43 → (Eq let47 let45) → let51 → let53 → (Eq let56 let55) → (Eq let33 let57) → (Eq let58 True) → (Eq let59 let3) → (Eq let61 True) → (Eq let7 let48) → (Eq let65 let63) → (Eq let66 True) → (Eq let70 let69) → (Eq let72 let71) → (Eq let73 let45) → (Eq let4 let74) → (Eq let22 let44) → (Eq let75 False) → (Eq let77 let76) → (Eq let78 True) → (Eq let41 let41) → (Eq let54 let42) → (Eq let82 let81) → (Eq let93 let93) → (Eq let95 let60) → (Eq let96 True) → (Eq let51 let97) → (Eq let98 let46) → let70 → let82 → let101 → let93 → False :=
  let let1 := (Int.ofNat 20)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoZ let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoZ let3)
  let let7 := (binrel% LE.le skoX let3)
  let let8 := (Not let7)
  let let9 := (binrel% GT.gt skoX let3)
  let let10 := (Int.ofNat 0)
  let let11 := (Rat.ofInt 1)
  let let12 := (Neg.neg let11)
  let let13 := (binrel% LT.lt let12 let10)
  let let14 := (binrel% HMul.hMul let12 let3)
  let let15 := (Int.ofNat 5)
  let let16 := (binrel% HDiv.hDiv (Int.ofNat 32) let15)
  let let17 := (Neg.neg let16)
  let let18 := (binrel% HMul.hMul let11 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let14 let14)))
  let let20 := (binrel% HMul.hMul let12 skoY)
  let let21 := (binrel% HMul.hMul let12 skoX)
  let let22 := (binrel% HMul.hMul let12 skoZ)
  let let23 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let24 := (binrel% HMul.hMul let11 let23)
  let let25 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let21 let20)))
  let let26 := (binrel% GE.ge let25 let19)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let19)
  let let29 := (Neg.neg let2)
  let let30 := (binrel% HMul.hMul let29 skoX)
  let let31 := (binrel% HMul.hMul let29 skoY)
  let let32 := (Neg.neg let3)
  let let33 := (binrel% LE.le skoY let3)
  let let34 := (Not let33)
  let let35 := (binrel% GT.gt skoY let3)
  let let36 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 131) let1))
  let let37 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let32 let32)))
  let let38 := (binrel% HMul.hMul skoX let12)
  let let39 := (Eq let38 let30)
  let let40 := (binrel% HDiv.hDiv let2 let15)
  let let41 := (Neg.neg (Rat.ofInt 32))
  let let42 := (binrel% HMul.hMul let41 let40)
  let let43 := (Eq let42 let17)
  let let44 := (binrel% HMul.hMul let29 skoZ)
  let let45 := (binrel% GE.ge (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let30 let44)) let16)
  let let46 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let31 let30))
  let let47 := (binrel% LE.le skoZ let46)
  let let48 := (binrel% GE.ge let30 let32)
  let let49 := (Not let48)
  let let50 := (Not let49)
  let let51 := (Eq let50 let48)
  let let52 := (binrel% HMul.hMul skoY let12)
  let let53 := (Eq let52 let31)
  let let54 := (binrel% HDiv.hDiv let41 (Rat.ofInt 5))
  let let55 := (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let38 let52))
  let let56 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let54 let38) let52)
  let let57 := (binrel% GE.ge let31 let32)
  let let58 := (Eq let57 let57)
  let let59 := (binrel% HDiv.hDiv let11 (Rat.ofInt 20))
  let let60 := (Rat.ofInt 0)
  let let61 := (binrel% GE.ge let60 let36)
  let let62 := (Int.ofNat 15)
  let let63 := (binrel% GE.ge skoZ let62)
  let let64 := (Rat.ofInt 15)
  let let65 := (binrel% LE.le let64 skoZ)
  let let66 := (binrel% GT.gt let11 let10)
  let let67 := (Not let57)
  let let68 := (Not let67)
  let let69 := (Eq let57 let68)
  let let70 := (Eq let68 let57)
  let let71 := (binrel% GE.ge skoY let62)
  let let72 := (binrel% LE.le let64 skoY)
  let let73 := (binrel% LE.le let23 let17)
  let let74 := (binrel% GE.ge let44 let32)
  let let75 := (Not True)
  let let76 := (binrel% GE.ge skoX let62)
  let let77 := (binrel% LE.le let64 skoX)
  let let78 := (Eq let74 let74)
  let let79 := (Not let74)
  let let80 := (Not let79)
  let let81 := (Eq let74 let80)
  let let82 := (Eq let80 let74)
  let let83 := (Not let77)
  let let84 := (Not let72)
  let let85 := (Not let65)
  let let86 := (binrel% LE.le skoX let59)
  let let87 := (Not let86)
  let let88 := (binrel% LE.le skoY let59)
  let let89 := (Not let88)
  let let90 := (binrel% LE.le skoZ let59)
  let let91 := (Not let90)
  let let92 := (binrel% LE.le skoZ let56)
  let let93 := (And let92 (And let91 (And let89 (And let87 (And let85 (And let84 let83))))))
  let let94 := (binrel% HAdd.hAdd let30 let31)
  let let95 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let44 let94))
  let let96 := (Eq let48 let48)
  let let97 := (Eq let48 let50)
  let let98 := (binrel% HAdd.hAdd let17 let94)
  let let99 := (Not let73)
  let let100 := (binrel% GT.gt let23 let17)
  let let101 := (Eq let100 let99)
  let let102 := (Not let76)
  let let103 := (Not let71)
  let let104 := (Not let63)
  let let105 := (And let45 (And let79 (And let67 (And let49 (And let104 (And let103 let102))))))
  let let106 := (Eq let93 let105)
  let let107 := (Not let45)
  let let108 := (Or let57 (Or let48 (Or let74 let107)))
  let let109 := (Or let68 (Or let50 (Or let80 let107)))
  let let110 := (binrel% LT.lt let20 let14)
  let let111 := (And let13 let35)
  let let112 := (binrel% LT.lt let21 let14)
  let let113 := (And let13 let9)
  let let114 := (binrel% LT.lt let22 let14)
  let let115 := (And let13 let6)
  let let116 := (binrel% LE.le let24 let18)
  let let117 := (And let66 let73)
fun lean_r0 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let13 True) => -- EVALUATE
fun lean_r3 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let21 let30) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let20 let31) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let14 let32) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r11 : let39 => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let12 let12) => -- THEORY_REWRITE_ARITH
fun lean_r13 : let43 => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let47 let45) => -- THEORY_REWRITE_ARITH
fun lean_r15 : let51 => -- THEORY_REWRITE_BOOL
fun lean_r16 : let53 => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let56 let55) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let33 let57) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let58 True) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let59 let3) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let61 True) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let7 let48) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let65 let63) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let66 True) => -- EVALUATE
fun lean_r25 : (Eq let70 let69) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let72 let71) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let73 let45) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let4 let74) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let22 let44) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let75 False) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let77 let76) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let78 True) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let41 let41) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let54 let42) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let82 let81) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let93 let93) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let95 let60) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let96 True) => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let51 let97) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let98 let46) => -- THEORY_REWRITE_ARITH
fun lean_r41 : let70 => -- THEORY_REWRITE_BOOL
fun lean_r42 : let82 => -- THEORY_REWRITE_BOOL
fun lean_r43 : let101 => -- THEORY_REWRITE_ARITH
fun lean_a44 : let93 => by
have lean_s0 : (Or let68 (Or let50 (Or let80 (Or let107 False)))) :=
  (scope (fun lean_a45 : let67 =>
    (scope (fun lean_a46 : let49 =>
      (scope (fun lean_a47 : let79 =>
        (scope (fun lean_a48 : let45 =>
          have lean_s0 : (Eq let45 let73) := by timed Eq.symm lean_r27
          have lean_s1 : let73 := by timed eqResolve lean_a48 lean_s0
          have lean_s2 : (Or let99 False) :=
            (scope (fun lean_a49 : let73 =>
              have lean_s2 : let66 := by timed trueElim lean_r24
              have lean_s3 : let117 := by timed And.intro lean_s2 lean_a49
              have lean_s4 : (Implies let117 let116) := by arithMulPos [let23, let17, let11], 1
              have lean_s5 : let116 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let13 := by timed trueElim lean_r2
              have lean_s7 : (Eq let5 let79) := by timed flipCongrArg lean_r28 [Not]
              have lean_s8 : (Eq let6 let79) := by timed Eq.trans lean_r0 lean_s7
              have lean_s9 : (Eq let79 let6) := by timed Eq.symm lean_s8
              have lean_s10 : let6 := by timed eqResolve lean_a47 lean_s9
              have lean_s11 : let115 := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies let115 let114) := by arithMulNeg [skoZ, let3, let12], 2
              have lean_s13 : let114 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let8 let49) := by timed flipCongrArg lean_r22 [Not]
              have lean_s15 : (Eq let9 let49) := by timed Eq.trans lean_r1 lean_s14
              have lean_s16 : (Eq let49 let9) := by timed Eq.symm lean_s15
              have lean_s17 : let9 := by timed eqResolve lean_a46 lean_s16
              have lean_s18 : let113 := by timed And.intro lean_s6 lean_s17
              have lean_s19 : (Implies let113 let112) := by arithMulNeg [skoX, let3, let12], 2
              have lean_s20 : let112 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : (Eq let34 let67) := by timed flipCongrArg lean_r18 [Not]
              have lean_s22 : (Eq let35 let67) := by timed Eq.trans lean_r9 lean_s21
              have lean_s23 : (Eq let67 let35) := by timed Eq.symm lean_s22
              have lean_s24 : let35 := by timed eqResolve lean_a45 lean_s23
              have lean_s25 : let111 := by timed And.intro lean_s6 lean_s24
              have lean_s26 : (Implies let111 let110) := by arithMulNeg [skoY, let3, let12], 2
              have lean_s27 : let110 := by timed modusPonens lean_s25 lean_s26
              have lean_s28 : let28 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27]
              let lean_s29 := by timed congrHAdd lean_r5 lean_r6
              let lean_s30 := by timed congrHAdd lean_r29 lean_s29
              have lean_s31 : (Eq let25 let95) := by timed congrHAdd lean_r4 lean_s30
              have lean_s32 : (Eq let25 let60) := by timed Eq.trans lean_s31 lean_r37
              let lean_s33 := by timed flipCongrArg lean_s32 [GE.ge]
              let lean_s34 := by timed congrHAdd lean_r8 lean_r8
              let lean_s35 := by timed congrHAdd lean_r8 lean_s34
              have lean_s36 : (Eq let19 let37) := by timed congrHAdd lean_r7 lean_s35
              have lean_s37 : (Eq let19 let36) := by timed Eq.trans lean_s36 lean_r10
              have lean_s38 : (Eq let26 let61) := by timed congr lean_s33 lean_s37
              have lean_s39 : (Eq let26 True) := by timed Eq.trans lean_s38 lean_r21
              have lean_s40 : (Eq let27 let75) := by timed flipCongrArg lean_s39 [Not]
              have lean_s41 : (Eq let27 False) := by timed Eq.trans lean_s40 lean_r30
              have lean_s42 : (Eq let28 False) := by timed Eq.trans lean_r3 lean_s41
              show False from by timed eqResolve lean_s28 lean_s42
            ))
          have lean_s3 : let99 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let99 let107) := by timed flipCongrArg lean_r27 [Not]
          have lean_s5 : (Eq let100 let107) := by timed Eq.trans lean_r43 lean_s4
          have lean_s6 : (Eq let107 let100) := by timed Eq.symm lean_s5
          have lean_s7 : (Eq let99 let100) := by timed Eq.trans lean_s4 lean_s6
          have lean_s8 : let100 := by timed eqResolve lean_s3 lean_s7
          have lean_s9 : (Eq let107 let99) := by timed Eq.symm lean_s4
          have lean_s10 : let101 := by timed Eq.trans lean_s5 lean_s9
          have lean_s11 : let99 := by timed eqResolve lean_s8 lean_s10
          show False from by timed contradiction lean_s1 lean_s11
  ))))))))
have lean_s1 : (Not (And let67 (And let49 (And let79 let45)))) := by liftOrNToNeg lean_s0
have lean_s2 : let109 := by timed flipNotAnd lean_s1 [let67, let49, let79, let45]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let58 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let69 let58) := by timed congr lean_s5 lean_r41
have lean_s7 : (Eq let69 True) := by timed Eq.trans lean_s6 lean_r19
have lean_s8 : (Eq let70 True) := by timed Eq.trans lean_r25 lean_s7
have lean_s9 : let70 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let96 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let97 let96) := by timed congr lean_s12 lean_r15
have lean_s14 : (Eq let97 True) := by timed Eq.trans lean_s13 lean_r38
have lean_s15 : (Eq let51 True) := by timed Eq.trans lean_r39 lean_s14
have lean_s16 : let51 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let78 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let81 let78) := by timed congr lean_s19 lean_r42
have lean_s21 : (Eq let81 True) := by timed Eq.trans lean_s20 lean_r32
have lean_s22 : (Eq let82 True) := by timed Eq.trans lean_r35 lean_s21
have lean_s23 : let82 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : (Eq let107 let107) := by timed rfl
let lean_s26 := by timed congr lean_s24 lean_s25
let lean_s27 := by timed congr lean_s17 lean_s26
have lean_s28 : (Eq let109 let108) := by timed congr lean_s10 lean_s27
have lean_s29 : let108 := by timed eqResolve lean_s2 lean_s28
have lean_s30 : (Or let74 (Or let57 (Or let48 let107))) := by permutateOr lean_s29, [2, 0, 1, 3], (- 1)
have lean_s31 : (Eq And And) := by timed rfl
have lean_s32 : (Eq skoZ skoZ) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
let lean_s34 := by timed flipCongrArg lean_r33 [HMul.hMul]
have lean_s35 : (Eq let40 let40) := by timed rfl
have lean_s36 : (Eq let42 let42) := by timed congr lean_s34 lean_s35
have lean_s37 : let43 := by timed Eq.trans lean_s36 lean_r13
have lean_s38 : (Eq let54 let17) := by timed Eq.trans lean_r34 lean_s37
have lean_s39 : (Eq skoX skoX) := by timed rfl
let lean_s40 := by timed flipCongrArg lean_s39 [HMul.hMul]
have lean_s41 : (Eq let38 let38) := by timed congr lean_s40 lean_r12
have lean_s42 : let39 := by timed Eq.trans lean_s41 lean_r11
have lean_s43 : (Eq skoY skoY) := by timed rfl
let lean_s44 := by timed flipCongrArg lean_s43 [HMul.hMul]
have lean_s45 : (Eq let52 let52) := by timed congr lean_s44 lean_r12
have lean_s46 : let53 := by timed Eq.trans lean_s45 lean_r16
let lean_s47 := by timed congrHAdd lean_s42 lean_s46
have lean_s48 : (Eq let55 let98) := by timed congrHAdd lean_s38 lean_s47
have lean_s49 : (Eq let55 let46) := by timed Eq.trans lean_s48 lean_r40
have lean_s50 : (Eq let56 let46) := by timed Eq.trans lean_r17 lean_s49
have lean_s51 : (Eq let92 let47) := by timed congr lean_s33 lean_s50
have lean_s52 : (Eq let92 let45) := by timed Eq.trans lean_s51 lean_r14
let lean_s53 := by timed congr lean_s31 lean_s52
let lean_s54 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s55 : (Eq let90 let4) := by timed congr lean_s54 lean_r20
have lean_s56 : (Eq let90 let74) := by timed Eq.trans lean_s55 lean_r28
have lean_s57 : (Eq let91 let79) := by timed flipCongrArg lean_s56 [Not]
let lean_s58 := by timed congr lean_s31 lean_s57
let lean_s59 := by timed flipCongrArg lean_s43 [LE.le]
have lean_s60 : (Eq let88 let33) := by timed congr lean_s59 lean_r20
have lean_s61 : (Eq let88 let57) := by timed Eq.trans lean_s60 lean_r18
have lean_s62 : (Eq let89 let67) := by timed flipCongrArg lean_s61 [Not]
let lean_s63 := by timed congr lean_s31 lean_s62
let lean_s64 := by timed flipCongrArg lean_s39 [LE.le]
have lean_s65 : (Eq let86 let7) := by timed congr lean_s64 lean_r20
have lean_s66 : (Eq let86 let48) := by timed Eq.trans lean_s65 lean_r22
have lean_s67 : (Eq let87 let49) := by timed flipCongrArg lean_s66 [Not]
let lean_s68 := by timed congr lean_s31 lean_s67
have lean_s69 : (Eq let85 let104) := by timed flipCongrArg lean_r23 [Not]
let lean_s70 := by timed congr lean_s31 lean_s69
have lean_s71 : (Eq let84 let103) := by timed flipCongrArg lean_r26 [Not]
let lean_s72 := by timed congr lean_s31 lean_s71
have lean_s73 : (Eq let83 let102) := by timed flipCongrArg lean_r31 [Not]
let lean_s74 := by timed congr lean_s72 lean_s73
let lean_s75 := by timed congr lean_s70 lean_s74
let lean_s76 := by timed congr lean_s68 lean_s75
let lean_s77 := by timed congr lean_s63 lean_s76
let lean_s78 := by timed congr lean_s58 lean_s77
have lean_s79 : let106 := by timed congr lean_s53 lean_s78
have lean_s80 : let106 := by timed Eq.trans lean_r36 lean_s79
have lean_s81 : let105 := by timed eqResolve lean_a44 lean_s80
have lean_s82 : let49 := by andElim lean_s81, 3
let lean_s83 := by R1 lean_s30, lean_s82, let48, [(- 1), 0]
have lean_s84 : let67 := by andElim lean_s81, 2
let lean_s85 := by R1 lean_s83, lean_s84, let57, [(- 1), 0]
have lean_s86 : let79 := by andElim lean_s81, 1
let lean_s87 := by R1 lean_s85, lean_s86, let74, [(- 1), 0]
have lean_s88 : let45 := by andElim lean_s81, 0
exact (show False from by R2 lean_s87, lean_s88, let45, [0, 0])


