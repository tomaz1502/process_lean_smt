open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (binrel% HDiv.hDiv let4 (Int.ofNat 2))
  let let6 := (Neg.neg let5)
  let let7 := (Neg.neg let2)
  let let8 := (binrel% HMul.hMul let7 let5)
  let let9 := (Eq let8 let6)
  let let10 := (Int.ofNat 20)
  let let11 := (binrel% HDiv.hDiv let4 let10)
  let let12 := (Neg.neg let11)
  let let13 := (Neg.neg let4)
  let let14 := (binrel% HMul.hMul let13 skoY)
  let let15 := (binrel% GE.ge let14 let12)
  let let16 := (binrel% LE.le skoY let11)
  let let17 := (binrel% HMul.hMul skoY let7)
  let let18 := (Eq let17 let14)
  let let19 := (Not True)
  let let20 := (binrel% HMul.hMul let13 skoX)
  let let21 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let14 let20))
  let let22 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let20 let14))
  let let23 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let24 := (Int.ofNat 15)
  let let25 := (binrel% GE.ge skoZ let24)
  let let26 := (Rat.ofInt 15)
  let let27 := (binrel% LE.le let26 skoZ)
  let let28 := (binrel% LE.le skoZ let11)
  let let29 := (Not let28)
  let let30 := (binrel% GT.gt skoZ let11)
  let let31 := (binrel% HMul.hMul skoX let7)
  let let32 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let31 let17))
  let let33 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let31) let17)
  let let34 := (binrel% GE.ge let20 let12)
  let let35 := (binrel% LE.le skoX let11)
  let let36 := (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) let4)
  let let37 := (binrel% LE.le let21 skoZ)
  let let38 := (binrel% GE.ge skoY let24)
  let let39 := (binrel% LE.le let26 skoY)
  let let40 := (binrel% HMul.hMul let13 skoZ)
  let let41 := (binrel% GE.ge let40 let12)
  let let42 := (binrel% HDiv.hDiv let7 (Rat.ofInt 2))
  let let43 := (binrel% HMul.hMul let7 skoZ)
  let let44 := (binrel% GE.ge skoX let24)
  let let45 := (binrel% LE.le let26 skoX)
  let let46 := (Eq let31 let20)
  let let47 := (Not let45)
  let let48 := (Not let39)
  let let49 := (Not let27)
  let let50 := (binrel% LE.le skoX let23)
  let let51 := (Not let50)
  let let52 := (binrel% LE.le skoY let23)
  let let53 := (Not let52)
  let let54 := (binrel% LE.le skoZ let23)
  let let55 := (Not let54)
  let let56 := (binrel% LE.le skoZ let42)
  let let57 := (binrel% LE.le let33 skoZ)
  let let58 := (And let57 (And let56 (And let55 (And let53 (And let51 (And let49 (And let48 let47)))))))
  let let59 := (Not let41)
  let let60 := (Not let59)
  let let61 := (binrel% HMul.hMul let2 let6)
  let let62 := (binrel% GE.ge let40 let5)
  let let63 := (binrel% LE.le skoZ let6)
  let let64 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 11) let10))
  let let65 := (binrel% HAdd.hAdd let6 let12)
  let let66 := (binrel% HMul.hMul let7 let11)
  let let67 := (Rat.ofInt 0)
  let let68 := (binrel% HAdd.hAdd skoZ let40)
  let let69 := (binrel% HMul.hMul let2 skoZ)
  let let70 := (binrel% HAdd.hAdd let61 let66)
  let let71 := (binrel% HAdd.hAdd let69 let43)
  let let72 := (binrel% GE.ge let71 let70)
  let let73 := (Not let72)
  let let74 := (binrel% LT.lt let71 let70)
  let let75 := (binrel% GE.ge let67 let64)
  let let76 := (binrel% LT.lt let7 let1)
  let let77 := (Not let44)
  let let78 := (Not let38)
  let let79 := (Not let25)
  let let80 := (Not let34)
  let let81 := (Not let15)
  let let82 := (And let36 (And let62 (And let59 (And let81 (And let80 (And let79 (And let78 let77)))))))
  let let83 := (Eq let58 let82)
  let let84 := (Not let62)
  let let85 := (Or let41 let84)
  let let86 := (Or let60 let84)
  let let87 := (binrel% LT.lt let43 let66)
  let let88 := (And let76 let30)
  let let89 := (binrel% LE.le let69 let61)
  let let90 := (And let3 let63)
(Eq let3 True) → let9 → (Eq let16 let15) → let18 → (Eq let19 False) → (Eq let22 let21) → (Eq let23 let11) → (Eq let27 let25) → (Eq let30 let29) → (Eq let33 let32) → (Eq let35 let34) → (Eq let37 let36) → (Eq let7 let7) → (Eq let39 let38) → (Eq let28 let41) → (Eq let42 let8) → (Eq let43 let40) → (Eq let45 let44) → let46 → (Eq let58 let58) → (Eq let60 let41) → (Eq let61 let6) → (Eq let63 let62) → (Eq let65 let64) → (Eq let66 let12) → (Eq let68 let67) → (Eq let69 skoZ) → (Eq let74 let73) → (Eq let75 True) → (Eq let76 True) → let58 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (binrel% HDiv.hDiv let4 (Int.ofNat 2))
  let let6 := (Neg.neg let5)
  let let7 := (Neg.neg let2)
  let let8 := (binrel% HMul.hMul let7 let5)
  let let9 := (Eq let8 let6)
  let let10 := (Int.ofNat 20)
  let let11 := (binrel% HDiv.hDiv let4 let10)
  let let12 := (Neg.neg let11)
  let let13 := (Neg.neg let4)
  let let14 := (binrel% HMul.hMul let13 skoY)
  let let15 := (binrel% GE.ge let14 let12)
  let let16 := (binrel% LE.le skoY let11)
  let let17 := (binrel% HMul.hMul skoY let7)
  let let18 := (Eq let17 let14)
  let let19 := (Not True)
  let let20 := (binrel% HMul.hMul let13 skoX)
  let let21 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let14 let20))
  let let22 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let20 let14))
  let let23 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let24 := (Int.ofNat 15)
  let let25 := (binrel% GE.ge skoZ let24)
  let let26 := (Rat.ofInt 15)
  let let27 := (binrel% LE.le let26 skoZ)
  let let28 := (binrel% LE.le skoZ let11)
  let let29 := (Not let28)
  let let30 := (binrel% GT.gt skoZ let11)
  let let31 := (binrel% HMul.hMul skoX let7)
  let let32 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let31 let17))
  let let33 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let31) let17)
  let let34 := (binrel% GE.ge let20 let12)
  let let35 := (binrel% LE.le skoX let11)
  let let36 := (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) let4)
  let let37 := (binrel% LE.le let21 skoZ)
  let let38 := (binrel% GE.ge skoY let24)
  let let39 := (binrel% LE.le let26 skoY)
  let let40 := (binrel% HMul.hMul let13 skoZ)
  let let41 := (binrel% GE.ge let40 let12)
  let let42 := (binrel% HDiv.hDiv let7 (Rat.ofInt 2))
  let let43 := (binrel% HMul.hMul let7 skoZ)
  let let44 := (binrel% GE.ge skoX let24)
  let let45 := (binrel% LE.le let26 skoX)
  let let46 := (Eq let31 let20)
  let let47 := (Not let45)
  let let48 := (Not let39)
  let let49 := (Not let27)
  let let50 := (binrel% LE.le skoX let23)
  let let51 := (Not let50)
  let let52 := (binrel% LE.le skoY let23)
  let let53 := (Not let52)
  let let54 := (binrel% LE.le skoZ let23)
  let let55 := (Not let54)
  let let56 := (binrel% LE.le skoZ let42)
  let let57 := (binrel% LE.le let33 skoZ)
  let let58 := (And let57 (And let56 (And let55 (And let53 (And let51 (And let49 (And let48 let47)))))))
  let let59 := (Not let41)
  let let60 := (Not let59)
  let let61 := (binrel% HMul.hMul let2 let6)
  let let62 := (binrel% GE.ge let40 let5)
  let let63 := (binrel% LE.le skoZ let6)
  let let64 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 11) let10))
  let let65 := (binrel% HAdd.hAdd let6 let12)
  let let66 := (binrel% HMul.hMul let7 let11)
  let let67 := (Rat.ofInt 0)
  let let68 := (binrel% HAdd.hAdd skoZ let40)
  let let69 := (binrel% HMul.hMul let2 skoZ)
  let let70 := (binrel% HAdd.hAdd let61 let66)
  let let71 := (binrel% HAdd.hAdd let69 let43)
  let let72 := (binrel% GE.ge let71 let70)
  let let73 := (Not let72)
  let let74 := (binrel% LT.lt let71 let70)
  let let75 := (binrel% GE.ge let67 let64)
  let let76 := (binrel% LT.lt let7 let1)
  let let77 := (Not let44)
  let let78 := (Not let38)
  let let79 := (Not let25)
  let let80 := (Not let34)
  let let81 := (Not let15)
  let let82 := (And let36 (And let62 (And let59 (And let81 (And let80 (And let79 (And let78 let77)))))))
  let let83 := (Eq let58 let82)
  let let84 := (Not let62)
  let let85 := (Or let41 let84)
  let let86 := (Or let60 let84)
  let let87 := (binrel% LT.lt let43 let66)
  let let88 := (And let76 let30)
  let let89 := (binrel% LE.le let69 let61)
  let let90 := (And let3 let63)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : let9 => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let16 let15) => -- THEORY_REWRITE_ARITH
fun lean_r3 : let18 => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let19 False) => -- THEORY_REWRITE_BOOL
fun lean_r5 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let23 let11) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let27 let25) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let30 let29) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let7 let7) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let28 let41) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let42 let8) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let43 let40) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r18 : let46 => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let58 let58) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let60 let41) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let61 let6) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let65 let64) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let66 let12) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let68 let67) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let69 skoZ) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let74 let73) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let75 True) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let76 True) => -- EVALUATE
fun lean_a30 : let58 => by
have lean_s0 : (Or let60 (Or let84 False)) :=
  (scope (fun lean_a31 : let59 =>
    (scope (fun lean_a32 : let62 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let62 let63) := by timed Eq.symm lean_r22
      have lean_s2 : let63 := by timed eqResolve lean_a32 lean_s1
      have lean_s3 : let90 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let90 let89) := by arithMulPos [skoZ, let6, let2], 1
      have lean_s5 : let89 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let76 := by timed trueElim lean_r29
      have lean_s7 : (Eq let29 let59) := by timed flipCongrArg lean_r14 [Not]
      have lean_s8 : (Eq let30 let59) := by timed Eq.trans lean_r8 lean_s7
      have lean_s9 : (Eq let59 let30) := by timed Eq.symm lean_s8
      have lean_s10 : let30 := by timed eqResolve lean_a31 lean_s9
      have lean_s11 : let88 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let88 let87) := by arithMulNeg [skoZ, let11, let7], 2
      have lean_s13 : let87 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let74 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r26 [HAdd.hAdd]
      have lean_s16 : (Eq let71 let68) := by timed congr lean_s15 lean_r16
      have lean_s17 : (Eq let71 let67) := by timed Eq.trans lean_s16 lean_r25
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r21 [HAdd.hAdd]
      have lean_s20 : (Eq let70 let65) := by timed congr lean_s19 lean_r24
      have lean_s21 : (Eq let70 let64) := by timed Eq.trans lean_s20 lean_r23
      have lean_s22 : (Eq let72 let75) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let72 True) := by timed Eq.trans lean_s22 lean_r28
      have lean_s24 : (Eq let73 let19) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let73 False) := by timed Eq.trans lean_s24 lean_r4
      have lean_s26 : (Eq let74 False) := by timed Eq.trans lean_r27 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let59 let62)) := by liftOrNToNeg lean_s0
have lean_s2 : let86 := by timed flipNotAnd lean_s1 [let59, let62]
let lean_s3 := by timed flipCongrArg lean_r20 [Or]
have lean_s4 : (Eq let84 let84) := by timed rfl
have lean_s5 : (Eq let86 let85) := by timed congr lean_s3 lean_s4
have lean_s6 : let85 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
have lean_s8 : (Eq let2 let2) := by timed rfl
have lean_s9 : (Eq skoX skoX) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s11 : (Eq let31 let31) := by timed congr lean_s10 lean_r12
have lean_s12 : let46 := by timed Eq.trans lean_s11 lean_r18
have lean_s13 : (Eq skoY skoY) := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [HMul.hMul]
have lean_s15 : (Eq let17 let17) := by timed congr lean_s14 lean_r12
have lean_s16 : let18 := by timed Eq.trans lean_s15 lean_r3
let lean_s17 := by timed congrHAdd lean_s12 lean_s16
have lean_s18 : (Eq let32 let22) := by timed congrHAdd lean_s8 lean_s17
have lean_s19 : (Eq let32 let21) := by timed Eq.trans lean_s18 lean_r5
have lean_s20 : (Eq let33 let21) := by timed Eq.trans lean_r9 lean_s19
let lean_s21 := by timed flipCongrArg lean_s20 [LE.le]
have lean_s22 : (Eq skoZ skoZ) := by timed rfl
have lean_s23 : (Eq let57 let37) := by timed congr lean_s21 lean_s22
have lean_s24 : (Eq let57 let36) := by timed Eq.trans lean_s23 lean_r11
let lean_s25 := by timed congr lean_s7 lean_s24
let lean_s26 := by timed flipCongrArg lean_s22 [LE.le]
let lean_s27 := by timed flipCongrArg lean_r12 [HMul.hMul]
have lean_s28 : (Eq let5 let5) := by timed rfl
have lean_s29 : (Eq let8 let8) := by timed congr lean_s27 lean_s28
have lean_s30 : let9 := by timed Eq.trans lean_s29 lean_r1
have lean_s31 : (Eq let42 let6) := by timed Eq.trans lean_r15 lean_s30
have lean_s32 : (Eq let56 let63) := by timed congr lean_s26 lean_s31
have lean_s33 : (Eq let56 let62) := by timed Eq.trans lean_s32 lean_r22
let lean_s34 := by timed congr lean_s7 lean_s33
let lean_s35 := by timed flipCongrArg lean_s22 [LE.le]
have lean_s36 : (Eq let54 let28) := by timed congr lean_s35 lean_r6
have lean_s37 : (Eq let54 let41) := by timed Eq.trans lean_s36 lean_r14
have lean_s38 : (Eq let55 let59) := by timed flipCongrArg lean_s37 [Not]
let lean_s39 := by timed congr lean_s7 lean_s38
let lean_s40 := by timed flipCongrArg lean_s13 [LE.le]
have lean_s41 : (Eq let52 let16) := by timed congr lean_s40 lean_r6
have lean_s42 : (Eq let52 let15) := by timed Eq.trans lean_s41 lean_r2
have lean_s43 : (Eq let53 let81) := by timed flipCongrArg lean_s42 [Not]
let lean_s44 := by timed congr lean_s7 lean_s43
let lean_s45 := by timed flipCongrArg lean_s9 [LE.le]
have lean_s46 : (Eq let50 let35) := by timed congr lean_s45 lean_r6
have lean_s47 : (Eq let50 let34) := by timed Eq.trans lean_s46 lean_r10
have lean_s48 : (Eq let51 let80) := by timed flipCongrArg lean_s47 [Not]
let lean_s49 := by timed congr lean_s7 lean_s48
have lean_s50 : (Eq let49 let79) := by timed flipCongrArg lean_r7 [Not]
let lean_s51 := by timed congr lean_s7 lean_s50
have lean_s52 : (Eq let48 let78) := by timed flipCongrArg lean_r13 [Not]
let lean_s53 := by timed congr lean_s7 lean_s52
have lean_s54 : (Eq let47 let77) := by timed flipCongrArg lean_r17 [Not]
let lean_s55 := by timed congr lean_s53 lean_s54
let lean_s56 := by timed congr lean_s51 lean_s55
let lean_s57 := by timed congr lean_s49 lean_s56
let lean_s58 := by timed congr lean_s44 lean_s57
let lean_s59 := by timed congr lean_s39 lean_s58
let lean_s60 := by timed congr lean_s34 lean_s59
have lean_s61 : let83 := by timed congr lean_s25 lean_s60
have lean_s62 : let83 := by timed Eq.trans lean_r19 lean_s61
have lean_s63 : let82 := by timed eqResolve lean_a30 lean_s62
have lean_s64 : let59 := by andElim lean_s63, 2
let lean_s65 := by R1 lean_s6, lean_s64, let41, [(- 1), 0]
have lean_s66 : let62 := by andElim lean_s63, 1
exact (show False from by R2 lean_s65, lean_s66, let62, [0, 0])


