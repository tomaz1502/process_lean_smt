open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 20)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoY let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoY let3)
  let let7 := (Int.ofNat 0)
  let let8 := (Rat.ofInt 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% LT.lt let9 let7)
  let let11 := (binrel% LE.le skoZ let3)
  let let12 := (Not let11)
  let let13 := (binrel% GT.gt skoZ let3)
  let let14 := (binrel% GT.gt let8 let7)
  let let15 := (binrel% HMul.hMul let9 let3)
  let let16 := (Int.ofNat 5)
  let let17 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 4) let16))
  let let18 := (binrel% HMul.hMul let8 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let15 let15)))
  let let20 := (binrel% HMul.hMul let9 skoZ)
  let let21 := (binrel% HMul.hMul let9 skoY)
  let let22 := (binrel% HMul.hMul let9 skoX)
  let let23 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let24 := (binrel% HMul.hMul let8 let23)
  let let25 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let21 let20)))
  let let26 := (binrel% GE.ge let25 let19)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let19)
  let let29 := (Neg.neg let2)
  let let30 := (binrel% HMul.hMul let29 skoX)
  let let31 := (binrel% HMul.hMul let29 skoY)
  let let32 := (binrel% GE.ge let23 let17)
  let let33 := (Not let32)
  let let34 := (binrel% LT.lt let23 let17)
  let let35 := (binrel% HMul.hMul skoX let9)
  let let36 := (Eq let35 let30)
  let let37 := (Neg.neg let3)
  let let38 := (binrel% HMul.hMul let29 skoZ)
  let let39 := (binrel% GE.ge let38 let37)
  let let40 := (Not let39)
  let let41 := (Not let40)
  let let42 := (Eq let39 let41)
  let let43 := (Eq let41 let39)
  let let44 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 19) let1))
  let let45 := (Rat.ofInt 0)
  let let46 := (binrel% GE.ge let45 let44)
  let let47 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let37 let37)))
  let let48 := (binrel% HDiv.hDiv let2 let16)
  let let49 := (Neg.neg (Rat.ofInt 4))
  let let50 := (binrel% HMul.hMul let49 let48)
  let let51 := (Eq let50 let17)
  let let52 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let31 let38)))
  let let53 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let31 let30))
  let let54 := (binrel% LE.le let53 skoZ)
  let let55 := (binrel% GE.ge let30 let37)
  let let56 := (Not let55)
  let let57 := (Not let56)
  let let58 := (Eq let57 let55)
  let let59 := (binrel% HMul.hMul skoY let9)
  let let60 := (Eq let59 let31)
  let let61 := (binrel% HDiv.hDiv let49 (Rat.ofInt 5))
  let let62 := (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let35 let59))
  let let63 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let61 let35) let59)
  let let64 := (binrel% GE.ge let31 let37)
  let let65 := (Eq let64 let64)
  let let66 := (binrel% HDiv.hDiv let8 (Rat.ofInt 20))
  let let67 := (binrel% LE.le skoX let3)
  let let68 := (Int.ofNat 15)
  let let69 := (binrel% GE.ge skoZ let68)
  let let70 := (Rat.ofInt 15)
  let let71 := (binrel% LE.le let70 skoZ)
  let let72 := (Not True)
  let let73 := (Not let64)
  let let74 := (Not let73)
  let let75 := (Eq let64 let74)
  let let76 := (Eq let74 let64)
  let let77 := (binrel% GE.ge skoY let68)
  let let78 := (binrel% LE.le let70 skoY)
  let let79 := (binrel% GE.ge skoX let68)
  let let80 := (binrel% LE.le let70 skoX)
  let let81 := (Eq let32 let32)
  let let82 := (Not let33)
  let let83 := (Eq let82 let32)
  let let84 := (Eq let32 let82)
  let let85 := (Not let80)
  let let86 := (Not let78)
  let let87 := (Not let71)
  let let88 := (binrel% LE.le skoX let66)
  let let89 := (Not let88)
  let let90 := (binrel% LE.le skoY let66)
  let let91 := (Not let90)
  let let92 := (binrel% LE.le skoZ let66)
  let let93 := (Not let92)
  let let94 := (binrel% LE.le let63 skoZ)
  let let95 := (Not let94)
  let let96 := (And let95 (And let93 (And let91 (And let89 (And let87 (And let86 let85))))))
  let let97 := (Eq let55 let55)
  let let98 := (Eq let55 let57)
  let let99 := (Not let67)
  let let100 := (binrel% GT.gt skoX let3)
  let let101 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let30 let31))
  let let102 := (Eq let39 let39)
  let let103 := (Not let79)
  let let104 := (Not let77)
  let let105 := (Not let69)
  let let106 := (And let33 (And let40 (And let73 (And let56 (And let105 (And let104 let103))))))
  let let107 := (Eq let96 let106)
  let let108 := (Or let39 (Or let64 (Or let55 let32)))
  let let109 := (Or let41 (Or let74 (Or let57 let82)))
  let let110 := (Not let34)
  let let111 := (binrel% LT.lt let20 let15)
  let let112 := (And let10 let13)
  let let113 := (binrel% LT.lt let21 let15)
  let let114 := (And let10 let6)
  let let115 := (binrel% LT.lt let22 let15)
  let let116 := (And let10 let100)
  let let117 := (binrel% LT.lt let24 let18)
  let let118 := (And let14 let34)
(Eq let6 let5) → (Eq let10 True) → (Eq let13 let12) → (Eq let14 True) → (Eq let28 let27) → (Eq let24 let23) → (Eq let22 let30) → (Eq let21 let31) → (Eq let18 let17) → (Eq let34 let33) → let36 → (Eq let43 let42) → (Eq let46 True) → (Eq let9 let9) → let43 → (Eq let47 let44) → let51 → (Eq let52 let45) → (Eq let54 let32) → let58 → let60 → (Eq let63 let62) → (Eq let4 let64) → (Eq let65 True) → (Eq let66 let3) → (Eq let67 let55) → (Eq let71 let69) → (Eq let72 False) → (Eq let76 let75) → (Eq let78 let77) → (Eq let15 let37) → (Eq let11 let39) → (Eq let20 let38) → (Eq let80 let79) → (Eq let81 True) → (Eq let49 let49) → let83 → (Eq let61 let50) → (Eq let83 let84) → (Eq let96 let96) → (Eq let97 True) → (Eq let58 let98) → (Eq let100 let99) → (Eq let101 let53) → let76 → (Eq let102 True) → let96 → False :=
  let let1 := (Int.ofNat 20)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoY let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoY let3)
  let let7 := (Int.ofNat 0)
  let let8 := (Rat.ofInt 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% LT.lt let9 let7)
  let let11 := (binrel% LE.le skoZ let3)
  let let12 := (Not let11)
  let let13 := (binrel% GT.gt skoZ let3)
  let let14 := (binrel% GT.gt let8 let7)
  let let15 := (binrel% HMul.hMul let9 let3)
  let let16 := (Int.ofNat 5)
  let let17 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 4) let16))
  let let18 := (binrel% HMul.hMul let8 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let15 let15)))
  let let20 := (binrel% HMul.hMul let9 skoZ)
  let let21 := (binrel% HMul.hMul let9 skoY)
  let let22 := (binrel% HMul.hMul let9 skoX)
  let let23 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let24 := (binrel% HMul.hMul let8 let23)
  let let25 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let21 let20)))
  let let26 := (binrel% GE.ge let25 let19)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let19)
  let let29 := (Neg.neg let2)
  let let30 := (binrel% HMul.hMul let29 skoX)
  let let31 := (binrel% HMul.hMul let29 skoY)
  let let32 := (binrel% GE.ge let23 let17)
  let let33 := (Not let32)
  let let34 := (binrel% LT.lt let23 let17)
  let let35 := (binrel% HMul.hMul skoX let9)
  let let36 := (Eq let35 let30)
  let let37 := (Neg.neg let3)
  let let38 := (binrel% HMul.hMul let29 skoZ)
  let let39 := (binrel% GE.ge let38 let37)
  let let40 := (Not let39)
  let let41 := (Not let40)
  let let42 := (Eq let39 let41)
  let let43 := (Eq let41 let39)
  let let44 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 19) let1))
  let let45 := (Rat.ofInt 0)
  let let46 := (binrel% GE.ge let45 let44)
  let let47 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let37 (binrel% HAdd.hAdd let37 let37)))
  let let48 := (binrel% HDiv.hDiv let2 let16)
  let let49 := (Neg.neg (Rat.ofInt 4))
  let let50 := (binrel% HMul.hMul let49 let48)
  let let51 := (Eq let50 let17)
  let let52 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let31 let38)))
  let let53 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let31 let30))
  let let54 := (binrel% LE.le let53 skoZ)
  let let55 := (binrel% GE.ge let30 let37)
  let let56 := (Not let55)
  let let57 := (Not let56)
  let let58 := (Eq let57 let55)
  let let59 := (binrel% HMul.hMul skoY let9)
  let let60 := (Eq let59 let31)
  let let61 := (binrel% HDiv.hDiv let49 (Rat.ofInt 5))
  let let62 := (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let35 let59))
  let let63 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let61 let35) let59)
  let let64 := (binrel% GE.ge let31 let37)
  let let65 := (Eq let64 let64)
  let let66 := (binrel% HDiv.hDiv let8 (Rat.ofInt 20))
  let let67 := (binrel% LE.le skoX let3)
  let let68 := (Int.ofNat 15)
  let let69 := (binrel% GE.ge skoZ let68)
  let let70 := (Rat.ofInt 15)
  let let71 := (binrel% LE.le let70 skoZ)
  let let72 := (Not True)
  let let73 := (Not let64)
  let let74 := (Not let73)
  let let75 := (Eq let64 let74)
  let let76 := (Eq let74 let64)
  let let77 := (binrel% GE.ge skoY let68)
  let let78 := (binrel% LE.le let70 skoY)
  let let79 := (binrel% GE.ge skoX let68)
  let let80 := (binrel% LE.le let70 skoX)
  let let81 := (Eq let32 let32)
  let let82 := (Not let33)
  let let83 := (Eq let82 let32)
  let let84 := (Eq let32 let82)
  let let85 := (Not let80)
  let let86 := (Not let78)
  let let87 := (Not let71)
  let let88 := (binrel% LE.le skoX let66)
  let let89 := (Not let88)
  let let90 := (binrel% LE.le skoY let66)
  let let91 := (Not let90)
  let let92 := (binrel% LE.le skoZ let66)
  let let93 := (Not let92)
  let let94 := (binrel% LE.le let63 skoZ)
  let let95 := (Not let94)
  let let96 := (And let95 (And let93 (And let91 (And let89 (And let87 (And let86 let85))))))
  let let97 := (Eq let55 let55)
  let let98 := (Eq let55 let57)
  let let99 := (Not let67)
  let let100 := (binrel% GT.gt skoX let3)
  let let101 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let30 let31))
  let let102 := (Eq let39 let39)
  let let103 := (Not let79)
  let let104 := (Not let77)
  let let105 := (Not let69)
  let let106 := (And let33 (And let40 (And let73 (And let56 (And let105 (And let104 let103))))))
  let let107 := (Eq let96 let106)
  let let108 := (Or let39 (Or let64 (Or let55 let32)))
  let let109 := (Or let41 (Or let74 (Or let57 let82)))
  let let110 := (Not let34)
  let let111 := (binrel% LT.lt let20 let15)
  let let112 := (And let10 let13)
  let let113 := (binrel% LT.lt let21 let15)
  let let114 := (And let10 let6)
  let let115 := (binrel% LT.lt let22 let15)
  let let116 := (And let10 let100)
  let let117 := (binrel% LT.lt let24 let18)
  let let118 := (And let14 let34)
fun lean_r0 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let10 True) => -- EVALUATE
fun lean_r2 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let14 True) => -- EVALUATE
fun lean_r4 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let22 let30) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let21 let31) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r10 : let36 => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let43 let42) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let46 True) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let9 let9) => -- THEORY_REWRITE_ARITH
fun lean_r14 : let43 => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let47 let44) => -- THEORY_REWRITE_ARITH
fun lean_r16 : let51 => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let52 let45) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let54 let32) => -- THEORY_REWRITE_ARITH
fun lean_r19 : let58 => -- THEORY_REWRITE_BOOL
fun lean_r20 : let60 => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let4 let64) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let65 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let66 let3) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let67 let55) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let71 let69) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let72 False) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let76 let75) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let78 let77) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let15 let37) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let11 let39) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let20 let38) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let80 let79) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let81 True) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let49 let49) => -- THEORY_REWRITE_ARITH
fun lean_r36 : let83 => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let61 let50) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let83 let84) => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let96 let96) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let97 True) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let58 let98) => -- THEORY_REWRITE_BOOL
fun lean_r42 : (Eq let100 let99) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let101 let53) => -- THEORY_REWRITE_ARITH
fun lean_r44 : let76 => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let102 True) => -- THEORY_REWRITE_BOOL
fun lean_a46 : let96 => by
have lean_s0 : (Or let41 (Or let74 (Or let57 (Or let82 False)))) :=
  (scope (fun lean_a47 : let40 =>
    (scope (fun lean_a48 : let73 =>
      (scope (fun lean_a49 : let56 =>
        (scope (fun lean_a50 : let33 =>
          have lean_s0 : (Eq let33 let34) := by timed Eq.symm lean_r9
          have lean_s1 : let34 := by timed eqResolve lean_a50 lean_s0
          have lean_s2 : (Or let110 False) :=
            (scope (fun lean_a51 : let34 =>
              have lean_s2 : let14 := by timed trueElim lean_r3
              have lean_s3 : let118 := by timed And.intro lean_s2 lean_a51
              have lean_s4 : (Implies let118 let117) := by arithMulPos [let23, let17, let8], 0
              have lean_s5 : let117 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let10 := by timed trueElim lean_r1
              have lean_s7 : (Eq let99 let56) := by timed flipCongrArg lean_r25 [Not]
              have lean_s8 : (Eq let100 let56) := by timed Eq.trans lean_r42 lean_s7
              have lean_s9 : (Eq let56 let100) := by timed Eq.symm lean_s8
              have lean_s10 : let100 := by timed eqResolve lean_a49 lean_s9
              have lean_s11 : let116 := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies let116 let115) := by arithMulNeg [skoX, let3, let9], 2
              have lean_s13 : let115 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let5 let73) := by timed flipCongrArg lean_r22 [Not]
              have lean_s15 : (Eq let6 let73) := by timed Eq.trans lean_r0 lean_s14
              have lean_s16 : (Eq let73 let6) := by timed Eq.symm lean_s15
              have lean_s17 : let6 := by timed eqResolve lean_a48 lean_s16
              have lean_s18 : let114 := by timed And.intro lean_s6 lean_s17
              have lean_s19 : (Implies let114 let113) := by arithMulNeg [skoY, let3, let9], 2
              have lean_s20 : let113 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : (Eq let12 let40) := by timed flipCongrArg lean_r31 [Not]
              have lean_s22 : (Eq let13 let40) := by timed Eq.trans lean_r2 lean_s21
              have lean_s23 : (Eq let40 let13) := by timed Eq.symm lean_s22
              have lean_s24 : let13 := by timed eqResolve lean_a47 lean_s23
              have lean_s25 : let112 := by timed And.intro lean_s6 lean_s24
              have lean_s26 : (Implies let112 let111) := by arithMulNeg [skoZ, let3, let9], 2
              have lean_s27 : let111 := by timed modusPonens lean_s25 lean_s26
              have lean_s28 : let28 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27]
              let lean_s29 := by timed congrHAdd lean_r7 lean_r32
              let lean_s30 := by timed congrHAdd lean_r6 lean_s29
              have lean_s31 : (Eq let25 let52) := by timed congrHAdd lean_r5 lean_s30
              have lean_s32 : (Eq let25 let45) := by timed Eq.trans lean_s31 lean_r17
              let lean_s33 := by timed flipCongrArg lean_s32 [GE.ge]
              let lean_s34 := by timed congrHAdd lean_r30 lean_r30
              let lean_s35 := by timed congrHAdd lean_r30 lean_s34
              have lean_s36 : (Eq let19 let47) := by timed congrHAdd lean_r8 lean_s35
              have lean_s37 : (Eq let19 let44) := by timed Eq.trans lean_s36 lean_r15
              have lean_s38 : (Eq let26 let46) := by timed congr lean_s33 lean_s37
              have lean_s39 : (Eq let26 True) := by timed Eq.trans lean_s38 lean_r12
              have lean_s40 : (Eq let27 let72) := by timed flipCongrArg lean_s39 [Not]
              have lean_s41 : (Eq let27 False) := by timed Eq.trans lean_s40 lean_r27
              have lean_s42 : (Eq let28 False) := by timed Eq.trans lean_r4 lean_s41
              show False from by timed eqResolve lean_s28 lean_s42
            ))
          have lean_s3 : let110 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let110 let82) := by timed flipCongrArg lean_r9 [Not]
          have lean_s5 : (Eq let110 let32) := by timed Eq.trans lean_s4 lean_r36
          have lean_s6 : let32 := by timed eqResolve lean_s3 lean_s5
          have lean_s7 : (Eq let32 let110) := by timed Eq.symm lean_s5
          have lean_s8 : let110 := by timed eqResolve lean_s6 lean_s7
          show False from by timed contradiction lean_s1 lean_s8
  ))))))))
have lean_s1 : (Not (And let40 (And let73 (And let56 let33)))) := by liftOrNToNeg lean_s0
have lean_s2 : let109 := by timed flipNotAnd lean_s1 [let40, let73, let56, let33]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let102 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let42 let102) := by timed congr lean_s5 lean_r14
have lean_s7 : (Eq let42 True) := by timed Eq.trans lean_s6 lean_r45
have lean_s8 : (Eq let43 True) := by timed Eq.trans lean_r11 lean_s7
have lean_s9 : let43 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let65 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let75 let65) := by timed congr lean_s12 lean_r44
have lean_s14 : (Eq let75 True) := by timed Eq.trans lean_s13 lean_r23
have lean_s15 : (Eq let76 True) := by timed Eq.trans lean_r28 lean_s14
have lean_s16 : let76 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let97 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let98 let97) := by timed congr lean_s19 lean_r19
have lean_s21 : (Eq let98 True) := by timed Eq.trans lean_s20 lean_r40
have lean_s22 : (Eq let58 True) := by timed Eq.trans lean_r41 lean_s21
have lean_s23 : let58 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : let81 := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq let84 let81) := by timed congr lean_s26 lean_r36
have lean_s28 : (Eq let84 True) := by timed Eq.trans lean_s27 lean_r34
have lean_s29 : (Eq let83 True) := by timed Eq.trans lean_r38 lean_s28
have lean_s30 : let83 := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s24 lean_s30
let lean_s32 := by timed congr lean_s17 lean_s31
have lean_s33 : (Eq let109 let108) := by timed congr lean_s10 lean_s32
have lean_s34 : let108 := by timed eqResolve lean_s2 lean_s33
have lean_s35 : (Or let32 (Or let39 (Or let64 let55))) := by permutateOr lean_s34, [3, 0, 1, 2], (- 1)
have lean_s36 : (Eq And And) := by timed rfl
let lean_s37 := by timed flipCongrArg lean_r35 [HMul.hMul]
have lean_s38 : (Eq let48 let48) := by timed rfl
have lean_s39 : (Eq let50 let50) := by timed congr lean_s37 lean_s38
have lean_s40 : let51 := by timed Eq.trans lean_s39 lean_r16
have lean_s41 : (Eq let61 let17) := by timed Eq.trans lean_r37 lean_s40
have lean_s42 : (Eq skoX skoX) := by timed rfl
let lean_s43 := by timed flipCongrArg lean_s42 [HMul.hMul]
have lean_s44 : (Eq let35 let35) := by timed congr lean_s43 lean_r13
have lean_s45 : let36 := by timed Eq.trans lean_s44 lean_r10
have lean_s46 : (Eq skoY skoY) := by timed rfl
let lean_s47 := by timed flipCongrArg lean_s46 [HMul.hMul]
have lean_s48 : (Eq let59 let59) := by timed congr lean_s47 lean_r13
have lean_s49 : let60 := by timed Eq.trans lean_s48 lean_r20
let lean_s50 := by timed congrHAdd lean_s45 lean_s49
have lean_s51 : (Eq let62 let101) := by timed congrHAdd lean_s41 lean_s50
have lean_s52 : (Eq let62 let53) := by timed Eq.trans lean_s51 lean_r43
have lean_s53 : (Eq let63 let53) := by timed Eq.trans lean_r21 lean_s52
let lean_s54 := by timed flipCongrArg lean_s53 [LE.le]
have lean_s55 : (Eq skoZ skoZ) := by timed rfl
have lean_s56 : (Eq let94 let54) := by timed congr lean_s54 lean_s55
have lean_s57 : (Eq let94 let32) := by timed Eq.trans lean_s56 lean_r18
have lean_s58 : (Eq let95 let33) := by timed flipCongrArg lean_s57 [Not]
let lean_s59 := by timed congr lean_s36 lean_s58
let lean_s60 := by timed flipCongrArg lean_s55 [LE.le]
have lean_s61 : (Eq let92 let11) := by timed congr lean_s60 lean_r24
have lean_s62 : (Eq let92 let39) := by timed Eq.trans lean_s61 lean_r31
have lean_s63 : (Eq let93 let40) := by timed flipCongrArg lean_s62 [Not]
let lean_s64 := by timed congr lean_s36 lean_s63
let lean_s65 := by timed flipCongrArg lean_s46 [LE.le]
have lean_s66 : (Eq let90 let4) := by timed congr lean_s65 lean_r24
have lean_s67 : (Eq let90 let64) := by timed Eq.trans lean_s66 lean_r22
have lean_s68 : (Eq let91 let73) := by timed flipCongrArg lean_s67 [Not]
let lean_s69 := by timed congr lean_s36 lean_s68
let lean_s70 := by timed flipCongrArg lean_s42 [LE.le]
have lean_s71 : (Eq let88 let67) := by timed congr lean_s70 lean_r24
have lean_s72 : (Eq let88 let55) := by timed Eq.trans lean_s71 lean_r25
have lean_s73 : (Eq let89 let56) := by timed flipCongrArg lean_s72 [Not]
let lean_s74 := by timed congr lean_s36 lean_s73
have lean_s75 : (Eq let87 let105) := by timed flipCongrArg lean_r26 [Not]
let lean_s76 := by timed congr lean_s36 lean_s75
have lean_s77 : (Eq let86 let104) := by timed flipCongrArg lean_r29 [Not]
let lean_s78 := by timed congr lean_s36 lean_s77
have lean_s79 : (Eq let85 let103) := by timed flipCongrArg lean_r33 [Not]
let lean_s80 := by timed congr lean_s78 lean_s79
let lean_s81 := by timed congr lean_s76 lean_s80
let lean_s82 := by timed congr lean_s74 lean_s81
let lean_s83 := by timed congr lean_s69 lean_s82
let lean_s84 := by timed congr lean_s64 lean_s83
have lean_s85 : let107 := by timed congr lean_s59 lean_s84
have lean_s86 : let107 := by timed Eq.trans lean_r39 lean_s85
have lean_s87 : let106 := by timed eqResolve lean_a46 lean_s86
have lean_s88 : let56 := by andElim lean_s87, 3
let lean_s89 := by R1 lean_s35, lean_s88, let55, [(- 1), 0]
have lean_s90 : let73 := by andElim lean_s87, 2
let lean_s91 := by R1 lean_s89, lean_s90, let64, [(- 1), 0]
have lean_s92 : let40 := by andElim lean_s87, 1
let lean_s93 := by R1 lean_s91, lean_s92, let39, [(- 1), 0]
have lean_s94 : let33 := by andElim lean_s87, 0
exact (show False from by R1 lean_s93, lean_s94, let32, [0, 0])


