open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Int.ofNat 20)
  let let6 := (Int.ofNat 1)
  let let7 := (binrel% HDiv.hDiv let6 let5)
  let let8 := (binrel% LE.le skoZ let7)
  let let9 := (Not let8)
  let let10 := (binrel% GT.gt skoZ let7)
  let let11 := (binrel% HMul.hMul let3 let7)
  let let12 := (Rat.ofInt 0)
  let let13 := (binrel% HMul.hMul let2 let12)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let11 let11)))
  let let15 := (binrel% HMul.hMul let3 skoZ)
  let let16 := (binrel% HMul.hMul let3 skoY)
  let let17 := (binrel% HMul.hMul let3 skoX)
  let let18 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let19 := (binrel% HMul.hMul let2 let18)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 let15)))
  let let21 := (binrel% GE.ge let20 let14)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let20 let14)
  let let24 := (Neg.neg let6)
  let let25 := (binrel% HMul.hMul let24 skoX)
  let let26 := (binrel% HMul.hMul let24 skoY)
  let let27 := (binrel% LE.le skoX let7)
  let let28 := (Not let27)
  let let29 := (binrel% GT.gt skoX let7)
  let let30 := (binrel% HMul.hMul let24 skoZ)
  let let31 := (Rat.ofInt 15)
  let let32 := (binrel% LE.le let31 skoX)
  let let33 := (Not let32)
  let let34 := (binrel% LE.le let31 skoY)
  let let35 := (Not let34)
  let let36 := (binrel% LE.le let31 skoZ)
  let let37 := (Not let36)
  let let38 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let39 := (binrel% LE.le skoX let38)
  let let40 := (Not let39)
  let let41 := (binrel% LE.le skoY let38)
  let let42 := (Not let41)
  let let43 := (binrel% LE.le skoZ let38)
  let let44 := (Not let43)
  let let45 := (binrel% HMul.hMul skoY let3)
  let let46 := (binrel% HMul.hMul skoX let3)
  let let47 := (binrel% HAdd.hAdd let46 let45)
  let let48 := (binrel% LE.le let47 skoZ)
  let let49 := (Not let48)
  let let50 := (And let49 (And let44 (And let42 (And let40 (And let37 (And let35 let33))))))
  let let51 := (binrel% GE.ge let18 let1)
  let let52 := (binrel% HAdd.hAdd let26 let25)
  let let53 := (binrel% LE.le let52 skoZ)
  let let54 := (Neg.neg let7)
  let let55 := (binrel% GE.ge let26 let54)
  let let56 := (binrel% LE.le skoY let7)
  let let57 := (binrel% GE.ge let25 let54)
  let let58 := (Not let57)
  let let59 := (Not let58)
  let let60 := (Eq let59 let57)
  let let61 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) let5))
  let let62 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let54 let54)))
  let let63 := (Eq let46 let25)
  let let64 := (binrel% GT.gt let2 let1)
  let let65 := (binrel% HAdd.hAdd let25 let26)
  let let66 := (Eq let57 let59)
  let let67 := (Eq let45 let26)
  let let68 := (Int.ofNat 15)
  let let69 := (binrel% GE.ge skoY let68)
  let let70 := (Eq let51 let51)
  let let71 := (Not let55)
  let let72 := (Not let71)
  let let73 := (Eq let55 let72)
  let let74 := (Eq let72 let55)
  let let75 := (binrel% GE.ge let30 let54)
  let let76 := (binrel% GE.ge skoZ let68)
  let let77 := (Not let51)
  let let78 := (Not let77)
  let let79 := (Eq let78 let51)
  let let80 := (binrel% GE.ge skoX let68)
  let let81 := (binrel% GE.ge let18 let12)
  let let82 := (Not let81)
  let let83 := (binrel% LT.lt let18 let12)
  let let84 := (Eq let51 let78)
  let let85 := (Eq let57 let57)
  let let86 := (Not let56)
  let let87 := (binrel% GT.gt skoY let7)
  let let88 := (Eq let55 let55)
  let let89 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let26 let30)))
  let let90 := (Eq let75 let75)
  let let91 := (Not let75)
  let let92 := (Not let91)
  let let93 := (Eq let92 let75)
  let let94 := (Eq let75 let92)
  let let95 := (Not True)
  let let96 := (binrel% GE.ge let12 let61)
  let let97 := (Not let80)
  let let98 := (Not let69)
  let let99 := (Not let76)
  let let100 := (And let77 (And let91 (And let71 (And let58 (And let99 (And let98 let97))))))
  let let101 := (Eq let50 let100)
  let let102 := (Or let75 (Or let55 (Or let57 let51)))
  let let103 := (Or let92 (Or let72 (Or let59 let78)))
  let let104 := (Not let83)
  let let105 := (binrel% LT.lt let15 let11)
  let let106 := (And let4 let10)
  let let107 := (binrel% LT.lt let16 let11)
  let let108 := (And let4 let87)
  let let109 := (binrel% LT.lt let17 let11)
  let let110 := (And let4 let29)
  let let111 := (binrel% LT.lt let19 let13)
  let let112 := (And let64 let83)
(Eq let4 True) → (Eq let10 let9) → (Eq let23 let22) → (Eq let19 let18) → (Eq let17 let25) → (Eq let16 let26) → (Eq let29 let28) → (Eq let15 let30) → (Eq let13 let12) → (Eq let50 let50) → (Eq let53 let51) → (Eq let56 let55) → (Eq let38 let7) → let60 → (Eq let62 let61) → (Eq let27 let57) → let63 → (Eq let64 True) → (Eq let65 let52) → (Eq let60 let66) → let67 → (Eq let34 let69) → (Eq let70 True) → (Eq let74 let73) → (Eq let8 let75) → (Eq let36 let76) → let79 → (Eq let32 let80) → (Eq let11 let54) → (Eq let83 let82) → (Eq let3 let3) → (Eq let79 let84) → (Eq let85 True) → (Eq let87 let86) → (Eq let88 True) → (Eq let89 let12) → let74 → (Eq let90 True) → let93 → (Eq let93 let94) → (Eq let81 let51) → (Eq let95 False) → (Eq let96 True) → let50 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Int.ofNat 20)
  let let6 := (Int.ofNat 1)
  let let7 := (binrel% HDiv.hDiv let6 let5)
  let let8 := (binrel% LE.le skoZ let7)
  let let9 := (Not let8)
  let let10 := (binrel% GT.gt skoZ let7)
  let let11 := (binrel% HMul.hMul let3 let7)
  let let12 := (Rat.ofInt 0)
  let let13 := (binrel% HMul.hMul let2 let12)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let11 let11)))
  let let15 := (binrel% HMul.hMul let3 skoZ)
  let let16 := (binrel% HMul.hMul let3 skoY)
  let let17 := (binrel% HMul.hMul let3 skoX)
  let let18 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let19 := (binrel% HMul.hMul let2 let18)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 let15)))
  let let21 := (binrel% GE.ge let20 let14)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let20 let14)
  let let24 := (Neg.neg let6)
  let let25 := (binrel% HMul.hMul let24 skoX)
  let let26 := (binrel% HMul.hMul let24 skoY)
  let let27 := (binrel% LE.le skoX let7)
  let let28 := (Not let27)
  let let29 := (binrel% GT.gt skoX let7)
  let let30 := (binrel% HMul.hMul let24 skoZ)
  let let31 := (Rat.ofInt 15)
  let let32 := (binrel% LE.le let31 skoX)
  let let33 := (Not let32)
  let let34 := (binrel% LE.le let31 skoY)
  let let35 := (Not let34)
  let let36 := (binrel% LE.le let31 skoZ)
  let let37 := (Not let36)
  let let38 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let39 := (binrel% LE.le skoX let38)
  let let40 := (Not let39)
  let let41 := (binrel% LE.le skoY let38)
  let let42 := (Not let41)
  let let43 := (binrel% LE.le skoZ let38)
  let let44 := (Not let43)
  let let45 := (binrel% HMul.hMul skoY let3)
  let let46 := (binrel% HMul.hMul skoX let3)
  let let47 := (binrel% HAdd.hAdd let46 let45)
  let let48 := (binrel% LE.le let47 skoZ)
  let let49 := (Not let48)
  let let50 := (And let49 (And let44 (And let42 (And let40 (And let37 (And let35 let33))))))
  let let51 := (binrel% GE.ge let18 let1)
  let let52 := (binrel% HAdd.hAdd let26 let25)
  let let53 := (binrel% LE.le let52 skoZ)
  let let54 := (Neg.neg let7)
  let let55 := (binrel% GE.ge let26 let54)
  let let56 := (binrel% LE.le skoY let7)
  let let57 := (binrel% GE.ge let25 let54)
  let let58 := (Not let57)
  let let59 := (Not let58)
  let let60 := (Eq let59 let57)
  let let61 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) let5))
  let let62 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let54 (binrel% HAdd.hAdd let54 let54)))
  let let63 := (Eq let46 let25)
  let let64 := (binrel% GT.gt let2 let1)
  let let65 := (binrel% HAdd.hAdd let25 let26)
  let let66 := (Eq let57 let59)
  let let67 := (Eq let45 let26)
  let let68 := (Int.ofNat 15)
  let let69 := (binrel% GE.ge skoY let68)
  let let70 := (Eq let51 let51)
  let let71 := (Not let55)
  let let72 := (Not let71)
  let let73 := (Eq let55 let72)
  let let74 := (Eq let72 let55)
  let let75 := (binrel% GE.ge let30 let54)
  let let76 := (binrel% GE.ge skoZ let68)
  let let77 := (Not let51)
  let let78 := (Not let77)
  let let79 := (Eq let78 let51)
  let let80 := (binrel% GE.ge skoX let68)
  let let81 := (binrel% GE.ge let18 let12)
  let let82 := (Not let81)
  let let83 := (binrel% LT.lt let18 let12)
  let let84 := (Eq let51 let78)
  let let85 := (Eq let57 let57)
  let let86 := (Not let56)
  let let87 := (binrel% GT.gt skoY let7)
  let let88 := (Eq let55 let55)
  let let89 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let26 let30)))
  let let90 := (Eq let75 let75)
  let let91 := (Not let75)
  let let92 := (Not let91)
  let let93 := (Eq let92 let75)
  let let94 := (Eq let75 let92)
  let let95 := (Not True)
  let let96 := (binrel% GE.ge let12 let61)
  let let97 := (Not let80)
  let let98 := (Not let69)
  let let99 := (Not let76)
  let let100 := (And let77 (And let91 (And let71 (And let58 (And let99 (And let98 let97))))))
  let let101 := (Eq let50 let100)
  let let102 := (Or let75 (Or let55 (Or let57 let51)))
  let let103 := (Or let92 (Or let72 (Or let59 let78)))
  let let104 := (Not let83)
  let let105 := (binrel% LT.lt let15 let11)
  let let106 := (And let4 let10)
  let let107 := (binrel% LT.lt let16 let11)
  let let108 := (And let4 let87)
  let let109 := (binrel% LT.lt let17 let11)
  let let110 := (And let4 let29)
  let let111 := (binrel% LT.lt let19 let13)
  let let112 := (And let64 let83)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let17 let25) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let16 let26) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let15 let30) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let50 let50) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let53 let51) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let56 let55) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let38 let7) => -- THEORY_REWRITE_ARITH
fun lean_r13 : let60 => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let62 let61) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let27 let57) => -- THEORY_REWRITE_ARITH
fun lean_r16 : let63 => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let64 True) => -- EVALUATE
fun lean_r18 : (Eq let65 let52) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let60 let66) => -- THEORY_REWRITE_BOOL
fun lean_r20 : let67 => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let34 let69) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let70 True) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let74 let73) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let8 let75) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let36 let76) => -- THEORY_REWRITE_ARITH
fun lean_r26 : let79 => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let32 let80) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let11 let54) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let83 let82) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let3 let3) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let79 let84) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let85 True) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let87 let86) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let88 True) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let89 let12) => -- THEORY_REWRITE_ARITH
fun lean_r36 : let74 => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let90 True) => -- THEORY_REWRITE_BOOL
fun lean_r38 : let93 => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let93 let94) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let81 let51) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let95 False) => -- THEORY_REWRITE_BOOL
fun lean_r42 : (Eq let96 True) => -- THEORY_REWRITE_ARITH
fun lean_a43 : let50 => by
have lean_s0 : (Or let92 (Or let72 (Or let59 (Or let78 False)))) :=
  (scope (fun lean_a44 : let91 =>
    (scope (fun lean_a45 : let71 =>
      (scope (fun lean_a46 : let58 =>
        (scope (fun lean_a47 : let77 =>
          have lean_s0 : (Eq let82 let77) := by timed flipCongrArg lean_r40 [Not]
          have lean_s1 : (Eq let83 let77) := by timed Eq.trans lean_r29 lean_s0
          have lean_s2 : (Eq let77 let83) := by timed Eq.symm lean_s1
          have lean_s3 : let83 := by timed eqResolve lean_a47 lean_s2
          have lean_s4 : (Or let104 False) :=
            (scope (fun lean_a48 : let83 =>
              have lean_s4 : let64 := by timed trueElim lean_r17
              have lean_s5 : let112 := by timed And.intro lean_s4 lean_a48
              have lean_s6 : (Implies let112 let111) := by arithMulPos [let18, let12, let2], 0
              have lean_s7 : let111 := by timed modusPonens lean_s5 lean_s6
              have lean_s8 : let4 := by timed trueElim lean_r0
              have lean_s9 : (Eq let28 let58) := by timed flipCongrArg lean_r15 [Not]
              have lean_s10 : (Eq let29 let58) := by timed Eq.trans lean_r6 lean_s9
              have lean_s11 : (Eq let58 let29) := by timed Eq.symm lean_s10
              have lean_s12 : let29 := by timed eqResolve lean_a46 lean_s11
              have lean_s13 : let110 := by timed And.intro lean_s8 lean_s12
              have lean_s14 : (Implies let110 let109) := by arithMulNeg [skoX, let7, let3], 2
              have lean_s15 : let109 := by timed modusPonens lean_s13 lean_s14
              have lean_s16 : (Eq let86 let71) := by timed flipCongrArg lean_r11 [Not]
              have lean_s17 : (Eq let87 let71) := by timed Eq.trans lean_r33 lean_s16
              have lean_s18 : (Eq let71 let87) := by timed Eq.symm lean_s17
              have lean_s19 : let87 := by timed eqResolve lean_a45 lean_s18
              have lean_s20 : let108 := by timed And.intro lean_s8 lean_s19
              have lean_s21 : (Implies let108 let107) := by arithMulNeg [skoY, let7, let3], 2
              have lean_s22 : let107 := by timed modusPonens lean_s20 lean_s21
              have lean_s23 : (Eq let9 let91) := by timed flipCongrArg lean_r24 [Not]
              have lean_s24 : (Eq let10 let91) := by timed Eq.trans lean_r1 lean_s23
              have lean_s25 : (Eq let91 let10) := by timed Eq.symm lean_s24
              have lean_s26 : let10 := by timed eqResolve lean_a44 lean_s25
              have lean_s27 : let106 := by timed And.intro lean_s8 lean_s26
              have lean_s28 : (Implies let106 let105) := by arithMulNeg [skoZ, let7, let3], 2
              have lean_s29 : let105 := by timed modusPonens lean_s27 lean_s28
              have lean_s30 : let23 := by sumBounds [lean_s7, lean_s15, lean_s22, lean_s29]
              let lean_s31 := by timed congrHAdd lean_r5 lean_r7
              let lean_s32 := by timed congrHAdd lean_r4 lean_s31
              have lean_s33 : (Eq let20 let89) := by timed congrHAdd lean_r3 lean_s32
              have lean_s34 : (Eq let20 let12) := by timed Eq.trans lean_s33 lean_r35
              let lean_s35 := by timed flipCongrArg lean_s34 [GE.ge]
              let lean_s36 := by timed congrHAdd lean_r28 lean_r28
              let lean_s37 := by timed congrHAdd lean_r28 lean_s36
              have lean_s38 : (Eq let14 let62) := by timed congrHAdd lean_r8 lean_s37
              have lean_s39 : (Eq let14 let61) := by timed Eq.trans lean_s38 lean_r14
              have lean_s40 : (Eq let21 let96) := by timed congr lean_s35 lean_s39
              have lean_s41 : (Eq let21 True) := by timed Eq.trans lean_s40 lean_r42
              have lean_s42 : (Eq let22 let95) := by timed flipCongrArg lean_s41 [Not]
              have lean_s43 : (Eq let22 False) := by timed Eq.trans lean_s42 lean_r41
              have lean_s44 : (Eq let23 False) := by timed Eq.trans lean_r2 lean_s43
              show False from by timed eqResolve lean_s30 lean_s44
            ))
          have lean_s5 : let104 := by liftOrNToNeg lean_s4
          have lean_s6 : (Eq let104 let78) := by timed flipCongrArg lean_s1 [Not]
          have lean_s7 : (Eq let104 let51) := by timed Eq.trans lean_s6 lean_r26
          have lean_s8 : (Eq let51 let81) := by timed Eq.symm lean_r40
          have lean_s9 : (Eq let104 let81) := by timed Eq.trans lean_s7 lean_s8
          have lean_s10 : let81 := by timed eqResolve lean_s5 lean_s9
          have lean_s11 : (Eq let51 let104) := by timed Eq.symm lean_s7
          have lean_s12 : (Eq let81 let104) := by timed Eq.trans lean_r40 lean_s11
          have lean_s13 : let104 := by timed eqResolve lean_s10 lean_s12
          show False from by timed contradiction lean_s3 lean_s13
  ))))))))
have lean_s1 : (Not (And let91 (And let71 (And let58 let77)))) := by liftOrNToNeg lean_s0
have lean_s2 : let103 := by timed flipNotAnd lean_s1 [let91, let71, let58, let77]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let90 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let94 let90) := by timed congr lean_s5 lean_r38
have lean_s7 : (Eq let94 True) := by timed Eq.trans lean_s6 lean_r37
have lean_s8 : (Eq let93 True) := by timed Eq.trans lean_r39 lean_s7
have lean_s9 : let93 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let88 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let73 let88) := by timed congr lean_s12 lean_r36
have lean_s14 : (Eq let73 True) := by timed Eq.trans lean_s13 lean_r34
have lean_s15 : (Eq let74 True) := by timed Eq.trans lean_r23 lean_s14
have lean_s16 : let74 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let85 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let66 let85) := by timed congr lean_s19 lean_r13
have lean_s21 : (Eq let66 True) := by timed Eq.trans lean_s20 lean_r32
have lean_s22 : (Eq let60 True) := by timed Eq.trans lean_r19 lean_s21
have lean_s23 : let60 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : let70 := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq let84 let70) := by timed congr lean_s26 lean_r26
have lean_s28 : (Eq let84 True) := by timed Eq.trans lean_s27 lean_r22
have lean_s29 : (Eq let79 True) := by timed Eq.trans lean_r31 lean_s28
have lean_s30 : let79 := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s24 lean_s30
let lean_s32 := by timed congr lean_s17 lean_s31
have lean_s33 : (Eq let103 let102) := by timed congr lean_s10 lean_s32
have lean_s34 : let102 := by timed eqResolve lean_s2 lean_s33
have lean_s35 : (Or let51 (Or let75 (Or let55 let57))) := by permutateOr lean_s34, [3, 0, 1, 2], (- 1)
have lean_s36 : (Eq And And) := by timed rfl
have lean_s37 : (Eq skoX skoX) := by timed rfl
let lean_s38 := by timed flipCongrArg lean_s37 [HMul.hMul]
have lean_s39 : (Eq let46 let46) := by timed congr lean_s38 lean_r30
have lean_s40 : let63 := by timed Eq.trans lean_s39 lean_r16
let lean_s41 := by timed flipCongrArg lean_s40 [HAdd.hAdd]
have lean_s42 : (Eq skoY skoY) := by timed rfl
let lean_s43 := by timed flipCongrArg lean_s42 [HMul.hMul]
have lean_s44 : (Eq let45 let45) := by timed congr lean_s43 lean_r30
have lean_s45 : let67 := by timed Eq.trans lean_s44 lean_r20
have lean_s46 : (Eq let47 let65) := by timed congr lean_s41 lean_s45
have lean_s47 : (Eq let47 let52) := by timed Eq.trans lean_s46 lean_r18
let lean_s48 := by timed flipCongrArg lean_s47 [LE.le]
have lean_s49 : (Eq skoZ skoZ) := by timed rfl
have lean_s50 : (Eq let48 let53) := by timed congr lean_s48 lean_s49
have lean_s51 : (Eq let48 let51) := by timed Eq.trans lean_s50 lean_r10
have lean_s52 : (Eq let49 let77) := by timed flipCongrArg lean_s51 [Not]
let lean_s53 := by timed congr lean_s36 lean_s52
let lean_s54 := by timed flipCongrArg lean_s49 [LE.le]
have lean_s55 : (Eq let43 let8) := by timed congr lean_s54 lean_r12
have lean_s56 : (Eq let43 let75) := by timed Eq.trans lean_s55 lean_r24
have lean_s57 : (Eq let44 let91) := by timed flipCongrArg lean_s56 [Not]
let lean_s58 := by timed congr lean_s36 lean_s57
let lean_s59 := by timed flipCongrArg lean_s42 [LE.le]
have lean_s60 : (Eq let41 let56) := by timed congr lean_s59 lean_r12
have lean_s61 : (Eq let41 let55) := by timed Eq.trans lean_s60 lean_r11
have lean_s62 : (Eq let42 let71) := by timed flipCongrArg lean_s61 [Not]
let lean_s63 := by timed congr lean_s36 lean_s62
let lean_s64 := by timed flipCongrArg lean_s37 [LE.le]
have lean_s65 : (Eq let39 let27) := by timed congr lean_s64 lean_r12
have lean_s66 : (Eq let39 let57) := by timed Eq.trans lean_s65 lean_r15
have lean_s67 : (Eq let40 let58) := by timed flipCongrArg lean_s66 [Not]
let lean_s68 := by timed congr lean_s36 lean_s67
have lean_s69 : (Eq let37 let99) := by timed flipCongrArg lean_r25 [Not]
let lean_s70 := by timed congr lean_s36 lean_s69
have lean_s71 : (Eq let35 let98) := by timed flipCongrArg lean_r21 [Not]
let lean_s72 := by timed congr lean_s36 lean_s71
have lean_s73 : (Eq let33 let97) := by timed flipCongrArg lean_r27 [Not]
let lean_s74 := by timed congr lean_s72 lean_s73
let lean_s75 := by timed congr lean_s70 lean_s74
let lean_s76 := by timed congr lean_s68 lean_s75
let lean_s77 := by timed congr lean_s63 lean_s76
let lean_s78 := by timed congr lean_s58 lean_s77
have lean_s79 : let101 := by timed congr lean_s53 lean_s78
have lean_s80 : let101 := by timed Eq.trans lean_r9 lean_s79
have lean_s81 : let100 := by timed eqResolve lean_a43 lean_s80
have lean_s82 : let58 := by andElim lean_s81, 3
let lean_s83 := by R1 lean_s35, lean_s82, let57, [(- 1), 0]
have lean_s84 : let71 := by andElim lean_s81, 2
let lean_s85 := by R1 lean_s83, lean_s84, let55, [(- 1), 0]
have lean_s86 : let91 := by andElim lean_s81, 1
let lean_s87 := by R1 lean_s85, lean_s86, let75, [(- 1), 0]
have lean_s88 : let77 := by andElim lean_s81, 0
exact (show False from by R1 lean_s87, lean_s88, let51, [0, 0])


