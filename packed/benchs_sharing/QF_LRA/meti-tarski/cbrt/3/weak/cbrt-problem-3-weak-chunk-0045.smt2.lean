open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 20)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoX let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoX let3)
  let let7 := (binrel% LE.le skoY let3)
  let let8 := (Not let7)
  let let9 := (binrel% GT.gt skoY let3)
  let let10 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let11 := (Rat.ofInt 1)
  let let12 := (binrel% HMul.hMul let11 let10)
  let let13 := (Neg.neg let2)
  let let14 := (binrel% HMul.hMul let13 skoX)
  let let15 := (Neg.neg let11)
  let let16 := (binrel% HMul.hMul let15 skoX)
  let let17 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 131) let1))
  let let18 := (Neg.neg let3)
  let let19 := (Int.ofNat 5)
  let let20 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 32) let19))
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let18 let18)))
  let let22 := (binrel% HMul.hMul let13 skoZ)
  let let23 := (binrel% GE.ge let22 let18)
  let let24 := (Not let23)
  let let25 := (Not let24)
  let let26 := (Eq let25 let23)
  let let27 := (binrel% HMul.hMul skoY let15)
  let let28 := (binrel% HMul.hMul skoX let15)
  let let29 := (binrel% HAdd.hAdd let28 let27)
  let let30 := (binrel% HAdd.hAdd let11 let29)
  let let31 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let11 let28) let27)
  let let32 := (binrel% HMul.hMul let15 skoZ)
  let let33 := (Eq let28 let14)
  let let34 := (binrel% HMul.hMul let13 skoY)
  let let35 := (binrel% GE.ge let34 let18)
  let let36 := (Eq let35 let35)
  let let37 := (binrel% GE.ge let10 let20)
  let let38 := (Not let37)
  let let39 := (binrel% LT.lt let10 let20)
  let let40 := (binrel% HAdd.hAdd let34 let14)
  let let41 := (binrel% HAdd.hAdd let2 let40)
  let let42 := (binrel% HAdd.hAdd let14 let34)
  let let43 := (binrel% HAdd.hAdd let11 let42)
  let let44 := (binrel% HMul.hMul let15 let3)
  let let45 := (Neg.neg (Rat.ofInt 32))
  let let46 := (binrel% HDiv.hDiv let45 (Rat.ofInt 5))
  let let47 := (binrel% HAdd.hAdd let46 let29)
  let let48 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let46 let28) let27)
  let let49 := (Eq let37 let37)
  let let50 := (binrel% HMul.hMul let15 skoY)
  let let51 := (binrel% HDiv.hDiv let11 (Rat.ofInt 20))
  let let52 := (binrel% GE.ge let14 let18)
  let let53 := (Rat.ofInt 0)
  let let54 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let34 let22)))
  let let55 := (Eq let27 let34)
  let let56 := (Not let52)
  let let57 := (Not let56)
  let let58 := (Eq let52 let57)
  let let59 := (Eq let57 let52)
  let let60 := (Eq let52 let52)
  let let61 := (binrel% GE.ge let53 let17)
  let let62 := (Eq let23 let25)
  let let63 := (binrel% LE.le skoZ let3)
  let let64 := (Int.ofNat 15)
  let let65 := (binrel% GE.ge skoX let64)
  let let66 := (Rat.ofInt 15)
  let let67 := (binrel% LE.le let66 skoX)
  let let68 := (binrel% HDiv.hDiv let2 let19)
  let let69 := (binrel% HMul.hMul let45 let68)
  let let70 := (Int.ofNat 0)
  let let71 := (binrel% LT.lt let15 let70)
  let let72 := (Not let38)
  let let73 := (Eq let37 let72)
  let let74 := (Eq let72 let37)
  let let75 := (binrel% GT.gt let11 let70)
  let let76 := (binrel% HMul.hMul let11 let20)
  let let77 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let44 let44)))
  let let78 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let50 let32)))
  let let79 := (binrel% GE.ge let78 let77)
  let let80 := (Not let79)
  let let81 := (binrel% LT.lt let78 let77)
  let let82 := (Eq let23 let23)
  let let83 := (binrel% HAdd.hAdd let20 let40)
  let let84 := (binrel% LE.le let83 skoZ)
  let let85 := (binrel% HAdd.hAdd let20 let42)
  let let86 := (binrel% GE.ge let10 let2)
  let let87 := (binrel% LE.le let41 skoZ)
  let let88 := (Eq let69 let20)
  let let89 := (Not let63)
  let let90 := (binrel% GT.gt skoZ let3)
  let let91 := (binrel% GE.ge skoY let64)
  let let92 := (binrel% LE.le let66 skoY)
  let let93 := (Not let67)
  let let94 := (Not let92)
  let let95 := (binrel% LE.le let66 skoZ)
  let let96 := (Not let95)
  let let97 := (binrel% LE.le skoX let51)
  let let98 := (Not let97)
  let let99 := (binrel% LE.le skoY let51)
  let let100 := (Not let99)
  let let101 := (binrel% LE.le skoZ let51)
  let let102 := (Not let101)
  let let103 := (binrel% LE.le let31 skoZ)
  let let104 := (Not let103)
  let let105 := (binrel% LE.le let48 skoZ)
  let let106 := (Not let105)
  let let107 := (And let106 (And let104 (And let102 (And let100 (And let98 (And let96 (And let94 let93)))))))
  let let108 := (binrel% GE.ge skoZ let64)
  let let109 := (Not let35)
  let let110 := (Not let109)
  let let111 := (Eq let110 let35)
  let let112 := (Not True)
  let let113 := (Eq let35 let110)
  let let114 := (Not let65)
  let let115 := (Not let91)
  let let116 := (Not let108)
  let let117 := (Not let86)
  let let118 := (And let38 (And let117 (And let24 (And let109 (And let56 (And let116 (And let115 let114)))))))
  let let119 := (Eq let107 let118)
  let let120 := (Or let23 (Or let35 (Or let52 let37)))
  let let121 := (Or let25 (Or let110 (Or let57 let72)))
  let let122 := (Not let39)
  let let123 := (binrel% LT.lt let32 let44)
  let let124 := (And let71 let90)
  let let125 := (binrel% LT.lt let50 let44)
  let let126 := (And let71 let9)
  let let127 := (binrel% LT.lt let16 let44)
  let let128 := (And let71 let6)
  let let129 := (binrel% LT.lt let12 let76)
  let let130 := (And let75 let39)
(Eq let6 let5) → (Eq let9 let8) → (Eq let12 let10) → (Eq let16 let14) → (Eq let21 let17) → let26 → (Eq let31 let30) → (Eq let32 let22) → let33 → (Eq let36 True) → (Eq let15 let15) → (Eq let39 let38) → (Eq let43 let41) → (Eq let44 let18) → (Eq let48 let47) → (Eq let49 True) → (Eq let7 let35) → (Eq let50 let34) → (Eq let51 let3) → (Eq let4 let52) → (Eq let54 let53) → let55 → (Eq let59 let58) → (Eq let60 True) → (Eq let61 True) → (Eq let26 let62) → (Eq let63 let23) → (Eq let67 let65) → (Eq let46 let69) → (Eq let71 True) → (Eq let74 let73) → (Eq let75 True) → (Eq let81 let80) → (Eq let82 True) → (Eq let84 let37) → (Eq let85 let83) → (Eq let87 let86) → let88 → (Eq let45 let45) → (Eq let90 let89) → let74 → (Eq let76 let20) → (Eq let92 let91) → (Eq let107 let107) → (Eq let95 let108) → let59 → let111 → (Eq let112 False) → (Eq let111 let113) → let107 → False :=
  let let1 := (Int.ofNat 20)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoX let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoX let3)
  let let7 := (binrel% LE.le skoY let3)
  let let8 := (Not let7)
  let let9 := (binrel% GT.gt skoY let3)
  let let10 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let11 := (Rat.ofInt 1)
  let let12 := (binrel% HMul.hMul let11 let10)
  let let13 := (Neg.neg let2)
  let let14 := (binrel% HMul.hMul let13 skoX)
  let let15 := (Neg.neg let11)
  let let16 := (binrel% HMul.hMul let15 skoX)
  let let17 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 131) let1))
  let let18 := (Neg.neg let3)
  let let19 := (Int.ofNat 5)
  let let20 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 32) let19))
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let18 let18)))
  let let22 := (binrel% HMul.hMul let13 skoZ)
  let let23 := (binrel% GE.ge let22 let18)
  let let24 := (Not let23)
  let let25 := (Not let24)
  let let26 := (Eq let25 let23)
  let let27 := (binrel% HMul.hMul skoY let15)
  let let28 := (binrel% HMul.hMul skoX let15)
  let let29 := (binrel% HAdd.hAdd let28 let27)
  let let30 := (binrel% HAdd.hAdd let11 let29)
  let let31 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let11 let28) let27)
  let let32 := (binrel% HMul.hMul let15 skoZ)
  let let33 := (Eq let28 let14)
  let let34 := (binrel% HMul.hMul let13 skoY)
  let let35 := (binrel% GE.ge let34 let18)
  let let36 := (Eq let35 let35)
  let let37 := (binrel% GE.ge let10 let20)
  let let38 := (Not let37)
  let let39 := (binrel% LT.lt let10 let20)
  let let40 := (binrel% HAdd.hAdd let34 let14)
  let let41 := (binrel% HAdd.hAdd let2 let40)
  let let42 := (binrel% HAdd.hAdd let14 let34)
  let let43 := (binrel% HAdd.hAdd let11 let42)
  let let44 := (binrel% HMul.hMul let15 let3)
  let let45 := (Neg.neg (Rat.ofInt 32))
  let let46 := (binrel% HDiv.hDiv let45 (Rat.ofInt 5))
  let let47 := (binrel% HAdd.hAdd let46 let29)
  let let48 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let46 let28) let27)
  let let49 := (Eq let37 let37)
  let let50 := (binrel% HMul.hMul let15 skoY)
  let let51 := (binrel% HDiv.hDiv let11 (Rat.ofInt 20))
  let let52 := (binrel% GE.ge let14 let18)
  let let53 := (Rat.ofInt 0)
  let let54 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let34 let22)))
  let let55 := (Eq let27 let34)
  let let56 := (Not let52)
  let let57 := (Not let56)
  let let58 := (Eq let52 let57)
  let let59 := (Eq let57 let52)
  let let60 := (Eq let52 let52)
  let let61 := (binrel% GE.ge let53 let17)
  let let62 := (Eq let23 let25)
  let let63 := (binrel% LE.le skoZ let3)
  let let64 := (Int.ofNat 15)
  let let65 := (binrel% GE.ge skoX let64)
  let let66 := (Rat.ofInt 15)
  let let67 := (binrel% LE.le let66 skoX)
  let let68 := (binrel% HDiv.hDiv let2 let19)
  let let69 := (binrel% HMul.hMul let45 let68)
  let let70 := (Int.ofNat 0)
  let let71 := (binrel% LT.lt let15 let70)
  let let72 := (Not let38)
  let let73 := (Eq let37 let72)
  let let74 := (Eq let72 let37)
  let let75 := (binrel% GT.gt let11 let70)
  let let76 := (binrel% HMul.hMul let11 let20)
  let let77 := (binrel% HAdd.hAdd let76 (binrel% HAdd.hAdd let44 (binrel% HAdd.hAdd let44 let44)))
  let let78 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let50 let32)))
  let let79 := (binrel% GE.ge let78 let77)
  let let80 := (Not let79)
  let let81 := (binrel% LT.lt let78 let77)
  let let82 := (Eq let23 let23)
  let let83 := (binrel% HAdd.hAdd let20 let40)
  let let84 := (binrel% LE.le let83 skoZ)
  let let85 := (binrel% HAdd.hAdd let20 let42)
  let let86 := (binrel% GE.ge let10 let2)
  let let87 := (binrel% LE.le let41 skoZ)
  let let88 := (Eq let69 let20)
  let let89 := (Not let63)
  let let90 := (binrel% GT.gt skoZ let3)
  let let91 := (binrel% GE.ge skoY let64)
  let let92 := (binrel% LE.le let66 skoY)
  let let93 := (Not let67)
  let let94 := (Not let92)
  let let95 := (binrel% LE.le let66 skoZ)
  let let96 := (Not let95)
  let let97 := (binrel% LE.le skoX let51)
  let let98 := (Not let97)
  let let99 := (binrel% LE.le skoY let51)
  let let100 := (Not let99)
  let let101 := (binrel% LE.le skoZ let51)
  let let102 := (Not let101)
  let let103 := (binrel% LE.le let31 skoZ)
  let let104 := (Not let103)
  let let105 := (binrel% LE.le let48 skoZ)
  let let106 := (Not let105)
  let let107 := (And let106 (And let104 (And let102 (And let100 (And let98 (And let96 (And let94 let93)))))))
  let let108 := (binrel% GE.ge skoZ let64)
  let let109 := (Not let35)
  let let110 := (Not let109)
  let let111 := (Eq let110 let35)
  let let112 := (Not True)
  let let113 := (Eq let35 let110)
  let let114 := (Not let65)
  let let115 := (Not let91)
  let let116 := (Not let108)
  let let117 := (Not let86)
  let let118 := (And let38 (And let117 (And let24 (And let109 (And let56 (And let116 (And let115 let114)))))))
  let let119 := (Eq let107 let118)
  let let120 := (Or let23 (Or let35 (Or let52 let37)))
  let let121 := (Or let25 (Or let110 (Or let57 let72)))
  let let122 := (Not let39)
  let let123 := (binrel% LT.lt let32 let44)
  let let124 := (And let71 let90)
  let let125 := (binrel% LT.lt let50 let44)
  let let126 := (And let71 let9)
  let let127 := (binrel% LT.lt let16 let44)
  let let128 := (And let71 let6)
  let let129 := (binrel% LT.lt let12 let76)
  let let130 := (And let75 let39)
fun lean_r0 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let12 let10) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let16 let14) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let21 let17) => -- THEORY_REWRITE_ARITH
fun lean_r5 : let26 => -- THEORY_REWRITE_BOOL
fun lean_r6 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let32 let22) => -- THEORY_REWRITE_ARITH
fun lean_r8 : let33 => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let36 True) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let15 let15) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let43 let41) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let44 let18) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let48 let47) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let49 True) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let7 let35) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let50 let34) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let51 let3) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let4 let52) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let54 let53) => -- THEORY_REWRITE_ARITH
fun lean_r21 : let55 => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let59 let58) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let60 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let61 True) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let26 let62) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let63 let23) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let67 let65) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let46 let69) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let71 True) => -- EVALUATE
fun lean_r30 : (Eq let74 let73) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let75 True) => -- EVALUATE
fun lean_r32 : (Eq let81 let80) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let82 True) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let84 let37) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let85 let83) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let87 let86) => -- THEORY_REWRITE_ARITH
fun lean_r37 : let88 => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let45 let45) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let90 let89) => -- THEORY_REWRITE_ARITH
fun lean_r40 : let74 => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let76 let20) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let92 let91) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let107 let107) => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let95 let108) => -- THEORY_REWRITE_ARITH
fun lean_r45 : let59 => -- THEORY_REWRITE_BOOL
fun lean_r46 : let111 => -- THEORY_REWRITE_BOOL
fun lean_r47 : (Eq let112 False) => -- THEORY_REWRITE_BOOL
fun lean_r48 : (Eq let111 let113) => -- THEORY_REWRITE_BOOL
fun lean_a49 : let107 => by
have lean_s0 : (Or let25 (Or let110 (Or let57 (Or let72 False)))) :=
  (scope (fun lean_a50 : let24 =>
    (scope (fun lean_a51 : let109 =>
      (scope (fun lean_a52 : let56 =>
        (scope (fun lean_a53 : let38 =>
          have lean_s0 : (Eq let38 let39) := by timed Eq.symm lean_r11
          have lean_s1 : let39 := by timed eqResolve lean_a53 lean_s0
          have lean_s2 : (Or let122 False) :=
            (scope (fun lean_a54 : let39 =>
              have lean_s2 : let75 := by timed trueElim lean_r31
              have lean_s3 : let130 := by timed And.intro lean_s2 lean_a54
              have lean_s4 : (Implies let130 let129) := by arithMulPos [let10, let20, let11], 0
              have lean_s5 : let129 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let71 := by timed trueElim lean_r29
              have lean_s7 : (Eq let5 let56) := by timed flipCongrArg lean_r19 [Not]
              have lean_s8 : (Eq let6 let56) := by timed Eq.trans lean_r0 lean_s7
              have lean_s9 : (Eq let56 let6) := by timed Eq.symm lean_s8
              have lean_s10 : let6 := by timed eqResolve lean_a52 lean_s9
              have lean_s11 : let128 := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies let128 let127) := by arithMulNeg [skoX, let3, let15], 2
              have lean_s13 : let127 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let8 let109) := by timed flipCongrArg lean_r16 [Not]
              have lean_s15 : (Eq let9 let109) := by timed Eq.trans lean_r1 lean_s14
              have lean_s16 : (Eq let109 let9) := by timed Eq.symm lean_s15
              have lean_s17 : let9 := by timed eqResolve lean_a51 lean_s16
              have lean_s18 : let126 := by timed And.intro lean_s6 lean_s17
              have lean_s19 : (Implies let126 let125) := by arithMulNeg [skoY, let3, let15], 2
              have lean_s20 : let125 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : (Eq let89 let24) := by timed flipCongrArg lean_r26 [Not]
              have lean_s22 : (Eq let90 let24) := by timed Eq.trans lean_r39 lean_s21
              have lean_s23 : (Eq let24 let90) := by timed Eq.symm lean_s22
              have lean_s24 : let90 := by timed eqResolve lean_a50 lean_s23
              have lean_s25 : let124 := by timed And.intro lean_s6 lean_s24
              have lean_s26 : (Implies let124 let123) := by arithMulNeg [skoZ, let3, let15], 2
              have lean_s27 : let123 := by timed modusPonens lean_s25 lean_s26
              have lean_s28 : let81 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27]
              let lean_s29 := by timed congrHAdd lean_r17 lean_r7
              let lean_s30 := by timed congrHAdd lean_r3 lean_s29
              have lean_s31 : (Eq let78 let54) := by timed congrHAdd lean_r2 lean_s30
              have lean_s32 : (Eq let78 let53) := by timed Eq.trans lean_s31 lean_r20
              let lean_s33 := by timed flipCongrArg lean_s32 [GE.ge]
              let lean_s34 := by timed congrHAdd lean_r13 lean_r13
              let lean_s35 := by timed congrHAdd lean_r13 lean_s34
              have lean_s36 : (Eq let77 let21) := by timed congrHAdd lean_r41 lean_s35
              have lean_s37 : (Eq let77 let17) := by timed Eq.trans lean_s36 lean_r4
              have lean_s38 : (Eq let79 let61) := by timed congr lean_s33 lean_s37
              have lean_s39 : (Eq let79 True) := by timed Eq.trans lean_s38 lean_r24
              have lean_s40 : (Eq let80 let112) := by timed flipCongrArg lean_s39 [Not]
              have lean_s41 : (Eq let80 False) := by timed Eq.trans lean_s40 lean_r47
              have lean_s42 : (Eq let81 False) := by timed Eq.trans lean_r32 lean_s41
              show False from by timed eqResolve lean_s28 lean_s42
            ))
          have lean_s3 : let122 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let122 let72) := by timed flipCongrArg lean_r11 [Not]
          have lean_s5 : (Eq let122 let37) := by timed Eq.trans lean_s4 lean_r40
          have lean_s6 : let37 := by timed eqResolve lean_s3 lean_s5
          have lean_s7 : (Eq let37 let122) := by timed Eq.symm lean_s5
          have lean_s8 : let122 := by timed eqResolve lean_s6 lean_s7
          show False from by timed contradiction lean_s1 lean_s8
  ))))))))
have lean_s1 : (Not (And let24 (And let109 (And let56 let38)))) := by liftOrNToNeg lean_s0
have lean_s2 : let121 := by timed flipNotAnd lean_s1 [let24, let109, let56, let38]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let82 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let62 let82) := by timed congr lean_s5 lean_r5
have lean_s7 : (Eq let62 True) := by timed Eq.trans lean_s6 lean_r33
have lean_s8 : (Eq let26 True) := by timed Eq.trans lean_r25 lean_s7
have lean_s9 : let26 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let36 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let113 let36) := by timed congr lean_s12 lean_r46
have lean_s14 : (Eq let113 True) := by timed Eq.trans lean_s13 lean_r9
have lean_s15 : (Eq let111 True) := by timed Eq.trans lean_r48 lean_s14
have lean_s16 : let111 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let60 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let58 let60) := by timed congr lean_s19 lean_r45
have lean_s21 : (Eq let58 True) := by timed Eq.trans lean_s20 lean_r23
have lean_s22 : (Eq let59 True) := by timed Eq.trans lean_r22 lean_s21
have lean_s23 : let59 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : let49 := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq let73 let49) := by timed congr lean_s26 lean_r40
have lean_s28 : (Eq let73 True) := by timed Eq.trans lean_s27 lean_r15
have lean_s29 : (Eq let74 True) := by timed Eq.trans lean_r30 lean_s28
have lean_s30 : let74 := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s24 lean_s30
let lean_s32 := by timed congr lean_s17 lean_s31
have lean_s33 : (Eq let121 let120) := by timed congr lean_s10 lean_s32
have lean_s34 : let120 := by timed eqResolve lean_s2 lean_s33
have lean_s35 : (Or let37 (Or let23 (Or let35 let52))) := by permutateOr lean_s34, [3, 0, 1, 2], (- 1)
have lean_s36 : (Eq And And) := by timed rfl
let lean_s37 := by timed flipCongrArg lean_r38 [HMul.hMul]
have lean_s38 : (Eq let68 let68) := by timed rfl
have lean_s39 : (Eq let69 let69) := by timed congr lean_s37 lean_s38
have lean_s40 : let88 := by timed Eq.trans lean_s39 lean_r37
have lean_s41 : (Eq let46 let20) := by timed Eq.trans lean_r28 lean_s40
have lean_s42 : (Eq skoX skoX) := by timed rfl
let lean_s43 := by timed flipCongrArg lean_s42 [HMul.hMul]
have lean_s44 : (Eq let28 let28) := by timed congr lean_s43 lean_r10
have lean_s45 : let33 := by timed Eq.trans lean_s44 lean_r8
have lean_s46 : (Eq skoY skoY) := by timed rfl
let lean_s47 := by timed flipCongrArg lean_s46 [HMul.hMul]
have lean_s48 : (Eq let27 let27) := by timed congr lean_s47 lean_r10
have lean_s49 : let55 := by timed Eq.trans lean_s48 lean_r21
let lean_s50 := by timed congrHAdd lean_s45 lean_s49
have lean_s51 : (Eq let47 let85) := by timed congrHAdd lean_s41 lean_s50
have lean_s52 : (Eq let47 let83) := by timed Eq.trans lean_s51 lean_r35
have lean_s53 : (Eq let48 let83) := by timed Eq.trans lean_r14 lean_s52
let lean_s54 := by timed flipCongrArg lean_s53 [LE.le]
have lean_s55 : (Eq skoZ skoZ) := by timed rfl
have lean_s56 : (Eq let105 let84) := by timed congr lean_s54 lean_s55
have lean_s57 : (Eq let105 let37) := by timed Eq.trans lean_s56 lean_r34
have lean_s58 : (Eq let106 let38) := by timed flipCongrArg lean_s57 [Not]
let lean_s59 := by timed congr lean_s36 lean_s58
have lean_s60 : (Eq let11 let11) := by timed rfl
let lean_s61 := by timed congrHAdd lean_s45 lean_s49
have lean_s62 : (Eq let30 let43) := by timed congrHAdd lean_s60 lean_s61
have lean_s63 : (Eq let30 let41) := by timed Eq.trans lean_s62 lean_r12
have lean_s64 : (Eq let31 let41) := by timed Eq.trans lean_r6 lean_s63
let lean_s65 := by timed flipCongrArg lean_s64 [LE.le]
have lean_s66 : (Eq let103 let87) := by timed congr lean_s65 lean_s55
have lean_s67 : (Eq let103 let86) := by timed Eq.trans lean_s66 lean_r36
have lean_s68 : (Eq let104 let117) := by timed flipCongrArg lean_s67 [Not]
let lean_s69 := by timed congr lean_s36 lean_s68
let lean_s70 := by timed flipCongrArg lean_s55 [LE.le]
have lean_s71 : (Eq let101 let63) := by timed congr lean_s70 lean_r18
have lean_s72 : (Eq let101 let23) := by timed Eq.trans lean_s71 lean_r26
have lean_s73 : (Eq let102 let24) := by timed flipCongrArg lean_s72 [Not]
let lean_s74 := by timed congr lean_s36 lean_s73
let lean_s75 := by timed flipCongrArg lean_s46 [LE.le]
have lean_s76 : (Eq let99 let7) := by timed congr lean_s75 lean_r18
have lean_s77 : (Eq let99 let35) := by timed Eq.trans lean_s76 lean_r16
have lean_s78 : (Eq let100 let109) := by timed flipCongrArg lean_s77 [Not]
let lean_s79 := by timed congr lean_s36 lean_s78
let lean_s80 := by timed flipCongrArg lean_s42 [LE.le]
have lean_s81 : (Eq let97 let4) := by timed congr lean_s80 lean_r18
have lean_s82 : (Eq let97 let52) := by timed Eq.trans lean_s81 lean_r19
have lean_s83 : (Eq let98 let56) := by timed flipCongrArg lean_s82 [Not]
let lean_s84 := by timed congr lean_s36 lean_s83
have lean_s85 : (Eq let96 let116) := by timed flipCongrArg lean_r44 [Not]
let lean_s86 := by timed congr lean_s36 lean_s85
have lean_s87 : (Eq let94 let115) := by timed flipCongrArg lean_r42 [Not]
let lean_s88 := by timed congr lean_s36 lean_s87
have lean_s89 : (Eq let93 let114) := by timed flipCongrArg lean_r27 [Not]
let lean_s90 := by timed congr lean_s88 lean_s89
let lean_s91 := by timed congr lean_s86 lean_s90
let lean_s92 := by timed congr lean_s84 lean_s91
let lean_s93 := by timed congr lean_s79 lean_s92
let lean_s94 := by timed congr lean_s74 lean_s93
let lean_s95 := by timed congr lean_s69 lean_s94
have lean_s96 : let119 := by timed congr lean_s59 lean_s95
have lean_s97 : let119 := by timed Eq.trans lean_r43 lean_s96
have lean_s98 : let118 := by timed eqResolve lean_a49 lean_s97
have lean_s99 : let56 := by andElim lean_s98, 4
let lean_s100 := by R1 lean_s35, lean_s99, let52, [(- 1), 0]
have lean_s101 : let109 := by andElim lean_s98, 3
let lean_s102 := by R1 lean_s100, lean_s101, let35, [(- 1), 0]
have lean_s103 : let24 := by andElim lean_s98, 2
let lean_s104 := by R1 lean_s102, lean_s103, let23, [(- 1), 0]
have lean_s105 : let38 := by andElim lean_s98, 0
exact (show False from by R1 lean_s104, lean_s105, let37, [0, 0])


