open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (binrel% HDiv.hDiv let4 (Int.ofNat 2))
  let let6 := (Neg.neg let5)
  let let7 := (binrel% GE.ge skoZ let6)
  let let8 := (Not let7)
  let let9 := (binrel% LT.lt skoZ let6)
  let let10 := (Neg.neg let2)
  let let11 := (binrel% HMul.hMul skoY let10)
  let let12 := (binrel% HMul.hMul skoX let10)
  let let13 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let12 let11))
  let let14 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let12) let11)
  let let15 := (Neg.neg let4)
  let let16 := (binrel% HMul.hMul let15 skoX)
  let let17 := (Eq let12 let16)
  let let18 := (Int.ofNat 20)
  let let19 := (binrel% HDiv.hDiv let4 let18)
  let let20 := (binrel% HMul.hMul let10 let19)
  let let21 := (binrel% HMul.hMul let2 let6)
  let let22 := (binrel% HAdd.hAdd let21 let20)
  let let23 := (binrel% HMul.hMul let10 skoZ)
  let let24 := (binrel% HMul.hMul let2 skoZ)
  let let25 := (binrel% HAdd.hAdd let24 let23)
  let let26 := (binrel% GE.ge let25 let22)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let22)
  let let29 := (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) let4)
  let let30 := (binrel% HMul.hMul let15 skoY)
  let let31 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let30 let16))
  let let32 := (binrel% LE.le let31 skoZ)
  let let33 := (Eq let11 let30)
  let let34 := (Neg.neg let19)
  let let35 := (binrel% GE.ge let30 let34)
  let let36 := (binrel% LE.le skoY let19)
  let let37 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let38 := (binrel% GE.ge let16 let34)
  let let39 := (binrel% LE.le skoX let19)
  let let40 := (binrel% LT.lt let10 let1)
  let let41 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 11) let18))
  let let42 := (Rat.ofInt 0)
  let let43 := (binrel% GE.ge let42 let41)
  let let44 := (Int.ofNat 15)
  let let45 := (binrel% GE.ge skoZ let44)
  let let46 := (Rat.ofInt 15)
  let let47 := (binrel% LE.le let46 skoZ)
  let let48 := (binrel% GE.ge skoY let44)
  let let49 := (binrel% LE.le let46 skoY)
  let let50 := (binrel% LE.le let6 skoZ)
  let let51 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let16 let30))
  let let52 := (Not let8)
  let let53 := (binrel% HMul.hMul let15 skoZ)
  let let54 := (binrel% GE.ge let53 let34)
  let let55 := (binrel% LE.le skoZ let19)
  let let56 := (binrel% HMul.hMul let10 let5)
  let let57 := (Eq let56 let6)
  let let58 := (binrel% GE.ge skoX let44)
  let let59 := (binrel% LE.le let46 skoX)
  let let60 := (Not True)
  let let61 := (binrel% HDiv.hDiv let10 (Rat.ofInt 2))
  let let62 := (Not let59)
  let let63 := (Not let49)
  let let64 := (Not let47)
  let let65 := (binrel% LE.le skoX let37)
  let let66 := (Not let65)
  let let67 := (binrel% LE.le skoY let37)
  let let68 := (Not let67)
  let let69 := (binrel% LE.le skoZ let37)
  let let70 := (Not let69)
  let let71 := (binrel% LE.le let14 skoZ)
  let let72 := (Not let71)
  let let73 := (binrel% LE.le let61 skoZ)
  let let74 := (Not let73)
  let let75 := (And let74 (And let72 (And let70 (And let68 (And let66 (And let64 (And let63 let62)))))))
  let let76 := (Not let54)
  let let77 := (Not let76)
  let let78 := (binrel% HAdd.hAdd let6 let34)
  let let79 := (binrel% HAdd.hAdd skoZ let53)
  let let80 := (Not let55)
  let let81 := (binrel% GT.gt skoZ let19)
  let let82 := (Not let58)
  let let83 := (Not let48)
  let let84 := (Not let45)
  let let85 := (Not let38)
  let let86 := (Not let35)
  let let87 := (Not let29)
  let let88 := (And let8 (And let87 (And let76 (And let86 (And let85 (And let84 (And let83 let82)))))))
  let let89 := (Eq let75 let88)
  let let90 := (Or let7 let54)
  let let91 := (Or let52 let77)
  let let92 := (binrel% LT.lt let23 let20)
  let let93 := (And let40 let81)
  let let94 := (binrel% LT.lt let24 let21)
  let let95 := (And let3 let9)
(Eq let3 True) → (Eq let9 let8) → (Eq let14 let13) → let17 → (Eq let10 let10) → (Eq let28 let27) → (Eq let32 let29) → let33 → (Eq let36 let35) → (Eq let37 let19) → (Eq let39 let38) → (Eq let40 True) → (Eq let43 True) → (Eq let47 let45) → (Eq let49 let48) → (Eq let50 let7) → (Eq let51 let31) → (Eq let52 let7) → (Eq let21 let6) → (Eq let55 let54) → let57 → (Eq let59 let58) → (Eq let60 False) → (Eq let61 let56) → (Eq let75 let75) → (Eq let77 let54) → (Eq let20 let34) → (Eq let78 let41) → (Eq let79 let42) → (Eq let23 let53) → (Eq let24 skoZ) → (Eq let81 let80) → let75 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (binrel% HDiv.hDiv let4 (Int.ofNat 2))
  let let6 := (Neg.neg let5)
  let let7 := (binrel% GE.ge skoZ let6)
  let let8 := (Not let7)
  let let9 := (binrel% LT.lt skoZ let6)
  let let10 := (Neg.neg let2)
  let let11 := (binrel% HMul.hMul skoY let10)
  let let12 := (binrel% HMul.hMul skoX let10)
  let let13 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let12 let11))
  let let14 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let12) let11)
  let let15 := (Neg.neg let4)
  let let16 := (binrel% HMul.hMul let15 skoX)
  let let17 := (Eq let12 let16)
  let let18 := (Int.ofNat 20)
  let let19 := (binrel% HDiv.hDiv let4 let18)
  let let20 := (binrel% HMul.hMul let10 let19)
  let let21 := (binrel% HMul.hMul let2 let6)
  let let22 := (binrel% HAdd.hAdd let21 let20)
  let let23 := (binrel% HMul.hMul let10 skoZ)
  let let24 := (binrel% HMul.hMul let2 skoZ)
  let let25 := (binrel% HAdd.hAdd let24 let23)
  let let26 := (binrel% GE.ge let25 let22)
  let let27 := (Not let26)
  let let28 := (binrel% LT.lt let25 let22)
  let let29 := (binrel% GE.ge (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX)) let4)
  let let30 := (binrel% HMul.hMul let15 skoY)
  let let31 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let30 let16))
  let let32 := (binrel% LE.le let31 skoZ)
  let let33 := (Eq let11 let30)
  let let34 := (Neg.neg let19)
  let let35 := (binrel% GE.ge let30 let34)
  let let36 := (binrel% LE.le skoY let19)
  let let37 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let38 := (binrel% GE.ge let16 let34)
  let let39 := (binrel% LE.le skoX let19)
  let let40 := (binrel% LT.lt let10 let1)
  let let41 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 11) let18))
  let let42 := (Rat.ofInt 0)
  let let43 := (binrel% GE.ge let42 let41)
  let let44 := (Int.ofNat 15)
  let let45 := (binrel% GE.ge skoZ let44)
  let let46 := (Rat.ofInt 15)
  let let47 := (binrel% LE.le let46 skoZ)
  let let48 := (binrel% GE.ge skoY let44)
  let let49 := (binrel% LE.le let46 skoY)
  let let50 := (binrel% LE.le let6 skoZ)
  let let51 := (binrel% HAdd.hAdd let2 (binrel% HAdd.hAdd let16 let30))
  let let52 := (Not let8)
  let let53 := (binrel% HMul.hMul let15 skoZ)
  let let54 := (binrel% GE.ge let53 let34)
  let let55 := (binrel% LE.le skoZ let19)
  let let56 := (binrel% HMul.hMul let10 let5)
  let let57 := (Eq let56 let6)
  let let58 := (binrel% GE.ge skoX let44)
  let let59 := (binrel% LE.le let46 skoX)
  let let60 := (Not True)
  let let61 := (binrel% HDiv.hDiv let10 (Rat.ofInt 2))
  let let62 := (Not let59)
  let let63 := (Not let49)
  let let64 := (Not let47)
  let let65 := (binrel% LE.le skoX let37)
  let let66 := (Not let65)
  let let67 := (binrel% LE.le skoY let37)
  let let68 := (Not let67)
  let let69 := (binrel% LE.le skoZ let37)
  let let70 := (Not let69)
  let let71 := (binrel% LE.le let14 skoZ)
  let let72 := (Not let71)
  let let73 := (binrel% LE.le let61 skoZ)
  let let74 := (Not let73)
  let let75 := (And let74 (And let72 (And let70 (And let68 (And let66 (And let64 (And let63 let62)))))))
  let let76 := (Not let54)
  let let77 := (Not let76)
  let let78 := (binrel% HAdd.hAdd let6 let34)
  let let79 := (binrel% HAdd.hAdd skoZ let53)
  let let80 := (Not let55)
  let let81 := (binrel% GT.gt skoZ let19)
  let let82 := (Not let58)
  let let83 := (Not let48)
  let let84 := (Not let45)
  let let85 := (Not let38)
  let let86 := (Not let35)
  let let87 := (Not let29)
  let let88 := (And let8 (And let87 (And let76 (And let86 (And let85 (And let84 (And let83 let82)))))))
  let let89 := (Eq let75 let88)
  let let90 := (Or let7 let54)
  let let91 := (Or let52 let77)
  let let92 := (binrel% LT.lt let23 let20)
  let let93 := (And let40 let81)
  let let94 := (binrel% LT.lt let24 let21)
  let let95 := (And let3 let9)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let14 let13) => -- THEORY_REWRITE_ARITH
fun lean_r3 : let17 => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let10 let10) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let32 let29) => -- THEORY_REWRITE_ARITH
fun lean_r7 : let33 => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let37 let19) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let40 True) => -- EVALUATE
fun lean_r12 : (Eq let43 True) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let47 let45) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let49 let48) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let50 let7) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let51 let31) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let52 let7) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let21 let6) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r20 : let57 => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let59 let58) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let60 False) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let61 let56) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let75 let75) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let77 let54) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let20 let34) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let78 let41) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let79 let42) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let23 let53) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let24 skoZ) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let81 let80) => -- THEORY_REWRITE_ARITH
fun lean_a32 : let75 => by
have lean_s0 : (Or let52 (Or let77 False)) :=
  (scope (fun lean_a33 : let8 =>
    (scope (fun lean_a34 : let76 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let8 let9) := by timed Eq.symm lean_r1
      have lean_s2 : let9 := by timed eqResolve lean_a33 lean_s1
      have lean_s3 : let95 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let95 let94) := by arithMulPos [skoZ, let6, let2], 0
      have lean_s5 : let94 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let40 := by timed trueElim lean_r11
      have lean_s7 : (Eq let80 let76) := by timed flipCongrArg lean_r19 [Not]
      have lean_s8 : (Eq let81 let76) := by timed Eq.trans lean_r31 lean_s7
      have lean_s9 : (Eq let76 let81) := by timed Eq.symm lean_s8
      have lean_s10 : let81 := by timed eqResolve lean_a34 lean_s9
      have lean_s11 : let93 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let93 let92) := by arithMulNeg [skoZ, let19, let10], 2
      have lean_s13 : let92 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let28 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r30 [HAdd.hAdd]
      have lean_s16 : (Eq let25 let79) := by timed congr lean_s15 lean_r29
      have lean_s17 : (Eq let25 let42) := by timed Eq.trans lean_s16 lean_r28
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r18 [HAdd.hAdd]
      have lean_s20 : (Eq let22 let78) := by timed congr lean_s19 lean_r26
      have lean_s21 : (Eq let22 let41) := by timed Eq.trans lean_s20 lean_r27
      have lean_s22 : (Eq let26 let43) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let26 True) := by timed Eq.trans lean_s22 lean_r12
      have lean_s24 : (Eq let27 let60) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let27 False) := by timed Eq.trans lean_s24 lean_r22
      have lean_s26 : (Eq let28 False) := by timed Eq.trans lean_r5 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let8 let76)) := by liftOrNToNeg lean_s0
have lean_s2 : let91 := by timed flipNotAnd lean_s1 [let8, let76]
let lean_s3 := by timed flipCongrArg lean_r17 [Or]
have lean_s4 : (Eq let91 let90) := by timed congr lean_s3 lean_r25
have lean_s5 : let90 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
let lean_s7 := by timed flipCongrArg lean_r4 [HMul.hMul]
have lean_s8 : (Eq let5 let5) := by timed rfl
have lean_s9 : (Eq let56 let56) := by timed congr lean_s7 lean_s8
have lean_s10 : let57 := by timed Eq.trans lean_s9 lean_r20
have lean_s11 : (Eq let61 let6) := by timed Eq.trans lean_r23 lean_s10
let lean_s12 := by timed flipCongrArg lean_s11 [LE.le]
have lean_s13 : (Eq skoZ skoZ) := by timed rfl
have lean_s14 : (Eq let73 let50) := by timed congr lean_s12 lean_s13
have lean_s15 : (Eq let73 let7) := by timed Eq.trans lean_s14 lean_r15
have lean_s16 : (Eq let74 let8) := by timed flipCongrArg lean_s15 [Not]
let lean_s17 := by timed congr lean_s6 lean_s16
have lean_s18 : (Eq let2 let2) := by timed rfl
have lean_s19 : (Eq skoX skoX) := by timed rfl
let lean_s20 := by timed flipCongrArg lean_s19 [HMul.hMul]
have lean_s21 : (Eq let12 let12) := by timed congr lean_s20 lean_r4
have lean_s22 : let17 := by timed Eq.trans lean_s21 lean_r3
have lean_s23 : (Eq skoY skoY) := by timed rfl
let lean_s24 := by timed flipCongrArg lean_s23 [HMul.hMul]
have lean_s25 : (Eq let11 let11) := by timed congr lean_s24 lean_r4
have lean_s26 : let33 := by timed Eq.trans lean_s25 lean_r7
let lean_s27 := by timed congrHAdd lean_s22 lean_s26
have lean_s28 : (Eq let13 let51) := by timed congrHAdd lean_s18 lean_s27
have lean_s29 : (Eq let13 let31) := by timed Eq.trans lean_s28 lean_r16
have lean_s30 : (Eq let14 let31) := by timed Eq.trans lean_r2 lean_s29
let lean_s31 := by timed flipCongrArg lean_s30 [LE.le]
have lean_s32 : (Eq let71 let32) := by timed congr lean_s31 lean_s13
have lean_s33 : (Eq let71 let29) := by timed Eq.trans lean_s32 lean_r6
have lean_s34 : (Eq let72 let87) := by timed flipCongrArg lean_s33 [Not]
let lean_s35 := by timed congr lean_s6 lean_s34
let lean_s36 := by timed flipCongrArg lean_s13 [LE.le]
have lean_s37 : (Eq let69 let55) := by timed congr lean_s36 lean_r9
have lean_s38 : (Eq let69 let54) := by timed Eq.trans lean_s37 lean_r19
have lean_s39 : (Eq let70 let76) := by timed flipCongrArg lean_s38 [Not]
let lean_s40 := by timed congr lean_s6 lean_s39
let lean_s41 := by timed flipCongrArg lean_s23 [LE.le]
have lean_s42 : (Eq let67 let36) := by timed congr lean_s41 lean_r9
have lean_s43 : (Eq let67 let35) := by timed Eq.trans lean_s42 lean_r8
have lean_s44 : (Eq let68 let86) := by timed flipCongrArg lean_s43 [Not]
let lean_s45 := by timed congr lean_s6 lean_s44
let lean_s46 := by timed flipCongrArg lean_s19 [LE.le]
have lean_s47 : (Eq let65 let39) := by timed congr lean_s46 lean_r9
have lean_s48 : (Eq let65 let38) := by timed Eq.trans lean_s47 lean_r10
have lean_s49 : (Eq let66 let85) := by timed flipCongrArg lean_s48 [Not]
let lean_s50 := by timed congr lean_s6 lean_s49
have lean_s51 : (Eq let64 let84) := by timed flipCongrArg lean_r13 [Not]
let lean_s52 := by timed congr lean_s6 lean_s51
have lean_s53 : (Eq let63 let83) := by timed flipCongrArg lean_r14 [Not]
let lean_s54 := by timed congr lean_s6 lean_s53
have lean_s55 : (Eq let62 let82) := by timed flipCongrArg lean_r21 [Not]
let lean_s56 := by timed congr lean_s54 lean_s55
let lean_s57 := by timed congr lean_s52 lean_s56
let lean_s58 := by timed congr lean_s50 lean_s57
let lean_s59 := by timed congr lean_s45 lean_s58
let lean_s60 := by timed congr lean_s40 lean_s59
let lean_s61 := by timed congr lean_s35 lean_s60
have lean_s62 : let89 := by timed congr lean_s17 lean_s61
have lean_s63 : let89 := by timed Eq.trans lean_r24 lean_s62
have lean_s64 : let88 := by timed eqResolve lean_a32 lean_s63
have lean_s65 : let76 := by andElim lean_s64, 2
let lean_s66 := by R1 lean_s5, lean_s65, let54, [(- 1), 0]
have lean_s67 : let8 := by andElim lean_s64, 0
exact (show False from by R1 lean_s66, lean_s67, let7, [0, 0])


