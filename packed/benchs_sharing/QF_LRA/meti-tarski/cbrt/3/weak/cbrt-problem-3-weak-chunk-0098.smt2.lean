open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 20)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoZ let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoZ let3)
  let let7 := (Neg.neg let2)
  let let8 := (binrel% HMul.hMul let7 skoX)
  let let9 := (Rat.ofInt 1)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% HMul.hMul let10 skoX)
  let let12 := (binrel% HMul.hMul let7 skoY)
  let let13 := (binrel% HMul.hMul let10 skoY)
  let let14 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 19) let1))
  let let15 := (Rat.ofInt 0)
  let let16 := (binrel% GE.ge let15 let14)
  let let17 := (binrel% HMul.hMul skoX let10)
  let let18 := (Eq let17 let8)
  let let19 := (Int.ofNat 5)
  let let20 := (binrel% HDiv.hDiv (Int.ofNat 4) let19)
  let let21 := (Neg.neg let20)
  let let22 := (binrel% HDiv.hDiv let2 let19)
  let let23 := (Neg.neg (Rat.ofInt 4))
  let let24 := (binrel% HMul.hMul let23 let22)
  let let25 := (Eq let24 let21)
  let let26 := (binrel% HMul.hMul let7 skoZ)
  let let27 := (binrel% GE.ge (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let8 let26)) let20)
  let let28 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let12 let8))
  let let29 := (binrel% LE.le skoZ let28)
  let let30 := (Neg.neg let3)
  let let31 := (binrel% GE.ge let8 let30)
  let let32 := (Not let31)
  let let33 := (Not let32)
  let let34 := (Eq let33 let31)
  let let35 := (binrel% HMul.hMul skoY let10)
  let let36 := (Eq let35 let12)
  let let37 := (binrel% LE.le skoX let3)
  let let38 := (Not let37)
  let let39 := (binrel% GT.gt skoX let3)
  let let40 := (binrel% HDiv.hDiv let23 (Rat.ofInt 5))
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let17 let35))
  let let42 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let40 let17) let35)
  let let43 := (binrel% GE.ge let12 let30)
  let let44 := (binrel% LE.le skoY let3)
  let let45 := (binrel% HMul.hMul let10 skoZ)
  let let46 := (Eq let43 let43)
  let let47 := (Not let44)
  let let48 := (binrel% GT.gt skoY let3)
  let let49 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 let30)))
  let let50 := (binrel% HDiv.hDiv let9 (Rat.ofInt 20))
  let let51 := (Int.ofNat 15)
  let let52 := (binrel% GE.ge skoZ let51)
  let let53 := (Rat.ofInt 15)
  let let54 := (binrel% LE.le let53 skoZ)
  let let55 := (binrel% HMul.hMul let10 let3)
  let let56 := (binrel% HMul.hMul let9 let21)
  let let57 := (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 let55)))
  let let58 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let59 := (binrel% HMul.hMul let9 let58)
  let let60 := (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let11 let13)))
  let let61 := (binrel% GE.ge let60 let57)
  let let62 := (Not let61)
  let let63 := (binrel% LT.lt let60 let57)
  let let64 := (Not let43)
  let let65 := (Not let64)
  let let66 := (Eq let43 let65)
  let let67 := (Eq let65 let43)
  let let68 := (Int.ofNat 0)
  let let69 := (binrel% GT.gt let9 let68)
  let let70 := (binrel% GE.ge skoY let51)
  let let71 := (binrel% LE.le let53 skoY)
  let let72 := (binrel% LE.le let58 let21)
  let let73 := (binrel% GE.ge let26 let30)
  let let74 := (Not True)
  let let75 := (binrel% GE.ge skoX let51)
  let let76 := (binrel% LE.le let53 skoX)
  let let77 := (binrel% LT.lt let10 let68)
  let let78 := (Eq let73 let73)
  let let79 := (Not let73)
  let let80 := (Not let79)
  let let81 := (Eq let73 let80)
  let let82 := (Eq let80 let73)
  let let83 := (binrel% HAdd.hAdd let8 let12)
  let let84 := (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let26 let83))
  let let85 := (Not let76)
  let let86 := (Not let71)
  let let87 := (Not let54)
  let let88 := (binrel% LE.le skoX let50)
  let let89 := (Not let88)
  let let90 := (binrel% LE.le skoY let50)
  let let91 := (Not let90)
  let let92 := (binrel% LE.le skoZ let50)
  let let93 := (Not let92)
  let let94 := (binrel% LE.le skoZ let42)
  let let95 := (And let94 (And let93 (And let91 (And let89 (And let87 (And let86 let85))))))
  let let96 := (Eq let31 let31)
  let let97 := (Eq let31 let33)
  let let98 := (binrel% HAdd.hAdd let21 let83)
  let let99 := (Not let72)
  let let100 := (binrel% GT.gt let58 let21)
  let let101 := (Eq let100 let99)
  let let102 := (Not let75)
  let let103 := (Not let70)
  let let104 := (Not let52)
  let let105 := (And let27 (And let79 (And let64 (And let32 (And let104 (And let103 let102))))))
  let let106 := (Eq let95 let105)
  let let107 := (Not let27)
  let let108 := (Or let43 (Or let31 (Or let73 let107)))
  let let109 := (Or let65 (Or let33 (Or let80 let107)))
  let let110 := (binrel% LT.lt let13 let55)
  let let111 := (And let77 let48)
  let let112 := (binrel% LT.lt let11 let55)
  let let113 := (And let77 let39)
  let let114 := (binrel% LT.lt let45 let55)
  let let115 := (And let77 let6)
  let let116 := (binrel% LE.le let59 let56)
  let let117 := (And let69 let72)
(Eq let6 let5) → (Eq let11 let8) → (Eq let13 let12) → (Eq let16 True) → let18 → (Eq let10 let10) → let25 → (Eq let29 let27) → let34 → let36 → (Eq let39 let38) → (Eq let42 let41) → (Eq let44 let43) → (Eq let45 let26) → (Eq let46 True) → (Eq let48 let47) → (Eq let49 let14) → (Eq let50 let3) → (Eq let37 let31) → (Eq let54 let52) → (Eq let63 let62) → (Eq let67 let66) → (Eq let69 True) → (Eq let71 let70) → (Eq let72 let27) → (Eq let4 let73) → (Eq let74 False) → (Eq let76 let75) → (Eq let77 True) → (Eq let78 True) → (Eq let55 let30) → (Eq let23 let23) → (Eq let56 let21) → (Eq let40 let24) → (Eq let82 let81) → (Eq let84 let15) → (Eq let95 let95) → (Eq let96 True) → (Eq let34 let97) → (Eq let59 let58) → (Eq let98 let28) → let67 → let82 → let101 → let95 → False :=
  let let1 := (Int.ofNat 20)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoZ let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoZ let3)
  let let7 := (Neg.neg let2)
  let let8 := (binrel% HMul.hMul let7 skoX)
  let let9 := (Rat.ofInt 1)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% HMul.hMul let10 skoX)
  let let12 := (binrel% HMul.hMul let7 skoY)
  let let13 := (binrel% HMul.hMul let10 skoY)
  let let14 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 19) let1))
  let let15 := (Rat.ofInt 0)
  let let16 := (binrel% GE.ge let15 let14)
  let let17 := (binrel% HMul.hMul skoX let10)
  let let18 := (Eq let17 let8)
  let let19 := (Int.ofNat 5)
  let let20 := (binrel% HDiv.hDiv (Int.ofNat 4) let19)
  let let21 := (Neg.neg let20)
  let let22 := (binrel% HDiv.hDiv let2 let19)
  let let23 := (Neg.neg (Rat.ofInt 4))
  let let24 := (binrel% HMul.hMul let23 let22)
  let let25 := (Eq let24 let21)
  let let26 := (binrel% HMul.hMul let7 skoZ)
  let let27 := (binrel% GE.ge (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let8 let26)) let20)
  let let28 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let12 let8))
  let let29 := (binrel% LE.le skoZ let28)
  let let30 := (Neg.neg let3)
  let let31 := (binrel% GE.ge let8 let30)
  let let32 := (Not let31)
  let let33 := (Not let32)
  let let34 := (Eq let33 let31)
  let let35 := (binrel% HMul.hMul skoY let10)
  let let36 := (Eq let35 let12)
  let let37 := (binrel% LE.le skoX let3)
  let let38 := (Not let37)
  let let39 := (binrel% GT.gt skoX let3)
  let let40 := (binrel% HDiv.hDiv let23 (Rat.ofInt 5))
  let let41 := (binrel% HAdd.hAdd let40 (binrel% HAdd.hAdd let17 let35))
  let let42 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let40 let17) let35)
  let let43 := (binrel% GE.ge let12 let30)
  let let44 := (binrel% LE.le skoY let3)
  let let45 := (binrel% HMul.hMul let10 skoZ)
  let let46 := (Eq let43 let43)
  let let47 := (Not let44)
  let let48 := (binrel% GT.gt skoY let3)
  let let49 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let30 (binrel% HAdd.hAdd let30 let30)))
  let let50 := (binrel% HDiv.hDiv let9 (Rat.ofInt 20))
  let let51 := (Int.ofNat 15)
  let let52 := (binrel% GE.ge skoZ let51)
  let let53 := (Rat.ofInt 15)
  let let54 := (binrel% LE.le let53 skoZ)
  let let55 := (binrel% HMul.hMul let10 let3)
  let let56 := (binrel% HMul.hMul let9 let21)
  let let57 := (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let55 (binrel% HAdd.hAdd let55 let55)))
  let let58 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let59 := (binrel% HMul.hMul let9 let58)
  let let60 := (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let11 let13)))
  let let61 := (binrel% GE.ge let60 let57)
  let let62 := (Not let61)
  let let63 := (binrel% LT.lt let60 let57)
  let let64 := (Not let43)
  let let65 := (Not let64)
  let let66 := (Eq let43 let65)
  let let67 := (Eq let65 let43)
  let let68 := (Int.ofNat 0)
  let let69 := (binrel% GT.gt let9 let68)
  let let70 := (binrel% GE.ge skoY let51)
  let let71 := (binrel% LE.le let53 skoY)
  let let72 := (binrel% LE.le let58 let21)
  let let73 := (binrel% GE.ge let26 let30)
  let let74 := (Not True)
  let let75 := (binrel% GE.ge skoX let51)
  let let76 := (binrel% LE.le let53 skoX)
  let let77 := (binrel% LT.lt let10 let68)
  let let78 := (Eq let73 let73)
  let let79 := (Not let73)
  let let80 := (Not let79)
  let let81 := (Eq let73 let80)
  let let82 := (Eq let80 let73)
  let let83 := (binrel% HAdd.hAdd let8 let12)
  let let84 := (binrel% HAdd.hAdd let58 (binrel% HAdd.hAdd let26 let83))
  let let85 := (Not let76)
  let let86 := (Not let71)
  let let87 := (Not let54)
  let let88 := (binrel% LE.le skoX let50)
  let let89 := (Not let88)
  let let90 := (binrel% LE.le skoY let50)
  let let91 := (Not let90)
  let let92 := (binrel% LE.le skoZ let50)
  let let93 := (Not let92)
  let let94 := (binrel% LE.le skoZ let42)
  let let95 := (And let94 (And let93 (And let91 (And let89 (And let87 (And let86 let85))))))
  let let96 := (Eq let31 let31)
  let let97 := (Eq let31 let33)
  let let98 := (binrel% HAdd.hAdd let21 let83)
  let let99 := (Not let72)
  let let100 := (binrel% GT.gt let58 let21)
  let let101 := (Eq let100 let99)
  let let102 := (Not let75)
  let let103 := (Not let70)
  let let104 := (Not let52)
  let let105 := (And let27 (And let79 (And let64 (And let32 (And let104 (And let103 let102))))))
  let let106 := (Eq let95 let105)
  let let107 := (Not let27)
  let let108 := (Or let43 (Or let31 (Or let73 let107)))
  let let109 := (Or let65 (Or let33 (Or let80 let107)))
  let let110 := (binrel% LT.lt let13 let55)
  let let111 := (And let77 let48)
  let let112 := (binrel% LT.lt let11 let55)
  let let113 := (And let77 let39)
  let let114 := (binrel% LT.lt let45 let55)
  let let115 := (And let77 let6)
  let let116 := (binrel% LE.le let59 let56)
  let let117 := (And let69 let72)
fun lean_r0 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let11 let8) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let16 True) => -- THEORY_REWRITE_ARITH
fun lean_r4 : let18 => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let10 let10) => -- THEORY_REWRITE_ARITH
fun lean_r6 : let25 => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let29 let27) => -- THEORY_REWRITE_ARITH
fun lean_r8 : let34 => -- THEORY_REWRITE_BOOL
fun lean_r9 : let36 => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let45 let26) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let46 True) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let48 let47) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let49 let14) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let50 let3) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let37 let31) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let54 let52) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let67 let66) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let69 True) => -- EVALUATE
fun lean_r23 : (Eq let71 let70) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let72 let27) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let4 let73) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let74 False) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let76 let75) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let77 True) => -- EVALUATE
fun lean_r29 : (Eq let78 True) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let55 let30) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let23 let23) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let56 let21) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let40 let24) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let82 let81) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let84 let15) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let95 let95) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let96 True) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let34 let97) => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let59 let58) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let98 let28) => -- THEORY_REWRITE_ARITH
fun lean_r41 : let67 => -- THEORY_REWRITE_BOOL
fun lean_r42 : let82 => -- THEORY_REWRITE_BOOL
fun lean_r43 : let101 => -- THEORY_REWRITE_ARITH
fun lean_a44 : let95 => by
have lean_s0 : (Or let65 (Or let33 (Or let80 (Or let107 False)))) :=
  (scope (fun lean_a45 : let64 =>
    (scope (fun lean_a46 : let32 =>
      (scope (fun lean_a47 : let79 =>
        (scope (fun lean_a48 : let27 =>
          have lean_s0 : (Eq let27 let72) := by timed Eq.symm lean_r24
          have lean_s1 : let72 := by timed eqResolve lean_a48 lean_s0
          have lean_s2 : (Or let99 False) :=
            (scope (fun lean_a49 : let72 =>
              have lean_s2 : let69 := by timed trueElim lean_r22
              have lean_s3 : let117 := by timed And.intro lean_s2 lean_a49
              have lean_s4 : (Implies let117 let116) := by arithMulPos [let58, let21, let9], 1
              have lean_s5 : let116 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let77 := by timed trueElim lean_r28
              have lean_s7 : (Eq let5 let79) := by timed flipCongrArg lean_r25 [Not]
              have lean_s8 : (Eq let6 let79) := by timed Eq.trans lean_r0 lean_s7
              have lean_s9 : (Eq let79 let6) := by timed Eq.symm lean_s8
              have lean_s10 : let6 := by timed eqResolve lean_a47 lean_s9
              have lean_s11 : let115 := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies let115 let114) := by arithMulNeg [skoZ, let3, let10], 2
              have lean_s13 : let114 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let38 let32) := by timed flipCongrArg lean_r18 [Not]
              have lean_s15 : (Eq let39 let32) := by timed Eq.trans lean_r10 lean_s14
              have lean_s16 : (Eq let32 let39) := by timed Eq.symm lean_s15
              have lean_s17 : let39 := by timed eqResolve lean_a46 lean_s16
              have lean_s18 : let113 := by timed And.intro lean_s6 lean_s17
              have lean_s19 : (Implies let113 let112) := by arithMulNeg [skoX, let3, let10], 2
              have lean_s20 : let112 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : (Eq let47 let64) := by timed flipCongrArg lean_r12 [Not]
              have lean_s22 : (Eq let48 let64) := by timed Eq.trans lean_r15 lean_s21
              have lean_s23 : (Eq let64 let48) := by timed Eq.symm lean_s22
              have lean_s24 : let48 := by timed eqResolve lean_a45 lean_s23
              have lean_s25 : let111 := by timed And.intro lean_s6 lean_s24
              have lean_s26 : (Implies let111 let110) := by arithMulNeg [skoY, let3, let10], 2
              have lean_s27 : let110 := by timed modusPonens lean_s25 lean_s26
              have lean_s28 : let63 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27]
              let lean_s29 := by timed congrHAdd lean_r1 lean_r2
              let lean_s30 := by timed congrHAdd lean_r13 lean_s29
              have lean_s31 : (Eq let60 let84) := by timed congrHAdd lean_r39 lean_s30
              have lean_s32 : (Eq let60 let15) := by timed Eq.trans lean_s31 lean_r35
              let lean_s33 := by timed flipCongrArg lean_s32 [GE.ge]
              let lean_s34 := by timed congrHAdd lean_r30 lean_r30
              let lean_s35 := by timed congrHAdd lean_r30 lean_s34
              have lean_s36 : (Eq let57 let49) := by timed congrHAdd lean_r32 lean_s35
              have lean_s37 : (Eq let57 let14) := by timed Eq.trans lean_s36 lean_r16
              have lean_s38 : (Eq let61 let16) := by timed congr lean_s33 lean_s37
              have lean_s39 : (Eq let61 True) := by timed Eq.trans lean_s38 lean_r3
              have lean_s40 : (Eq let62 let74) := by timed flipCongrArg lean_s39 [Not]
              have lean_s41 : (Eq let62 False) := by timed Eq.trans lean_s40 lean_r26
              have lean_s42 : (Eq let63 False) := by timed Eq.trans lean_r20 lean_s41
              show False from by timed eqResolve lean_s28 lean_s42
            ))
          have lean_s3 : let99 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let99 let107) := by timed flipCongrArg lean_r24 [Not]
          have lean_s5 : (Eq let100 let107) := by timed Eq.trans lean_r43 lean_s4
          have lean_s6 : (Eq let107 let100) := by timed Eq.symm lean_s5
          have lean_s7 : (Eq let99 let100) := by timed Eq.trans lean_s4 lean_s6
          have lean_s8 : let100 := by timed eqResolve lean_s3 lean_s7
          have lean_s9 : (Eq let107 let99) := by timed Eq.symm lean_s4
          have lean_s10 : let101 := by timed Eq.trans lean_s5 lean_s9
          have lean_s11 : let99 := by timed eqResolve lean_s8 lean_s10
          show False from by timed contradiction lean_s1 lean_s11
  ))))))))
have lean_s1 : (Not (And let64 (And let32 (And let79 let27)))) := by liftOrNToNeg lean_s0
have lean_s2 : let109 := by timed flipNotAnd lean_s1 [let64, let32, let79, let27]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let46 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let66 let46) := by timed congr lean_s5 lean_r41
have lean_s7 : (Eq let66 True) := by timed Eq.trans lean_s6 lean_r14
have lean_s8 : (Eq let67 True) := by timed Eq.trans lean_r21 lean_s7
have lean_s9 : let67 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let96 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let97 let96) := by timed congr lean_s12 lean_r8
have lean_s14 : (Eq let97 True) := by timed Eq.trans lean_s13 lean_r37
have lean_s15 : (Eq let34 True) := by timed Eq.trans lean_r38 lean_s14
have lean_s16 : let34 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let78 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let81 let78) := by timed congr lean_s19 lean_r42
have lean_s21 : (Eq let81 True) := by timed Eq.trans lean_s20 lean_r29
have lean_s22 : (Eq let82 True) := by timed Eq.trans lean_r34 lean_s21
have lean_s23 : let82 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : (Eq let107 let107) := by timed rfl
let lean_s26 := by timed congr lean_s24 lean_s25
let lean_s27 := by timed congr lean_s17 lean_s26
have lean_s28 : (Eq let109 let108) := by timed congr lean_s10 lean_s27
have lean_s29 : let108 := by timed eqResolve lean_s2 lean_s28
have lean_s30 : (Or let73 (Or let43 (Or let31 let107))) := by permutateOr lean_s29, [2, 0, 1, 3], (- 1)
have lean_s31 : (Eq And And) := by timed rfl
have lean_s32 : (Eq skoZ skoZ) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
let lean_s34 := by timed flipCongrArg lean_r31 [HMul.hMul]
have lean_s35 : (Eq let22 let22) := by timed rfl
have lean_s36 : (Eq let24 let24) := by timed congr lean_s34 lean_s35
have lean_s37 : let25 := by timed Eq.trans lean_s36 lean_r6
have lean_s38 : (Eq let40 let21) := by timed Eq.trans lean_r33 lean_s37
have lean_s39 : (Eq skoX skoX) := by timed rfl
let lean_s40 := by timed flipCongrArg lean_s39 [HMul.hMul]
have lean_s41 : (Eq let17 let17) := by timed congr lean_s40 lean_r5
have lean_s42 : let18 := by timed Eq.trans lean_s41 lean_r4
have lean_s43 : (Eq skoY skoY) := by timed rfl
let lean_s44 := by timed flipCongrArg lean_s43 [HMul.hMul]
have lean_s45 : (Eq let35 let35) := by timed congr lean_s44 lean_r5
have lean_s46 : let36 := by timed Eq.trans lean_s45 lean_r9
let lean_s47 := by timed congrHAdd lean_s42 lean_s46
have lean_s48 : (Eq let41 let98) := by timed congrHAdd lean_s38 lean_s47
have lean_s49 : (Eq let41 let28) := by timed Eq.trans lean_s48 lean_r40
have lean_s50 : (Eq let42 let28) := by timed Eq.trans lean_r11 lean_s49
have lean_s51 : (Eq let94 let29) := by timed congr lean_s33 lean_s50
have lean_s52 : (Eq let94 let27) := by timed Eq.trans lean_s51 lean_r7
let lean_s53 := by timed congr lean_s31 lean_s52
let lean_s54 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s55 : (Eq let92 let4) := by timed congr lean_s54 lean_r17
have lean_s56 : (Eq let92 let73) := by timed Eq.trans lean_s55 lean_r25
have lean_s57 : (Eq let93 let79) := by timed flipCongrArg lean_s56 [Not]
let lean_s58 := by timed congr lean_s31 lean_s57
let lean_s59 := by timed flipCongrArg lean_s43 [LE.le]
have lean_s60 : (Eq let90 let44) := by timed congr lean_s59 lean_r17
have lean_s61 : (Eq let90 let43) := by timed Eq.trans lean_s60 lean_r12
have lean_s62 : (Eq let91 let64) := by timed flipCongrArg lean_s61 [Not]
let lean_s63 := by timed congr lean_s31 lean_s62
let lean_s64 := by timed flipCongrArg lean_s39 [LE.le]
have lean_s65 : (Eq let88 let37) := by timed congr lean_s64 lean_r17
have lean_s66 : (Eq let88 let31) := by timed Eq.trans lean_s65 lean_r18
have lean_s67 : (Eq let89 let32) := by timed flipCongrArg lean_s66 [Not]
let lean_s68 := by timed congr lean_s31 lean_s67
have lean_s69 : (Eq let87 let104) := by timed flipCongrArg lean_r19 [Not]
let lean_s70 := by timed congr lean_s31 lean_s69
have lean_s71 : (Eq let86 let103) := by timed flipCongrArg lean_r23 [Not]
let lean_s72 := by timed congr lean_s31 lean_s71
have lean_s73 : (Eq let85 let102) := by timed flipCongrArg lean_r27 [Not]
let lean_s74 := by timed congr lean_s72 lean_s73
let lean_s75 := by timed congr lean_s70 lean_s74
let lean_s76 := by timed congr lean_s68 lean_s75
let lean_s77 := by timed congr lean_s63 lean_s76
let lean_s78 := by timed congr lean_s58 lean_s77
have lean_s79 : let106 := by timed congr lean_s53 lean_s78
have lean_s80 : let106 := by timed Eq.trans lean_r36 lean_s79
have lean_s81 : let105 := by timed eqResolve lean_a44 lean_s80
have lean_s82 : let32 := by andElim lean_s81, 3
let lean_s83 := by R1 lean_s30, lean_s82, let31, [(- 1), 0]
have lean_s84 : let64 := by andElim lean_s81, 2
let lean_s85 := by R1 lean_s83, lean_s84, let43, [(- 1), 0]
have lean_s86 : let79 := by andElim lean_s81, 1
let lean_s87 := by R1 lean_s85, lean_s86, let73, [(- 1), 0]
have lean_s88 : let27 := by andElim lean_s81, 0
exact (show False from by R2 lean_s87, lean_s88, let27, [0, 0])


