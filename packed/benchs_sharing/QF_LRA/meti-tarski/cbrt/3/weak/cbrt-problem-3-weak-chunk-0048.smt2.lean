open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 5)
  let let5 := (binrel% HDiv.hDiv (Int.ofNat 32) let4)
  let let6 := (Neg.neg let5)
  let let7 := (Int.ofNat 1)
  let let8 := (binrel% HDiv.hDiv let7 let4)
  let let9 := (Neg.neg (Rat.ofInt 32))
  let let10 := (binrel% HMul.hMul let9 let8)
  let let11 := (Eq let10 let6)
  let let12 := (Int.ofNat 15)
  let let13 := (binrel% GE.ge skoX let12)
  let let14 := (Rat.ofInt 15)
  let let15 := (binrel% LE.le let14 skoX)
  let let16 := (binrel% HDiv.hDiv let7 (Int.ofNat 20))
  let let17 := (Neg.neg let16)
  let let18 := (Neg.neg let7)
  let let19 := (binrel% HMul.hMul let18 skoY)
  let let20 := (binrel% GE.ge let19 let17)
  let let21 := (binrel% LE.le skoY let16)
  let let22 := (Neg.neg let2)
  let let23 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let24 := (binrel% HMul.hMul let18 skoX)
  let let25 := (binrel% HAdd.hAdd let19 let24)
  let let26 := (binrel% HMul.hMul let18 skoZ)
  let let27 := (binrel% HAdd.hAdd let26 let25)
  let let28 := (binrel% GE.ge let27 let5)
  let let29 := (binrel% HAdd.hAdd let6 let25)
  let let30 := (binrel% LE.le skoZ let29)
  let let31 := (binrel% HMul.hMul let2 let6)
  let let32 := (binrel% GE.ge let24 let17)
  let let33 := (binrel% LE.le skoX let16)
  let let34 := (binrel% GE.ge skoZ let12)
  let let35 := (binrel% LE.le let14 skoZ)
  let let36 := (binrel% HDiv.hDiv let9 (Rat.ofInt 5))
  let let37 := (binrel% HMul.hMul skoY let22)
  let let38 := (Eq let37 let19)
  let let39 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let40 := (binrel% LE.le let39 let6)
  let let41 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 37) let4))
  let let42 := (binrel% HAdd.hAdd let6 let22)
  let let43 := (binrel% GE.ge skoY let12)
  let let44 := (binrel% LE.le let14 skoY)
  let let45 := (Not let15)
  let let46 := (Not let44)
  let let47 := (Not let35)
  let let48 := (binrel% LE.le skoX let23)
  let let49 := (Not let48)
  let let50 := (binrel% LE.le skoY let23)
  let let51 := (Not let50)
  let let52 := (binrel% LE.le skoZ let23)
  let let53 := (Not let52)
  let let54 := (binrel% HMul.hMul skoX let22)
  let let55 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let36 let54) let37)
  let let56 := (binrel% LE.le skoZ let55)
  let let57 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let54) let37)
  let let58 := (binrel% LE.le let57 skoZ)
  let let59 := (And let58 (And let56 (And let53 (And let51 (And let49 (And let47 (And let46 let45)))))))
  let let60 := (binrel% HAdd.hAdd let24 let19)
  let let61 := (binrel% HAdd.hAdd let6 let60)
  let let62 := (binrel% HMul.hMul let2 let39)
  let let63 := (binrel% HAdd.hAdd let54 let37)
  let let64 := (binrel% HAdd.hAdd let36 let63)
  let let65 := (binrel% GE.ge let26 let17)
  let let66 := (binrel% LE.le skoZ let16)
  let let67 := (Rat.ofInt 0)
  let let68 := (binrel% LE.le let67 let41)
  let let69 := (binrel% HMul.hMul let22 let2)
  let let70 := (binrel% GE.ge let39 let7)
  let let71 := (binrel% HAdd.hAdd let7 let25)
  let let72 := (binrel% LE.le let71 skoZ)
  let let73 := (binrel% HAdd.hAdd let2 let63)
  let let74 := (binrel% HMul.hMul let22 let39)
  let let75 := (binrel% HAdd.hAdd let2 let60)
  let let76 := (binrel% HAdd.hAdd let39 let27)
  let let77 := (Eq let54 let24)
  let let78 := (binrel% GE.ge let39 let2)
  let let79 := (binrel% LT.lt let22 let1)
  let let80 := (Not let13)
  let let81 := (Not let43)
  let let82 := (Not let34)
  let let83 := (Not let32)
  let let84 := (Not let20)
  let let85 := (Not let65)
  let let86 := (And let70 (And let28 (And let85 (And let84 (And let83 (And let82 (And let81 let80)))))))
  let let87 := (Eq let59 let86)
  let let88 := (Not let28)
  let let89 := (Not let70)
  let let90 := (binrel% HAdd.hAdd let31 let69)
  let let91 := (binrel% HAdd.hAdd let62 let74)
  let let92 := (binrel% LE.le let91 let90)
  let let93 := (binrel% LE.le let74 let69)
  let let94 := (And let79 let78)
  let let95 := (binrel% LE.le let62 let31)
  let let96 := (And let3 let40)
(Eq let3 True) → let11 → (Eq let15 let13) → (Eq let21 let20) → (Eq let22 let22) → (Eq let23 let16) → (Eq let30 let28) → (Eq let31 let6) → (Eq let33 let32) → (Eq let35 let34) → (Eq let36 let10) → let38 → (Eq let40 let28) → (Eq let42 let41) → (Eq let44 let43) → (Eq let59 let59) → (Eq let61 let29) → (Eq let62 let39) → (Eq let55 let64) → (Eq let66 let65) → (Eq let9 let9) → (Eq let68 False) → (Eq let69 let22) → (Eq let72 let70) → (Eq let57 let73) → (Eq let74 let27) → (Eq let75 let71) → (Eq let76 let67) → let77 → (Eq let78 let70) → (Eq let79 True) → let59 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 5)
  let let5 := (binrel% HDiv.hDiv (Int.ofNat 32) let4)
  let let6 := (Neg.neg let5)
  let let7 := (Int.ofNat 1)
  let let8 := (binrel% HDiv.hDiv let7 let4)
  let let9 := (Neg.neg (Rat.ofInt 32))
  let let10 := (binrel% HMul.hMul let9 let8)
  let let11 := (Eq let10 let6)
  let let12 := (Int.ofNat 15)
  let let13 := (binrel% GE.ge skoX let12)
  let let14 := (Rat.ofInt 15)
  let let15 := (binrel% LE.le let14 skoX)
  let let16 := (binrel% HDiv.hDiv let7 (Int.ofNat 20))
  let let17 := (Neg.neg let16)
  let let18 := (Neg.neg let7)
  let let19 := (binrel% HMul.hMul let18 skoY)
  let let20 := (binrel% GE.ge let19 let17)
  let let21 := (binrel% LE.le skoY let16)
  let let22 := (Neg.neg let2)
  let let23 := (binrel% HDiv.hDiv let2 (Rat.ofInt 20))
  let let24 := (binrel% HMul.hMul let18 skoX)
  let let25 := (binrel% HAdd.hAdd let19 let24)
  let let26 := (binrel% HMul.hMul let18 skoZ)
  let let27 := (binrel% HAdd.hAdd let26 let25)
  let let28 := (binrel% GE.ge let27 let5)
  let let29 := (binrel% HAdd.hAdd let6 let25)
  let let30 := (binrel% LE.le skoZ let29)
  let let31 := (binrel% HMul.hMul let2 let6)
  let let32 := (binrel% GE.ge let24 let17)
  let let33 := (binrel% LE.le skoX let16)
  let let34 := (binrel% GE.ge skoZ let12)
  let let35 := (binrel% LE.le let14 skoZ)
  let let36 := (binrel% HDiv.hDiv let9 (Rat.ofInt 5))
  let let37 := (binrel% HMul.hMul skoY let22)
  let let38 := (Eq let37 let19)
  let let39 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let40 := (binrel% LE.le let39 let6)
  let let41 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 37) let4))
  let let42 := (binrel% HAdd.hAdd let6 let22)
  let let43 := (binrel% GE.ge skoY let12)
  let let44 := (binrel% LE.le let14 skoY)
  let let45 := (Not let15)
  let let46 := (Not let44)
  let let47 := (Not let35)
  let let48 := (binrel% LE.le skoX let23)
  let let49 := (Not let48)
  let let50 := (binrel% LE.le skoY let23)
  let let51 := (Not let50)
  let let52 := (binrel% LE.le skoZ let23)
  let let53 := (Not let52)
  let let54 := (binrel% HMul.hMul skoX let22)
  let let55 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let36 let54) let37)
  let let56 := (binrel% LE.le skoZ let55)
  let let57 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let54) let37)
  let let58 := (binrel% LE.le let57 skoZ)
  let let59 := (And let58 (And let56 (And let53 (And let51 (And let49 (And let47 (And let46 let45)))))))
  let let60 := (binrel% HAdd.hAdd let24 let19)
  let let61 := (binrel% HAdd.hAdd let6 let60)
  let let62 := (binrel% HMul.hMul let2 let39)
  let let63 := (binrel% HAdd.hAdd let54 let37)
  let let64 := (binrel% HAdd.hAdd let36 let63)
  let let65 := (binrel% GE.ge let26 let17)
  let let66 := (binrel% LE.le skoZ let16)
  let let67 := (Rat.ofInt 0)
  let let68 := (binrel% LE.le let67 let41)
  let let69 := (binrel% HMul.hMul let22 let2)
  let let70 := (binrel% GE.ge let39 let7)
  let let71 := (binrel% HAdd.hAdd let7 let25)
  let let72 := (binrel% LE.le let71 skoZ)
  let let73 := (binrel% HAdd.hAdd let2 let63)
  let let74 := (binrel% HMul.hMul let22 let39)
  let let75 := (binrel% HAdd.hAdd let2 let60)
  let let76 := (binrel% HAdd.hAdd let39 let27)
  let let77 := (Eq let54 let24)
  let let78 := (binrel% GE.ge let39 let2)
  let let79 := (binrel% LT.lt let22 let1)
  let let80 := (Not let13)
  let let81 := (Not let43)
  let let82 := (Not let34)
  let let83 := (Not let32)
  let let84 := (Not let20)
  let let85 := (Not let65)
  let let86 := (And let70 (And let28 (And let85 (And let84 (And let83 (And let82 (And let81 let80)))))))
  let let87 := (Eq let59 let86)
  let let88 := (Not let28)
  let let89 := (Not let70)
  let let90 := (binrel% HAdd.hAdd let31 let69)
  let let91 := (binrel% HAdd.hAdd let62 let74)
  let let92 := (binrel% LE.le let91 let90)
  let let93 := (binrel% LE.le let74 let69)
  let let94 := (And let79 let78)
  let let95 := (binrel% LE.le let62 let31)
  let let96 := (And let3 let40)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : let11 => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let15 let13) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let22 let22) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let23 let16) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let30 let28) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let31 let6) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let36 let10) => -- THEORY_REWRITE_ARITH
fun lean_r11 : let38 => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let40 let28) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let59 let59) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let61 let29) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let62 let39) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let55 let64) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let66 let65) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let9 let9) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let68 False) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let69 let22) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let72 let70) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let57 let73) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let74 let27) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let75 let71) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let76 let67) => -- THEORY_REWRITE_ARITH
fun lean_r28 : let77 => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let78 let70) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let79 True) => -- EVALUATE
fun lean_a31 : let59 => by
have lean_s0 : (Or let89 (Or let88 False)) :=
  (scope (fun lean_a32 : let70 =>
    (scope (fun lean_a33 : let28 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let28 let40) := by timed Eq.symm lean_r12
      have lean_s2 : let40 := by timed eqResolve lean_a33 lean_s1
      have lean_s3 : let96 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let96 let95) := by arithMulPos [let39, let6, let2], 1
      have lean_s5 : let95 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let79 := by timed trueElim lean_r30
      have lean_s7 : (Eq let70 let78) := by timed Eq.symm lean_r29
      have lean_s8 : let78 := by timed eqResolve lean_a32 lean_s7
      have lean_s9 : let94 := by timed And.intro lean_s6 lean_s8
      have lean_s10 : (Implies let94 let93) := by arithMulNeg [let39, let2, let22], 3
      have lean_s11 : let93 := by timed modusPonens lean_s9 lean_s10
      have lean_s12 : let92 := by sumBounds [lean_s5, lean_s11]
      let lean_s13 := by timed flipCongrArg lean_r17 [HAdd.hAdd]
      have lean_s14 : (Eq let91 let76) := by timed congr lean_s13 lean_r25
      have lean_s15 : (Eq let91 let67) := by timed Eq.trans lean_s14 lean_r27
      let lean_s16 := by timed flipCongrArg lean_s15 [LE.le]
      let lean_s17 := by timed flipCongrArg lean_r7 [HAdd.hAdd]
      have lean_s18 : (Eq let90 let42) := by timed congr lean_s17 lean_r22
      have lean_s19 : (Eq let90 let41) := by timed Eq.trans lean_s18 lean_r13
      have lean_s20 : (Eq let92 let68) := by timed congr lean_s16 lean_s19
      have lean_s21 : (Eq let92 False) := by timed Eq.trans lean_s20 lean_r21
      show False from by timed eqResolve lean_s12 lean_s21
  ))))
have lean_s1 : (Not (And let70 let28)) := by liftOrNToNeg lean_s0
have lean_s2 : (Or let89 let88) := by timed flipNotAnd lean_s1 [let70, let28]
have lean_s3 : (Eq And And) := by timed rfl
have lean_s4 : (Eq let2 let2) := by timed rfl
have lean_s5 : (Eq skoX skoX) := by timed rfl
let lean_s6 := by timed flipCongrArg lean_s5 [HMul.hMul]
have lean_s7 : (Eq let54 let54) := by timed congr lean_s6 lean_r4
have lean_s8 : let77 := by timed Eq.trans lean_s7 lean_r28
have lean_s9 : (Eq skoY skoY) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s11 : (Eq let37 let37) := by timed congr lean_s10 lean_r4
have lean_s12 : let38 := by timed Eq.trans lean_s11 lean_r11
let lean_s13 := by timed congrHAdd lean_s8 lean_s12
have lean_s14 : (Eq let73 let75) := by timed congrHAdd lean_s4 lean_s13
have lean_s15 : (Eq let73 let71) := by timed Eq.trans lean_s14 lean_r26
have lean_s16 : (Eq let57 let71) := by timed Eq.trans lean_r24 lean_s15
let lean_s17 := by timed flipCongrArg lean_s16 [LE.le]
have lean_s18 : (Eq skoZ skoZ) := by timed rfl
have lean_s19 : (Eq let58 let72) := by timed congr lean_s17 lean_s18
have lean_s20 : (Eq let58 let70) := by timed Eq.trans lean_s19 lean_r23
let lean_s21 := by timed congr lean_s3 lean_s20
let lean_s22 := by timed flipCongrArg lean_s18 [LE.le]
let lean_s23 := by timed flipCongrArg lean_r20 [HMul.hMul]
have lean_s24 : (Eq let8 let8) := by timed rfl
have lean_s25 : (Eq let10 let10) := by timed congr lean_s23 lean_s24
have lean_s26 : let11 := by timed Eq.trans lean_s25 lean_r1
have lean_s27 : (Eq let36 let6) := by timed Eq.trans lean_r10 lean_s26
let lean_s28 := by timed congrHAdd lean_s8 lean_s12
have lean_s29 : (Eq let64 let61) := by timed congrHAdd lean_s27 lean_s28
have lean_s30 : (Eq let64 let29) := by timed Eq.trans lean_s29 lean_r16
have lean_s31 : (Eq let55 let29) := by timed Eq.trans lean_r18 lean_s30
have lean_s32 : (Eq let56 let30) := by timed congr lean_s22 lean_s31
have lean_s33 : (Eq let56 let28) := by timed Eq.trans lean_s32 lean_r6
let lean_s34 := by timed congr lean_s3 lean_s33
let lean_s35 := by timed flipCongrArg lean_s18 [LE.le]
have lean_s36 : (Eq let52 let66) := by timed congr lean_s35 lean_r5
have lean_s37 : (Eq let52 let65) := by timed Eq.trans lean_s36 lean_r19
have lean_s38 : (Eq let53 let85) := by timed flipCongrArg lean_s37 [Not]
let lean_s39 := by timed congr lean_s3 lean_s38
let lean_s40 := by timed flipCongrArg lean_s9 [LE.le]
have lean_s41 : (Eq let50 let21) := by timed congr lean_s40 lean_r5
have lean_s42 : (Eq let50 let20) := by timed Eq.trans lean_s41 lean_r3
have lean_s43 : (Eq let51 let84) := by timed flipCongrArg lean_s42 [Not]
let lean_s44 := by timed congr lean_s3 lean_s43
let lean_s45 := by timed flipCongrArg lean_s5 [LE.le]
have lean_s46 : (Eq let48 let33) := by timed congr lean_s45 lean_r5
have lean_s47 : (Eq let48 let32) := by timed Eq.trans lean_s46 lean_r8
have lean_s48 : (Eq let49 let83) := by timed flipCongrArg lean_s47 [Not]
let lean_s49 := by timed congr lean_s3 lean_s48
have lean_s50 : (Eq let47 let82) := by timed flipCongrArg lean_r9 [Not]
let lean_s51 := by timed congr lean_s3 lean_s50
have lean_s52 : (Eq let46 let81) := by timed flipCongrArg lean_r14 [Not]
let lean_s53 := by timed congr lean_s3 lean_s52
have lean_s54 : (Eq let45 let80) := by timed flipCongrArg lean_r2 [Not]
let lean_s55 := by timed congr lean_s53 lean_s54
let lean_s56 := by timed congr lean_s51 lean_s55
let lean_s57 := by timed congr lean_s49 lean_s56
let lean_s58 := by timed congr lean_s44 lean_s57
let lean_s59 := by timed congr lean_s39 lean_s58
let lean_s60 := by timed congr lean_s34 lean_s59
have lean_s61 : let87 := by timed congr lean_s21 lean_s60
have lean_s62 : let87 := by timed Eq.trans lean_r15 lean_s61
have lean_s63 : let86 := by timed eqResolve lean_a31 lean_s62
have lean_s64 : let28 := by andElim lean_s63, 1
let lean_s65 := by R2 lean_s2, lean_s64, let28, [(- 1), 0]
have lean_s66 : let70 := by andElim lean_s63, 0
exact (show False from by R2 lean_s65, lean_s66, let70, [0, 0])


