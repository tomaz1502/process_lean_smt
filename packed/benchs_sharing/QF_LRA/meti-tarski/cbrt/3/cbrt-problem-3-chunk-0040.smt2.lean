open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let6 := (binrel% GE.ge let5 let4)
  let let7 := (binrel% GE.ge let5 let2)
  let let8 := (binrel% HMul.hMul let2 let5)
  let let9 := (Neg.neg let2)
  let let10 := (binrel% HMul.hMul let9 let2)
  let let11 := (Int.ofNat 5)
  let let12 := (binrel% HDiv.hDiv (Int.ofNat 32) let11)
  let let13 := (Neg.neg let4)
  let let14 := (binrel% HMul.hMul let13 skoX)
  let let15 := (binrel% HMul.hMul let13 skoY)
  let let16 := (binrel% HAdd.hAdd let15 let14)
  let let17 := (binrel% HMul.hMul let13 skoZ)
  let let18 := (binrel% HAdd.hAdd let17 let16)
  let let19 := (binrel% GE.ge let18 let12)
  let let20 := (Neg.neg let12)
  let let21 := (binrel% LE.le let5 let20)
  let let22 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 37) let11))
  let let23 := (binrel% HAdd.hAdd let20 let9)
  let let24 := (binrel% HMul.hMul skoY let9)
  let let25 := (binrel% HMul.hMul skoX let9)
  let let26 := (binrel% HAdd.hAdd let25 let24)
  let let27 := (binrel% HAdd.hAdd let2 let26)
  let let28 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let25) let24)
  let let29 := (binrel% LT.lt let9 let1)
  let let30 := (binrel% HAdd.hAdd let4 let16)
  let let31 := (binrel% HAdd.hAdd let14 let15)
  let let32 := (binrel% HAdd.hAdd let2 let31)
  let let33 := (Rat.ofInt 0)
  let let34 := (binrel% HAdd.hAdd let5 let18)
  let let35 := (binrel% GE.ge let14 let1)
  let let36 := (binrel% LE.le skoX let33)
  let let37 := (binrel% LE.le let33 let22)
  let let38 := (binrel% GE.ge let17 let1)
  let let39 := (binrel% LE.le skoZ let33)
  let let40 := (Neg.neg (Rat.ofInt 32))
  let let41 := (binrel% HDiv.hDiv let40 (Rat.ofInt 5))
  let let42 := (binrel% HAdd.hAdd let41 let26)
  let let43 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let41 let25) let24)
  let let44 := (binrel% HAdd.hAdd let20 let16)
  let let45 := (binrel% LE.le skoZ let44)
  let let46 := (Not let36)
  let let47 := (binrel% LE.le skoY let33)
  let let48 := (Not let47)
  let let49 := (Not let39)
  let let50 := (binrel% LE.le skoZ let43)
  let let51 := (binrel% LE.le let28 skoZ)
  let let52 := (And let51 (And let50 (And let49 (And let48 let46))))
  let let53 := (binrel% LE.le let30 skoZ)
  let let54 := (Eq let24 let15)
  let let55 := (binrel% HMul.hMul let9 let5)
  let let56 := (binrel% GE.ge let15 let1)
  let let57 := (binrel% HAdd.hAdd let20 let31)
  let let58 := (binrel% HDiv.hDiv let4 let11)
  let let59 := (binrel% HMul.hMul let40 let58)
  let let60 := (Eq let59 let20)
  let let61 := (binrel% HMul.hMul let2 let20)
  let let62 := (Eq let25 let14)
  let let63 := (Not let35)
  let let64 := (Not let56)
  let let65 := (Not let38)
  let let66 := (And let6 (And let19 (And let65 (And let64 let63))))
  let let67 := (Eq let52 let66)
  let let68 := (Not let19)
  let let69 := (Not let6)
  let let70 := (binrel% HAdd.hAdd let61 let10)
  let let71 := (binrel% HAdd.hAdd let8 let55)
  let let72 := (binrel% LE.le let71 let70)
  let let73 := (binrel% LE.le let55 let10)
  let let74 := (And let29 let7)
  let let75 := (binrel% LE.le let8 let61)
  let let76 := (And let3 let21)
(Eq let3 True) → (Eq let7 let6) → (Eq let8 let5) → (Eq let10 let9) → (Eq let21 let19) → (Eq let23 let22) → (Eq let28 let27) → (Eq let29 True) → (Eq let32 let30) → (Eq let34 let33) → (Eq let36 let35) → (Eq let37 False) → (Eq let39 let38) → (Eq let43 let42) → (Eq let45 let19) → (Eq let52 let52) → (Eq let40 let40) → (Eq let53 let6) → let54 → (Eq let9 let9) → (Eq let55 let18) → (Eq let47 let56) → (Eq let57 let44) → let60 → (Eq let61 let20) → let62 → (Eq let41 let59) → let52 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let6 := (binrel% GE.ge let5 let4)
  let let7 := (binrel% GE.ge let5 let2)
  let let8 := (binrel% HMul.hMul let2 let5)
  let let9 := (Neg.neg let2)
  let let10 := (binrel% HMul.hMul let9 let2)
  let let11 := (Int.ofNat 5)
  let let12 := (binrel% HDiv.hDiv (Int.ofNat 32) let11)
  let let13 := (Neg.neg let4)
  let let14 := (binrel% HMul.hMul let13 skoX)
  let let15 := (binrel% HMul.hMul let13 skoY)
  let let16 := (binrel% HAdd.hAdd let15 let14)
  let let17 := (binrel% HMul.hMul let13 skoZ)
  let let18 := (binrel% HAdd.hAdd let17 let16)
  let let19 := (binrel% GE.ge let18 let12)
  let let20 := (Neg.neg let12)
  let let21 := (binrel% LE.le let5 let20)
  let let22 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 37) let11))
  let let23 := (binrel% HAdd.hAdd let20 let9)
  let let24 := (binrel% HMul.hMul skoY let9)
  let let25 := (binrel% HMul.hMul skoX let9)
  let let26 := (binrel% HAdd.hAdd let25 let24)
  let let27 := (binrel% HAdd.hAdd let2 let26)
  let let28 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let2 let25) let24)
  let let29 := (binrel% LT.lt let9 let1)
  let let30 := (binrel% HAdd.hAdd let4 let16)
  let let31 := (binrel% HAdd.hAdd let14 let15)
  let let32 := (binrel% HAdd.hAdd let2 let31)
  let let33 := (Rat.ofInt 0)
  let let34 := (binrel% HAdd.hAdd let5 let18)
  let let35 := (binrel% GE.ge let14 let1)
  let let36 := (binrel% LE.le skoX let33)
  let let37 := (binrel% LE.le let33 let22)
  let let38 := (binrel% GE.ge let17 let1)
  let let39 := (binrel% LE.le skoZ let33)
  let let40 := (Neg.neg (Rat.ofInt 32))
  let let41 := (binrel% HDiv.hDiv let40 (Rat.ofInt 5))
  let let42 := (binrel% HAdd.hAdd let41 let26)
  let let43 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let41 let25) let24)
  let let44 := (binrel% HAdd.hAdd let20 let16)
  let let45 := (binrel% LE.le skoZ let44)
  let let46 := (Not let36)
  let let47 := (binrel% LE.le skoY let33)
  let let48 := (Not let47)
  let let49 := (Not let39)
  let let50 := (binrel% LE.le skoZ let43)
  let let51 := (binrel% LE.le let28 skoZ)
  let let52 := (And let51 (And let50 (And let49 (And let48 let46))))
  let let53 := (binrel% LE.le let30 skoZ)
  let let54 := (Eq let24 let15)
  let let55 := (binrel% HMul.hMul let9 let5)
  let let56 := (binrel% GE.ge let15 let1)
  let let57 := (binrel% HAdd.hAdd let20 let31)
  let let58 := (binrel% HDiv.hDiv let4 let11)
  let let59 := (binrel% HMul.hMul let40 let58)
  let let60 := (Eq let59 let20)
  let let61 := (binrel% HMul.hMul let2 let20)
  let let62 := (Eq let25 let14)
  let let63 := (Not let35)
  let let64 := (Not let56)
  let let65 := (Not let38)
  let let66 := (And let6 (And let19 (And let65 (And let64 let63))))
  let let67 := (Eq let52 let66)
  let let68 := (Not let19)
  let let69 := (Not let6)
  let let70 := (binrel% HAdd.hAdd let61 let10)
  let let71 := (binrel% HAdd.hAdd let8 let55)
  let let72 := (binrel% LE.le let71 let70)
  let let73 := (binrel% LE.le let55 let10)
  let let74 := (And let29 let7)
  let let75 := (binrel% LE.le let8 let61)
  let let76 := (And let3 let21)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let8 let5) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let21 let19) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let29 True) => -- EVALUATE
fun lean_r8 : (Eq let32 let30) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let37 False) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let43 let42) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let45 let19) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let52 let52) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let40 let40) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let53 let6) => -- THEORY_REWRITE_ARITH
fun lean_r18 : let54 => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let9 let9) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let55 let18) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let47 let56) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let57 let44) => -- THEORY_REWRITE_ARITH
fun lean_r23 : let60 => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let61 let20) => -- THEORY_REWRITE_ARITH
fun lean_r25 : let62 => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let41 let59) => -- THEORY_REWRITE_ARITH
fun lean_a27 : let52 => by
have lean_s0 : (Or let69 (Or let68 False)) :=
  (scope (fun lean_a28 : let6 =>
    (scope (fun lean_a29 : let19 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let19 let21) := by timed Eq.symm lean_r4
      have lean_s2 : let21 := by timed eqResolve lean_a29 lean_s1
      have lean_s3 : let76 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let76 let75) := by arithMulPos [let5, let20, let2], 1
      have lean_s5 : let75 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let29 := by timed trueElim lean_r7
      have lean_s7 : (Eq let6 let7) := by timed Eq.symm lean_r1
      have lean_s8 : let7 := by timed eqResolve lean_a28 lean_s7
      have lean_s9 : let74 := by timed And.intro lean_s6 lean_s8
      have lean_s10 : (Implies let74 let73) := by arithMulNeg [let5, let2, let9], 3
      have lean_s11 : let73 := by timed modusPonens lean_s9 lean_s10
      have lean_s12 : let72 := by sumBounds [lean_s5, lean_s11]
      let lean_s13 := by timed flipCongrArg lean_r2 [HAdd.hAdd]
      have lean_s14 : (Eq let71 let34) := by timed congr lean_s13 lean_r20
      have lean_s15 : (Eq let71 let33) := by timed Eq.trans lean_s14 lean_r9
      let lean_s16 := by timed flipCongrArg lean_s15 [LE.le]
      let lean_s17 := by timed flipCongrArg lean_r24 [HAdd.hAdd]
      have lean_s18 : (Eq let70 let23) := by timed congr lean_s17 lean_r3
      have lean_s19 : (Eq let70 let22) := by timed Eq.trans lean_s18 lean_r5
      have lean_s20 : (Eq let72 let37) := by timed congr lean_s16 lean_s19
      have lean_s21 : (Eq let72 False) := by timed Eq.trans lean_s20 lean_r11
      show False from by timed eqResolve lean_s12 lean_s21
  ))))
have lean_s1 : (Not (And let6 let19)) := by liftOrNToNeg lean_s0
have lean_s2 : (Or let69 let68) := by timed flipNotAnd lean_s1 [let6, let19]
have lean_s3 : (Eq And And) := by timed rfl
have lean_s4 : (Eq let2 let2) := by timed rfl
have lean_s5 : (Eq skoX skoX) := by timed rfl
let lean_s6 := by timed flipCongrArg lean_s5 [HMul.hMul]
have lean_s7 : (Eq let25 let25) := by timed congr lean_s6 lean_r19
have lean_s8 : let62 := by timed Eq.trans lean_s7 lean_r25
have lean_s9 : (Eq skoY skoY) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s11 : (Eq let24 let24) := by timed congr lean_s10 lean_r19
have lean_s12 : let54 := by timed Eq.trans lean_s11 lean_r18
let lean_s13 := by timed congrHAdd lean_s8 lean_s12
have lean_s14 : (Eq let27 let32) := by timed congrHAdd lean_s4 lean_s13
have lean_s15 : (Eq let27 let30) := by timed Eq.trans lean_s14 lean_r8
have lean_s16 : (Eq let28 let30) := by timed Eq.trans lean_r6 lean_s15
let lean_s17 := by timed flipCongrArg lean_s16 [LE.le]
have lean_s18 : (Eq skoZ skoZ) := by timed rfl
have lean_s19 : (Eq let51 let53) := by timed congr lean_s17 lean_s18
have lean_s20 : (Eq let51 let6) := by timed Eq.trans lean_s19 lean_r17
let lean_s21 := by timed congr lean_s3 lean_s20
let lean_s22 := by timed flipCongrArg lean_s18 [LE.le]
let lean_s23 := by timed flipCongrArg lean_r16 [HMul.hMul]
have lean_s24 : (Eq let58 let58) := by timed rfl
have lean_s25 : (Eq let59 let59) := by timed congr lean_s23 lean_s24
have lean_s26 : let60 := by timed Eq.trans lean_s25 lean_r23
have lean_s27 : (Eq let41 let20) := by timed Eq.trans lean_r26 lean_s26
let lean_s28 := by timed congrHAdd lean_s8 lean_s12
have lean_s29 : (Eq let42 let57) := by timed congrHAdd lean_s27 lean_s28
have lean_s30 : (Eq let42 let44) := by timed Eq.trans lean_s29 lean_r22
have lean_s31 : (Eq let43 let44) := by timed Eq.trans lean_r13 lean_s30
have lean_s32 : (Eq let50 let45) := by timed congr lean_s22 lean_s31
have lean_s33 : (Eq let50 let19) := by timed Eq.trans lean_s32 lean_r14
let lean_s34 := by timed congr lean_s3 lean_s33
have lean_s35 : (Eq let49 let65) := by timed flipCongrArg lean_r12 [Not]
let lean_s36 := by timed congr lean_s3 lean_s35
have lean_s37 : (Eq let48 let64) := by timed flipCongrArg lean_r21 [Not]
let lean_s38 := by timed congr lean_s3 lean_s37
have lean_s39 : (Eq let46 let63) := by timed flipCongrArg lean_r10 [Not]
let lean_s40 := by timed congr lean_s38 lean_s39
let lean_s41 := by timed congr lean_s36 lean_s40
let lean_s42 := by timed congr lean_s34 lean_s41
have lean_s43 : let67 := by timed congr lean_s21 lean_s42
have lean_s44 : let67 := by timed Eq.trans lean_r15 lean_s43
have lean_s45 : let66 := by timed eqResolve lean_a27 lean_s44
have lean_s46 : let19 := by andElim lean_s45, 1
let lean_s47 := by R2 lean_s2, lean_s46, let19, [(- 1), 0]
have lean_s48 : let6 := by andElim lean_s45, 0
exact (show False from by R2 lean_s47, lean_s48, let6, [0, 0])


