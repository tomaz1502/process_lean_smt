open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% LE.le skoX let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoX let4)
  let let8 := (binrel% LE.le skoY let4)
  let let9 := (Not let8)
  let let10 := (binrel% GT.gt skoY let4)
  let let11 := (Neg.neg let2)
  let let12 := (binrel% LT.lt let11 let1)
  let let13 := (binrel% HMul.hMul let11 let4)
  let let14 := (binrel% HMul.hMul let2 let4)
  let let15 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let13 let13)))
  let let16 := (binrel% HMul.hMul let11 skoZ)
  let let17 := (binrel% HMul.hMul let11 skoY)
  let let18 := (binrel% HMul.hMul let11 skoX)
  let let19 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let20 := (binrel% HMul.hMul let2 let19)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let17 let16)))
  let let22 := (binrel% GE.ge let21 let15)
  let let23 := (Not let22)
  let let24 := (binrel% LT.lt let21 let15)
  let let25 := (Neg.neg (Int.ofNat 1))
  let let26 := (binrel% HMul.hMul let25 skoX)
  let let27 := (binrel% HMul.hMul let25 skoY)
  let let28 := (binrel% GE.ge let19 let1)
  let let29 := (Not let28)
  let let30 := (Not let29)
  let let31 := (Eq let28 let30)
  let let32 := (Eq let30 let28)
  let let33 := (binrel% LE.le skoZ let4)
  let let34 := (Not let33)
  let let35 := (binrel% HMul.hMul skoY let11)
  let let36 := (binrel% HMul.hMul skoX let11)
  let let37 := (binrel% HAdd.hAdd let36 let35)
  let let38 := (binrel% LE.le let37 skoZ)
  let let39 := (Not let38)
  let let40 := (And let39 (And let34 (And let9 let6)))
  let let41 := (Eq let36 let26)
  let let42 := (binrel% HMul.hMul let25 skoZ)
  let let43 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let27 let42)))
  let let44 := (binrel% GT.gt skoZ let4)
  let let45 := (Eq let28 let28)
  let let46 := (Eq let35 let27)
  let let47 := (binrel% GE.ge let42 let1)
  let let48 := (binrel% HAdd.hAdd let27 let26)
  let let49 := (binrel% HAdd.hAdd let26 let27)
  let let50 := (binrel% GE.ge let27 let1)
  let let51 := (binrel% GE.ge let19 let4)
  let let52 := (binrel% GE.ge let26 let1)
  let let53 := (Not let52)
  let let54 := (Not let53)
  let let55 := (Eq let52 let54)
  let let56 := (Eq let54 let52)
  let let57 := (Not let51)
  let let58 := (binrel% LT.lt let19 let4)
  let let59 := (Eq let50 let50)
  let let60 := (Not let50)
  let let61 := (Not let60)
  let let62 := (Eq let61 let50)
  let let63 := (binrel% LE.le let48 skoZ)
  let let64 := (Eq let50 let61)
  let let65 := (Eq let47 let47)
  let let66 := (Not let47)
  let let67 := (Not let66)
  let let68 := (Eq let67 let47)
  let let69 := (Not True)
  let let70 := (Eq let52 let52)
  let let71 := (Eq let47 let67)
  let let72 := (binrel% GE.ge let4 let4)
  let let73 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let4 let4)))
  let let74 := (And let29 (And let66 (And let60 let53)))
  let let75 := (Eq let40 let74)
  let let76 := (Or let47 (Or let50 (Or let52 let28)))
  let let77 := (Or let67 (Or let61 (Or let54 let30)))
  let let78 := (Not let58)
  let let79 := (binrel% LT.lt let16 let13)
  let let80 := (And let12 let44)
  let let81 := (binrel% LT.lt let17 let13)
  let let82 := (And let12 let10)
  let let83 := (binrel% LT.lt let18 let13)
  let let84 := (And let12 let7)
  let let85 := (binrel% LT.lt let20 let14)
  let let86 := (And let3 let58)
(Eq let3 True) → (Eq let7 let6) → (Eq let10 let9) → (Eq let12 True) → (Eq let24 let23) → (Eq let20 let19) → (Eq let18 let26) → (Eq let17 let27) → (Eq let32 let31) → (Eq let40 let40) → let41 → (Eq let43 let4) → (Eq let44 let34) → (Eq let11 let11) → let32 → (Eq let45 True) → let46 → (Eq let33 let47) → (Eq let49 let48) → (Eq let8 let50) → (Eq let51 let28) → (Eq let56 let55) → (Eq let5 let52) → (Eq let58 let57) → (Eq let59 True) → let62 → (Eq let16 let42) → (Eq let63 let28) → (Eq let62 let64) → (Eq let65 True) → let68 → (Eq let69 False) → (Eq let70 True) → (Eq let13 let4) → (Eq let68 let71) → let56 → (Eq let14 let4) → (Eq let72 True) → (Eq let73 let4) → let40 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (binrel% LE.le skoX let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoX let4)
  let let8 := (binrel% LE.le skoY let4)
  let let9 := (Not let8)
  let let10 := (binrel% GT.gt skoY let4)
  let let11 := (Neg.neg let2)
  let let12 := (binrel% LT.lt let11 let1)
  let let13 := (binrel% HMul.hMul let11 let4)
  let let14 := (binrel% HMul.hMul let2 let4)
  let let15 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let13 let13)))
  let let16 := (binrel% HMul.hMul let11 skoZ)
  let let17 := (binrel% HMul.hMul let11 skoY)
  let let18 := (binrel% HMul.hMul let11 skoX)
  let let19 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY skoX))
  let let20 := (binrel% HMul.hMul let2 let19)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let17 let16)))
  let let22 := (binrel% GE.ge let21 let15)
  let let23 := (Not let22)
  let let24 := (binrel% LT.lt let21 let15)
  let let25 := (Neg.neg (Int.ofNat 1))
  let let26 := (binrel% HMul.hMul let25 skoX)
  let let27 := (binrel% HMul.hMul let25 skoY)
  let let28 := (binrel% GE.ge let19 let1)
  let let29 := (Not let28)
  let let30 := (Not let29)
  let let31 := (Eq let28 let30)
  let let32 := (Eq let30 let28)
  let let33 := (binrel% LE.le skoZ let4)
  let let34 := (Not let33)
  let let35 := (binrel% HMul.hMul skoY let11)
  let let36 := (binrel% HMul.hMul skoX let11)
  let let37 := (binrel% HAdd.hAdd let36 let35)
  let let38 := (binrel% LE.le let37 skoZ)
  let let39 := (Not let38)
  let let40 := (And let39 (And let34 (And let9 let6)))
  let let41 := (Eq let36 let26)
  let let42 := (binrel% HMul.hMul let25 skoZ)
  let let43 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let27 let42)))
  let let44 := (binrel% GT.gt skoZ let4)
  let let45 := (Eq let28 let28)
  let let46 := (Eq let35 let27)
  let let47 := (binrel% GE.ge let42 let1)
  let let48 := (binrel% HAdd.hAdd let27 let26)
  let let49 := (binrel% HAdd.hAdd let26 let27)
  let let50 := (binrel% GE.ge let27 let1)
  let let51 := (binrel% GE.ge let19 let4)
  let let52 := (binrel% GE.ge let26 let1)
  let let53 := (Not let52)
  let let54 := (Not let53)
  let let55 := (Eq let52 let54)
  let let56 := (Eq let54 let52)
  let let57 := (Not let51)
  let let58 := (binrel% LT.lt let19 let4)
  let let59 := (Eq let50 let50)
  let let60 := (Not let50)
  let let61 := (Not let60)
  let let62 := (Eq let61 let50)
  let let63 := (binrel% LE.le let48 skoZ)
  let let64 := (Eq let50 let61)
  let let65 := (Eq let47 let47)
  let let66 := (Not let47)
  let let67 := (Not let66)
  let let68 := (Eq let67 let47)
  let let69 := (Not True)
  let let70 := (Eq let52 let52)
  let let71 := (Eq let47 let67)
  let let72 := (binrel% GE.ge let4 let4)
  let let73 := (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let4 (binrel% HAdd.hAdd let4 let4)))
  let let74 := (And let29 (And let66 (And let60 let53)))
  let let75 := (Eq let40 let74)
  let let76 := (Or let47 (Or let50 (Or let52 let28)))
  let let77 := (Or let67 (Or let61 (Or let54 let30)))
  let let78 := (Not let58)
  let let79 := (binrel% LT.lt let16 let13)
  let let80 := (And let12 let44)
  let let81 := (binrel% LT.lt let17 let13)
  let let82 := (And let12 let10)
  let let83 := (binrel% LT.lt let18 let13)
  let let84 := (And let12 let7)
  let let85 := (binrel% LT.lt let20 let14)
  let let86 := (And let3 let58)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let12 True) => -- EVALUATE
fun lean_r4 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let18 let26) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let17 let27) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let32 let31) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let40 let40) => -- THEORY_REWRITE_BOOL
fun lean_r10 : let41 => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let43 let4) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let44 let34) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let11 let11) => -- THEORY_REWRITE_ARITH
fun lean_r14 : let32 => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let45 True) => -- THEORY_REWRITE_BOOL
fun lean_r16 : let46 => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let33 let47) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let49 let48) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let8 let50) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let51 let28) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let56 let55) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let5 let52) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let58 let57) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let59 True) => -- THEORY_REWRITE_BOOL
fun lean_r25 : let62 => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let16 let42) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let63 let28) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let62 let64) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let65 True) => -- THEORY_REWRITE_BOOL
fun lean_r30 : let68 => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let69 False) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let70 True) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let13 let4) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let68 let71) => -- THEORY_REWRITE_BOOL
fun lean_r35 : let56 => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let14 let4) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let72 True) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let73 let4) => -- THEORY_REWRITE_ARITH
fun lean_a39 : let40 => by
have lean_s0 : (Or let67 (Or let61 (Or let54 (Or let30 False)))) :=
  (scope (fun lean_a40 : let66 =>
    (scope (fun lean_a41 : let60 =>
      (scope (fun lean_a42 : let53 =>
        (scope (fun lean_a43 : let29 =>
          have lean_s0 : (Eq let57 let29) := by timed flipCongrArg lean_r20 [Not]
          have lean_s1 : (Eq let58 let29) := by timed Eq.trans lean_r23 lean_s0
          have lean_s2 : (Eq let29 let58) := by timed Eq.symm lean_s1
          have lean_s3 : let58 := by timed eqResolve lean_a43 lean_s2
          have lean_s4 : (Or let78 False) :=
            (scope (fun lean_a44 : let58 =>
              have lean_s4 : let3 := by timed trueElim lean_r0
              have lean_s5 : let86 := by timed And.intro lean_s4 lean_a44
              have lean_s6 : (Implies let86 let85) := by arithMulPos [let19, let4, let2], 0
              have lean_s7 : let85 := by timed modusPonens lean_s5 lean_s6
              have lean_s8 : let12 := by timed trueElim lean_r3
              have lean_s9 : (Eq let6 let53) := by timed flipCongrArg lean_r22 [Not]
              have lean_s10 : (Eq let7 let53) := by timed Eq.trans lean_r1 lean_s9
              have lean_s11 : (Eq let53 let7) := by timed Eq.symm lean_s10
              have lean_s12 : let7 := by timed eqResolve lean_a42 lean_s11
              have lean_s13 : let84 := by timed And.intro lean_s8 lean_s12
              have lean_s14 : (Implies let84 let83) := by arithMulNeg [skoX, let4, let11], 2
              have lean_s15 : let83 := by timed modusPonens lean_s13 lean_s14
              have lean_s16 : (Eq let9 let60) := by timed flipCongrArg lean_r19 [Not]
              have lean_s17 : (Eq let10 let60) := by timed Eq.trans lean_r2 lean_s16
              have lean_s18 : (Eq let60 let10) := by timed Eq.symm lean_s17
              have lean_s19 : let10 := by timed eqResolve lean_a41 lean_s18
              have lean_s20 : let82 := by timed And.intro lean_s8 lean_s19
              have lean_s21 : (Implies let82 let81) := by arithMulNeg [skoY, let4, let11], 2
              have lean_s22 : let81 := by timed modusPonens lean_s20 lean_s21
              have lean_s23 : (Eq let34 let66) := by timed flipCongrArg lean_r17 [Not]
              have lean_s24 : (Eq let44 let66) := by timed Eq.trans lean_r12 lean_s23
              have lean_s25 : (Eq let66 let44) := by timed Eq.symm lean_s24
              have lean_s26 : let44 := by timed eqResolve lean_a40 lean_s25
              have lean_s27 : let80 := by timed And.intro lean_s8 lean_s26
              have lean_s28 : (Implies let80 let79) := by arithMulNeg [skoZ, let4, let11], 2
              have lean_s29 : let79 := by timed modusPonens lean_s27 lean_s28
              have lean_s30 : let24 := by sumBounds [lean_s7, lean_s15, lean_s22, lean_s29]
              let lean_s31 := by timed congrHAdd lean_r7 lean_r26
              let lean_s32 := by timed congrHAdd lean_r6 lean_s31
              have lean_s33 : (Eq let21 let43) := by timed congrHAdd lean_r5 lean_s32
              have lean_s34 : (Eq let21 let4) := by timed Eq.trans lean_s33 lean_r11
              let lean_s35 := by timed flipCongrArg lean_s34 [GE.ge]
              let lean_s36 := by timed congrHAdd lean_r33 lean_r33
              let lean_s37 := by timed congrHAdd lean_r33 lean_s36
              have lean_s38 : (Eq let15 let73) := by timed congrHAdd lean_r36 lean_s37
              have lean_s39 : (Eq let15 let4) := by timed Eq.trans lean_s38 lean_r38
              have lean_s40 : (Eq let22 let72) := by timed congr lean_s35 lean_s39
              have lean_s41 : (Eq let22 True) := by timed Eq.trans lean_s40 lean_r37
              have lean_s42 : (Eq let23 let69) := by timed flipCongrArg lean_s41 [Not]
              have lean_s43 : (Eq let23 False) := by timed Eq.trans lean_s42 lean_r31
              have lean_s44 : (Eq let24 False) := by timed Eq.trans lean_r4 lean_s43
              show False from by timed eqResolve lean_s30 lean_s44
            ))
          have lean_s5 : let78 := by liftOrNToNeg lean_s4
          have lean_s6 : (Eq let78 let30) := by timed flipCongrArg lean_s1 [Not]
          have lean_s7 : (Eq let78 let28) := by timed Eq.trans lean_s6 lean_r14
          have lean_s8 : (Eq let28 let51) := by timed Eq.symm lean_r20
          have lean_s9 : (Eq let78 let51) := by timed Eq.trans lean_s7 lean_s8
          have lean_s10 : let51 := by timed eqResolve lean_s5 lean_s9
          have lean_s11 : (Eq let28 let78) := by timed Eq.symm lean_s7
          have lean_s12 : (Eq let51 let78) := by timed Eq.trans lean_r20 lean_s11
          have lean_s13 : let78 := by timed eqResolve lean_s10 lean_s12
          show False from by timed contradiction lean_s3 lean_s13
  ))))))))
have lean_s1 : (Not (And let66 (And let60 (And let53 let29)))) := by liftOrNToNeg lean_s0
have lean_s2 : let77 := by timed flipNotAnd lean_s1 [let66, let60, let53, let29]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let65 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let71 let65) := by timed congr lean_s5 lean_r30
have lean_s7 : (Eq let71 True) := by timed Eq.trans lean_s6 lean_r29
have lean_s8 : (Eq let68 True) := by timed Eq.trans lean_r34 lean_s7
have lean_s9 : let68 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let59 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let64 let59) := by timed congr lean_s12 lean_r25
have lean_s14 : (Eq let64 True) := by timed Eq.trans lean_s13 lean_r24
have lean_s15 : (Eq let62 True) := by timed Eq.trans lean_r28 lean_s14
have lean_s16 : let62 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let70 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let55 let70) := by timed congr lean_s19 lean_r35
have lean_s21 : (Eq let55 True) := by timed Eq.trans lean_s20 lean_r32
have lean_s22 : (Eq let56 True) := by timed Eq.trans lean_r21 lean_s21
have lean_s23 : let56 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : let45 := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq let31 let45) := by timed congr lean_s26 lean_r14
have lean_s28 : (Eq let31 True) := by timed Eq.trans lean_s27 lean_r15
have lean_s29 : (Eq let32 True) := by timed Eq.trans lean_r8 lean_s28
have lean_s30 : let32 := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s24 lean_s30
let lean_s32 := by timed congr lean_s17 lean_s31
have lean_s33 : (Eq let77 let76) := by timed congr lean_s10 lean_s32
have lean_s34 : let76 := by timed eqResolve lean_s2 lean_s33
have lean_s35 : (Or let28 (Or let47 (Or let50 let52))) := by permutateOr lean_s34, [3, 0, 1, 2], (- 1)
have lean_s36 : (Eq And And) := by timed rfl
have lean_s37 : (Eq skoX skoX) := by timed rfl
let lean_s38 := by timed flipCongrArg lean_s37 [HMul.hMul]
have lean_s39 : (Eq let36 let36) := by timed congr lean_s38 lean_r13
have lean_s40 : let41 := by timed Eq.trans lean_s39 lean_r10
let lean_s41 := by timed flipCongrArg lean_s40 [HAdd.hAdd]
have lean_s42 : (Eq skoY skoY) := by timed rfl
let lean_s43 := by timed flipCongrArg lean_s42 [HMul.hMul]
have lean_s44 : (Eq let35 let35) := by timed congr lean_s43 lean_r13
have lean_s45 : let46 := by timed Eq.trans lean_s44 lean_r16
have lean_s46 : (Eq let37 let49) := by timed congr lean_s41 lean_s45
have lean_s47 : (Eq let37 let48) := by timed Eq.trans lean_s46 lean_r18
let lean_s48 := by timed flipCongrArg lean_s47 [LE.le]
have lean_s49 : (Eq skoZ skoZ) := by timed rfl
have lean_s50 : (Eq let38 let63) := by timed congr lean_s48 lean_s49
have lean_s51 : (Eq let38 let28) := by timed Eq.trans lean_s50 lean_r27
have lean_s52 : (Eq let39 let29) := by timed flipCongrArg lean_s51 [Not]
let lean_s53 := by timed congr lean_s36 lean_s52
have lean_s54 : (Eq let34 let66) := by timed flipCongrArg lean_r17 [Not]
let lean_s55 := by timed congr lean_s36 lean_s54
have lean_s56 : (Eq let9 let60) := by timed flipCongrArg lean_r19 [Not]
let lean_s57 := by timed congr lean_s36 lean_s56
have lean_s58 : (Eq let6 let53) := by timed flipCongrArg lean_r22 [Not]
let lean_s59 := by timed congr lean_s57 lean_s58
let lean_s60 := by timed congr lean_s55 lean_s59
have lean_s61 : let75 := by timed congr lean_s53 lean_s60
have lean_s62 : let75 := by timed Eq.trans lean_r9 lean_s61
have lean_s63 : let74 := by timed eqResolve lean_a39 lean_s62
have lean_s64 : let53 := by andElim lean_s63, 3
let lean_s65 := by R1 lean_s35, lean_s64, let52, [(- 1), 0]
have lean_s66 : let60 := by andElim lean_s63, 2
let lean_s67 := by R1 lean_s65, lean_s66, let50, [(- 1), 0]
have lean_s68 : let66 := by andElim lean_s63, 1
let lean_s69 := by R1 lean_s67, lean_s68, let47, [(- 1), 0]
have lean_s70 : let29 := by andElim lean_s63, 0
exact (show False from by R1 lean_s69, lean_s70, let28, [0, 0])


