open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% HAdd.hAdd let1 let1)
  let let3 := (Rat.ofInt 1)
  let let4 := (Neg.neg let3)
  let let5 := (binrel% HMul.hMul let4 let1)
  let let6 := (binrel% HMul.hMul let3 let1)
  let let7 := (binrel% HAdd.hAdd let6 let5)
  let let8 := (binrel% HMul.hMul let4 skoX)
  let let9 := (binrel% HMul.hMul let3 skoX)
  let let10 := (binrel% HAdd.hAdd let9 let8)
  let let11 := (binrel% GE.ge let10 let7)
  let let12 := (Not let11)
  let let13 := (binrel% LT.lt let10 let7)
  let let14 := (Int.ofNat 1)
  let let15 := (binrel% HDiv.hDiv let14 (Int.ofNat 2000))
  let let16 := (Neg.neg let15)
  let let17 := (binrel% HMul.hMul let4 let15)
  let let18 := (Eq let17 let16)
  let let19 := (Int.ofNat 2)
  let let20 := (binrel% HDiv.hDiv let14 let19)
  let let21 := (binrel% HDiv.hDiv let3 (Rat.ofInt 2))
  let let22 := (Neg.neg let14)
  let let23 := (binrel% HMul.hMul let22 skoX)
  let let24 := (binrel% HAdd.hAdd skoX let23)
  let let25 := (binrel% HMul.hMul let20 pi)
  let let26 := (binrel% HMul.hMul pi let20)
  let let27 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let28 := (binrel% HMul.hMul let22 pi)
  let let29 := (binrel% GE.ge let28 (Neg.neg let27))
  let let30 := (binrel% LE.le pi let27)
  let let31 := (binrel% GE.ge (binrel% HAdd.hAdd let28 (binrel% HMul.hMul let19 skoY)) (Neg.neg (binrel% HDiv.hDiv let14 (Int.ofNat 1000))))
  let let32 := (binrel% HAdd.hAdd let16 let25)
  let let33 := (binrel% LE.le let32 skoY)
  let let34 := (binrel% HDiv.hDiv let4 (Rat.ofInt 2000))
  let let35 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let36 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let37 := (binrel% GE.ge pi let35)
  let let38 := (binrel% LE.le let35 pi)
  let let39 := (Int.ofNat 0)
  let let40 := (binrel% GE.ge let23 let39)
  let let41 := (binrel% LE.le skoX let1)
  let let42 := (binrel% GT.gt let3 let39)
  let let43 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let44 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let22 skoY)) let39)
  let let45 := (binrel% LE.le skoY skoX)
  let let46 := (binrel% LT.lt let4 let39)
  let let47 := (Not True)
  let let48 := (binrel% GE.ge let1 let1)
  let let49 := (binrel% GE.ge skoX let1)
  let let50 := (Not let49)
  let let51 := (binrel% LT.lt skoX let1)
  let let52 := (Not let45)
  let let53 := (Not let41)
  let let54 := (binrel% LE.le let36 pi)
  let let55 := (Not let54)
  let let56 := (binrel% LE.le pi let43)
  let let57 := (Not let56)
  let let58 := (binrel% HMul.hMul pi let21)
  let let59 := (binrel% HAdd.hAdd let34 let58)
  let let60 := (binrel% LE.le let59 skoY)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le let1 skoX)
  let let63 := (Not let62)
  let let64 := (And let63 (And let61 (And let57 (And let55 (And let53 let52)))))
  let let65 := (Not let40)
  let let66 := (Not let65)
  let let67 := (binrel% GE.ge skoX let39)
  let let68 := (Not let67)
  let let69 := (Not let68)
  let let70 := (binrel% GT.gt skoX let1)
  let let71 := (Not let44)
  let let72 := (Not let37)
  let let73 := (Not let29)
  let let74 := (Not let31)
  let let75 := (And let68 (And let74 (And let73 (And let72 (And let65 let71)))))
  let let76 := (Eq let64 let75)
  let let77 := (Or let67 let40)
  let let78 := (Or let69 let66)
  let let79 := (binrel% LT.lt let8 let5)
  let let80 := (And let46 let70)
  let let81 := (binrel% LT.lt let9 let6)
  let let82 := (And let42 let51)
(Eq let2 let1) → (Eq let4 let4) → (Eq let13 let12) → let18 → (Eq let21 let20) → (Eq let24 let1) → (Eq let26 let25) → (Eq let30 let29) → (Eq let33 let31) → (Eq let34 let17) → (Eq let36 let35) → (Eq let38 let37) → (Eq let41 let40) → (Eq let42 True) → (Eq let43 let27) → (Eq let6 let1) → (Eq let45 let44) → (Eq let46 True) → (Eq let47 False) → (Eq let48 True) → (Eq let51 let50) → (Eq let64 let64) → (Eq let5 let1) → (Eq let66 let40) → (Eq let8 let23) → (Eq let69 let67) → (Eq let9 skoX) → (Eq let70 let53) → (Eq let62 let67) → (Eq let49 let67) → let64 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% HAdd.hAdd let1 let1)
  let let3 := (Rat.ofInt 1)
  let let4 := (Neg.neg let3)
  let let5 := (binrel% HMul.hMul let4 let1)
  let let6 := (binrel% HMul.hMul let3 let1)
  let let7 := (binrel% HAdd.hAdd let6 let5)
  let let8 := (binrel% HMul.hMul let4 skoX)
  let let9 := (binrel% HMul.hMul let3 skoX)
  let let10 := (binrel% HAdd.hAdd let9 let8)
  let let11 := (binrel% GE.ge let10 let7)
  let let12 := (Not let11)
  let let13 := (binrel% LT.lt let10 let7)
  let let14 := (Int.ofNat 1)
  let let15 := (binrel% HDiv.hDiv let14 (Int.ofNat 2000))
  let let16 := (Neg.neg let15)
  let let17 := (binrel% HMul.hMul let4 let15)
  let let18 := (Eq let17 let16)
  let let19 := (Int.ofNat 2)
  let let20 := (binrel% HDiv.hDiv let14 let19)
  let let21 := (binrel% HDiv.hDiv let3 (Rat.ofInt 2))
  let let22 := (Neg.neg let14)
  let let23 := (binrel% HMul.hMul let22 skoX)
  let let24 := (binrel% HAdd.hAdd skoX let23)
  let let25 := (binrel% HMul.hMul let20 pi)
  let let26 := (binrel% HMul.hMul pi let20)
  let let27 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let28 := (binrel% HMul.hMul let22 pi)
  let let29 := (binrel% GE.ge let28 (Neg.neg let27))
  let let30 := (binrel% LE.le pi let27)
  let let31 := (binrel% GE.ge (binrel% HAdd.hAdd let28 (binrel% HMul.hMul let19 skoY)) (Neg.neg (binrel% HDiv.hDiv let14 (Int.ofNat 1000))))
  let let32 := (binrel% HAdd.hAdd let16 let25)
  let let33 := (binrel% LE.le let32 skoY)
  let let34 := (binrel% HDiv.hDiv let4 (Rat.ofInt 2000))
  let let35 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let36 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let37 := (binrel% GE.ge pi let35)
  let let38 := (binrel% LE.le let35 pi)
  let let39 := (Int.ofNat 0)
  let let40 := (binrel% GE.ge let23 let39)
  let let41 := (binrel% LE.le skoX let1)
  let let42 := (binrel% GT.gt let3 let39)
  let let43 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let44 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let22 skoY)) let39)
  let let45 := (binrel% LE.le skoY skoX)
  let let46 := (binrel% LT.lt let4 let39)
  let let47 := (Not True)
  let let48 := (binrel% GE.ge let1 let1)
  let let49 := (binrel% GE.ge skoX let1)
  let let50 := (Not let49)
  let let51 := (binrel% LT.lt skoX let1)
  let let52 := (Not let45)
  let let53 := (Not let41)
  let let54 := (binrel% LE.le let36 pi)
  let let55 := (Not let54)
  let let56 := (binrel% LE.le pi let43)
  let let57 := (Not let56)
  let let58 := (binrel% HMul.hMul pi let21)
  let let59 := (binrel% HAdd.hAdd let34 let58)
  let let60 := (binrel% LE.le let59 skoY)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le let1 skoX)
  let let63 := (Not let62)
  let let64 := (And let63 (And let61 (And let57 (And let55 (And let53 let52)))))
  let let65 := (Not let40)
  let let66 := (Not let65)
  let let67 := (binrel% GE.ge skoX let39)
  let let68 := (Not let67)
  let let69 := (Not let68)
  let let70 := (binrel% GT.gt skoX let1)
  let let71 := (Not let44)
  let let72 := (Not let37)
  let let73 := (Not let29)
  let let74 := (Not let31)
  let let75 := (And let68 (And let74 (And let73 (And let72 (And let65 let71)))))
  let let76 := (Eq let64 let75)
  let let77 := (Or let67 let40)
  let let78 := (Or let69 let66)
  let let79 := (binrel% LT.lt let8 let5)
  let let80 := (And let46 let70)
  let let81 := (binrel% LT.lt let9 let6)
  let let82 := (And let42 let51)
fun lean_r0 : (Eq let2 let1) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let4 let4) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r3 : let18 => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let24 let1) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let26 let25) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let30 let29) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let33 let31) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let34 let17) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let38 let37) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let42 True) => -- EVALUATE
fun lean_r14 : (Eq let43 let27) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let6 let1) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let46 True) => -- EVALUATE
fun lean_r18 : (Eq let47 False) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let48 True) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let64 let64) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let5 let1) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let66 let40) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let8 let23) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let69 let67) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let9 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let70 let53) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let62 let67) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let49 let67) => -- THEORY_REWRITE_ARITH
fun lean_a30 : let64 => by
have lean_s0 : (Or let69 (Or let66 False)) :=
  (scope (fun lean_a31 : let68 =>
    (scope (fun lean_a32 : let65 =>
      have lean_s0 : let42 := by timed trueElim lean_r13
      have lean_s1 : (Eq let50 let68) := by timed flipCongrArg lean_r29 [Not]
      have lean_s2 : (Eq let51 let68) := by timed Eq.trans lean_r20 lean_s1
      have lean_s3 : (Eq let68 let51) := by timed Eq.symm lean_s2
      have lean_s4 : let51 := by timed eqResolve lean_a31 lean_s3
      have lean_s5 : let82 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let82 let81) := by arithMulPos [skoX, let1, let3], 0
      have lean_s7 : let81 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let46 := by timed trueElim lean_r17
      have lean_s9 : (Eq let53 let65) := by timed flipCongrArg lean_r12 [Not]
      have lean_s10 : (Eq let70 let65) := by timed Eq.trans lean_r27 lean_s9
      have lean_s11 : (Eq let65 let70) := by timed Eq.symm lean_s10
      have lean_s12 : let70 := by timed eqResolve lean_a32 lean_s11
      have lean_s13 : let80 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let80 let79) := by arithMulNeg [skoX, let1, let4], 2
      have lean_s15 : let79 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let13 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r26 [HAdd.hAdd]
      have lean_s18 : (Eq let10 let24) := by timed congr lean_s17 lean_r24
      have lean_s19 : (Eq let10 let1) := by timed Eq.trans lean_s18 lean_r5
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r15 [HAdd.hAdd]
      have lean_s22 : (Eq let7 let2) := by timed congr lean_s21 lean_r22
      have lean_s23 : (Eq let7 let1) := by timed Eq.trans lean_s22 lean_r0
      have lean_s24 : (Eq let11 let48) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let11 True) := by timed Eq.trans lean_s24 lean_r19
      have lean_s26 : (Eq let12 let47) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let12 False) := by timed Eq.trans lean_s26 lean_r18
      have lean_s28 : (Eq let13 False) := by timed Eq.trans lean_r2 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let68 let65)) := by liftOrNToNeg lean_s0
have lean_s2 : let78 := by timed flipNotAnd lean_s1 [let68, let65]
let lean_s3 := by timed flipCongrArg lean_r25 [Or]
have lean_s4 : (Eq let78 let77) := by timed congr lean_s3 lean_r23
have lean_s5 : let77 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
have lean_s7 : (Eq let63 let68) := by timed flipCongrArg lean_r28 [Not]
let lean_s8 := by timed congr lean_s6 lean_s7
let lean_s9 := by timed flipCongrArg lean_r1 [HMul.hMul]
have lean_s10 : (Eq let15 let15) := by timed rfl
have lean_s11 : (Eq let17 let17) := by timed congr lean_s9 lean_s10
have lean_s12 : let18 := by timed Eq.trans lean_s11 lean_r3
have lean_s13 : (Eq let34 let16) := by timed Eq.trans lean_r9 lean_s12
let lean_s14 := by timed flipCongrArg lean_s13 [HAdd.hAdd]
have lean_s15 : (Eq pi pi) := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [HMul.hMul]
have lean_s17 : (Eq let58 let26) := by timed congr lean_s16 lean_r4
have lean_s18 : (Eq let58 let25) := by timed Eq.trans lean_s17 lean_r6
have lean_s19 : (Eq let59 let32) := by timed congr lean_s14 lean_s18
let lean_s20 := by timed flipCongrArg lean_s19 [LE.le]
have lean_s21 : (Eq skoY skoY) := by timed rfl
have lean_s22 : (Eq let60 let33) := by timed congr lean_s20 lean_s21
have lean_s23 : (Eq let60 let31) := by timed Eq.trans lean_s22 lean_r8
have lean_s24 : (Eq let61 let74) := by timed flipCongrArg lean_s23 [Not]
let lean_s25 := by timed congr lean_s6 lean_s24
let lean_s26 := by timed flipCongrArg lean_s15 [LE.le]
have lean_s27 : (Eq let56 let30) := by timed congr lean_s26 lean_r14
have lean_s28 : (Eq let56 let29) := by timed Eq.trans lean_s27 lean_r7
have lean_s29 : (Eq let57 let73) := by timed flipCongrArg lean_s28 [Not]
let lean_s30 := by timed congr lean_s6 lean_s29
let lean_s31 := by timed flipCongrArg lean_r10 [LE.le]
have lean_s32 : (Eq let54 let38) := by timed congr lean_s31 lean_s15
have lean_s33 : (Eq let54 let37) := by timed Eq.trans lean_s32 lean_r11
have lean_s34 : (Eq let55 let72) := by timed flipCongrArg lean_s33 [Not]
let lean_s35 := by timed congr lean_s6 lean_s34
have lean_s36 : (Eq let53 let65) := by timed flipCongrArg lean_r12 [Not]
let lean_s37 := by timed congr lean_s6 lean_s36
have lean_s38 : (Eq let52 let71) := by timed flipCongrArg lean_r16 [Not]
let lean_s39 := by timed congr lean_s37 lean_s38
let lean_s40 := by timed congr lean_s35 lean_s39
let lean_s41 := by timed congr lean_s30 lean_s40
let lean_s42 := by timed congr lean_s25 lean_s41
have lean_s43 : let76 := by timed congr lean_s8 lean_s42
have lean_s44 : let76 := by timed Eq.trans lean_r21 lean_s43
have lean_s45 : let75 := by timed eqResolve lean_a30 lean_s44
have lean_s46 : let65 := by andElim lean_s45, 4
let lean_s47 := by R1 lean_s5, lean_s46, let40, [(- 1), 0]
have lean_s48 : let68 := by andElim lean_s45, 0
exact (show False from by R1 lean_s47, lean_s48, let67, [0, 0])


