open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (binrel% HMul.hMul let2 let5)
  let let10 := (binrel% HMul.hMul let3 let5)
  let let11 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let10 let9))
  let let12 := (binrel% HMul.hMul let2 skoY)
  let let13 := (binrel% HMul.hMul let3 skoX)
  let let14 := (Int.ofNat 1)
  let let15 := (Neg.neg let14)
  let let16 := (binrel% HMul.hMul let15 skoX)
  let let17 := (binrel% HAdd.hAdd skoY let16)
  let let18 := (binrel% HMul.hMul let3 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let13 let12))
  let let20 := (binrel% GE.ge let19 let11)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt let19 let11)
  let let23 := (binrel% GE.ge let16 let1)
  let let24 := (Eq let23 let23)
  let let25 := (Not True)
  let let26 := (binrel% HDiv.hDiv let14 (Int.ofNat 2000))
  let let27 := (Neg.neg let26)
  let let28 := (binrel% HMul.hMul let3 let26)
  let let29 := (Eq let28 let27)
  let let30 := (Not let23)
  let let31 := (Not let30)
  let let32 := (Eq let31 let23)
  let let33 := (binrel% HMul.hMul let15 skoY)
  let let34 := (binrel% HAdd.hAdd let33 skoX)
  let let35 := (binrel% GE.ge let34 let1)
  let let36 := (binrel% LE.le let17 let5)
  let let37 := (Int.ofNat 2)
  let let38 := (binrel% HDiv.hDiv let14 let37)
  let let39 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let40 := (binrel% GE.ge let33 let1)
  let let41 := (binrel% LE.le skoY let5)
  let let42 := (Eq let23 let31)
  let let43 := (Not let36)
  let let44 := (binrel% GT.gt let17 let5)
  let let45 := (binrel% GE.ge let5 let5)
  let let46 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let47 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let48 := (binrel% HMul.hMul let38 pi)
  let let49 := (binrel% HMul.hMul pi let38)
  let let50 := (binrel% HMul.hMul let15 pi)
  let let51 := (binrel% GE.ge (binrel% HAdd.hAdd let50 (binrel% HMul.hMul let37 skoY)) (Neg.neg (binrel% HDiv.hDiv let14 (Int.ofNat 1000))))
  let let52 := (binrel% HAdd.hAdd let27 let48)
  let let53 := (binrel% LE.le let52 skoY)
  let let54 := (binrel% GT.gt let2 let1)
  let let55 := (binrel% HDiv.hDiv let3 (Rat.ofInt 2000))
  let let56 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let57 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let58 := (binrel% GE.ge pi let56)
  let let59 := (binrel% LE.le let56 pi)
  let let60 := (Eq let35 let35)
  let let61 := (binrel% LE.le skoY skoX)
  let let62 := (binrel% GE.ge let50 (Neg.neg let46))
  let let63 := (binrel% LE.le pi let46)
  let let64 := (Not let61)
  let let65 := (binrel% LE.le let57 pi)
  let let66 := (Not let65)
  let let67 := (binrel% LE.le pi let47)
  let let68 := (Not let67)
  let let69 := (binrel% HMul.hMul pi let39)
  let let70 := (binrel% HAdd.hAdd let55 let69)
  let let71 := (binrel% LE.le let70 skoY)
  let let72 := (Not let71)
  let let73 := (And let41 (And let72 (And let68 (And let66 (And let7 let64)))))
  let let74 := (Not let35)
  let let75 := (Not let74)
  let let76 := (Eq let75 let35)
  let let77 := (Eq let35 let75)
  let let78 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let79 := (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let16 skoY))
  let let80 := (And let30 let74)
  let let81 := (Not let58)
  let let82 := (Not let62)
  let let83 := (Not let51)
  let let84 := (And let40 (And let83 (And let82 (And let81 let80))))
  let let85 := (Eq let73 let84)
  let let86 := (Not let40)
  let let87 := (Or let86 (Or let23 let35))
  let let88 := (Or let86 (Or let31 let75))
  let let89 := (Not let44)
  let let90 := (binrel% LE.le let12 let9)
  let let91 := (And let54 let41)
  let let92 := (binrel% LT.lt let13 let10)
  let let93 := (And let4 let8)
  let let94 := (binrel% LT.lt let18 let10)
  let let95 := (And let4 let44)
(Eq let4 True) → (Eq let8 let7) → (Eq let22 let21) → (Eq let3 let3) → (Eq let24 True) → (Eq let25 False) → let29 → let32 → (Eq let36 let35) → (Eq let39 let38) → (Eq let41 let40) → (Eq let32 let42) → (Eq let44 let43) → (Eq let45 True) → (Eq let47 let46) → (Eq let13 let16) → (Eq let49 let48) → (Eq let12 skoY) → (Eq let53 let51) → (Eq let10 let5) → (Eq let54 True) → (Eq let55 let28) → (Eq let57 let56) → (Eq let59 let58) → (Eq let18 let34) → (Eq let6 let23) → (Eq let60 True) → (Eq let61 let35) → (Eq let63 let62) → (Eq let73 let73) → let76 → (Eq let76 let77) → (Eq let78 let5) → (Eq let9 let5) → (Eq let79 let5) → let73 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (binrel% HMul.hMul let2 let5)
  let let10 := (binrel% HMul.hMul let3 let5)
  let let11 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let10 let9))
  let let12 := (binrel% HMul.hMul let2 skoY)
  let let13 := (binrel% HMul.hMul let3 skoX)
  let let14 := (Int.ofNat 1)
  let let15 := (Neg.neg let14)
  let let16 := (binrel% HMul.hMul let15 skoX)
  let let17 := (binrel% HAdd.hAdd skoY let16)
  let let18 := (binrel% HMul.hMul let3 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let13 let12))
  let let20 := (binrel% GE.ge let19 let11)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt let19 let11)
  let let23 := (binrel% GE.ge let16 let1)
  let let24 := (Eq let23 let23)
  let let25 := (Not True)
  let let26 := (binrel% HDiv.hDiv let14 (Int.ofNat 2000))
  let let27 := (Neg.neg let26)
  let let28 := (binrel% HMul.hMul let3 let26)
  let let29 := (Eq let28 let27)
  let let30 := (Not let23)
  let let31 := (Not let30)
  let let32 := (Eq let31 let23)
  let let33 := (binrel% HMul.hMul let15 skoY)
  let let34 := (binrel% HAdd.hAdd let33 skoX)
  let let35 := (binrel% GE.ge let34 let1)
  let let36 := (binrel% LE.le let17 let5)
  let let37 := (Int.ofNat 2)
  let let38 := (binrel% HDiv.hDiv let14 let37)
  let let39 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let40 := (binrel% GE.ge let33 let1)
  let let41 := (binrel% LE.le skoY let5)
  let let42 := (Eq let23 let31)
  let let43 := (Not let36)
  let let44 := (binrel% GT.gt let17 let5)
  let let45 := (binrel% GE.ge let5 let5)
  let let46 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let47 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let48 := (binrel% HMul.hMul let38 pi)
  let let49 := (binrel% HMul.hMul pi let38)
  let let50 := (binrel% HMul.hMul let15 pi)
  let let51 := (binrel% GE.ge (binrel% HAdd.hAdd let50 (binrel% HMul.hMul let37 skoY)) (Neg.neg (binrel% HDiv.hDiv let14 (Int.ofNat 1000))))
  let let52 := (binrel% HAdd.hAdd let27 let48)
  let let53 := (binrel% LE.le let52 skoY)
  let let54 := (binrel% GT.gt let2 let1)
  let let55 := (binrel% HDiv.hDiv let3 (Rat.ofInt 2000))
  let let56 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let57 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let58 := (binrel% GE.ge pi let56)
  let let59 := (binrel% LE.le let56 pi)
  let let60 := (Eq let35 let35)
  let let61 := (binrel% LE.le skoY skoX)
  let let62 := (binrel% GE.ge let50 (Neg.neg let46))
  let let63 := (binrel% LE.le pi let46)
  let let64 := (Not let61)
  let let65 := (binrel% LE.le let57 pi)
  let let66 := (Not let65)
  let let67 := (binrel% LE.le pi let47)
  let let68 := (Not let67)
  let let69 := (binrel% HMul.hMul pi let39)
  let let70 := (binrel% HAdd.hAdd let55 let69)
  let let71 := (binrel% LE.le let70 skoY)
  let let72 := (Not let71)
  let let73 := (And let41 (And let72 (And let68 (And let66 (And let7 let64)))))
  let let74 := (Not let35)
  let let75 := (Not let74)
  let let76 := (Eq let75 let35)
  let let77 := (Eq let35 let75)
  let let78 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let79 := (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let16 skoY))
  let let80 := (And let30 let74)
  let let81 := (Not let58)
  let let82 := (Not let62)
  let let83 := (Not let51)
  let let84 := (And let40 (And let83 (And let82 (And let81 let80))))
  let let85 := (Eq let73 let84)
  let let86 := (Not let40)
  let let87 := (Or let86 (Or let23 let35))
  let let88 := (Or let86 (Or let31 let75))
  let let89 := (Not let44)
  let let90 := (binrel% LE.le let12 let9)
  let let91 := (And let54 let41)
  let let92 := (binrel% LT.lt let13 let10)
  let let93 := (And let4 let8)
  let let94 := (binrel% LT.lt let18 let10)
  let let95 := (And let4 let44)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let3 let3) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let24 True) => -- THEORY_REWRITE_BOOL
fun lean_r5 : (Eq let25 False) => -- THEORY_REWRITE_BOOL
fun lean_r6 : let29 => -- THEORY_REWRITE_ARITH
fun lean_r7 : let32 => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let32 let42) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let45 True) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let47 let46) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let13 let16) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let49 let48) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let12 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let53 let51) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let10 let5) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let54 True) => -- EVALUATE
fun lean_r21 : (Eq let55 let28) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let57 let56) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let59 let58) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let18 let34) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let6 let23) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let60 True) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let61 let35) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let73 let73) => -- THEORY_REWRITE_BOOL
fun lean_r30 : let76 => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let76 let77) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let78 let5) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let9 let5) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let79 let5) => -- THEORY_REWRITE_ARITH
fun lean_a35 : let73 => by
have lean_s0 : (Or let86 (Or let31 (Or let75 False))) :=
  (scope (fun lean_a36 : let40 =>
    (scope (fun lean_a37 : let30 =>
      (scope (fun lean_a38 : let74 =>
        have lean_s0 : (Eq let43 let74) := by timed flipCongrArg lean_r8 [Not]
        have lean_s1 : (Eq let44 let74) := by timed Eq.trans lean_r12 lean_s0
        have lean_s2 : (Eq let74 let44) := by timed Eq.symm lean_s1
        have lean_s3 : let44 := by timed eqResolve lean_a38 lean_s2
        have lean_s4 : (Or let89 False) :=
          (scope (fun lean_a39 : let44 =>
            have lean_s4 : let4 := by timed trueElim lean_r0
            have lean_s5 : let95 := by timed And.intro lean_s4 lean_a39
            have lean_s6 : (Implies let95 let94) := by arithMulNeg [let17, let5, let3], 2
            have lean_s7 : let94 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let7 let30) := by timed flipCongrArg lean_r25 [Not]
            have lean_s9 : (Eq let8 let30) := by timed Eq.trans lean_r1 lean_s8
            have lean_s10 : (Eq let30 let8) := by timed Eq.symm lean_s9
            have lean_s11 : let8 := by timed eqResolve lean_a37 lean_s10
            have lean_s12 : let93 := by timed And.intro lean_s4 lean_s11
            have lean_s13 : (Implies let93 let92) := by arithMulNeg [skoX, let5, let3], 2
            have lean_s14 : let92 := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : let54 := by timed trueElim lean_r20
            have lean_s16 : (Eq let40 let41) := by timed Eq.symm lean_r10
            have lean_s17 : let41 := by timed eqResolve lean_a36 lean_s16
            have lean_s18 : let91 := by timed And.intro lean_s15 lean_s17
            have lean_s19 : (Implies let91 let90) := by arithMulPos [skoY, let5, let2], 1
            have lean_s20 : let90 := by timed modusPonens lean_s18 lean_s19
            have lean_s21 : let22 := by sumBounds [lean_s7, lean_s14, lean_s20]
            let lean_s22 := by timed congrHAdd lean_r15 lean_r17
            have lean_s23 : (Eq let19 let79) := by timed congrHAdd lean_r24 lean_s22
            have lean_s24 : (Eq let19 let5) := by timed Eq.trans lean_s23 lean_r34
            let lean_s25 := by timed flipCongrArg lean_s24 [GE.ge]
            let lean_s26 := by timed congrHAdd lean_r19 lean_r33
            have lean_s27 : (Eq let11 let78) := by timed congrHAdd lean_r19 lean_s26
            have lean_s28 : (Eq let11 let5) := by timed Eq.trans lean_s27 lean_r32
            have lean_s29 : (Eq let20 let45) := by timed congr lean_s25 lean_s28
            have lean_s30 : (Eq let20 True) := by timed Eq.trans lean_s29 lean_r13
            have lean_s31 : (Eq let21 let25) := by timed flipCongrArg lean_s30 [Not]
            have lean_s32 : (Eq let21 False) := by timed Eq.trans lean_s31 lean_r5
            have lean_s33 : (Eq let22 False) := by timed Eq.trans lean_r2 lean_s32
            show False from by timed eqResolve lean_s21 lean_s33
          ))
        have lean_s5 : let89 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let89 let75) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let89 let35) := by timed Eq.trans lean_s6 lean_r30
        have lean_s8 : (Eq let35 let36) := by timed Eq.symm lean_r8
        have lean_s9 : (Eq let89 let36) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let36 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let35 let89) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let36 let89) := by timed Eq.trans lean_r8 lean_s11
        have lean_s13 : let89 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let40 let80)) := by liftOrNToNeg lean_s0
have lean_s2 : let88 := by timed flipNotAnd lean_s1 [let40, let30, let74]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let86 let86) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let24 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let42 let24) := by timed congr lean_s7 lean_r7
have lean_s9 : (Eq let42 True) := by timed Eq.trans lean_s8 lean_r4
have lean_s10 : (Eq let32 True) := by timed Eq.trans lean_r11 lean_s9
have lean_s11 : let32 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let60 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let77 let60) := by timed congr lean_s14 lean_r30
have lean_s16 : (Eq let77 True) := by timed Eq.trans lean_s15 lean_r26
have lean_s17 : (Eq let76 True) := by timed Eq.trans lean_r31 lean_s16
have lean_s18 : let76 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s12 lean_s18
have lean_s20 : (Eq let88 let87) := by timed congr lean_s5 lean_s19
have lean_s21 : let87 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let23 (Or let35 let86)) := by permutateOr lean_s21, [1, 2, 0], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
let lean_s24 := by timed congr lean_s23 lean_r10
let lean_s25 := by timed flipCongrArg lean_r3 [HMul.hMul]
have lean_s26 : (Eq let26 let26) := by timed rfl
have lean_s27 : (Eq let28 let28) := by timed congr lean_s25 lean_s26
have lean_s28 : let29 := by timed Eq.trans lean_s27 lean_r6
have lean_s29 : (Eq let55 let27) := by timed Eq.trans lean_r21 lean_s28
let lean_s30 := by timed flipCongrArg lean_s29 [HAdd.hAdd]
have lean_s31 : (Eq pi pi) := by timed rfl
let lean_s32 := by timed flipCongrArg lean_s31 [HMul.hMul]
have lean_s33 : (Eq let69 let49) := by timed congr lean_s32 lean_r9
have lean_s34 : (Eq let69 let48) := by timed Eq.trans lean_s33 lean_r16
have lean_s35 : (Eq let70 let52) := by timed congr lean_s30 lean_s34
let lean_s36 := by timed flipCongrArg lean_s35 [LE.le]
have lean_s37 : (Eq skoY skoY) := by timed rfl
have lean_s38 : (Eq let71 let53) := by timed congr lean_s36 lean_s37
have lean_s39 : (Eq let71 let51) := by timed Eq.trans lean_s38 lean_r18
have lean_s40 : (Eq let72 let83) := by timed flipCongrArg lean_s39 [Not]
let lean_s41 := by timed congr lean_s23 lean_s40
let lean_s42 := by timed flipCongrArg lean_s31 [LE.le]
have lean_s43 : (Eq let67 let63) := by timed congr lean_s42 lean_r14
have lean_s44 : (Eq let67 let62) := by timed Eq.trans lean_s43 lean_r28
have lean_s45 : (Eq let68 let82) := by timed flipCongrArg lean_s44 [Not]
let lean_s46 := by timed congr lean_s23 lean_s45
let lean_s47 := by timed flipCongrArg lean_r22 [LE.le]
have lean_s48 : (Eq let65 let59) := by timed congr lean_s47 lean_s31
have lean_s49 : (Eq let65 let58) := by timed Eq.trans lean_s48 lean_r23
have lean_s50 : (Eq let66 let81) := by timed flipCongrArg lean_s49 [Not]
let lean_s51 := by timed congr lean_s23 lean_s50
have lean_s52 : (Eq let7 let30) := by timed flipCongrArg lean_r25 [Not]
let lean_s53 := by timed congr lean_s23 lean_s52
have lean_s54 : (Eq let64 let74) := by timed flipCongrArg lean_r27 [Not]
let lean_s55 := by timed congr lean_s53 lean_s54
let lean_s56 := by timed congr lean_s51 lean_s55
let lean_s57 := by timed congr lean_s46 lean_s56
let lean_s58 := by timed congr lean_s41 lean_s57
have lean_s59 : let85 := by timed congr lean_s24 lean_s58
have lean_s60 : let85 := by timed Eq.trans lean_r29 lean_s59
have lean_s61 : let84 := by timed eqResolve lean_a35 lean_s60
have lean_s62 : let74 := by andElim lean_s61, 5
let lean_s63 := by R1 lean_s22, lean_s62, let35, [(- 1), 0]
have lean_s64 : let30 := by andElim lean_s61, 4
let lean_s65 := by R1 lean_s63, lean_s64, let23, [(- 1), 0]
have lean_s66 : let40 := by andElim lean_s61, 0
exact (show False from by R2 lean_s65, lean_s66, let40, [0, 0])


