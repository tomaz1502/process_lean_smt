open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let6 := (binrel% LE.le pi let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt pi let5)
  let let9 := (binrel% HMul.hMul let3 let5)
  let let10 := (Rat.ofInt 0)
  let let11 := (binrel% HMul.hMul let2 let10)
  let let12 := (binrel% HAdd.hAdd let11 let9)
  let let13 := (binrel% HMul.hMul let3 pi)
  let let14 := (binrel% HMul.hMul let2 pi)
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% GE.ge let15 let12)
  let let17 := (Not let16)
  let let18 := (binrel% LT.lt let15 let12)
  let let19 := (Int.ofNat 1)
  let let20 := (Neg.neg let19)
  let let21 := (binrel% HMul.hMul let20 pi)
  let let22 := (binrel% HAdd.hAdd pi let21)
  let let23 := (Neg.neg let5)
  let let24 := (binrel% HAdd.hAdd let10 let23)
  let let25 := (Not True)
  let let26 := (binrel% GE.ge let21 let23)
  let let27 := (Not let26)
  let let28 := (Not let27)
  let let29 := (binrel% LE.le skoY skoX)
  let let30 := (Not let29)
  let let31 := (binrel% LE.le skoX let10)
  let let32 := (Not let31)
  let let33 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let34 := (binrel% LE.le let33 pi)
  let let35 := (Not let34)
  let let36 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let37 := (binrel% LE.le pi let36)
  let let38 := (Not let37)
  let let39 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let40 := (binrel% HMul.hMul pi let39)
  let let41 := (binrel% HDiv.hDiv let3 (Rat.ofInt 2000))
  let let42 := (binrel% HAdd.hAdd let41 let40)
  let let43 := (binrel% LE.le let42 skoY)
  let let44 := (Not let43)
  let let45 := (binrel% LE.le pi let10)
  let let46 := (And let45 (And let44 (And let38 (And let35 (And let32 let30)))))
  let let47 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let20 skoY)) let1)
  let let48 := (binrel% GE.ge (binrel% HMul.hMul let20 skoX) let1)
  let let49 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let50 := (binrel% GE.ge pi let49)
  let let51 := (binrel% LE.le let49 pi)
  let let52 := (Int.ofNat 2)
  let let53 := (binrel% GE.ge (binrel% HAdd.hAdd let21 (binrel% HMul.hMul let52 skoY)) (Neg.neg (binrel% HDiv.hDiv let19 (Int.ofNat 1000))))
  let let54 := (binrel% HDiv.hDiv let19 let52)
  let let55 := (binrel% HMul.hMul let54 pi)
  let let56 := (binrel% HDiv.hDiv let19 (Int.ofNat 2000))
  let let57 := (Neg.neg let56)
  let let58 := (binrel% HAdd.hAdd let57 let55)
  let let59 := (binrel% LE.le let58 skoY)
  let let60 := (binrel% HMul.hMul pi let54)
  let let61 := (binrel% GE.ge let21 let1)
  let let62 := (binrel% GT.gt let2 let1)
  let let63 := (binrel% HMul.hMul let3 let56)
  let let64 := (binrel% GE.ge let10 let23)
  let let65 := (Eq let63 let57)
  let let66 := (Not let47)
  let let67 := (Not let48)
  let let68 := (Not let50)
  let let69 := (Not let53)
  let let70 := (And let61 (And let69 (And let27 (And let68 (And let67 let66)))))
  let let71 := (Eq let46 let70)
  let let72 := (Not let61)
  let let73 := (Or let26 let72)
  let let74 := (Or let28 let72)
  let let75 := (binrel% LT.lt let13 let9)
  let let76 := (And let4 let8)
  let let77 := (binrel% LE.le let14 let11)
  let let78 := (And let62 let45)
(Eq let4 True) → (Eq let8 let7) → (Eq let18 let17) → (Eq let14 pi) → (Eq let22 let10) → (Eq let11 let10) → (Eq let24 let23) → (Eq let25 False) → (Eq let28 let26) → (Eq let46 let46) → (Eq let29 let47) → (Eq let31 let48) → (Eq let13 let21) → (Eq let51 let50) → (Eq let33 let49) → (Eq let59 let53) → (Eq let9 let23) → (Eq let6 let26) → (Eq let60 let55) → (Eq let36 let5) → (Eq let45 let61) → (Eq let39 let54) → (Eq let62 True) → (Eq let41 let63) → (Eq let64 True) → let65 → (Eq let3 let3) → let46 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let6 := (binrel% LE.le pi let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt pi let5)
  let let9 := (binrel% HMul.hMul let3 let5)
  let let10 := (Rat.ofInt 0)
  let let11 := (binrel% HMul.hMul let2 let10)
  let let12 := (binrel% HAdd.hAdd let11 let9)
  let let13 := (binrel% HMul.hMul let3 pi)
  let let14 := (binrel% HMul.hMul let2 pi)
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% GE.ge let15 let12)
  let let17 := (Not let16)
  let let18 := (binrel% LT.lt let15 let12)
  let let19 := (Int.ofNat 1)
  let let20 := (Neg.neg let19)
  let let21 := (binrel% HMul.hMul let20 pi)
  let let22 := (binrel% HAdd.hAdd pi let21)
  let let23 := (Neg.neg let5)
  let let24 := (binrel% HAdd.hAdd let10 let23)
  let let25 := (Not True)
  let let26 := (binrel% GE.ge let21 let23)
  let let27 := (Not let26)
  let let28 := (Not let27)
  let let29 := (binrel% LE.le skoY skoX)
  let let30 := (Not let29)
  let let31 := (binrel% LE.le skoX let10)
  let let32 := (Not let31)
  let let33 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let34 := (binrel% LE.le let33 pi)
  let let35 := (Not let34)
  let let36 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let37 := (binrel% LE.le pi let36)
  let let38 := (Not let37)
  let let39 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let40 := (binrel% HMul.hMul pi let39)
  let let41 := (binrel% HDiv.hDiv let3 (Rat.ofInt 2000))
  let let42 := (binrel% HAdd.hAdd let41 let40)
  let let43 := (binrel% LE.le let42 skoY)
  let let44 := (Not let43)
  let let45 := (binrel% LE.le pi let10)
  let let46 := (And let45 (And let44 (And let38 (And let35 (And let32 let30)))))
  let let47 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let20 skoY)) let1)
  let let48 := (binrel% GE.ge (binrel% HMul.hMul let20 skoX) let1)
  let let49 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let50 := (binrel% GE.ge pi let49)
  let let51 := (binrel% LE.le let49 pi)
  let let52 := (Int.ofNat 2)
  let let53 := (binrel% GE.ge (binrel% HAdd.hAdd let21 (binrel% HMul.hMul let52 skoY)) (Neg.neg (binrel% HDiv.hDiv let19 (Int.ofNat 1000))))
  let let54 := (binrel% HDiv.hDiv let19 let52)
  let let55 := (binrel% HMul.hMul let54 pi)
  let let56 := (binrel% HDiv.hDiv let19 (Int.ofNat 2000))
  let let57 := (Neg.neg let56)
  let let58 := (binrel% HAdd.hAdd let57 let55)
  let let59 := (binrel% LE.le let58 skoY)
  let let60 := (binrel% HMul.hMul pi let54)
  let let61 := (binrel% GE.ge let21 let1)
  let let62 := (binrel% GT.gt let2 let1)
  let let63 := (binrel% HMul.hMul let3 let56)
  let let64 := (binrel% GE.ge let10 let23)
  let let65 := (Eq let63 let57)
  let let66 := (Not let47)
  let let67 := (Not let48)
  let let68 := (Not let50)
  let let69 := (Not let53)
  let let70 := (And let61 (And let69 (And let27 (And let68 (And let67 let66)))))
  let let71 := (Eq let46 let70)
  let let72 := (Not let61)
  let let73 := (Or let26 let72)
  let let74 := (Or let28 let72)
  let let75 := (binrel% LT.lt let13 let9)
  let let76 := (And let4 let8)
  let let77 := (binrel% LE.le let14 let11)
  let let78 := (And let62 let45)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let14 pi) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let22 let10) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let11 let10) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let25 False) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let28 let26) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let46 let46) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let29 let47) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let31 let48) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let13 let21) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let33 let49) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let59 let53) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let9 let23) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let6 let26) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let60 let55) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let36 let5) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let45 let61) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let39 let54) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let62 True) => -- EVALUATE
fun lean_r23 : (Eq let41 let63) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let64 True) => -- THEORY_REWRITE_ARITH
fun lean_r25 : let65 => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let3 let3) => -- THEORY_REWRITE_ARITH
fun lean_a27 : let46 => by
have lean_s0 : (Or let28 (Or let72 False)) :=
  (scope (fun lean_a28 : let27 =>
    (scope (fun lean_a29 : let61 =>
      have lean_s0 : let62 := by timed trueElim lean_r22
      have lean_s1 : (Eq let61 let45) := by timed Eq.symm lean_r20
      have lean_s2 : let45 := by timed eqResolve lean_a29 lean_s1
      have lean_s3 : let78 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let78 let77) := by arithMulPos [pi, let10, let2], 1
      have lean_s5 : let77 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let4 := by timed trueElim lean_r0
      have lean_s7 : (Eq let7 let27) := by timed flipCongrArg lean_r17 [Not]
      have lean_s8 : (Eq let8 let27) := by timed Eq.trans lean_r1 lean_s7
      have lean_s9 : (Eq let27 let8) := by timed Eq.symm lean_s8
      have lean_s10 : let8 := by timed eqResolve lean_a28 lean_s9
      have lean_s11 : let76 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let76 let75) := by arithMulNeg [pi, let5, let3], 2
      have lean_s13 : let75 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let18 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r3 [HAdd.hAdd]
      have lean_s16 : (Eq let15 let22) := by timed congr lean_s15 lean_r12
      have lean_s17 : (Eq let15 let10) := by timed Eq.trans lean_s16 lean_r4
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r5 [HAdd.hAdd]
      have lean_s20 : (Eq let12 let24) := by timed congr lean_s19 lean_r16
      have lean_s21 : (Eq let12 let23) := by timed Eq.trans lean_s20 lean_r6
      have lean_s22 : (Eq let16 let64) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let16 True) := by timed Eq.trans lean_s22 lean_r24
      have lean_s24 : (Eq let17 let25) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let17 False) := by timed Eq.trans lean_s24 lean_r7
      have lean_s26 : (Eq let18 False) := by timed Eq.trans lean_r2 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let27 let61)) := by liftOrNToNeg lean_s0
have lean_s2 : let74 := by timed flipNotAnd lean_s1 [let27, let61]
let lean_s3 := by timed flipCongrArg lean_r8 [Or]
have lean_s4 : (Eq let72 let72) := by timed rfl
have lean_s5 : (Eq let74 let73) := by timed congr lean_s3 lean_s4
have lean_s6 : let73 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
let lean_s8 := by timed congr lean_s7 lean_r20
let lean_s9 := by timed flipCongrArg lean_r26 [HMul.hMul]
have lean_s10 : (Eq let56 let56) := by timed rfl
have lean_s11 : (Eq let63 let63) := by timed congr lean_s9 lean_s10
have lean_s12 : let65 := by timed Eq.trans lean_s11 lean_r25
have lean_s13 : (Eq let41 let57) := by timed Eq.trans lean_r23 lean_s12
let lean_s14 := by timed flipCongrArg lean_s13 [HAdd.hAdd]
have lean_s15 : (Eq pi pi) := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [HMul.hMul]
have lean_s17 : (Eq let40 let60) := by timed congr lean_s16 lean_r21
have lean_s18 : (Eq let40 let55) := by timed Eq.trans lean_s17 lean_r18
have lean_s19 : (Eq let42 let58) := by timed congr lean_s14 lean_s18
let lean_s20 := by timed flipCongrArg lean_s19 [LE.le]
have lean_s21 : (Eq skoY skoY) := by timed rfl
have lean_s22 : (Eq let43 let59) := by timed congr lean_s20 lean_s21
have lean_s23 : (Eq let43 let53) := by timed Eq.trans lean_s22 lean_r15
have lean_s24 : (Eq let44 let69) := by timed flipCongrArg lean_s23 [Not]
let lean_s25 := by timed congr lean_s7 lean_s24
let lean_s26 := by timed flipCongrArg lean_s15 [LE.le]
have lean_s27 : (Eq let37 let6) := by timed congr lean_s26 lean_r19
have lean_s28 : (Eq let37 let26) := by timed Eq.trans lean_s27 lean_r17
have lean_s29 : (Eq let38 let27) := by timed flipCongrArg lean_s28 [Not]
let lean_s30 := by timed congr lean_s7 lean_s29
let lean_s31 := by timed flipCongrArg lean_r14 [LE.le]
have lean_s32 : (Eq let34 let51) := by timed congr lean_s31 lean_s15
have lean_s33 : (Eq let34 let50) := by timed Eq.trans lean_s32 lean_r13
have lean_s34 : (Eq let35 let68) := by timed flipCongrArg lean_s33 [Not]
let lean_s35 := by timed congr lean_s7 lean_s34
have lean_s36 : (Eq let32 let67) := by timed flipCongrArg lean_r11 [Not]
let lean_s37 := by timed congr lean_s7 lean_s36
have lean_s38 : (Eq let30 let66) := by timed flipCongrArg lean_r10 [Not]
let lean_s39 := by timed congr lean_s37 lean_s38
let lean_s40 := by timed congr lean_s35 lean_s39
let lean_s41 := by timed congr lean_s30 lean_s40
let lean_s42 := by timed congr lean_s25 lean_s41
have lean_s43 : let71 := by timed congr lean_s8 lean_s42
have lean_s44 : let71 := by timed Eq.trans lean_r9 lean_s43
have lean_s45 : let70 := by timed eqResolve lean_a27 lean_s44
have lean_s46 : let27 := by andElim lean_s45, 2
let lean_s47 := by R1 lean_s6, lean_s46, let26, [(- 1), 0]
have lean_s48 : let61 := by andElim lean_s45, 0
exact (show False from by R2 lean_s47, lean_s48, let61, [0, 0])


