open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (binrel% LE.le skoY skoX)
  let let2 := (Not let1)
  let let3 := (Rat.ofInt 0)
  let let4 := (binrel% LE.le skoX let3)
  let let5 := (Not let4)
  let let6 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let7 := (binrel% LE.le let6 pi)
  let let8 := (Not let7)
  let let9 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let10 := (binrel% LE.le pi let9)
  let let11 := (Not let10)
  let let12 := (Rat.ofInt 1)
  let let13 := (binrel% HDiv.hDiv let12 (Rat.ofInt 2))
  let let14 := (binrel% HMul.hMul pi let13)
  let let15 := (Neg.neg let12)
  let let16 := (binrel% HDiv.hDiv let15 (Rat.ofInt 2000))
  let let17 := (binrel% HAdd.hAdd let16 let14)
  let let18 := (binrel% LE.le let17 skoY)
  let let19 := (Not let18)
  let let20 := (Eq skoX let3)
  let let21 := (And let20 (And let19 (And let11 (And let8 (And let5 let2)))))
  let let22 := (Not True)
  let let23 := (Int.ofNat 1)
  let let24 := (binrel% HDiv.hDiv let23 (Int.ofNat 2000))
  let let25 := (binrel% HMul.hMul let15 let24)
  let let26 := (Int.ofNat 0)
  let let27 := (binrel% GE.ge let3 let26)
  let let28 := (Neg.neg let23)
  let let29 := (binrel% HMul.hMul let28 skoX)
  let let30 := (binrel% GE.ge let29 let26)
  let let31 := (binrel% HMul.hMul let28 let3)
  let let32 := (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let28 skoY) skoX) let26)
  let let33 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let34 := (binrel% GE.ge pi let33)
  let let35 := (binrel% LE.le let33 pi)
  let let36 := (Int.ofNat 2)
  let let37 := (binrel% HMul.hMul let28 pi)
  let let38 := (binrel% GE.ge (binrel% HAdd.hAdd let37 (binrel% HMul.hMul let36 skoY)) (Neg.neg (binrel% HDiv.hDiv let23 (Int.ofNat 1000))))
  let let39 := (binrel% HDiv.hDiv let23 let36)
  let let40 := (binrel% HMul.hMul let39 pi)
  let let41 := (Neg.neg let24)
  let let42 := (binrel% HAdd.hAdd let41 let40)
  let let43 := (binrel% LE.le let42 skoY)
  let let44 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let45 := (binrel% GE.ge let37 (Neg.neg let44))
  let let46 := (binrel% LE.le pi let44)
  let let47 := (binrel% HMul.hMul pi let39)
  let let48 := (Eq let25 let41)
  let let49 := (Not let30)
  let let50 := (binrel% GE.ge let31 let26)
  let let51 := (Not let50)
  let let52 := (Eq let26 let26)
  let let53 := (Not let32)
  let let54 := (Not let34)
  let let55 := (Not let45)
  let let56 := (Not let38)
  let let57 := (And let20 (And let56 (And let55 (And let54 (And let49 let53)))))
  let let58 := (Eq let21 let57)
(Eq let21 let21) → (Eq let15 let15) → (Eq let22 False) → (Eq let16 let25) → (Eq let27 True) → (Eq let4 let30) → (Eq let31 let3) → (Eq let1 let32) → (Eq let35 let34) → (Eq let6 let33) → (Eq let43 let38) → (Eq let46 let45) → (Eq let47 let40) → (Eq let9 let44) → (Eq let13 let39) → let48 → let21 → False :=
  let let1 := (binrel% LE.le skoY skoX)
  let let2 := (Not let1)
  let let3 := (Rat.ofInt 0)
  let let4 := (binrel% LE.le skoX let3)
  let let5 := (Not let4)
  let let6 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let7 := (binrel% LE.le let6 pi)
  let let8 := (Not let7)
  let let9 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let10 := (binrel% LE.le pi let9)
  let let11 := (Not let10)
  let let12 := (Rat.ofInt 1)
  let let13 := (binrel% HDiv.hDiv let12 (Rat.ofInt 2))
  let let14 := (binrel% HMul.hMul pi let13)
  let let15 := (Neg.neg let12)
  let let16 := (binrel% HDiv.hDiv let15 (Rat.ofInt 2000))
  let let17 := (binrel% HAdd.hAdd let16 let14)
  let let18 := (binrel% LE.le let17 skoY)
  let let19 := (Not let18)
  let let20 := (Eq skoX let3)
  let let21 := (And let20 (And let19 (And let11 (And let8 (And let5 let2)))))
  let let22 := (Not True)
  let let23 := (Int.ofNat 1)
  let let24 := (binrel% HDiv.hDiv let23 (Int.ofNat 2000))
  let let25 := (binrel% HMul.hMul let15 let24)
  let let26 := (Int.ofNat 0)
  let let27 := (binrel% GE.ge let3 let26)
  let let28 := (Neg.neg let23)
  let let29 := (binrel% HMul.hMul let28 skoX)
  let let30 := (binrel% GE.ge let29 let26)
  let let31 := (binrel% HMul.hMul let28 let3)
  let let32 := (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let28 skoY) skoX) let26)
  let let33 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let34 := (binrel% GE.ge pi let33)
  let let35 := (binrel% LE.le let33 pi)
  let let36 := (Int.ofNat 2)
  let let37 := (binrel% HMul.hMul let28 pi)
  let let38 := (binrel% GE.ge (binrel% HAdd.hAdd let37 (binrel% HMul.hMul let36 skoY)) (Neg.neg (binrel% HDiv.hDiv let23 (Int.ofNat 1000))))
  let let39 := (binrel% HDiv.hDiv let23 let36)
  let let40 := (binrel% HMul.hMul let39 pi)
  let let41 := (Neg.neg let24)
  let let42 := (binrel% HAdd.hAdd let41 let40)
  let let43 := (binrel% LE.le let42 skoY)
  let let44 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let45 := (binrel% GE.ge let37 (Neg.neg let44))
  let let46 := (binrel% LE.le pi let44)
  let let47 := (binrel% HMul.hMul pi let39)
  let let48 := (Eq let25 let41)
  let let49 := (Not let30)
  let let50 := (binrel% GE.ge let31 let26)
  let let51 := (Not let50)
  let let52 := (Eq let26 let26)
  let let53 := (Not let32)
  let let54 := (Not let34)
  let let55 := (Not let45)
  let let56 := (Not let38)
  let let57 := (And let20 (And let56 (And let55 (And let54 (And let49 let53)))))
  let let58 := (Eq let21 let57)
fun lean_r0 : (Eq let21 let21) => -- THEORY_REWRITE_BOOL
fun lean_r1 : (Eq let15 let15) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let22 False) => -- THEORY_REWRITE_BOOL
fun lean_r3 : (Eq let16 let25) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let27 True) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let4 let30) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let31 let3) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let1 let32) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let6 let33) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let43 let38) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let46 let45) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let47 let40) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let9 let44) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let13 let39) => -- THEORY_REWRITE_ARITH
fun lean_r15 : let48 => -- THEORY_REWRITE_ARITH
fun lean_a16 : let21 => by
have lean_s0 : (Eq And And) := by timed rfl
have lean_s1 : (Eq let20 let20) := by timed rfl
let lean_s2 := by timed congr lean_s0 lean_s1
let lean_s3 := by timed flipCongrArg lean_r1 [HMul.hMul]
have lean_s4 : (Eq let24 let24) := by timed rfl
have lean_s5 : (Eq let25 let25) := by timed congr lean_s3 lean_s4
have lean_s6 : let48 := by timed Eq.trans lean_s5 lean_r15
have lean_s7 : (Eq let16 let41) := by timed Eq.trans lean_r3 lean_s6
let lean_s8 := by timed flipCongrArg lean_s7 [HAdd.hAdd]
have lean_s9 : (Eq pi pi) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s11 : (Eq let14 let47) := by timed congr lean_s10 lean_r14
have lean_s12 : (Eq let14 let40) := by timed Eq.trans lean_s11 lean_r12
have lean_s13 : (Eq let17 let42) := by timed congr lean_s8 lean_s12
let lean_s14 := by timed flipCongrArg lean_s13 [LE.le]
have lean_s15 : (Eq skoY skoY) := by timed rfl
have lean_s16 : (Eq let18 let43) := by timed congr lean_s14 lean_s15
have lean_s17 : (Eq let18 let38) := by timed Eq.trans lean_s16 lean_r10
have lean_s18 : (Eq let19 let56) := by timed flipCongrArg lean_s17 [Not]
let lean_s19 := by timed congr lean_s0 lean_s18
let lean_s20 := by timed flipCongrArg lean_s9 [LE.le]
have lean_s21 : (Eq let10 let46) := by timed congr lean_s20 lean_r13
have lean_s22 : (Eq let10 let45) := by timed Eq.trans lean_s21 lean_r11
have lean_s23 : (Eq let11 let55) := by timed flipCongrArg lean_s22 [Not]
let lean_s24 := by timed congr lean_s0 lean_s23
let lean_s25 := by timed flipCongrArg lean_r9 [LE.le]
have lean_s26 : (Eq let7 let35) := by timed congr lean_s25 lean_s9
have lean_s27 : (Eq let7 let34) := by timed Eq.trans lean_s26 lean_r8
have lean_s28 : (Eq let8 let54) := by timed flipCongrArg lean_s27 [Not]
let lean_s29 := by timed congr lean_s0 lean_s28
have lean_s30 : (Eq let5 let49) := by timed flipCongrArg lean_r5 [Not]
let lean_s31 := by timed congr lean_s0 lean_s30
have lean_s32 : (Eq let2 let53) := by timed flipCongrArg lean_r7 [Not]
let lean_s33 := by timed congr lean_s31 lean_s32
let lean_s34 := by timed congr lean_s29 lean_s33
let lean_s35 := by timed congr lean_s24 lean_s34
let lean_s36 := by timed congr lean_s19 lean_s35
have lean_s37 : let58 := by timed congr lean_s2 lean_s36
have lean_s38 : let58 := by timed Eq.trans lean_r0 lean_s37
have lean_s39 : let57 := by timed eqResolve lean_a16 lean_s38
have lean_s40 : let49 := by andElim lean_s39, 4
have lean_s41 : (Eq let28 let28) := by timed rfl
let lean_s42 := by timed flipCongrArg lean_s41 [HMul.hMul]
have lean_s43 : let57 := by timed eqResolve lean_a16 lean_s38
have lean_s44 : let20 := by andElim lean_s43, 0
have lean_s45 : (Eq let29 let31) := by timed congr lean_s42 lean_s44
let lean_s46 := by timed flipCongrArg lean_s45 [GE.ge]
have lean_s47 : let52 := by timed rfl
have lean_s48 : (Eq let30 let50) := by timed congr lean_s46 lean_s47
have lean_s49 : (Eq let49 let51) := by timed flipCongrArg lean_s48 [Not]
let lean_s50 := by timed flipCongrArg lean_r6 [GE.ge]
have lean_s51 : let52 := by timed rfl
have lean_s52 : (Eq let50 let27) := by timed congr lean_s50 lean_s51
have lean_s53 : (Eq let50 True) := by timed Eq.trans lean_s52 lean_r4
have lean_s54 : (Eq let51 let22) := by timed flipCongrArg lean_s53 [Not]
have lean_s55 : (Eq let51 False) := by timed Eq.trans lean_s54 lean_r2
have lean_s56 : (Eq let49 False) := by timed Eq.trans lean_s49 lean_s55
exact (show False from by timed eqResolve lean_s40 lean_s56)


