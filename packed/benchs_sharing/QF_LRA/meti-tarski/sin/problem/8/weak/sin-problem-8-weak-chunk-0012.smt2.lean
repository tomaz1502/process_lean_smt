open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% LE.le skoX let1)
  let let3 := (Not let2)
  let let4 := (binrel% GT.gt skoX let1)
  let let5 := (binrel% GE.ge skoY let1)
  let let6 := (Not let5)
  let let7 := (binrel% LT.lt skoY let1)
  let let8 := (Int.ofNat 0)
  let let9 := (binrel% GE.ge skoY let8)
  let let10 := (Int.ofNat 1)
  let let11 := (Neg.neg let10)
  let let12 := (binrel% HMul.hMul let11 skoX)
  let let13 := (Rat.ofInt 1)
  let let14 := (Neg.neg let13)
  let let15 := (binrel% HMul.hMul let14 skoX)
  let let16 := (binrel% HMul.hMul let13 skoY)
  let let17 := (binrel% HAdd.hAdd (binrel% HMul.hMul let11 skoY) skoX)
  let let18 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let12 skoY))
  let let19 := (binrel% HMul.hMul let14 let1)
  let let20 := (binrel% LE.le let1 skoY)
  let let21 := (binrel% HMul.hMul let13 let1)
  let let22 := (binrel% HDiv.hDiv let10 (Int.ofNat 2000))
  let let23 := (Neg.neg let22)
  let let24 := (binrel% HMul.hMul let14 let22)
  let let25 := (Eq let24 let23)
  let let26 := (Int.ofNat 2)
  let let27 := (binrel% HDiv.hDiv let10 let26)
  let let28 := (binrel% HDiv.hDiv let13 (Rat.ofInt 2))
  let let29 := (binrel% GE.ge let17 let8)
  let let30 := (Not let29)
  let let31 := (Not let30)
  let let32 := (Eq let29 let31)
  let let33 := (Eq let31 let29)
  let let34 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let35 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let36 := (Eq let9 let9)
  let let37 := (binrel% HMul.hMul let11 pi)
  let let38 := (binrel% GE.ge (binrel% HAdd.hAdd let37 (binrel% HMul.hMul let26 skoY)) (Neg.neg (binrel% HDiv.hDiv let10 (Int.ofNat 1000))))
  let let39 := (binrel% HMul.hMul let27 pi)
  let let40 := (binrel% HAdd.hAdd let23 let39)
  let let41 := (binrel% LE.le let40 skoY)
  let let42 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let43 := (binrel% GE.ge pi let42)
  let let44 := (binrel% LE.le let42 pi)
  let let45 := (binrel% HMul.hMul pi let27)
  let let46 := (binrel% HAdd.hAdd skoY let12)
  let let47 := (binrel% LE.le let46 let1)
  let let48 := (binrel% LT.lt let14 let8)
  let let49 := (binrel% LE.le skoY skoX)
  let let50 := (Not let49)
  let let51 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let52 := (binrel% LE.le let51 pi)
  let let53 := (Not let52)
  let let54 := (binrel% LE.le pi let35)
  let let55 := (Not let54)
  let let56 := (binrel% HMul.hMul pi let28)
  let let57 := (binrel% HDiv.hDiv let14 (Rat.ofInt 2000))
  let let58 := (binrel% HAdd.hAdd let57 let56)
  let let59 := (binrel% LE.le let58 skoY)
  let let60 := (Not let59)
  let let61 := (Not let20)
  let let62 := (And let61 (And let60 (And let55 (And let53 (And let3 let50)))))
  let let63 := (Eq let29 let29)
  let let64 := (binrel% HMul.hMul let14 let46)
  let let65 := (binrel% GE.ge let12 let8)
  let let66 := (Eq let65 let65)
  let let67 := (binrel% GT.gt let13 let8)
  let let68 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1))
  let let69 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let19 let21))
  let let70 := (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let15 let16))
  let let71 := (binrel% GE.ge let70 let69)
  let let72 := (Not let71)
  let let73 := (binrel% LT.lt let70 let69)
  let let74 := (Not let65)
  let let75 := (Not let74)
  let let76 := (Eq let75 let65)
  let let77 := (Eq let65 let75)
  let let78 := (Not let9)
  let let79 := (Not let78)
  let let80 := (Eq let79 let9)
  let let81 := (Eq let9 let79)
  let let82 := (Not let47)
  let let83 := (binrel% GT.gt let46 let1)
  let let84 := (binrel% GE.ge let1 let1)
  let let85 := (binrel% GE.ge let37 (Neg.neg let34))
  let let86 := (binrel% LE.le pi let34)
  let let87 := (Not True)
  let let88 := (And let74 let30)
  let let89 := (Not let43)
  let let90 := (Not let85)
  let let91 := (Not let38)
  let let92 := (And let78 (And let91 (And let90 (And let89 let88))))
  let let93 := (Eq let62 let92)
  let let94 := (Or let9 (Or let65 let29))
  let let95 := (Or let79 (Or let75 let31))
  let let96 := (Not let83)
  let let97 := (binrel% LT.lt let16 let21)
  let let98 := (And let67 let7)
  let let99 := (binrel% LT.lt let15 let19)
  let let100 := (And let48 let4)
  let let101 := (binrel% LT.lt let64 let19)
  let let102 := (And let48 let83)
(Eq let4 let3) → (Eq let7 let6) → (Eq let5 let9) → (Eq let15 let12) → (Eq let16 skoY) → (Eq let18 let1) → (Eq let19 let1) → (Eq let20 let9) → (Eq let21 let1) → let25 → (Eq let28 let27) → (Eq let33 let32) → (Eq let35 let34) → (Eq let36 True) → (Eq let41 let38) → (Eq let44 let43) → (Eq let45 let39) → (Eq let47 let29) → (Eq let48 True) → (Eq let49 let29) → (Eq let62 let62) → (Eq let63 True) → (Eq let64 let17) → (Eq let66 True) → (Eq let67 True) → (Eq let68 let1) → (Eq let73 let72) → (Eq let14 let14) → let76 → (Eq let57 let24) → (Eq let51 let42) → (Eq let76 let77) → let80 → (Eq let80 let81) → (Eq let2 let65) → let33 → (Eq let83 let82) → (Eq let84 True) → (Eq let86 let85) → (Eq let87 False) → let62 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% LE.le skoX let1)
  let let3 := (Not let2)
  let let4 := (binrel% GT.gt skoX let1)
  let let5 := (binrel% GE.ge skoY let1)
  let let6 := (Not let5)
  let let7 := (binrel% LT.lt skoY let1)
  let let8 := (Int.ofNat 0)
  let let9 := (binrel% GE.ge skoY let8)
  let let10 := (Int.ofNat 1)
  let let11 := (Neg.neg let10)
  let let12 := (binrel% HMul.hMul let11 skoX)
  let let13 := (Rat.ofInt 1)
  let let14 := (Neg.neg let13)
  let let15 := (binrel% HMul.hMul let14 skoX)
  let let16 := (binrel% HMul.hMul let13 skoY)
  let let17 := (binrel% HAdd.hAdd (binrel% HMul.hMul let11 skoY) skoX)
  let let18 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let12 skoY))
  let let19 := (binrel% HMul.hMul let14 let1)
  let let20 := (binrel% LE.le let1 skoY)
  let let21 := (binrel% HMul.hMul let13 let1)
  let let22 := (binrel% HDiv.hDiv let10 (Int.ofNat 2000))
  let let23 := (Neg.neg let22)
  let let24 := (binrel% HMul.hMul let14 let22)
  let let25 := (Eq let24 let23)
  let let26 := (Int.ofNat 2)
  let let27 := (binrel% HDiv.hDiv let10 let26)
  let let28 := (binrel% HDiv.hDiv let13 (Rat.ofInt 2))
  let let29 := (binrel% GE.ge let17 let8)
  let let30 := (Not let29)
  let let31 := (Not let30)
  let let32 := (Eq let29 let31)
  let let33 := (Eq let31 let29)
  let let34 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let35 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let36 := (Eq let9 let9)
  let let37 := (binrel% HMul.hMul let11 pi)
  let let38 := (binrel% GE.ge (binrel% HAdd.hAdd let37 (binrel% HMul.hMul let26 skoY)) (Neg.neg (binrel% HDiv.hDiv let10 (Int.ofNat 1000))))
  let let39 := (binrel% HMul.hMul let27 pi)
  let let40 := (binrel% HAdd.hAdd let23 let39)
  let let41 := (binrel% LE.le let40 skoY)
  let let42 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let43 := (binrel% GE.ge pi let42)
  let let44 := (binrel% LE.le let42 pi)
  let let45 := (binrel% HMul.hMul pi let27)
  let let46 := (binrel% HAdd.hAdd skoY let12)
  let let47 := (binrel% LE.le let46 let1)
  let let48 := (binrel% LT.lt let14 let8)
  let let49 := (binrel% LE.le skoY skoX)
  let let50 := (Not let49)
  let let51 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let52 := (binrel% LE.le let51 pi)
  let let53 := (Not let52)
  let let54 := (binrel% LE.le pi let35)
  let let55 := (Not let54)
  let let56 := (binrel% HMul.hMul pi let28)
  let let57 := (binrel% HDiv.hDiv let14 (Rat.ofInt 2000))
  let let58 := (binrel% HAdd.hAdd let57 let56)
  let let59 := (binrel% LE.le let58 skoY)
  let let60 := (Not let59)
  let let61 := (Not let20)
  let let62 := (And let61 (And let60 (And let55 (And let53 (And let3 let50)))))
  let let63 := (Eq let29 let29)
  let let64 := (binrel% HMul.hMul let14 let46)
  let let65 := (binrel% GE.ge let12 let8)
  let let66 := (Eq let65 let65)
  let let67 := (binrel% GT.gt let13 let8)
  let let68 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1))
  let let69 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let19 let21))
  let let70 := (binrel% HAdd.hAdd let64 (binrel% HAdd.hAdd let15 let16))
  let let71 := (binrel% GE.ge let70 let69)
  let let72 := (Not let71)
  let let73 := (binrel% LT.lt let70 let69)
  let let74 := (Not let65)
  let let75 := (Not let74)
  let let76 := (Eq let75 let65)
  let let77 := (Eq let65 let75)
  let let78 := (Not let9)
  let let79 := (Not let78)
  let let80 := (Eq let79 let9)
  let let81 := (Eq let9 let79)
  let let82 := (Not let47)
  let let83 := (binrel% GT.gt let46 let1)
  let let84 := (binrel% GE.ge let1 let1)
  let let85 := (binrel% GE.ge let37 (Neg.neg let34))
  let let86 := (binrel% LE.le pi let34)
  let let87 := (Not True)
  let let88 := (And let74 let30)
  let let89 := (Not let43)
  let let90 := (Not let85)
  let let91 := (Not let38)
  let let92 := (And let78 (And let91 (And let90 (And let89 let88))))
  let let93 := (Eq let62 let92)
  let let94 := (Or let9 (Or let65 let29))
  let let95 := (Or let79 (Or let75 let31))
  let let96 := (Not let83)
  let let97 := (binrel% LT.lt let16 let21)
  let let98 := (And let67 let7)
  let let99 := (binrel% LT.lt let15 let19)
  let let100 := (And let48 let4)
  let let101 := (binrel% LT.lt let64 let19)
  let let102 := (And let48 let83)
fun lean_r0 : (Eq let4 let3) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let5 let9) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let15 let12) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let16 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let18 let1) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let19 let1) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let20 let9) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let21 let1) => -- THEORY_REWRITE_ARITH
fun lean_r9 : let25 => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let33 let32) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let36 True) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let41 let38) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let45 let39) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let47 let29) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let48 True) => -- EVALUATE
fun lean_r19 : (Eq let49 let29) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let62 let62) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let63 True) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let64 let17) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let66 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let67 True) => -- EVALUATE
fun lean_r25 : (Eq let68 let1) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let73 let72) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let14 let14) => -- THEORY_REWRITE_ARITH
fun lean_r28 : let76 => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let57 let24) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let51 let42) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let76 let77) => -- THEORY_REWRITE_BOOL
fun lean_r32 : let80 => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let80 let81) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let2 let65) => -- THEORY_REWRITE_ARITH
fun lean_r35 : let33 => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let83 let82) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let84 True) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let86 let85) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let87 False) => -- THEORY_REWRITE_BOOL
fun lean_a40 : let62 => by
have lean_s0 : (Or let79 (Or let75 (Or let31 False))) :=
  (scope (fun lean_a41 : let78 =>
    (scope (fun lean_a42 : let74 =>
      (scope (fun lean_a43 : let30 =>
        have lean_s0 : (Eq let82 let30) := by timed flipCongrArg lean_r17 [Not]
        have lean_s1 : (Eq let83 let30) := by timed Eq.trans lean_r36 lean_s0
        have lean_s2 : (Eq let30 let83) := by timed Eq.symm lean_s1
        have lean_s3 : let83 := by timed eqResolve lean_a43 lean_s2
        have lean_s4 : (Or let96 False) :=
          (scope (fun lean_a44 : let83 =>
            have lean_s4 : let48 := by timed trueElim lean_r18
            have lean_s5 : let102 := by timed And.intro lean_s4 lean_a44
            have lean_s6 : (Implies let102 let101) := by arithMulNeg [let46, let1, let14], 2
            have lean_s7 : let101 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let3 let74) := by timed flipCongrArg lean_r34 [Not]
            have lean_s9 : (Eq let4 let74) := by timed Eq.trans lean_r0 lean_s8
            have lean_s10 : (Eq let74 let4) := by timed Eq.symm lean_s9
            have lean_s11 : let4 := by timed eqResolve lean_a42 lean_s10
            have lean_s12 : let100 := by timed And.intro lean_s4 lean_s11
            have lean_s13 : (Implies let100 let99) := by arithMulNeg [skoX, let1, let14], 2
            have lean_s14 : let99 := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : let67 := by timed trueElim lean_r24
            have lean_s16 : (Eq let6 let78) := by timed flipCongrArg lean_r2 [Not]
            have lean_s17 : (Eq let7 let78) := by timed Eq.trans lean_r1 lean_s16
            have lean_s18 : (Eq let78 let7) := by timed Eq.symm lean_s17
            have lean_s19 : let7 := by timed eqResolve lean_a41 lean_s18
            have lean_s20 : let98 := by timed And.intro lean_s15 lean_s19
            have lean_s21 : (Implies let98 let97) := by arithMulPos [skoY, let1, let13], 0
            have lean_s22 : let97 := by timed modusPonens lean_s20 lean_s21
            have lean_s23 : let73 := by sumBounds [lean_s7, lean_s14, lean_s22]
            let lean_s24 := by timed congrHAdd lean_r3 lean_r4
            have lean_s25 : (Eq let70 let18) := by timed congrHAdd lean_r22 lean_s24
            have lean_s26 : (Eq let70 let1) := by timed Eq.trans lean_s25 lean_r5
            let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
            let lean_s28 := by timed congrHAdd lean_r6 lean_r8
            have lean_s29 : (Eq let69 let68) := by timed congrHAdd lean_r6 lean_s28
            have lean_s30 : (Eq let69 let1) := by timed Eq.trans lean_s29 lean_r25
            have lean_s31 : (Eq let71 let84) := by timed congr lean_s27 lean_s30
            have lean_s32 : (Eq let71 True) := by timed Eq.trans lean_s31 lean_r37
            have lean_s33 : (Eq let72 let87) := by timed flipCongrArg lean_s32 [Not]
            have lean_s34 : (Eq let72 False) := by timed Eq.trans lean_s33 lean_r39
            have lean_s35 : (Eq let73 False) := by timed Eq.trans lean_r26 lean_s34
            show False from by timed eqResolve lean_s23 lean_s35
          ))
        have lean_s5 : let96 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let96 let31) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let96 let29) := by timed Eq.trans lean_s6 lean_r35
        have lean_s8 : (Eq let29 let47) := by timed Eq.symm lean_r17
        have lean_s9 : (Eq let96 let47) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let47 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let29 let96) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let47 let96) := by timed Eq.trans lean_r17 lean_s11
        have lean_s13 : let96 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let78 let88)) := by liftOrNToNeg lean_s0
have lean_s2 : let95 := by timed flipNotAnd lean_s1 [let78, let74, let30]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let36 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let81 let36) := by timed congr lean_s5 lean_r32
have lean_s7 : (Eq let81 True) := by timed Eq.trans lean_s6 lean_r13
have lean_s8 : (Eq let80 True) := by timed Eq.trans lean_r33 lean_s7
have lean_s9 : let80 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let66 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let77 let66) := by timed congr lean_s12 lean_r28
have lean_s14 : (Eq let77 True) := by timed Eq.trans lean_s13 lean_r23
have lean_s15 : (Eq let76 True) := by timed Eq.trans lean_r31 lean_s14
have lean_s16 : let76 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let63 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let32 let63) := by timed congr lean_s19 lean_r35
have lean_s21 : (Eq let32 True) := by timed Eq.trans lean_s20 lean_r21
have lean_s22 : (Eq let33 True) := by timed Eq.trans lean_r11 lean_s21
have lean_s23 : let33 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq let95 let94) := by timed congr lean_s10 lean_s24
have lean_s26 : let94 := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Eq And And) := by timed rfl
have lean_s28 : (Eq let61 let78) := by timed flipCongrArg lean_r7 [Not]
let lean_s29 := by timed congr lean_s27 lean_s28
let lean_s30 := by timed flipCongrArg lean_r27 [HMul.hMul]
have lean_s31 : (Eq let22 let22) := by timed rfl
have lean_s32 : (Eq let24 let24) := by timed congr lean_s30 lean_s31
have lean_s33 : let25 := by timed Eq.trans lean_s32 lean_r9
have lean_s34 : (Eq let57 let23) := by timed Eq.trans lean_r29 lean_s33
let lean_s35 := by timed flipCongrArg lean_s34 [HAdd.hAdd]
have lean_s36 : (Eq pi pi) := by timed rfl
let lean_s37 := by timed flipCongrArg lean_s36 [HMul.hMul]
have lean_s38 : (Eq let56 let45) := by timed congr lean_s37 lean_r10
have lean_s39 : (Eq let56 let39) := by timed Eq.trans lean_s38 lean_r16
have lean_s40 : (Eq let58 let40) := by timed congr lean_s35 lean_s39
let lean_s41 := by timed flipCongrArg lean_s40 [LE.le]
have lean_s42 : (Eq skoY skoY) := by timed rfl
have lean_s43 : (Eq let59 let41) := by timed congr lean_s41 lean_s42
have lean_s44 : (Eq let59 let38) := by timed Eq.trans lean_s43 lean_r14
have lean_s45 : (Eq let60 let91) := by timed flipCongrArg lean_s44 [Not]
let lean_s46 := by timed congr lean_s27 lean_s45
let lean_s47 := by timed flipCongrArg lean_s36 [LE.le]
have lean_s48 : (Eq let54 let86) := by timed congr lean_s47 lean_r12
have lean_s49 : (Eq let54 let85) := by timed Eq.trans lean_s48 lean_r38
have lean_s50 : (Eq let55 let90) := by timed flipCongrArg lean_s49 [Not]
let lean_s51 := by timed congr lean_s27 lean_s50
let lean_s52 := by timed flipCongrArg lean_r30 [LE.le]
have lean_s53 : (Eq let52 let44) := by timed congr lean_s52 lean_s36
have lean_s54 : (Eq let52 let43) := by timed Eq.trans lean_s53 lean_r15
have lean_s55 : (Eq let53 let89) := by timed flipCongrArg lean_s54 [Not]
let lean_s56 := by timed congr lean_s27 lean_s55
have lean_s57 : (Eq let3 let74) := by timed flipCongrArg lean_r34 [Not]
let lean_s58 := by timed congr lean_s27 lean_s57
have lean_s59 : (Eq let50 let30) := by timed flipCongrArg lean_r19 [Not]
let lean_s60 := by timed congr lean_s58 lean_s59
let lean_s61 := by timed congr lean_s56 lean_s60
let lean_s62 := by timed congr lean_s51 lean_s61
let lean_s63 := by timed congr lean_s46 lean_s62
have lean_s64 : let93 := by timed congr lean_s29 lean_s63
have lean_s65 : let93 := by timed Eq.trans lean_r20 lean_s64
have lean_s66 : let92 := by timed eqResolve lean_a40 lean_s65
have lean_s67 : let30 := by andElim lean_s66, 5
let lean_s68 := by R1 lean_s26, lean_s67, let29, [(- 1), 0]
have lean_s69 : let74 := by andElim lean_s66, 4
let lean_s70 := by R1 lean_s68, lean_s69, let65, [(- 1), 0]
have lean_s71 : let78 := by andElim lean_s66, 0
exact (show False from by R1 lean_s70, lean_s71, let9, [0, 0])


