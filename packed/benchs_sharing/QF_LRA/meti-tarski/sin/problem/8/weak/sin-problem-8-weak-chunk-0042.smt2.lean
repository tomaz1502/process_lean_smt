open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% GE.ge pi let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le let5 pi)
  let let7 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let8 := (Neg.neg let7)
  let let9 := (binrel% HAdd.hAdd let5 let8)
  let let10 := (Neg.neg let2)
  let let11 := (binrel% HMul.hMul let10 let7)
  let let12 := (binrel% HMul.hMul let2 let5)
  let let13 := (binrel% HAdd.hAdd let12 let11)
  let let14 := (binrel% HMul.hMul let10 pi)
  let let15 := (binrel% HMul.hMul let2 pi)
  let let16 := (binrel% HAdd.hAdd let15 let14)
  let let17 := (binrel% GE.ge let16 let13)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let13)
  let let20 := (Int.ofNat 1)
  let let21 := (binrel% HDiv.hDiv let20 (Int.ofNat 2000))
  let let22 := (Neg.neg let21)
  let let23 := (binrel% HMul.hMul let10 let21)
  let let24 := (Eq let23 let22)
  let let25 := (binrel% LT.lt let10 let1)
  let let26 := (Int.ofNat 2)
  let let27 := (binrel% HDiv.hDiv let20 let26)
  let let28 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let29 := (Neg.neg let20)
  let let30 := (binrel% HMul.hMul let29 pi)
  let let31 := (binrel% HAdd.hAdd pi let30)
  let let32 := (binrel% HMul.hMul let27 pi)
  let let33 := (binrel% HMul.hMul pi let27)
  let let34 := (binrel% GE.ge (binrel% HAdd.hAdd let30 (binrel% HMul.hMul let26 skoY)) (Neg.neg (binrel% HDiv.hDiv let20 (Int.ofNat 1000))))
  let let35 := (binrel% HAdd.hAdd let22 let32)
  let let36 := (binrel% LE.le let35 skoY)
  let let37 := (binrel% HDiv.hDiv let10 (Rat.ofInt 2000))
  let let38 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let39 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let40 := (binrel% GE.ge pi let38)
  let let41 := (binrel% LE.le let38 pi)
  let let42 := (binrel% LE.le pi let7)
  let let43 := (Not let42)
  let let44 := (binrel% GT.gt pi let7)
  let let45 := (binrel% GE.ge (binrel% HMul.hMul let29 skoX) let1)
  let let46 := (binrel% LE.le skoX let5)
  let let47 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let48 := (binrel% GE.ge pi let5)
  let let49 := (Not let48)
  let let50 := (binrel% LT.lt pi let5)
  let let51 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let29 skoY)) let1)
  let let52 := (binrel% LE.le skoY skoX)
  let let53 := (Not True)
  let let54 := (binrel% GE.ge let5 let8)
  let let55 := (Not let52)
  let let56 := (Not let46)
  let let57 := (binrel% LE.le let39 pi)
  let let58 := (Not let57)
  let let59 := (binrel% LE.le pi let47)
  let let60 := (Not let59)
  let let61 := (binrel% HMul.hMul pi let28)
  let let62 := (binrel% HAdd.hAdd let37 let61)
  let let63 := (binrel% LE.le let62 skoY)
  let let64 := (Not let63)
  let let65 := (Not let6)
  let let66 := (And let65 (And let64 (And let60 (And let58 (And let56 let55)))))
  let let67 := (binrel% GE.ge let30 let8)
  let let68 := (Not let67)
  let let69 := (Not let68)
  let let70 := (Not let4)
  let let71 := (Not let70)
  let let72 := (Not let51)
  let let73 := (Not let45)
  let let74 := (Not let40)
  let let75 := (Not let34)
  let let76 := (And let70 (And let75 (And let68 (And let74 (And let73 let72)))))
  let let77 := (Eq let66 let76)
  let let78 := (Or let4 let67)
  let let79 := (Or let71 let69)
  let let80 := (binrel% LT.lt let14 let11)
  let let81 := (And let25 let44)
  let let82 := (binrel% LT.lt let15 let12)
  let let83 := (And let3 let50)
(Eq let3 True) → (Eq let6 let4) → (Eq let9 let8) → (Eq let10 let10) → (Eq let19 let18) → let24 → (Eq let25 True) → (Eq let28 let27) → (Eq let31 let5) → (Eq let33 let32) → (Eq let36 let34) → (Eq let37 let23) → (Eq let39 let38) → (Eq let41 let40) → (Eq let44 let43) → (Eq let46 let45) → (Eq let47 let7) → (Eq let12 let5) → (Eq let50 let49) → (Eq let52 let51) → (Eq let53 False) → (Eq let54 True) → (Eq let66 let66) → (Eq let11 let8) → (Eq let42 let67) → (Eq let48 let4) → (Eq let69 let67) → (Eq let14 let30) → (Eq let71 let4) → (Eq let15 pi) → let66 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% GE.ge pi let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le let5 pi)
  let let7 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let8 := (Neg.neg let7)
  let let9 := (binrel% HAdd.hAdd let5 let8)
  let let10 := (Neg.neg let2)
  let let11 := (binrel% HMul.hMul let10 let7)
  let let12 := (binrel% HMul.hMul let2 let5)
  let let13 := (binrel% HAdd.hAdd let12 let11)
  let let14 := (binrel% HMul.hMul let10 pi)
  let let15 := (binrel% HMul.hMul let2 pi)
  let let16 := (binrel% HAdd.hAdd let15 let14)
  let let17 := (binrel% GE.ge let16 let13)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let13)
  let let20 := (Int.ofNat 1)
  let let21 := (binrel% HDiv.hDiv let20 (Int.ofNat 2000))
  let let22 := (Neg.neg let21)
  let let23 := (binrel% HMul.hMul let10 let21)
  let let24 := (Eq let23 let22)
  let let25 := (binrel% LT.lt let10 let1)
  let let26 := (Int.ofNat 2)
  let let27 := (binrel% HDiv.hDiv let20 let26)
  let let28 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let29 := (Neg.neg let20)
  let let30 := (binrel% HMul.hMul let29 pi)
  let let31 := (binrel% HAdd.hAdd pi let30)
  let let32 := (binrel% HMul.hMul let27 pi)
  let let33 := (binrel% HMul.hMul pi let27)
  let let34 := (binrel% GE.ge (binrel% HAdd.hAdd let30 (binrel% HMul.hMul let26 skoY)) (Neg.neg (binrel% HDiv.hDiv let20 (Int.ofNat 1000))))
  let let35 := (binrel% HAdd.hAdd let22 let32)
  let let36 := (binrel% LE.le let35 skoY)
  let let37 := (binrel% HDiv.hDiv let10 (Rat.ofInt 2000))
  let let38 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let39 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let40 := (binrel% GE.ge pi let38)
  let let41 := (binrel% LE.le let38 pi)
  let let42 := (binrel% LE.le pi let7)
  let let43 := (Not let42)
  let let44 := (binrel% GT.gt pi let7)
  let let45 := (binrel% GE.ge (binrel% HMul.hMul let29 skoX) let1)
  let let46 := (binrel% LE.le skoX let5)
  let let47 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let48 := (binrel% GE.ge pi let5)
  let let49 := (Not let48)
  let let50 := (binrel% LT.lt pi let5)
  let let51 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let29 skoY)) let1)
  let let52 := (binrel% LE.le skoY skoX)
  let let53 := (Not True)
  let let54 := (binrel% GE.ge let5 let8)
  let let55 := (Not let52)
  let let56 := (Not let46)
  let let57 := (binrel% LE.le let39 pi)
  let let58 := (Not let57)
  let let59 := (binrel% LE.le pi let47)
  let let60 := (Not let59)
  let let61 := (binrel% HMul.hMul pi let28)
  let let62 := (binrel% HAdd.hAdd let37 let61)
  let let63 := (binrel% LE.le let62 skoY)
  let let64 := (Not let63)
  let let65 := (Not let6)
  let let66 := (And let65 (And let64 (And let60 (And let58 (And let56 let55)))))
  let let67 := (binrel% GE.ge let30 let8)
  let let68 := (Not let67)
  let let69 := (Not let68)
  let let70 := (Not let4)
  let let71 := (Not let70)
  let let72 := (Not let51)
  let let73 := (Not let45)
  let let74 := (Not let40)
  let let75 := (Not let34)
  let let76 := (And let70 (And let75 (And let68 (And let74 (And let73 let72)))))
  let let77 := (Eq let66 let76)
  let let78 := (Or let4 let67)
  let let79 := (Or let71 let69)
  let let80 := (binrel% LT.lt let14 let11)
  let let81 := (And let25 let44)
  let let82 := (binrel% LT.lt let15 let12)
  let let83 := (And let3 let50)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let6 let4) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let10 let10) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r5 : let24 => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let25 True) => -- EVALUATE
fun lean_r7 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let31 let5) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let36 let34) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let37 let23) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let46 let45) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let47 let7) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let12 let5) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let53 False) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let54 True) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let66 let66) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let11 let8) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let42 let67) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let48 let4) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let69 let67) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let14 let30) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let71 let4) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let15 pi) => -- THEORY_REWRITE_ARITH
fun lean_a30 : let66 => by
have lean_s0 : (Or let71 (Or let69 False)) :=
  (scope (fun lean_a31 : let70 =>
    (scope (fun lean_a32 : let68 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let49 let70) := by timed flipCongrArg lean_r25 [Not]
      have lean_s2 : (Eq let50 let70) := by timed Eq.trans lean_r18 lean_s1
      have lean_s3 : (Eq let70 let50) := by timed Eq.symm lean_s2
      have lean_s4 : let50 := by timed eqResolve lean_a31 lean_s3
      have lean_s5 : let83 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let83 let82) := by arithMulPos [pi, let5, let2], 0
      have lean_s7 : let82 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let25 := by timed trueElim lean_r6
      have lean_s9 : (Eq let43 let68) := by timed flipCongrArg lean_r24 [Not]
      have lean_s10 : (Eq let44 let68) := by timed Eq.trans lean_r14 lean_s9
      have lean_s11 : (Eq let68 let44) := by timed Eq.symm lean_s10
      have lean_s12 : let44 := by timed eqResolve lean_a32 lean_s11
      have lean_s13 : let81 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let81 let80) := by arithMulNeg [pi, let7, let10], 2
      have lean_s15 : let80 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let19 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r29 [HAdd.hAdd]
      have lean_s18 : (Eq let16 let31) := by timed congr lean_s17 lean_r27
      have lean_s19 : (Eq let16 let5) := by timed Eq.trans lean_s18 lean_r8
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r17 [HAdd.hAdd]
      have lean_s22 : (Eq let13 let9) := by timed congr lean_s21 lean_r23
      have lean_s23 : (Eq let13 let8) := by timed Eq.trans lean_s22 lean_r2
      have lean_s24 : (Eq let17 let54) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let17 True) := by timed Eq.trans lean_s24 lean_r21
      have lean_s26 : (Eq let18 let53) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let18 False) := by timed Eq.trans lean_s26 lean_r20
      have lean_s28 : (Eq let19 False) := by timed Eq.trans lean_r4 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let70 let68)) := by liftOrNToNeg lean_s0
have lean_s2 : let79 := by timed flipNotAnd lean_s1 [let70, let68]
let lean_s3 := by timed flipCongrArg lean_r28 [Or]
have lean_s4 : (Eq let79 let78) := by timed congr lean_s3 lean_r26
have lean_s5 : let78 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
have lean_s7 : (Eq let65 let70) := by timed flipCongrArg lean_r1 [Not]
let lean_s8 := by timed congr lean_s6 lean_s7
let lean_s9 := by timed flipCongrArg lean_r3 [HMul.hMul]
have lean_s10 : (Eq let21 let21) := by timed rfl
have lean_s11 : (Eq let23 let23) := by timed congr lean_s9 lean_s10
have lean_s12 : let24 := by timed Eq.trans lean_s11 lean_r5
have lean_s13 : (Eq let37 let22) := by timed Eq.trans lean_r11 lean_s12
let lean_s14 := by timed flipCongrArg lean_s13 [HAdd.hAdd]
have lean_s15 : (Eq pi pi) := by timed rfl
let lean_s16 := by timed flipCongrArg lean_s15 [HMul.hMul]
have lean_s17 : (Eq let61 let33) := by timed congr lean_s16 lean_r7
have lean_s18 : (Eq let61 let32) := by timed Eq.trans lean_s17 lean_r9
have lean_s19 : (Eq let62 let35) := by timed congr lean_s14 lean_s18
let lean_s20 := by timed flipCongrArg lean_s19 [LE.le]
have lean_s21 : (Eq skoY skoY) := by timed rfl
have lean_s22 : (Eq let63 let36) := by timed congr lean_s20 lean_s21
have lean_s23 : (Eq let63 let34) := by timed Eq.trans lean_s22 lean_r10
have lean_s24 : (Eq let64 let75) := by timed flipCongrArg lean_s23 [Not]
let lean_s25 := by timed congr lean_s6 lean_s24
let lean_s26 := by timed flipCongrArg lean_s15 [LE.le]
have lean_s27 : (Eq let59 let42) := by timed congr lean_s26 lean_r16
have lean_s28 : (Eq let59 let67) := by timed Eq.trans lean_s27 lean_r24
have lean_s29 : (Eq let60 let68) := by timed flipCongrArg lean_s28 [Not]
let lean_s30 := by timed congr lean_s6 lean_s29
let lean_s31 := by timed flipCongrArg lean_r12 [LE.le]
have lean_s32 : (Eq let57 let41) := by timed congr lean_s31 lean_s15
have lean_s33 : (Eq let57 let40) := by timed Eq.trans lean_s32 lean_r13
have lean_s34 : (Eq let58 let74) := by timed flipCongrArg lean_s33 [Not]
let lean_s35 := by timed congr lean_s6 lean_s34
have lean_s36 : (Eq let56 let73) := by timed flipCongrArg lean_r15 [Not]
let lean_s37 := by timed congr lean_s6 lean_s36
have lean_s38 : (Eq let55 let72) := by timed flipCongrArg lean_r19 [Not]
let lean_s39 := by timed congr lean_s37 lean_s38
let lean_s40 := by timed congr lean_s35 lean_s39
let lean_s41 := by timed congr lean_s30 lean_s40
let lean_s42 := by timed congr lean_s25 lean_s41
have lean_s43 : let77 := by timed congr lean_s8 lean_s42
have lean_s44 : let77 := by timed Eq.trans lean_r22 lean_s43
have lean_s45 : let76 := by timed eqResolve lean_a30 lean_s44
have lean_s46 : let68 := by andElim lean_s45, 2
let lean_s47 := by R1 lean_s5, lean_s46, let67, [(- 1), 0]
have lean_s48 : let70 := by andElim lean_s45, 0
exact (show False from by R1 lean_s47, lean_s48, let4, [0, 0])


