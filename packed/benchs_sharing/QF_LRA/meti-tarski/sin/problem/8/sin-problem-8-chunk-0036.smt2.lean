open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let5 := (binrel% LE.le pi let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt pi let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% HMul.hMul let8 let4)
  let let10 := (Rat.ofInt 0)
  let let11 := (binrel% HMul.hMul let2 let10)
  let let12 := (binrel% HAdd.hAdd let11 let9)
  let let13 := (binrel% HMul.hMul let8 pi)
  let let14 := (binrel% HMul.hMul let2 pi)
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% GE.ge let15 let12)
  let let17 := (Not let16)
  let let18 := (binrel% LT.lt let15 let12)
  let let19 := (Int.ofNat 1)
  let let20 := (Neg.neg let19)
  let let21 := (binrel% HMul.hMul let20 pi)
  let let22 := (binrel% HAdd.hAdd pi let21)
  let let23 := (Neg.neg let4)
  let let24 := (binrel% LT.lt let8 let1)
  let let25 := (binrel% GE.ge let10 let23)
  let let26 := (binrel% HAdd.hAdd let10 let23)
  let let27 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let20 skoY)) let1)
  let let28 := (binrel% LE.le skoY skoX)
  let let29 := (binrel% GE.ge let21 let23)
  let let30 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let31 := (Int.ofNat 2)
  let let32 := (binrel% HDiv.hDiv let19 let31)
  let let33 := (binrel% HMul.hMul let32 pi)
  let let34 := (binrel% HMul.hMul pi let32)
  let let35 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let36 := (binrel% GE.ge (binrel% HAdd.hAdd let21 (binrel% HMul.hMul let31 skoY)) let1)
  let let37 := (binrel% LE.le let33 skoY)
  let let38 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let39 := (binrel% GE.ge pi let38)
  let let40 := (binrel% LE.le let38 pi)
  let let41 := (binrel% GE.ge let21 let1)
  let let42 := (binrel% LE.le pi let10)
  let let43 := (binrel% GE.ge (binrel% HMul.hMul let20 skoX) let1)
  let let44 := (binrel% LE.le skoX let10)
  let let45 := (Not let28)
  let let46 := (Not let44)
  let let47 := (binrel% HMul.hMul pi let35)
  let let48 := (binrel% LE.le let47 skoY)
  let let49 := (Not let48)
  let let50 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let51 := (binrel% LE.le let50 pi)
  let let52 := (Not let51)
  let let53 := (binrel% LE.le pi let30)
  let let54 := (Not let53)
  let let55 := (And let42 (And let54 (And let52 (And let49 (And let46 let45)))))
  let let56 := (Not let29)
  let let57 := (Not let56)
  let let58 := (Not True)
  let let59 := (Not let27)
  let let60 := (Not let43)
  let let61 := (Not let36)
  let let62 := (Not let39)
  let let63 := (And let41 (And let56 (And let62 (And let61 (And let60 let59)))))
  let let64 := (Eq let55 let63)
  let let65 := (Not let41)
  let let66 := (Or let29 let65)
  let let67 := (Or let57 let65)
  let let68 := (binrel% LT.lt let13 let9)
  let let69 := (And let24 let7)
  let let70 := (binrel% LE.le let14 let11)
  let let71 := (And let3 let42)
(Eq let3 True) → (Eq let7 let6) → (Eq let18 let17) → (Eq let14 pi) → (Eq let13 let21) → (Eq let22 let10) → (Eq let11 let10) → (Eq let9 let23) → (Eq let24 True) → (Eq let25 True) → (Eq let26 let23) → (Eq let28 let27) → (Eq let5 let29) → (Eq let30 let4) → (Eq let34 let33) → (Eq let35 let32) → (Eq let37 let36) → (Eq let40 let39) → (Eq let42 let41) → (Eq let44 let43) → (Eq let55 let55) → (Eq let50 let38) → (Eq let57 let29) → (Eq let58 False) → let55 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let5 := (binrel% LE.le pi let4)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt pi let4)
  let let8 := (Neg.neg let2)
  let let9 := (binrel% HMul.hMul let8 let4)
  let let10 := (Rat.ofInt 0)
  let let11 := (binrel% HMul.hMul let2 let10)
  let let12 := (binrel% HAdd.hAdd let11 let9)
  let let13 := (binrel% HMul.hMul let8 pi)
  let let14 := (binrel% HMul.hMul let2 pi)
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% GE.ge let15 let12)
  let let17 := (Not let16)
  let let18 := (binrel% LT.lt let15 let12)
  let let19 := (Int.ofNat 1)
  let let20 := (Neg.neg let19)
  let let21 := (binrel% HMul.hMul let20 pi)
  let let22 := (binrel% HAdd.hAdd pi let21)
  let let23 := (Neg.neg let4)
  let let24 := (binrel% LT.lt let8 let1)
  let let25 := (binrel% GE.ge let10 let23)
  let let26 := (binrel% HAdd.hAdd let10 let23)
  let let27 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let20 skoY)) let1)
  let let28 := (binrel% LE.le skoY skoX)
  let let29 := (binrel% GE.ge let21 let23)
  let let30 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let31 := (Int.ofNat 2)
  let let32 := (binrel% HDiv.hDiv let19 let31)
  let let33 := (binrel% HMul.hMul let32 pi)
  let let34 := (binrel% HMul.hMul pi let32)
  let let35 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let36 := (binrel% GE.ge (binrel% HAdd.hAdd let21 (binrel% HMul.hMul let31 skoY)) let1)
  let let37 := (binrel% LE.le let33 skoY)
  let let38 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let39 := (binrel% GE.ge pi let38)
  let let40 := (binrel% LE.le let38 pi)
  let let41 := (binrel% GE.ge let21 let1)
  let let42 := (binrel% LE.le pi let10)
  let let43 := (binrel% GE.ge (binrel% HMul.hMul let20 skoX) let1)
  let let44 := (binrel% LE.le skoX let10)
  let let45 := (Not let28)
  let let46 := (Not let44)
  let let47 := (binrel% HMul.hMul pi let35)
  let let48 := (binrel% LE.le let47 skoY)
  let let49 := (Not let48)
  let let50 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let51 := (binrel% LE.le let50 pi)
  let let52 := (Not let51)
  let let53 := (binrel% LE.le pi let30)
  let let54 := (Not let53)
  let let55 := (And let42 (And let54 (And let52 (And let49 (And let46 let45)))))
  let let56 := (Not let29)
  let let57 := (Not let56)
  let let58 := (Not True)
  let let59 := (Not let27)
  let let60 := (Not let43)
  let let61 := (Not let36)
  let let62 := (Not let39)
  let let63 := (And let41 (And let56 (And let62 (And let61 (And let60 let59)))))
  let let64 := (Eq let55 let63)
  let let65 := (Not let41)
  let let66 := (Or let29 let65)
  let let67 := (Or let57 let65)
  let let68 := (binrel% LT.lt let13 let9)
  let let69 := (And let24 let7)
  let let70 := (binrel% LE.le let14 let11)
  let let71 := (And let3 let42)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let14 pi) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let13 let21) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let22 let10) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let11 let10) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let9 let23) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let24 True) => -- EVALUATE
fun lean_r9 : (Eq let25 True) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let26 let23) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let5 let29) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let30 let4) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let35 let32) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let40 let39) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let55 let55) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let50 let38) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let57 let29) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let58 False) => -- THEORY_REWRITE_BOOL
fun lean_a24 : let55 => by
have lean_s0 : (Or let57 (Or let65 False)) :=
  (scope (fun lean_a25 : let56 =>
    (scope (fun lean_a26 : let41 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let41 let42) := by timed Eq.symm lean_r18
      have lean_s2 : let42 := by timed eqResolve lean_a26 lean_s1
      have lean_s3 : let71 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let71 let70) := by arithMulPos [pi, let10, let2], 1
      have lean_s5 : let70 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let24 := by timed trueElim lean_r8
      have lean_s7 : (Eq let6 let56) := by timed flipCongrArg lean_r12 [Not]
      have lean_s8 : (Eq let7 let56) := by timed Eq.trans lean_r1 lean_s7
      have lean_s9 : (Eq let56 let7) := by timed Eq.symm lean_s8
      have lean_s10 : let7 := by timed eqResolve lean_a25 lean_s9
      have lean_s11 : let69 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let69 let68) := by arithMulNeg [pi, let4, let8], 2
      have lean_s13 : let68 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let18 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r3 [HAdd.hAdd]
      have lean_s16 : (Eq let15 let22) := by timed congr lean_s15 lean_r4
      have lean_s17 : (Eq let15 let10) := by timed Eq.trans lean_s16 lean_r5
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r6 [HAdd.hAdd]
      have lean_s20 : (Eq let12 let26) := by timed congr lean_s19 lean_r7
      have lean_s21 : (Eq let12 let23) := by timed Eq.trans lean_s20 lean_r10
      have lean_s22 : (Eq let16 let25) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let16 True) := by timed Eq.trans lean_s22 lean_r9
      have lean_s24 : (Eq let17 let58) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let17 False) := by timed Eq.trans lean_s24 lean_r23
      have lean_s26 : (Eq let18 False) := by timed Eq.trans lean_r2 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let56 let41)) := by liftOrNToNeg lean_s0
have lean_s2 : let67 := by timed flipNotAnd lean_s1 [let56, let41]
let lean_s3 := by timed flipCongrArg lean_r22 [Or]
have lean_s4 : (Eq let65 let65) := by timed rfl
have lean_s5 : (Eq let67 let66) := by timed congr lean_s3 lean_s4
have lean_s6 : let66 := by timed eqResolve lean_s2 lean_s5
have lean_s7 : (Eq And And) := by timed rfl
let lean_s8 := by timed congr lean_s7 lean_r18
have lean_s9 : (Eq pi pi) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [LE.le]
have lean_s11 : (Eq let53 let5) := by timed congr lean_s10 lean_r13
have lean_s12 : (Eq let53 let29) := by timed Eq.trans lean_s11 lean_r12
have lean_s13 : (Eq let54 let56) := by timed flipCongrArg lean_s12 [Not]
let lean_s14 := by timed congr lean_s7 lean_s13
let lean_s15 := by timed flipCongrArg lean_r21 [LE.le]
have lean_s16 : (Eq let51 let40) := by timed congr lean_s15 lean_s9
have lean_s17 : (Eq let51 let39) := by timed Eq.trans lean_s16 lean_r17
have lean_s18 : (Eq let52 let62) := by timed flipCongrArg lean_s17 [Not]
let lean_s19 := by timed congr lean_s7 lean_s18
let lean_s20 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s21 : (Eq let47 let34) := by timed congr lean_s20 lean_r15
have lean_s22 : (Eq let47 let33) := by timed Eq.trans lean_s21 lean_r14
let lean_s23 := by timed flipCongrArg lean_s22 [LE.le]
have lean_s24 : (Eq skoY skoY) := by timed rfl
have lean_s25 : (Eq let48 let37) := by timed congr lean_s23 lean_s24
have lean_s26 : (Eq let48 let36) := by timed Eq.trans lean_s25 lean_r16
have lean_s27 : (Eq let49 let61) := by timed flipCongrArg lean_s26 [Not]
let lean_s28 := by timed congr lean_s7 lean_s27
have lean_s29 : (Eq let46 let60) := by timed flipCongrArg lean_r19 [Not]
let lean_s30 := by timed congr lean_s7 lean_s29
have lean_s31 : (Eq let45 let59) := by timed flipCongrArg lean_r11 [Not]
let lean_s32 := by timed congr lean_s30 lean_s31
let lean_s33 := by timed congr lean_s28 lean_s32
let lean_s34 := by timed congr lean_s19 lean_s33
let lean_s35 := by timed congr lean_s14 lean_s34
have lean_s36 : let64 := by timed congr lean_s8 lean_s35
have lean_s37 : let64 := by timed Eq.trans lean_r20 lean_s36
have lean_s38 : let63 := by timed eqResolve lean_a24 lean_s37
have lean_s39 : let56 := by andElim lean_s38, 1
let lean_s40 := by R1 lean_s6, lean_s39, let29, [(- 1), 0]
have lean_s41 : let41 := by andElim lean_s38, 0
exact (show False from by R2 lean_s40, lean_s41, let41, [0, 0])


