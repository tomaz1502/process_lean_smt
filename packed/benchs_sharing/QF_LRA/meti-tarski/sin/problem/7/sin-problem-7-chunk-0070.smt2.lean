open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let2 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let3 := (Int.ofNat 1)
  let let4 := (Neg.neg let3)
  let let5 := (binrel% GE.ge (binrel% HMul.hMul let4 pi) (Neg.neg let1))
  let let6 := (binrel% LE.le pi let1)
  let let7 := (Int.ofNat 0)
  let let8 := (binrel% GE.ge skoX let7)
  let let9 := (Not let8)
  let let10 := (binrel% GE.ge pi let7)
  let let11 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let12 := (binrel% GE.ge pi let11)
  let let13 := (Not let12)
  let let14 := (Not let5)
  let let15 := (binrel% GE.ge (binrel% HMul.hMul let4 skoX) let7)
  let let16 := (Not let15)
  let let17 := (And let16 (And let14 (And let13 (And let10 (And let8 let9)))))
  let let18 := (And True let17)
  let let19 := (binrel% LE.le skoY skoX)
  let let20 := (Not let19)
  let let21 := (Rat.ofInt 0)
  let let22 := (binrel% LE.le let21 skoX)
  let let23 := (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))
  let let24 := (binrel% HMul.hMul pi let23)
  let let25 := (binrel% LE.le skoY let24)
  let let26 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let27 := (binrel% LE.le let26 pi)
  let let28 := (Not let27)
  let let29 := (binrel% LE.le pi let2)
  let let30 := (Not let29)
  let let31 := (binrel% LE.le skoX let21)
  let let32 := (Not let31)
  let let33 := (Eq skoY let21)
  let let34 := (And let33 (And let32 (And let30 (And let28 (And let25 (And let22 let20))))))
  let let35 := (Int.ofNat 2)
  let let36 := (binrel% HDiv.hDiv let3 let35)
  let let37 := (Neg.neg let35)
  let let38 := (binrel% HMul.hMul let37 skoY)
  let let39 := (binrel% HAdd.hAdd pi let38)
  let let40 := (binrel% GE.ge let39 let7)
  let let41 := (binrel% HMul.hMul let36 pi)
  let let42 := (binrel% LE.le skoY let41)
  let let43 := (binrel% HAdd.hAdd skoX let21)
  let let44 := (Eq let21 let21)
  let let45 := (binrel% HMul.hMul let4 let21)
  let let46 := (binrel% HAdd.hAdd pi let21)
  let let47 := (binrel% HMul.hMul let37 let21)
  let let48 := (binrel% HMul.hMul let4 skoY)
  let let49 := (binrel% HAdd.hAdd skoX let48)
  let let50 := (binrel% GE.ge let49 let7)
  let let51 := (binrel% HMul.hMul pi let36)
  let let52 := (binrel% LE.le let11 pi)
  let let53 := (Not let50)
  let let54 := (And let33 (And let16 (And let14 (And let13 (And let40 (And let8 let53))))))
  let let55 := (binrel% HAdd.hAdd skoX let45)
  let let56 := (binrel% GE.ge let55 let7)
  let let57 := (Not let56)
  let let58 := (binrel% HAdd.hAdd pi let47)
  let let59 := (binrel% GE.ge let58 let7)
  let let60 := (And let44 (And let16 (And let14 (And let13 (And let59 (And let8 let57))))))
  let let61 := (Eq let7 let7)
  let let62 := (Eq skoX skoX)
  let let63 := (Eq let8 let8)
  let let64 := (Eq And And)
  let let65 := (Eq pi pi)
  let let66 := (Eq let13 let13)
  let let67 := (Eq let14 let14)
  let let68 := (Eq let16 let16)
  let let69 := (Eq let34 let54)
(Eq let2 let1) → (Eq let6 let5) → (Eq let18 let17) → (Eq let34 let34) → (Eq let23 let36) → (Eq let42 let40) → (Eq let43 skoX) → (Eq let44 True) → (Eq let45 let21) → (Eq let26 let11) → (Eq let46 pi) → (Eq let47 let21) → (Eq let19 let50) → (Eq let22 let8) → (Eq let31 let15) → (Eq let51 let41) → (Eq let52 let12) → let34 → False :=
  let let1 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let2 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let3 := (Int.ofNat 1)
  let let4 := (Neg.neg let3)
  let let5 := (binrel% GE.ge (binrel% HMul.hMul let4 pi) (Neg.neg let1))
  let let6 := (binrel% LE.le pi let1)
  let let7 := (Int.ofNat 0)
  let let8 := (binrel% GE.ge skoX let7)
  let let9 := (Not let8)
  let let10 := (binrel% GE.ge pi let7)
  let let11 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let12 := (binrel% GE.ge pi let11)
  let let13 := (Not let12)
  let let14 := (Not let5)
  let let15 := (binrel% GE.ge (binrel% HMul.hMul let4 skoX) let7)
  let let16 := (Not let15)
  let let17 := (And let16 (And let14 (And let13 (And let10 (And let8 let9)))))
  let let18 := (And True let17)
  let let19 := (binrel% LE.le skoY skoX)
  let let20 := (Not let19)
  let let21 := (Rat.ofInt 0)
  let let22 := (binrel% LE.le let21 skoX)
  let let23 := (binrel% HDiv.hDiv (Rat.ofInt 1) (Rat.ofInt 2))
  let let24 := (binrel% HMul.hMul pi let23)
  let let25 := (binrel% LE.le skoY let24)
  let let26 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let27 := (binrel% LE.le let26 pi)
  let let28 := (Not let27)
  let let29 := (binrel% LE.le pi let2)
  let let30 := (Not let29)
  let let31 := (binrel% LE.le skoX let21)
  let let32 := (Not let31)
  let let33 := (Eq skoY let21)
  let let34 := (And let33 (And let32 (And let30 (And let28 (And let25 (And let22 let20))))))
  let let35 := (Int.ofNat 2)
  let let36 := (binrel% HDiv.hDiv let3 let35)
  let let37 := (Neg.neg let35)
  let let38 := (binrel% HMul.hMul let37 skoY)
  let let39 := (binrel% HAdd.hAdd pi let38)
  let let40 := (binrel% GE.ge let39 let7)
  let let41 := (binrel% HMul.hMul let36 pi)
  let let42 := (binrel% LE.le skoY let41)
  let let43 := (binrel% HAdd.hAdd skoX let21)
  let let44 := (Eq let21 let21)
  let let45 := (binrel% HMul.hMul let4 let21)
  let let46 := (binrel% HAdd.hAdd pi let21)
  let let47 := (binrel% HMul.hMul let37 let21)
  let let48 := (binrel% HMul.hMul let4 skoY)
  let let49 := (binrel% HAdd.hAdd skoX let48)
  let let50 := (binrel% GE.ge let49 let7)
  let let51 := (binrel% HMul.hMul pi let36)
  let let52 := (binrel% LE.le let11 pi)
  let let53 := (Not let50)
  let let54 := (And let33 (And let16 (And let14 (And let13 (And let40 (And let8 let53))))))
  let let55 := (binrel% HAdd.hAdd skoX let45)
  let let56 := (binrel% GE.ge let55 let7)
  let let57 := (Not let56)
  let let58 := (binrel% HAdd.hAdd pi let47)
  let let59 := (binrel% GE.ge let58 let7)
  let let60 := (And let44 (And let16 (And let14 (And let13 (And let59 (And let8 let57))))))
  let let61 := (Eq let7 let7)
  let let62 := (Eq skoX skoX)
  let let63 := (Eq let8 let8)
  let let64 := (Eq And And)
  let let65 := (Eq pi pi)
  let let66 := (Eq let13 let13)
  let let67 := (Eq let14 let14)
  let let68 := (Eq let16 let16)
  let let69 := (Eq let34 let54)
fun lean_r0 : (Eq let2 let1) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let18 let17) => -- THEORY_REWRITE_BOOL
fun lean_r3 : (Eq let34 let34) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq let23 let36) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let42 let40) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let43 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let44 True) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let45 let21) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let26 let11) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let46 pi) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let47 let21) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let19 let50) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let22 let8) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let31 let15) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let51 let41) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let52 let12) => -- THEORY_REWRITE_ARITH
fun lean_a17 : let34 => by
have lean_s0 : let64 := by timed rfl
have lean_s1 : (Eq let33 let33) := by timed rfl
let lean_s2 := by timed congr lean_s0 lean_s1
have lean_s3 : (Eq let32 let16) := by timed flipCongrArg lean_r14 [Not]
let lean_s4 := by timed congr lean_s0 lean_s3
have lean_s5 : let65 := by timed rfl
let lean_s6 := by timed flipCongrArg lean_s5 [LE.le]
have lean_s7 : (Eq let29 let6) := by timed congr lean_s6 lean_r0
have lean_s8 : (Eq let29 let5) := by timed Eq.trans lean_s7 lean_r1
have lean_s9 : (Eq let30 let14) := by timed flipCongrArg lean_s8 [Not]
let lean_s10 := by timed congr lean_s0 lean_s9
let lean_s11 := by timed flipCongrArg lean_r9 [LE.le]
have lean_s12 : (Eq let27 let52) := by timed congr lean_s11 lean_s5
have lean_s13 : (Eq let27 let12) := by timed Eq.trans lean_s12 lean_r16
have lean_s14 : (Eq let28 let13) := by timed flipCongrArg lean_s13 [Not]
let lean_s15 := by timed congr lean_s0 lean_s14
have lean_s16 : (Eq skoY skoY) := by timed rfl
let lean_s17 := by timed flipCongrArg lean_s16 [LE.le]
let lean_s18 := by timed flipCongrArg lean_s5 [HMul.hMul]
have lean_s19 : (Eq let24 let51) := by timed congr lean_s18 lean_r4
have lean_s20 : (Eq let24 let41) := by timed Eq.trans lean_s19 lean_r15
have lean_s21 : (Eq let25 let42) := by timed congr lean_s17 lean_s20
have lean_s22 : (Eq let25 let40) := by timed Eq.trans lean_s21 lean_r5
let lean_s23 := by timed congr lean_s0 lean_s22
let lean_s24 := by timed congr lean_s0 lean_r13
have lean_s25 : (Eq let20 let53) := by timed flipCongrArg lean_r12 [Not]
let lean_s26 := by timed congr lean_s24 lean_s25
let lean_s27 := by timed congr lean_s23 lean_s26
let lean_s28 := by timed congr lean_s15 lean_s27
let lean_s29 := by timed congr lean_s10 lean_s28
let lean_s30 := by timed congr lean_s4 lean_s29
have lean_s31 : let69 := by timed congr lean_s2 lean_s30
have lean_s32 : let69 := by timed Eq.trans lean_r3 lean_s31
have lean_s33 : let64 := by timed rfl
have lean_s34 : let54 := by timed eqResolve lean_a17 lean_s32
have lean_s35 : let33 := by andElim lean_s34, 0
let lean_s36 := by timed flipCongrArg lean_s35 [Eq]
have lean_s37 : let44 := by timed rfl
have lean_s38 : (Eq let33 let44) := by timed congr lean_s36 lean_s37
let lean_s39 := by timed congr lean_s33 lean_s38
have lean_s40 : let68 := by timed rfl
let lean_s41 := by timed congr lean_s33 lean_s40
have lean_s42 : let67 := by timed rfl
let lean_s43 := by timed congr lean_s33 lean_s42
have lean_s44 : let66 := by timed rfl
let lean_s45 := by timed congr lean_s33 lean_s44
have lean_s46 : let65 := by timed rfl
let lean_s47 := by timed flipCongrArg lean_s46 [HAdd.hAdd]
have lean_s48 : (Eq let37 let37) := by timed rfl
let lean_s49 := by timed flipCongrArg lean_s48 [HMul.hMul]
have lean_s50 : (Eq let38 let47) := by timed congr lean_s49 lean_s35
have lean_s51 : (Eq let39 let58) := by timed congr lean_s47 lean_s50
let lean_s52 := by timed flipCongrArg lean_s51 [GE.ge]
have lean_s53 : let61 := by timed rfl
have lean_s54 : (Eq let40 let59) := by timed congr lean_s52 lean_s53
let lean_s55 := by timed congr lean_s33 lean_s54
have lean_s56 : let63 := by timed rfl
let lean_s57 := by timed congr lean_s33 lean_s56
have lean_s58 : let62 := by timed rfl
let lean_s59 := by timed flipCongrArg lean_s58 [HAdd.hAdd]
have lean_s60 : (Eq let4 let4) := by timed rfl
let lean_s61 := by timed flipCongrArg lean_s60 [HMul.hMul]
have lean_s62 : (Eq let48 let45) := by timed congr lean_s61 lean_s35
have lean_s63 : (Eq let49 let55) := by timed congr lean_s59 lean_s62
let lean_s64 := by timed flipCongrArg lean_s63 [GE.ge]
have lean_s65 : (Eq let50 let56) := by timed congr lean_s64 lean_s53
have lean_s66 : (Eq let53 let57) := by timed flipCongrArg lean_s65 [Not]
let lean_s67 := by timed congr lean_s57 lean_s66
let lean_s68 := by timed congr lean_s55 lean_s67
let lean_s69 := by timed congr lean_s45 lean_s68
let lean_s70 := by timed congr lean_s43 lean_s69
let lean_s71 := by timed congr lean_s41 lean_s70
have lean_s72 : (Eq let54 let60) := by timed congr lean_s39 lean_s71
have lean_s73 : let64 := by timed rfl
let lean_s74 := by timed congr lean_s73 lean_r7
have lean_s75 : let68 := by timed rfl
let lean_s76 := by timed congr lean_s73 lean_s75
have lean_s77 : let67 := by timed rfl
let lean_s78 := by timed congr lean_s73 lean_s77
have lean_s79 : let66 := by timed rfl
let lean_s80 := by timed congr lean_s73 lean_s79
let lean_s81 := by timed flipCongrArg lean_s5 [HAdd.hAdd]
have lean_s82 : (Eq let58 let46) := by timed congr lean_s81 lean_r11
have lean_s83 : (Eq let58 pi) := by timed Eq.trans lean_s82 lean_r10
let lean_s84 := by timed flipCongrArg lean_s83 [GE.ge]
have lean_s85 : let61 := by timed rfl
have lean_s86 : (Eq let59 let10) := by timed congr lean_s84 lean_s85
let lean_s87 := by timed congr lean_s73 lean_s86
have lean_s88 : let63 := by timed rfl
let lean_s89 := by timed congr lean_s73 lean_s88
have lean_s90 : let62 := by timed rfl
let lean_s91 := by timed flipCongrArg lean_s90 [HAdd.hAdd]
have lean_s92 : (Eq let55 let43) := by timed congr lean_s91 lean_r8
have lean_s93 : (Eq let55 skoX) := by timed Eq.trans lean_s92 lean_r6
let lean_s94 := by timed flipCongrArg lean_s93 [GE.ge]
have lean_s95 : (Eq let56 let8) := by timed congr lean_s94 lean_s85
have lean_s96 : (Eq let57 let9) := by timed flipCongrArg lean_s95 [Not]
let lean_s97 := by timed congr lean_s89 lean_s96
let lean_s98 := by timed congr lean_s87 lean_s97
let lean_s99 := by timed congr lean_s80 lean_s98
let lean_s100 := by timed congr lean_s78 lean_s99
let lean_s101 := by timed congr lean_s76 lean_s100
have lean_s102 : (Eq let60 let18) := by timed congr lean_s74 lean_s101
have lean_s103 : (Eq let60 let17) := by timed Eq.trans lean_s102 lean_r2
have lean_s104 : (Eq let54 let17) := by timed Eq.trans lean_s72 lean_s103
have lean_s105 : (Eq let34 let17) := by timed Eq.trans lean_s32 lean_s104
have lean_s106 : let17 := by timed eqResolve lean_a17 lean_s105
have lean_s107 : let9 := by andElim lean_s106, 5
have lean_s108 : let8 := by andElim lean_s106, 4
exact (show False from by R2 lean_s107, lean_s108, let8, [0, 0])


