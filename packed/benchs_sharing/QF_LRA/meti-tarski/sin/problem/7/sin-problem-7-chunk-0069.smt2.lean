open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 skoY)
  let let5 := (binrel% HAdd.hAdd skoX let4)
  let let6 := (binrel% GE.ge let5 let1)
  let let7 := (Not let6)
  let let8 := (binrel% GE.ge skoX let1)
  let let9 := (Int.ofNat 2)
  let let10 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let9) skoY)) let1)
  let let11 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let12 := (binrel% GE.ge pi let11)
  let let13 := (Not let12)
  let let14 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let15 := (binrel% GE.ge (binrel% HMul.hMul let3 pi) (Neg.neg let14))
  let let16 := (Not let15)
  let let17 := (binrel% HMul.hMul let3 skoX)
  let let18 := (binrel% GE.ge let17 let1)
  let let19 := (Not let18)
  let let20 := (And let19 (And let16 (And let13 (And let10 (And let8 let7)))))
  let let21 := (binrel% GE.ge let4 let1)
  let let22 := (And let21 (And (Not (And let21 (binrel% GE.ge skoY let1))) let20))
  let let23 := (Rat.ofInt 0)
  let let24 := (Not (Eq skoY let23))
  let let25 := (And let21 (And let24 let20))
  let let26 := (binrel% LE.le skoY let23)
  let let27 := (binrel% LE.le pi let14)
  let let28 := (binrel% LE.le skoX let23)
  let let29 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let23 let23))
  let let30 := (binrel% HDiv.hDiv let2 let9)
  let let31 := (Rat.ofInt 1)
  let let32 := (binrel% HDiv.hDiv let31 (Rat.ofInt 2))
  let let33 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let34 := (Neg.neg let31)
  let let35 := (binrel% HMul.hMul let34 skoX)
  let let36 := (binrel% HMul.hMul let30 pi)
  let let37 := (binrel% LE.le skoY let36)
  let let38 := (binrel% LE.le let11 pi)
  let let39 := (Not True)
  let let40 := (Eq let6 let6)
  let let41 := (binrel% LE.le skoY skoX)
  let let42 := (Not let41)
  let let43 := (binrel% LE.le let23 skoX)
  let let44 := (binrel% HMul.hMul pi let32)
  let let45 := (binrel% LE.le skoY let44)
  let let46 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let47 := (binrel% LE.le let46 pi)
  let let48 := (Not let47)
  let let49 := (binrel% LE.le pi let33)
  let let50 := (Not let49)
  let let51 := (Not let28)
  let let52 := (And let26 (And let24 (And let51 (And let50 (And let48 (And let45 (And let43 let42)))))))
  let let53 := (binrel% HMul.hMul let34 let23)
  let let54 := (Not let7)
  let let55 := (Eq let54 let6)
  let let56 := (binrel% HMul.hMul let31 let23)
  let let57 := (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let56 let53))
  let let58 := (binrel% HMul.hMul let31 skoY)
  let let59 := (binrel% HMul.hMul let31 let5)
  let let60 := (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd let58 let35))
  let let61 := (binrel% GE.ge let60 let57)
  let let62 := (Not let61)
  let let63 := (binrel% LT.lt let60 let57)
  let let64 := (binrel% GT.gt let31 let1)
  let let65 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd skoY let17))
  let let66 := (binrel% GE.ge let5 let23)
  let let67 := (Not let66)
  let let68 := (binrel% LT.lt let5 let23)
  let let69 := (binrel% HMul.hMul pi let30)
  let let70 := (Eq let6 let54)
  let let71 := (binrel% GE.ge let23 let23)
  let let72 := (binrel% GE.ge skoX let23)
  let let73 := (binrel% LT.lt let34 let1)
  let let74 := (Eq let52 let25)
  let let75 := (Not let8)
  let let76 := (Not let21)
  let let77 := (Or let75 (Or let76 let6))
  let let78 := (Or let75 (Or let76 let54))
  let let79 := (Not let68)
  let let80 := (binrel% LE.le let35 let53)
  let let81 := (And let73 let72)
  let let82 := (binrel% LE.le let58 let56)
  let let83 := (And let64 let26)
  let let84 := (binrel% LT.lt let59 let56)
  let let85 := (And let64 let68)
(Eq let25 let22) → (Eq let26 let21) → (Eq let27 let15) → (Eq let28 let18) → (Eq let29 let23) → (Eq let32 let30) → (Eq let33 let14) → (Eq let35 let17) → (Eq let37 let10) → (Eq let38 let12) → (Eq let39 False) → (Eq let40 True) → (Eq let52 let52) → (Eq let53 let23) → (Eq let46 let11) → let55 → (Eq let43 let8) → (Eq let63 let62) → (Eq let64 True) → (Eq let41 let6) → (Eq let59 let5) → (Eq let65 let23) → (Eq let66 let6) → (Eq let68 let67) → (Eq let56 let23) → (Eq let69 let36) → (Eq let58 skoY) → (Eq let55 let70) → (Eq let71 True) → (Eq let72 let8) → (Eq let73 True) → let52 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 skoY)
  let let5 := (binrel% HAdd.hAdd skoX let4)
  let let6 := (binrel% GE.ge let5 let1)
  let let7 := (Not let6)
  let let8 := (binrel% GE.ge skoX let1)
  let let9 := (Int.ofNat 2)
  let let10 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let9) skoY)) let1)
  let let11 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let12 := (binrel% GE.ge pi let11)
  let let13 := (Not let12)
  let let14 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let15 := (binrel% GE.ge (binrel% HMul.hMul let3 pi) (Neg.neg let14))
  let let16 := (Not let15)
  let let17 := (binrel% HMul.hMul let3 skoX)
  let let18 := (binrel% GE.ge let17 let1)
  let let19 := (Not let18)
  let let20 := (And let19 (And let16 (And let13 (And let10 (And let8 let7)))))
  let let21 := (binrel% GE.ge let4 let1)
  let let22 := (And let21 (And (Not (And let21 (binrel% GE.ge skoY let1))) let20))
  let let23 := (Rat.ofInt 0)
  let let24 := (Not (Eq skoY let23))
  let let25 := (And let21 (And let24 let20))
  let let26 := (binrel% LE.le skoY let23)
  let let27 := (binrel% LE.le pi let14)
  let let28 := (binrel% LE.le skoX let23)
  let let29 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let23 let23))
  let let30 := (binrel% HDiv.hDiv let2 let9)
  let let31 := (Rat.ofInt 1)
  let let32 := (binrel% HDiv.hDiv let31 (Rat.ofInt 2))
  let let33 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let34 := (Neg.neg let31)
  let let35 := (binrel% HMul.hMul let34 skoX)
  let let36 := (binrel% HMul.hMul let30 pi)
  let let37 := (binrel% LE.le skoY let36)
  let let38 := (binrel% LE.le let11 pi)
  let let39 := (Not True)
  let let40 := (Eq let6 let6)
  let let41 := (binrel% LE.le skoY skoX)
  let let42 := (Not let41)
  let let43 := (binrel% LE.le let23 skoX)
  let let44 := (binrel% HMul.hMul pi let32)
  let let45 := (binrel% LE.le skoY let44)
  let let46 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let47 := (binrel% LE.le let46 pi)
  let let48 := (Not let47)
  let let49 := (binrel% LE.le pi let33)
  let let50 := (Not let49)
  let let51 := (Not let28)
  let let52 := (And let26 (And let24 (And let51 (And let50 (And let48 (And let45 (And let43 let42)))))))
  let let53 := (binrel% HMul.hMul let34 let23)
  let let54 := (Not let7)
  let let55 := (Eq let54 let6)
  let let56 := (binrel% HMul.hMul let31 let23)
  let let57 := (binrel% HAdd.hAdd let56 (binrel% HAdd.hAdd let56 let53))
  let let58 := (binrel% HMul.hMul let31 skoY)
  let let59 := (binrel% HMul.hMul let31 let5)
  let let60 := (binrel% HAdd.hAdd let59 (binrel% HAdd.hAdd let58 let35))
  let let61 := (binrel% GE.ge let60 let57)
  let let62 := (Not let61)
  let let63 := (binrel% LT.lt let60 let57)
  let let64 := (binrel% GT.gt let31 let1)
  let let65 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd skoY let17))
  let let66 := (binrel% GE.ge let5 let23)
  let let67 := (Not let66)
  let let68 := (binrel% LT.lt let5 let23)
  let let69 := (binrel% HMul.hMul pi let30)
  let let70 := (Eq let6 let54)
  let let71 := (binrel% GE.ge let23 let23)
  let let72 := (binrel% GE.ge skoX let23)
  let let73 := (binrel% LT.lt let34 let1)
  let let74 := (Eq let52 let25)
  let let75 := (Not let8)
  let let76 := (Not let21)
  let let77 := (Or let75 (Or let76 let6))
  let let78 := (Or let75 (Or let76 let54))
  let let79 := (Not let68)
  let let80 := (binrel% LE.le let35 let53)
  let let81 := (And let73 let72)
  let let82 := (binrel% LE.le let58 let56)
  let let83 := (And let64 let26)
  let let84 := (binrel% LT.lt let59 let56)
  let let85 := (And let64 let68)
fun lean_h0 : (Eq let25 let22) => -- PREPROCESS
fun lean_r1 : (Eq let26 let21) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let27 let15) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let28 let18) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let29 let23) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let32 let30) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let33 let14) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let35 let17) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let37 let10) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let38 let12) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let39 False) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let40 True) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let52 let52) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let53 let23) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let46 let11) => -- THEORY_REWRITE_ARITH
fun lean_r15 : let55 => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let43 let8) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let63 let62) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let64 True) => -- EVALUATE
fun lean_r19 : (Eq let41 let6) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let59 let5) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let65 let23) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let66 let6) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let68 let67) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let56 let23) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let69 let36) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let58 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let55 let70) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let71 True) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let72 let8) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let73 True) => -- EVALUATE
fun lean_a31 : let52 => by
have lean_s0 : (Or let75 (Or let76 (Or let54 False))) :=
  (scope (fun lean_a32 : let8 =>
    (scope (fun lean_a33 : let21 =>
      (scope (fun lean_a34 : let7 =>
        have lean_s0 : (Eq let67 let7) := by timed flipCongrArg lean_r22 [Not]
        have lean_s1 : (Eq let68 let7) := by timed Eq.trans lean_r23 lean_s0
        have lean_s2 : (Eq let7 let68) := by timed Eq.symm lean_s1
        have lean_s3 : let68 := by timed eqResolve lean_a34 lean_s2
        have lean_s4 : (Or let79 False) :=
          (scope (fun lean_a35 : let68 =>
            have lean_s4 : let64 := by timed trueElim lean_r18
            have lean_s5 : let85 := by timed And.intro lean_s4 lean_a35
            have lean_s6 : (Implies let85 let84) := by arithMulPos [let5, let23, let31], 0
            have lean_s7 : let84 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let21 let26) := by timed Eq.symm lean_r1
            have lean_s9 : let26 := by timed eqResolve lean_a33 lean_s8
            have lean_s10 : let83 := by timed And.intro lean_s4 lean_s9
            have lean_s11 : (Implies let83 let82) := by arithMulPos [skoY, let23, let31], 1
            have lean_s12 : let82 := by timed modusPonens lean_s10 lean_s11
            have lean_s13 : let73 := by timed trueElim lean_r30
            have lean_s14 : (Eq let8 let72) := by timed Eq.symm lean_r29
            have lean_s15 : let72 := by timed eqResolve lean_a32 lean_s14
            have lean_s16 : let81 := by timed And.intro lean_s13 lean_s15
            have lean_s17 : (Implies let81 let80) := by arithMulNeg [skoX, let23, let34], 3
            have lean_s18 : let80 := by timed modusPonens lean_s16 lean_s17
            have lean_s19 : let63 := by sumBounds [lean_s7, lean_s12, lean_s18]
            let lean_s20 := by timed congrHAdd lean_r26 lean_r7
            have lean_s21 : (Eq let60 let65) := by timed congrHAdd lean_r20 lean_s20
            have lean_s22 : (Eq let60 let23) := by timed Eq.trans lean_s21 lean_r21
            let lean_s23 := by timed flipCongrArg lean_s22 [GE.ge]
            let lean_s24 := by timed congrHAdd lean_r24 lean_r13
            have lean_s25 : (Eq let57 let29) := by timed congrHAdd lean_r24 lean_s24
            have lean_s26 : (Eq let57 let23) := by timed Eq.trans lean_s25 lean_r4
            have lean_s27 : (Eq let61 let71) := by timed congr lean_s23 lean_s26
            have lean_s28 : (Eq let61 True) := by timed Eq.trans lean_s27 lean_r28
            have lean_s29 : (Eq let62 let39) := by timed flipCongrArg lean_s28 [Not]
            have lean_s30 : (Eq let62 False) := by timed Eq.trans lean_s29 lean_r10
            have lean_s31 : (Eq let63 False) := by timed Eq.trans lean_r17 lean_s30
            show False from by timed eqResolve lean_s19 lean_s31
          ))
        have lean_s5 : let79 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let79 let54) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let79 let6) := by timed Eq.trans lean_s6 lean_r15
        have lean_s8 : (Eq let6 let66) := by timed Eq.symm lean_r22
        have lean_s9 : (Eq let79 let66) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let66 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let6 let79) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let66 let79) := by timed Eq.trans lean_r22 lean_s11
        have lean_s13 : let79 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let8 (And let21 let7))) := by liftOrNToNeg lean_s0
have lean_s2 : let78 := by timed flipNotAnd lean_s1 [let8, let21, let7]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let75 let75) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let76 let76) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : let40 := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [Eq]
have lean_s10 : (Eq let70 let40) := by timed congr lean_s9 lean_r15
have lean_s11 : (Eq let70 True) := by timed Eq.trans lean_s10 lean_r11
have lean_s12 : (Eq let55 True) := by timed Eq.trans lean_r27 lean_s11
have lean_s13 : let55 := by timed trueElim lean_s12
let lean_s14 := by timed congr lean_s7 lean_s13
have lean_s15 : (Eq let78 let77) := by timed congr lean_s5 lean_s14
have lean_s16 : let77 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let6 (Or let76 let75)) := by permutateOr lean_s16, [2, 1, 0], (- 1)
have lean_s18 : (Eq And And) := by timed rfl
let lean_s19 := by timed congr lean_s18 lean_r1
have lean_s20 : (Eq let24 let24) := by timed rfl
let lean_s21 := by timed congr lean_s18 lean_s20
have lean_s22 : (Eq let51 let19) := by timed flipCongrArg lean_r3 [Not]
let lean_s23 := by timed congr lean_s18 lean_s22
have lean_s24 : (Eq pi pi) := by timed rfl
let lean_s25 := by timed flipCongrArg lean_s24 [LE.le]
have lean_s26 : (Eq let49 let27) := by timed congr lean_s25 lean_r6
have lean_s27 : (Eq let49 let15) := by timed Eq.trans lean_s26 lean_r2
have lean_s28 : (Eq let50 let16) := by timed flipCongrArg lean_s27 [Not]
let lean_s29 := by timed congr lean_s18 lean_s28
let lean_s30 := by timed flipCongrArg lean_r14 [LE.le]
have lean_s31 : (Eq let47 let38) := by timed congr lean_s30 lean_s24
have lean_s32 : (Eq let47 let12) := by timed Eq.trans lean_s31 lean_r9
have lean_s33 : (Eq let48 let13) := by timed flipCongrArg lean_s32 [Not]
let lean_s34 := by timed congr lean_s18 lean_s33
have lean_s35 : (Eq skoY skoY) := by timed rfl
let lean_s36 := by timed flipCongrArg lean_s35 [LE.le]
let lean_s37 := by timed flipCongrArg lean_s24 [HMul.hMul]
have lean_s38 : (Eq let44 let69) := by timed congr lean_s37 lean_r5
have lean_s39 : (Eq let44 let36) := by timed Eq.trans lean_s38 lean_r25
have lean_s40 : (Eq let45 let37) := by timed congr lean_s36 lean_s39
have lean_s41 : (Eq let45 let10) := by timed Eq.trans lean_s40 lean_r8
let lean_s42 := by timed congr lean_s18 lean_s41
let lean_s43 := by timed congr lean_s18 lean_r16
have lean_s44 : (Eq let42 let7) := by timed flipCongrArg lean_r19 [Not]
let lean_s45 := by timed congr lean_s43 lean_s44
let lean_s46 := by timed congr lean_s42 lean_s45
let lean_s47 := by timed congr lean_s34 lean_s46
let lean_s48 := by timed congr lean_s29 lean_s47
let lean_s49 := by timed congr lean_s23 lean_s48
let lean_s50 := by timed congr lean_s21 lean_s49
have lean_s51 : let74 := by timed congr lean_s19 lean_s50
have lean_s52 : let74 := by timed Eq.trans lean_r12 lean_s51
have lean_s53 : (Eq let52 let22) := by timed Eq.trans lean_s52 lean_h0
have lean_s54 : let22 := by timed eqResolve lean_a31 lean_s53
have lean_s55 : let7 := by andElim lean_s54, 7
let lean_s56 := by R1 lean_s17, lean_s55, let6, [(- 1), 0]
have lean_s57 : let8 := by andElim lean_s54, 6
let lean_s58 := by R2 lean_s56, lean_s57, let8, [(- 1), 0]
have lean_s59 : let21 := by andElim lean_s54, 0
exact (show False from by R2 lean_s58, lean_s59, let21, [0, 0])


