open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 2000)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (Rat.ofInt 1)
  let let10 := (binrel% GT.gt let9 let1)
  let let11 := (binrel% GE.ge skoY let1)
  let let12 := (binrel% GE.ge skoY let5)
  let let13 := (binrel% HMul.hMul let9 let5)
  let let14 := (binrel% HMul.hMul let3 let5)
  let let15 := (Neg.neg let9)
  let let16 := (binrel% HMul.hMul let15 let5)
  let let17 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let14 let13))
  let let18 := (binrel% HMul.hMul let9 skoY)
  let let19 := (binrel% HMul.hMul let3 skoX)
  let let20 := (Int.ofNat 2000)
  let let21 := (binrel% HMul.hMul (Neg.neg let20) skoX)
  let let22 := (binrel% HAdd.hAdd skoY let21)
  let let23 := (binrel% HMul.hMul let15 let22)
  let let24 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let19 let18))
  let let25 := (binrel% GE.ge let24 let17)
  let let26 := (Not let25)
  let let27 := (binrel% LT.lt let24 let17)
  let let28 := (binrel% HMul.hMul let20 skoX)
  let let29 := (Int.ofNat 1)
  let let30 := (Neg.neg let29)
  let let31 := (binrel% HMul.hMul let30 skoY)
  let let32 := (binrel% HAdd.hAdd let31 let28)
  let let33 := (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let21 skoY))
  let let34 := (binrel% HDiv.hDiv let29 (Int.ofNat 2))
  let let35 := (binrel% HMul.hMul let34 pi)
  let let36 := (binrel% HMul.hMul pi let34)
  let let37 := (binrel% GE.ge let32 let1)
  let let38 := (binrel% LE.le skoY let28)
  let let39 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let40 := (binrel% GE.ge (binrel% HMul.hMul let30 pi) (Neg.neg let39))
  let let41 := (binrel% LE.le pi let39)
  let let42 := (binrel% GE.ge (binrel% HMul.hMul let30 skoX) let1)
  let let43 := (Eq let37 let37)
  let let44 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let34) pi)) let1)
  let let45 := (binrel% LE.le let35 skoY)
  let let46 := (binrel% GE.ge let5 let5)
  let let47 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let48 := (binrel% GE.ge pi let47)
  let let49 := (binrel% LE.le let47 pi)
  let let50 := (Eq let11 let11)
  let let51 := (binrel% HMul.hMul skoX let2)
  let let52 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let53 := (binrel% LE.le pi let52)
  let let54 := (Not let53)
  let let55 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let56 := (binrel% LE.le let55 pi)
  let let57 := (Not let56)
  let let58 := (binrel% HDiv.hDiv let9 (Rat.ofInt 2))
  let let59 := (binrel% HMul.hMul pi let58)
  let let60 := (binrel% LE.le let59 skoY)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le skoY skoX)
  let let63 := (Not let62)
  let let64 := (binrel% LE.le skoY let51)
  let let65 := (Not let64)
  let let66 := (binrel% LE.le let5 skoY)
  let let67 := (Not let66)
  let let68 := (And let67 (And let65 (And let63 (And let7 (And let61 (And let57 let54))))))
  let let69 := (Not let11)
  let let70 := (Not let69)
  let let71 := (Eq let11 let70)
  let let72 := (Eq let70 let11)
  let let73 := (Eq let42 let42)
  let let74 := (binrel% LT.lt let15 let1)
  let let75 := (Not let42)
  let let76 := (Not let75)
  let let77 := (Eq let76 let42)
  let let78 := (Eq let42 let76)
  let let79 := (Not let12)
  let let80 := (binrel% LT.lt skoY let5)
  let let81 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let82 := (Not let37)
  let let83 := (Not let82)
  let let84 := (Eq let83 let37)
  let let85 := (binrel% LE.le let22 let5)
  let let86 := (Not True)
  let let87 := (binrel% GE.ge (binrel% HAdd.hAdd let31 skoX) let1)
  let let88 := (Eq let37 let83)
  let let89 := (Not let85)
  let let90 := (binrel% GT.gt let22 let5)
  let let91 := (Not let40)
  let let92 := (Not let48)
  let let93 := (Not let44)
  let let94 := (Not let87)
  let let95 := (And let69 (And let82 (And let94 (And let75 (And let93 (And let92 let91))))))
  let let96 := (Eq let68 let95)
  let let97 := (Or let11 (Or let42 let37))
  let let98 := (Or let70 (Or let76 let83))
  let let99 := (Not let90)
  let let100 := (binrel% LT.lt let18 let13)
  let let101 := (And let10 let80)
  let let102 := (binrel% LT.lt let19 let14)
  let let103 := (And let4 let8)
  let let104 := (binrel% LT.lt let23 let16)
  let let105 := (And let74 let90)
(Eq let4 True) → (Eq let8 let7) → (Eq let10 True) → (Eq let12 let11) → (Eq let27 let26) → (Eq let33 let5) → (Eq let16 let5) → (Eq let36 let35) → (Eq let38 let37) → (Eq let41 let40) → (Eq let6 let42) → (Eq let43 True) → (Eq let45 let44) → (Eq let46 True) → (Eq let14 let5) → (Eq let49 let48) → (Eq let50 True) → (Eq let51 let28) → (Eq let23 let32) → (Eq let68 let68) → (Eq let52 let39) → (Eq let55 let47) → (Eq let72 let71) → (Eq let73 True) → (Eq let74 True) → (Eq let18 skoY) → let77 → (Eq let19 let21) → (Eq let66 let11) → (Eq let77 let78) → (Eq let80 let79) → (Eq let81 let5) → let72 → let84 → (Eq let85 let37) → (Eq let86 False) → (Eq let62 let87) → (Eq let84 let88) → (Eq let90 let89) → (Eq let58 let34) → (Eq let13 let5) → let68 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 2000)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (Rat.ofInt 1)
  let let10 := (binrel% GT.gt let9 let1)
  let let11 := (binrel% GE.ge skoY let1)
  let let12 := (binrel% GE.ge skoY let5)
  let let13 := (binrel% HMul.hMul let9 let5)
  let let14 := (binrel% HMul.hMul let3 let5)
  let let15 := (Neg.neg let9)
  let let16 := (binrel% HMul.hMul let15 let5)
  let let17 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let14 let13))
  let let18 := (binrel% HMul.hMul let9 skoY)
  let let19 := (binrel% HMul.hMul let3 skoX)
  let let20 := (Int.ofNat 2000)
  let let21 := (binrel% HMul.hMul (Neg.neg let20) skoX)
  let let22 := (binrel% HAdd.hAdd skoY let21)
  let let23 := (binrel% HMul.hMul let15 let22)
  let let24 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let19 let18))
  let let25 := (binrel% GE.ge let24 let17)
  let let26 := (Not let25)
  let let27 := (binrel% LT.lt let24 let17)
  let let28 := (binrel% HMul.hMul let20 skoX)
  let let29 := (Int.ofNat 1)
  let let30 := (Neg.neg let29)
  let let31 := (binrel% HMul.hMul let30 skoY)
  let let32 := (binrel% HAdd.hAdd let31 let28)
  let let33 := (binrel% HAdd.hAdd let32 (binrel% HAdd.hAdd let21 skoY))
  let let34 := (binrel% HDiv.hDiv let29 (Int.ofNat 2))
  let let35 := (binrel% HMul.hMul let34 pi)
  let let36 := (binrel% HMul.hMul pi let34)
  let let37 := (binrel% GE.ge let32 let1)
  let let38 := (binrel% LE.le skoY let28)
  let let39 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let40 := (binrel% GE.ge (binrel% HMul.hMul let30 pi) (Neg.neg let39))
  let let41 := (binrel% LE.le pi let39)
  let let42 := (binrel% GE.ge (binrel% HMul.hMul let30 skoX) let1)
  let let43 := (Eq let37 let37)
  let let44 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let34) pi)) let1)
  let let45 := (binrel% LE.le let35 skoY)
  let let46 := (binrel% GE.ge let5 let5)
  let let47 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let48 := (binrel% GE.ge pi let47)
  let let49 := (binrel% LE.le let47 pi)
  let let50 := (Eq let11 let11)
  let let51 := (binrel% HMul.hMul skoX let2)
  let let52 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let53 := (binrel% LE.le pi let52)
  let let54 := (Not let53)
  let let55 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let56 := (binrel% LE.le let55 pi)
  let let57 := (Not let56)
  let let58 := (binrel% HDiv.hDiv let9 (Rat.ofInt 2))
  let let59 := (binrel% HMul.hMul pi let58)
  let let60 := (binrel% LE.le let59 skoY)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le skoY skoX)
  let let63 := (Not let62)
  let let64 := (binrel% LE.le skoY let51)
  let let65 := (Not let64)
  let let66 := (binrel% LE.le let5 skoY)
  let let67 := (Not let66)
  let let68 := (And let67 (And let65 (And let63 (And let7 (And let61 (And let57 let54))))))
  let let69 := (Not let11)
  let let70 := (Not let69)
  let let71 := (Eq let11 let70)
  let let72 := (Eq let70 let11)
  let let73 := (Eq let42 let42)
  let let74 := (binrel% LT.lt let15 let1)
  let let75 := (Not let42)
  let let76 := (Not let75)
  let let77 := (Eq let76 let42)
  let let78 := (Eq let42 let76)
  let let79 := (Not let12)
  let let80 := (binrel% LT.lt skoY let5)
  let let81 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let82 := (Not let37)
  let let83 := (Not let82)
  let let84 := (Eq let83 let37)
  let let85 := (binrel% LE.le let22 let5)
  let let86 := (Not True)
  let let87 := (binrel% GE.ge (binrel% HAdd.hAdd let31 skoX) let1)
  let let88 := (Eq let37 let83)
  let let89 := (Not let85)
  let let90 := (binrel% GT.gt let22 let5)
  let let91 := (Not let40)
  let let92 := (Not let48)
  let let93 := (Not let44)
  let let94 := (Not let87)
  let let95 := (And let69 (And let82 (And let94 (And let75 (And let93 (And let92 let91))))))
  let let96 := (Eq let68 let95)
  let let97 := (Or let11 (Or let42 let37))
  let let98 := (Or let70 (Or let76 let83))
  let let99 := (Not let90)
  let let100 := (binrel% LT.lt let18 let13)
  let let101 := (And let10 let80)
  let let102 := (binrel% LT.lt let19 let14)
  let let103 := (And let4 let8)
  let let104 := (binrel% LT.lt let23 let16)
  let let105 := (And let74 let90)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let10 True) => -- EVALUATE
fun lean_r3 : (Eq let12 let11) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let33 let5) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let16 let5) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let38 let37) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let6 let42) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let43 True) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let46 True) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let14 let5) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let49 let48) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let50 True) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let51 let28) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let23 let32) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let68 let68) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let52 let39) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let55 let47) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let72 let71) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let73 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let74 True) => -- EVALUATE
fun lean_r25 : (Eq let18 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r26 : let77 => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let19 let21) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let66 let11) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let77 let78) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let80 let79) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let81 let5) => -- THEORY_REWRITE_ARITH
fun lean_r32 : let72 => -- THEORY_REWRITE_BOOL
fun lean_r33 : let84 => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let85 let37) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let86 False) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let62 let87) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let84 let88) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let90 let89) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let58 let34) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let13 let5) => -- THEORY_REWRITE_ARITH
fun lean_a41 : let68 => by
have lean_s0 : (Or let70 (Or let76 (Or let83 False))) :=
  (scope (fun lean_a42 : let69 =>
    (scope (fun lean_a43 : let75 =>
      (scope (fun lean_a44 : let82 =>
        have lean_s0 : (Eq let89 let82) := by timed flipCongrArg lean_r34 [Not]
        have lean_s1 : (Eq let90 let82) := by timed Eq.trans lean_r38 lean_s0
        have lean_s2 : (Eq let82 let90) := by timed Eq.symm lean_s1
        have lean_s3 : let90 := by timed eqResolve lean_a44 lean_s2
        have lean_s4 : (Or let99 False) :=
          (scope (fun lean_a45 : let90 =>
            have lean_s4 : let74 := by timed trueElim lean_r24
            have lean_s5 : let105 := by timed And.intro lean_s4 lean_a45
            have lean_s6 : (Implies let105 let104) := by arithMulNeg [let22, let5, let15], 2
            have lean_s7 : let104 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let4 := by timed trueElim lean_r0
            have lean_s9 : (Eq let7 let75) := by timed flipCongrArg lean_r10 [Not]
            have lean_s10 : (Eq let8 let75) := by timed Eq.trans lean_r1 lean_s9
            have lean_s11 : (Eq let75 let8) := by timed Eq.symm lean_s10
            have lean_s12 : let8 := by timed eqResolve lean_a43 lean_s11
            have lean_s13 : let103 := by timed And.intro lean_s8 lean_s12
            have lean_s14 : (Implies let103 let102) := by arithMulNeg [skoX, let5, let3], 2
            have lean_s15 : let102 := by timed modusPonens lean_s13 lean_s14
            have lean_s16 : let10 := by timed trueElim lean_r2
            have lean_s17 : (Eq let79 let69) := by timed flipCongrArg lean_r3 [Not]
            have lean_s18 : (Eq let80 let69) := by timed Eq.trans lean_r30 lean_s17
            have lean_s19 : (Eq let69 let80) := by timed Eq.symm lean_s18
            have lean_s20 : let80 := by timed eqResolve lean_a42 lean_s19
            have lean_s21 : let101 := by timed And.intro lean_s16 lean_s20
            have lean_s22 : (Implies let101 let100) := by arithMulPos [skoY, let5, let9], 0
            have lean_s23 : let100 := by timed modusPonens lean_s21 lean_s22
            have lean_s24 : let27 := by sumBounds [lean_s7, lean_s15, lean_s23]
            let lean_s25 := by timed congrHAdd lean_r27 lean_r25
            have lean_s26 : (Eq let24 let33) := by timed congrHAdd lean_r18 lean_s25
            have lean_s27 : (Eq let24 let5) := by timed Eq.trans lean_s26 lean_r5
            let lean_s28 := by timed flipCongrArg lean_s27 [GE.ge]
            let lean_s29 := by timed congrHAdd lean_r14 lean_r40
            have lean_s30 : (Eq let17 let81) := by timed congrHAdd lean_r6 lean_s29
            have lean_s31 : (Eq let17 let5) := by timed Eq.trans lean_s30 lean_r31
            have lean_s32 : (Eq let25 let46) := by timed congr lean_s28 lean_s31
            have lean_s33 : (Eq let25 True) := by timed Eq.trans lean_s32 lean_r13
            have lean_s34 : (Eq let26 let86) := by timed flipCongrArg lean_s33 [Not]
            have lean_s35 : (Eq let26 False) := by timed Eq.trans lean_s34 lean_r35
            have lean_s36 : (Eq let27 False) := by timed Eq.trans lean_r4 lean_s35
            show False from by timed eqResolve lean_s24 lean_s36
          ))
        have lean_s5 : let99 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let99 let83) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let99 let37) := by timed Eq.trans lean_s6 lean_r33
        have lean_s8 : (Eq let37 let85) := by timed Eq.symm lean_r34
        have lean_s9 : (Eq let99 let85) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let85 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let37 let99) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let85 let99) := by timed Eq.trans lean_r34 lean_s11
        have lean_s13 : let99 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let69 (And let75 let82))) := by liftOrNToNeg lean_s0
have lean_s2 : let98 := by timed flipNotAnd lean_s1 [let69, let75, let82]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let50 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let71 let50) := by timed congr lean_s5 lean_r32
have lean_s7 : (Eq let71 True) := by timed Eq.trans lean_s6 lean_r16
have lean_s8 : (Eq let72 True) := by timed Eq.trans lean_r22 lean_s7
have lean_s9 : let72 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let73 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let78 let73) := by timed congr lean_s12 lean_r26
have lean_s14 : (Eq let78 True) := by timed Eq.trans lean_s13 lean_r23
have lean_s15 : (Eq let77 True) := by timed Eq.trans lean_r29 lean_s14
have lean_s16 : let77 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let43 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let88 let43) := by timed congr lean_s19 lean_r33
have lean_s21 : (Eq let88 True) := by timed Eq.trans lean_s20 lean_r11
have lean_s22 : (Eq let84 True) := by timed Eq.trans lean_r37 lean_s21
have lean_s23 : let84 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq let98 let97) := by timed congr lean_s10 lean_s24
have lean_s26 : let97 := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Or let11 (Or let37 let42)) := by permutateOr lean_s26, [0, 2, 1], (- 1)
have lean_s28 : (Eq And And) := by timed rfl
have lean_s29 : (Eq let67 let69) := by timed flipCongrArg lean_r28 [Not]
let lean_s30 := by timed congr lean_s28 lean_s29
have lean_s31 : (Eq skoY skoY) := by timed rfl
let lean_s32 := by timed flipCongrArg lean_s31 [LE.le]
have lean_s33 : (Eq let64 let38) := by timed congr lean_s32 lean_r17
have lean_s34 : (Eq let64 let37) := by timed Eq.trans lean_s33 lean_r8
have lean_s35 : (Eq let65 let82) := by timed flipCongrArg lean_s34 [Not]
let lean_s36 := by timed congr lean_s28 lean_s35
have lean_s37 : (Eq let63 let94) := by timed flipCongrArg lean_r36 [Not]
let lean_s38 := by timed congr lean_s28 lean_s37
have lean_s39 : (Eq let7 let75) := by timed flipCongrArg lean_r10 [Not]
let lean_s40 := by timed congr lean_s28 lean_s39
have lean_s41 : (Eq pi pi) := by timed rfl
let lean_s42 := by timed flipCongrArg lean_s41 [HMul.hMul]
have lean_s43 : (Eq let59 let36) := by timed congr lean_s42 lean_r39
have lean_s44 : (Eq let59 let35) := by timed Eq.trans lean_s43 lean_r7
let lean_s45 := by timed flipCongrArg lean_s44 [LE.le]
have lean_s46 : (Eq let60 let45) := by timed congr lean_s45 lean_s31
have lean_s47 : (Eq let60 let44) := by timed Eq.trans lean_s46 lean_r12
have lean_s48 : (Eq let61 let93) := by timed flipCongrArg lean_s47 [Not]
let lean_s49 := by timed congr lean_s28 lean_s48
let lean_s50 := by timed flipCongrArg lean_r21 [LE.le]
have lean_s51 : (Eq let56 let49) := by timed congr lean_s50 lean_s41
have lean_s52 : (Eq let56 let48) := by timed Eq.trans lean_s51 lean_r15
have lean_s53 : (Eq let57 let92) := by timed flipCongrArg lean_s52 [Not]
let lean_s54 := by timed congr lean_s28 lean_s53
let lean_s55 := by timed flipCongrArg lean_s41 [LE.le]
have lean_s56 : (Eq let53 let41) := by timed congr lean_s55 lean_r20
have lean_s57 : (Eq let53 let40) := by timed Eq.trans lean_s56 lean_r9
have lean_s58 : (Eq let54 let91) := by timed flipCongrArg lean_s57 [Not]
let lean_s59 := by timed congr lean_s54 lean_s58
let lean_s60 := by timed congr lean_s49 lean_s59
let lean_s61 := by timed congr lean_s40 lean_s60
let lean_s62 := by timed congr lean_s38 lean_s61
let lean_s63 := by timed congr lean_s36 lean_s62
have lean_s64 : let96 := by timed congr lean_s30 lean_s63
have lean_s65 : let96 := by timed Eq.trans lean_r19 lean_s64
have lean_s66 : let95 := by timed eqResolve lean_a41 lean_s65
have lean_s67 : let75 := by andElim lean_s66, 3
let lean_s68 := by R1 lean_s27, lean_s67, let42, [(- 1), 0]
have lean_s69 : let82 := by andElim lean_s66, 1
let lean_s70 := by R1 lean_s68, lean_s69, let37, [(- 1), 0]
have lean_s71 : let69 := by andElim lean_s66, 0
exact (show False from by R1 lean_s70, lean_s71, let11, [0, 0])


