open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 2000)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 1)
  let let6 := (binrel% GT.gt let5 let1)
  let let7 := (Rat.ofInt 0)
  let let8 := (binrel% HMul.hMul let5 let7)
  let let9 := (binrel% HMul.hMul let3 let7)
  let let10 := (Neg.neg let5)
  let let11 := (binrel% HMul.hMul let10 let7)
  let let12 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let9 let8))
  let let13 := (binrel% HMul.hMul let5 skoY)
  let let14 := (binrel% HMul.hMul let3 skoX)
  let let15 := (Int.ofNat 2000)
  let let16 := (binrel% HMul.hMul (Neg.neg let15) skoX)
  let let17 := (binrel% HAdd.hAdd skoY let16)
  let let18 := (binrel% HMul.hMul let10 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let14 let13))
  let let20 := (binrel% GE.ge let19 let12)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt let19 let12)
  let let23 := (binrel% HMul.hMul let15 skoX)
  let let24 := (Int.ofNat 1)
  let let25 := (Neg.neg let24)
  let let26 := (binrel% HMul.hMul let25 skoY)
  let let27 := (binrel% HAdd.hAdd let26 let23)
  let let28 := (binrel% GE.ge skoY let1)
  let let29 := (binrel% LE.le let7 skoY)
  let let30 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let31 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let32 := (binrel% GE.ge (binrel% HMul.hMul let25 skoX) let1)
  let let33 := (Not let32)
  let let34 := (Not let33)
  let let35 := (Eq let32 let34)
  let let36 := (Eq let34 let32)
  let let37 := (Not True)
  let let38 := (binrel% GE.ge let27 let1)
  let let39 := (binrel% LE.le skoY let23)
  let let40 := (binrel% GE.ge (binrel% HMul.hMul let25 pi) (Neg.neg let30))
  let let41 := (binrel% LE.le pi let30)
  let let42 := (binrel% LE.le skoX let7)
  let let43 := (binrel% LE.le let17 let7)
  let let44 := (binrel% HDiv.hDiv let24 (Int.ofNat 2))
  let let45 := (binrel% HMul.hMul let44 pi)
  let let46 := (binrel% HMul.hMul pi let44)
  let let47 := (Not let42)
  let let48 := (binrel% GT.gt skoX let7)
  let let49 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let44) pi)) let1)
  let let50 := (binrel% LE.le let45 skoY)
  let let51 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let52 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let53 := (binrel% GE.ge pi let51)
  let let54 := (binrel% LE.le let51 pi)
  let let55 := (binrel% HMul.hMul skoX let2)
  let let56 := (Eq let32 let32)
  let let57 := (binrel% GE.ge let26 let1)
  let let58 := (binrel% LE.le skoY let7)
  let let59 := (binrel% GE.ge (binrel% HAdd.hAdd let26 skoX) let1)
  let let60 := (binrel% LE.le skoY skoX)
  let let61 := (binrel% LE.le pi let31)
  let let62 := (Not let61)
  let let63 := (binrel% LE.le let52 pi)
  let let64 := (Not let63)
  let let65 := (binrel% HDiv.hDiv let5 (Rat.ofInt 2))
  let let66 := (binrel% HMul.hMul pi let65)
  let let67 := (binrel% LE.le let66 skoY)
  let let68 := (Not let67)
  let let69 := (Not let60)
  let let70 := (binrel% LE.le skoY let55)
  let let71 := (Not let70)
  let let72 := (And let29 (And let58 (And let71 (And let69 (And let47 (And let68 (And let64 let62)))))))
  let let73 := (binrel% LT.lt let10 let1)
  let let74 := (Not let43)
  let let75 := (binrel% GT.gt let17 let7)
  let let76 := (binrel% GE.ge let7 let7)
  let let77 := (Not let38)
  let let78 := (Not let77)
  let let79 := (Eq let78 let38)
  let let80 := (Eq let38 let78)
  let let81 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let7 let7))
  let let82 := (Eq let38 let38)
  let let83 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let16 skoY))
  let let84 := (Not let40)
  let let85 := (Not let53)
  let let86 := (Not let49)
  let let87 := (Not let59)
  let let88 := (And let28 (And let57 (And let77 (And let87 (And let33 (And let86 (And let85 let84)))))))
  let let89 := (Eq let72 let88)
  let let90 := (Not let57)
  let let91 := (Or let90 (Or let32 let38))
  let let92 := (Or let90 (Or let34 let78))
  let let93 := (Not let75)
  let let94 := (binrel% LE.le let13 let8)
  let let95 := (And let6 let58)
  let let96 := (binrel% LT.lt let14 let9)
  let let97 := (And let4 let48)
  let let98 := (binrel% LT.lt let18 let11)
  let let99 := (And let73 let75)
(Eq let4 True) → (Eq let6 True) → (Eq let22 let21) → (Eq let18 let27) → (Eq let14 let16) → (Eq let13 skoY) → (Eq let29 let28) → (Eq let31 let30) → (Eq let36 let35) → (Eq let37 False) → (Eq let39 let38) → (Eq let41 let40) → (Eq let42 let32) → (Eq let43 let38) → (Eq let46 let45) → (Eq let48 let47) → (Eq let50 let49) → (Eq let52 let51) → (Eq let54 let53) → (Eq let55 let23) → (Eq let56 True) → (Eq let58 let57) → let36 → (Eq let60 let59) → (Eq let72 let72) → (Eq let73 True) → (Eq let75 let74) → (Eq let76 True) → let79 → (Eq let79 let80) → (Eq let81 let7) → (Eq let8 let7) → (Eq let9 let7) → (Eq let11 let7) → (Eq let65 let44) → (Eq let82 True) → (Eq let83 let7) → let72 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 2000)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 1)
  let let6 := (binrel% GT.gt let5 let1)
  let let7 := (Rat.ofInt 0)
  let let8 := (binrel% HMul.hMul let5 let7)
  let let9 := (binrel% HMul.hMul let3 let7)
  let let10 := (Neg.neg let5)
  let let11 := (binrel% HMul.hMul let10 let7)
  let let12 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let9 let8))
  let let13 := (binrel% HMul.hMul let5 skoY)
  let let14 := (binrel% HMul.hMul let3 skoX)
  let let15 := (Int.ofNat 2000)
  let let16 := (binrel% HMul.hMul (Neg.neg let15) skoX)
  let let17 := (binrel% HAdd.hAdd skoY let16)
  let let18 := (binrel% HMul.hMul let10 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let14 let13))
  let let20 := (binrel% GE.ge let19 let12)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt let19 let12)
  let let23 := (binrel% HMul.hMul let15 skoX)
  let let24 := (Int.ofNat 1)
  let let25 := (Neg.neg let24)
  let let26 := (binrel% HMul.hMul let25 skoY)
  let let27 := (binrel% HAdd.hAdd let26 let23)
  let let28 := (binrel% GE.ge skoY let1)
  let let29 := (binrel% LE.le let7 skoY)
  let let30 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let31 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let32 := (binrel% GE.ge (binrel% HMul.hMul let25 skoX) let1)
  let let33 := (Not let32)
  let let34 := (Not let33)
  let let35 := (Eq let32 let34)
  let let36 := (Eq let34 let32)
  let let37 := (Not True)
  let let38 := (binrel% GE.ge let27 let1)
  let let39 := (binrel% LE.le skoY let23)
  let let40 := (binrel% GE.ge (binrel% HMul.hMul let25 pi) (Neg.neg let30))
  let let41 := (binrel% LE.le pi let30)
  let let42 := (binrel% LE.le skoX let7)
  let let43 := (binrel% LE.le let17 let7)
  let let44 := (binrel% HDiv.hDiv let24 (Int.ofNat 2))
  let let45 := (binrel% HMul.hMul let44 pi)
  let let46 := (binrel% HMul.hMul pi let44)
  let let47 := (Not let42)
  let let48 := (binrel% GT.gt skoX let7)
  let let49 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let44) pi)) let1)
  let let50 := (binrel% LE.le let45 skoY)
  let let51 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let52 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let53 := (binrel% GE.ge pi let51)
  let let54 := (binrel% LE.le let51 pi)
  let let55 := (binrel% HMul.hMul skoX let2)
  let let56 := (Eq let32 let32)
  let let57 := (binrel% GE.ge let26 let1)
  let let58 := (binrel% LE.le skoY let7)
  let let59 := (binrel% GE.ge (binrel% HAdd.hAdd let26 skoX) let1)
  let let60 := (binrel% LE.le skoY skoX)
  let let61 := (binrel% LE.le pi let31)
  let let62 := (Not let61)
  let let63 := (binrel% LE.le let52 pi)
  let let64 := (Not let63)
  let let65 := (binrel% HDiv.hDiv let5 (Rat.ofInt 2))
  let let66 := (binrel% HMul.hMul pi let65)
  let let67 := (binrel% LE.le let66 skoY)
  let let68 := (Not let67)
  let let69 := (Not let60)
  let let70 := (binrel% LE.le skoY let55)
  let let71 := (Not let70)
  let let72 := (And let29 (And let58 (And let71 (And let69 (And let47 (And let68 (And let64 let62)))))))
  let let73 := (binrel% LT.lt let10 let1)
  let let74 := (Not let43)
  let let75 := (binrel% GT.gt let17 let7)
  let let76 := (binrel% GE.ge let7 let7)
  let let77 := (Not let38)
  let let78 := (Not let77)
  let let79 := (Eq let78 let38)
  let let80 := (Eq let38 let78)
  let let81 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let7 let7))
  let let82 := (Eq let38 let38)
  let let83 := (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let16 skoY))
  let let84 := (Not let40)
  let let85 := (Not let53)
  let let86 := (Not let49)
  let let87 := (Not let59)
  let let88 := (And let28 (And let57 (And let77 (And let87 (And let33 (And let86 (And let85 let84)))))))
  let let89 := (Eq let72 let88)
  let let90 := (Not let57)
  let let91 := (Or let90 (Or let32 let38))
  let let92 := (Or let90 (Or let34 let78))
  let let93 := (Not let75)
  let let94 := (binrel% LE.le let13 let8)
  let let95 := (And let6 let58)
  let let96 := (binrel% LT.lt let14 let9)
  let let97 := (And let4 let48)
  let let98 := (binrel% LT.lt let18 let11)
  let let99 := (And let73 let75)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let6 True) => -- EVALUATE
fun lean_r2 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let18 let27) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let14 let16) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let13 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let36 let35) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let37 False) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let42 let32) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let43 let38) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let46 let45) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let48 let47) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let54 let53) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let55 let23) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let56 True) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let58 let57) => -- THEORY_REWRITE_ARITH
fun lean_r22 : let36 => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let60 let59) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let72 let72) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let73 True) => -- EVALUATE
fun lean_r26 : (Eq let75 let74) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let76 True) => -- THEORY_REWRITE_ARITH
fun lean_r28 : let79 => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let79 let80) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let81 let7) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let9 let7) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let11 let7) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let65 let44) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let82 True) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let83 let7) => -- THEORY_REWRITE_ARITH
fun lean_a37 : let72 => by
have lean_s0 : (Or let90 (Or let34 (Or let78 False))) :=
  (scope (fun lean_a38 : let57 =>
    (scope (fun lean_a39 : let33 =>
      (scope (fun lean_a40 : let77 =>
        have lean_s0 : (Eq let74 let77) := by timed flipCongrArg lean_r13 [Not]
        have lean_s1 : (Eq let75 let77) := by timed Eq.trans lean_r26 lean_s0
        have lean_s2 : (Eq let77 let75) := by timed Eq.symm lean_s1
        have lean_s3 : let75 := by timed eqResolve lean_a40 lean_s2
        have lean_s4 : (Or let93 False) :=
          (scope (fun lean_a41 : let75 =>
            have lean_s4 : let73 := by timed trueElim lean_r25
            have lean_s5 : let99 := by timed And.intro lean_s4 lean_a41
            have lean_s6 : (Implies let99 let98) := by arithMulNeg [let17, let7, let10], 2
            have lean_s7 : let98 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : let4 := by timed trueElim lean_r0
            have lean_s9 : (Eq let47 let33) := by timed flipCongrArg lean_r12 [Not]
            have lean_s10 : (Eq let48 let33) := by timed Eq.trans lean_r15 lean_s9
            have lean_s11 : (Eq let33 let48) := by timed Eq.symm lean_s10
            have lean_s12 : let48 := by timed eqResolve lean_a39 lean_s11
            have lean_s13 : let97 := by timed And.intro lean_s8 lean_s12
            have lean_s14 : (Implies let97 let96) := by arithMulNeg [skoX, let7, let3], 2
            have lean_s15 : let96 := by timed modusPonens lean_s13 lean_s14
            have lean_s16 : let6 := by timed trueElim lean_r1
            have lean_s17 : (Eq let57 let58) := by timed Eq.symm lean_r21
            have lean_s18 : let58 := by timed eqResolve lean_a38 lean_s17
            have lean_s19 : let95 := by timed And.intro lean_s16 lean_s18
            have lean_s20 : (Implies let95 let94) := by arithMulPos [skoY, let7, let5], 1
            have lean_s21 : let94 := by timed modusPonens lean_s19 lean_s20
            have lean_s22 : let22 := by sumBounds [lean_s7, lean_s15, lean_s21]
            let lean_s23 := by timed congrHAdd lean_r4 lean_r5
            have lean_s24 : (Eq let19 let83) := by timed congrHAdd lean_r3 lean_s23
            have lean_s25 : (Eq let19 let7) := by timed Eq.trans lean_s24 lean_r36
            let lean_s26 := by timed flipCongrArg lean_s25 [GE.ge]
            let lean_s27 := by timed congrHAdd lean_r32 lean_r31
            have lean_s28 : (Eq let12 let81) := by timed congrHAdd lean_r33 lean_s27
            have lean_s29 : (Eq let12 let7) := by timed Eq.trans lean_s28 lean_r30
            have lean_s30 : (Eq let20 let76) := by timed congr lean_s26 lean_s29
            have lean_s31 : (Eq let20 True) := by timed Eq.trans lean_s30 lean_r27
            have lean_s32 : (Eq let21 let37) := by timed flipCongrArg lean_s31 [Not]
            have lean_s33 : (Eq let21 False) := by timed Eq.trans lean_s32 lean_r9
            have lean_s34 : (Eq let22 False) := by timed Eq.trans lean_r2 lean_s33
            show False from by timed eqResolve lean_s22 lean_s34
          ))
        have lean_s5 : let93 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let93 let78) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let93 let38) := by timed Eq.trans lean_s6 lean_r28
        have lean_s8 : (Eq let38 let43) := by timed Eq.symm lean_r13
        have lean_s9 : (Eq let93 let43) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let43 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let38 let93) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let43 let93) := by timed Eq.trans lean_r13 lean_s11
        have lean_s13 : let93 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let57 (And let33 let77))) := by liftOrNToNeg lean_s0
have lean_s2 : let92 := by timed flipNotAnd lean_s1 [let57, let33, let77]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let90 let90) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let56 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let35 let56) := by timed congr lean_s7 lean_r22
have lean_s9 : (Eq let35 True) := by timed Eq.trans lean_s8 lean_r20
have lean_s10 : (Eq let36 True) := by timed Eq.trans lean_r8 lean_s9
have lean_s11 : let36 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let82 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let80 let82) := by timed congr lean_s14 lean_r28
have lean_s16 : (Eq let80 True) := by timed Eq.trans lean_s15 lean_r35
have lean_s17 : (Eq let79 True) := by timed Eq.trans lean_r29 lean_s16
have lean_s18 : let79 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s12 lean_s18
have lean_s20 : (Eq let92 let91) := by timed congr lean_s5 lean_s19
have lean_s21 : let91 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let38 (Or let32 let90)) := by permutateOr lean_s21, [2, 1, 0], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
let lean_s24 := by timed congr lean_s23 lean_r6
let lean_s25 := by timed congr lean_s23 lean_r21
have lean_s26 : (Eq skoY skoY) := by timed rfl
let lean_s27 := by timed flipCongrArg lean_s26 [LE.le]
have lean_s28 : (Eq let70 let39) := by timed congr lean_s27 lean_r19
have lean_s29 : (Eq let70 let38) := by timed Eq.trans lean_s28 lean_r10
have lean_s30 : (Eq let71 let77) := by timed flipCongrArg lean_s29 [Not]
let lean_s31 := by timed congr lean_s23 lean_s30
have lean_s32 : (Eq let69 let87) := by timed flipCongrArg lean_r23 [Not]
let lean_s33 := by timed congr lean_s23 lean_s32
have lean_s34 : (Eq let47 let33) := by timed flipCongrArg lean_r12 [Not]
let lean_s35 := by timed congr lean_s23 lean_s34
have lean_s36 : (Eq pi pi) := by timed rfl
let lean_s37 := by timed flipCongrArg lean_s36 [HMul.hMul]
have lean_s38 : (Eq let66 let46) := by timed congr lean_s37 lean_r34
have lean_s39 : (Eq let66 let45) := by timed Eq.trans lean_s38 lean_r14
let lean_s40 := by timed flipCongrArg lean_s39 [LE.le]
have lean_s41 : (Eq let67 let50) := by timed congr lean_s40 lean_s26
have lean_s42 : (Eq let67 let49) := by timed Eq.trans lean_s41 lean_r16
have lean_s43 : (Eq let68 let86) := by timed flipCongrArg lean_s42 [Not]
let lean_s44 := by timed congr lean_s23 lean_s43
let lean_s45 := by timed flipCongrArg lean_r17 [LE.le]
have lean_s46 : (Eq let63 let54) := by timed congr lean_s45 lean_s36
have lean_s47 : (Eq let63 let53) := by timed Eq.trans lean_s46 lean_r18
have lean_s48 : (Eq let64 let85) := by timed flipCongrArg lean_s47 [Not]
let lean_s49 := by timed congr lean_s23 lean_s48
let lean_s50 := by timed flipCongrArg lean_s36 [LE.le]
have lean_s51 : (Eq let61 let41) := by timed congr lean_s50 lean_r7
have lean_s52 : (Eq let61 let40) := by timed Eq.trans lean_s51 lean_r11
have lean_s53 : (Eq let62 let84) := by timed flipCongrArg lean_s52 [Not]
let lean_s54 := by timed congr lean_s49 lean_s53
let lean_s55 := by timed congr lean_s44 lean_s54
let lean_s56 := by timed congr lean_s35 lean_s55
let lean_s57 := by timed congr lean_s33 lean_s56
let lean_s58 := by timed congr lean_s31 lean_s57
let lean_s59 := by timed congr lean_s25 lean_s58
have lean_s60 : let89 := by timed congr lean_s24 lean_s59
have lean_s61 : let89 := by timed Eq.trans lean_r24 lean_s60
have lean_s62 : let88 := by timed eqResolve lean_a37 lean_s61
have lean_s63 : let33 := by andElim lean_s62, 4
let lean_s64 := by R1 lean_s22, lean_s63, let32, [(- 1), 0]
have lean_s65 : let77 := by andElim lean_s62, 2
let lean_s66 := by R1 lean_s64, lean_s65, let38, [(- 1), 0]
have lean_s67 : let57 := by andElim lean_s62, 1
exact (show False from by R2 lean_s66, lean_s67, let57, [0, 0])


