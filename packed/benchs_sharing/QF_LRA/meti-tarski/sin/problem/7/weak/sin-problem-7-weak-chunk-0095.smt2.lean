open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 2000)
  let let3 := (binrel% HMul.hMul let2 skoX)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 skoY)
  let let7 := (binrel% GE.ge (binrel% HAdd.hAdd let6 let3) let1)
  let let8 := (Not let7)
  let let9 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let2) skoX)) let1)
  let let10 := (Not let9)
  let let11 := (Or let10 let8)
  let let12 := (binrel% GE.ge (binrel% HAdd.hAdd let6 skoX) let1)
  let let13 := (Not let12)
  let let14 := (binrel% HMul.hMul let5 skoX)
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (Not let15)
  let let17 := (binrel% HDiv.hDiv let4 (Int.ofNat 2))
  let let18 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let17) pi)) let1)
  let let19 := (Not let18)
  let let20 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let21 := (binrel% GE.ge pi let20)
  let let22 := (Not let21)
  let let23 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let24 := (binrel% GE.ge (binrel% HMul.hMul let5 pi) (Neg.neg let23))
  let let25 := (Not let24)
  let let26 := (And let25 (And let22 (And let19 (And let16 (And let13 let11)))))
  let let27 := (binrel% GE.ge skoX let1)
  let let28 := (Not let27)
  let let29 := (And let28 (And (Not (And (binrel% GE.ge let6 let1) (binrel% GE.ge skoY let1))) let26))
  let let30 := (Rat.ofInt 0)
  let let31 := (Not (Eq skoY let30))
  let let32 := (And let28 (And let31 let26))
  let let33 := (binrel% HMul.hMul let17 pi)
  let let34 := (binrel% HMul.hMul pi let17)
  let let35 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let36 := (Not let28)
  let let37 := (binrel% GE.ge let30 let30)
  let let38 := (binrel% LE.le pi let23)
  let let39 := (Rat.ofInt 1)
  let let40 := (binrel% HDiv.hDiv let39 (Rat.ofInt 2))
  let let41 := (binrel% LE.le skoY skoX)
  let let42 := (binrel% LE.le let3 skoY)
  let let43 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let44 := (binrel% HMul.hMul skoX (Rat.ofInt 2000))
  let let45 := (binrel% LE.le skoY let3)
  let let46 := (Neg.neg let39)
  let let47 := (binrel% HMul.hMul let46 skoX)
  let let48 := (binrel% LE.le let20 pi)
  let let49 := (Not True)
  let let50 := (binrel% LE.le skoX let30)
  let let51 := (Not let50)
  let let52 := (binrel% GT.gt skoX let30)
  let let53 := (binrel% HAdd.hAdd let30 let30)
  let let54 := (binrel% GT.gt let39 let1)
  let let55 := (binrel% HMul.hMul let39 let30)
  let let56 := (Not let16)
  let let57 := (binrel% HAdd.hAdd skoX let14)
  let let58 := (binrel% LE.le let33 skoY)
  let let59 := (binrel% HMul.hMul let39 skoX)
  let let60 := (binrel% HMul.hMul let46 let30)
  let let61 := (binrel% HAdd.hAdd let55 let60)
  let let62 := (binrel% HAdd.hAdd let59 let47)
  let let63 := (binrel% GE.ge let62 let61)
  let let64 := (Not let63)
  let let65 := (binrel% LT.lt let62 let61)
  let let66 := (binrel% LT.lt let46 let1)
  let let67 := (binrel% LE.le let30 skoX)
  let let68 := (binrel% GE.ge skoX let30)
  let let69 := (binrel% LE.le skoY let44)
  let let70 := (Not let69)
  let let71 := (binrel% LE.le let44 skoY)
  let let72 := (Not let71)
  let let73 := (Or let72 let70)
  let let74 := (Not let41)
  let let75 := (binrel% HMul.hMul pi let40)
  let let76 := (binrel% LE.le let75 skoY)
  let let77 := (Not let76)
  let let78 := (binrel% LE.le let35 pi)
  let let79 := (Not let78)
  let let80 := (binrel% LE.le pi let43)
  let let81 := (Not let80)
  let let82 := (Not let67)
  let let83 := (And let82 (And let31 (And let81 (And let79 (And let77 (And let51 (And let74 let73)))))))
  let let84 := (Not let68)
  let let85 := (binrel% LT.lt skoX let30)
  let let86 := (Eq let83 let32)
  let let87 := (Or let27 let15)
  let let88 := (Or let36 let56)
  let let89 := (binrel% LT.lt let47 let60)
  let let90 := (And let66 let52)
  let let91 := (binrel% LT.lt let59 let55)
  let let92 := (And let54 let85)
(Eq let32 let29) → (Eq let34 let33) → (Eq let35 let20) → (Eq let36 let27) → (Eq let37 True) → (Eq let38 let24) → (Eq let40 let17) → (Eq let41 let12) → (Eq let42 let9) → (Eq let43 let23) → (Eq let44 let3) → (Eq let45 let7) → (Eq let47 let14) → (Eq let48 let21) → (Eq let49 False) → (Eq let52 let51) → (Eq let53 let30) → (Eq let54 True) → (Eq let55 let30) → (Eq let50 let15) → (Eq let56 let15) → (Eq let57 let30) → (Eq let58 let18) → (Eq let59 skoX) → (Eq let65 let64) → (Eq let66 True) → (Eq let67 let27) → (Eq let68 let27) → (Eq let83 let83) → (Eq let60 let30) → (Eq let85 let84) → let83 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 2000)
  let let3 := (binrel% HMul.hMul let2 skoX)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 skoY)
  let let7 := (binrel% GE.ge (binrel% HAdd.hAdd let6 let3) let1)
  let let8 := (Not let7)
  let let9 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let2) skoX)) let1)
  let let10 := (Not let9)
  let let11 := (Or let10 let8)
  let let12 := (binrel% GE.ge (binrel% HAdd.hAdd let6 skoX) let1)
  let let13 := (Not let12)
  let let14 := (binrel% HMul.hMul let5 skoX)
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (Not let15)
  let let17 := (binrel% HDiv.hDiv let4 (Int.ofNat 2))
  let let18 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let17) pi)) let1)
  let let19 := (Not let18)
  let let20 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let21 := (binrel% GE.ge pi let20)
  let let22 := (Not let21)
  let let23 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let24 := (binrel% GE.ge (binrel% HMul.hMul let5 pi) (Neg.neg let23))
  let let25 := (Not let24)
  let let26 := (And let25 (And let22 (And let19 (And let16 (And let13 let11)))))
  let let27 := (binrel% GE.ge skoX let1)
  let let28 := (Not let27)
  let let29 := (And let28 (And (Not (And (binrel% GE.ge let6 let1) (binrel% GE.ge skoY let1))) let26))
  let let30 := (Rat.ofInt 0)
  let let31 := (Not (Eq skoY let30))
  let let32 := (And let28 (And let31 let26))
  let let33 := (binrel% HMul.hMul let17 pi)
  let let34 := (binrel% HMul.hMul pi let17)
  let let35 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let36 := (Not let28)
  let let37 := (binrel% GE.ge let30 let30)
  let let38 := (binrel% LE.le pi let23)
  let let39 := (Rat.ofInt 1)
  let let40 := (binrel% HDiv.hDiv let39 (Rat.ofInt 2))
  let let41 := (binrel% LE.le skoY skoX)
  let let42 := (binrel% LE.le let3 skoY)
  let let43 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let44 := (binrel% HMul.hMul skoX (Rat.ofInt 2000))
  let let45 := (binrel% LE.le skoY let3)
  let let46 := (Neg.neg let39)
  let let47 := (binrel% HMul.hMul let46 skoX)
  let let48 := (binrel% LE.le let20 pi)
  let let49 := (Not True)
  let let50 := (binrel% LE.le skoX let30)
  let let51 := (Not let50)
  let let52 := (binrel% GT.gt skoX let30)
  let let53 := (binrel% HAdd.hAdd let30 let30)
  let let54 := (binrel% GT.gt let39 let1)
  let let55 := (binrel% HMul.hMul let39 let30)
  let let56 := (Not let16)
  let let57 := (binrel% HAdd.hAdd skoX let14)
  let let58 := (binrel% LE.le let33 skoY)
  let let59 := (binrel% HMul.hMul let39 skoX)
  let let60 := (binrel% HMul.hMul let46 let30)
  let let61 := (binrel% HAdd.hAdd let55 let60)
  let let62 := (binrel% HAdd.hAdd let59 let47)
  let let63 := (binrel% GE.ge let62 let61)
  let let64 := (Not let63)
  let let65 := (binrel% LT.lt let62 let61)
  let let66 := (binrel% LT.lt let46 let1)
  let let67 := (binrel% LE.le let30 skoX)
  let let68 := (binrel% GE.ge skoX let30)
  let let69 := (binrel% LE.le skoY let44)
  let let70 := (Not let69)
  let let71 := (binrel% LE.le let44 skoY)
  let let72 := (Not let71)
  let let73 := (Or let72 let70)
  let let74 := (Not let41)
  let let75 := (binrel% HMul.hMul pi let40)
  let let76 := (binrel% LE.le let75 skoY)
  let let77 := (Not let76)
  let let78 := (binrel% LE.le let35 pi)
  let let79 := (Not let78)
  let let80 := (binrel% LE.le pi let43)
  let let81 := (Not let80)
  let let82 := (Not let67)
  let let83 := (And let82 (And let31 (And let81 (And let79 (And let77 (And let51 (And let74 let73)))))))
  let let84 := (Not let68)
  let let85 := (binrel% LT.lt skoX let30)
  let let86 := (Eq let83 let32)
  let let87 := (Or let27 let15)
  let let88 := (Or let36 let56)
  let let89 := (binrel% LT.lt let47 let60)
  let let90 := (And let66 let52)
  let let91 := (binrel% LT.lt let59 let55)
  let let92 := (And let54 let85)
fun lean_h0 : (Eq let32 let29) => -- PREPROCESS
fun lean_r1 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let35 let20) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let36 let27) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq let37 True) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let38 let24) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let40 let17) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let41 let12) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let42 let9) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let43 let23) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let44 let3) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let45 let7) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let47 let14) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let48 let21) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let49 False) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let53 let30) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let54 True) => -- EVALUATE
fun lean_r18 : (Eq let55 let30) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let50 let15) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let56 let15) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let57 let30) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let58 let18) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let59 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let65 let64) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let66 True) => -- EVALUATE
fun lean_r26 : (Eq let67 let27) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let68 let27) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let83 let83) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let60 let30) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let85 let84) => -- THEORY_REWRITE_ARITH
fun lean_a31 : let83 => by
have lean_s0 : (Or let36 (Or let56 False)) :=
  (scope (fun lean_a32 : let28 =>
    (scope (fun lean_a33 : let16 =>
      have lean_s0 : let54 := by timed trueElim lean_r17
      have lean_s1 : (Eq let84 let28) := by timed flipCongrArg lean_r27 [Not]
      have lean_s2 : (Eq let85 let28) := by timed Eq.trans lean_r30 lean_s1
      have lean_s3 : (Eq let28 let85) := by timed Eq.symm lean_s2
      have lean_s4 : let85 := by timed eqResolve lean_a32 lean_s3
      have lean_s5 : let92 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let92 let91) := by arithMulPos [skoX, let30, let39], 0
      have lean_s7 : let91 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let66 := by timed trueElim lean_r25
      have lean_s9 : (Eq let51 let16) := by timed flipCongrArg lean_r19 [Not]
      have lean_s10 : (Eq let52 let16) := by timed Eq.trans lean_r15 lean_s9
      have lean_s11 : (Eq let16 let52) := by timed Eq.symm lean_s10
      have lean_s12 : let52 := by timed eqResolve lean_a33 lean_s11
      have lean_s13 : let90 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let90 let89) := by arithMulNeg [skoX, let30, let46], 2
      have lean_s15 : let89 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let65 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r23 [HAdd.hAdd]
      have lean_s18 : (Eq let62 let57) := by timed congr lean_s17 lean_r12
      have lean_s19 : (Eq let62 let30) := by timed Eq.trans lean_s18 lean_r21
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r18 [HAdd.hAdd]
      have lean_s22 : (Eq let61 let53) := by timed congr lean_s21 lean_r29
      have lean_s23 : (Eq let61 let30) := by timed Eq.trans lean_s22 lean_r16
      have lean_s24 : (Eq let63 let37) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let63 True) := by timed Eq.trans lean_s24 lean_r4
      have lean_s26 : (Eq let64 let49) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let64 False) := by timed Eq.trans lean_s26 lean_r14
      have lean_s28 : (Eq let65 False) := by timed Eq.trans lean_r24 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let28 let16)) := by liftOrNToNeg lean_s0
have lean_s2 : let88 := by timed flipNotAnd lean_s1 [let28, let16]
let lean_s3 := by timed flipCongrArg lean_r3 [Or]
have lean_s4 : (Eq let88 let87) := by timed congr lean_s3 lean_r20
have lean_s5 : let87 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
have lean_s7 : (Eq let82 let28) := by timed flipCongrArg lean_r26 [Not]
let lean_s8 := by timed congr lean_s6 lean_s7
have lean_s9 : (Eq let31 let31) := by timed rfl
let lean_s10 := by timed congr lean_s6 lean_s9
have lean_s11 : (Eq pi pi) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [LE.le]
have lean_s13 : (Eq let80 let38) := by timed congr lean_s12 lean_r9
have lean_s14 : (Eq let80 let24) := by timed Eq.trans lean_s13 lean_r5
have lean_s15 : (Eq let81 let25) := by timed flipCongrArg lean_s14 [Not]
let lean_s16 := by timed congr lean_s6 lean_s15
let lean_s17 := by timed flipCongrArg lean_r2 [LE.le]
have lean_s18 : (Eq let78 let48) := by timed congr lean_s17 lean_s11
have lean_s19 : (Eq let78 let21) := by timed Eq.trans lean_s18 lean_r13
have lean_s20 : (Eq let79 let22) := by timed flipCongrArg lean_s19 [Not]
let lean_s21 := by timed congr lean_s6 lean_s20
let lean_s22 := by timed flipCongrArg lean_s11 [HMul.hMul]
have lean_s23 : (Eq let75 let34) := by timed congr lean_s22 lean_r6
have lean_s24 : (Eq let75 let33) := by timed Eq.trans lean_s23 lean_r1
let lean_s25 := by timed flipCongrArg lean_s24 [LE.le]
have lean_s26 : (Eq skoY skoY) := by timed rfl
have lean_s27 : (Eq let76 let58) := by timed congr lean_s25 lean_s26
have lean_s28 : (Eq let76 let18) := by timed Eq.trans lean_s27 lean_r22
have lean_s29 : (Eq let77 let19) := by timed flipCongrArg lean_s28 [Not]
let lean_s30 := by timed congr lean_s6 lean_s29
have lean_s31 : (Eq let51 let16) := by timed flipCongrArg lean_r19 [Not]
let lean_s32 := by timed congr lean_s6 lean_s31
have lean_s33 : (Eq let74 let13) := by timed flipCongrArg lean_r7 [Not]
let lean_s34 := by timed congr lean_s6 lean_s33
let lean_s35 := by timed flipCongrArg lean_r10 [LE.le]
have lean_s36 : (Eq let71 let42) := by timed congr lean_s35 lean_s26
have lean_s37 : (Eq let71 let9) := by timed Eq.trans lean_s36 lean_r8
have lean_s38 : (Eq let72 let10) := by timed flipCongrArg lean_s37 [Not]
let lean_s39 := by timed flipCongrArg lean_s38 [Or]
let lean_s40 := by timed flipCongrArg lean_s26 [LE.le]
have lean_s41 : (Eq let69 let45) := by timed congr lean_s40 lean_r10
have lean_s42 : (Eq let69 let7) := by timed Eq.trans lean_s41 lean_r11
have lean_s43 : (Eq let70 let8) := by timed flipCongrArg lean_s42 [Not]
have lean_s44 : (Eq let73 let11) := by timed congr lean_s39 lean_s43
let lean_s45 := by timed congr lean_s34 lean_s44
let lean_s46 := by timed congr lean_s32 lean_s45
let lean_s47 := by timed congr lean_s30 lean_s46
let lean_s48 := by timed congr lean_s21 lean_s47
let lean_s49 := by timed congr lean_s16 lean_s48
let lean_s50 := by timed congr lean_s10 lean_s49
have lean_s51 : let86 := by timed congr lean_s8 lean_s50
have lean_s52 : let86 := by timed Eq.trans lean_r28 lean_s51
have lean_s53 : (Eq let83 let29) := by timed Eq.trans lean_s52 lean_h0
have lean_s54 : let29 := by timed eqResolve lean_a31 lean_s53
have lean_s55 : let16 := by andElim lean_s54, 5
let lean_s56 := by R1 lean_s5, lean_s55, let15, [(- 1), 0]
have lean_s57 : let28 := by andElim lean_s54, 0
exact (show False from by R1 lean_s56, lean_s57, let27, [0, 0])


