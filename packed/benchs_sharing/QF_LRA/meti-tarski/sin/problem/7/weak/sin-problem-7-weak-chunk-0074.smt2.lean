open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let2 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let3 := (Int.ofNat 2000)
  let let4 := (binrel% HMul.hMul let3 skoX)
  let let5 := (binrel% HMul.hMul skoX (Rat.ofInt 2000))
  let let6 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let7 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let8 := (Int.ofNat 0)
  let let9 := (Int.ofNat 1)
  let let10 := (binrel% HDiv.hDiv let9 let3)
  let let11 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul (Neg.neg let10) skoY)) let8)
  let let12 := (binrel% LE.le skoY let4)
  let let13 := (binrel% GE.ge skoX let8)
  let let14 := (Not let13)
  let let15 := (Not let14)
  let let16 := (Neg.neg let9)
  let let17 := (binrel% HMul.hMul let16 skoX)
  let let18 := (binrel% GE.ge (binrel% HAdd.hAdd let17 (binrel% HMul.hMul let10 skoY)) let8)
  let let19 := (binrel% LE.le let4 skoY)
  let let20 := (binrel% GE.ge let17 let8)
  let let21 := (Rat.ofInt 0)
  let let22 := (binrel% LE.le skoX let21)
  let let23 := (binrel% HDiv.hDiv let9 (Int.ofNat 2))
  let let24 := (Rat.ofInt 1)
  let let25 := (binrel% HDiv.hDiv let24 (Rat.ofInt 2))
  let let26 := (binrel% HMul.hMul let23 pi)
  let let27 := (binrel% HMul.hMul pi let23)
  let let28 := (Neg.neg let24)
  let let29 := (binrel% HMul.hMul let28 skoX)
  let let30 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let23) pi)) let8)
  let let31 := (binrel% LE.le let26 skoY)
  let let32 := (binrel% GT.gt let24 let8)
  let let33 := (binrel% HMul.hMul let24 let21)
  let let34 := (binrel% GE.ge pi let1)
  let let35 := (binrel% LE.le let1 pi)
  let let36 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let16 skoY)) let8)
  let let37 := (binrel% LE.le skoY skoX)
  let let38 := (binrel% LE.le let21 skoX)
  let let39 := (binrel% GE.ge skoX let21)
  let let40 := (Not True)
  let let41 := (binrel% GE.ge (binrel% HMul.hMul let16 pi) (Neg.neg let6))
  let let42 := (binrel% LE.le pi let6)
  let let43 := (Not let22)
  let let44 := (binrel% GT.gt skoX let21)
  let let45 := (binrel% GE.ge let21 let21)
  let let46 := (binrel% HAdd.hAdd let21 let21)
  let let47 := (Not let20)
  let let48 := (Not let47)
  let let49 := (binrel% HAdd.hAdd skoX let17)
  let let50 := (binrel% HMul.hMul let24 skoX)
  let let51 := (binrel% HMul.hMul let28 let21)
  let let52 := (binrel% HAdd.hAdd let33 let51)
  let let53 := (binrel% HAdd.hAdd let50 let29)
  let let54 := (binrel% GE.ge let53 let52)
  let let55 := (Not let54)
  let let56 := (binrel% LT.lt let53 let52)
  let let57 := (binrel% LT.lt let28 let8)
  let let58 := (binrel% LE.le pi let7)
  let let59 := (Not let58)
  let let60 := (binrel% LE.le let2 pi)
  let let61 := (Not let60)
  let let62 := (binrel% HMul.hMul pi let25)
  let let63 := (binrel% LE.le let62 skoY)
  let let64 := (Not let63)
  let let65 := (Not let37)
  let let66 := (binrel% LE.le skoY let5)
  let let67 := (Not let66)
  let let68 := (binrel% LE.le let5 skoY)
  let let69 := (Not let68)
  let let70 := (Or let69 let67)
  let let71 := (Not let38)
  let let72 := (And let71 (And let69 (And let70 (And let65 (And let43 (And let64 (And let61 let59)))))))
  let let73 := (Not let39)
  let let74 := (binrel% LT.lt skoX let21)
  let let75 := (Not let41)
  let let76 := (Not let34)
  let let77 := (Not let30)
  let let78 := (Not let36)
  let let79 := (Not let11)
  let let80 := (Not let18)
  let let81 := (Or let80 let79)
  let let82 := (And let14 (And let80 (And let81 (And let78 (And let47 (And let77 (And let76 let75)))))))
  let let83 := (Eq let72 let82)
  let let84 := (Or let13 let20)
  let let85 := (Or let15 let48)
  let let86 := (binrel% LT.lt let29 let51)
  let let87 := (And let57 let44)
  let let88 := (binrel% LT.lt let50 let33)
  let let89 := (And let32 let74)
(Eq let2 let1) → (Eq let5 let4) → (Eq let7 let6) → (Eq let12 let11) → (Eq let15 let13) → (Eq let19 let18) → (Eq let22 let20) → (Eq let25 let23) → (Eq let27 let26) → (Eq let29 let17) → (Eq let31 let30) → (Eq let32 True) → (Eq let33 let21) → (Eq let35 let34) → (Eq let37 let36) → (Eq let38 let13) → (Eq let39 let13) → (Eq let40 False) → (Eq let42 let41) → (Eq let44 let43) → (Eq let45 True) → (Eq let46 let21) → (Eq let48 let20) → (Eq let49 let21) → (Eq let50 skoX) → (Eq let56 let55) → (Eq let57 True) → (Eq let72 let72) → (Eq let51 let21) → (Eq let74 let73) → let72 → False :=
  let let1 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let2 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let3 := (Int.ofNat 2000)
  let let4 := (binrel% HMul.hMul let3 skoX)
  let let5 := (binrel% HMul.hMul skoX (Rat.ofInt 2000))
  let let6 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let7 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let8 := (Int.ofNat 0)
  let let9 := (Int.ofNat 1)
  let let10 := (binrel% HDiv.hDiv let9 let3)
  let let11 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul (Neg.neg let10) skoY)) let8)
  let let12 := (binrel% LE.le skoY let4)
  let let13 := (binrel% GE.ge skoX let8)
  let let14 := (Not let13)
  let let15 := (Not let14)
  let let16 := (Neg.neg let9)
  let let17 := (binrel% HMul.hMul let16 skoX)
  let let18 := (binrel% GE.ge (binrel% HAdd.hAdd let17 (binrel% HMul.hMul let10 skoY)) let8)
  let let19 := (binrel% LE.le let4 skoY)
  let let20 := (binrel% GE.ge let17 let8)
  let let21 := (Rat.ofInt 0)
  let let22 := (binrel% LE.le skoX let21)
  let let23 := (binrel% HDiv.hDiv let9 (Int.ofNat 2))
  let let24 := (Rat.ofInt 1)
  let let25 := (binrel% HDiv.hDiv let24 (Rat.ofInt 2))
  let let26 := (binrel% HMul.hMul let23 pi)
  let let27 := (binrel% HMul.hMul pi let23)
  let let28 := (Neg.neg let24)
  let let29 := (binrel% HMul.hMul let28 skoX)
  let let30 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let23) pi)) let8)
  let let31 := (binrel% LE.le let26 skoY)
  let let32 := (binrel% GT.gt let24 let8)
  let let33 := (binrel% HMul.hMul let24 let21)
  let let34 := (binrel% GE.ge pi let1)
  let let35 := (binrel% LE.le let1 pi)
  let let36 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let16 skoY)) let8)
  let let37 := (binrel% LE.le skoY skoX)
  let let38 := (binrel% LE.le let21 skoX)
  let let39 := (binrel% GE.ge skoX let21)
  let let40 := (Not True)
  let let41 := (binrel% GE.ge (binrel% HMul.hMul let16 pi) (Neg.neg let6))
  let let42 := (binrel% LE.le pi let6)
  let let43 := (Not let22)
  let let44 := (binrel% GT.gt skoX let21)
  let let45 := (binrel% GE.ge let21 let21)
  let let46 := (binrel% HAdd.hAdd let21 let21)
  let let47 := (Not let20)
  let let48 := (Not let47)
  let let49 := (binrel% HAdd.hAdd skoX let17)
  let let50 := (binrel% HMul.hMul let24 skoX)
  let let51 := (binrel% HMul.hMul let28 let21)
  let let52 := (binrel% HAdd.hAdd let33 let51)
  let let53 := (binrel% HAdd.hAdd let50 let29)
  let let54 := (binrel% GE.ge let53 let52)
  let let55 := (Not let54)
  let let56 := (binrel% LT.lt let53 let52)
  let let57 := (binrel% LT.lt let28 let8)
  let let58 := (binrel% LE.le pi let7)
  let let59 := (Not let58)
  let let60 := (binrel% LE.le let2 pi)
  let let61 := (Not let60)
  let let62 := (binrel% HMul.hMul pi let25)
  let let63 := (binrel% LE.le let62 skoY)
  let let64 := (Not let63)
  let let65 := (Not let37)
  let let66 := (binrel% LE.le skoY let5)
  let let67 := (Not let66)
  let let68 := (binrel% LE.le let5 skoY)
  let let69 := (Not let68)
  let let70 := (Or let69 let67)
  let let71 := (Not let38)
  let let72 := (And let71 (And let69 (And let70 (And let65 (And let43 (And let64 (And let61 let59)))))))
  let let73 := (Not let39)
  let let74 := (binrel% LT.lt skoX let21)
  let let75 := (Not let41)
  let let76 := (Not let34)
  let let77 := (Not let30)
  let let78 := (Not let36)
  let let79 := (Not let11)
  let let80 := (Not let18)
  let let81 := (Or let80 let79)
  let let82 := (And let14 (And let80 (And let81 (And let78 (And let47 (And let77 (And let76 let75)))))))
  let let83 := (Eq let72 let82)
  let let84 := (Or let13 let20)
  let let85 := (Or let15 let48)
  let let86 := (binrel% LT.lt let29 let51)
  let let87 := (And let57 let44)
  let let88 := (binrel% LT.lt let50 let33)
  let let89 := (And let32 let74)
fun lean_r0 : (Eq let2 let1) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let5 let4) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let12 let11) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let15 let13) => -- THEORY_REWRITE_BOOL
fun lean_r5 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let22 let20) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let25 let23) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let29 let17) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let32 True) => -- EVALUATE
fun lean_r12 : (Eq let33 let21) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let38 let13) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let39 let13) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let40 False) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let45 True) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let46 let21) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let48 let20) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let49 let21) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let50 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let56 let55) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let57 True) => -- EVALUATE
fun lean_r27 : (Eq let72 let72) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let51 let21) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let74 let73) => -- THEORY_REWRITE_ARITH
fun lean_a30 : let72 => by
have lean_s0 : (Or let15 (Or let48 False)) :=
  (scope (fun lean_a31 : let14 =>
    (scope (fun lean_a32 : let47 =>
      have lean_s0 : let32 := by timed trueElim lean_r11
      have lean_s1 : (Eq let73 let14) := by timed flipCongrArg lean_r16 [Not]
      have lean_s2 : (Eq let74 let14) := by timed Eq.trans lean_r29 lean_s1
      have lean_s3 : (Eq let14 let74) := by timed Eq.symm lean_s2
      have lean_s4 : let74 := by timed eqResolve lean_a31 lean_s3
      have lean_s5 : let89 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let89 let88) := by arithMulPos [skoX, let21, let24], 0
      have lean_s7 : let88 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let57 := by timed trueElim lean_r26
      have lean_s9 : (Eq let43 let47) := by timed flipCongrArg lean_r6 [Not]
      have lean_s10 : (Eq let44 let47) := by timed Eq.trans lean_r19 lean_s9
      have lean_s11 : (Eq let47 let44) := by timed Eq.symm lean_s10
      have lean_s12 : let44 := by timed eqResolve lean_a32 lean_s11
      have lean_s13 : let87 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let87 let86) := by arithMulNeg [skoX, let21, let28], 2
      have lean_s15 : let86 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let56 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r24 [HAdd.hAdd]
      have lean_s18 : (Eq let53 let49) := by timed congr lean_s17 lean_r9
      have lean_s19 : (Eq let53 let21) := by timed Eq.trans lean_s18 lean_r23
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r12 [HAdd.hAdd]
      have lean_s22 : (Eq let52 let46) := by timed congr lean_s21 lean_r28
      have lean_s23 : (Eq let52 let21) := by timed Eq.trans lean_s22 lean_r21
      have lean_s24 : (Eq let54 let45) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let54 True) := by timed Eq.trans lean_s24 lean_r20
      have lean_s26 : (Eq let55 let40) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let55 False) := by timed Eq.trans lean_s26 lean_r17
      have lean_s28 : (Eq let56 False) := by timed Eq.trans lean_r25 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let14 let47)) := by liftOrNToNeg lean_s0
have lean_s2 : let85 := by timed flipNotAnd lean_s1 [let14, let47]
let lean_s3 := by timed flipCongrArg lean_r4 [Or]
have lean_s4 : (Eq let85 let84) := by timed congr lean_s3 lean_r22
have lean_s5 : let84 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
have lean_s7 : (Eq let71 let14) := by timed flipCongrArg lean_r15 [Not]
let lean_s8 := by timed congr lean_s6 lean_s7
let lean_s9 := by timed flipCongrArg lean_r1 [LE.le]
have lean_s10 : (Eq skoY skoY) := by timed rfl
have lean_s11 : (Eq let68 let19) := by timed congr lean_s9 lean_s10
have lean_s12 : (Eq let68 let18) := by timed Eq.trans lean_s11 lean_r5
have lean_s13 : (Eq let69 let80) := by timed flipCongrArg lean_s12 [Not]
let lean_s14 := by timed congr lean_s6 lean_s13
let lean_s15 := by timed flipCongrArg lean_s13 [Or]
let lean_s16 := by timed flipCongrArg lean_s10 [LE.le]
have lean_s17 : (Eq let66 let12) := by timed congr lean_s16 lean_r1
have lean_s18 : (Eq let66 let11) := by timed Eq.trans lean_s17 lean_r3
have lean_s19 : (Eq let67 let79) := by timed flipCongrArg lean_s18 [Not]
have lean_s20 : (Eq let70 let81) := by timed congr lean_s15 lean_s19
let lean_s21 := by timed congr lean_s6 lean_s20
have lean_s22 : (Eq let65 let78) := by timed flipCongrArg lean_r14 [Not]
let lean_s23 := by timed congr lean_s6 lean_s22
have lean_s24 : (Eq let43 let47) := by timed flipCongrArg lean_r6 [Not]
let lean_s25 := by timed congr lean_s6 lean_s24
have lean_s26 : (Eq pi pi) := by timed rfl
let lean_s27 := by timed flipCongrArg lean_s26 [HMul.hMul]
have lean_s28 : (Eq let62 let27) := by timed congr lean_s27 lean_r7
have lean_s29 : (Eq let62 let26) := by timed Eq.trans lean_s28 lean_r8
let lean_s30 := by timed flipCongrArg lean_s29 [LE.le]
have lean_s31 : (Eq let63 let31) := by timed congr lean_s30 lean_s10
have lean_s32 : (Eq let63 let30) := by timed Eq.trans lean_s31 lean_r10
have lean_s33 : (Eq let64 let77) := by timed flipCongrArg lean_s32 [Not]
let lean_s34 := by timed congr lean_s6 lean_s33
let lean_s35 := by timed flipCongrArg lean_r0 [LE.le]
have lean_s36 : (Eq let60 let35) := by timed congr lean_s35 lean_s26
have lean_s37 : (Eq let60 let34) := by timed Eq.trans lean_s36 lean_r13
have lean_s38 : (Eq let61 let76) := by timed flipCongrArg lean_s37 [Not]
let lean_s39 := by timed congr lean_s6 lean_s38
let lean_s40 := by timed flipCongrArg lean_s26 [LE.le]
have lean_s41 : (Eq let58 let42) := by timed congr lean_s40 lean_r2
have lean_s42 : (Eq let58 let41) := by timed Eq.trans lean_s41 lean_r18
have lean_s43 : (Eq let59 let75) := by timed flipCongrArg lean_s42 [Not]
let lean_s44 := by timed congr lean_s39 lean_s43
let lean_s45 := by timed congr lean_s34 lean_s44
let lean_s46 := by timed congr lean_s25 lean_s45
let lean_s47 := by timed congr lean_s23 lean_s46
let lean_s48 := by timed congr lean_s21 lean_s47
let lean_s49 := by timed congr lean_s14 lean_s48
have lean_s50 : let83 := by timed congr lean_s8 lean_s49
have lean_s51 : let83 := by timed Eq.trans lean_r27 lean_s50
have lean_s52 : let82 := by timed eqResolve lean_a30 lean_s51
have lean_s53 : let47 := by andElim lean_s52, 4
let lean_s54 := by R1 lean_s5, lean_s53, let20, [(- 1), 0]
have lean_s55 : let14 := by andElim lean_s52, 0
exact (show False from by R1 lean_s54, lean_s55, let13, [0, 0])


