open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% HMul.hMul let2 let1)
  let let4 := (Rat.ofInt 2000)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 let1)
  let let7 := (Neg.neg let2)
  let let8 := (binrel% HMul.hMul let7 let1)
  let let9 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let6 let3))
  let let10 := (binrel% HMul.hMul let2 skoY)
  let let11 := (binrel% HMul.hMul let5 skoX)
  let let12 := (Int.ofNat 2000)
  let let13 := (binrel% HMul.hMul (Neg.neg let12) skoX)
  let let14 := (binrel% HAdd.hAdd skoY let13)
  let let15 := (binrel% HMul.hMul let7 let14)
  let let16 := (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let11 let10))
  let let17 := (binrel% GE.ge let16 let9)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let9)
  let let20 := (Int.ofNat 0)
  let let21 := (Int.ofNat 1)
  let let22 := (Neg.neg let21)
  let let23 := (binrel% HMul.hMul let22 skoY)
  let let24 := (binrel% GE.ge let23 let20)
  let let25 := (binrel% LE.le skoY let1)
  let let26 := (binrel% GE.ge (binrel% HMul.hMul let22 skoX) let20)
  let let27 := (binrel% LE.le skoX let1)
  let let28 := (binrel% HDiv.hDiv let21 (Int.ofNat 2))
  let let29 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let30 := (Not let27)
  let let31 := (binrel% GT.gt skoX let1)
  let let32 := (binrel% GE.ge let14 let20)
  let let33 := (binrel% HMul.hMul let12 skoX)
  let let34 := (binrel% LE.le let33 skoY)
  let let35 := (binrel% HAdd.hAdd let23 let33)
  let let36 := (binrel% GE.ge let35 let20)
  let let37 := (binrel% LE.le skoY let33)
  let let38 := (binrel% HMul.hMul let28 pi)
  let let39 := (binrel% HMul.hMul pi let28)
  let let40 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let28) pi)) let20)
  let let41 := (binrel% LE.le let38 skoY)
  let let42 := (binrel% LT.lt let7 let20)
  let let43 := (binrel% GE.ge let14 let1)
  let let44 := (Not let43)
  let let45 := (binrel% LT.lt let14 let1)
  let let46 := (Eq let45 let44)
  let let47 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let48 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let49 := (binrel% GE.ge (binrel% HAdd.hAdd let23 skoX) let20)
  let let50 := (binrel% LE.le skoY skoX)
  let let51 := (binrel% GE.ge (binrel% HMul.hMul let22 pi) (Neg.neg let47))
  let let52 := (binrel% LE.le pi let47)
  let let53 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let54 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let55 := (binrel% LE.le pi let48)
  let let56 := (Not let55)
  let let57 := (binrel% LE.le let54 pi)
  let let58 := (Not let57)
  let let59 := (binrel% HMul.hMul pi let29)
  let let60 := (binrel% LE.le let59 skoY)
  let let61 := (Not let60)
  let let62 := (Not let50)
  let let63 := (binrel% HMul.hMul skoX let4)
  let let64 := (binrel% LE.le skoY let63)
  let let65 := (Not let64)
  let let66 := (binrel% LE.le let63 skoY)
  let let67 := (Not let66)
  let let68 := (Or let67 let65)
  let let69 := (And let66 (And let25 (And let68 (And let62 (And let30 (And let61 (And let58 let56)))))))
  let let70 := (binrel% GT.gt let2 let20)
  let let71 := (Not let26)
  let let72 := (Not let71)
  let let73 := (Eq let26 let72)
  let let74 := (Eq let72 let26)
  let let75 := (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let13 skoY))
  let let76 := (Eq let26 let26)
  let let77 := (Not True)
  let let78 := (binrel% GE.ge let1 let1)
  let let79 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1))
  let let80 := (binrel% LT.lt let5 let20)
  let let81 := (binrel% GE.ge pi let53)
  let let82 := (binrel% LE.le let53 pi)
  let let83 := (Not let51)
  let let84 := (Not let81)
  let let85 := (Not let40)
  let let86 := (Not let49)
  let let87 := (Not let36)
  let let88 := (Not let32)
  let let89 := (Or let88 let87)
  let let90 := (And let32 (And let24 (And let89 (And let86 (And let71 (And let85 (And let84 let83)))))))
  let let91 := (Eq let69 let90)
  let let92 := (Not let24)
  let let93 := (Or let92 (Or let26 let88))
  let let94 := (Or let92 (Or let72 let88))
  let let95 := (binrel% LE.le let10 let3)
  let let96 := (And let70 let25)
  let let97 := (binrel% LT.lt let11 let6)
  let let98 := (And let80 let31)
  let let99 := (binrel% LE.le let15 let8)
  let let100 := (And let42 let43)
(Eq let19 let18) → (Eq let25 let24) → (Eq let27 let26) → (Eq let29 let28) → (Eq let31 let30) → (Eq let34 let32) → (Eq let37 let36) → (Eq let39 let38) → (Eq let41 let40) → (Eq let42 True) → let46 → (Eq let48 let47) → (Eq let10 skoY) → (Eq let50 let49) → (Eq let6 let1) → (Eq let52 let51) → (Eq let54 let53) → (Eq let69 let69) → (Eq let70 True) → (Eq let74 let73) → (Eq let75 let1) → (Eq let76 True) → (Eq let77 False) → let74 → (Eq let78 True) → (Eq let63 let33) → (Eq let79 let1) → (Eq let80 True) → (Eq let82 let81) → (Eq let3 let1) → (Eq let43 let32) → (Eq let8 let1) → (Eq let11 let13) → (Eq let15 let35) → let69 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% HMul.hMul let2 let1)
  let let4 := (Rat.ofInt 2000)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 let1)
  let let7 := (Neg.neg let2)
  let let8 := (binrel% HMul.hMul let7 let1)
  let let9 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let6 let3))
  let let10 := (binrel% HMul.hMul let2 skoY)
  let let11 := (binrel% HMul.hMul let5 skoX)
  let let12 := (Int.ofNat 2000)
  let let13 := (binrel% HMul.hMul (Neg.neg let12) skoX)
  let let14 := (binrel% HAdd.hAdd skoY let13)
  let let15 := (binrel% HMul.hMul let7 let14)
  let let16 := (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let11 let10))
  let let17 := (binrel% GE.ge let16 let9)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let9)
  let let20 := (Int.ofNat 0)
  let let21 := (Int.ofNat 1)
  let let22 := (Neg.neg let21)
  let let23 := (binrel% HMul.hMul let22 skoY)
  let let24 := (binrel% GE.ge let23 let20)
  let let25 := (binrel% LE.le skoY let1)
  let let26 := (binrel% GE.ge (binrel% HMul.hMul let22 skoX) let20)
  let let27 := (binrel% LE.le skoX let1)
  let let28 := (binrel% HDiv.hDiv let21 (Int.ofNat 2))
  let let29 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let30 := (Not let27)
  let let31 := (binrel% GT.gt skoX let1)
  let let32 := (binrel% GE.ge let14 let20)
  let let33 := (binrel% HMul.hMul let12 skoX)
  let let34 := (binrel% LE.le let33 skoY)
  let let35 := (binrel% HAdd.hAdd let23 let33)
  let let36 := (binrel% GE.ge let35 let20)
  let let37 := (binrel% LE.le skoY let33)
  let let38 := (binrel% HMul.hMul let28 pi)
  let let39 := (binrel% HMul.hMul pi let28)
  let let40 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let28) pi)) let20)
  let let41 := (binrel% LE.le let38 skoY)
  let let42 := (binrel% LT.lt let7 let20)
  let let43 := (binrel% GE.ge let14 let1)
  let let44 := (Not let43)
  let let45 := (binrel% LT.lt let14 let1)
  let let46 := (Eq let45 let44)
  let let47 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let48 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let49 := (binrel% GE.ge (binrel% HAdd.hAdd let23 skoX) let20)
  let let50 := (binrel% LE.le skoY skoX)
  let let51 := (binrel% GE.ge (binrel% HMul.hMul let22 pi) (Neg.neg let47))
  let let52 := (binrel% LE.le pi let47)
  let let53 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let54 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let55 := (binrel% LE.le pi let48)
  let let56 := (Not let55)
  let let57 := (binrel% LE.le let54 pi)
  let let58 := (Not let57)
  let let59 := (binrel% HMul.hMul pi let29)
  let let60 := (binrel% LE.le let59 skoY)
  let let61 := (Not let60)
  let let62 := (Not let50)
  let let63 := (binrel% HMul.hMul skoX let4)
  let let64 := (binrel% LE.le skoY let63)
  let let65 := (Not let64)
  let let66 := (binrel% LE.le let63 skoY)
  let let67 := (Not let66)
  let let68 := (Or let67 let65)
  let let69 := (And let66 (And let25 (And let68 (And let62 (And let30 (And let61 (And let58 let56)))))))
  let let70 := (binrel% GT.gt let2 let20)
  let let71 := (Not let26)
  let let72 := (Not let71)
  let let73 := (Eq let26 let72)
  let let74 := (Eq let72 let26)
  let let75 := (binrel% HAdd.hAdd let35 (binrel% HAdd.hAdd let13 skoY))
  let let76 := (Eq let26 let26)
  let let77 := (Not True)
  let let78 := (binrel% GE.ge let1 let1)
  let let79 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1))
  let let80 := (binrel% LT.lt let5 let20)
  let let81 := (binrel% GE.ge pi let53)
  let let82 := (binrel% LE.le let53 pi)
  let let83 := (Not let51)
  let let84 := (Not let81)
  let let85 := (Not let40)
  let let86 := (Not let49)
  let let87 := (Not let36)
  let let88 := (Not let32)
  let let89 := (Or let88 let87)
  let let90 := (And let32 (And let24 (And let89 (And let86 (And let71 (And let85 (And let84 let83)))))))
  let let91 := (Eq let69 let90)
  let let92 := (Not let24)
  let let93 := (Or let92 (Or let26 let88))
  let let94 := (Or let92 (Or let72 let88))
  let let95 := (binrel% LE.le let10 let3)
  let let96 := (And let70 let25)
  let let97 := (binrel% LT.lt let11 let6)
  let let98 := (And let80 let31)
  let let99 := (binrel% LE.le let15 let8)
  let let100 := (And let42 let43)
fun lean_r0 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let34 let32) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let42 True) => -- EVALUATE
fun lean_r10 : let46 => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let48 let47) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let10 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let6 let1) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let54 let53) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let69 let69) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let70 True) => -- EVALUATE
fun lean_r19 : (Eq let74 let73) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let75 let1) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let76 True) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let77 False) => -- THEORY_REWRITE_BOOL
fun lean_r23 : let74 => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let78 True) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let63 let33) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let79 let1) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let80 True) => -- EVALUATE
fun lean_r28 : (Eq let82 let81) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let3 let1) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let43 let32) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let8 let1) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let11 let13) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let15 let35) => -- THEORY_REWRITE_ARITH
fun lean_a34 : let69 => by
have lean_s0 : (Or let92 (Or let72 (Or let88 False))) :=
  (scope (fun lean_a35 : let24 =>
    (scope (fun lean_a36 : let71 =>
      (scope (fun lean_a37 : let32 =>
        have lean_s0 : (Eq let32 let43) := by timed Eq.symm lean_r30
        have lean_s1 : let43 := by timed eqResolve lean_a37 lean_s0
        have lean_s2 : (Or let44 False) :=
          (scope (fun lean_a38 : let43 =>
            have lean_s2 : let42 := by timed trueElim lean_r9
            have lean_s3 : let100 := by timed And.intro lean_s2 lean_a38
            have lean_s4 : (Implies let100 let99) := by arithMulNeg [let14, let1, let7], 3
            have lean_s5 : let99 := by timed modusPonens lean_s3 lean_s4
            have lean_s6 : let80 := by timed trueElim lean_r27
            have lean_s7 : (Eq let30 let71) := by timed flipCongrArg lean_r2 [Not]
            have lean_s8 : (Eq let31 let71) := by timed Eq.trans lean_r4 lean_s7
            have lean_s9 : (Eq let71 let31) := by timed Eq.symm lean_s8
            have lean_s10 : let31 := by timed eqResolve lean_a36 lean_s9
            have lean_s11 : let98 := by timed And.intro lean_s6 lean_s10
            have lean_s12 : (Implies let98 let97) := by arithMulNeg [skoX, let1, let5], 2
            have lean_s13 : let97 := by timed modusPonens lean_s11 lean_s12
            have lean_s14 : let70 := by timed trueElim lean_r18
            have lean_s15 : (Eq let24 let25) := by timed Eq.symm lean_r1
            have lean_s16 : let25 := by timed eqResolve lean_a35 lean_s15
            have lean_s17 : let96 := by timed And.intro lean_s14 lean_s16
            have lean_s18 : (Implies let96 let95) := by arithMulPos [skoY, let1, let2], 1
            have lean_s19 : let95 := by timed modusPonens lean_s17 lean_s18
            have lean_s20 : let19 := by sumBounds [lean_s5, lean_s13, lean_s19]
            let lean_s21 := by timed congrHAdd lean_r32 lean_r12
            have lean_s22 : (Eq let16 let75) := by timed congrHAdd lean_r33 lean_s21
            have lean_s23 : (Eq let16 let1) := by timed Eq.trans lean_s22 lean_r20
            let lean_s24 := by timed flipCongrArg lean_s23 [GE.ge]
            let lean_s25 := by timed congrHAdd lean_r14 lean_r29
            have lean_s26 : (Eq let9 let79) := by timed congrHAdd lean_r31 lean_s25
            have lean_s27 : (Eq let9 let1) := by timed Eq.trans lean_s26 lean_r26
            have lean_s28 : (Eq let17 let78) := by timed congr lean_s24 lean_s27
            have lean_s29 : (Eq let17 True) := by timed Eq.trans lean_s28 lean_r24
            have lean_s30 : (Eq let18 let77) := by timed flipCongrArg lean_s29 [Not]
            have lean_s31 : (Eq let18 False) := by timed Eq.trans lean_s30 lean_r22
            have lean_s32 : (Eq let19 False) := by timed Eq.trans lean_r0 lean_s31
            show False from by timed eqResolve lean_s20 lean_s32
          ))
        have lean_s3 : let44 := by liftOrNToNeg lean_s2
        have lean_s4 : (Eq let44 let88) := by timed flipCongrArg lean_r30 [Not]
        have lean_s5 : (Eq let45 let88) := by timed Eq.trans lean_r10 lean_s4
        have lean_s6 : (Eq let88 let45) := by timed Eq.symm lean_s5
        have lean_s7 : (Eq let44 let45) := by timed Eq.trans lean_s4 lean_s6
        have lean_s8 : let45 := by timed eqResolve lean_s3 lean_s7
        have lean_s9 : (Eq let88 let44) := by timed Eq.symm lean_s4
        have lean_s10 : let46 := by timed Eq.trans lean_s5 lean_s9
        have lean_s11 : let44 := by timed eqResolve lean_s8 lean_s10
        show False from by timed contradiction lean_s1 lean_s11
  ))))))
have lean_s1 : (Not (And let24 (And let71 let32))) := by liftOrNToNeg lean_s0
have lean_s2 : let94 := by timed flipNotAnd lean_s1 [let24, let71, let32]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let92 let92) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let76 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let73 let76) := by timed congr lean_s7 lean_r23
have lean_s9 : (Eq let73 True) := by timed Eq.trans lean_s8 lean_r21
have lean_s10 : (Eq let74 True) := by timed Eq.trans lean_r19 lean_s9
have lean_s11 : let74 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq let88 let88) := by timed rfl
let lean_s14 := by timed congr lean_s12 lean_s13
have lean_s15 : (Eq let94 let93) := by timed congr lean_s5 lean_s14
have lean_s16 : let93 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let88 (Or let26 let92)) := by permutateOr lean_s16, [2, 1, 0], (- 1)
have lean_s18 : (Eq And And) := by timed rfl
let lean_s19 := by timed flipCongrArg lean_r25 [LE.le]
have lean_s20 : (Eq skoY skoY) := by timed rfl
have lean_s21 : (Eq let66 let34) := by timed congr lean_s19 lean_s20
have lean_s22 : (Eq let66 let32) := by timed Eq.trans lean_s21 lean_r5
let lean_s23 := by timed congr lean_s18 lean_s22
let lean_s24 := by timed congr lean_s18 lean_r1
have lean_s25 : (Eq let67 let88) := by timed flipCongrArg lean_s22 [Not]
let lean_s26 := by timed flipCongrArg lean_s25 [Or]
let lean_s27 := by timed flipCongrArg lean_s20 [LE.le]
have lean_s28 : (Eq let64 let37) := by timed congr lean_s27 lean_r25
have lean_s29 : (Eq let64 let36) := by timed Eq.trans lean_s28 lean_r6
have lean_s30 : (Eq let65 let87) := by timed flipCongrArg lean_s29 [Not]
have lean_s31 : (Eq let68 let89) := by timed congr lean_s26 lean_s30
let lean_s32 := by timed congr lean_s18 lean_s31
have lean_s33 : (Eq let62 let86) := by timed flipCongrArg lean_r13 [Not]
let lean_s34 := by timed congr lean_s18 lean_s33
have lean_s35 : (Eq let30 let71) := by timed flipCongrArg lean_r2 [Not]
let lean_s36 := by timed congr lean_s18 lean_s35
have lean_s37 : (Eq pi pi) := by timed rfl
let lean_s38 := by timed flipCongrArg lean_s37 [HMul.hMul]
have lean_s39 : (Eq let59 let39) := by timed congr lean_s38 lean_r3
have lean_s40 : (Eq let59 let38) := by timed Eq.trans lean_s39 lean_r7
let lean_s41 := by timed flipCongrArg lean_s40 [LE.le]
have lean_s42 : (Eq let60 let41) := by timed congr lean_s41 lean_s20
have lean_s43 : (Eq let60 let40) := by timed Eq.trans lean_s42 lean_r8
have lean_s44 : (Eq let61 let85) := by timed flipCongrArg lean_s43 [Not]
let lean_s45 := by timed congr lean_s18 lean_s44
let lean_s46 := by timed flipCongrArg lean_r16 [LE.le]
have lean_s47 : (Eq let57 let82) := by timed congr lean_s46 lean_s37
have lean_s48 : (Eq let57 let81) := by timed Eq.trans lean_s47 lean_r28
have lean_s49 : (Eq let58 let84) := by timed flipCongrArg lean_s48 [Not]
let lean_s50 := by timed congr lean_s18 lean_s49
let lean_s51 := by timed flipCongrArg lean_s37 [LE.le]
have lean_s52 : (Eq let55 let52) := by timed congr lean_s51 lean_r11
have lean_s53 : (Eq let55 let51) := by timed Eq.trans lean_s52 lean_r15
have lean_s54 : (Eq let56 let83) := by timed flipCongrArg lean_s53 [Not]
let lean_s55 := by timed congr lean_s50 lean_s54
let lean_s56 := by timed congr lean_s45 lean_s55
let lean_s57 := by timed congr lean_s36 lean_s56
let lean_s58 := by timed congr lean_s34 lean_s57
let lean_s59 := by timed congr lean_s32 lean_s58
let lean_s60 := by timed congr lean_s24 lean_s59
have lean_s61 : let91 := by timed congr lean_s23 lean_s60
have lean_s62 : let91 := by timed Eq.trans lean_r17 lean_s61
have lean_s63 : let90 := by timed eqResolve lean_a34 lean_s62
have lean_s64 : let71 := by andElim lean_s63, 4
let lean_s65 := by R1 lean_s17, lean_s64, let26, [(- 1), 0]
have lean_s66 : let24 := by andElim lean_s63, 1
let lean_s67 := by R2 lean_s65, lean_s66, let24, [(- 1), 0]
have lean_s68 : let32 := by andElim lean_s63, 0
exact (show False from by R2 lean_s67, lean_s68, let32, [0, 0])


