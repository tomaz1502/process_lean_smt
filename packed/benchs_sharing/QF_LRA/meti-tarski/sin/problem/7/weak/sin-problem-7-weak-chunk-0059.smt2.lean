open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% GE.ge (binrel% HMul.hMul let5 skoX) let1)
  let let7 := (Rat.ofInt 0)
  let let8 := (binrel% LE.le skoX let7)
  let let9 := (binrel% HDiv.hDiv let4 (Int.ofNat 2))
  let let10 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let11 := (Int.ofNat 2000)
  let let12 := (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let11) skoX))
  let let13 := (binrel% GE.ge let12 let1)
  let let14 := (binrel% HMul.hMul let11 skoX)
  let let15 := (binrel% LE.le let14 skoY)
  let let16 := (binrel% HMul.hMul let5 skoY)
  let let17 := (binrel% HAdd.hAdd let16 let14)
  let let18 := (binrel% GE.ge let17 let1)
  let let19 := (binrel% LE.le skoY let14)
  let let20 := (binrel% HMul.hMul let9 pi)
  let let21 := (binrel% HMul.hMul pi let9)
  let let22 := (Neg.neg let2)
  let let23 := (binrel% LT.lt let22 let1)
  let let24 := (binrel% HMul.hMul skoX (Rat.ofInt 2000))
  let let25 := (binrel% HMul.hMul let22 let7)
  let let26 := (binrel% HMul.hMul let2 let7)
  let let27 := (binrel% HAdd.hAdd let26 let25)
  let let28 := (binrel% HMul.hMul let22 let12)
  let let29 := (binrel% HMul.hMul let2 let12)
  let let30 := (binrel% HAdd.hAdd let29 let28)
  let let31 := (binrel% GE.ge let30 let27)
  let let32 := (Not let31)
  let let33 := (binrel% LT.lt let30 let27)
  let let34 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let9) pi)) let1)
  let let35 := (binrel% LE.le let20 skoY)
  let let36 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let37 := (binrel% GE.ge pi let36)
  let let38 := (binrel% LE.le let36 pi)
  let let39 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let40 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let41 := (binrel% GE.ge (binrel% HAdd.hAdd let16 skoX) let1)
  let let42 := (binrel% LE.le skoY skoX)
  let let43 := (binrel% GE.ge (binrel% HMul.hMul let5 pi) (Neg.neg let39))
  let let44 := (binrel% LE.le pi let39)
  let let45 := (binrel% HAdd.hAdd let12 let17)
  let let46 := (Not let18)
  let let47 := (Not let46)
  let let48 := (Not True)
  let let49 := (binrel% GE.ge let12 let7)
  let let50 := (Not let49)
  let let51 := (binrel% LT.lt let12 let7)
  let let52 := (Not let13)
  let let53 := (Not let52)
  let let54 := (binrel% LE.le let12 let7)
  let let55 := (binrel% GE.ge let7 let7)
  let let56 := (Not let54)
  let let57 := (binrel% GT.gt let12 let7)
  let let58 := (binrel% HAdd.hAdd let7 let7)
  let let59 := (binrel% LE.le pi let40)
  let let60 := (Not let59)
  let let61 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let62 := (binrel% LE.le let61 pi)
  let let63 := (Not let62)
  let let64 := (binrel% HMul.hMul pi let10)
  let let65 := (binrel% LE.le let64 skoY)
  let let66 := (Not let65)
  let let67 := (Not let8)
  let let68 := (Not let42)
  let let69 := (binrel% LE.le skoY let24)
  let let70 := (Not let69)
  let let71 := (binrel% LE.le let24 skoY)
  let let72 := (Not let71)
  let let73 := (Or let72 let70)
  let let74 := (And let72 (And let70 (And let73 (And let68 (And let67 (And let66 (And let63 let60)))))))
  let let75 := (Not let43)
  let let76 := (Not let37)
  let let77 := (Not let34)
  let let78 := (Not let6)
  let let79 := (Not let41)
  let let80 := (Or let52 let46)
  let let81 := (And let52 (And let46 (And let80 (And let79 (And let78 (And let77 (And let76 let75)))))))
  let let82 := (Eq let74 let81)
  let let83 := (Or let13 let18)
  let let84 := (Or let53 let47)
  let let85 := (binrel% LT.lt let28 let25)
  let let86 := (And let23 let57)
  let let87 := (binrel% LT.lt let29 let26)
  let let88 := (And let3 let51)
(Eq let3 True) → (Eq let8 let6) → (Eq let10 let9) → (Eq let15 let13) → (Eq let19 let18) → (Eq let21 let20) → (Eq let23 True) → (Eq let24 let14) → (Eq let33 let32) → (Eq let35 let34) → (Eq let38 let37) → (Eq let40 let39) → (Eq let42 let41) → (Eq let44 let43) → (Eq let45 let7) → (Eq let47 let18) → (Eq let48 False) → (Eq let51 let50) → (Eq let53 let13) → (Eq let54 let18) → (Eq let55 True) → (Eq let57 let56) → (Eq let58 let7) → (Eq let74 let74) → (Eq let25 let7) → (Eq let28 let17) → (Eq let29 let12) → (Eq let61 let36) → (Eq let26 let7) → (Eq let49 let13) → let74 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% GE.ge (binrel% HMul.hMul let5 skoX) let1)
  let let7 := (Rat.ofInt 0)
  let let8 := (binrel% LE.le skoX let7)
  let let9 := (binrel% HDiv.hDiv let4 (Int.ofNat 2))
  let let10 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let11 := (Int.ofNat 2000)
  let let12 := (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let11) skoX))
  let let13 := (binrel% GE.ge let12 let1)
  let let14 := (binrel% HMul.hMul let11 skoX)
  let let15 := (binrel% LE.le let14 skoY)
  let let16 := (binrel% HMul.hMul let5 skoY)
  let let17 := (binrel% HAdd.hAdd let16 let14)
  let let18 := (binrel% GE.ge let17 let1)
  let let19 := (binrel% LE.le skoY let14)
  let let20 := (binrel% HMul.hMul let9 pi)
  let let21 := (binrel% HMul.hMul pi let9)
  let let22 := (Neg.neg let2)
  let let23 := (binrel% LT.lt let22 let1)
  let let24 := (binrel% HMul.hMul skoX (Rat.ofInt 2000))
  let let25 := (binrel% HMul.hMul let22 let7)
  let let26 := (binrel% HMul.hMul let2 let7)
  let let27 := (binrel% HAdd.hAdd let26 let25)
  let let28 := (binrel% HMul.hMul let22 let12)
  let let29 := (binrel% HMul.hMul let2 let12)
  let let30 := (binrel% HAdd.hAdd let29 let28)
  let let31 := (binrel% GE.ge let30 let27)
  let let32 := (Not let31)
  let let33 := (binrel% LT.lt let30 let27)
  let let34 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let9) pi)) let1)
  let let35 := (binrel% LE.le let20 skoY)
  let let36 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let37 := (binrel% GE.ge pi let36)
  let let38 := (binrel% LE.le let36 pi)
  let let39 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let40 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let41 := (binrel% GE.ge (binrel% HAdd.hAdd let16 skoX) let1)
  let let42 := (binrel% LE.le skoY skoX)
  let let43 := (binrel% GE.ge (binrel% HMul.hMul let5 pi) (Neg.neg let39))
  let let44 := (binrel% LE.le pi let39)
  let let45 := (binrel% HAdd.hAdd let12 let17)
  let let46 := (Not let18)
  let let47 := (Not let46)
  let let48 := (Not True)
  let let49 := (binrel% GE.ge let12 let7)
  let let50 := (Not let49)
  let let51 := (binrel% LT.lt let12 let7)
  let let52 := (Not let13)
  let let53 := (Not let52)
  let let54 := (binrel% LE.le let12 let7)
  let let55 := (binrel% GE.ge let7 let7)
  let let56 := (Not let54)
  let let57 := (binrel% GT.gt let12 let7)
  let let58 := (binrel% HAdd.hAdd let7 let7)
  let let59 := (binrel% LE.le pi let40)
  let let60 := (Not let59)
  let let61 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let62 := (binrel% LE.le let61 pi)
  let let63 := (Not let62)
  let let64 := (binrel% HMul.hMul pi let10)
  let let65 := (binrel% LE.le let64 skoY)
  let let66 := (Not let65)
  let let67 := (Not let8)
  let let68 := (Not let42)
  let let69 := (binrel% LE.le skoY let24)
  let let70 := (Not let69)
  let let71 := (binrel% LE.le let24 skoY)
  let let72 := (Not let71)
  let let73 := (Or let72 let70)
  let let74 := (And let72 (And let70 (And let73 (And let68 (And let67 (And let66 (And let63 let60)))))))
  let let75 := (Not let43)
  let let76 := (Not let37)
  let let77 := (Not let34)
  let let78 := (Not let6)
  let let79 := (Not let41)
  let let80 := (Or let52 let46)
  let let81 := (And let52 (And let46 (And let80 (And let79 (And let78 (And let77 (And let76 let75)))))))
  let let82 := (Eq let74 let81)
  let let83 := (Or let13 let18)
  let let84 := (Or let53 let47)
  let let85 := (binrel% LT.lt let28 let25)
  let let86 := (And let23 let57)
  let let87 := (binrel% LT.lt let29 let26)
  let let88 := (And let3 let51)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let15 let13) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let23 True) => -- EVALUATE
fun lean_r7 : (Eq let24 let14) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let38 let37) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let40 let39) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let45 let7) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let47 let18) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let48 False) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let53 let13) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let54 let18) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let55 True) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let57 let56) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let58 let7) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let74 let74) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let25 let7) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let28 let17) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let29 let12) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let61 let36) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let26 let7) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let49 let13) => -- THEORY_REWRITE_ARITH
fun lean_a30 : let74 => by
have lean_s0 : (Or let53 (Or let47 False)) :=
  (scope (fun lean_a31 : let52 =>
    (scope (fun lean_a32 : let46 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let50 let52) := by timed flipCongrArg lean_r29 [Not]
      have lean_s2 : (Eq let51 let52) := by timed Eq.trans lean_r17 lean_s1
      have lean_s3 : (Eq let52 let51) := by timed Eq.symm lean_s2
      have lean_s4 : let51 := by timed eqResolve lean_a31 lean_s3
      have lean_s5 : let88 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let88 let87) := by arithMulPos [let12, let7, let2], 0
      have lean_s7 : let87 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let23 := by timed trueElim lean_r6
      have lean_s9 : (Eq let56 let46) := by timed flipCongrArg lean_r19 [Not]
      have lean_s10 : (Eq let57 let46) := by timed Eq.trans lean_r21 lean_s9
      have lean_s11 : (Eq let46 let57) := by timed Eq.symm lean_s10
      have lean_s12 : let57 := by timed eqResolve lean_a32 lean_s11
      have lean_s13 : let86 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let86 let85) := by arithMulNeg [let12, let7, let22], 2
      have lean_s15 : let85 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let33 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r26 [HAdd.hAdd]
      have lean_s18 : (Eq let30 let45) := by timed congr lean_s17 lean_r25
      have lean_s19 : (Eq let30 let7) := by timed Eq.trans lean_s18 lean_r14
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r28 [HAdd.hAdd]
      have lean_s22 : (Eq let27 let58) := by timed congr lean_s21 lean_r24
      have lean_s23 : (Eq let27 let7) := by timed Eq.trans lean_s22 lean_r22
      have lean_s24 : (Eq let31 let55) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let31 True) := by timed Eq.trans lean_s24 lean_r20
      have lean_s26 : (Eq let32 let48) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let32 False) := by timed Eq.trans lean_s26 lean_r16
      have lean_s28 : (Eq let33 False) := by timed Eq.trans lean_r8 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let52 let46)) := by liftOrNToNeg lean_s0
have lean_s2 : let84 := by timed flipNotAnd lean_s1 [let52, let46]
let lean_s3 := by timed flipCongrArg lean_r18 [Or]
have lean_s4 : (Eq let84 let83) := by timed congr lean_s3 lean_r15
have lean_s5 : let83 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
let lean_s7 := by timed flipCongrArg lean_r7 [LE.le]
have lean_s8 : (Eq skoY skoY) := by timed rfl
have lean_s9 : (Eq let71 let15) := by timed congr lean_s7 lean_s8
have lean_s10 : (Eq let71 let13) := by timed Eq.trans lean_s9 lean_r3
have lean_s11 : (Eq let72 let52) := by timed flipCongrArg lean_s10 [Not]
let lean_s12 := by timed congr lean_s6 lean_s11
let lean_s13 := by timed flipCongrArg lean_s8 [LE.le]
have lean_s14 : (Eq let69 let19) := by timed congr lean_s13 lean_r7
have lean_s15 : (Eq let69 let18) := by timed Eq.trans lean_s14 lean_r4
have lean_s16 : (Eq let70 let46) := by timed flipCongrArg lean_s15 [Not]
let lean_s17 := by timed congr lean_s6 lean_s16
let lean_s18 := by timed flipCongrArg lean_s11 [Or]
have lean_s19 : (Eq let73 let80) := by timed congr lean_s18 lean_s16
let lean_s20 := by timed congr lean_s6 lean_s19
have lean_s21 : (Eq let68 let79) := by timed flipCongrArg lean_r12 [Not]
let lean_s22 := by timed congr lean_s6 lean_s21
have lean_s23 : (Eq let67 let78) := by timed flipCongrArg lean_r1 [Not]
let lean_s24 := by timed congr lean_s6 lean_s23
have lean_s25 : (Eq pi pi) := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [HMul.hMul]
have lean_s27 : (Eq let64 let21) := by timed congr lean_s26 lean_r2
have lean_s28 : (Eq let64 let20) := by timed Eq.trans lean_s27 lean_r5
let lean_s29 := by timed flipCongrArg lean_s28 [LE.le]
have lean_s30 : (Eq let65 let35) := by timed congr lean_s29 lean_s8
have lean_s31 : (Eq let65 let34) := by timed Eq.trans lean_s30 lean_r9
have lean_s32 : (Eq let66 let77) := by timed flipCongrArg lean_s31 [Not]
let lean_s33 := by timed congr lean_s6 lean_s32
let lean_s34 := by timed flipCongrArg lean_r27 [LE.le]
have lean_s35 : (Eq let62 let38) := by timed congr lean_s34 lean_s25
have lean_s36 : (Eq let62 let37) := by timed Eq.trans lean_s35 lean_r10
have lean_s37 : (Eq let63 let76) := by timed flipCongrArg lean_s36 [Not]
let lean_s38 := by timed congr lean_s6 lean_s37
let lean_s39 := by timed flipCongrArg lean_s25 [LE.le]
have lean_s40 : (Eq let59 let44) := by timed congr lean_s39 lean_r11
have lean_s41 : (Eq let59 let43) := by timed Eq.trans lean_s40 lean_r13
have lean_s42 : (Eq let60 let75) := by timed flipCongrArg lean_s41 [Not]
let lean_s43 := by timed congr lean_s38 lean_s42
let lean_s44 := by timed congr lean_s33 lean_s43
let lean_s45 := by timed congr lean_s24 lean_s44
let lean_s46 := by timed congr lean_s22 lean_s45
let lean_s47 := by timed congr lean_s20 lean_s46
let lean_s48 := by timed congr lean_s17 lean_s47
have lean_s49 : let82 := by timed congr lean_s12 lean_s48
have lean_s50 : let82 := by timed Eq.trans lean_r23 lean_s49
have lean_s51 : let81 := by timed eqResolve lean_a30 lean_s50
have lean_s52 : let46 := by andElim lean_s51, 1
let lean_s53 := by R1 lean_s5, lean_s52, let18, [(- 1), 0]
have lean_s54 : let52 := by andElim lean_s51, 0
exact (show False from by R1 lean_s53, lean_s54, let13, [0, 0])


