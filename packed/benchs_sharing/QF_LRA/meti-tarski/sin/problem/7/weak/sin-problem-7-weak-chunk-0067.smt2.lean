open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (binrel% GE.ge skoX let1)
  let let3 := (Rat.ofInt 0)
  let let4 := (binrel% GE.ge skoX let3)
  let let5 := (binrel% LE.le skoX let3)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoX let3)
  let let8 := (Int.ofNat 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% HMul.hMul let9 skoX)
  let let11 := (binrel% HAdd.hAdd skoX let10)
  let let12 := (Rat.ofInt 1)
  let let13 := (binrel% GT.gt let12 let1)
  let let14 := (binrel% HMul.hMul let12 let3)
  let let15 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let16 := (binrel% GE.ge pi let15)
  let let17 := (binrel% LE.le let15 pi)
  let let18 := (binrel% GE.ge let10 let1)
  let let19 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let20 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let21 := (binrel% HMul.hMul let12 skoX)
  let let22 := (Not let2)
  let let23 := (Not let22)
  let let24 := (Eq let3 let3)
  let let25 := (Int.ofNat 2000)
  let let26 := (binrel% HMul.hMul (Neg.neg let25) skoX)
  let let27 := (binrel% HAdd.hAdd let3 let26)
  let let28 := (binrel% HMul.hMul let9 let3)
  let let29 := (binrel% HMul.hMul let9 pi)
  let let30 := (binrel% GE.ge let29 let1)
  let let31 := (binrel% HDiv.hDiv let8 (Int.ofNat 2))
  let let32 := (binrel% HMul.hMul (Neg.neg let31) pi)
  let let33 := (binrel% GE.ge let32 let1)
  let let34 := (binrel% GE.ge let26 let1)
  let let35 := (binrel% HMul.hMul let25 skoX)
  let let36 := (binrel% HAdd.hAdd let3 let35)
  let let37 := (binrel% GE.ge let35 let1)
  let let38 := (Neg.neg let12)
  let let39 := (binrel% LT.lt let38 let1)
  let let40 := (binrel% HAdd.hAdd let3 let32)
  let let41 := (binrel% HAdd.hAdd let3 skoX)
  let let42 := (binrel% GE.ge let29 (Neg.neg let19))
  let let43 := (binrel% LE.le pi let19)
  let let44 := (binrel% HMul.hMul skoX (Rat.ofInt 2000))
  let let45 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let46 := (binrel% HMul.hMul let9 skoY)
  let let47 := (binrel% HAdd.hAdd let46 skoX)
  let let48 := (binrel% GE.ge let47 let1)
  let let49 := (binrel% LE.le skoY skoX)
  let let50 := (binrel% HAdd.hAdd let3 let3)
  let let51 := (binrel% HAdd.hAdd skoY let32)
  let let52 := (binrel% GE.ge let51 let1)
  let let53 := (binrel% HMul.hMul let31 pi)
  let let54 := (binrel% LE.le let53 skoY)
  let let55 := (Not let42)
  let let56 := (Not let16)
  let let57 := (And let56 let55)
  let let58 := (Not let30)
  let let59 := (And let58 let57)
  let let60 := (Not let18)
  let let61 := (Or let60 let22)
  let let62 := (And let60 (And let61 (And let22 let59)))
  let let63 := (And True (And let60 (And let61 (And let22 (And let60 let59)))))
  let let64 := (binrel% HAdd.hAdd let46 let35)
  let let65 := (binrel% GE.ge let64 let1)
  let let66 := (binrel% LE.le skoY let35)
  let let67 := (binrel% HMul.hMul let38 skoX)
  let let68 := (binrel% HMul.hMul pi let31)
  let let69 := (binrel% HDiv.hDiv let12 (Rat.ofInt 2))
  let let70 := (binrel% HMul.hMul let38 let3)
  let let71 := (binrel% HAdd.hAdd let14 let70)
  let let72 := (binrel% HAdd.hAdd let21 let67)
  let let73 := (binrel% GE.ge let72 let71)
  let let74 := (Not let73)
  let let75 := (binrel% LT.lt let72 let71)
  let let76 := (Not let60)
  let let77 := (binrel% HAdd.hAdd skoY let26)
  let let78 := (binrel% GE.ge let77 let1)
  let let79 := (binrel% LE.le let35 skoY)
  let let80 := (Not True)
  let let81 := (binrel% LE.le pi let20)
  let let82 := (Not let81)
  let let83 := (binrel% LE.le let45 pi)
  let let84 := (Not let83)
  let let85 := (binrel% HMul.hMul pi let69)
  let let86 := (binrel% LE.le let85 skoY)
  let let87 := (Not let86)
  let let88 := (Not let49)
  let let89 := (binrel% LE.le skoY let44)
  let let90 := (Not let89)
  let let91 := (binrel% LE.le let44 skoY)
  let let92 := (Not let91)
  let let93 := (Or let92 let90)
  let let94 := (Eq skoY let3)
  let let95 := (And let94 (And let92 (And let93 (And let88 (And let6 (And let87 (And let84 let82)))))))
  let let96 := (binrel% GE.ge let3 let3)
  let let97 := (Not let4)
  let let98 := (binrel% LT.lt skoX let3)
  let let99 := (Not let52)
  let let100 := (Not let48)
  let let101 := (Not let65)
  let let102 := (Not let78)
  let let103 := (Or let102 let101)
  let let104 := (And let94 (And let102 (And let103 (And let100 (And let60 (And let99 let57))))))
  let let105 := (binrel% GE.ge let40 let1)
  let let106 := (Not let105)
  let let107 := (binrel% HAdd.hAdd let28 skoX)
  let let108 := (binrel% GE.ge let107 let1)
  let let109 := (Not let108)
  let let110 := (binrel% HAdd.hAdd let28 let35)
  let let111 := (binrel% GE.ge let110 let1)
  let let112 := (Not let111)
  let let113 := (binrel% GE.ge let27 let1)
  let let114 := (Not let113)
  let let115 := (Or let114 let112)
  let let116 := (And let24 (And let114 (And let115 (And let109 (And let60 (And let106 let57))))))
  let let117 := (Eq let55 let55)
  let let118 := (Eq let56 let56)
  let let119 := (Eq And And)
  let let120 := (Eq let1 let1)
  let let121 := (Eq let60 let60)
  let let122 := (Eq skoX skoX)
  let let123 := (Eq let35 let35)
  let let124 := (Eq let95 let104)
  let let125 := (Or let18 let2)
  let let126 := (Or let76 let23)
  let let127 := (binrel% LT.lt let67 let70)
  let let128 := (And let39 let7)
  let let129 := (binrel% LT.lt let21 let14)
  let let130 := (And let13 let98)
(Eq let4 let2) → (Eq let7 let6) → (Eq let11 let3) → (Eq let13 True) → (Eq let14 let3) → (Eq let17 let16) → (Eq let5 let18) → (Eq let20 let19) → (Eq let21 skoX) → (Eq let23 let2) → (Eq let24 True) → (Eq let27 let26) → (Eq let28 let3) → (Eq let33 let30) → (Eq let34 let18) → (Eq let36 let35) → (Eq let37 let2) → (Eq let39 True) → (Eq let40 let32) → (Eq let41 skoX) → (Eq let43 let42) → (Eq let44 let35) → (Eq let45 let15) → (Eq let49 let48) → (Eq let50 let3) → (Eq let54 let52) → (Eq let63 let62) → (Eq let66 let65) → (Eq let67 let10) → (Eq let68 let53) → (Eq let69 let31) → (Eq let75 let74) → (Eq let76 let18) → (Eq let79 let78) → (Eq let80 False) → (Eq let95 let95) → (Eq let96 True) → (Eq let98 let97) → (Eq let70 let3) → let95 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (binrel% GE.ge skoX let1)
  let let3 := (Rat.ofInt 0)
  let let4 := (binrel% GE.ge skoX let3)
  let let5 := (binrel% LE.le skoX let3)
  let let6 := (Not let5)
  let let7 := (binrel% GT.gt skoX let3)
  let let8 := (Int.ofNat 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% HMul.hMul let9 skoX)
  let let11 := (binrel% HAdd.hAdd skoX let10)
  let let12 := (Rat.ofInt 1)
  let let13 := (binrel% GT.gt let12 let1)
  let let14 := (binrel% HMul.hMul let12 let3)
  let let15 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let16 := (binrel% GE.ge pi let15)
  let let17 := (binrel% LE.le let15 pi)
  let let18 := (binrel% GE.ge let10 let1)
  let let19 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let20 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let21 := (binrel% HMul.hMul let12 skoX)
  let let22 := (Not let2)
  let let23 := (Not let22)
  let let24 := (Eq let3 let3)
  let let25 := (Int.ofNat 2000)
  let let26 := (binrel% HMul.hMul (Neg.neg let25) skoX)
  let let27 := (binrel% HAdd.hAdd let3 let26)
  let let28 := (binrel% HMul.hMul let9 let3)
  let let29 := (binrel% HMul.hMul let9 pi)
  let let30 := (binrel% GE.ge let29 let1)
  let let31 := (binrel% HDiv.hDiv let8 (Int.ofNat 2))
  let let32 := (binrel% HMul.hMul (Neg.neg let31) pi)
  let let33 := (binrel% GE.ge let32 let1)
  let let34 := (binrel% GE.ge let26 let1)
  let let35 := (binrel% HMul.hMul let25 skoX)
  let let36 := (binrel% HAdd.hAdd let3 let35)
  let let37 := (binrel% GE.ge let35 let1)
  let let38 := (Neg.neg let12)
  let let39 := (binrel% LT.lt let38 let1)
  let let40 := (binrel% HAdd.hAdd let3 let32)
  let let41 := (binrel% HAdd.hAdd let3 skoX)
  let let42 := (binrel% GE.ge let29 (Neg.neg let19))
  let let43 := (binrel% LE.le pi let19)
  let let44 := (binrel% HMul.hMul skoX (Rat.ofInt 2000))
  let let45 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let46 := (binrel% HMul.hMul let9 skoY)
  let let47 := (binrel% HAdd.hAdd let46 skoX)
  let let48 := (binrel% GE.ge let47 let1)
  let let49 := (binrel% LE.le skoY skoX)
  let let50 := (binrel% HAdd.hAdd let3 let3)
  let let51 := (binrel% HAdd.hAdd skoY let32)
  let let52 := (binrel% GE.ge let51 let1)
  let let53 := (binrel% HMul.hMul let31 pi)
  let let54 := (binrel% LE.le let53 skoY)
  let let55 := (Not let42)
  let let56 := (Not let16)
  let let57 := (And let56 let55)
  let let58 := (Not let30)
  let let59 := (And let58 let57)
  let let60 := (Not let18)
  let let61 := (Or let60 let22)
  let let62 := (And let60 (And let61 (And let22 let59)))
  let let63 := (And True (And let60 (And let61 (And let22 (And let60 let59)))))
  let let64 := (binrel% HAdd.hAdd let46 let35)
  let let65 := (binrel% GE.ge let64 let1)
  let let66 := (binrel% LE.le skoY let35)
  let let67 := (binrel% HMul.hMul let38 skoX)
  let let68 := (binrel% HMul.hMul pi let31)
  let let69 := (binrel% HDiv.hDiv let12 (Rat.ofInt 2))
  let let70 := (binrel% HMul.hMul let38 let3)
  let let71 := (binrel% HAdd.hAdd let14 let70)
  let let72 := (binrel% HAdd.hAdd let21 let67)
  let let73 := (binrel% GE.ge let72 let71)
  let let74 := (Not let73)
  let let75 := (binrel% LT.lt let72 let71)
  let let76 := (Not let60)
  let let77 := (binrel% HAdd.hAdd skoY let26)
  let let78 := (binrel% GE.ge let77 let1)
  let let79 := (binrel% LE.le let35 skoY)
  let let80 := (Not True)
  let let81 := (binrel% LE.le pi let20)
  let let82 := (Not let81)
  let let83 := (binrel% LE.le let45 pi)
  let let84 := (Not let83)
  let let85 := (binrel% HMul.hMul pi let69)
  let let86 := (binrel% LE.le let85 skoY)
  let let87 := (Not let86)
  let let88 := (Not let49)
  let let89 := (binrel% LE.le skoY let44)
  let let90 := (Not let89)
  let let91 := (binrel% LE.le let44 skoY)
  let let92 := (Not let91)
  let let93 := (Or let92 let90)
  let let94 := (Eq skoY let3)
  let let95 := (And let94 (And let92 (And let93 (And let88 (And let6 (And let87 (And let84 let82)))))))
  let let96 := (binrel% GE.ge let3 let3)
  let let97 := (Not let4)
  let let98 := (binrel% LT.lt skoX let3)
  let let99 := (Not let52)
  let let100 := (Not let48)
  let let101 := (Not let65)
  let let102 := (Not let78)
  let let103 := (Or let102 let101)
  let let104 := (And let94 (And let102 (And let103 (And let100 (And let60 (And let99 let57))))))
  let let105 := (binrel% GE.ge let40 let1)
  let let106 := (Not let105)
  let let107 := (binrel% HAdd.hAdd let28 skoX)
  let let108 := (binrel% GE.ge let107 let1)
  let let109 := (Not let108)
  let let110 := (binrel% HAdd.hAdd let28 let35)
  let let111 := (binrel% GE.ge let110 let1)
  let let112 := (Not let111)
  let let113 := (binrel% GE.ge let27 let1)
  let let114 := (Not let113)
  let let115 := (Or let114 let112)
  let let116 := (And let24 (And let114 (And let115 (And let109 (And let60 (And let106 let57))))))
  let let117 := (Eq let55 let55)
  let let118 := (Eq let56 let56)
  let let119 := (Eq And And)
  let let120 := (Eq let1 let1)
  let let121 := (Eq let60 let60)
  let let122 := (Eq skoX skoX)
  let let123 := (Eq let35 let35)
  let let124 := (Eq let95 let104)
  let let125 := (Or let18 let2)
  let let126 := (Or let76 let23)
  let let127 := (binrel% LT.lt let67 let70)
  let let128 := (And let39 let7)
  let let129 := (binrel% LT.lt let21 let14)
  let let130 := (And let13 let98)
fun lean_r0 : (Eq let4 let2) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let7 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let11 let3) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let13 True) => -- EVALUATE
fun lean_r4 : (Eq let14 let3) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let5 let18) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let21 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let23 let2) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let24 True) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let28 let3) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let33 let30) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let34 let18) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let37 let2) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let39 True) => -- EVALUATE
fun lean_r18 : (Eq let40 let32) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let41 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let43 let42) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let44 let35) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let45 let15) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let49 let48) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let50 let3) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let54 let52) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let63 let62) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let66 let65) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let67 let10) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let68 let53) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let69 let31) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let75 let74) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let76 let18) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let79 let78) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let80 False) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let95 let95) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let96 True) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let98 let97) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let70 let3) => -- THEORY_REWRITE_ARITH
fun lean_a39 : let95 => by
have lean_s0 : (Or let76 (Or let23 False)) :=
  (scope (fun lean_a40 : let60 =>
    (scope (fun lean_a41 : let22 =>
      have lean_s0 : let13 := by timed trueElim lean_r3
      have lean_s1 : (Eq let97 let22) := by timed flipCongrArg lean_r0 [Not]
      have lean_s2 : (Eq let98 let22) := by timed Eq.trans lean_r37 lean_s1
      have lean_s3 : (Eq let22 let98) := by timed Eq.symm lean_s2
      have lean_s4 : let98 := by timed eqResolve lean_a41 lean_s3
      have lean_s5 : let130 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let130 let129) := by arithMulPos [skoX, let3, let12], 0
      have lean_s7 : let129 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let39 := by timed trueElim lean_r17
      have lean_s9 : (Eq let6 let60) := by timed flipCongrArg lean_r6 [Not]
      have lean_s10 : (Eq let7 let60) := by timed Eq.trans lean_r1 lean_s9
      have lean_s11 : (Eq let60 let7) := by timed Eq.symm lean_s10
      have lean_s12 : let7 := by timed eqResolve lean_a40 lean_s11
      have lean_s13 : let128 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let128 let127) := by arithMulNeg [skoX, let3, let38], 2
      have lean_s15 : let127 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let75 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r8 [HAdd.hAdd]
      have lean_s18 : (Eq let72 let11) := by timed congr lean_s17 lean_r28
      have lean_s19 : (Eq let72 let3) := by timed Eq.trans lean_s18 lean_r2
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r4 [HAdd.hAdd]
      have lean_s22 : (Eq let71 let50) := by timed congr lean_s21 lean_r38
      have lean_s23 : (Eq let71 let3) := by timed Eq.trans lean_s22 lean_r24
      have lean_s24 : (Eq let73 let96) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let73 True) := by timed Eq.trans lean_s24 lean_r36
      have lean_s26 : (Eq let74 let80) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let74 False) := by timed Eq.trans lean_s26 lean_r34
      have lean_s28 : (Eq let75 False) := by timed Eq.trans lean_r31 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let60 let22)) := by liftOrNToNeg lean_s0
have lean_s2 : let126 := by timed flipNotAnd lean_s1 [let60, let22]
let lean_s3 := by timed flipCongrArg lean_r32 [Or]
have lean_s4 : (Eq let126 let125) := by timed congr lean_s3 lean_r9
have lean_s5 : let125 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : let119 := by timed rfl
have lean_s7 : (Eq let94 let94) := by timed rfl
let lean_s8 := by timed congr lean_s6 lean_s7
let lean_s9 := by timed flipCongrArg lean_r21 [LE.le]
have lean_s10 : (Eq skoY skoY) := by timed rfl
have lean_s11 : (Eq let91 let79) := by timed congr lean_s9 lean_s10
have lean_s12 : (Eq let91 let78) := by timed Eq.trans lean_s11 lean_r33
have lean_s13 : (Eq let92 let102) := by timed flipCongrArg lean_s12 [Not]
let lean_s14 := by timed congr lean_s6 lean_s13
let lean_s15 := by timed flipCongrArg lean_s13 [Or]
let lean_s16 := by timed flipCongrArg lean_s10 [LE.le]
have lean_s17 : (Eq let89 let66) := by timed congr lean_s16 lean_r21
have lean_s18 : (Eq let89 let65) := by timed Eq.trans lean_s17 lean_r27
have lean_s19 : (Eq let90 let101) := by timed flipCongrArg lean_s18 [Not]
have lean_s20 : (Eq let93 let103) := by timed congr lean_s15 lean_s19
let lean_s21 := by timed congr lean_s6 lean_s20
have lean_s22 : (Eq let88 let100) := by timed flipCongrArg lean_r23 [Not]
let lean_s23 := by timed congr lean_s6 lean_s22
have lean_s24 : (Eq let6 let60) := by timed flipCongrArg lean_r6 [Not]
let lean_s25 := by timed congr lean_s6 lean_s24
have lean_s26 : (Eq pi pi) := by timed rfl
let lean_s27 := by timed flipCongrArg lean_s26 [HMul.hMul]
have lean_s28 : (Eq let85 let68) := by timed congr lean_s27 lean_r30
have lean_s29 : (Eq let85 let53) := by timed Eq.trans lean_s28 lean_r29
let lean_s30 := by timed flipCongrArg lean_s29 [LE.le]
have lean_s31 : (Eq let86 let54) := by timed congr lean_s30 lean_s10
have lean_s32 : (Eq let86 let52) := by timed Eq.trans lean_s31 lean_r25
have lean_s33 : (Eq let87 let99) := by timed flipCongrArg lean_s32 [Not]
let lean_s34 := by timed congr lean_s6 lean_s33
let lean_s35 := by timed flipCongrArg lean_r22 [LE.le]
have lean_s36 : (Eq let83 let17) := by timed congr lean_s35 lean_s26
have lean_s37 : (Eq let83 let16) := by timed Eq.trans lean_s36 lean_r5
have lean_s38 : (Eq let84 let56) := by timed flipCongrArg lean_s37 [Not]
let lean_s39 := by timed congr lean_s6 lean_s38
let lean_s40 := by timed flipCongrArg lean_s26 [LE.le]
have lean_s41 : (Eq let81 let43) := by timed congr lean_s40 lean_r7
have lean_s42 : (Eq let81 let42) := by timed Eq.trans lean_s41 lean_r20
have lean_s43 : (Eq let82 let55) := by timed flipCongrArg lean_s42 [Not]
let lean_s44 := by timed congr lean_s39 lean_s43
let lean_s45 := by timed congr lean_s34 lean_s44
let lean_s46 := by timed congr lean_s25 lean_s45
let lean_s47 := by timed congr lean_s23 lean_s46
let lean_s48 := by timed congr lean_s21 lean_s47
let lean_s49 := by timed congr lean_s14 lean_s48
have lean_s50 : let124 := by timed congr lean_s8 lean_s49
have lean_s51 : let124 := by timed Eq.trans lean_r35 lean_s50
have lean_s52 : let119 := by timed rfl
have lean_s53 : let104 := by timed eqResolve lean_a39 lean_s51
have lean_s54 : let94 := by andElim lean_s53, 0
let lean_s55 := by timed flipCongrArg lean_s54 [Eq]
have lean_s56 : let24 := by timed rfl
have lean_s57 : (Eq let94 let24) := by timed congr lean_s55 lean_s56
let lean_s58 := by timed congr lean_s52 lean_s57
let lean_s59 := by timed flipCongrArg lean_s54 [HAdd.hAdd]
have lean_s60 : (Eq let26 let26) := by timed rfl
have lean_s61 : (Eq let77 let27) := by timed congr lean_s59 lean_s60
let lean_s62 := by timed flipCongrArg lean_s61 [GE.ge]
have lean_s63 : let120 := by timed rfl
have lean_s64 : (Eq let78 let113) := by timed congr lean_s62 lean_s63
have lean_s65 : (Eq let102 let114) := by timed flipCongrArg lean_s64 [Not]
let lean_s66 := by timed congr lean_s52 lean_s65
let lean_s67 := by timed flipCongrArg lean_s65 [Or]
have lean_s68 : (Eq let9 let9) := by timed rfl
let lean_s69 := by timed flipCongrArg lean_s68 [HMul.hMul]
have lean_s70 : (Eq let46 let28) := by timed congr lean_s69 lean_s54
let lean_s71 := by timed flipCongrArg lean_s70 [HAdd.hAdd]
have lean_s72 : let123 := by timed rfl
have lean_s73 : (Eq let64 let110) := by timed congr lean_s71 lean_s72
let lean_s74 := by timed flipCongrArg lean_s73 [GE.ge]
have lean_s75 : (Eq let65 let111) := by timed congr lean_s74 lean_s63
have lean_s76 : (Eq let101 let112) := by timed flipCongrArg lean_s75 [Not]
have lean_s77 : (Eq let103 let115) := by timed congr lean_s67 lean_s76
let lean_s78 := by timed congr lean_s52 lean_s77
let lean_s79 := by timed flipCongrArg lean_s70 [HAdd.hAdd]
have lean_s80 : let122 := by timed rfl
have lean_s81 : (Eq let47 let107) := by timed congr lean_s79 lean_s80
let lean_s82 := by timed flipCongrArg lean_s81 [GE.ge]
have lean_s83 : (Eq let48 let108) := by timed congr lean_s82 lean_s63
have lean_s84 : (Eq let100 let109) := by timed flipCongrArg lean_s83 [Not]
let lean_s85 := by timed congr lean_s52 lean_s84
have lean_s86 : let121 := by timed rfl
let lean_s87 := by timed congr lean_s52 lean_s86
let lean_s88 := by timed flipCongrArg lean_s54 [HAdd.hAdd]
have lean_s89 : (Eq let32 let32) := by timed rfl
have lean_s90 : (Eq let51 let40) := by timed congr lean_s88 lean_s89
let lean_s91 := by timed flipCongrArg lean_s90 [GE.ge]
have lean_s92 : (Eq let52 let105) := by timed congr lean_s91 lean_s63
have lean_s93 : (Eq let99 let106) := by timed flipCongrArg lean_s92 [Not]
let lean_s94 := by timed congr lean_s52 lean_s93
have lean_s95 : let118 := by timed rfl
let lean_s96 := by timed congr lean_s52 lean_s95
have lean_s97 : let117 := by timed rfl
let lean_s98 := by timed congr lean_s96 lean_s97
let lean_s99 := by timed congr lean_s94 lean_s98
let lean_s100 := by timed congr lean_s87 lean_s99
let lean_s101 := by timed congr lean_s85 lean_s100
let lean_s102 := by timed congr lean_s78 lean_s101
let lean_s103 := by timed congr lean_s66 lean_s102
have lean_s104 : (Eq let104 let116) := by timed congr lean_s58 lean_s103
have lean_s105 : let119 := by timed rfl
let lean_s106 := by timed congr lean_s105 lean_r10
let lean_s107 := by timed flipCongrArg lean_r11 [GE.ge]
have lean_s108 : let120 := by timed rfl
have lean_s109 : (Eq let113 let34) := by timed congr lean_s107 lean_s108
have lean_s110 : (Eq let113 let18) := by timed Eq.trans lean_s109 lean_r14
have lean_s111 : (Eq let114 let60) := by timed flipCongrArg lean_s110 [Not]
let lean_s112 := by timed congr lean_s105 lean_s111
let lean_s113 := by timed flipCongrArg lean_s111 [Or]
let lean_s114 := by timed flipCongrArg lean_r12 [HAdd.hAdd]
have lean_s115 : let123 := by timed rfl
have lean_s116 : (Eq let110 let36) := by timed congr lean_s114 lean_s115
have lean_s117 : (Eq let110 let35) := by timed Eq.trans lean_s116 lean_r15
let lean_s118 := by timed flipCongrArg lean_s117 [GE.ge]
have lean_s119 : (Eq let111 let37) := by timed congr lean_s118 lean_s108
have lean_s120 : (Eq let111 let2) := by timed Eq.trans lean_s119 lean_r16
have lean_s121 : (Eq let112 let22) := by timed flipCongrArg lean_s120 [Not]
have lean_s122 : (Eq let115 let61) := by timed congr lean_s113 lean_s121
let lean_s123 := by timed congr lean_s105 lean_s122
let lean_s124 := by timed flipCongrArg lean_r12 [HAdd.hAdd]
have lean_s125 : let122 := by timed rfl
have lean_s126 : (Eq let107 let41) := by timed congr lean_s124 lean_s125
have lean_s127 : (Eq let107 skoX) := by timed Eq.trans lean_s126 lean_r19
let lean_s128 := by timed flipCongrArg lean_s127 [GE.ge]
have lean_s129 : (Eq let108 let2) := by timed congr lean_s128 lean_s108
have lean_s130 : (Eq let109 let22) := by timed flipCongrArg lean_s129 [Not]
let lean_s131 := by timed congr lean_s105 lean_s130
have lean_s132 : let121 := by timed rfl
let lean_s133 := by timed congr lean_s105 lean_s132
let lean_s134 := by timed flipCongrArg lean_r18 [GE.ge]
have lean_s135 : (Eq let105 let33) := by timed congr lean_s134 lean_s108
have lean_s136 : (Eq let105 let30) := by timed Eq.trans lean_s135 lean_r13
have lean_s137 : (Eq let106 let58) := by timed flipCongrArg lean_s136 [Not]
let lean_s138 := by timed congr lean_s105 lean_s137
have lean_s139 : let118 := by timed rfl
let lean_s140 := by timed congr lean_s105 lean_s139
have lean_s141 : let117 := by timed rfl
let lean_s142 := by timed congr lean_s140 lean_s141
let lean_s143 := by timed congr lean_s138 lean_s142
let lean_s144 := by timed congr lean_s133 lean_s143
let lean_s145 := by timed congr lean_s131 lean_s144
let lean_s146 := by timed congr lean_s123 lean_s145
let lean_s147 := by timed congr lean_s112 lean_s146
have lean_s148 : (Eq let116 let63) := by timed congr lean_s106 lean_s147
have lean_s149 : (Eq let116 let62) := by timed Eq.trans lean_s148 lean_r26
have lean_s150 : (Eq let104 let62) := by timed Eq.trans lean_s104 lean_s149
have lean_s151 : (Eq let95 let62) := by timed Eq.trans lean_s51 lean_s150
have lean_s152 : let62 := by timed eqResolve lean_a39 lean_s151
have lean_s153 : let22 := by andElim lean_s152, 2
let lean_s154 := by R1 lean_s5, lean_s153, let2, [(- 1), 0]
have lean_s155 : let60 := by andElim lean_s152, 0
exact (show False from by R1 lean_s154, lean_s155, let18, [0, 0])


