open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (Int.ofNat 1)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% HMul.hMul let10 skoX)
  let let12 := (binrel% HMul.hMul let3 skoX)
  let let13 := (binrel% HMul.hMul let10 skoY)
  let let14 := (binrel% GE.ge let13 let1)
  let let15 := (binrel% LE.le skoY let5)
  let let16 := (binrel% GE.ge let11 let1)
  let let17 := (binrel% HAdd.hAdd skoY let11)
  let let18 := (binrel% LE.le let17 let5)
  let let19 := (Not let18)
  let let20 := (binrel% GT.gt let17 let5)
  let let21 := (binrel% HAdd.hAdd let13 skoX)
  let let22 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let11 skoY))
  let let23 := (binrel% HDiv.hDiv let9 (Int.ofNat 2))
  let let24 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let25 := (Int.ofNat 2000)
  let let26 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let25) skoX)) let1)
  let let27 := (binrel% HMul.hMul let25 skoX)
  let let28 := (binrel% LE.le let27 skoY)
  let let29 := (Not let16)
  let let30 := (Not let29)
  let let31 := (Eq let30 let16)
  let let32 := (binrel% GE.ge (binrel% HAdd.hAdd let13 let27) let1)
  let let33 := (binrel% LE.le skoY let27)
  let let34 := (binrel% HMul.hMul let23 pi)
  let let35 := (binrel% HMul.hMul pi let23)
  let let36 := (binrel% HMul.hMul skoX (Rat.ofInt 2000))
  let let37 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let23) pi)) let1)
  let let38 := (binrel% LE.le let34 skoY)
  let let39 := (binrel% HMul.hMul let2 let5)
  let let40 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let41 := (binrel% GE.ge (binrel% HMul.hMul let10 pi) (Neg.neg let40))
  let let42 := (binrel% LE.le pi let40)
  let let43 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let44 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let45 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let46 := (binrel% LE.le pi let45)
  let let47 := (Not let46)
  let let48 := (binrel% LE.le let44 pi)
  let let49 := (Not let48)
  let let50 := (binrel% HMul.hMul pi let24)
  let let51 := (binrel% LE.le let50 skoY)
  let let52 := (Not let51)
  let let53 := (binrel% LE.le skoY skoX)
  let let54 := (Not let53)
  let let55 := (binrel% LE.le skoY let36)
  let let56 := (Not let55)
  let let57 := (binrel% LE.le let36 skoY)
  let let58 := (Not let57)
  let let59 := (Or let58 let56)
  let let60 := (And let15 (And let55 (And let59 (And let54 (And let7 (And let52 (And let49 let47)))))))
  let let61 := (binrel% HMul.hMul let3 let17)
  let let62 := (binrel% GE.ge let21 let1)
  let let63 := (Not let62)
  let let64 := (Not let63)
  let let65 := (Eq let64 let62)
  let let66 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let67 := (binrel% HMul.hMul let3 let5)
  let let68 := (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let67 let39))
  let let69 := (binrel% HMul.hMul let2 skoY)
  let let70 := (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let12 let69))
  let let71 := (binrel% GE.ge let70 let68)
  let let72 := (Not let71)
  let let73 := (binrel% LT.lt let70 let68)
  let let74 := (Eq let62 let64)
  let let75 := (Eq let16 let16)
  let let76 := (binrel% GT.gt let2 let1)
  let let77 := (Eq let16 let30)
  let let78 := (Not True)
  let let79 := (binrel% GE.ge pi let43)
  let let80 := (binrel% LE.le let43 pi)
  let let81 := (binrel% GE.ge let5 let5)
  let let82 := (Eq let62 let62)
  let let83 := (Not let41)
  let let84 := (Not let79)
  let let85 := (Not let37)
  let let86 := (Not let32)
  let let87 := (Not let26)
  let let88 := (Or let87 let86)
  let let89 := (And let14 (And let32 (And let88 (And let63 (And let29 (And let85 (And let84 let83)))))))
  let let90 := (Eq let60 let89)
  let let91 := (Not let14)
  let let92 := (Or let91 (Or let16 let62))
  let let93 := (Or let91 (Or let30 let64))
  let let94 := (Not let20)
  let let95 := (binrel% LE.le let69 let39)
  let let96 := (And let76 let15)
  let let97 := (binrel% LT.lt let12 let67)
  let let98 := (And let4 let8)
  let let99 := (binrel% LT.lt let61 let67)
  let let100 := (And let4 let20)
(Eq let4 True) → (Eq let8 let7) → (Eq let12 let11) → (Eq let15 let14) → (Eq let6 let16) → (Eq let20 let19) → (Eq let22 let5) → (Eq let24 let23) → (Eq let28 let26) → let31 → (Eq let33 let32) → (Eq let35 let34) → (Eq let36 let27) → (Eq let38 let37) → (Eq let39 let5) → (Eq let42 let41) → (Eq let44 let43) → (Eq let60 let60) → (Eq let61 let21) → let65 → (Eq let66 let5) → (Eq let73 let72) → (Eq let65 let74) → (Eq let45 let40) → (Eq let75 True) → (Eq let76 True) → (Eq let31 let77) → (Eq let18 let62) → (Eq let78 False) → (Eq let80 let79) → (Eq let81 True) → (Eq let67 let5) → (Eq let53 let62) → (Eq let82 True) → (Eq let69 skoY) → let60 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (Int.ofNat 1)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% HMul.hMul let10 skoX)
  let let12 := (binrel% HMul.hMul let3 skoX)
  let let13 := (binrel% HMul.hMul let10 skoY)
  let let14 := (binrel% GE.ge let13 let1)
  let let15 := (binrel% LE.le skoY let5)
  let let16 := (binrel% GE.ge let11 let1)
  let let17 := (binrel% HAdd.hAdd skoY let11)
  let let18 := (binrel% LE.le let17 let5)
  let let19 := (Not let18)
  let let20 := (binrel% GT.gt let17 let5)
  let let21 := (binrel% HAdd.hAdd let13 skoX)
  let let22 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let11 skoY))
  let let23 := (binrel% HDiv.hDiv let9 (Int.ofNat 2))
  let let24 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let25 := (Int.ofNat 2000)
  let let26 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let25) skoX)) let1)
  let let27 := (binrel% HMul.hMul let25 skoX)
  let let28 := (binrel% LE.le let27 skoY)
  let let29 := (Not let16)
  let let30 := (Not let29)
  let let31 := (Eq let30 let16)
  let let32 := (binrel% GE.ge (binrel% HAdd.hAdd let13 let27) let1)
  let let33 := (binrel% LE.le skoY let27)
  let let34 := (binrel% HMul.hMul let23 pi)
  let let35 := (binrel% HMul.hMul pi let23)
  let let36 := (binrel% HMul.hMul skoX (Rat.ofInt 2000))
  let let37 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let23) pi)) let1)
  let let38 := (binrel% LE.le let34 skoY)
  let let39 := (binrel% HMul.hMul let2 let5)
  let let40 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let41 := (binrel% GE.ge (binrel% HMul.hMul let10 pi) (Neg.neg let40))
  let let42 := (binrel% LE.le pi let40)
  let let43 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let44 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let45 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let46 := (binrel% LE.le pi let45)
  let let47 := (Not let46)
  let let48 := (binrel% LE.le let44 pi)
  let let49 := (Not let48)
  let let50 := (binrel% HMul.hMul pi let24)
  let let51 := (binrel% LE.le let50 skoY)
  let let52 := (Not let51)
  let let53 := (binrel% LE.le skoY skoX)
  let let54 := (Not let53)
  let let55 := (binrel% LE.le skoY let36)
  let let56 := (Not let55)
  let let57 := (binrel% LE.le let36 skoY)
  let let58 := (Not let57)
  let let59 := (Or let58 let56)
  let let60 := (And let15 (And let55 (And let59 (And let54 (And let7 (And let52 (And let49 let47)))))))
  let let61 := (binrel% HMul.hMul let3 let17)
  let let62 := (binrel% GE.ge let21 let1)
  let let63 := (Not let62)
  let let64 := (Not let63)
  let let65 := (Eq let64 let62)
  let let66 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let67 := (binrel% HMul.hMul let3 let5)
  let let68 := (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let67 let39))
  let let69 := (binrel% HMul.hMul let2 skoY)
  let let70 := (binrel% HAdd.hAdd let61 (binrel% HAdd.hAdd let12 let69))
  let let71 := (binrel% GE.ge let70 let68)
  let let72 := (Not let71)
  let let73 := (binrel% LT.lt let70 let68)
  let let74 := (Eq let62 let64)
  let let75 := (Eq let16 let16)
  let let76 := (binrel% GT.gt let2 let1)
  let let77 := (Eq let16 let30)
  let let78 := (Not True)
  let let79 := (binrel% GE.ge pi let43)
  let let80 := (binrel% LE.le let43 pi)
  let let81 := (binrel% GE.ge let5 let5)
  let let82 := (Eq let62 let62)
  let let83 := (Not let41)
  let let84 := (Not let79)
  let let85 := (Not let37)
  let let86 := (Not let32)
  let let87 := (Not let26)
  let let88 := (Or let87 let86)
  let let89 := (And let14 (And let32 (And let88 (And let63 (And let29 (And let85 (And let84 let83)))))))
  let let90 := (Eq let60 let89)
  let let91 := (Not let14)
  let let92 := (Or let91 (Or let16 let62))
  let let93 := (Or let91 (Or let30 let64))
  let let94 := (Not let20)
  let let95 := (binrel% LE.le let69 let39)
  let let96 := (And let76 let15)
  let let97 := (binrel% LT.lt let12 let67)
  let let98 := (And let4 let8)
  let let99 := (binrel% LT.lt let61 let67)
  let let100 := (And let4 let20)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let12 let11) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let15 let14) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let6 let16) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let22 let5) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let28 let26) => -- THEORY_REWRITE_ARITH
fun lean_r9 : let31 => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let36 let27) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let38 let37) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let39 let5) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let60 let60) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let61 let21) => -- THEORY_REWRITE_ARITH
fun lean_r19 : let65 => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let66 let5) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let73 let72) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let65 let74) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let45 let40) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let75 True) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let76 True) => -- EVALUATE
fun lean_r26 : (Eq let31 let77) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let18 let62) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let78 False) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let80 let79) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let81 True) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let67 let5) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let53 let62) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let82 True) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let69 skoY) => -- THEORY_REWRITE_ARITH
fun lean_a35 : let60 => by
have lean_s0 : (Or let91 (Or let30 (Or let64 False))) :=
  (scope (fun lean_a36 : let14 =>
    (scope (fun lean_a37 : let29 =>
      (scope (fun lean_a38 : let63 =>
        have lean_s0 : (Eq let19 let63) := by timed flipCongrArg lean_r27 [Not]
        have lean_s1 : (Eq let20 let63) := by timed Eq.trans lean_r5 lean_s0
        have lean_s2 : (Eq let63 let20) := by timed Eq.symm lean_s1
        have lean_s3 : let20 := by timed eqResolve lean_a38 lean_s2
        have lean_s4 : (Or let94 False) :=
          (scope (fun lean_a39 : let20 =>
            have lean_s4 : let4 := by timed trueElim lean_r0
            have lean_s5 : let100 := by timed And.intro lean_s4 lean_a39
            have lean_s6 : (Implies let100 let99) := by arithMulNeg [let17, let5, let3], 2
            have lean_s7 : let99 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let7 let29) := by timed flipCongrArg lean_r4 [Not]
            have lean_s9 : (Eq let8 let29) := by timed Eq.trans lean_r1 lean_s8
            have lean_s10 : (Eq let29 let8) := by timed Eq.symm lean_s9
            have lean_s11 : let8 := by timed eqResolve lean_a37 lean_s10
            have lean_s12 : let98 := by timed And.intro lean_s4 lean_s11
            have lean_s13 : (Implies let98 let97) := by arithMulNeg [skoX, let5, let3], 2
            have lean_s14 : let97 := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : let76 := by timed trueElim lean_r25
            have lean_s16 : (Eq let14 let15) := by timed Eq.symm lean_r3
            have lean_s17 : let15 := by timed eqResolve lean_a36 lean_s16
            have lean_s18 : let96 := by timed And.intro lean_s15 lean_s17
            have lean_s19 : (Implies let96 let95) := by arithMulPos [skoY, let5, let2], 1
            have lean_s20 : let95 := by timed modusPonens lean_s18 lean_s19
            have lean_s21 : let73 := by sumBounds [lean_s7, lean_s14, lean_s20]
            let lean_s22 := by timed congrHAdd lean_r2 lean_r34
            have lean_s23 : (Eq let70 let22) := by timed congrHAdd lean_r18 lean_s22
            have lean_s24 : (Eq let70 let5) := by timed Eq.trans lean_s23 lean_r6
            let lean_s25 := by timed flipCongrArg lean_s24 [GE.ge]
            let lean_s26 := by timed congrHAdd lean_r31 lean_r14
            have lean_s27 : (Eq let68 let66) := by timed congrHAdd lean_r31 lean_s26
            have lean_s28 : (Eq let68 let5) := by timed Eq.trans lean_s27 lean_r20
            have lean_s29 : (Eq let71 let81) := by timed congr lean_s25 lean_s28
            have lean_s30 : (Eq let71 True) := by timed Eq.trans lean_s29 lean_r30
            have lean_s31 : (Eq let72 let78) := by timed flipCongrArg lean_s30 [Not]
            have lean_s32 : (Eq let72 False) := by timed Eq.trans lean_s31 lean_r28
            have lean_s33 : (Eq let73 False) := by timed Eq.trans lean_r21 lean_s32
            show False from by timed eqResolve lean_s21 lean_s33
          ))
        have lean_s5 : let94 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let94 let64) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let94 let62) := by timed Eq.trans lean_s6 lean_r19
        have lean_s8 : (Eq let62 let18) := by timed Eq.symm lean_r27
        have lean_s9 : (Eq let94 let18) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let18 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let62 let94) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let18 let94) := by timed Eq.trans lean_r27 lean_s11
        have lean_s13 : let94 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let14 (And let29 let63))) := by liftOrNToNeg lean_s0
have lean_s2 : let93 := by timed flipNotAnd lean_s1 [let14, let29, let63]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let91 let91) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let75 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let77 let75) := by timed congr lean_s7 lean_r9
have lean_s9 : (Eq let77 True) := by timed Eq.trans lean_s8 lean_r24
have lean_s10 : (Eq let31 True) := by timed Eq.trans lean_r26 lean_s9
have lean_s11 : let31 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let82 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let74 let82) := by timed congr lean_s14 lean_r19
have lean_s16 : (Eq let74 True) := by timed Eq.trans lean_s15 lean_r33
have lean_s17 : (Eq let65 True) := by timed Eq.trans lean_r22 lean_s16
have lean_s18 : let65 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s12 lean_s18
have lean_s20 : (Eq let93 let92) := by timed congr lean_s5 lean_s19
have lean_s21 : let92 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let62 (Or let16 let91)) := by permutateOr lean_s21, [2, 1, 0], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
let lean_s24 := by timed congr lean_s23 lean_r3
have lean_s25 : (Eq skoY skoY) := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [LE.le]
have lean_s27 : (Eq let55 let33) := by timed congr lean_s26 lean_r12
have lean_s28 : (Eq let55 let32) := by timed Eq.trans lean_s27 lean_r10
let lean_s29 := by timed congr lean_s23 lean_s28
let lean_s30 := by timed flipCongrArg lean_r12 [LE.le]
have lean_s31 : (Eq let57 let28) := by timed congr lean_s30 lean_s25
have lean_s32 : (Eq let57 let26) := by timed Eq.trans lean_s31 lean_r8
have lean_s33 : (Eq let58 let87) := by timed flipCongrArg lean_s32 [Not]
let lean_s34 := by timed flipCongrArg lean_s33 [Or]
have lean_s35 : (Eq let56 let86) := by timed flipCongrArg lean_s28 [Not]
have lean_s36 : (Eq let59 let88) := by timed congr lean_s34 lean_s35
let lean_s37 := by timed congr lean_s23 lean_s36
have lean_s38 : (Eq let54 let63) := by timed flipCongrArg lean_r32 [Not]
let lean_s39 := by timed congr lean_s23 lean_s38
have lean_s40 : (Eq let7 let29) := by timed flipCongrArg lean_r4 [Not]
let lean_s41 := by timed congr lean_s23 lean_s40
have lean_s42 : (Eq pi pi) := by timed rfl
let lean_s43 := by timed flipCongrArg lean_s42 [HMul.hMul]
have lean_s44 : (Eq let50 let35) := by timed congr lean_s43 lean_r7
have lean_s45 : (Eq let50 let34) := by timed Eq.trans lean_s44 lean_r11
let lean_s46 := by timed flipCongrArg lean_s45 [LE.le]
have lean_s47 : (Eq let51 let38) := by timed congr lean_s46 lean_s25
have lean_s48 : (Eq let51 let37) := by timed Eq.trans lean_s47 lean_r13
have lean_s49 : (Eq let52 let85) := by timed flipCongrArg lean_s48 [Not]
let lean_s50 := by timed congr lean_s23 lean_s49
let lean_s51 := by timed flipCongrArg lean_r16 [LE.le]
have lean_s52 : (Eq let48 let80) := by timed congr lean_s51 lean_s42
have lean_s53 : (Eq let48 let79) := by timed Eq.trans lean_s52 lean_r29
have lean_s54 : (Eq let49 let84) := by timed flipCongrArg lean_s53 [Not]
let lean_s55 := by timed congr lean_s23 lean_s54
let lean_s56 := by timed flipCongrArg lean_s42 [LE.le]
have lean_s57 : (Eq let46 let42) := by timed congr lean_s56 lean_r23
have lean_s58 : (Eq let46 let41) := by timed Eq.trans lean_s57 lean_r15
have lean_s59 : (Eq let47 let83) := by timed flipCongrArg lean_s58 [Not]
let lean_s60 := by timed congr lean_s55 lean_s59
let lean_s61 := by timed congr lean_s50 lean_s60
let lean_s62 := by timed congr lean_s41 lean_s61
let lean_s63 := by timed congr lean_s39 lean_s62
let lean_s64 := by timed congr lean_s37 lean_s63
let lean_s65 := by timed congr lean_s29 lean_s64
have lean_s66 : let90 := by timed congr lean_s24 lean_s65
have lean_s67 : let90 := by timed Eq.trans lean_r17 lean_s66
have lean_s68 : let89 := by timed eqResolve lean_a35 lean_s67
have lean_s69 : let29 := by andElim lean_s68, 4
let lean_s70 := by R1 lean_s22, lean_s69, let16, [(- 1), 0]
have lean_s71 : let63 := by andElim lean_s68, 3
let lean_s72 := by R1 lean_s70, lean_s71, let62, [(- 1), 0]
have lean_s73 : let14 := by andElim lean_s68, 0
exact (show False from by R2 lean_s72, lean_s73, let14, [0, 0])


