open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoX : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (Int.ofNat 1)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% HMul.hMul let10 skoY)
  let let12 := (binrel% GE.ge let11 let1)
  let let13 := (binrel% LE.le skoY let5)
  let let14 := (binrel% HAdd.hAdd let11 skoX)
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (binrel% HMul.hMul let10 skoX)
  let let17 := (binrel% HAdd.hAdd skoY let16)
  let let18 := (binrel% LE.le let17 let5)
  let let19 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let20 := (binrel% GE.ge (binrel% HMul.hMul let10 pi) (Neg.neg let19))
  let let21 := (binrel% LE.le pi let19)
  let let22 := (binrel% GE.ge let16 let1)
  let let23 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let24 := (binrel% LE.le pi let23)
  let let25 := (Not let24)
  let let26 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let27 := (binrel% LE.le let26 pi)
  let let28 := (Not let27)
  let let29 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let30 := (binrel% HMul.hMul pi let29)
  let let31 := (binrel% LE.le let30 skoY)
  let let32 := (Not let31)
  let let33 := (binrel% LE.le skoY skoX)
  let let34 := (Not let33)
  let let35 := (binrel% HMul.hMul skoX (Rat.ofInt 2000))
  let let36 := (binrel% LE.le let35 skoY)
  let let37 := (Not let36)
  let let38 := (binrel% LE.le skoY let35)
  let let39 := (binrel% LE.le let5 skoY)
  let let40 := (And let39 (And let13 (And let38 (And let37 (And let34 (And let7 (And let32 (And let28 let25))))))))
  let let41 := (binrel% HDiv.hDiv let9 (Int.ofNat 2))
  let let42 := (binrel% GT.gt let2 let1)
  let let43 := (Not let22)
  let let44 := (Not let43)
  let let45 := (Eq let22 let44)
  let let46 := (Eq let44 let22)
  let let47 := (binrel% HMul.hMul let41 pi)
  let let48 := (binrel% HMul.hMul pi let41)
  let let49 := (Eq let22 let22)
  let let50 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let41) pi)) let1)
  let let51 := (binrel% LE.le let47 skoY)
  let let52 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let53 := (binrel% HMul.hMul let2 skoY)
  let let54 := (Eq let15 let15)
  let let55 := (binrel% GE.ge pi let52)
  let let56 := (binrel% LE.le let52 pi)
  let let57 := (binrel% GE.ge let5 let5)
  let let58 := (Int.ofNat 2000)
  let let59 := (binrel% HMul.hMul let58 skoX)
  let let60 := (binrel% HMul.hMul let3 let5)
  let let61 := (binrel% HMul.hMul let3 skoX)
  let let62 := (binrel% GE.ge skoY let1)
  let let63 := (Not let18)
  let let64 := (binrel% GT.gt let17 let5)
  let let65 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let16 skoY))
  let let66 := (binrel% HMul.hMul let3 let17)
  let let67 := (Not let15)
  let let68 := (Not let67)
  let let69 := (Eq let68 let15)
  let let70 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let71 := (binrel% HMul.hMul let2 let5)
  let let72 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let60 let71))
  let let73 := (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let61 let53))
  let let74 := (binrel% GE.ge let73 let72)
  let let75 := (Not let74)
  let let76 := (binrel% LT.lt let73 let72)
  let let77 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let58) skoX)) let1)
  let let78 := (binrel% LE.le let59 skoY)
  let let79 := (Eq let15 let68)
  let let80 := (binrel% GE.ge (binrel% HAdd.hAdd let11 let59) let1)
  let let81 := (binrel% LE.le skoY let59)
  let let82 := (Not True)
  let let83 := (Not let20)
  let let84 := (Not let55)
  let let85 := (Not let50)
  let let86 := (Not let77)
  let let87 := (And let62 (And let12 (And let80 (And let86 (And let67 (And let43 (And let85 (And let84 let83))))))))
  let let88 := (Eq let40 let87)
  let let89 := (Not let12)
  let let90 := (Or let89 (Or let22 let15))
  let let91 := (Or let89 (Or let44 let68))
  let let92 := (Not let64)
  let let93 := (binrel% LE.le let53 let71)
  let let94 := (And let42 let13)
  let let95 := (binrel% LT.lt let61 let60)
  let let96 := (And let4 let8)
  let let97 := (binrel% LT.lt let66 let60)
  let let98 := (And let4 let64)
(Eq let4 True) → (Eq let8 let7) → (Eq let13 let12) → (Eq let18 let15) → (Eq let21 let20) → (Eq let6 let22) → (Eq let40 let40) → (Eq let29 let41) → (Eq let42 True) → (Eq let46 let45) → (Eq let48 let47) → (Eq let49 True) → (Eq let51 let50) → (Eq let26 let52) → (Eq let53 skoY) → (Eq let54 True) → (Eq let56 let55) → (Eq let57 True) → (Eq let35 let59) → (Eq let60 let5) → (Eq let61 let16) → (Eq let33 let15) → (Eq let39 let62) → (Eq let64 let63) → (Eq let65 let5) → (Eq let66 let14) → let69 → (Eq let70 let5) → (Eq let76 let75) → (Eq let78 let77) → (Eq let69 let79) → (Eq let23 let19) → let46 → (Eq let81 let80) → (Eq let82 False) → (Eq let71 let5) → let40 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (Int.ofNat 1)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% HMul.hMul let10 skoY)
  let let12 := (binrel% GE.ge let11 let1)
  let let13 := (binrel% LE.le skoY let5)
  let let14 := (binrel% HAdd.hAdd let11 skoX)
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (binrel% HMul.hMul let10 skoX)
  let let17 := (binrel% HAdd.hAdd skoY let16)
  let let18 := (binrel% LE.le let17 let5)
  let let19 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let20 := (binrel% GE.ge (binrel% HMul.hMul let10 pi) (Neg.neg let19))
  let let21 := (binrel% LE.le pi let19)
  let let22 := (binrel% GE.ge let16 let1)
  let let23 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let24 := (binrel% LE.le pi let23)
  let let25 := (Not let24)
  let let26 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let27 := (binrel% LE.le let26 pi)
  let let28 := (Not let27)
  let let29 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let30 := (binrel% HMul.hMul pi let29)
  let let31 := (binrel% LE.le let30 skoY)
  let let32 := (Not let31)
  let let33 := (binrel% LE.le skoY skoX)
  let let34 := (Not let33)
  let let35 := (binrel% HMul.hMul skoX (Rat.ofInt 2000))
  let let36 := (binrel% LE.le let35 skoY)
  let let37 := (Not let36)
  let let38 := (binrel% LE.le skoY let35)
  let let39 := (binrel% LE.le let5 skoY)
  let let40 := (And let39 (And let13 (And let38 (And let37 (And let34 (And let7 (And let32 (And let28 let25))))))))
  let let41 := (binrel% HDiv.hDiv let9 (Int.ofNat 2))
  let let42 := (binrel% GT.gt let2 let1)
  let let43 := (Not let22)
  let let44 := (Not let43)
  let let45 := (Eq let22 let44)
  let let46 := (Eq let44 let22)
  let let47 := (binrel% HMul.hMul let41 pi)
  let let48 := (binrel% HMul.hMul pi let41)
  let let49 := (Eq let22 let22)
  let let50 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let41) pi)) let1)
  let let51 := (binrel% LE.le let47 skoY)
  let let52 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let53 := (binrel% HMul.hMul let2 skoY)
  let let54 := (Eq let15 let15)
  let let55 := (binrel% GE.ge pi let52)
  let let56 := (binrel% LE.le let52 pi)
  let let57 := (binrel% GE.ge let5 let5)
  let let58 := (Int.ofNat 2000)
  let let59 := (binrel% HMul.hMul let58 skoX)
  let let60 := (binrel% HMul.hMul let3 let5)
  let let61 := (binrel% HMul.hMul let3 skoX)
  let let62 := (binrel% GE.ge skoY let1)
  let let63 := (Not let18)
  let let64 := (binrel% GT.gt let17 let5)
  let let65 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let16 skoY))
  let let66 := (binrel% HMul.hMul let3 let17)
  let let67 := (Not let15)
  let let68 := (Not let67)
  let let69 := (Eq let68 let15)
  let let70 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let71 := (binrel% HMul.hMul let2 let5)
  let let72 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let60 let71))
  let let73 := (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let61 let53))
  let let74 := (binrel% GE.ge let73 let72)
  let let75 := (Not let74)
  let let76 := (binrel% LT.lt let73 let72)
  let let77 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let58) skoX)) let1)
  let let78 := (binrel% LE.le let59 skoY)
  let let79 := (Eq let15 let68)
  let let80 := (binrel% GE.ge (binrel% HAdd.hAdd let11 let59) let1)
  let let81 := (binrel% LE.le skoY let59)
  let let82 := (Not True)
  let let83 := (Not let20)
  let let84 := (Not let55)
  let let85 := (Not let50)
  let let86 := (Not let77)
  let let87 := (And let62 (And let12 (And let80 (And let86 (And let67 (And let43 (And let85 (And let84 let83))))))))
  let let88 := (Eq let40 let87)
  let let89 := (Not let12)
  let let90 := (Or let89 (Or let22 let15))
  let let91 := (Or let89 (Or let44 let68))
  let let92 := (Not let64)
  let let93 := (binrel% LE.le let53 let71)
  let let94 := (And let42 let13)
  let let95 := (binrel% LT.lt let61 let60)
  let let96 := (And let4 let8)
  let let97 := (binrel% LT.lt let66 let60)
  let let98 := (And let4 let64)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let18 let15) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let21 let20) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let6 let22) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let40 let40) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let29 let41) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let42 True) => -- EVALUATE
fun lean_r9 : (Eq let46 let45) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let48 let47) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let49 True) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let26 let52) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let53 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let54 True) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let56 let55) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let57 True) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let35 let59) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let60 let5) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let61 let16) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let33 let15) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let39 let62) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let64 let63) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let65 let5) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let66 let14) => -- THEORY_REWRITE_ARITH
fun lean_r26 : let69 => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let70 let5) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let76 let75) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let78 let77) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let69 let79) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let23 let19) => -- THEORY_REWRITE_ARITH
fun lean_r32 : let46 => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let81 let80) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let82 False) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let71 let5) => -- THEORY_REWRITE_ARITH
fun lean_a36 : let40 => by
have lean_s0 : (Or let89 (Or let44 (Or let68 False))) :=
  (scope (fun lean_a37 : let12 =>
    (scope (fun lean_a38 : let43 =>
      (scope (fun lean_a39 : let67 =>
        have lean_s0 : (Eq let63 let67) := by timed flipCongrArg lean_r3 [Not]
        have lean_s1 : (Eq let64 let67) := by timed Eq.trans lean_r23 lean_s0
        have lean_s2 : (Eq let67 let64) := by timed Eq.symm lean_s1
        have lean_s3 : let64 := by timed eqResolve lean_a39 lean_s2
        have lean_s4 : (Or let92 False) :=
          (scope (fun lean_a40 : let64 =>
            have lean_s4 : let4 := by timed trueElim lean_r0
            have lean_s5 : let98 := by timed And.intro lean_s4 lean_a40
            have lean_s6 : (Implies let98 let97) := by arithMulNeg [let17, let5, let3], 2
            have lean_s7 : let97 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let7 let43) := by timed flipCongrArg lean_r5 [Not]
            have lean_s9 : (Eq let8 let43) := by timed Eq.trans lean_r1 lean_s8
            have lean_s10 : (Eq let43 let8) := by timed Eq.symm lean_s9
            have lean_s11 : let8 := by timed eqResolve lean_a38 lean_s10
            have lean_s12 : let96 := by timed And.intro lean_s4 lean_s11
            have lean_s13 : (Implies let96 let95) := by arithMulNeg [skoX, let5, let3], 2
            have lean_s14 : let95 := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : let42 := by timed trueElim lean_r8
            have lean_s16 : (Eq let12 let13) := by timed Eq.symm lean_r2
            have lean_s17 : let13 := by timed eqResolve lean_a37 lean_s16
            have lean_s18 : let94 := by timed And.intro lean_s15 lean_s17
            have lean_s19 : (Implies let94 let93) := by arithMulPos [skoY, let5, let2], 1
            have lean_s20 : let93 := by timed modusPonens lean_s18 lean_s19
            have lean_s21 : let76 := by sumBounds [lean_s7, lean_s14, lean_s20]
            let lean_s22 := by timed congrHAdd lean_r20 lean_r14
            have lean_s23 : (Eq let73 let65) := by timed congrHAdd lean_r25 lean_s22
            have lean_s24 : (Eq let73 let5) := by timed Eq.trans lean_s23 lean_r24
            let lean_s25 := by timed flipCongrArg lean_s24 [GE.ge]
            let lean_s26 := by timed congrHAdd lean_r19 lean_r35
            have lean_s27 : (Eq let72 let70) := by timed congrHAdd lean_r19 lean_s26
            have lean_s28 : (Eq let72 let5) := by timed Eq.trans lean_s27 lean_r27
            have lean_s29 : (Eq let74 let57) := by timed congr lean_s25 lean_s28
            have lean_s30 : (Eq let74 True) := by timed Eq.trans lean_s29 lean_r17
            have lean_s31 : (Eq let75 let82) := by timed flipCongrArg lean_s30 [Not]
            have lean_s32 : (Eq let75 False) := by timed Eq.trans lean_s31 lean_r34
            have lean_s33 : (Eq let76 False) := by timed Eq.trans lean_r28 lean_s32
            show False from by timed eqResolve lean_s21 lean_s33
          ))
        have lean_s5 : let92 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let92 let68) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let92 let15) := by timed Eq.trans lean_s6 lean_r26
        have lean_s8 : (Eq let15 let18) := by timed Eq.symm lean_r3
        have lean_s9 : (Eq let92 let18) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let18 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let15 let92) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let18 let92) := by timed Eq.trans lean_r3 lean_s11
        have lean_s13 : let92 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let12 (And let43 let67))) := by liftOrNToNeg lean_s0
have lean_s2 : let91 := by timed flipNotAnd lean_s1 [let12, let43, let67]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let89 let89) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let49 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let45 let49) := by timed congr lean_s7 lean_r32
have lean_s9 : (Eq let45 True) := by timed Eq.trans lean_s8 lean_r11
have lean_s10 : (Eq let46 True) := by timed Eq.trans lean_r9 lean_s9
have lean_s11 : let46 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let54 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let79 let54) := by timed congr lean_s14 lean_r26
have lean_s16 : (Eq let79 True) := by timed Eq.trans lean_s15 lean_r15
have lean_s17 : (Eq let69 True) := by timed Eq.trans lean_r30 lean_s16
have lean_s18 : let69 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s12 lean_s18
have lean_s20 : (Eq let91 let90) := by timed congr lean_s5 lean_s19
have lean_s21 : let90 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let15 (Or let22 let89)) := by permutateOr lean_s21, [2, 1, 0], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
let lean_s24 := by timed congr lean_s23 lean_r22
let lean_s25 := by timed congr lean_s23 lean_r2
have lean_s26 : (Eq skoY skoY) := by timed rfl
let lean_s27 := by timed flipCongrArg lean_s26 [LE.le]
have lean_s28 : (Eq let38 let81) := by timed congr lean_s27 lean_r18
have lean_s29 : (Eq let38 let80) := by timed Eq.trans lean_s28 lean_r33
let lean_s30 := by timed congr lean_s23 lean_s29
let lean_s31 := by timed flipCongrArg lean_r18 [LE.le]
have lean_s32 : (Eq let36 let78) := by timed congr lean_s31 lean_s26
have lean_s33 : (Eq let36 let77) := by timed Eq.trans lean_s32 lean_r29
have lean_s34 : (Eq let37 let86) := by timed flipCongrArg lean_s33 [Not]
let lean_s35 := by timed congr lean_s23 lean_s34
have lean_s36 : (Eq let34 let67) := by timed flipCongrArg lean_r21 [Not]
let lean_s37 := by timed congr lean_s23 lean_s36
have lean_s38 : (Eq let7 let43) := by timed flipCongrArg lean_r5 [Not]
let lean_s39 := by timed congr lean_s23 lean_s38
have lean_s40 : (Eq pi pi) := by timed rfl
let lean_s41 := by timed flipCongrArg lean_s40 [HMul.hMul]
have lean_s42 : (Eq let30 let48) := by timed congr lean_s41 lean_r7
have lean_s43 : (Eq let30 let47) := by timed Eq.trans lean_s42 lean_r10
let lean_s44 := by timed flipCongrArg lean_s43 [LE.le]
have lean_s45 : (Eq let31 let51) := by timed congr lean_s44 lean_s26
have lean_s46 : (Eq let31 let50) := by timed Eq.trans lean_s45 lean_r12
have lean_s47 : (Eq let32 let85) := by timed flipCongrArg lean_s46 [Not]
let lean_s48 := by timed congr lean_s23 lean_s47
let lean_s49 := by timed flipCongrArg lean_r13 [LE.le]
have lean_s50 : (Eq let27 let56) := by timed congr lean_s49 lean_s40
have lean_s51 : (Eq let27 let55) := by timed Eq.trans lean_s50 lean_r16
have lean_s52 : (Eq let28 let84) := by timed flipCongrArg lean_s51 [Not]
let lean_s53 := by timed congr lean_s23 lean_s52
let lean_s54 := by timed flipCongrArg lean_s40 [LE.le]
have lean_s55 : (Eq let24 let21) := by timed congr lean_s54 lean_r31
have lean_s56 : (Eq let24 let20) := by timed Eq.trans lean_s55 lean_r4
have lean_s57 : (Eq let25 let83) := by timed flipCongrArg lean_s56 [Not]
let lean_s58 := by timed congr lean_s53 lean_s57
let lean_s59 := by timed congr lean_s48 lean_s58
let lean_s60 := by timed congr lean_s39 lean_s59
let lean_s61 := by timed congr lean_s37 lean_s60
let lean_s62 := by timed congr lean_s35 lean_s61
let lean_s63 := by timed congr lean_s30 lean_s62
let lean_s64 := by timed congr lean_s25 lean_s63
have lean_s65 : let88 := by timed congr lean_s24 lean_s64
have lean_s66 : let88 := by timed Eq.trans lean_r6 lean_s65
have lean_s67 : let87 := by timed eqResolve lean_a36 lean_s66
have lean_s68 : let43 := by andElim lean_s67, 5
let lean_s69 := by R1 lean_s22, lean_s68, let22, [(- 1), 0]
have lean_s70 : let67 := by andElim lean_s67, 4
let lean_s71 := by R1 lean_s69, lean_s70, let15, [(- 1), 0]
have lean_s72 : let12 := by andElim lean_s67, 1
exact (show False from by R2 lean_s71, lean_s72, let12, [0, 0])


