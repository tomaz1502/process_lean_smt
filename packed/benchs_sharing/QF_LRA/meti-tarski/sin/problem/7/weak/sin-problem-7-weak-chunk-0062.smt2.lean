open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% LE.le skoX let1)
  let let3 := (Not let2)
  let let4 := (binrel% GT.gt skoX let1)
  let let5 := (Rat.ofInt 1)
  let let6 := (binrel% HMul.hMul let5 let1)
  let let7 := (Rat.ofInt 2000)
  let let8 := (Neg.neg let7)
  let let9 := (binrel% HMul.hMul let8 let1)
  let let10 := (Neg.neg let5)
  let let11 := (binrel% HMul.hMul let10 let1)
  let let12 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let9 let6))
  let let13 := (binrel% HMul.hMul let5 skoY)
  let let14 := (binrel% HMul.hMul let8 skoX)
  let let15 := (Int.ofNat 2000)
  let let16 := (binrel% HMul.hMul (Neg.neg let15) skoX)
  let let17 := (binrel% HAdd.hAdd skoY let16)
  let let18 := (binrel% HMul.hMul let10 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let14 let13))
  let let20 := (binrel% GE.ge let19 let12)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt let19 let12)
  let let23 := (Int.ofNat 0)
  let let24 := (Int.ofNat 1)
  let let25 := (Neg.neg let24)
  let let26 := (binrel% HMul.hMul let25 skoY)
  let let27 := (binrel% GE.ge let26 let23)
  let let28 := (binrel% LE.le skoY let1)
  let let29 := (binrel% GE.ge (binrel% HMul.hMul let25 skoX) let23)
  let let30 := (binrel% HMul.hMul let15 skoX)
  let let31 := (binrel% HAdd.hAdd let26 let30)
  let let32 := (binrel% HDiv.hDiv let24 (Int.ofNat 2))
  let let33 := (binrel% HDiv.hDiv let5 (Rat.ofInt 2))
  let let34 := (binrel% GE.ge let17 let23)
  let let35 := (binrel% LE.le let30 skoY)
  let let36 := (binrel% GE.ge let31 let23)
  let let37 := (binrel% LE.le skoY let30)
  let let38 := (binrel% GT.gt let5 let23)
  let let39 := (Not let29)
  let let40 := (Not let39)
  let let41 := (Eq let29 let40)
  let let42 := (Eq let40 let29)
  let let43 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let16 skoY))
  let let44 := (binrel% HMul.hMul let32 pi)
  let let45 := (binrel% HMul.hMul pi let32)
  let let46 := (binrel% HMul.hMul skoX let7)
  let let47 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let48 := (binrel% GE.ge pi let47)
  let let49 := (binrel% LE.le let47 pi)
  let let50 := (binrel% GE.ge (binrel% HAdd.hAdd let26 skoX) let23)
  let let51 := (binrel% LE.le skoY skoX)
  let let52 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let53 := (binrel% GE.ge skoY let23)
  let let54 := (binrel% LE.le let1 skoY)
  let let55 := (binrel% LT.lt let8 let23)
  let let56 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let57 := (binrel% LE.le pi let56)
  let let58 := (Not let57)
  let let59 := (binrel% LE.le let52 pi)
  let let60 := (Not let59)
  let let61 := (binrel% HMul.hMul pi let33)
  let let62 := (binrel% LE.le let61 skoY)
  let let63 := (Not let62)
  let let64 := (Not let51)
  let let65 := (binrel% LE.le skoY let46)
  let let66 := (Not let65)
  let let67 := (binrel% LE.le let46 skoY)
  let let68 := (Not let67)
  let let69 := (Or let68 let66)
  let let70 := (And let54 (And let67 (And let28 (And let69 (And let64 (And let3 (And let63 (And let60 let58))))))))
  let let71 := (binrel% GE.ge let17 let1)
  let let72 := (binrel% LT.lt let10 let23)
  let let73 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let32) pi)) let23)
  let let74 := (binrel% LE.le let44 skoY)
  let let75 := (Not let71)
  let let76 := (binrel% LT.lt let17 let1)
  let let77 := (Eq let76 let75)
  let let78 := (Eq let29 let29)
  let let79 := (Not True)
  let let80 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let81 := (binrel% GE.ge (binrel% HMul.hMul let25 pi) (Neg.neg let80))
  let let82 := (binrel% LE.le pi let80)
  let let83 := (binrel% GE.ge let1 let1)
  let let84 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1))
  let let85 := (Not let81)
  let let86 := (Not let48)
  let let87 := (Not let73)
  let let88 := (Not let50)
  let let89 := (Not let36)
  let let90 := (Not let34)
  let let91 := (Or let90 let89)
  let let92 := (And let53 (And let34 (And let27 (And let91 (And let88 (And let39 (And let87 (And let86 let85))))))))
  let let93 := (Eq let70 let92)
  let let94 := (Not let27)
  let let95 := (Or let94 (Or let29 let90))
  let let96 := (Or let94 (Or let40 let90))
  let let97 := (binrel% LE.le let13 let6)
  let let98 := (And let38 let28)
  let let99 := (binrel% LT.lt let14 let9)
  let let100 := (And let55 let4)
  let let101 := (binrel% LE.le let18 let11)
  let let102 := (And let72 let71)
(Eq let4 let3) → (Eq let22 let21) → (Eq let28 let27) → (Eq let2 let29) → (Eq let18 let31) → (Eq let33 let32) → (Eq let35 let34) → (Eq let14 let16) → (Eq let37 let36) → (Eq let38 True) → (Eq let42 let41) → (Eq let43 let1) → (Eq let45 let44) → (Eq let46 let30) → (Eq let49 let48) → (Eq let51 let50) → (Eq let52 let47) → (Eq let54 let53) → (Eq let55 True) → (Eq let6 let1) → (Eq let70 let70) → (Eq let9 let1) → (Eq let11 let1) → (Eq let71 let34) → (Eq let72 True) → (Eq let74 let73) → let77 → (Eq let78 True) → (Eq let79 False) → (Eq let82 let81) → let42 → (Eq let83 True) → (Eq let56 let80) → (Eq let84 let1) → (Eq let13 skoY) → let70 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% LE.le skoX let1)
  let let3 := (Not let2)
  let let4 := (binrel% GT.gt skoX let1)
  let let5 := (Rat.ofInt 1)
  let let6 := (binrel% HMul.hMul let5 let1)
  let let7 := (Rat.ofInt 2000)
  let let8 := (Neg.neg let7)
  let let9 := (binrel% HMul.hMul let8 let1)
  let let10 := (Neg.neg let5)
  let let11 := (binrel% HMul.hMul let10 let1)
  let let12 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let9 let6))
  let let13 := (binrel% HMul.hMul let5 skoY)
  let let14 := (binrel% HMul.hMul let8 skoX)
  let let15 := (Int.ofNat 2000)
  let let16 := (binrel% HMul.hMul (Neg.neg let15) skoX)
  let let17 := (binrel% HAdd.hAdd skoY let16)
  let let18 := (binrel% HMul.hMul let10 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let14 let13))
  let let20 := (binrel% GE.ge let19 let12)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt let19 let12)
  let let23 := (Int.ofNat 0)
  let let24 := (Int.ofNat 1)
  let let25 := (Neg.neg let24)
  let let26 := (binrel% HMul.hMul let25 skoY)
  let let27 := (binrel% GE.ge let26 let23)
  let let28 := (binrel% LE.le skoY let1)
  let let29 := (binrel% GE.ge (binrel% HMul.hMul let25 skoX) let23)
  let let30 := (binrel% HMul.hMul let15 skoX)
  let let31 := (binrel% HAdd.hAdd let26 let30)
  let let32 := (binrel% HDiv.hDiv let24 (Int.ofNat 2))
  let let33 := (binrel% HDiv.hDiv let5 (Rat.ofInt 2))
  let let34 := (binrel% GE.ge let17 let23)
  let let35 := (binrel% LE.le let30 skoY)
  let let36 := (binrel% GE.ge let31 let23)
  let let37 := (binrel% LE.le skoY let30)
  let let38 := (binrel% GT.gt let5 let23)
  let let39 := (Not let29)
  let let40 := (Not let39)
  let let41 := (Eq let29 let40)
  let let42 := (Eq let40 let29)
  let let43 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let16 skoY))
  let let44 := (binrel% HMul.hMul let32 pi)
  let let45 := (binrel% HMul.hMul pi let32)
  let let46 := (binrel% HMul.hMul skoX let7)
  let let47 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let48 := (binrel% GE.ge pi let47)
  let let49 := (binrel% LE.le let47 pi)
  let let50 := (binrel% GE.ge (binrel% HAdd.hAdd let26 skoX) let23)
  let let51 := (binrel% LE.le skoY skoX)
  let let52 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let53 := (binrel% GE.ge skoY let23)
  let let54 := (binrel% LE.le let1 skoY)
  let let55 := (binrel% LT.lt let8 let23)
  let let56 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let57 := (binrel% LE.le pi let56)
  let let58 := (Not let57)
  let let59 := (binrel% LE.le let52 pi)
  let let60 := (Not let59)
  let let61 := (binrel% HMul.hMul pi let33)
  let let62 := (binrel% LE.le let61 skoY)
  let let63 := (Not let62)
  let let64 := (Not let51)
  let let65 := (binrel% LE.le skoY let46)
  let let66 := (Not let65)
  let let67 := (binrel% LE.le let46 skoY)
  let let68 := (Not let67)
  let let69 := (Or let68 let66)
  let let70 := (And let54 (And let67 (And let28 (And let69 (And let64 (And let3 (And let63 (And let60 let58))))))))
  let let71 := (binrel% GE.ge let17 let1)
  let let72 := (binrel% LT.lt let10 let23)
  let let73 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let32) pi)) let23)
  let let74 := (binrel% LE.le let44 skoY)
  let let75 := (Not let71)
  let let76 := (binrel% LT.lt let17 let1)
  let let77 := (Eq let76 let75)
  let let78 := (Eq let29 let29)
  let let79 := (Not True)
  let let80 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let81 := (binrel% GE.ge (binrel% HMul.hMul let25 pi) (Neg.neg let80))
  let let82 := (binrel% LE.le pi let80)
  let let83 := (binrel% GE.ge let1 let1)
  let let84 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1))
  let let85 := (Not let81)
  let let86 := (Not let48)
  let let87 := (Not let73)
  let let88 := (Not let50)
  let let89 := (Not let36)
  let let90 := (Not let34)
  let let91 := (Or let90 let89)
  let let92 := (And let53 (And let34 (And let27 (And let91 (And let88 (And let39 (And let87 (And let86 let85))))))))
  let let93 := (Eq let70 let92)
  let let94 := (Not let27)
  let let95 := (Or let94 (Or let29 let90))
  let let96 := (Or let94 (Or let40 let90))
  let let97 := (binrel% LE.le let13 let6)
  let let98 := (And let38 let28)
  let let99 := (binrel% LT.lt let14 let9)
  let let100 := (And let55 let4)
  let let101 := (binrel% LE.le let18 let11)
  let let102 := (And let72 let71)
fun lean_r0 : (Eq let4 let3) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let2 let29) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let18 let31) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let14 let16) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let38 True) => -- EVALUATE
fun lean_r10 : (Eq let42 let41) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let43 let1) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let46 let30) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let49 let48) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let52 let47) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let54 let53) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let55 True) => -- EVALUATE
fun lean_r19 : (Eq let6 let1) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let70 let70) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let9 let1) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let11 let1) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let71 let34) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let72 True) => -- EVALUATE
fun lean_r25 : (Eq let74 let73) => -- THEORY_REWRITE_ARITH
fun lean_r26 : let77 => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let78 True) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let79 False) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let82 let81) => -- THEORY_REWRITE_ARITH
fun lean_r30 : let42 => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let83 True) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let56 let80) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let84 let1) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let13 skoY) => -- THEORY_REWRITE_ARITH
fun lean_a35 : let70 => by
have lean_s0 : (Or let94 (Or let40 (Or let90 False))) :=
  (scope (fun lean_a36 : let27 =>
    (scope (fun lean_a37 : let39 =>
      (scope (fun lean_a38 : let34 =>
        have lean_s0 : (Eq let34 let71) := by timed Eq.symm lean_r23
        have lean_s1 : let71 := by timed eqResolve lean_a38 lean_s0
        have lean_s2 : (Or let75 False) :=
          (scope (fun lean_a39 : let71 =>
            have lean_s2 : let72 := by timed trueElim lean_r24
            have lean_s3 : let102 := by timed And.intro lean_s2 lean_a39
            have lean_s4 : (Implies let102 let101) := by arithMulNeg [let17, let1, let10], 3
            have lean_s5 : let101 := by timed modusPonens lean_s3 lean_s4
            have lean_s6 : let55 := by timed trueElim lean_r18
            have lean_s7 : (Eq let3 let39) := by timed flipCongrArg lean_r3 [Not]
            have lean_s8 : (Eq let4 let39) := by timed Eq.trans lean_r0 lean_s7
            have lean_s9 : (Eq let39 let4) := by timed Eq.symm lean_s8
            have lean_s10 : let4 := by timed eqResolve lean_a37 lean_s9
            have lean_s11 : let100 := by timed And.intro lean_s6 lean_s10
            have lean_s12 : (Implies let100 let99) := by arithMulNeg [skoX, let1, let8], 2
            have lean_s13 : let99 := by timed modusPonens lean_s11 lean_s12
            have lean_s14 : let38 := by timed trueElim lean_r9
            have lean_s15 : (Eq let27 let28) := by timed Eq.symm lean_r2
            have lean_s16 : let28 := by timed eqResolve lean_a36 lean_s15
            have lean_s17 : let98 := by timed And.intro lean_s14 lean_s16
            have lean_s18 : (Implies let98 let97) := by arithMulPos [skoY, let1, let5], 1
            have lean_s19 : let97 := by timed modusPonens lean_s17 lean_s18
            have lean_s20 : let22 := by sumBounds [lean_s5, lean_s13, lean_s19]
            let lean_s21 := by timed congrHAdd lean_r7 lean_r34
            have lean_s22 : (Eq let19 let43) := by timed congrHAdd lean_r4 lean_s21
            have lean_s23 : (Eq let19 let1) := by timed Eq.trans lean_s22 lean_r11
            let lean_s24 := by timed flipCongrArg lean_s23 [GE.ge]
            let lean_s25 := by timed congrHAdd lean_r21 lean_r19
            have lean_s26 : (Eq let12 let84) := by timed congrHAdd lean_r22 lean_s25
            have lean_s27 : (Eq let12 let1) := by timed Eq.trans lean_s26 lean_r33
            have lean_s28 : (Eq let20 let83) := by timed congr lean_s24 lean_s27
            have lean_s29 : (Eq let20 True) := by timed Eq.trans lean_s28 lean_r31
            have lean_s30 : (Eq let21 let79) := by timed flipCongrArg lean_s29 [Not]
            have lean_s31 : (Eq let21 False) := by timed Eq.trans lean_s30 lean_r28
            have lean_s32 : (Eq let22 False) := by timed Eq.trans lean_r1 lean_s31
            show False from by timed eqResolve lean_s20 lean_s32
          ))
        have lean_s3 : let75 := by liftOrNToNeg lean_s2
        have lean_s4 : (Eq let75 let90) := by timed flipCongrArg lean_r23 [Not]
        have lean_s5 : (Eq let76 let90) := by timed Eq.trans lean_r26 lean_s4
        have lean_s6 : (Eq let90 let76) := by timed Eq.symm lean_s5
        have lean_s7 : (Eq let75 let76) := by timed Eq.trans lean_s4 lean_s6
        have lean_s8 : let76 := by timed eqResolve lean_s3 lean_s7
        have lean_s9 : (Eq let90 let75) := by timed Eq.symm lean_s4
        have lean_s10 : let77 := by timed Eq.trans lean_s5 lean_s9
        have lean_s11 : let75 := by timed eqResolve lean_s8 lean_s10
        show False from by timed contradiction lean_s1 lean_s11
  ))))))
have lean_s1 : (Not (And let27 (And let39 let34))) := by liftOrNToNeg lean_s0
have lean_s2 : let96 := by timed flipNotAnd lean_s1 [let27, let39, let34]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let94 let94) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let78 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let41 let78) := by timed congr lean_s7 lean_r30
have lean_s9 : (Eq let41 True) := by timed Eq.trans lean_s8 lean_r27
have lean_s10 : (Eq let42 True) := by timed Eq.trans lean_r10 lean_s9
have lean_s11 : let42 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq let90 let90) := by timed rfl
let lean_s14 := by timed congr lean_s12 lean_s13
have lean_s15 : (Eq let96 let95) := by timed congr lean_s5 lean_s14
have lean_s16 : let95 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let90 (Or let29 let94)) := by permutateOr lean_s16, [2, 1, 0], (- 1)
have lean_s18 : (Eq And And) := by timed rfl
let lean_s19 := by timed congr lean_s18 lean_r17
let lean_s20 := by timed flipCongrArg lean_r13 [LE.le]
have lean_s21 : (Eq skoY skoY) := by timed rfl
have lean_s22 : (Eq let67 let35) := by timed congr lean_s20 lean_s21
have lean_s23 : (Eq let67 let34) := by timed Eq.trans lean_s22 lean_r6
let lean_s24 := by timed congr lean_s18 lean_s23
let lean_s25 := by timed congr lean_s18 lean_r2
have lean_s26 : (Eq let68 let90) := by timed flipCongrArg lean_s23 [Not]
let lean_s27 := by timed flipCongrArg lean_s26 [Or]
let lean_s28 := by timed flipCongrArg lean_s21 [LE.le]
have lean_s29 : (Eq let65 let37) := by timed congr lean_s28 lean_r13
have lean_s30 : (Eq let65 let36) := by timed Eq.trans lean_s29 lean_r8
have lean_s31 : (Eq let66 let89) := by timed flipCongrArg lean_s30 [Not]
have lean_s32 : (Eq let69 let91) := by timed congr lean_s27 lean_s31
let lean_s33 := by timed congr lean_s18 lean_s32
have lean_s34 : (Eq let64 let88) := by timed flipCongrArg lean_r15 [Not]
let lean_s35 := by timed congr lean_s18 lean_s34
have lean_s36 : (Eq let3 let39) := by timed flipCongrArg lean_r3 [Not]
let lean_s37 := by timed congr lean_s18 lean_s36
have lean_s38 : (Eq pi pi) := by timed rfl
let lean_s39 := by timed flipCongrArg lean_s38 [HMul.hMul]
have lean_s40 : (Eq let61 let45) := by timed congr lean_s39 lean_r5
have lean_s41 : (Eq let61 let44) := by timed Eq.trans lean_s40 lean_r12
let lean_s42 := by timed flipCongrArg lean_s41 [LE.le]
have lean_s43 : (Eq let62 let74) := by timed congr lean_s42 lean_s21
have lean_s44 : (Eq let62 let73) := by timed Eq.trans lean_s43 lean_r25
have lean_s45 : (Eq let63 let87) := by timed flipCongrArg lean_s44 [Not]
let lean_s46 := by timed congr lean_s18 lean_s45
let lean_s47 := by timed flipCongrArg lean_r16 [LE.le]
have lean_s48 : (Eq let59 let49) := by timed congr lean_s47 lean_s38
have lean_s49 : (Eq let59 let48) := by timed Eq.trans lean_s48 lean_r14
have lean_s50 : (Eq let60 let86) := by timed flipCongrArg lean_s49 [Not]
let lean_s51 := by timed congr lean_s18 lean_s50
let lean_s52 := by timed flipCongrArg lean_s38 [LE.le]
have lean_s53 : (Eq let57 let82) := by timed congr lean_s52 lean_r32
have lean_s54 : (Eq let57 let81) := by timed Eq.trans lean_s53 lean_r29
have lean_s55 : (Eq let58 let85) := by timed flipCongrArg lean_s54 [Not]
let lean_s56 := by timed congr lean_s51 lean_s55
let lean_s57 := by timed congr lean_s46 lean_s56
let lean_s58 := by timed congr lean_s37 lean_s57
let lean_s59 := by timed congr lean_s35 lean_s58
let lean_s60 := by timed congr lean_s33 lean_s59
let lean_s61 := by timed congr lean_s25 lean_s60
let lean_s62 := by timed congr lean_s24 lean_s61
have lean_s63 : let93 := by timed congr lean_s19 lean_s62
have lean_s64 : let93 := by timed Eq.trans lean_r20 lean_s63
have lean_s65 : let92 := by timed eqResolve lean_a35 lean_s64
have lean_s66 : let39 := by andElim lean_s65, 5
let lean_s67 := by R1 lean_s17, lean_s66, let29, [(- 1), 0]
have lean_s68 : let27 := by andElim lean_s65, 2
let lean_s69 := by R2 lean_s67, lean_s68, let27, [(- 1), 0]
have lean_s70 : let34 := by andElim lean_s65, 1
exact (show False from by R2 lean_s69, lean_s70, let34, [0, 0])


