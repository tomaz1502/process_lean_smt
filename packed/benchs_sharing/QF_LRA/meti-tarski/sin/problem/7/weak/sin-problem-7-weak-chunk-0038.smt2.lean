open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% LE.le skoX let1)
  let let3 := (Not let2)
  let let4 := (binrel% GT.gt skoX let1)
  let let5 := (Rat.ofInt 1)
  let let6 := (binrel% HMul.hMul let5 let1)
  let let7 := (Rat.ofInt 2000)
  let let8 := (Neg.neg let7)
  let let9 := (binrel% HMul.hMul let8 let1)
  let let10 := (Neg.neg let5)
  let let11 := (binrel% HMul.hMul let10 let1)
  let let12 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let9 let6))
  let let13 := (binrel% HMul.hMul let5 skoY)
  let let14 := (binrel% HMul.hMul let8 skoX)
  let let15 := (Int.ofNat 2000)
  let let16 := (binrel% HMul.hMul (Neg.neg let15) skoX)
  let let17 := (binrel% HAdd.hAdd skoY let16)
  let let18 := (binrel% HMul.hMul let10 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let14 let13))
  let let20 := (binrel% GE.ge let19 let12)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt let19 let12)
  let let23 := (Int.ofNat 0)
  let let24 := (Int.ofNat 1)
  let let25 := (Neg.neg let24)
  let let26 := (binrel% HMul.hMul let25 skoY)
  let let27 := (binrel% GE.ge let26 let23)
  let let28 := (binrel% LE.le skoY let1)
  let let29 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1))
  let let30 := (binrel% HMul.hMul let15 skoX)
  let let31 := (binrel% HMul.hMul skoX let7)
  let let32 := (binrel% GE.ge (binrel% HMul.hMul let25 skoX) let23)
  let let33 := (binrel% HAdd.hAdd let26 let30)
  let let34 := (binrel% GE.ge let33 let23)
  let let35 := (binrel% LE.le skoY let30)
  let let36 := (binrel% HDiv.hDiv let24 (Int.ofNat 2))
  let let37 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let36) pi)) let23)
  let let38 := (binrel% HMul.hMul let36 pi)
  let let39 := (binrel% LE.le let38 skoY)
  let let40 := (binrel% HDiv.hDiv let5 (Rat.ofInt 2))
  let let41 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let42 := (binrel% LE.le pi let41)
  let let43 := (Not let42)
  let let44 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let45 := (binrel% LE.le let44 pi)
  let let46 := (Not let45)
  let let47 := (binrel% HMul.hMul pi let40)
  let let48 := (binrel% LE.le let47 skoY)
  let let49 := (Not let48)
  let let50 := (binrel% LE.le skoY skoX)
  let let51 := (Not let50)
  let let52 := (binrel% LE.le skoY let31)
  let let53 := (binrel% LE.le let31 skoY)
  let let54 := (And let53 (And let28 (And let52 (And let51 (And let3 (And let49 (And let46 let43)))))))
  let let55 := (binrel% LT.lt let8 let23)
  let let56 := (binrel% HMul.hMul pi let36)
  let let57 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let58 := (binrel% GE.ge pi let57)
  let let59 := (binrel% LE.le let57 pi)
  let let60 := (binrel% GE.ge let17 let23)
  let let61 := (binrel% LE.le let30 skoY)
  let let62 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let63 := (binrel% LT.lt let10 let23)
  let let64 := (binrel% GE.ge let17 let1)
  let let65 := (Not let64)
  let let66 := (binrel% LT.lt let17 let1)
  let let67 := (Eq let66 let65)
  let let68 := (binrel% GE.ge (binrel% HMul.hMul let25 pi) (Neg.neg let62))
  let let69 := (binrel% LE.le pi let62)
  let let70 := (Not True)
  let let71 := (Eq let32 let32)
  let let72 := (binrel% GT.gt let5 let23)
  let let73 := (Not let32)
  let let74 := (Not let73)
  let let75 := (Eq let32 let74)
  let let76 := (Eq let74 let32)
  let let77 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let16 skoY))
  let let78 := (binrel% GE.ge (binrel% HAdd.hAdd let26 skoX) let23)
  let let79 := (binrel% GE.ge let1 let1)
  let let80 := (Not let68)
  let let81 := (Not let58)
  let let82 := (Not let37)
  let let83 := (Not let78)
  let let84 := (And let60 (And let27 (And let34 (And let83 (And let73 (And let82 (And let81 let80)))))))
  let let85 := (Eq let54 let84)
  let let86 := (Not let27)
  let let87 := (Not let60)
  let let88 := (Or let86 (Or let32 let87))
  let let89 := (Or let86 (Or let74 let87))
  let let90 := (binrel% LE.le let13 let6)
  let let91 := (And let72 let28)
  let let92 := (binrel% LT.lt let14 let9)
  let let93 := (And let55 let4)
  let let94 := (binrel% LE.le let18 let11)
  let let95 := (And let63 let64)
(Eq let4 let3) → (Eq let22 let21) → (Eq let28 let27) → (Eq let29 let1) → (Eq let31 let30) → (Eq let2 let32) → (Eq let35 let34) → (Eq let39 let37) → (Eq let40 let36) → (Eq let54 let54) → (Eq let55 True) → (Eq let6 let1) → (Eq let14 let16) → (Eq let56 let38) → (Eq let18 let33) → (Eq let59 let58) → (Eq let61 let60) → (Eq let41 let62) → (Eq let63 True) → (Eq let44 let57) → let67 → (Eq let69 let68) → (Eq let70 False) → (Eq let71 True) → (Eq let9 let1) → (Eq let72 True) → (Eq let76 let75) → (Eq let77 let1) → (Eq let11 let1) → (Eq let64 let60) → (Eq let50 let78) → let76 → (Eq let79 True) → (Eq let13 skoY) → let54 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% LE.le skoX let1)
  let let3 := (Not let2)
  let let4 := (binrel% GT.gt skoX let1)
  let let5 := (Rat.ofInt 1)
  let let6 := (binrel% HMul.hMul let5 let1)
  let let7 := (Rat.ofInt 2000)
  let let8 := (Neg.neg let7)
  let let9 := (binrel% HMul.hMul let8 let1)
  let let10 := (Neg.neg let5)
  let let11 := (binrel% HMul.hMul let10 let1)
  let let12 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let9 let6))
  let let13 := (binrel% HMul.hMul let5 skoY)
  let let14 := (binrel% HMul.hMul let8 skoX)
  let let15 := (Int.ofNat 2000)
  let let16 := (binrel% HMul.hMul (Neg.neg let15) skoX)
  let let17 := (binrel% HAdd.hAdd skoY let16)
  let let18 := (binrel% HMul.hMul let10 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let14 let13))
  let let20 := (binrel% GE.ge let19 let12)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt let19 let12)
  let let23 := (Int.ofNat 0)
  let let24 := (Int.ofNat 1)
  let let25 := (Neg.neg let24)
  let let26 := (binrel% HMul.hMul let25 skoY)
  let let27 := (binrel% GE.ge let26 let23)
  let let28 := (binrel% LE.le skoY let1)
  let let29 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1))
  let let30 := (binrel% HMul.hMul let15 skoX)
  let let31 := (binrel% HMul.hMul skoX let7)
  let let32 := (binrel% GE.ge (binrel% HMul.hMul let25 skoX) let23)
  let let33 := (binrel% HAdd.hAdd let26 let30)
  let let34 := (binrel% GE.ge let33 let23)
  let let35 := (binrel% LE.le skoY let30)
  let let36 := (binrel% HDiv.hDiv let24 (Int.ofNat 2))
  let let37 := (binrel% GE.ge (binrel% HAdd.hAdd skoY (binrel% HMul.hMul (Neg.neg let36) pi)) let23)
  let let38 := (binrel% HMul.hMul let36 pi)
  let let39 := (binrel% LE.le let38 skoY)
  let let40 := (binrel% HDiv.hDiv let5 (Rat.ofInt 2))
  let let41 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let42 := (binrel% LE.le pi let41)
  let let43 := (Not let42)
  let let44 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let45 := (binrel% LE.le let44 pi)
  let let46 := (Not let45)
  let let47 := (binrel% HMul.hMul pi let40)
  let let48 := (binrel% LE.le let47 skoY)
  let let49 := (Not let48)
  let let50 := (binrel% LE.le skoY skoX)
  let let51 := (Not let50)
  let let52 := (binrel% LE.le skoY let31)
  let let53 := (binrel% LE.le let31 skoY)
  let let54 := (And let53 (And let28 (And let52 (And let51 (And let3 (And let49 (And let46 let43)))))))
  let let55 := (binrel% LT.lt let8 let23)
  let let56 := (binrel% HMul.hMul pi let36)
  let let57 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let58 := (binrel% GE.ge pi let57)
  let let59 := (binrel% LE.le let57 pi)
  let let60 := (binrel% GE.ge let17 let23)
  let let61 := (binrel% LE.le let30 skoY)
  let let62 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let63 := (binrel% LT.lt let10 let23)
  let let64 := (binrel% GE.ge let17 let1)
  let let65 := (Not let64)
  let let66 := (binrel% LT.lt let17 let1)
  let let67 := (Eq let66 let65)
  let let68 := (binrel% GE.ge (binrel% HMul.hMul let25 pi) (Neg.neg let62))
  let let69 := (binrel% LE.le pi let62)
  let let70 := (Not True)
  let let71 := (Eq let32 let32)
  let let72 := (binrel% GT.gt let5 let23)
  let let73 := (Not let32)
  let let74 := (Not let73)
  let let75 := (Eq let32 let74)
  let let76 := (Eq let74 let32)
  let let77 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let16 skoY))
  let let78 := (binrel% GE.ge (binrel% HAdd.hAdd let26 skoX) let23)
  let let79 := (binrel% GE.ge let1 let1)
  let let80 := (Not let68)
  let let81 := (Not let58)
  let let82 := (Not let37)
  let let83 := (Not let78)
  let let84 := (And let60 (And let27 (And let34 (And let83 (And let73 (And let82 (And let81 let80)))))))
  let let85 := (Eq let54 let84)
  let let86 := (Not let27)
  let let87 := (Not let60)
  let let88 := (Or let86 (Or let32 let87))
  let let89 := (Or let86 (Or let74 let87))
  let let90 := (binrel% LE.le let13 let6)
  let let91 := (And let72 let28)
  let let92 := (binrel% LT.lt let14 let9)
  let let93 := (And let55 let4)
  let let94 := (binrel% LE.le let18 let11)
  let let95 := (And let63 let64)
fun lean_r0 : (Eq let4 let3) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let29 let1) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let2 let32) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let39 let37) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let40 let36) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let54 let54) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let55 True) => -- EVALUATE
fun lean_r11 : (Eq let6 let1) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let14 let16) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let56 let38) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let18 let33) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let59 let58) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let61 let60) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let41 let62) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let63 True) => -- EVALUATE
fun lean_r19 : (Eq let44 let57) => -- THEORY_REWRITE_ARITH
fun lean_r20 : let67 => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let69 let68) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let70 False) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let71 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let9 let1) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let72 True) => -- EVALUATE
fun lean_r26 : (Eq let76 let75) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let77 let1) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let11 let1) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let64 let60) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let50 let78) => -- THEORY_REWRITE_ARITH
fun lean_r31 : let76 => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let79 True) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let13 skoY) => -- THEORY_REWRITE_ARITH
fun lean_a34 : let54 => by
have lean_s0 : (Or let86 (Or let74 (Or let87 False))) :=
  (scope (fun lean_a35 : let27 =>
    (scope (fun lean_a36 : let73 =>
      (scope (fun lean_a37 : let60 =>
        have lean_s0 : (Eq let60 let64) := by timed Eq.symm lean_r29
        have lean_s1 : let64 := by timed eqResolve lean_a37 lean_s0
        have lean_s2 : (Or let65 False) :=
          (scope (fun lean_a38 : let64 =>
            have lean_s2 : let63 := by timed trueElim lean_r18
            have lean_s3 : let95 := by timed And.intro lean_s2 lean_a38
            have lean_s4 : (Implies let95 let94) := by arithMulNeg [let17, let1, let10], 3
            have lean_s5 : let94 := by timed modusPonens lean_s3 lean_s4
            have lean_s6 : let55 := by timed trueElim lean_r10
            have lean_s7 : (Eq let3 let73) := by timed flipCongrArg lean_r5 [Not]
            have lean_s8 : (Eq let4 let73) := by timed Eq.trans lean_r0 lean_s7
            have lean_s9 : (Eq let73 let4) := by timed Eq.symm lean_s8
            have lean_s10 : let4 := by timed eqResolve lean_a36 lean_s9
            have lean_s11 : let93 := by timed And.intro lean_s6 lean_s10
            have lean_s12 : (Implies let93 let92) := by arithMulNeg [skoX, let1, let8], 2
            have lean_s13 : let92 := by timed modusPonens lean_s11 lean_s12
            have lean_s14 : let72 := by timed trueElim lean_r25
            have lean_s15 : (Eq let27 let28) := by timed Eq.symm lean_r2
            have lean_s16 : let28 := by timed eqResolve lean_a35 lean_s15
            have lean_s17 : let91 := by timed And.intro lean_s14 lean_s16
            have lean_s18 : (Implies let91 let90) := by arithMulPos [skoY, let1, let5], 1
            have lean_s19 : let90 := by timed modusPonens lean_s17 lean_s18
            have lean_s20 : let22 := by sumBounds [lean_s5, lean_s13, lean_s19]
            let lean_s21 := by timed congrHAdd lean_r12 lean_r33
            have lean_s22 : (Eq let19 let77) := by timed congrHAdd lean_r14 lean_s21
            have lean_s23 : (Eq let19 let1) := by timed Eq.trans lean_s22 lean_r27
            let lean_s24 := by timed flipCongrArg lean_s23 [GE.ge]
            let lean_s25 := by timed congrHAdd lean_r24 lean_r11
            have lean_s26 : (Eq let12 let29) := by timed congrHAdd lean_r28 lean_s25
            have lean_s27 : (Eq let12 let1) := by timed Eq.trans lean_s26 lean_r3
            have lean_s28 : (Eq let20 let79) := by timed congr lean_s24 lean_s27
            have lean_s29 : (Eq let20 True) := by timed Eq.trans lean_s28 lean_r32
            have lean_s30 : (Eq let21 let70) := by timed flipCongrArg lean_s29 [Not]
            have lean_s31 : (Eq let21 False) := by timed Eq.trans lean_s30 lean_r22
            have lean_s32 : (Eq let22 False) := by timed Eq.trans lean_r1 lean_s31
            show False from by timed eqResolve lean_s20 lean_s32
          ))
        have lean_s3 : let65 := by liftOrNToNeg lean_s2
        have lean_s4 : (Eq let65 let87) := by timed flipCongrArg lean_r29 [Not]
        have lean_s5 : (Eq let66 let87) := by timed Eq.trans lean_r20 lean_s4
        have lean_s6 : (Eq let87 let66) := by timed Eq.symm lean_s5
        have lean_s7 : (Eq let65 let66) := by timed Eq.trans lean_s4 lean_s6
        have lean_s8 : let66 := by timed eqResolve lean_s3 lean_s7
        have lean_s9 : (Eq let87 let65) := by timed Eq.symm lean_s4
        have lean_s10 : let67 := by timed Eq.trans lean_s5 lean_s9
        have lean_s11 : let65 := by timed eqResolve lean_s8 lean_s10
        show False from by timed contradiction lean_s1 lean_s11
  ))))))
have lean_s1 : (Not (And let27 (And let73 let60))) := by liftOrNToNeg lean_s0
have lean_s2 : let89 := by timed flipNotAnd lean_s1 [let27, let73, let60]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let86 let86) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let71 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let75 let71) := by timed congr lean_s7 lean_r31
have lean_s9 : (Eq let75 True) := by timed Eq.trans lean_s8 lean_r23
have lean_s10 : (Eq let76 True) := by timed Eq.trans lean_r26 lean_s9
have lean_s11 : let76 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq let87 let87) := by timed rfl
let lean_s14 := by timed congr lean_s12 lean_s13
have lean_s15 : (Eq let89 let88) := by timed congr lean_s5 lean_s14
have lean_s16 : let88 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let32 (Or let87 let86)) := by permutateOr lean_s16, [1, 2, 0], (- 1)
have lean_s18 : (Eq And And) := by timed rfl
let lean_s19 := by timed flipCongrArg lean_r4 [LE.le]
have lean_s20 : (Eq skoY skoY) := by timed rfl
have lean_s21 : (Eq let53 let61) := by timed congr lean_s19 lean_s20
have lean_s22 : (Eq let53 let60) := by timed Eq.trans lean_s21 lean_r16
let lean_s23 := by timed congr lean_s18 lean_s22
let lean_s24 := by timed congr lean_s18 lean_r2
let lean_s25 := by timed flipCongrArg lean_s20 [LE.le]
have lean_s26 : (Eq let52 let35) := by timed congr lean_s25 lean_r4
have lean_s27 : (Eq let52 let34) := by timed Eq.trans lean_s26 lean_r6
let lean_s28 := by timed congr lean_s18 lean_s27
have lean_s29 : (Eq let51 let83) := by timed flipCongrArg lean_r30 [Not]
let lean_s30 := by timed congr lean_s18 lean_s29
have lean_s31 : (Eq let3 let73) := by timed flipCongrArg lean_r5 [Not]
let lean_s32 := by timed congr lean_s18 lean_s31
have lean_s33 : (Eq pi pi) := by timed rfl
let lean_s34 := by timed flipCongrArg lean_s33 [HMul.hMul]
have lean_s35 : (Eq let47 let56) := by timed congr lean_s34 lean_r8
have lean_s36 : (Eq let47 let38) := by timed Eq.trans lean_s35 lean_r13
let lean_s37 := by timed flipCongrArg lean_s36 [LE.le]
have lean_s38 : (Eq let48 let39) := by timed congr lean_s37 lean_s20
have lean_s39 : (Eq let48 let37) := by timed Eq.trans lean_s38 lean_r7
have lean_s40 : (Eq let49 let82) := by timed flipCongrArg lean_s39 [Not]
let lean_s41 := by timed congr lean_s18 lean_s40
let lean_s42 := by timed flipCongrArg lean_r19 [LE.le]
have lean_s43 : (Eq let45 let59) := by timed congr lean_s42 lean_s33
have lean_s44 : (Eq let45 let58) := by timed Eq.trans lean_s43 lean_r15
have lean_s45 : (Eq let46 let81) := by timed flipCongrArg lean_s44 [Not]
let lean_s46 := by timed congr lean_s18 lean_s45
let lean_s47 := by timed flipCongrArg lean_s33 [LE.le]
have lean_s48 : (Eq let42 let69) := by timed congr lean_s47 lean_r17
have lean_s49 : (Eq let42 let68) := by timed Eq.trans lean_s48 lean_r21
have lean_s50 : (Eq let43 let80) := by timed flipCongrArg lean_s49 [Not]
let lean_s51 := by timed congr lean_s46 lean_s50
let lean_s52 := by timed congr lean_s41 lean_s51
let lean_s53 := by timed congr lean_s32 lean_s52
let lean_s54 := by timed congr lean_s30 lean_s53
let lean_s55 := by timed congr lean_s28 lean_s54
let lean_s56 := by timed congr lean_s24 lean_s55
have lean_s57 : let85 := by timed congr lean_s23 lean_s56
have lean_s58 : let85 := by timed Eq.trans lean_r9 lean_s57
have lean_s59 : let84 := by timed eqResolve lean_a34 lean_s58
have lean_s60 : let73 := by andElim lean_s59, 4
let lean_s61 := by R1 lean_s17, lean_s60, let32, [(- 1), 0]
have lean_s62 : let27 := by andElim lean_s59, 1
let lean_s63 := by R2 lean_s61, lean_s62, let27, [(- 1), 0]
have lean_s64 : let60 := by andElim lean_s59, 0
exact (show False from by R2 lean_s63, lean_s64, let60, [0, 0])


