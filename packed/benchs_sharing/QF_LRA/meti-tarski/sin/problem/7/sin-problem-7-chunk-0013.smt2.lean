open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 1)
  let let2 := (binrel% HMul.hMul let1 skoY)
  let let3 := (Rat.ofInt 0)
  let let4 := (Neg.neg let1)
  let let5 := (binrel% HMul.hMul let4 let3)
  let let6 := (binrel% HMul.hMul let1 let3)
  let let7 := (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let3 let3))
  let let8 := (Int.ofNat 0)
  let let9 := (binrel% GT.gt let1 let8)
  let let10 := (binrel% GE.ge let3 let3)
  let let11 := (Int.ofNat 1)
  let let12 := (Neg.neg let11)
  let let13 := (binrel% HMul.hMul let12 skoY)
  let let14 := (binrel% HAdd.hAdd let13 skoX)
  let let15 := (binrel% GE.ge let14 let8)
  let let16 := (binrel% HMul.hMul let12 skoX)
  let let17 := (binrel% HAdd.hAdd skoY let16)
  let let18 := (binrel% LE.le let17 let3)
  let let19 := (Not let15)
  let let20 := (Not let19)
  let let21 := (Eq let15 let20)
  let let22 := (Eq let20 let15)
  let let23 := (binrel% LE.le skoY skoX)
  let let24 := (Eq let15 let15)
  let let25 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let26 := (binrel% GE.ge (binrel% HMul.hMul let12 pi) (Neg.neg let25))
  let let27 := (binrel% LE.le pi let25)
  let let28 := (binrel% GE.ge skoX let8)
  let let29 := (binrel% LE.le let3 skoX)
  let let30 := (Int.ofNat 2)
  let let31 := (binrel% HDiv.hDiv let11 let30)
  let let32 := (binrel% HDiv.hDiv let1 (Rat.ofInt 2))
  let let33 := (Not True)
  let let34 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let30) skoY)) let8)
  let let35 := (binrel% HMul.hMul let31 pi)
  let let36 := (binrel% LE.le skoY let35)
  let let37 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let38 := (binrel% GE.ge pi let37)
  let let39 := (binrel% LE.le let37 pi)
  let let40 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let16 skoY))
  let let41 := (Not let18)
  let let42 := (binrel% GT.gt let17 let3)
  let let43 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let44 := (binrel% GE.ge skoX let3)
  let let45 := (binrel% HMul.hMul let4 let17)
  let let46 := (binrel% GE.ge let13 let8)
  let let47 := (binrel% LE.le skoY let3)
  let let48 := (binrel% HMul.hMul let4 skoX)
  let let49 := (binrel% HMul.hMul pi let31)
  let let50 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let51 := (binrel% LT.lt let4 let8)
  let let52 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let6))
  let let53 := (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let48 let2))
  let let54 := (binrel% GE.ge let53 let52)
  let let55 := (Not let54)
  let let56 := (binrel% LT.lt let53 let52)
  let let57 := (Not let23)
  let let58 := (binrel% HMul.hMul pi let32)
  let let59 := (binrel% LE.le skoY let58)
  let let60 := (binrel% LE.le let43 pi)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le pi let50)
  let let63 := (Not let62)
  let let64 := (And let47 (And let63 (And let61 (And let59 (And let29 let57)))))
  let let65 := (And let28 let19)
  let let66 := (Not let38)
  let let67 := (Not let26)
  let let68 := (And let46 (And let67 (And let66 (And let34 let65))))
  let let69 := (Eq let64 let68)
  let let70 := (Not let28)
  let let71 := (Not let46)
  let let72 := (Or let71 (Or let70 let15))
  let let73 := (Or let71 (Or let70 let20))
  let let74 := (Not let42)
  let let75 := (binrel% LE.le let2 let6)
  let let76 := (And let9 let47)
  let let77 := (binrel% LE.le let48 let5)
  let let78 := (And let51 let44)
  let let79 := (binrel% LT.lt let45 let5)
  let let80 := (And let51 let42)
(Eq let2 skoY) → (Eq let5 let3) → (Eq let6 let3) → (Eq let7 let3) → (Eq let9 True) → (Eq let10 True) → (Eq let18 let15) → (Eq let22 let21) → (Eq let23 let15) → (Eq let24 True) → (Eq let27 let26) → (Eq let29 let28) → (Eq let32 let31) → (Eq let33 False) → let22 → (Eq let36 let34) → (Eq let39 let38) → (Eq let40 let3) → (Eq let42 let41) → (Eq let43 let37) → (Eq let44 let28) → (Eq let45 let14) → (Eq let47 let46) → (Eq let48 let16) → (Eq let49 let35) → (Eq let50 let25) → (Eq let51 True) → (Eq let56 let55) → (Eq let64 let64) → let64 → False :=
  let let1 := (Rat.ofInt 1)
  let let2 := (binrel% HMul.hMul let1 skoY)
  let let3 := (Rat.ofInt 0)
  let let4 := (Neg.neg let1)
  let let5 := (binrel% HMul.hMul let4 let3)
  let let6 := (binrel% HMul.hMul let1 let3)
  let let7 := (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let3 let3))
  let let8 := (Int.ofNat 0)
  let let9 := (binrel% GT.gt let1 let8)
  let let10 := (binrel% GE.ge let3 let3)
  let let11 := (Int.ofNat 1)
  let let12 := (Neg.neg let11)
  let let13 := (binrel% HMul.hMul let12 skoY)
  let let14 := (binrel% HAdd.hAdd let13 skoX)
  let let15 := (binrel% GE.ge let14 let8)
  let let16 := (binrel% HMul.hMul let12 skoX)
  let let17 := (binrel% HAdd.hAdd skoY let16)
  let let18 := (binrel% LE.le let17 let3)
  let let19 := (Not let15)
  let let20 := (Not let19)
  let let21 := (Eq let15 let20)
  let let22 := (Eq let20 let15)
  let let23 := (binrel% LE.le skoY skoX)
  let let24 := (Eq let15 let15)
  let let25 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let26 := (binrel% GE.ge (binrel% HMul.hMul let12 pi) (Neg.neg let25))
  let let27 := (binrel% LE.le pi let25)
  let let28 := (binrel% GE.ge skoX let8)
  let let29 := (binrel% LE.le let3 skoX)
  let let30 := (Int.ofNat 2)
  let let31 := (binrel% HDiv.hDiv let11 let30)
  let let32 := (binrel% HDiv.hDiv let1 (Rat.ofInt 2))
  let let33 := (Not True)
  let let34 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let30) skoY)) let8)
  let let35 := (binrel% HMul.hMul let31 pi)
  let let36 := (binrel% LE.le skoY let35)
  let let37 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let38 := (binrel% GE.ge pi let37)
  let let39 := (binrel% LE.le let37 pi)
  let let40 := (binrel% HAdd.hAdd let14 (binrel% HAdd.hAdd let16 skoY))
  let let41 := (Not let18)
  let let42 := (binrel% GT.gt let17 let3)
  let let43 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let44 := (binrel% GE.ge skoX let3)
  let let45 := (binrel% HMul.hMul let4 let17)
  let let46 := (binrel% GE.ge let13 let8)
  let let47 := (binrel% LE.le skoY let3)
  let let48 := (binrel% HMul.hMul let4 skoX)
  let let49 := (binrel% HMul.hMul pi let31)
  let let50 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let51 := (binrel% LT.lt let4 let8)
  let let52 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let6))
  let let53 := (binrel% HAdd.hAdd let45 (binrel% HAdd.hAdd let48 let2))
  let let54 := (binrel% GE.ge let53 let52)
  let let55 := (Not let54)
  let let56 := (binrel% LT.lt let53 let52)
  let let57 := (Not let23)
  let let58 := (binrel% HMul.hMul pi let32)
  let let59 := (binrel% LE.le skoY let58)
  let let60 := (binrel% LE.le let43 pi)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le pi let50)
  let let63 := (Not let62)
  let let64 := (And let47 (And let63 (And let61 (And let59 (And let29 let57)))))
  let let65 := (And let28 let19)
  let let66 := (Not let38)
  let let67 := (Not let26)
  let let68 := (And let46 (And let67 (And let66 (And let34 let65))))
  let let69 := (Eq let64 let68)
  let let70 := (Not let28)
  let let71 := (Not let46)
  let let72 := (Or let71 (Or let70 let15))
  let let73 := (Or let71 (Or let70 let20))
  let let74 := (Not let42)
  let let75 := (binrel% LE.le let2 let6)
  let let76 := (And let9 let47)
  let let77 := (binrel% LE.le let48 let5)
  let let78 := (And let51 let44)
  let let79 := (binrel% LT.lt let45 let5)
  let let80 := (And let51 let42)
fun lean_r0 : (Eq let2 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let5 let3) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let6 let3) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let7 let3) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let9 True) => -- EVALUATE
fun lean_r5 : (Eq let10 True) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let18 let15) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let22 let21) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let23 let15) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let24 True) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let32 let31) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let33 False) => -- THEORY_REWRITE_BOOL
fun lean_r14 : let22 => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let36 let34) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let40 let3) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let43 let37) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let44 let28) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let45 let14) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let47 let46) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let48 let16) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let49 let35) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let50 let25) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let51 True) => -- EVALUATE
fun lean_r27 : (Eq let56 let55) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let64 let64) => -- THEORY_REWRITE_BOOL
fun lean_a29 : let64 => by
have lean_s0 : (Or let71 (Or let70 (Or let20 False))) :=
  (scope (fun lean_a30 : let46 =>
    (scope (fun lean_a31 : let28 =>
      (scope (fun lean_a32 : let19 =>
        have lean_s0 : (Eq let41 let19) := by timed flipCongrArg lean_r6 [Not]
        have lean_s1 : (Eq let42 let19) := by timed Eq.trans lean_r18 lean_s0
        have lean_s2 : (Eq let19 let42) := by timed Eq.symm lean_s1
        have lean_s3 : let42 := by timed eqResolve lean_a32 lean_s2
        have lean_s4 : (Or let74 False) :=
          (scope (fun lean_a33 : let42 =>
            have lean_s4 : let51 := by timed trueElim lean_r26
            have lean_s5 : let80 := by timed And.intro lean_s4 lean_a33
            have lean_s6 : (Implies let80 let79) := by arithMulNeg [let17, let3, let4], 2
            have lean_s7 : let79 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let28 let44) := by timed Eq.symm lean_r20
            have lean_s9 : let44 := by timed eqResolve lean_a31 lean_s8
            have lean_s10 : let78 := by timed And.intro lean_s4 lean_s9
            have lean_s11 : (Implies let78 let77) := by arithMulNeg [skoX, let3, let4], 3
            have lean_s12 : let77 := by timed modusPonens lean_s10 lean_s11
            have lean_s13 : let9 := by timed trueElim lean_r4
            have lean_s14 : (Eq let46 let47) := by timed Eq.symm lean_r22
            have lean_s15 : let47 := by timed eqResolve lean_a30 lean_s14
            have lean_s16 : let76 := by timed And.intro lean_s13 lean_s15
            have lean_s17 : (Implies let76 let75) := by arithMulPos [skoY, let3, let1], 1
            have lean_s18 : let75 := by timed modusPonens lean_s16 lean_s17
            have lean_s19 : let56 := by sumBounds [lean_s7, lean_s12, lean_s18]
            let lean_s20 := by timed congrHAdd lean_r23 lean_r0
            have lean_s21 : (Eq let53 let40) := by timed congrHAdd lean_r21 lean_s20
            have lean_s22 : (Eq let53 let3) := by timed Eq.trans lean_s21 lean_r17
            let lean_s23 := by timed flipCongrArg lean_s22 [GE.ge]
            let lean_s24 := by timed congrHAdd lean_r1 lean_r2
            have lean_s25 : (Eq let52 let7) := by timed congrHAdd lean_r1 lean_s24
            have lean_s26 : (Eq let52 let3) := by timed Eq.trans lean_s25 lean_r3
            have lean_s27 : (Eq let54 let10) := by timed congr lean_s23 lean_s26
            have lean_s28 : (Eq let54 True) := by timed Eq.trans lean_s27 lean_r5
            have lean_s29 : (Eq let55 let33) := by timed flipCongrArg lean_s28 [Not]
            have lean_s30 : (Eq let55 False) := by timed Eq.trans lean_s29 lean_r13
            have lean_s31 : (Eq let56 False) := by timed Eq.trans lean_r27 lean_s30
            show False from by timed eqResolve lean_s19 lean_s31
          ))
        have lean_s5 : let74 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let74 let20) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let74 let15) := by timed Eq.trans lean_s6 lean_r14
        have lean_s8 : (Eq let15 let18) := by timed Eq.symm lean_r6
        have lean_s9 : (Eq let74 let18) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let18 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let15 let74) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let18 let74) := by timed Eq.trans lean_r6 lean_s11
        have lean_s13 : let74 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let46 let65)) := by liftOrNToNeg lean_s0
have lean_s2 : let73 := by timed flipNotAnd lean_s1 [let46, let28, let19]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let71 let71) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let70 let70) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : let24 := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [Eq]
have lean_s10 : (Eq let21 let24) := by timed congr lean_s9 lean_r14
have lean_s11 : (Eq let21 True) := by timed Eq.trans lean_s10 lean_r9
have lean_s12 : (Eq let22 True) := by timed Eq.trans lean_r7 lean_s11
have lean_s13 : let22 := by timed trueElim lean_s12
let lean_s14 := by timed congr lean_s7 lean_s13
have lean_s15 : (Eq let73 let72) := by timed congr lean_s5 lean_s14
have lean_s16 : let72 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let15 (Or let71 let70)) := by permutateOr lean_s16, [2, 0, 1], (- 1)
have lean_s18 : (Eq And And) := by timed rfl
let lean_s19 := by timed congr lean_s18 lean_r22
have lean_s20 : (Eq pi pi) := by timed rfl
let lean_s21 := by timed flipCongrArg lean_s20 [LE.le]
have lean_s22 : (Eq let62 let27) := by timed congr lean_s21 lean_r25
have lean_s23 : (Eq let62 let26) := by timed Eq.trans lean_s22 lean_r10
have lean_s24 : (Eq let63 let67) := by timed flipCongrArg lean_s23 [Not]
let lean_s25 := by timed congr lean_s18 lean_s24
let lean_s26 := by timed flipCongrArg lean_r19 [LE.le]
have lean_s27 : (Eq let60 let39) := by timed congr lean_s26 lean_s20
have lean_s28 : (Eq let60 let38) := by timed Eq.trans lean_s27 lean_r16
have lean_s29 : (Eq let61 let66) := by timed flipCongrArg lean_s28 [Not]
let lean_s30 := by timed congr lean_s18 lean_s29
have lean_s31 : (Eq skoY skoY) := by timed rfl
let lean_s32 := by timed flipCongrArg lean_s31 [LE.le]
let lean_s33 := by timed flipCongrArg lean_s20 [HMul.hMul]
have lean_s34 : (Eq let58 let49) := by timed congr lean_s33 lean_r12
have lean_s35 : (Eq let58 let35) := by timed Eq.trans lean_s34 lean_r24
have lean_s36 : (Eq let59 let36) := by timed congr lean_s32 lean_s35
have lean_s37 : (Eq let59 let34) := by timed Eq.trans lean_s36 lean_r15
let lean_s38 := by timed congr lean_s18 lean_s37
let lean_s39 := by timed congr lean_s18 lean_r11
have lean_s40 : (Eq let57 let19) := by timed flipCongrArg lean_r8 [Not]
let lean_s41 := by timed congr lean_s39 lean_s40
let lean_s42 := by timed congr lean_s38 lean_s41
let lean_s43 := by timed congr lean_s30 lean_s42
let lean_s44 := by timed congr lean_s25 lean_s43
have lean_s45 : let69 := by timed congr lean_s19 lean_s44
have lean_s46 : let69 := by timed Eq.trans lean_r28 lean_s45
have lean_s47 : let68 := by timed eqResolve lean_a29 lean_s46
have lean_s48 : let19 := by andElim lean_s47, 5
let lean_s49 := by R1 lean_s17, lean_s48, let15, [(- 1), 0]
have lean_s50 : let28 := by andElim lean_s47, 4
let lean_s51 := by R2 lean_s49, lean_s50, let28, [(- 1), 0]
have lean_s52 : let46 := by andElim lean_s47, 0
exact (show False from by R2 lean_s51, lean_s52, let46, [0, 0])


