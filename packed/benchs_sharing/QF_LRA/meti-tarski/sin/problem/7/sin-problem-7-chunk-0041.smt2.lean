open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 skoX)
  let let5 := (binrel% GE.ge let4 let1)
  let let6 := (Rat.ofInt 0)
  let let7 := (binrel% LE.le skoX let6)
  let let8 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let9 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let10 := (Int.ofNat 2)
  let let11 := (binrel% HDiv.hDiv let2 let10)
  let let12 := (binrel% HMul.hMul let11 pi)
  let let13 := (binrel% HMul.hMul pi let11)
  let let14 := (binrel% HMul.hMul let3 skoY)
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (binrel% LE.le skoY let6)
  let let17 := (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let6 let6))
  let let18 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let19 := (binrel% GE.ge pi let18)
  let let20 := (binrel% LE.le let18 pi)
  let let21 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let10) skoY)) let1)
  let let22 := (binrel% LE.le skoY let12)
  let let23 := (Rat.ofInt 1)
  let let24 := (Neg.neg let23)
  let let25 := (binrel% HMul.hMul let24 let6)
  let let26 := (binrel% HDiv.hDiv let23 (Rat.ofInt 2))
  let let27 := (binrel% GE.ge skoX let1)
  let let28 := (binrel% LE.le let6 skoX)
  let let29 := (binrel% LE.le skoY skoX)
  let let30 := (Not let29)
  let let31 := (binrel% HMul.hMul pi let26)
  let let32 := (binrel% LE.le skoY let31)
  let let33 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let34 := (binrel% LE.le let33 pi)
  let let35 := (Not let34)
  let let36 := (binrel% LE.le pi let9)
  let let37 := (Not let36)
  let let38 := (And let7 (And let16 (And let37 (And let35 (And let32 (And let28 let30))))))
  let let39 := (binrel% GE.ge (binrel% HMul.hMul let3 pi) (Neg.neg let8))
  let let40 := (binrel% LE.le pi let8)
  let let41 := (binrel% HAdd.hAdd let14 skoX)
  let let42 := (binrel% GE.ge let41 let1)
  let let43 := (Eq let42 let42)
  let let44 := (binrel% LT.lt let24 let1)
  let let45 := (Not let42)
  let let46 := (Not let45)
  let let47 := (Eq let46 let42)
  let let48 := (binrel% HAdd.hAdd skoY let4)
  let let49 := (binrel% LE.le let48 let6)
  let let50 := (Not let49)
  let let51 := (binrel% GT.gt let48 let6)
  let let52 := (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let4 skoY))
  let let53 := (Not True)
  let let54 := (binrel% GE.ge let6 let6)
  let let55 := (Eq let42 let46)
  let let56 := (binrel% GT.gt let23 let1)
  let let57 := (binrel% HMul.hMul let23 let6)
  let let58 := (binrel% HMul.hMul let23 skoY)
  let let59 := (binrel% HMul.hMul let24 skoX)
  let let60 := (binrel% HMul.hMul let24 let48)
  let let61 := (binrel% GE.ge skoX let6)
  let let62 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let25 let57))
  let let63 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let59 let58))
  let let64 := (binrel% GE.ge let63 let62)
  let let65 := (Not let64)
  let let66 := (binrel% LT.lt let63 let62)
  let let67 := (And let27 let45)
  let let68 := (Not let19)
  let let69 := (Not let39)
  let let70 := (And let5 (And let15 (And let69 (And let68 (And let21 let67)))))
  let let71 := (Eq let38 let70)
  let let72 := (Not let27)
  let let73 := (Not let15)
  let let74 := (Or let73 (Or let72 let42))
  let let75 := (Or let73 (Or let72 let46))
  let let76 := (Not let51)
  let let77 := (binrel% LE.le let58 let57)
  let let78 := (And let56 let16)
  let let79 := (binrel% LE.le let59 let25)
  let let80 := (And let44 let61)
  let let81 := (binrel% LT.lt let60 let25)
  let let82 := (And let44 let51)
(Eq let7 let5) → (Eq let9 let8) → (Eq let13 let12) → (Eq let16 let15) → (Eq let17 let6) → (Eq let20 let19) → (Eq let22 let21) → (Eq let25 let6) → (Eq let26 let11) → (Eq let28 let27) → (Eq let38 let38) → (Eq let40 let39) → (Eq let43 True) → (Eq let44 True) → (Eq let29 let42) → let47 → (Eq let49 let42) → (Eq let51 let50) → (Eq let52 let6) → (Eq let53 False) → (Eq let54 True) → (Eq let33 let18) → (Eq let47 let55) → (Eq let56 True) → (Eq let57 let6) → (Eq let58 skoY) → (Eq let59 let4) → (Eq let60 let41) → (Eq let61 let27) → (Eq let66 let65) → let38 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 skoX)
  let let5 := (binrel% GE.ge let4 let1)
  let let6 := (Rat.ofInt 0)
  let let7 := (binrel% LE.le skoX let6)
  let let8 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let9 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let10 := (Int.ofNat 2)
  let let11 := (binrel% HDiv.hDiv let2 let10)
  let let12 := (binrel% HMul.hMul let11 pi)
  let let13 := (binrel% HMul.hMul pi let11)
  let let14 := (binrel% HMul.hMul let3 skoY)
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (binrel% LE.le skoY let6)
  let let17 := (binrel% HAdd.hAdd let6 (binrel% HAdd.hAdd let6 let6))
  let let18 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let19 := (binrel% GE.ge pi let18)
  let let20 := (binrel% LE.le let18 pi)
  let let21 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let10) skoY)) let1)
  let let22 := (binrel% LE.le skoY let12)
  let let23 := (Rat.ofInt 1)
  let let24 := (Neg.neg let23)
  let let25 := (binrel% HMul.hMul let24 let6)
  let let26 := (binrel% HDiv.hDiv let23 (Rat.ofInt 2))
  let let27 := (binrel% GE.ge skoX let1)
  let let28 := (binrel% LE.le let6 skoX)
  let let29 := (binrel% LE.le skoY skoX)
  let let30 := (Not let29)
  let let31 := (binrel% HMul.hMul pi let26)
  let let32 := (binrel% LE.le skoY let31)
  let let33 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let34 := (binrel% LE.le let33 pi)
  let let35 := (Not let34)
  let let36 := (binrel% LE.le pi let9)
  let let37 := (Not let36)
  let let38 := (And let7 (And let16 (And let37 (And let35 (And let32 (And let28 let30))))))
  let let39 := (binrel% GE.ge (binrel% HMul.hMul let3 pi) (Neg.neg let8))
  let let40 := (binrel% LE.le pi let8)
  let let41 := (binrel% HAdd.hAdd let14 skoX)
  let let42 := (binrel% GE.ge let41 let1)
  let let43 := (Eq let42 let42)
  let let44 := (binrel% LT.lt let24 let1)
  let let45 := (Not let42)
  let let46 := (Not let45)
  let let47 := (Eq let46 let42)
  let let48 := (binrel% HAdd.hAdd skoY let4)
  let let49 := (binrel% LE.le let48 let6)
  let let50 := (Not let49)
  let let51 := (binrel% GT.gt let48 let6)
  let let52 := (binrel% HAdd.hAdd let41 (binrel% HAdd.hAdd let4 skoY))
  let let53 := (Not True)
  let let54 := (binrel% GE.ge let6 let6)
  let let55 := (Eq let42 let46)
  let let56 := (binrel% GT.gt let23 let1)
  let let57 := (binrel% HMul.hMul let23 let6)
  let let58 := (binrel% HMul.hMul let23 skoY)
  let let59 := (binrel% HMul.hMul let24 skoX)
  let let60 := (binrel% HMul.hMul let24 let48)
  let let61 := (binrel% GE.ge skoX let6)
  let let62 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let25 let57))
  let let63 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let59 let58))
  let let64 := (binrel% GE.ge let63 let62)
  let let65 := (Not let64)
  let let66 := (binrel% LT.lt let63 let62)
  let let67 := (And let27 let45)
  let let68 := (Not let19)
  let let69 := (Not let39)
  let let70 := (And let5 (And let15 (And let69 (And let68 (And let21 let67)))))
  let let71 := (Eq let38 let70)
  let let72 := (Not let27)
  let let73 := (Not let15)
  let let74 := (Or let73 (Or let72 let42))
  let let75 := (Or let73 (Or let72 let46))
  let let76 := (Not let51)
  let let77 := (binrel% LE.le let58 let57)
  let let78 := (And let56 let16)
  let let79 := (binrel% LE.le let59 let25)
  let let80 := (And let44 let61)
  let let81 := (binrel% LT.lt let60 let25)
  let let82 := (And let44 let51)
fun lean_r0 : (Eq let7 let5) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let9 let8) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let16 let15) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let17 let6) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let20 let19) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let25 let6) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let26 let11) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let38 let38) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let40 let39) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let43 True) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let44 True) => -- EVALUATE
fun lean_r14 : (Eq let29 let42) => -- THEORY_REWRITE_ARITH
fun lean_r15 : let47 => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let49 let42) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let52 let6) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let53 False) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let54 True) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let33 let18) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let47 let55) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let56 True) => -- EVALUATE
fun lean_r24 : (Eq let57 let6) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let58 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let59 let4) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let60 let41) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let61 let27) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let66 let65) => -- THEORY_REWRITE_ARITH
fun lean_a30 : let38 => by
have lean_s0 : (Or let73 (Or let72 (Or let46 False))) :=
  (scope (fun lean_a31 : let15 =>
    (scope (fun lean_a32 : let27 =>
      (scope (fun lean_a33 : let45 =>
        have lean_s0 : (Eq let50 let45) := by timed flipCongrArg lean_r16 [Not]
        have lean_s1 : (Eq let51 let45) := by timed Eq.trans lean_r17 lean_s0
        have lean_s2 : (Eq let45 let51) := by timed Eq.symm lean_s1
        have lean_s3 : let51 := by timed eqResolve lean_a33 lean_s2
        have lean_s4 : (Or let76 False) :=
          (scope (fun lean_a34 : let51 =>
            have lean_s4 : let44 := by timed trueElim lean_r13
            have lean_s5 : let82 := by timed And.intro lean_s4 lean_a34
            have lean_s6 : (Implies let82 let81) := by arithMulNeg [let48, let6, let24], 2
            have lean_s7 : let81 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let27 let61) := by timed Eq.symm lean_r28
            have lean_s9 : let61 := by timed eqResolve lean_a32 lean_s8
            have lean_s10 : let80 := by timed And.intro lean_s4 lean_s9
            have lean_s11 : (Implies let80 let79) := by arithMulNeg [skoX, let6, let24], 3
            have lean_s12 : let79 := by timed modusPonens lean_s10 lean_s11
            have lean_s13 : let56 := by timed trueElim lean_r23
            have lean_s14 : (Eq let15 let16) := by timed Eq.symm lean_r3
            have lean_s15 : let16 := by timed eqResolve lean_a31 lean_s14
            have lean_s16 : let78 := by timed And.intro lean_s13 lean_s15
            have lean_s17 : (Implies let78 let77) := by arithMulPos [skoY, let6, let23], 1
            have lean_s18 : let77 := by timed modusPonens lean_s16 lean_s17
            have lean_s19 : let66 := by sumBounds [lean_s7, lean_s12, lean_s18]
            let lean_s20 := by timed congrHAdd lean_r26 lean_r25
            have lean_s21 : (Eq let63 let52) := by timed congrHAdd lean_r27 lean_s20
            have lean_s22 : (Eq let63 let6) := by timed Eq.trans lean_s21 lean_r18
            let lean_s23 := by timed flipCongrArg lean_s22 [GE.ge]
            let lean_s24 := by timed congrHAdd lean_r7 lean_r24
            have lean_s25 : (Eq let62 let17) := by timed congrHAdd lean_r7 lean_s24
            have lean_s26 : (Eq let62 let6) := by timed Eq.trans lean_s25 lean_r4
            have lean_s27 : (Eq let64 let54) := by timed congr lean_s23 lean_s26
            have lean_s28 : (Eq let64 True) := by timed Eq.trans lean_s27 lean_r20
            have lean_s29 : (Eq let65 let53) := by timed flipCongrArg lean_s28 [Not]
            have lean_s30 : (Eq let65 False) := by timed Eq.trans lean_s29 lean_r19
            have lean_s31 : (Eq let66 False) := by timed Eq.trans lean_r29 lean_s30
            show False from by timed eqResolve lean_s19 lean_s31
          ))
        have lean_s5 : let76 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let76 let46) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let76 let42) := by timed Eq.trans lean_s6 lean_r15
        have lean_s8 : (Eq let42 let49) := by timed Eq.symm lean_r16
        have lean_s9 : (Eq let76 let49) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let49 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let42 let76) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let49 let76) := by timed Eq.trans lean_r16 lean_s11
        have lean_s13 : let76 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let15 let67)) := by liftOrNToNeg lean_s0
have lean_s2 : let75 := by timed flipNotAnd lean_s1 [let15, let27, let45]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let73 let73) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let72 let72) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : let43 := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [Eq]
have lean_s10 : (Eq let55 let43) := by timed congr lean_s9 lean_r15
have lean_s11 : (Eq let55 True) := by timed Eq.trans lean_s10 lean_r12
have lean_s12 : (Eq let47 True) := by timed Eq.trans lean_r22 lean_s11
have lean_s13 : let47 := by timed trueElim lean_s12
let lean_s14 := by timed congr lean_s7 lean_s13
have lean_s15 : (Eq let75 let74) := by timed congr lean_s5 lean_s14
have lean_s16 : let74 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let42 (Or let73 let72)) := by permutateOr lean_s16, [2, 0, 1], (- 1)
have lean_s18 : (Eq And And) := by timed rfl
let lean_s19 := by timed congr lean_s18 lean_r0
let lean_s20 := by timed congr lean_s18 lean_r3
have lean_s21 : (Eq pi pi) := by timed rfl
let lean_s22 := by timed flipCongrArg lean_s21 [LE.le]
have lean_s23 : (Eq let36 let40) := by timed congr lean_s22 lean_r1
have lean_s24 : (Eq let36 let39) := by timed Eq.trans lean_s23 lean_r11
have lean_s25 : (Eq let37 let69) := by timed flipCongrArg lean_s24 [Not]
let lean_s26 := by timed congr lean_s18 lean_s25
let lean_s27 := by timed flipCongrArg lean_r21 [LE.le]
have lean_s28 : (Eq let34 let20) := by timed congr lean_s27 lean_s21
have lean_s29 : (Eq let34 let19) := by timed Eq.trans lean_s28 lean_r5
have lean_s30 : (Eq let35 let68) := by timed flipCongrArg lean_s29 [Not]
let lean_s31 := by timed congr lean_s18 lean_s30
have lean_s32 : (Eq skoY skoY) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
let lean_s34 := by timed flipCongrArg lean_s21 [HMul.hMul]
have lean_s35 : (Eq let31 let13) := by timed congr lean_s34 lean_r8
have lean_s36 : (Eq let31 let12) := by timed Eq.trans lean_s35 lean_r2
have lean_s37 : (Eq let32 let22) := by timed congr lean_s33 lean_s36
have lean_s38 : (Eq let32 let21) := by timed Eq.trans lean_s37 lean_r6
let lean_s39 := by timed congr lean_s18 lean_s38
let lean_s40 := by timed congr lean_s18 lean_r9
have lean_s41 : (Eq let30 let45) := by timed flipCongrArg lean_r14 [Not]
let lean_s42 := by timed congr lean_s40 lean_s41
let lean_s43 := by timed congr lean_s39 lean_s42
let lean_s44 := by timed congr lean_s31 lean_s43
let lean_s45 := by timed congr lean_s26 lean_s44
let lean_s46 := by timed congr lean_s20 lean_s45
have lean_s47 : let71 := by timed congr lean_s19 lean_s46
have lean_s48 : let71 := by timed Eq.trans lean_r10 lean_s47
have lean_s49 : let70 := by timed eqResolve lean_a30 lean_s48
have lean_s50 : let45 := by andElim lean_s49, 6
let lean_s51 := by R1 lean_s17, lean_s50, let42, [(- 1), 0]
have lean_s52 : let27 := by andElim lean_s49, 5
let lean_s53 := by R2 lean_s51, lean_s52, let27, [(- 1), 0]
have lean_s54 : let15 := by andElim lean_s49, 1
exact (show False from by R2 lean_s53, lean_s54, let15, [0, 0])


