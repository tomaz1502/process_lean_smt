open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Int.ofNat 1)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% HMul.hMul let6 skoY)
  let let8 := (binrel% HAdd.hAdd let7 skoX)
  let let9 := (binrel% GE.ge let8 let1)
  let let10 := (Eq let9 let9)
  let let11 := (binrel% GE.ge skoX let1)
  let let12 := (Rat.ofInt 0)
  let let13 := (binrel% LE.le let12 skoX)
  let let14 := (binrel% GE.ge let12 let12)
  let let15 := (binrel% GT.gt let2 let1)
  let let16 := (binrel% HDiv.hDiv let5 (Int.ofNat 2))
  let let17 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let18 := (Not let9)
  let let19 := (Not let18)
  let let20 := (Eq let9 let19)
  let let21 := (Eq let19 let9)
  let let22 := (binrel% HMul.hMul let16 pi)
  let let23 := (binrel% HMul.hMul pi let16)
  let let24 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let25 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let26 := (binrel% GE.ge let7 let1)
  let let27 := (binrel% LE.le skoY let12)
  let let28 := (binrel% GE.ge pi let24)
  let let29 := (binrel% LE.le let24 pi)
  let let30 := (binrel% LE.le skoY skoX)
  let let31 := (binrel% HMul.hMul let6 skoX)
  let let32 := (binrel% HAdd.hAdd skoY let31)
  let let33 := (binrel% LE.le let32 let12)
  let let34 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let35 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let36 := (binrel% GE.ge (binrel% HAdd.hAdd let7 let22) let1)
  let let37 := (binrel% LE.le skoY let22)
  let let38 := (binrel% GE.ge skoY let1)
  let let39 := (binrel% LE.le let12 skoY)
  let let40 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let12 let12))
  let let41 := (binrel% LE.le pi let35)
  let let42 := (Not let41)
  let let43 := (binrel% LE.le let25 pi)
  let let44 := (Not let43)
  let let45 := (binrel% HMul.hMul pi let17)
  let let46 := (binrel% LE.le skoY let45)
  let let47 := (Not let30)
  let let48 := (Not let39)
  let let49 := (And let27 (And let48 (And let47 (And let13 (And let46 (And let44 let42))))))
  let let50 := (binrel% GE.ge (binrel% HMul.hMul let6 pi) (Neg.neg let34))
  let let51 := (binrel% LE.le pi let34)
  let let52 := (Not True)
  let let53 := (binrel% HMul.hMul let3 let12)
  let let54 := (Not let33)
  let let55 := (binrel% GT.gt let32 let12)
  let let56 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let31 skoY))
  let let57 := (binrel% HMul.hMul let2 let12)
  let let58 := (binrel% HMul.hMul let2 skoY)
  let let59 := (binrel% HMul.hMul let3 skoX)
  let let60 := (binrel% HMul.hMul let3 let32)
  let let61 := (binrel% GE.ge skoX let12)
  let let62 := (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let53 let57))
  let let63 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let59 let58))
  let let64 := (binrel% GE.ge let63 let62)
  let let65 := (Not let64)
  let let66 := (binrel% LT.lt let63 let62)
  let let67 := (Not let50)
  let let68 := (Not let28)
  let let69 := (Not let38)
  let let70 := (And let26 (And let69 (And let18 (And let11 (And let36 (And let68 let67))))))
  let let71 := (Eq let49 let70)
  let let72 := (Not let11)
  let let73 := (Not let26)
  let let74 := (Or let73 (Or let72 let9))
  let let75 := (Or let73 (Or let72 let19))
  let let76 := (Not let55)
  let let77 := (binrel% LE.le let58 let57)
  let let78 := (And let15 let27)
  let let79 := (binrel% LE.le let59 let53)
  let let80 := (And let4 let61)
  let let81 := (binrel% LT.lt let60 let53)
  let let82 := (And let4 let55)
(Eq let4 True) → (Eq let10 True) → (Eq let13 let11) → (Eq let14 True) → (Eq let15 True) → (Eq let17 let16) → (Eq let21 let20) → (Eq let23 let22) → (Eq let25 let24) → (Eq let27 let26) → (Eq let29 let28) → (Eq let30 let9) → (Eq let33 let9) → (Eq let35 let34) → (Eq let37 let36) → (Eq let39 let38) → (Eq let40 let12) → (Eq let49 let49) → (Eq let51 let50) → (Eq let52 False) → let21 → (Eq let53 let12) → (Eq let55 let54) → (Eq let56 let12) → (Eq let57 let12) → (Eq let58 skoY) → (Eq let59 let31) → (Eq let60 let8) → (Eq let61 let11) → (Eq let66 let65) → let49 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Int.ofNat 1)
  let let6 := (Neg.neg let5)
  let let7 := (binrel% HMul.hMul let6 skoY)
  let let8 := (binrel% HAdd.hAdd let7 skoX)
  let let9 := (binrel% GE.ge let8 let1)
  let let10 := (Eq let9 let9)
  let let11 := (binrel% GE.ge skoX let1)
  let let12 := (Rat.ofInt 0)
  let let13 := (binrel% LE.le let12 skoX)
  let let14 := (binrel% GE.ge let12 let12)
  let let15 := (binrel% GT.gt let2 let1)
  let let16 := (binrel% HDiv.hDiv let5 (Int.ofNat 2))
  let let17 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let18 := (Not let9)
  let let19 := (Not let18)
  let let20 := (Eq let9 let19)
  let let21 := (Eq let19 let9)
  let let22 := (binrel% HMul.hMul let16 pi)
  let let23 := (binrel% HMul.hMul pi let16)
  let let24 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let25 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let26 := (binrel% GE.ge let7 let1)
  let let27 := (binrel% LE.le skoY let12)
  let let28 := (binrel% GE.ge pi let24)
  let let29 := (binrel% LE.le let24 pi)
  let let30 := (binrel% LE.le skoY skoX)
  let let31 := (binrel% HMul.hMul let6 skoX)
  let let32 := (binrel% HAdd.hAdd skoY let31)
  let let33 := (binrel% LE.le let32 let12)
  let let34 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let35 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let36 := (binrel% GE.ge (binrel% HAdd.hAdd let7 let22) let1)
  let let37 := (binrel% LE.le skoY let22)
  let let38 := (binrel% GE.ge skoY let1)
  let let39 := (binrel% LE.le let12 skoY)
  let let40 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let12 let12))
  let let41 := (binrel% LE.le pi let35)
  let let42 := (Not let41)
  let let43 := (binrel% LE.le let25 pi)
  let let44 := (Not let43)
  let let45 := (binrel% HMul.hMul pi let17)
  let let46 := (binrel% LE.le skoY let45)
  let let47 := (Not let30)
  let let48 := (Not let39)
  let let49 := (And let27 (And let48 (And let47 (And let13 (And let46 (And let44 let42))))))
  let let50 := (binrel% GE.ge (binrel% HMul.hMul let6 pi) (Neg.neg let34))
  let let51 := (binrel% LE.le pi let34)
  let let52 := (Not True)
  let let53 := (binrel% HMul.hMul let3 let12)
  let let54 := (Not let33)
  let let55 := (binrel% GT.gt let32 let12)
  let let56 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let31 skoY))
  let let57 := (binrel% HMul.hMul let2 let12)
  let let58 := (binrel% HMul.hMul let2 skoY)
  let let59 := (binrel% HMul.hMul let3 skoX)
  let let60 := (binrel% HMul.hMul let3 let32)
  let let61 := (binrel% GE.ge skoX let12)
  let let62 := (binrel% HAdd.hAdd let53 (binrel% HAdd.hAdd let53 let57))
  let let63 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let59 let58))
  let let64 := (binrel% GE.ge let63 let62)
  let let65 := (Not let64)
  let let66 := (binrel% LT.lt let63 let62)
  let let67 := (Not let50)
  let let68 := (Not let28)
  let let69 := (Not let38)
  let let70 := (And let26 (And let69 (And let18 (And let11 (And let36 (And let68 let67))))))
  let let71 := (Eq let49 let70)
  let let72 := (Not let11)
  let let73 := (Not let26)
  let let74 := (Or let73 (Or let72 let9))
  let let75 := (Or let73 (Or let72 let19))
  let let76 := (Not let55)
  let let77 := (binrel% LE.le let58 let57)
  let let78 := (And let15 let27)
  let let79 := (binrel% LE.le let59 let53)
  let let80 := (And let4 let61)
  let let81 := (binrel% LT.lt let60 let53)
  let let82 := (And let4 let55)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let10 True) => -- THEORY_REWRITE_BOOL
fun lean_r2 : (Eq let13 let11) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let14 True) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let15 True) => -- EVALUATE
fun lean_r5 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let21 let20) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let30 let9) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let33 let9) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let40 let12) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let49 let49) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let52 False) => -- THEORY_REWRITE_BOOL
fun lean_r20 : let21 => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let53 let12) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let56 let12) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let57 let12) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let58 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let59 let31) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let60 let8) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let61 let11) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let66 let65) => -- THEORY_REWRITE_ARITH
fun lean_a30 : let49 => by
have lean_s0 : (Or let73 (Or let72 (Or let19 False))) :=
  (scope (fun lean_a31 : let26 =>
    (scope (fun lean_a32 : let11 =>
      (scope (fun lean_a33 : let18 =>
        have lean_s0 : (Eq let54 let18) := by timed flipCongrArg lean_r12 [Not]
        have lean_s1 : (Eq let55 let18) := by timed Eq.trans lean_r22 lean_s0
        have lean_s2 : (Eq let18 let55) := by timed Eq.symm lean_s1
        have lean_s3 : let55 := by timed eqResolve lean_a33 lean_s2
        have lean_s4 : (Or let76 False) :=
          (scope (fun lean_a34 : let55 =>
            have lean_s4 : let4 := by timed trueElim lean_r0
            have lean_s5 : let82 := by timed And.intro lean_s4 lean_a34
            have lean_s6 : (Implies let82 let81) := by arithMulNeg [let32, let12, let3], 2
            have lean_s7 : let81 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let11 let61) := by timed Eq.symm lean_r28
            have lean_s9 : let61 := by timed eqResolve lean_a32 lean_s8
            have lean_s10 : let80 := by timed And.intro lean_s4 lean_s9
            have lean_s11 : (Implies let80 let79) := by arithMulNeg [skoX, let12, let3], 3
            have lean_s12 : let79 := by timed modusPonens lean_s10 lean_s11
            have lean_s13 : let15 := by timed trueElim lean_r4
            have lean_s14 : (Eq let26 let27) := by timed Eq.symm lean_r9
            have lean_s15 : let27 := by timed eqResolve lean_a31 lean_s14
            have lean_s16 : let78 := by timed And.intro lean_s13 lean_s15
            have lean_s17 : (Implies let78 let77) := by arithMulPos [skoY, let12, let2], 1
            have lean_s18 : let77 := by timed modusPonens lean_s16 lean_s17
            have lean_s19 : let66 := by sumBounds [lean_s7, lean_s12, lean_s18]
            let lean_s20 := by timed congrHAdd lean_r26 lean_r25
            have lean_s21 : (Eq let63 let56) := by timed congrHAdd lean_r27 lean_s20
            have lean_s22 : (Eq let63 let12) := by timed Eq.trans lean_s21 lean_r23
            let lean_s23 := by timed flipCongrArg lean_s22 [GE.ge]
            let lean_s24 := by timed congrHAdd lean_r21 lean_r24
            have lean_s25 : (Eq let62 let40) := by timed congrHAdd lean_r21 lean_s24
            have lean_s26 : (Eq let62 let12) := by timed Eq.trans lean_s25 lean_r16
            have lean_s27 : (Eq let64 let14) := by timed congr lean_s23 lean_s26
            have lean_s28 : (Eq let64 True) := by timed Eq.trans lean_s27 lean_r3
            have lean_s29 : (Eq let65 let52) := by timed flipCongrArg lean_s28 [Not]
            have lean_s30 : (Eq let65 False) := by timed Eq.trans lean_s29 lean_r19
            have lean_s31 : (Eq let66 False) := by timed Eq.trans lean_r29 lean_s30
            show False from by timed eqResolve lean_s19 lean_s31
          ))
        have lean_s5 : let76 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let76 let19) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let76 let9) := by timed Eq.trans lean_s6 lean_r20
        have lean_s8 : (Eq let9 let33) := by timed Eq.symm lean_r12
        have lean_s9 : (Eq let76 let33) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let33 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let9 let76) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let33 let76) := by timed Eq.trans lean_r12 lean_s11
        have lean_s13 : let76 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let26 (And let11 let18))) := by liftOrNToNeg lean_s0
have lean_s2 : let75 := by timed flipNotAnd lean_s1 [let26, let11, let18]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let73 let73) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : (Eq let72 let72) := by timed rfl
let lean_s7 := by timed congr lean_s3 lean_s6
have lean_s8 : let10 := by timed rfl
let lean_s9 := by timed flipCongrArg lean_s8 [Eq]
have lean_s10 : (Eq let20 let10) := by timed congr lean_s9 lean_r20
have lean_s11 : (Eq let20 True) := by timed Eq.trans lean_s10 lean_r1
have lean_s12 : (Eq let21 True) := by timed Eq.trans lean_r6 lean_s11
have lean_s13 : let21 := by timed trueElim lean_s12
let lean_s14 := by timed congr lean_s7 lean_s13
have lean_s15 : (Eq let75 let74) := by timed congr lean_s5 lean_s14
have lean_s16 : let74 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let9 (Or let73 let72)) := by permutateOr lean_s16, [2, 0, 1], (- 1)
have lean_s18 : (Eq And And) := by timed rfl
let lean_s19 := by timed congr lean_s18 lean_r9
have lean_s20 : (Eq let48 let69) := by timed flipCongrArg lean_r15 [Not]
let lean_s21 := by timed congr lean_s18 lean_s20
have lean_s22 : (Eq let47 let18) := by timed flipCongrArg lean_r11 [Not]
let lean_s23 := by timed congr lean_s18 lean_s22
let lean_s24 := by timed congr lean_s18 lean_r2
have lean_s25 : (Eq skoY skoY) := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [LE.le]
have lean_s27 : (Eq pi pi) := by timed rfl
let lean_s28 := by timed flipCongrArg lean_s27 [HMul.hMul]
have lean_s29 : (Eq let45 let23) := by timed congr lean_s28 lean_r5
have lean_s30 : (Eq let45 let22) := by timed Eq.trans lean_s29 lean_r7
have lean_s31 : (Eq let46 let37) := by timed congr lean_s26 lean_s30
have lean_s32 : (Eq let46 let36) := by timed Eq.trans lean_s31 lean_r14
let lean_s33 := by timed congr lean_s18 lean_s32
let lean_s34 := by timed flipCongrArg lean_r8 [LE.le]
have lean_s35 : (Eq let43 let29) := by timed congr lean_s34 lean_s27
have lean_s36 : (Eq let43 let28) := by timed Eq.trans lean_s35 lean_r10
have lean_s37 : (Eq let44 let68) := by timed flipCongrArg lean_s36 [Not]
let lean_s38 := by timed congr lean_s18 lean_s37
let lean_s39 := by timed flipCongrArg lean_s27 [LE.le]
have lean_s40 : (Eq let41 let51) := by timed congr lean_s39 lean_r13
have lean_s41 : (Eq let41 let50) := by timed Eq.trans lean_s40 lean_r18
have lean_s42 : (Eq let42 let67) := by timed flipCongrArg lean_s41 [Not]
let lean_s43 := by timed congr lean_s38 lean_s42
let lean_s44 := by timed congr lean_s33 lean_s43
let lean_s45 := by timed congr lean_s24 lean_s44
let lean_s46 := by timed congr lean_s23 lean_s45
let lean_s47 := by timed congr lean_s21 lean_s46
have lean_s48 : let71 := by timed congr lean_s19 lean_s47
have lean_s49 : let71 := by timed Eq.trans lean_r17 lean_s48
have lean_s50 : let70 := by timed eqResolve lean_a30 lean_s49
have lean_s51 : let11 := by andElim lean_s50, 3
let lean_s52 := by R2 lean_s17, lean_s51, let11, [(- 1), 0]
have lean_s53 : let18 := by andElim lean_s50, 2
let lean_s54 := by R1 lean_s52, lean_s53, let9, [(- 1), 0]
have lean_s55 : let26 := by andElim lean_s50, 0
exact (show False from by R2 lean_s54, lean_s55, let26, [0, 0])


