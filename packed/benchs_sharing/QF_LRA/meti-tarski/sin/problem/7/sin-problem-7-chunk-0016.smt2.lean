open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoY : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% GE.ge skoY let5)
  let let7 := (Not let6)
  let let8 := (binrel% LT.lt skoY let5)
  let let9 := (binrel% GT.gt let2 let1)
  let let10 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let11 := (binrel% LE.le skoY skoX)
  let let12 := (Not let11)
  let let13 := (binrel% LE.le let5 skoX)
  let let14 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let15 := (binrel% HMul.hMul pi let14)
  let let16 := (binrel% LE.le skoY let15)
  let let17 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let18 := (binrel% LE.le let17 pi)
  let let19 := (Not let18)
  let let20 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let21 := (binrel% LE.le pi let20)
  let let22 := (Not let21)
  let let23 := (binrel% LE.le let5 skoY)
  let let24 := (Not let23)
  let let25 := (And let24 (And let22 (And let19 (And let16 (And let13 let12)))))
  let let26 := (Int.ofNat 2)
  let let27 := (Int.ofNat 1)
  let let28 := (binrel% HDiv.hDiv let27 let26)
  let let29 := (binrel% GE.ge skoY let1)
  let let30 := (binrel% GE.ge skoX let1)
  let let31 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let32 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let33 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let26) skoY)) let1)
  let let34 := (binrel% HMul.hMul let28 pi)
  let let35 := (binrel% LE.le skoY let34)
  let let36 := (Neg.neg let27)
  let let37 := (binrel% HMul.hMul let36 skoX)
  let let38 := (binrel% HMul.hMul let3 skoX)
  let let39 := (binrel% HAdd.hAdd (binrel% HMul.hMul let36 skoY) skoX)
  let let40 := (binrel% GE.ge let39 let1)
  let let41 := (binrel% GE.ge (binrel% HMul.hMul let36 pi) (Neg.neg let31))
  let let42 := (binrel% LE.le pi let31)
  let let43 := (binrel% HMul.hMul let2 let5)
  let let44 := (Not True)
  let let45 := (Eq let29 let29)
  let let46 := (binrel% GE.ge skoX let5)
  let let47 := (binrel% HMul.hMul let3 let5)
  let let48 := (Not let29)
  let let49 := (Not let48)
  let let50 := (Eq let49 let29)
  let let51 := (binrel% HMul.hMul pi let28)
  let let52 := (binrel% HAdd.hAdd skoY let37)
  let let53 := (binrel% LE.le let52 let5)
  let let54 := (Not let53)
  let let55 := (binrel% GT.gt let52 let5)
  let let56 := (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let37 skoY))
  let let57 := (Eq let29 let49)
  let let58 := (binrel% GE.ge let5 let5)
  let let59 := (Eq let40 let40)
  let let60 := (binrel% HMul.hMul let2 skoY)
  let let61 := (Not let40)
  let let62 := (Not let61)
  let let63 := (Eq let62 let40)
  let let64 := (binrel% GE.ge pi let32)
  let let65 := (binrel% LE.le let32 pi)
  let let66 := (binrel% HMul.hMul let3 let52)
  let let67 := (Eq let40 let62)
  let let68 := (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd let47 let43))
  let let69 := (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let38 let60))
  let let70 := (binrel% GE.ge let69 let68)
  let let71 := (Not let70)
  let let72 := (binrel% LT.lt let69 let68)
  let let73 := (And let30 let61)
  let let74 := (Not let64)
  let let75 := (Not let41)
  let let76 := (And let48 (And let75 (And let74 (And let33 let73))))
  let let77 := (Eq let25 let76)
  let let78 := (Not let30)
  let let79 := (Or let29 (Or let78 let40))
  let let80 := (Or let49 (Or let78 let62))
  let let81 := (Not let55)
  let let82 := (binrel% LT.lt let60 let43)
  let let83 := (And let9 let8)
  let let84 := (binrel% LE.le let38 let47)
  let let85 := (And let4 let46)
  let let86 := (binrel% LT.lt let66 let47)
  let let87 := (And let4 let55)
(Eq let4 True) → (Eq let8 let7) → (Eq let9 True) → (Eq let10 let5) → (Eq let25 let25) → (Eq let14 let28) → (Eq let6 let29) → (Eq let13 let30) → (Eq let20 let31) → (Eq let17 let32) → (Eq let35 let33) → (Eq let38 let37) → (Eq let11 let40) → (Eq let42 let41) → (Eq let43 let5) → (Eq let44 False) → (Eq let45 True) → (Eq let46 let30) → (Eq let47 let5) → let50 → (Eq let51 let34) → (Eq let53 let40) → (Eq let55 let54) → (Eq let56 let5) → (Eq let23 let29) → (Eq let50 let57) → (Eq let58 True) → (Eq let59 True) → (Eq let60 skoY) → let63 → (Eq let65 let64) → (Eq let66 let39) → (Eq let63 let67) → (Eq let72 let71) → let25 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% GE.ge skoY let5)
  let let7 := (Not let6)
  let let8 := (binrel% LT.lt skoY let5)
  let let9 := (binrel% GT.gt let2 let1)
  let let10 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let11 := (binrel% LE.le skoY skoX)
  let let12 := (Not let11)
  let let13 := (binrel% LE.le let5 skoX)
  let let14 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let15 := (binrel% HMul.hMul pi let14)
  let let16 := (binrel% LE.le skoY let15)
  let let17 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let18 := (binrel% LE.le let17 pi)
  let let19 := (Not let18)
  let let20 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let21 := (binrel% LE.le pi let20)
  let let22 := (Not let21)
  let let23 := (binrel% LE.le let5 skoY)
  let let24 := (Not let23)
  let let25 := (And let24 (And let22 (And let19 (And let16 (And let13 let12)))))
  let let26 := (Int.ofNat 2)
  let let27 := (Int.ofNat 1)
  let let28 := (binrel% HDiv.hDiv let27 let26)
  let let29 := (binrel% GE.ge skoY let1)
  let let30 := (binrel% GE.ge skoX let1)
  let let31 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let32 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let33 := (binrel% GE.ge (binrel% HAdd.hAdd pi (binrel% HMul.hMul (Neg.neg let26) skoY)) let1)
  let let34 := (binrel% HMul.hMul let28 pi)
  let let35 := (binrel% LE.le skoY let34)
  let let36 := (Neg.neg let27)
  let let37 := (binrel% HMul.hMul let36 skoX)
  let let38 := (binrel% HMul.hMul let3 skoX)
  let let39 := (binrel% HAdd.hAdd (binrel% HMul.hMul let36 skoY) skoX)
  let let40 := (binrel% GE.ge let39 let1)
  let let41 := (binrel% GE.ge (binrel% HMul.hMul let36 pi) (Neg.neg let31))
  let let42 := (binrel% LE.le pi let31)
  let let43 := (binrel% HMul.hMul let2 let5)
  let let44 := (Not True)
  let let45 := (Eq let29 let29)
  let let46 := (binrel% GE.ge skoX let5)
  let let47 := (binrel% HMul.hMul let3 let5)
  let let48 := (Not let29)
  let let49 := (Not let48)
  let let50 := (Eq let49 let29)
  let let51 := (binrel% HMul.hMul pi let28)
  let let52 := (binrel% HAdd.hAdd skoY let37)
  let let53 := (binrel% LE.le let52 let5)
  let let54 := (Not let53)
  let let55 := (binrel% GT.gt let52 let5)
  let let56 := (binrel% HAdd.hAdd let39 (binrel% HAdd.hAdd let37 skoY))
  let let57 := (Eq let29 let49)
  let let58 := (binrel% GE.ge let5 let5)
  let let59 := (Eq let40 let40)
  let let60 := (binrel% HMul.hMul let2 skoY)
  let let61 := (Not let40)
  let let62 := (Not let61)
  let let63 := (Eq let62 let40)
  let let64 := (binrel% GE.ge pi let32)
  let let65 := (binrel% LE.le let32 pi)
  let let66 := (binrel% HMul.hMul let3 let52)
  let let67 := (Eq let40 let62)
  let let68 := (binrel% HAdd.hAdd let47 (binrel% HAdd.hAdd let47 let43))
  let let69 := (binrel% HAdd.hAdd let66 (binrel% HAdd.hAdd let38 let60))
  let let70 := (binrel% GE.ge let69 let68)
  let let71 := (Not let70)
  let let72 := (binrel% LT.lt let69 let68)
  let let73 := (And let30 let61)
  let let74 := (Not let64)
  let let75 := (Not let41)
  let let76 := (And let48 (And let75 (And let74 (And let33 let73))))
  let let77 := (Eq let25 let76)
  let let78 := (Not let30)
  let let79 := (Or let29 (Or let78 let40))
  let let80 := (Or let49 (Or let78 let62))
  let let81 := (Not let55)
  let let82 := (binrel% LT.lt let60 let43)
  let let83 := (And let9 let8)
  let let84 := (binrel% LE.le let38 let47)
  let let85 := (And let4 let46)
  let let86 := (binrel% LT.lt let66 let47)
  let let87 := (And let4 let55)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let9 True) => -- EVALUATE
fun lean_r3 : (Eq let10 let5) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let25 let25) => -- THEORY_REWRITE_BOOL
fun lean_r5 : (Eq let14 let28) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let6 let29) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let13 let30) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let20 let31) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let17 let32) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let35 let33) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let38 let37) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let11 let40) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let43 let5) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let44 False) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let45 True) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let46 let30) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let47 let5) => -- THEORY_REWRITE_ARITH
fun lean_r19 : let50 => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let51 let34) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let53 let40) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let56 let5) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let23 let29) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let50 let57) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let58 True) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let59 True) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let60 skoY) => -- THEORY_REWRITE_ARITH
fun lean_r29 : let63 => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let65 let64) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let66 let39) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let63 let67) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let72 let71) => -- THEORY_REWRITE_ARITH
fun lean_a34 : let25 => by
have lean_s0 : (Or let49 (Or let78 (Or let62 False))) :=
  (scope (fun lean_a35 : let48 =>
    (scope (fun lean_a36 : let30 =>
      (scope (fun lean_a37 : let61 =>
        have lean_s0 : (Eq let54 let61) := by timed flipCongrArg lean_r21 [Not]
        have lean_s1 : (Eq let55 let61) := by timed Eq.trans lean_r22 lean_s0
        have lean_s2 : (Eq let61 let55) := by timed Eq.symm lean_s1
        have lean_s3 : let55 := by timed eqResolve lean_a37 lean_s2
        have lean_s4 : (Or let81 False) :=
          (scope (fun lean_a38 : let55 =>
            have lean_s4 : let4 := by timed trueElim lean_r0
            have lean_s5 : let87 := by timed And.intro lean_s4 lean_a38
            have lean_s6 : (Implies let87 let86) := by arithMulNeg [let52, let5, let3], 2
            have lean_s7 : let86 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let30 let46) := by timed Eq.symm lean_r17
            have lean_s9 : let46 := by timed eqResolve lean_a36 lean_s8
            have lean_s10 : let85 := by timed And.intro lean_s4 lean_s9
            have lean_s11 : (Implies let85 let84) := by arithMulNeg [skoX, let5, let3], 3
            have lean_s12 : let84 := by timed modusPonens lean_s10 lean_s11
            have lean_s13 : let9 := by timed trueElim lean_r2
            have lean_s14 : (Eq let7 let48) := by timed flipCongrArg lean_r6 [Not]
            have lean_s15 : (Eq let8 let48) := by timed Eq.trans lean_r1 lean_s14
            have lean_s16 : (Eq let48 let8) := by timed Eq.symm lean_s15
            have lean_s17 : let8 := by timed eqResolve lean_a35 lean_s16
            have lean_s18 : let83 := by timed And.intro lean_s13 lean_s17
            have lean_s19 : (Implies let83 let82) := by arithMulPos [skoY, let5, let2], 0
            have lean_s20 : let82 := by timed modusPonens lean_s18 lean_s19
            have lean_s21 : let72 := by sumBounds [lean_s7, lean_s12, lean_s20]
            let lean_s22 := by timed congrHAdd lean_r11 lean_r28
            have lean_s23 : (Eq let69 let56) := by timed congrHAdd lean_r31 lean_s22
            have lean_s24 : (Eq let69 let5) := by timed Eq.trans lean_s23 lean_r23
            let lean_s25 := by timed flipCongrArg lean_s24 [GE.ge]
            let lean_s26 := by timed congrHAdd lean_r18 lean_r14
            have lean_s27 : (Eq let68 let10) := by timed congrHAdd lean_r18 lean_s26
            have lean_s28 : (Eq let68 let5) := by timed Eq.trans lean_s27 lean_r3
            have lean_s29 : (Eq let70 let58) := by timed congr lean_s25 lean_s28
            have lean_s30 : (Eq let70 True) := by timed Eq.trans lean_s29 lean_r26
            have lean_s31 : (Eq let71 let44) := by timed flipCongrArg lean_s30 [Not]
            have lean_s32 : (Eq let71 False) := by timed Eq.trans lean_s31 lean_r15
            have lean_s33 : (Eq let72 False) := by timed Eq.trans lean_r33 lean_s32
            show False from by timed eqResolve lean_s21 lean_s33
          ))
        have lean_s5 : let81 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let81 let62) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let81 let40) := by timed Eq.trans lean_s6 lean_r29
        have lean_s8 : (Eq let40 let53) := by timed Eq.symm lean_r21
        have lean_s9 : (Eq let81 let53) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let53 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let40 let81) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let53 let81) := by timed Eq.trans lean_r21 lean_s11
        have lean_s13 : let81 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let48 let73)) := by liftOrNToNeg lean_s0
have lean_s2 : let80 := by timed flipNotAnd lean_s1 [let48, let30, let61]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let45 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let57 let45) := by timed congr lean_s5 lean_r19
have lean_s7 : (Eq let57 True) := by timed Eq.trans lean_s6 lean_r16
have lean_s8 : (Eq let50 True) := by timed Eq.trans lean_r25 lean_s7
have lean_s9 : let50 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : (Eq let78 let78) := by timed rfl
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let59 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let67 let59) := by timed congr lean_s14 lean_r29
have lean_s16 : (Eq let67 True) := by timed Eq.trans lean_s15 lean_r27
have lean_s17 : (Eq let63 True) := by timed Eq.trans lean_r32 lean_s16
have lean_s18 : let63 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s12 lean_s18
have lean_s20 : (Eq let80 let79) := by timed congr lean_s10 lean_s19
have lean_s21 : let79 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let29 (Or let40 let78)) := by permutateOr lean_s21, [0, 2, 1], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
have lean_s24 : (Eq let24 let48) := by timed flipCongrArg lean_r24 [Not]
let lean_s25 := by timed congr lean_s23 lean_s24
have lean_s26 : (Eq pi pi) := by timed rfl
let lean_s27 := by timed flipCongrArg lean_s26 [LE.le]
have lean_s28 : (Eq let21 let42) := by timed congr lean_s27 lean_r8
have lean_s29 : (Eq let21 let41) := by timed Eq.trans lean_s28 lean_r13
have lean_s30 : (Eq let22 let75) := by timed flipCongrArg lean_s29 [Not]
let lean_s31 := by timed congr lean_s23 lean_s30
let lean_s32 := by timed flipCongrArg lean_r9 [LE.le]
have lean_s33 : (Eq let18 let65) := by timed congr lean_s32 lean_s26
have lean_s34 : (Eq let18 let64) := by timed Eq.trans lean_s33 lean_r30
have lean_s35 : (Eq let19 let74) := by timed flipCongrArg lean_s34 [Not]
let lean_s36 := by timed congr lean_s23 lean_s35
have lean_s37 : (Eq skoY skoY) := by timed rfl
let lean_s38 := by timed flipCongrArg lean_s37 [LE.le]
let lean_s39 := by timed flipCongrArg lean_s26 [HMul.hMul]
have lean_s40 : (Eq let15 let51) := by timed congr lean_s39 lean_r5
have lean_s41 : (Eq let15 let34) := by timed Eq.trans lean_s40 lean_r20
have lean_s42 : (Eq let16 let35) := by timed congr lean_s38 lean_s41
have lean_s43 : (Eq let16 let33) := by timed Eq.trans lean_s42 lean_r10
let lean_s44 := by timed congr lean_s23 lean_s43
let lean_s45 := by timed congr lean_s23 lean_r7
have lean_s46 : (Eq let12 let61) := by timed flipCongrArg lean_r12 [Not]
let lean_s47 := by timed congr lean_s45 lean_s46
let lean_s48 := by timed congr lean_s44 lean_s47
let lean_s49 := by timed congr lean_s36 lean_s48
let lean_s50 := by timed congr lean_s31 lean_s49
have lean_s51 : let77 := by timed congr lean_s25 lean_s50
have lean_s52 : let77 := by timed Eq.trans lean_r4 lean_s51
have lean_s53 : let76 := by timed eqResolve lean_a34 lean_s52
have lean_s54 : let61 := by andElim lean_s53, 5
let lean_s55 := by R1 lean_s22, lean_s54, let40, [(- 1), 0]
have lean_s56 : let30 := by andElim lean_s53, 4
let lean_s57 := by R2 lean_s55, lean_s56, let30, [(- 1), 0]
have lean_s58 : let48 := by andElim lean_s53, 0
exact (show False from by R1 lean_s57, lean_s58, let29, [0, 0])


