open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoA : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoA : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (binrel% GT.gt let2 let1)
  let let10 := (binrel% LE.le skoA skoX)
  let let11 := (Not let10)
  let let12 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let13 := (binrel% HMul.hMul pi let12)
  let let14 := (binrel% LE.le let13 skoA)
  let let15 := (Not let14)
  let let16 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let17 := (binrel% LE.le let16 pi)
  let let18 := (Not let17)
  let let19 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let20 := (binrel% LE.le pi let19)
  let let21 := (Not let20)
  let let22 := (binrel% LE.le skoA let5)
  let let23 := (And let22 (And let21 (And let18 (And let15 (And let7 let11)))))
  let let24 := (Int.ofNat 1)
  let let25 := (Neg.neg let24)
  let let26 := (binrel% HMul.hMul let25 skoX)
  let let27 := (binrel% GE.ge let26 let1)
  let let28 := (binrel% HMul.hMul let25 skoA)
  let let29 := (binrel% HAdd.hAdd let28 skoX)
  let let30 := (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let26 skoA))
  let let31 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let32 := (binrel% HMul.hMul let2 let5)
  let let33 := (binrel% HMul.hMul let3 let5)
  let let34 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let33 let32))
  let let35 := (binrel% HMul.hMul let2 skoA)
  let let36 := (binrel% HMul.hMul let3 skoX)
  let let37 := (binrel% HAdd.hAdd skoA let26)
  let let38 := (binrel% HMul.hMul let3 let37)
  let let39 := (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let36 let35))
  let let40 := (binrel% GE.ge let39 let34)
  let let41 := (Not let40)
  let let42 := (binrel% LT.lt let39 let34)
  let let43 := (binrel% GE.ge pi let31)
  let let44 := (binrel% LE.le let31 pi)
  let let45 := (binrel% GE.ge let29 let1)
  let let46 := (Not let45)
  let let47 := (Not let46)
  let let48 := (Eq let47 let45)
  let let49 := (Int.ofNat 2)
  let let50 := (binrel% HMul.hMul let25 pi)
  let let51 := (binrel% GE.ge (binrel% HAdd.hAdd let50 (binrel% HMul.hMul let49 skoA)) let1)
  let let52 := (binrel% HDiv.hDiv let24 let49)
  let let53 := (binrel% HMul.hMul let52 pi)
  let let54 := (binrel% LE.le let53 skoA)
  let let55 := (Eq let45 let45)
  let let56 := (binrel% LE.le let37 let5)
  let let57 := (Not let56)
  let let58 := (binrel% GT.gt let37 let5)
  let let59 := (binrel% HMul.hMul pi let52)
  let let60 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let61 := (Not let27)
  let let62 := (Not let61)
  let let63 := (Eq let62 let27)
  let let64 := (binrel% GE.ge let28 let1)
  let let65 := (Eq let45 let47)
  let let66 := (binrel% GE.ge let50 (Neg.neg let60))
  let let67 := (binrel% LE.le pi let60)
  let let68 := (Eq let27 let27)
  let let69 := (Not True)
  let let70 := (Eq let27 let62)
  let let71 := (binrel% GE.ge let5 let5)
  let let72 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let73 := (And let61 let46)
  let let74 := (Not let51)
  let let75 := (Not let43)
  let let76 := (Not let66)
  let let77 := (And let64 (And let76 (And let75 (And let74 let73))))
  let let78 := (Eq let23 let77)
  let let79 := (Not let64)
  let let80 := (Or let79 (Or let27 let45))
  let let81 := (Or let79 (Or let62 let47))
  let let82 := (Not let58)
  let let83 := (binrel% LE.le let35 let32)
  let let84 := (And let9 let22)
  let let85 := (binrel% LT.lt let36 let33)
  let let86 := (And let4 let8)
  let let87 := (binrel% LT.lt let38 let33)
  let let88 := (And let4 let58)
(Eq let4 True) → (Eq let8 let7) → (Eq let9 True) → (Eq let23 let23) → (Eq let6 let27) → (Eq let30 let5) → (Eq let16 let31) → (Eq let42 let41) → (Eq let44 let43) → let48 → (Eq let54 let51) → (Eq let55 True) → (Eq let12 let52) → (Eq let58 let57) → (Eq let59 let53) → (Eq let19 let60) → let63 → (Eq let56 let45) → (Eq let22 let64) → (Eq let10 let45) → (Eq let48 let65) → (Eq let33 let5) → (Eq let67 let66) → (Eq let68 True) → (Eq let69 False) → (Eq let63 let70) → (Eq let71 True) → (Eq let72 let5) → (Eq let32 let5) → (Eq let35 skoA) → (Eq let36 let26) → (Eq let38 let29) → let23 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (binrel% GT.gt let2 let1)
  let let10 := (binrel% LE.le skoA skoX)
  let let11 := (Not let10)
  let let12 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let13 := (binrel% HMul.hMul pi let12)
  let let14 := (binrel% LE.le let13 skoA)
  let let15 := (Not let14)
  let let16 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let17 := (binrel% LE.le let16 pi)
  let let18 := (Not let17)
  let let19 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let20 := (binrel% LE.le pi let19)
  let let21 := (Not let20)
  let let22 := (binrel% LE.le skoA let5)
  let let23 := (And let22 (And let21 (And let18 (And let15 (And let7 let11)))))
  let let24 := (Int.ofNat 1)
  let let25 := (Neg.neg let24)
  let let26 := (binrel% HMul.hMul let25 skoX)
  let let27 := (binrel% GE.ge let26 let1)
  let let28 := (binrel% HMul.hMul let25 skoA)
  let let29 := (binrel% HAdd.hAdd let28 skoX)
  let let30 := (binrel% HAdd.hAdd let29 (binrel% HAdd.hAdd let26 skoA))
  let let31 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let32 := (binrel% HMul.hMul let2 let5)
  let let33 := (binrel% HMul.hMul let3 let5)
  let let34 := (binrel% HAdd.hAdd let33 (binrel% HAdd.hAdd let33 let32))
  let let35 := (binrel% HMul.hMul let2 skoA)
  let let36 := (binrel% HMul.hMul let3 skoX)
  let let37 := (binrel% HAdd.hAdd skoA let26)
  let let38 := (binrel% HMul.hMul let3 let37)
  let let39 := (binrel% HAdd.hAdd let38 (binrel% HAdd.hAdd let36 let35))
  let let40 := (binrel% GE.ge let39 let34)
  let let41 := (Not let40)
  let let42 := (binrel% LT.lt let39 let34)
  let let43 := (binrel% GE.ge pi let31)
  let let44 := (binrel% LE.le let31 pi)
  let let45 := (binrel% GE.ge let29 let1)
  let let46 := (Not let45)
  let let47 := (Not let46)
  let let48 := (Eq let47 let45)
  let let49 := (Int.ofNat 2)
  let let50 := (binrel% HMul.hMul let25 pi)
  let let51 := (binrel% GE.ge (binrel% HAdd.hAdd let50 (binrel% HMul.hMul let49 skoA)) let1)
  let let52 := (binrel% HDiv.hDiv let24 let49)
  let let53 := (binrel% HMul.hMul let52 pi)
  let let54 := (binrel% LE.le let53 skoA)
  let let55 := (Eq let45 let45)
  let let56 := (binrel% LE.le let37 let5)
  let let57 := (Not let56)
  let let58 := (binrel% GT.gt let37 let5)
  let let59 := (binrel% HMul.hMul pi let52)
  let let60 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let61 := (Not let27)
  let let62 := (Not let61)
  let let63 := (Eq let62 let27)
  let let64 := (binrel% GE.ge let28 let1)
  let let65 := (Eq let45 let47)
  let let66 := (binrel% GE.ge let50 (Neg.neg let60))
  let let67 := (binrel% LE.le pi let60)
  let let68 := (Eq let27 let27)
  let let69 := (Not True)
  let let70 := (Eq let27 let62)
  let let71 := (binrel% GE.ge let5 let5)
  let let72 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let73 := (And let61 let46)
  let let74 := (Not let51)
  let let75 := (Not let43)
  let let76 := (Not let66)
  let let77 := (And let64 (And let76 (And let75 (And let74 let73))))
  let let78 := (Eq let23 let77)
  let let79 := (Not let64)
  let let80 := (Or let79 (Or let27 let45))
  let let81 := (Or let79 (Or let62 let47))
  let let82 := (Not let58)
  let let83 := (binrel% LE.le let35 let32)
  let let84 := (And let9 let22)
  let let85 := (binrel% LT.lt let36 let33)
  let let86 := (And let4 let8)
  let let87 := (binrel% LT.lt let38 let33)
  let let88 := (And let4 let58)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let9 True) => -- EVALUATE
fun lean_r3 : (Eq let23 let23) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq let6 let27) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let30 let5) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let16 let31) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let42 let41) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r9 : let48 => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let54 let51) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let55 True) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let12 let52) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let58 let57) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let59 let53) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let19 let60) => -- THEORY_REWRITE_ARITH
fun lean_r16 : let63 => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let56 let45) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let22 let64) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let10 let45) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let48 let65) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let33 let5) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let67 let66) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let68 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let69 False) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let63 let70) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let71 True) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let72 let5) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let32 let5) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let35 skoA) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let36 let26) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let38 let29) => -- THEORY_REWRITE_ARITH
fun lean_a32 : let23 => by
have lean_s0 : (Or let79 (Or let62 (Or let47 False))) :=
  (scope (fun lean_a33 : let64 =>
    (scope (fun lean_a34 : let61 =>
      (scope (fun lean_a35 : let46 =>
        have lean_s0 : (Eq let57 let46) := by timed flipCongrArg lean_r17 [Not]
        have lean_s1 : (Eq let58 let46) := by timed Eq.trans lean_r13 lean_s0
        have lean_s2 : (Eq let46 let58) := by timed Eq.symm lean_s1
        have lean_s3 : let58 := by timed eqResolve lean_a35 lean_s2
        have lean_s4 : (Or let82 False) :=
          (scope (fun lean_a36 : let58 =>
            have lean_s4 : let4 := by timed trueElim lean_r0
            have lean_s5 : let88 := by timed And.intro lean_s4 lean_a36
            have lean_s6 : (Implies let88 let87) := by arithMulNeg [let37, let5, let3], 2
            have lean_s7 : let87 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let7 let61) := by timed flipCongrArg lean_r4 [Not]
            have lean_s9 : (Eq let8 let61) := by timed Eq.trans lean_r1 lean_s8
            have lean_s10 : (Eq let61 let8) := by timed Eq.symm lean_s9
            have lean_s11 : let8 := by timed eqResolve lean_a34 lean_s10
            have lean_s12 : let86 := by timed And.intro lean_s4 lean_s11
            have lean_s13 : (Implies let86 let85) := by arithMulNeg [skoX, let5, let3], 2
            have lean_s14 : let85 := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : let9 := by timed trueElim lean_r2
            have lean_s16 : (Eq let64 let22) := by timed Eq.symm lean_r18
            have lean_s17 : let22 := by timed eqResolve lean_a33 lean_s16
            have lean_s18 : let84 := by timed And.intro lean_s15 lean_s17
            have lean_s19 : (Implies let84 let83) := by arithMulPos [skoA, let5, let2], 1
            have lean_s20 : let83 := by timed modusPonens lean_s18 lean_s19
            have lean_s21 : let42 := by sumBounds [lean_s7, lean_s14, lean_s20]
            let lean_s22 := by timed congrHAdd lean_r30 lean_r29
            have lean_s23 : (Eq let39 let30) := by timed congrHAdd lean_r31 lean_s22
            have lean_s24 : (Eq let39 let5) := by timed Eq.trans lean_s23 lean_r5
            let lean_s25 := by timed flipCongrArg lean_s24 [GE.ge]
            let lean_s26 := by timed congrHAdd lean_r21 lean_r28
            have lean_s27 : (Eq let34 let72) := by timed congrHAdd lean_r21 lean_s26
            have lean_s28 : (Eq let34 let5) := by timed Eq.trans lean_s27 lean_r27
            have lean_s29 : (Eq let40 let71) := by timed congr lean_s25 lean_s28
            have lean_s30 : (Eq let40 True) := by timed Eq.trans lean_s29 lean_r26
            have lean_s31 : (Eq let41 let69) := by timed flipCongrArg lean_s30 [Not]
            have lean_s32 : (Eq let41 False) := by timed Eq.trans lean_s31 lean_r24
            have lean_s33 : (Eq let42 False) := by timed Eq.trans lean_r7 lean_s32
            show False from by timed eqResolve lean_s21 lean_s33
          ))
        have lean_s5 : let82 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let82 let47) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let82 let45) := by timed Eq.trans lean_s6 lean_r9
        have lean_s8 : (Eq let45 let56) := by timed Eq.symm lean_r17
        have lean_s9 : (Eq let82 let56) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let56 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let45 let82) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let56 let82) := by timed Eq.trans lean_r17 lean_s11
        have lean_s13 : let82 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let64 let73)) := by liftOrNToNeg lean_s0
have lean_s2 : let81 := by timed flipNotAnd lean_s1 [let64, let61, let46]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let79 let79) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let68 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let70 let68) := by timed congr lean_s7 lean_r16
have lean_s9 : (Eq let70 True) := by timed Eq.trans lean_s8 lean_r23
have lean_s10 : (Eq let63 True) := by timed Eq.trans lean_r25 lean_s9
have lean_s11 : let63 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let55 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let65 let55) := by timed congr lean_s14 lean_r9
have lean_s16 : (Eq let65 True) := by timed Eq.trans lean_s15 lean_r11
have lean_s17 : (Eq let48 True) := by timed Eq.trans lean_r20 lean_s16
have lean_s18 : let48 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s12 lean_s18
have lean_s20 : (Eq let81 let80) := by timed congr lean_s5 lean_s19
have lean_s21 : let80 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let27 (Or let45 let79)) := by permutateOr lean_s21, [1, 2, 0], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
let lean_s24 := by timed congr lean_s23 lean_r18
have lean_s25 : (Eq pi pi) := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [LE.le]
have lean_s27 : (Eq let20 let67) := by timed congr lean_s26 lean_r15
have lean_s28 : (Eq let20 let66) := by timed Eq.trans lean_s27 lean_r22
have lean_s29 : (Eq let21 let76) := by timed flipCongrArg lean_s28 [Not]
let lean_s30 := by timed congr lean_s23 lean_s29
let lean_s31 := by timed flipCongrArg lean_r6 [LE.le]
have lean_s32 : (Eq let17 let44) := by timed congr lean_s31 lean_s25
have lean_s33 : (Eq let17 let43) := by timed Eq.trans lean_s32 lean_r8
have lean_s34 : (Eq let18 let75) := by timed flipCongrArg lean_s33 [Not]
let lean_s35 := by timed congr lean_s23 lean_s34
let lean_s36 := by timed flipCongrArg lean_s25 [HMul.hMul]
have lean_s37 : (Eq let13 let59) := by timed congr lean_s36 lean_r12
have lean_s38 : (Eq let13 let53) := by timed Eq.trans lean_s37 lean_r14
let lean_s39 := by timed flipCongrArg lean_s38 [LE.le]
have lean_s40 : (Eq skoA skoA) := by timed rfl
have lean_s41 : (Eq let14 let54) := by timed congr lean_s39 lean_s40
have lean_s42 : (Eq let14 let51) := by timed Eq.trans lean_s41 lean_r10
have lean_s43 : (Eq let15 let74) := by timed flipCongrArg lean_s42 [Not]
let lean_s44 := by timed congr lean_s23 lean_s43
have lean_s45 : (Eq let7 let61) := by timed flipCongrArg lean_r4 [Not]
let lean_s46 := by timed congr lean_s23 lean_s45
have lean_s47 : (Eq let11 let46) := by timed flipCongrArg lean_r19 [Not]
let lean_s48 := by timed congr lean_s46 lean_s47
let lean_s49 := by timed congr lean_s44 lean_s48
let lean_s50 := by timed congr lean_s35 lean_s49
let lean_s51 := by timed congr lean_s30 lean_s50
have lean_s52 : let78 := by timed congr lean_s24 lean_s51
have lean_s53 : let78 := by timed Eq.trans lean_r3 lean_s52
have lean_s54 : let77 := by timed eqResolve lean_a32 lean_s53
have lean_s55 : let46 := by andElim lean_s54, 5
let lean_s56 := by R1 lean_s22, lean_s55, let45, [(- 1), 0]
have lean_s57 : let61 := by andElim lean_s54, 4
let lean_s58 := by R1 lean_s56, lean_s57, let27, [(- 1), 0]
have lean_s59 : let64 := by andElim lean_s54, 0
exact (show False from by R2 lean_s58, lean_s59, let64, [0, 0])


