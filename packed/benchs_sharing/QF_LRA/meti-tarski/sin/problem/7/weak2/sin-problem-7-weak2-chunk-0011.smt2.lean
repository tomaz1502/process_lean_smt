open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoX : Rat}
variable {skoA : Rat}
variable {pi : Rat}
variable {skoA : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 skoA)
  let let5 := (binrel% HAdd.hAdd let4 skoX)
  let let6 := (binrel% GE.ge let5 let1)
  let let7 := (Not let6)
  let let8 := (binrel% HMul.hMul let3 skoX)
  let let9 := (binrel% GE.ge let8 let1)
  let let10 := (Not let9)
  let let11 := (And let10 let7)
  let let12 := (Int.ofNat 2)
  let let13 := (binrel% HMul.hMul let3 pi)
  let let14 := (binrel% GE.ge (binrel% HAdd.hAdd let13 (binrel% HMul.hMul let12 skoA)) let1)
  let let15 := (Not let14)
  let let16 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let17 := (binrel% GE.ge pi let16)
  let let18 := (Not let17)
  let let19 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let20 := (binrel% GE.ge let13 (Neg.neg let19))
  let let21 := (Not let20)
  let let22 := (And let21 (And let18 (And let15 let11)))
  let let23 := (binrel% GE.ge let4 let1)
  let let24 := (And let23 (And (Not (And let23 (binrel% GE.ge skoA let1))) let22))
  let let25 := (Rat.ofInt 0)
  let let26 := (Not (Eq skoA let25))
  let let27 := (And let23 (And let26 let22))
  let let28 := (binrel% LE.le skoX let25)
  let let29 := (Not let28)
  let let30 := (binrel% GT.gt skoX let25)
  let let31 := (Rat.ofInt 1)
  let let32 := (binrel% GT.gt let31 let1)
  let let33 := (binrel% LE.le skoA skoX)
  let let34 := (Not let33)
  let let35 := (binrel% HDiv.hDiv let31 (Rat.ofInt 2))
  let let36 := (binrel% HMul.hMul pi let35)
  let let37 := (binrel% LE.le let36 skoA)
  let let38 := (Not let37)
  let let39 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let40 := (binrel% LE.le let39 pi)
  let let41 := (Not let40)
  let let42 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let43 := (binrel% LE.le pi let42)
  let let44 := (Not let43)
  let let45 := (binrel% LE.le skoA let25)
  let let46 := (And let45 (And let26 (And let44 (And let41 (And let38 (And let29 let34))))))
  let let47 := (binrel% HAdd.hAdd skoA let8)
  let let48 := (binrel% LE.le let47 let25)
  let let49 := (Not let48)
  let let50 := (binrel% GT.gt let47 let25)
  let let51 := (Eq let6 let6)
  let let52 := (binrel% LE.le pi let19)
  let let53 := (Not let7)
  let let54 := (Eq let6 let53)
  let let55 := (Eq let53 let6)
  let let56 := (binrel% LE.le let16 pi)
  let let57 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let25 let25))
  let let58 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let8 skoA))
  let let59 := (binrel% HDiv.hDiv let2 let12)
  let let60 := (binrel% HMul.hMul let59 pi)
  let let61 := (binrel% HMul.hMul pi let59)
  let let62 := (Not let10)
  let let63 := (Eq let62 let9)
  let let64 := (Neg.neg let31)
  let let65 := (binrel% LT.lt let64 let1)
  let let66 := (binrel% LE.le let60 skoA)
  let let67 := (binrel% HMul.hMul let64 let47)
  let let68 := (binrel% HMul.hMul let64 let25)
  let let69 := (Eq let9 let9)
  let let70 := (Not True)
  let let71 := (Eq let9 let62)
  let let72 := (binrel% GE.ge let25 let25)
  let let73 := (binrel% HMul.hMul let31 let25)
  let let74 := (binrel% HMul.hMul let31 skoA)
  let let75 := (binrel% HMul.hMul let64 skoX)
  let let76 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let68 let73))
  let let77 := (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let75 let74))
  let let78 := (binrel% GE.ge let77 let76)
  let let79 := (Not let78)
  let let80 := (binrel% LT.lt let77 let76)
  let let81 := (Eq let46 let27)
  let let82 := (Not let23)
  let let83 := (Or let82 (Or let9 let6))
  let let84 := (Or let82 (Or let62 let53))
  let let85 := (Not let50)
  let let86 := (binrel% LE.le let74 let73)
  let let87 := (And let32 let45)
  let let88 := (binrel% LT.lt let75 let68)
  let let89 := (And let65 let30)
  let let90 := (binrel% LT.lt let67 let68)
  let let91 := (And let65 let50)
(Eq let27 let24) → (Eq let30 let29) → (Eq let32 True) → (Eq let46 let46) → (Eq let45 let23) → (Eq let33 let6) → (Eq let50 let49) → (Eq let51 True) → (Eq let52 let20) → (Eq let39 let16) → (Eq let55 let54) → let55 → (Eq let56 let17) → (Eq let57 let25) → (Eq let28 let9) → (Eq let58 let25) → (Eq let61 let60) → (Eq let42 let19) → let63 → (Eq let48 let6) → (Eq let65 True) → (Eq let66 let14) → (Eq let67 let5) → (Eq let68 let25) → (Eq let69 True) → (Eq let70 False) → (Eq let63 let71) → (Eq let72 True) → (Eq let73 let25) → (Eq let35 let59) → (Eq let74 skoA) → (Eq let75 let8) → (Eq let80 let79) → let46 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% HMul.hMul let3 skoA)
  let let5 := (binrel% HAdd.hAdd let4 skoX)
  let let6 := (binrel% GE.ge let5 let1)
  let let7 := (Not let6)
  let let8 := (binrel% HMul.hMul let3 skoX)
  let let9 := (binrel% GE.ge let8 let1)
  let let10 := (Not let9)
  let let11 := (And let10 let7)
  let let12 := (Int.ofNat 2)
  let let13 := (binrel% HMul.hMul let3 pi)
  let let14 := (binrel% GE.ge (binrel% HAdd.hAdd let13 (binrel% HMul.hMul let12 skoA)) let1)
  let let15 := (Not let14)
  let let16 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let17 := (binrel% GE.ge pi let16)
  let let18 := (Not let17)
  let let19 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let20 := (binrel% GE.ge let13 (Neg.neg let19))
  let let21 := (Not let20)
  let let22 := (And let21 (And let18 (And let15 let11)))
  let let23 := (binrel% GE.ge let4 let1)
  let let24 := (And let23 (And (Not (And let23 (binrel% GE.ge skoA let1))) let22))
  let let25 := (Rat.ofInt 0)
  let let26 := (Not (Eq skoA let25))
  let let27 := (And let23 (And let26 let22))
  let let28 := (binrel% LE.le skoX let25)
  let let29 := (Not let28)
  let let30 := (binrel% GT.gt skoX let25)
  let let31 := (Rat.ofInt 1)
  let let32 := (binrel% GT.gt let31 let1)
  let let33 := (binrel% LE.le skoA skoX)
  let let34 := (Not let33)
  let let35 := (binrel% HDiv.hDiv let31 (Rat.ofInt 2))
  let let36 := (binrel% HMul.hMul pi let35)
  let let37 := (binrel% LE.le let36 skoA)
  let let38 := (Not let37)
  let let39 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let40 := (binrel% LE.le let39 pi)
  let let41 := (Not let40)
  let let42 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let43 := (binrel% LE.le pi let42)
  let let44 := (Not let43)
  let let45 := (binrel% LE.le skoA let25)
  let let46 := (And let45 (And let26 (And let44 (And let41 (And let38 (And let29 let34))))))
  let let47 := (binrel% HAdd.hAdd skoA let8)
  let let48 := (binrel% LE.le let47 let25)
  let let49 := (Not let48)
  let let50 := (binrel% GT.gt let47 let25)
  let let51 := (Eq let6 let6)
  let let52 := (binrel% LE.le pi let19)
  let let53 := (Not let7)
  let let54 := (Eq let6 let53)
  let let55 := (Eq let53 let6)
  let let56 := (binrel% LE.le let16 pi)
  let let57 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let25 let25))
  let let58 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let8 skoA))
  let let59 := (binrel% HDiv.hDiv let2 let12)
  let let60 := (binrel% HMul.hMul let59 pi)
  let let61 := (binrel% HMul.hMul pi let59)
  let let62 := (Not let10)
  let let63 := (Eq let62 let9)
  let let64 := (Neg.neg let31)
  let let65 := (binrel% LT.lt let64 let1)
  let let66 := (binrel% LE.le let60 skoA)
  let let67 := (binrel% HMul.hMul let64 let47)
  let let68 := (binrel% HMul.hMul let64 let25)
  let let69 := (Eq let9 let9)
  let let70 := (Not True)
  let let71 := (Eq let9 let62)
  let let72 := (binrel% GE.ge let25 let25)
  let let73 := (binrel% HMul.hMul let31 let25)
  let let74 := (binrel% HMul.hMul let31 skoA)
  let let75 := (binrel% HMul.hMul let64 skoX)
  let let76 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let68 let73))
  let let77 := (binrel% HAdd.hAdd let67 (binrel% HAdd.hAdd let75 let74))
  let let78 := (binrel% GE.ge let77 let76)
  let let79 := (Not let78)
  let let80 := (binrel% LT.lt let77 let76)
  let let81 := (Eq let46 let27)
  let let82 := (Not let23)
  let let83 := (Or let82 (Or let9 let6))
  let let84 := (Or let82 (Or let62 let53))
  let let85 := (Not let50)
  let let86 := (binrel% LE.le let74 let73)
  let let87 := (And let32 let45)
  let let88 := (binrel% LT.lt let75 let68)
  let let89 := (And let65 let30)
  let let90 := (binrel% LT.lt let67 let68)
  let let91 := (And let65 let50)
fun lean_h0 : (Eq let27 let24) => -- PREPROCESS
fun lean_r1 : (Eq let30 let29) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let32 True) => -- EVALUATE
fun lean_r3 : (Eq let46 let46) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq let45 let23) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let33 let6) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let50 let49) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let51 True) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let52 let20) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let39 let16) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let55 let54) => -- THEORY_REWRITE_BOOL
fun lean_r11 : let55 => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let56 let17) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let57 let25) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let28 let9) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let58 let25) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let61 let60) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let42 let19) => -- THEORY_REWRITE_ARITH
fun lean_r18 : let63 => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let48 let6) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let65 True) => -- EVALUATE
fun lean_r21 : (Eq let66 let14) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let67 let5) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let68 let25) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let69 True) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let70 False) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let63 let71) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let72 True) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let73 let25) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let35 let59) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let74 skoA) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let75 let8) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let80 let79) => -- THEORY_REWRITE_ARITH
fun lean_a33 : let46 => by
have lean_s0 : (Or let82 (Or let62 (Or let53 False))) :=
  (scope (fun lean_a34 : let23 =>
    (scope (fun lean_a35 : let10 =>
      (scope (fun lean_a36 : let7 =>
        have lean_s0 : (Eq let49 let7) := by timed flipCongrArg lean_r19 [Not]
        have lean_s1 : (Eq let50 let7) := by timed Eq.trans lean_r6 lean_s0
        have lean_s2 : (Eq let7 let50) := by timed Eq.symm lean_s1
        have lean_s3 : let50 := by timed eqResolve lean_a36 lean_s2
        have lean_s4 : (Or let85 False) :=
          (scope (fun lean_a37 : let50 =>
            have lean_s4 : let65 := by timed trueElim lean_r20
            have lean_s5 : let91 := by timed And.intro lean_s4 lean_a37
            have lean_s6 : (Implies let91 let90) := by arithMulNeg [let47, let25, let64], 2
            have lean_s7 : let90 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let29 let10) := by timed flipCongrArg lean_r14 [Not]
            have lean_s9 : (Eq let30 let10) := by timed Eq.trans lean_r1 lean_s8
            have lean_s10 : (Eq let10 let30) := by timed Eq.symm lean_s9
            have lean_s11 : let30 := by timed eqResolve lean_a35 lean_s10
            have lean_s12 : let89 := by timed And.intro lean_s4 lean_s11
            have lean_s13 : (Implies let89 let88) := by arithMulNeg [skoX, let25, let64], 2
            have lean_s14 : let88 := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : let32 := by timed trueElim lean_r2
            have lean_s16 : (Eq let23 let45) := by timed Eq.symm lean_r4
            have lean_s17 : let45 := by timed eqResolve lean_a34 lean_s16
            have lean_s18 : let87 := by timed And.intro lean_s15 lean_s17
            have lean_s19 : (Implies let87 let86) := by arithMulPos [skoA, let25, let31], 1
            have lean_s20 : let86 := by timed modusPonens lean_s18 lean_s19
            have lean_s21 : let80 := by sumBounds [lean_s7, lean_s14, lean_s20]
            let lean_s22 := by timed congrHAdd lean_r31 lean_r30
            have lean_s23 : (Eq let77 let58) := by timed congrHAdd lean_r22 lean_s22
            have lean_s24 : (Eq let77 let25) := by timed Eq.trans lean_s23 lean_r15
            let lean_s25 := by timed flipCongrArg lean_s24 [GE.ge]
            let lean_s26 := by timed congrHAdd lean_r23 lean_r28
            have lean_s27 : (Eq let76 let57) := by timed congrHAdd lean_r23 lean_s26
            have lean_s28 : (Eq let76 let25) := by timed Eq.trans lean_s27 lean_r13
            have lean_s29 : (Eq let78 let72) := by timed congr lean_s25 lean_s28
            have lean_s30 : (Eq let78 True) := by timed Eq.trans lean_s29 lean_r27
            have lean_s31 : (Eq let79 let70) := by timed flipCongrArg lean_s30 [Not]
            have lean_s32 : (Eq let79 False) := by timed Eq.trans lean_s31 lean_r25
            have lean_s33 : (Eq let80 False) := by timed Eq.trans lean_r32 lean_s32
            show False from by timed eqResolve lean_s21 lean_s33
          ))
        have lean_s5 : let85 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let85 let53) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let85 let6) := by timed Eq.trans lean_s6 lean_r11
        have lean_s8 : (Eq let6 let48) := by timed Eq.symm lean_r19
        have lean_s9 : (Eq let85 let48) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let48 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let6 let85) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let48 let85) := by timed Eq.trans lean_r19 lean_s11
        have lean_s13 : let85 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let23 let11)) := by liftOrNToNeg lean_s0
have lean_s2 : let84 := by timed flipNotAnd lean_s1 [let23, let10, let7]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let82 let82) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let69 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let71 let69) := by timed congr lean_s7 lean_r18
have lean_s9 : (Eq let71 True) := by timed Eq.trans lean_s8 lean_r24
have lean_s10 : (Eq let63 True) := by timed Eq.trans lean_r26 lean_s9
have lean_s11 : let63 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : let51 := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [Eq]
have lean_s15 : (Eq let54 let51) := by timed congr lean_s14 lean_r11
have lean_s16 : (Eq let54 True) := by timed Eq.trans lean_s15 lean_r7
have lean_s17 : (Eq let55 True) := by timed Eq.trans lean_r10 lean_s16
have lean_s18 : let55 := by timed trueElim lean_s17
let lean_s19 := by timed congr lean_s12 lean_s18
have lean_s20 : (Eq let84 let83) := by timed congr lean_s5 lean_s19
have lean_s21 : let83 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let9 (Or let6 let82)) := by permutateOr lean_s21, [1, 2, 0], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
let lean_s24 := by timed congr lean_s23 lean_r4
have lean_s25 : (Eq let26 let26) := by timed rfl
let lean_s26 := by timed congr lean_s23 lean_s25
have lean_s27 : (Eq pi pi) := by timed rfl
let lean_s28 := by timed flipCongrArg lean_s27 [LE.le]
have lean_s29 : (Eq let43 let52) := by timed congr lean_s28 lean_r17
have lean_s30 : (Eq let43 let20) := by timed Eq.trans lean_s29 lean_r8
have lean_s31 : (Eq let44 let21) := by timed flipCongrArg lean_s30 [Not]
let lean_s32 := by timed congr lean_s23 lean_s31
let lean_s33 := by timed flipCongrArg lean_r9 [LE.le]
have lean_s34 : (Eq let40 let56) := by timed congr lean_s33 lean_s27
have lean_s35 : (Eq let40 let17) := by timed Eq.trans lean_s34 lean_r12
have lean_s36 : (Eq let41 let18) := by timed flipCongrArg lean_s35 [Not]
let lean_s37 := by timed congr lean_s23 lean_s36
let lean_s38 := by timed flipCongrArg lean_s27 [HMul.hMul]
have lean_s39 : (Eq let36 let61) := by timed congr lean_s38 lean_r29
have lean_s40 : (Eq let36 let60) := by timed Eq.trans lean_s39 lean_r16
let lean_s41 := by timed flipCongrArg lean_s40 [LE.le]
have lean_s42 : (Eq skoA skoA) := by timed rfl
have lean_s43 : (Eq let37 let66) := by timed congr lean_s41 lean_s42
have lean_s44 : (Eq let37 let14) := by timed Eq.trans lean_s43 lean_r21
have lean_s45 : (Eq let38 let15) := by timed flipCongrArg lean_s44 [Not]
let lean_s46 := by timed congr lean_s23 lean_s45
have lean_s47 : (Eq let29 let10) := by timed flipCongrArg lean_r14 [Not]
let lean_s48 := by timed congr lean_s23 lean_s47
have lean_s49 : (Eq let34 let7) := by timed flipCongrArg lean_r5 [Not]
let lean_s50 := by timed congr lean_s48 lean_s49
let lean_s51 := by timed congr lean_s46 lean_s50
let lean_s52 := by timed congr lean_s37 lean_s51
let lean_s53 := by timed congr lean_s32 lean_s52
let lean_s54 := by timed congr lean_s26 lean_s53
have lean_s55 : let81 := by timed congr lean_s24 lean_s54
have lean_s56 : let81 := by timed Eq.trans lean_r3 lean_s55
have lean_s57 : (Eq let46 let24) := by timed Eq.trans lean_s56 lean_h0
have lean_s58 : let24 := by timed eqResolve lean_a33 lean_s57
have lean_s59 : let7 := by andElim lean_s58, 6
let lean_s60 := by R1 lean_s22, lean_s59, let6, [(- 1), 0]
have lean_s61 : let10 := by andElim lean_s58, 5
let lean_s62 := by R1 lean_s60, lean_s61, let9, [(- 1), 0]
have lean_s63 : let23 := by andElim lean_s58, 0
exact (show False from by R2 lean_s62, lean_s63, let23, [0, 0])


