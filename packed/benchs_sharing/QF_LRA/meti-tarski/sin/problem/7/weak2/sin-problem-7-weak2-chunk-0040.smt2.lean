open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoA : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoA : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% HMul.hMul let2 let1)
  let let4 := (Rat.ofInt 2000)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 let1)
  let let7 := (Neg.neg let2)
  let let8 := (binrel% HMul.hMul let7 let1)
  let let9 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let6 let3))
  let let10 := (binrel% HMul.hMul let2 skoA)
  let let11 := (binrel% HMul.hMul let5 skoX)
  let let12 := (Int.ofNat 2000)
  let let13 := (binrel% HMul.hMul (Neg.neg let12) skoX)
  let let14 := (binrel% HAdd.hAdd skoA let13)
  let let15 := (binrel% HMul.hMul let7 let14)
  let let16 := (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let11 let10))
  let let17 := (binrel% GE.ge let16 let9)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let9)
  let let20 := (Int.ofNat 1)
  let let21 := (binrel% HDiv.hDiv let20 let12)
  let let22 := (binrel% HMul.hMul let21 skoA)
  let let23 := (binrel% HMul.hMul skoA let21)
  let let24 := (Int.ofNat 0)
  let let25 := (binrel% GE.ge let14 let24)
  let let26 := (binrel% LE.le skoX let22)
  let let27 := (binrel% HDiv.hDiv let20 (Int.ofNat 2))
  let let28 := (binrel% HMul.hMul let27 pi)
  let let29 := (binrel% HMul.hMul pi let27)
  let let30 := (Neg.neg let20)
  let let31 := (binrel% GE.ge (binrel% HMul.hMul let30 skoX) let24)
  let let32 := (binrel% LE.le skoX let1)
  let let33 := (Not let32)
  let let34 := (binrel% GT.gt skoX let1)
  let let35 := (binrel% HMul.hMul let30 skoA)
  let let36 := (binrel% HAdd.hAdd let35 (binrel% HMul.hMul let12 skoX))
  let let37 := (binrel% GE.ge let36 let24)
  let let38 := (binrel% LE.le let22 skoX)
  let let39 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let40 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let41 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let42 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1))
  let let43 := (binrel% HDiv.hDiv let2 let4)
  let let44 := (binrel% GE.ge pi let40)
  let let45 := (binrel% LE.le let40 pi)
  let let46 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let47 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let48 := (binrel% GE.ge (binrel% HAdd.hAdd let35 skoX) let24)
  let let49 := (binrel% LE.le skoA skoX)
  let let50 := (binrel% GE.ge (binrel% HMul.hMul let30 pi) (Neg.neg let46))
  let let51 := (binrel% LE.le pi let46)
  let let52 := (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg let27) pi)) let24)
  let let53 := (binrel% LE.le let28 skoA)
  let let54 := (binrel% GE.ge let35 let24)
  let let55 := (binrel% LE.le skoA let1)
  let let56 := (binrel% LE.le pi let47)
  let let57 := (Not let56)
  let let58 := (binrel% LE.le let41 pi)
  let let59 := (Not let58)
  let let60 := (binrel% HMul.hMul pi let39)
  let let61 := (binrel% LE.le let60 skoA)
  let let62 := (Not let61)
  let let63 := (Not let49)
  let let64 := (binrel% HMul.hMul skoA let43)
  let let65 := (binrel% LE.le skoX let64)
  let let66 := (Not let65)
  let let67 := (binrel% LE.le let64 skoX)
  let let68 := (Not let67)
  let let69 := (Or let68 let66)
  let let70 := (And let55 (And let65 (And let69 (And let63 (And let33 (And let62 (And let59 let57)))))))
  let let71 := (binrel% GT.gt let2 let24)
  let let72 := (Not let31)
  let let73 := (Not let72)
  let let74 := (Eq let31 let73)
  let let75 := (Eq let73 let31)
  let let76 := (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let13 skoA))
  let let77 := (binrel% LT.lt let7 let24)
  let let78 := (binrel% GE.ge let14 let1)
  let let79 := (Not let78)
  let let80 := (binrel% LT.lt let14 let1)
  let let81 := (Eq let80 let79)
  let let82 := (Eq let31 let31)
  let let83 := (Not True)
  let let84 := (binrel% GE.ge let1 let1)
  let let85 := (binrel% LT.lt let5 let24)
  let let86 := (Not let50)
  let let87 := (Not let44)
  let let88 := (Not let52)
  let let89 := (Not let48)
  let let90 := (Not let25)
  let let91 := (Not let37)
  let let92 := (Or let91 let90)
  let let93 := (And let54 (And let25 (And let92 (And let89 (And let72 (And let88 (And let87 let86)))))))
  let let94 := (Eq let70 let93)
  let let95 := (Not let54)
  let let96 := (Or let95 (Or let31 let90))
  let let97 := (Or let95 (Or let73 let90))
  let let98 := (binrel% LE.le let10 let3)
  let let99 := (And let71 let55)
  let let100 := (binrel% LT.lt let11 let6)
  let let101 := (And let85 let34)
  let let102 := (binrel% LE.le let15 let8)
  let let103 := (And let77 let78)
(Eq let19 let18) → (Eq let23 let22) → (Eq let26 let25) → (Eq let29 let28) → (Eq let32 let31) → (Eq let34 let33) → (Eq let38 let37) → (Eq let39 let27) → (Eq let41 let40) → (Eq let42 let1) → (Eq let43 let21) → (Eq let45 let44) → (Eq let47 let46) → (Eq let15 let36) → (Eq let49 let48) → (Eq let11 let13) → (Eq let51 let50) → (Eq let53 let52) → (Eq let55 let54) → (Eq let70 let70) → (Eq let6 let1) → (Eq let71 True) → (Eq let75 let74) → (Eq let76 let1) → (Eq let77 True) → let81 → (Eq let82 True) → (Eq let83 False) → let75 → (Eq let84 True) → (Eq let85 True) → (Eq let3 let1) → (Eq let78 let25) → (Eq let8 let1) → (Eq let10 skoA) → let70 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% HMul.hMul let2 let1)
  let let4 := (Rat.ofInt 2000)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 let1)
  let let7 := (Neg.neg let2)
  let let8 := (binrel% HMul.hMul let7 let1)
  let let9 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let6 let3))
  let let10 := (binrel% HMul.hMul let2 skoA)
  let let11 := (binrel% HMul.hMul let5 skoX)
  let let12 := (Int.ofNat 2000)
  let let13 := (binrel% HMul.hMul (Neg.neg let12) skoX)
  let let14 := (binrel% HAdd.hAdd skoA let13)
  let let15 := (binrel% HMul.hMul let7 let14)
  let let16 := (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let11 let10))
  let let17 := (binrel% GE.ge let16 let9)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let9)
  let let20 := (Int.ofNat 1)
  let let21 := (binrel% HDiv.hDiv let20 let12)
  let let22 := (binrel% HMul.hMul let21 skoA)
  let let23 := (binrel% HMul.hMul skoA let21)
  let let24 := (Int.ofNat 0)
  let let25 := (binrel% GE.ge let14 let24)
  let let26 := (binrel% LE.le skoX let22)
  let let27 := (binrel% HDiv.hDiv let20 (Int.ofNat 2))
  let let28 := (binrel% HMul.hMul let27 pi)
  let let29 := (binrel% HMul.hMul pi let27)
  let let30 := (Neg.neg let20)
  let let31 := (binrel% GE.ge (binrel% HMul.hMul let30 skoX) let24)
  let let32 := (binrel% LE.le skoX let1)
  let let33 := (Not let32)
  let let34 := (binrel% GT.gt skoX let1)
  let let35 := (binrel% HMul.hMul let30 skoA)
  let let36 := (binrel% HAdd.hAdd let35 (binrel% HMul.hMul let12 skoX))
  let let37 := (binrel% GE.ge let36 let24)
  let let38 := (binrel% LE.le let22 skoX)
  let let39 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let40 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let41 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let42 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1))
  let let43 := (binrel% HDiv.hDiv let2 let4)
  let let44 := (binrel% GE.ge pi let40)
  let let45 := (binrel% LE.le let40 pi)
  let let46 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let47 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let48 := (binrel% GE.ge (binrel% HAdd.hAdd let35 skoX) let24)
  let let49 := (binrel% LE.le skoA skoX)
  let let50 := (binrel% GE.ge (binrel% HMul.hMul let30 pi) (Neg.neg let46))
  let let51 := (binrel% LE.le pi let46)
  let let52 := (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg let27) pi)) let24)
  let let53 := (binrel% LE.le let28 skoA)
  let let54 := (binrel% GE.ge let35 let24)
  let let55 := (binrel% LE.le skoA let1)
  let let56 := (binrel% LE.le pi let47)
  let let57 := (Not let56)
  let let58 := (binrel% LE.le let41 pi)
  let let59 := (Not let58)
  let let60 := (binrel% HMul.hMul pi let39)
  let let61 := (binrel% LE.le let60 skoA)
  let let62 := (Not let61)
  let let63 := (Not let49)
  let let64 := (binrel% HMul.hMul skoA let43)
  let let65 := (binrel% LE.le skoX let64)
  let let66 := (Not let65)
  let let67 := (binrel% LE.le let64 skoX)
  let let68 := (Not let67)
  let let69 := (Or let68 let66)
  let let70 := (And let55 (And let65 (And let69 (And let63 (And let33 (And let62 (And let59 let57)))))))
  let let71 := (binrel% GT.gt let2 let24)
  let let72 := (Not let31)
  let let73 := (Not let72)
  let let74 := (Eq let31 let73)
  let let75 := (Eq let73 let31)
  let let76 := (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let13 skoA))
  let let77 := (binrel% LT.lt let7 let24)
  let let78 := (binrel% GE.ge let14 let1)
  let let79 := (Not let78)
  let let80 := (binrel% LT.lt let14 let1)
  let let81 := (Eq let80 let79)
  let let82 := (Eq let31 let31)
  let let83 := (Not True)
  let let84 := (binrel% GE.ge let1 let1)
  let let85 := (binrel% LT.lt let5 let24)
  let let86 := (Not let50)
  let let87 := (Not let44)
  let let88 := (Not let52)
  let let89 := (Not let48)
  let let90 := (Not let25)
  let let91 := (Not let37)
  let let92 := (Or let91 let90)
  let let93 := (And let54 (And let25 (And let92 (And let89 (And let72 (And let88 (And let87 let86)))))))
  let let94 := (Eq let70 let93)
  let let95 := (Not let54)
  let let96 := (Or let95 (Or let31 let90))
  let let97 := (Or let95 (Or let73 let90))
  let let98 := (binrel% LE.le let10 let3)
  let let99 := (And let71 let55)
  let let100 := (binrel% LT.lt let11 let6)
  let let101 := (And let85 let34)
  let let102 := (binrel% LE.le let15 let8)
  let let103 := (And let77 let78)
fun lean_r0 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let26 let25) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let32 let31) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let38 let37) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let39 let27) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let42 let1) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let43 let21) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let47 let46) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let15 let36) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let49 let48) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let11 let13) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let53 let52) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let70 let70) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let6 let1) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let71 True) => -- EVALUATE
fun lean_r22 : (Eq let75 let74) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let76 let1) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let77 True) => -- EVALUATE
fun lean_r25 : let81 => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let82 True) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let83 False) => -- THEORY_REWRITE_BOOL
fun lean_r28 : let75 => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let84 True) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let85 True) => -- EVALUATE
fun lean_r31 : (Eq let3 let1) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let78 let25) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let8 let1) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let10 skoA) => -- THEORY_REWRITE_ARITH
fun lean_a35 : let70 => by
have lean_s0 : (Or let95 (Or let73 (Or let90 False))) :=
  (scope (fun lean_a36 : let54 =>
    (scope (fun lean_a37 : let72 =>
      (scope (fun lean_a38 : let25 =>
        have lean_s0 : (Eq let25 let78) := by timed Eq.symm lean_r32
        have lean_s1 : let78 := by timed eqResolve lean_a38 lean_s0
        have lean_s2 : (Or let79 False) :=
          (scope (fun lean_a39 : let78 =>
            have lean_s2 : let77 := by timed trueElim lean_r24
            have lean_s3 : let103 := by timed And.intro lean_s2 lean_a39
            have lean_s4 : (Implies let103 let102) := by arithMulNeg [let14, let1, let7], 3
            have lean_s5 : let102 := by timed modusPonens lean_s3 lean_s4
            have lean_s6 : let85 := by timed trueElim lean_r30
            have lean_s7 : (Eq let33 let72) := by timed flipCongrArg lean_r4 [Not]
            have lean_s8 : (Eq let34 let72) := by timed Eq.trans lean_r5 lean_s7
            have lean_s9 : (Eq let72 let34) := by timed Eq.symm lean_s8
            have lean_s10 : let34 := by timed eqResolve lean_a37 lean_s9
            have lean_s11 : let101 := by timed And.intro lean_s6 lean_s10
            have lean_s12 : (Implies let101 let100) := by arithMulNeg [skoX, let1, let5], 2
            have lean_s13 : let100 := by timed modusPonens lean_s11 lean_s12
            have lean_s14 : let71 := by timed trueElim lean_r21
            have lean_s15 : (Eq let54 let55) := by timed Eq.symm lean_r18
            have lean_s16 : let55 := by timed eqResolve lean_a36 lean_s15
            have lean_s17 : let99 := by timed And.intro lean_s14 lean_s16
            have lean_s18 : (Implies let99 let98) := by arithMulPos [skoA, let1, let2], 1
            have lean_s19 : let98 := by timed modusPonens lean_s17 lean_s18
            have lean_s20 : let19 := by sumBounds [lean_s5, lean_s13, lean_s19]
            let lean_s21 := by timed congrHAdd lean_r15 lean_r34
            have lean_s22 : (Eq let16 let76) := by timed congrHAdd lean_r13 lean_s21
            have lean_s23 : (Eq let16 let1) := by timed Eq.trans lean_s22 lean_r23
            let lean_s24 := by timed flipCongrArg lean_s23 [GE.ge]
            let lean_s25 := by timed congrHAdd lean_r20 lean_r31
            have lean_s26 : (Eq let9 let42) := by timed congrHAdd lean_r33 lean_s25
            have lean_s27 : (Eq let9 let1) := by timed Eq.trans lean_s26 lean_r9
            have lean_s28 : (Eq let17 let84) := by timed congr lean_s24 lean_s27
            have lean_s29 : (Eq let17 True) := by timed Eq.trans lean_s28 lean_r29
            have lean_s30 : (Eq let18 let83) := by timed flipCongrArg lean_s29 [Not]
            have lean_s31 : (Eq let18 False) := by timed Eq.trans lean_s30 lean_r27
            have lean_s32 : (Eq let19 False) := by timed Eq.trans lean_r0 lean_s31
            show False from by timed eqResolve lean_s20 lean_s32
          ))
        have lean_s3 : let79 := by liftOrNToNeg lean_s2
        have lean_s4 : (Eq let79 let90) := by timed flipCongrArg lean_r32 [Not]
        have lean_s5 : (Eq let80 let90) := by timed Eq.trans lean_r25 lean_s4
        have lean_s6 : (Eq let90 let80) := by timed Eq.symm lean_s5
        have lean_s7 : (Eq let79 let80) := by timed Eq.trans lean_s4 lean_s6
        have lean_s8 : let80 := by timed eqResolve lean_s3 lean_s7
        have lean_s9 : (Eq let90 let79) := by timed Eq.symm lean_s4
        have lean_s10 : let81 := by timed Eq.trans lean_s5 lean_s9
        have lean_s11 : let79 := by timed eqResolve lean_s8 lean_s10
        show False from by timed contradiction lean_s1 lean_s11
  ))))))
have lean_s1 : (Not (And let54 (And let72 let25))) := by liftOrNToNeg lean_s0
have lean_s2 : let97 := by timed flipNotAnd lean_s1 [let54, let72, let25]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : (Eq let95 let95) := by timed rfl
let lean_s5 := by timed congr lean_s3 lean_s4
have lean_s6 : let82 := by timed rfl
let lean_s7 := by timed flipCongrArg lean_s6 [Eq]
have lean_s8 : (Eq let74 let82) := by timed congr lean_s7 lean_r28
have lean_s9 : (Eq let74 True) := by timed Eq.trans lean_s8 lean_r26
have lean_s10 : (Eq let75 True) := by timed Eq.trans lean_r22 lean_s9
have lean_s11 : let75 := by timed trueElim lean_s10
let lean_s12 := by timed congr lean_s3 lean_s11
have lean_s13 : (Eq let90 let90) := by timed rfl
let lean_s14 := by timed congr lean_s12 lean_s13
have lean_s15 : (Eq let97 let96) := by timed congr lean_s5 lean_s14
have lean_s16 : let96 := by timed eqResolve lean_s2 lean_s15
have lean_s17 : (Or let90 (Or let31 let95)) := by permutateOr lean_s16, [2, 1, 0], (- 1)
have lean_s18 : (Eq And And) := by timed rfl
let lean_s19 := by timed congr lean_s18 lean_r18
have lean_s20 : (Eq skoX skoX) := by timed rfl
let lean_s21 := by timed flipCongrArg lean_s20 [LE.le]
have lean_s22 : (Eq skoA skoA) := by timed rfl
let lean_s23 := by timed flipCongrArg lean_s22 [HMul.hMul]
have lean_s24 : (Eq let64 let23) := by timed congr lean_s23 lean_r10
have lean_s25 : (Eq let64 let22) := by timed Eq.trans lean_s24 lean_r1
have lean_s26 : (Eq let65 let26) := by timed congr lean_s21 lean_s25
have lean_s27 : (Eq let65 let25) := by timed Eq.trans lean_s26 lean_r2
let lean_s28 := by timed congr lean_s18 lean_s27
let lean_s29 := by timed flipCongrArg lean_s25 [LE.le]
have lean_s30 : (Eq let67 let38) := by timed congr lean_s29 lean_s20
have lean_s31 : (Eq let67 let37) := by timed Eq.trans lean_s30 lean_r6
have lean_s32 : (Eq let68 let91) := by timed flipCongrArg lean_s31 [Not]
let lean_s33 := by timed flipCongrArg lean_s32 [Or]
have lean_s34 : (Eq let66 let90) := by timed flipCongrArg lean_s27 [Not]
have lean_s35 : (Eq let69 let92) := by timed congr lean_s33 lean_s34
let lean_s36 := by timed congr lean_s18 lean_s35
have lean_s37 : (Eq let63 let89) := by timed flipCongrArg lean_r14 [Not]
let lean_s38 := by timed congr lean_s18 lean_s37
have lean_s39 : (Eq let33 let72) := by timed flipCongrArg lean_r4 [Not]
let lean_s40 := by timed congr lean_s18 lean_s39
have lean_s41 : (Eq pi pi) := by timed rfl
let lean_s42 := by timed flipCongrArg lean_s41 [HMul.hMul]
have lean_s43 : (Eq let60 let29) := by timed congr lean_s42 lean_r7
have lean_s44 : (Eq let60 let28) := by timed Eq.trans lean_s43 lean_r3
let lean_s45 := by timed flipCongrArg lean_s44 [LE.le]
have lean_s46 : (Eq let61 let53) := by timed congr lean_s45 lean_s22
have lean_s47 : (Eq let61 let52) := by timed Eq.trans lean_s46 lean_r17
have lean_s48 : (Eq let62 let88) := by timed flipCongrArg lean_s47 [Not]
let lean_s49 := by timed congr lean_s18 lean_s48
let lean_s50 := by timed flipCongrArg lean_r8 [LE.le]
have lean_s51 : (Eq let58 let45) := by timed congr lean_s50 lean_s41
have lean_s52 : (Eq let58 let44) := by timed Eq.trans lean_s51 lean_r11
have lean_s53 : (Eq let59 let87) := by timed flipCongrArg lean_s52 [Not]
let lean_s54 := by timed congr lean_s18 lean_s53
let lean_s55 := by timed flipCongrArg lean_s41 [LE.le]
have lean_s56 : (Eq let56 let51) := by timed congr lean_s55 lean_r12
have lean_s57 : (Eq let56 let50) := by timed Eq.trans lean_s56 lean_r16
have lean_s58 : (Eq let57 let86) := by timed flipCongrArg lean_s57 [Not]
let lean_s59 := by timed congr lean_s54 lean_s58
let lean_s60 := by timed congr lean_s49 lean_s59
let lean_s61 := by timed congr lean_s40 lean_s60
let lean_s62 := by timed congr lean_s38 lean_s61
let lean_s63 := by timed congr lean_s36 lean_s62
let lean_s64 := by timed congr lean_s28 lean_s63
have lean_s65 : let94 := by timed congr lean_s19 lean_s64
have lean_s66 : let94 := by timed Eq.trans lean_r19 lean_s65
have lean_s67 : let93 := by timed eqResolve lean_a35 lean_s66
have lean_s68 : let72 := by andElim lean_s67, 4
let lean_s69 := by R1 lean_s17, lean_s68, let31, [(- 1), 0]
have lean_s70 : let25 := by andElim lean_s67, 1
let lean_s71 := by R2 lean_s69, lean_s70, let25, [(- 1), 0]
have lean_s72 : let54 := by andElim lean_s67, 0
exact (show False from by R2 lean_s71, lean_s72, let54, [0, 0])


