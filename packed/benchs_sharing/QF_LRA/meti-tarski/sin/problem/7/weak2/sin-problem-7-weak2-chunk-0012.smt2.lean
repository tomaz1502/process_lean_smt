open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoA : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoA : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let2 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let3 := (Rat.ofInt 0)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 skoX)
  let let7 := (binrel% HAdd.hAdd skoX let6)
  let let8 := (Int.ofNat 0)
  let let9 := (Rat.ofInt 1)
  let let10 := (binrel% GT.gt let9 let8)
  let let11 := (binrel% HMul.hMul let9 let3)
  let let12 := (Int.ofNat 2)
  let let13 := (binrel% HMul.hMul let12 skoA)
  let let14 := (binrel% HMul.hMul let5 pi)
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% GE.ge let15 let8)
  let let17 := (binrel% HDiv.hDiv let4 let12)
  let let18 := (binrel% HMul.hMul let17 pi)
  let let19 := (binrel% LE.le let18 skoA)
  let let20 := (Neg.neg let9)
  let let21 := (binrel% HMul.hMul let20 skoX)
  let let22 := (binrel% HMul.hMul let5 skoA)
  let let23 := (binrel% HAdd.hAdd let22 skoX)
  let let24 := (binrel% GE.ge let23 let8)
  let let25 := (binrel% LE.le skoA skoX)
  let let26 := (binrel% HDiv.hDiv let9 (Rat.ofInt 2))
  let let27 := (binrel% HMul.hMul let12 let3)
  let let28 := (binrel% HMul.hMul pi let17)
  let let29 := (Not let25)
  let let30 := (binrel% LE.le skoX let3)
  let let31 := (Not let30)
  let let32 := (binrel% HMul.hMul pi let26)
  let let33 := (binrel% LE.le let32 skoA)
  let let34 := (Not let33)
  let let35 := (binrel% LE.le let2 pi)
  let let36 := (Not let35)
  let let37 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let38 := (binrel% LE.le pi let37)
  let let39 := (Not let38)
  let let40 := (Eq skoA let3)
  let let41 := (And let40 (And let39 (And let36 (And let34 (And let31 let29)))))
  let let42 := (binrel% GE.ge let6 let8)
  let let43 := (binrel% HAdd.hAdd let14 let3)
  let let44 := (binrel% GE.ge skoX let8)
  let let45 := (binrel% GE.ge skoX let3)
  let let46 := (Not let44)
  let let47 := (Not let42)
  let let48 := (And let47 let46)
  let let49 := (binrel% GE.ge let14 let8)
  let let50 := (Not let49)
  let let51 := (binrel% GE.ge pi let1)
  let let52 := (Not let51)
  let let53 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let54 := (binrel% GE.ge let14 (Neg.neg let53))
  let let55 := (Not let54)
  let let56 := (And let55 (And let52 (And let50 let48)))
  let let57 := (And True let56)
  let let58 := (binrel% HMul.hMul let5 let3)
  let let59 := (binrel% HAdd.hAdd let3 skoX)
  let let60 := (Not let46)
  let let61 := (Eq let3 let3)
  let let62 := (binrel% HMul.hMul let9 skoX)
  let let63 := (binrel% LE.le let1 pi)
  let let64 := (binrel% LE.le pi let53)
  let let65 := (Not let47)
  let let66 := (binrel% HMul.hMul let20 let3)
  let let67 := (binrel% HAdd.hAdd let11 let66)
  let let68 := (binrel% HAdd.hAdd let62 let21)
  let let69 := (binrel% GE.ge let68 let67)
  let let70 := (Not let69)
  let let71 := (binrel% LT.lt let68 let67)
  let let72 := (Not True)
  let let73 := (binrel% GE.ge let3 let3)
  let let74 := (binrel% HAdd.hAdd let3 let3)
  let let75 := (Not let45)
  let let76 := (binrel% LT.lt skoX let3)
  let let77 := (binrel% GT.gt skoX let3)
  let let78 := (binrel% LT.lt let20 let8)
  let let79 := (Not let24)
  let let80 := (Not let16)
  let let81 := (And let40 (And let55 (And let52 (And let80 (And let47 let79)))))
  let let82 := (binrel% HAdd.hAdd let58 skoX)
  let let83 := (binrel% GE.ge let82 let8)
  let let84 := (Not let83)
  let let85 := (binrel% HAdd.hAdd let14 let27)
  let let86 := (binrel% GE.ge let85 let8)
  let let87 := (Not let86)
  let let88 := (And let61 (And let55 (And let52 (And let87 (And let47 let84)))))
  let let89 := (Eq let8 let8)
  let let90 := (Eq skoX skoX)
  let let91 := (Eq let47 let47)
  let let92 := (Eq And And)
  let let93 := (Eq let14 let14)
  let let94 := (Eq let52 let52)
  let let95 := (Eq let55 let55)
  let let96 := (Eq let41 let81)
  let let97 := (Or let42 let44)
  let let98 := (Or let65 let60)
  let let99 := (binrel% LT.lt let21 let66)
  let let100 := (And let78 let77)
  let let101 := (binrel% LT.lt let62 let11)
  let let102 := (And let10 let76)
(Eq let2 let1) → (Eq let7 let3) → (Eq let10 True) → (Eq let11 let3) → (Eq let19 let16) → (Eq let21 let6) → (Eq let25 let24) → (Eq let26 let17) → (Eq let27 let3) → (Eq let28 let18) → (Eq let41 let41) → (Eq let30 let42) → (Eq let43 let14) → (Eq let45 let44) → (Eq let57 let56) → (Eq let58 let3) → (Eq let59 skoX) → (Eq let60 let44) → (Eq let61 True) → (Eq let62 skoX) → (Eq let63 let51) → (Eq let64 let54) → (Eq let65 let42) → (Eq let71 let70) → (Eq let72 False) → (Eq let37 let53) → (Eq let73 True) → (Eq let74 let3) → (Eq let76 let75) → (Eq let66 let3) → (Eq let77 let31) → (Eq let78 True) → let41 → False :=
  let let1 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let2 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let3 := (Rat.ofInt 0)
  let let4 := (Int.ofNat 1)
  let let5 := (Neg.neg let4)
  let let6 := (binrel% HMul.hMul let5 skoX)
  let let7 := (binrel% HAdd.hAdd skoX let6)
  let let8 := (Int.ofNat 0)
  let let9 := (Rat.ofInt 1)
  let let10 := (binrel% GT.gt let9 let8)
  let let11 := (binrel% HMul.hMul let9 let3)
  let let12 := (Int.ofNat 2)
  let let13 := (binrel% HMul.hMul let12 skoA)
  let let14 := (binrel% HMul.hMul let5 pi)
  let let15 := (binrel% HAdd.hAdd let14 let13)
  let let16 := (binrel% GE.ge let15 let8)
  let let17 := (binrel% HDiv.hDiv let4 let12)
  let let18 := (binrel% HMul.hMul let17 pi)
  let let19 := (binrel% LE.le let18 skoA)
  let let20 := (Neg.neg let9)
  let let21 := (binrel% HMul.hMul let20 skoX)
  let let22 := (binrel% HMul.hMul let5 skoA)
  let let23 := (binrel% HAdd.hAdd let22 skoX)
  let let24 := (binrel% GE.ge let23 let8)
  let let25 := (binrel% LE.le skoA skoX)
  let let26 := (binrel% HDiv.hDiv let9 (Rat.ofInt 2))
  let let27 := (binrel% HMul.hMul let12 let3)
  let let28 := (binrel% HMul.hMul pi let17)
  let let29 := (Not let25)
  let let30 := (binrel% LE.le skoX let3)
  let let31 := (Not let30)
  let let32 := (binrel% HMul.hMul pi let26)
  let let33 := (binrel% LE.le let32 skoA)
  let let34 := (Not let33)
  let let35 := (binrel% LE.le let2 pi)
  let let36 := (Not let35)
  let let37 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let38 := (binrel% LE.le pi let37)
  let let39 := (Not let38)
  let let40 := (Eq skoA let3)
  let let41 := (And let40 (And let39 (And let36 (And let34 (And let31 let29)))))
  let let42 := (binrel% GE.ge let6 let8)
  let let43 := (binrel% HAdd.hAdd let14 let3)
  let let44 := (binrel% GE.ge skoX let8)
  let let45 := (binrel% GE.ge skoX let3)
  let let46 := (Not let44)
  let let47 := (Not let42)
  let let48 := (And let47 let46)
  let let49 := (binrel% GE.ge let14 let8)
  let let50 := (Not let49)
  let let51 := (binrel% GE.ge pi let1)
  let let52 := (Not let51)
  let let53 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let54 := (binrel% GE.ge let14 (Neg.neg let53))
  let let55 := (Not let54)
  let let56 := (And let55 (And let52 (And let50 let48)))
  let let57 := (And True let56)
  let let58 := (binrel% HMul.hMul let5 let3)
  let let59 := (binrel% HAdd.hAdd let3 skoX)
  let let60 := (Not let46)
  let let61 := (Eq let3 let3)
  let let62 := (binrel% HMul.hMul let9 skoX)
  let let63 := (binrel% LE.le let1 pi)
  let let64 := (binrel% LE.le pi let53)
  let let65 := (Not let47)
  let let66 := (binrel% HMul.hMul let20 let3)
  let let67 := (binrel% HAdd.hAdd let11 let66)
  let let68 := (binrel% HAdd.hAdd let62 let21)
  let let69 := (binrel% GE.ge let68 let67)
  let let70 := (Not let69)
  let let71 := (binrel% LT.lt let68 let67)
  let let72 := (Not True)
  let let73 := (binrel% GE.ge let3 let3)
  let let74 := (binrel% HAdd.hAdd let3 let3)
  let let75 := (Not let45)
  let let76 := (binrel% LT.lt skoX let3)
  let let77 := (binrel% GT.gt skoX let3)
  let let78 := (binrel% LT.lt let20 let8)
  let let79 := (Not let24)
  let let80 := (Not let16)
  let let81 := (And let40 (And let55 (And let52 (And let80 (And let47 let79)))))
  let let82 := (binrel% HAdd.hAdd let58 skoX)
  let let83 := (binrel% GE.ge let82 let8)
  let let84 := (Not let83)
  let let85 := (binrel% HAdd.hAdd let14 let27)
  let let86 := (binrel% GE.ge let85 let8)
  let let87 := (Not let86)
  let let88 := (And let61 (And let55 (And let52 (And let87 (And let47 let84)))))
  let let89 := (Eq let8 let8)
  let let90 := (Eq skoX skoX)
  let let91 := (Eq let47 let47)
  let let92 := (Eq And And)
  let let93 := (Eq let14 let14)
  let let94 := (Eq let52 let52)
  let let95 := (Eq let55 let55)
  let let96 := (Eq let41 let81)
  let let97 := (Or let42 let44)
  let let98 := (Or let65 let60)
  let let99 := (binrel% LT.lt let21 let66)
  let let100 := (And let78 let77)
  let let101 := (binrel% LT.lt let62 let11)
  let let102 := (And let10 let76)
fun lean_r0 : (Eq let2 let1) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let7 let3) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let10 True) => -- EVALUATE
fun lean_r3 : (Eq let11 let3) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let19 let16) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let21 let6) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let26 let17) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let27 let3) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let28 let18) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let41 let41) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let30 let42) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let43 let14) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let57 let56) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let58 let3) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let59 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let60 let44) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let61 True) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let62 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let63 let51) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let64 let54) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let65 let42) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let71 let70) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let72 False) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let37 let53) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let73 True) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let74 let3) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let76 let75) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let66 let3) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let77 let31) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let78 True) => -- EVALUATE
fun lean_a32 : let41 => by
have lean_s0 : (Or let65 (Or let60 False)) :=
  (scope (fun lean_a33 : let47 =>
    (scope (fun lean_a34 : let46 =>
      have lean_s0 : let10 := by timed trueElim lean_r2
      have lean_s1 : (Eq let75 let46) := by timed flipCongrArg lean_r13 [Not]
      have lean_s2 : (Eq let76 let46) := by timed Eq.trans lean_r28 lean_s1
      have lean_s3 : (Eq let46 let76) := by timed Eq.symm lean_s2
      have lean_s4 : let76 := by timed eqResolve lean_a34 lean_s3
      have lean_s5 : let102 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let102 let101) := by arithMulPos [skoX, let3, let9], 0
      have lean_s7 : let101 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let78 := by timed trueElim lean_r31
      have lean_s9 : (Eq let31 let47) := by timed flipCongrArg lean_r11 [Not]
      have lean_s10 : (Eq let77 let47) := by timed Eq.trans lean_r30 lean_s9
      have lean_s11 : (Eq let47 let77) := by timed Eq.symm lean_s10
      have lean_s12 : let77 := by timed eqResolve lean_a33 lean_s11
      have lean_s13 : let100 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let100 let99) := by arithMulNeg [skoX, let3, let20], 2
      have lean_s15 : let99 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let71 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r19 [HAdd.hAdd]
      have lean_s18 : (Eq let68 let7) := by timed congr lean_s17 lean_r5
      have lean_s19 : (Eq let68 let3) := by timed Eq.trans lean_s18 lean_r1
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r3 [HAdd.hAdd]
      have lean_s22 : (Eq let67 let74) := by timed congr lean_s21 lean_r29
      have lean_s23 : (Eq let67 let3) := by timed Eq.trans lean_s22 lean_r27
      have lean_s24 : (Eq let69 let73) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let69 True) := by timed Eq.trans lean_s24 lean_r26
      have lean_s26 : (Eq let70 let72) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let70 False) := by timed Eq.trans lean_s26 lean_r24
      have lean_s28 : (Eq let71 False) := by timed Eq.trans lean_r23 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not let48) := by liftOrNToNeg lean_s0
have lean_s2 : let98 := by timed flipNotAnd lean_s1 [let47, let46]
let lean_s3 := by timed flipCongrArg lean_r22 [Or]
have lean_s4 : (Eq let98 let97) := by timed congr lean_s3 lean_r17
have lean_s5 : let97 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : let92 := by timed rfl
have lean_s7 : (Eq let40 let40) := by timed rfl
let lean_s8 := by timed congr lean_s6 lean_s7
have lean_s9 : (Eq pi pi) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [LE.le]
have lean_s11 : (Eq let38 let64) := by timed congr lean_s10 lean_r25
have lean_s12 : (Eq let38 let54) := by timed Eq.trans lean_s11 lean_r21
have lean_s13 : (Eq let39 let55) := by timed flipCongrArg lean_s12 [Not]
let lean_s14 := by timed congr lean_s6 lean_s13
let lean_s15 := by timed flipCongrArg lean_r0 [LE.le]
have lean_s16 : (Eq let35 let63) := by timed congr lean_s15 lean_s9
have lean_s17 : (Eq let35 let51) := by timed Eq.trans lean_s16 lean_r20
have lean_s18 : (Eq let36 let52) := by timed flipCongrArg lean_s17 [Not]
let lean_s19 := by timed congr lean_s6 lean_s18
let lean_s20 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s21 : (Eq let32 let28) := by timed congr lean_s20 lean_r7
have lean_s22 : (Eq let32 let18) := by timed Eq.trans lean_s21 lean_r9
let lean_s23 := by timed flipCongrArg lean_s22 [LE.le]
have lean_s24 : (Eq skoA skoA) := by timed rfl
have lean_s25 : (Eq let33 let19) := by timed congr lean_s23 lean_s24
have lean_s26 : (Eq let33 let16) := by timed Eq.trans lean_s25 lean_r4
have lean_s27 : (Eq let34 let80) := by timed flipCongrArg lean_s26 [Not]
let lean_s28 := by timed congr lean_s6 lean_s27
have lean_s29 : (Eq let31 let47) := by timed flipCongrArg lean_r11 [Not]
let lean_s30 := by timed congr lean_s6 lean_s29
have lean_s31 : (Eq let29 let79) := by timed flipCongrArg lean_r6 [Not]
let lean_s32 := by timed congr lean_s30 lean_s31
let lean_s33 := by timed congr lean_s28 lean_s32
let lean_s34 := by timed congr lean_s19 lean_s33
let lean_s35 := by timed congr lean_s14 lean_s34
have lean_s36 : let96 := by timed congr lean_s8 lean_s35
have lean_s37 : let96 := by timed Eq.trans lean_r10 lean_s36
have lean_s38 : let92 := by timed rfl
have lean_s39 : let81 := by timed eqResolve lean_a32 lean_s37
have lean_s40 : let40 := by andElim lean_s39, 0
let lean_s41 := by timed flipCongrArg lean_s40 [Eq]
have lean_s42 : let61 := by timed rfl
have lean_s43 : (Eq let40 let61) := by timed congr lean_s41 lean_s42
let lean_s44 := by timed congr lean_s38 lean_s43
have lean_s45 : let95 := by timed rfl
let lean_s46 := by timed congr lean_s38 lean_s45
have lean_s47 : let94 := by timed rfl
let lean_s48 := by timed congr lean_s38 lean_s47
have lean_s49 : let93 := by timed rfl
let lean_s50 := by timed flipCongrArg lean_s49 [HAdd.hAdd]
have lean_s51 : (Eq let12 let12) := by timed rfl
let lean_s52 := by timed flipCongrArg lean_s51 [HMul.hMul]
have lean_s53 : (Eq let13 let27) := by timed congr lean_s52 lean_s40
have lean_s54 : (Eq let15 let85) := by timed congr lean_s50 lean_s53
let lean_s55 := by timed flipCongrArg lean_s54 [GE.ge]
have lean_s56 : let89 := by timed rfl
have lean_s57 : (Eq let16 let86) := by timed congr lean_s55 lean_s56
have lean_s58 : (Eq let80 let87) := by timed flipCongrArg lean_s57 [Not]
let lean_s59 := by timed congr lean_s38 lean_s58
have lean_s60 : let91 := by timed rfl
let lean_s61 := by timed congr lean_s38 lean_s60
have lean_s62 : (Eq let5 let5) := by timed rfl
let lean_s63 := by timed flipCongrArg lean_s62 [HMul.hMul]
have lean_s64 : (Eq let22 let58) := by timed congr lean_s63 lean_s40
let lean_s65 := by timed flipCongrArg lean_s64 [HAdd.hAdd]
have lean_s66 : let90 := by timed rfl
have lean_s67 : (Eq let23 let82) := by timed congr lean_s65 lean_s66
let lean_s68 := by timed flipCongrArg lean_s67 [GE.ge]
have lean_s69 : (Eq let24 let83) := by timed congr lean_s68 lean_s56
have lean_s70 : (Eq let79 let84) := by timed flipCongrArg lean_s69 [Not]
let lean_s71 := by timed congr lean_s61 lean_s70
let lean_s72 := by timed congr lean_s59 lean_s71
let lean_s73 := by timed congr lean_s48 lean_s72
let lean_s74 := by timed congr lean_s46 lean_s73
have lean_s75 : (Eq let81 let88) := by timed congr lean_s44 lean_s74
have lean_s76 : let92 := by timed rfl
let lean_s77 := by timed congr lean_s76 lean_r18
have lean_s78 : let95 := by timed rfl
let lean_s79 := by timed congr lean_s76 lean_s78
have lean_s80 : let94 := by timed rfl
let lean_s81 := by timed congr lean_s76 lean_s80
have lean_s82 : let93 := by timed rfl
let lean_s83 := by timed flipCongrArg lean_s82 [HAdd.hAdd]
have lean_s84 : (Eq let85 let43) := by timed congr lean_s83 lean_r8
have lean_s85 : (Eq let85 let14) := by timed Eq.trans lean_s84 lean_r12
let lean_s86 := by timed flipCongrArg lean_s85 [GE.ge]
have lean_s87 : let89 := by timed rfl
have lean_s88 : (Eq let86 let49) := by timed congr lean_s86 lean_s87
have lean_s89 : (Eq let87 let50) := by timed flipCongrArg lean_s88 [Not]
let lean_s90 := by timed congr lean_s76 lean_s89
have lean_s91 : let91 := by timed rfl
let lean_s92 := by timed congr lean_s76 lean_s91
let lean_s93 := by timed flipCongrArg lean_r15 [HAdd.hAdd]
have lean_s94 : let90 := by timed rfl
have lean_s95 : (Eq let82 let59) := by timed congr lean_s93 lean_s94
have lean_s96 : (Eq let82 skoX) := by timed Eq.trans lean_s95 lean_r16
let lean_s97 := by timed flipCongrArg lean_s96 [GE.ge]
have lean_s98 : (Eq let83 let44) := by timed congr lean_s97 lean_s87
have lean_s99 : (Eq let84 let46) := by timed flipCongrArg lean_s98 [Not]
let lean_s100 := by timed congr lean_s92 lean_s99
let lean_s101 := by timed congr lean_s90 lean_s100
let lean_s102 := by timed congr lean_s81 lean_s101
let lean_s103 := by timed congr lean_s79 lean_s102
have lean_s104 : (Eq let88 let57) := by timed congr lean_s77 lean_s103
have lean_s105 : (Eq let88 let56) := by timed Eq.trans lean_s104 lean_r14
have lean_s106 : (Eq let81 let56) := by timed Eq.trans lean_s75 lean_s105
have lean_s107 : (Eq let41 let56) := by timed Eq.trans lean_s37 lean_s106
have lean_s108 : let56 := by timed eqResolve lean_a32 lean_s107
have lean_s109 : let46 := by andElim lean_s108, 4
let lean_s110 := by R1 lean_s5, lean_s109, let44, [(- 1), 0]
have lean_s111 : let47 := by andElim lean_s108, 3
exact (show False from by R1 lean_s110, lean_s111, let42, [0, 0])


