open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {pi : Rat}
variable {skoX : Rat}
variable {skoA : Rat}
variable {skoX : Rat}
variable {skoA : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (Int.ofNat 1)
  let let6 := (binrel% HDiv.hDiv let5 (Int.ofNat 2000))
  let let7 := (binrel% HAdd.hAdd skoX (binrel% HMul.hMul (Neg.neg let6) skoA))
  let let8 := (binrel% GE.ge let7 let4)
  let let9 := (Not let8)
  let let10 := (binrel% LT.lt let7 let4)
  let let11 := (Neg.neg let5)
  let let12 := (binrel% HMul.hMul let11 skoX)
  let let13 := (binrel% GE.ge let12 let1)
  let let14 := (binrel% LE.le skoX let4)
  let let15 := (binrel% HDiv.hDiv let5 (Int.ofNat 2))
  let let16 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let17 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2000))
  let let18 := (Neg.neg let2)
  let let19 := (binrel% LT.lt let18 let1)
  let let20 := (binrel% HMul.hMul let6 skoA)
  let let21 := (binrel% HAdd.hAdd let12 let20)
  let let22 := (binrel% GE.ge let21 let1)
  let let23 := (binrel% LE.le skoX let20)
  let let24 := (Not True)
  let let25 := (binrel% GE.ge let7 let1)
  let let26 := (Not let25)
  let let27 := (Not let26)
  let let28 := (binrel% LE.le let7 let4)
  let let29 := (binrel% LE.le let20 skoX)
  let let30 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let31 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let32 := (binrel% GE.ge let4 let4)
  let let33 := (Not let28)
  let let34 := (binrel% GT.gt let7 let4)
  let let35 := (binrel% GE.ge pi let30)
  let let36 := (binrel% LE.le let30 pi)
  let let37 := (binrel% HMul.hMul skoA let6)
  let let38 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let39 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let40 := (binrel% HMul.hMul let15 pi)
  let let41 := (binrel% HMul.hMul pi let15)
  let let42 := (binrel% HMul.hMul let18 let7)
  let let43 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let11 skoA)) let1)
  let let44 := (binrel% LE.le skoA skoX)
  let let45 := (binrel% GE.ge (binrel% HMul.hMul let11 pi) (Neg.neg let38))
  let let46 := (binrel% LE.le pi let38)
  let let47 := (binrel% HAdd.hAdd let4 let4)
  let let48 := (binrel% LE.le pi let39)
  let let49 := (Not let48)
  let let50 := (binrel% LE.le let31 pi)
  let let51 := (Not let50)
  let let52 := (binrel% HMul.hMul pi let16)
  let let53 := (binrel% LE.le let52 skoA)
  let let54 := (Not let53)
  let let55 := (Not let14)
  let let56 := (Not let44)
  let let57 := (binrel% HMul.hMul skoA let17)
  let let58 := (binrel% LE.le skoX let57)
  let let59 := (Not let58)
  let let60 := (binrel% LE.le let57 skoX)
  let let61 := (Not let60)
  let let62 := (Or let61 let59)
  let let63 := (And let61 (And let59 (And let62 (And let56 (And let55 (And let54 (And let51 let49)))))))
  let let64 := (binrel% HMul.hMul let18 let4)
  let let65 := (Not let22)
  let let66 := (Not let65)
  let let67 := (binrel% HAdd.hAdd let7 let21)
  let let68 := (binrel% HMul.hMul let2 let7)
  let let69 := (binrel% HMul.hMul let2 let4)
  let let70 := (binrel% HAdd.hAdd let69 let64)
  let let71 := (binrel% HAdd.hAdd let68 let42)
  let let72 := (binrel% GE.ge let71 let70)
  let let73 := (Not let72)
  let let74 := (binrel% LT.lt let71 let70)
  let let75 := (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg let15) pi)) let1)
  let let76 := (binrel% LE.le let40 skoA)
  let let77 := (Not let45)
  let let78 := (Not let35)
  let let79 := (Not let75)
  let let80 := (Not let13)
  let let81 := (Not let43)
  let let82 := (Or let26 let65)
  let let83 := (And let26 (And let65 (And let82 (And let81 (And let80 (And let79 (And let78 let77)))))))
  let let84 := (Eq let63 let83)
  let let85 := (Or let25 let22)
  let let86 := (Or let27 let66)
  let let87 := (binrel% LT.lt let42 let64)
  let let88 := (And let19 let34)
  let let89 := (binrel% LT.lt let68 let69)
  let let90 := (And let3 let10)
(Eq let3 True) → (Eq let10 let9) → (Eq let14 let13) → (Eq let16 let15) → (Eq let17 let6) → (Eq let19 True) → (Eq let23 let22) → (Eq let24 False) → (Eq let27 let25) → (Eq let28 let22) → (Eq let29 let25) → (Eq let31 let30) → (Eq let32 True) → (Eq let34 let33) → (Eq let36 let35) → (Eq let37 let20) → (Eq let39 let38) → (Eq let41 let40) → (Eq let42 let21) → (Eq let44 let43) → (Eq let46 let45) → (Eq let47 let4) → (Eq let63 let63) → (Eq let64 let4) → (Eq let66 let22) → (Eq let67 let4) → (Eq let68 let7) → (Eq let74 let73) → (Eq let76 let75) → (Eq let69 let4) → (Eq let8 let25) → let63 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Rat.ofInt 0)
  let let5 := (Int.ofNat 1)
  let let6 := (binrel% HDiv.hDiv let5 (Int.ofNat 2000))
  let let7 := (binrel% HAdd.hAdd skoX (binrel% HMul.hMul (Neg.neg let6) skoA))
  let let8 := (binrel% GE.ge let7 let4)
  let let9 := (Not let8)
  let let10 := (binrel% LT.lt let7 let4)
  let let11 := (Neg.neg let5)
  let let12 := (binrel% HMul.hMul let11 skoX)
  let let13 := (binrel% GE.ge let12 let1)
  let let14 := (binrel% LE.le skoX let4)
  let let15 := (binrel% HDiv.hDiv let5 (Int.ofNat 2))
  let let16 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2))
  let let17 := (binrel% HDiv.hDiv let2 (Rat.ofInt 2000))
  let let18 := (Neg.neg let2)
  let let19 := (binrel% LT.lt let18 let1)
  let let20 := (binrel% HMul.hMul let6 skoA)
  let let21 := (binrel% HAdd.hAdd let12 let20)
  let let22 := (binrel% GE.ge let21 let1)
  let let23 := (binrel% LE.le skoX let20)
  let let24 := (Not True)
  let let25 := (binrel% GE.ge let7 let1)
  let let26 := (Not let25)
  let let27 := (Not let26)
  let let28 := (binrel% LE.le let7 let4)
  let let29 := (binrel% LE.le let20 skoX)
  let let30 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let31 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let32 := (binrel% GE.ge let4 let4)
  let let33 := (Not let28)
  let let34 := (binrel% GT.gt let7 let4)
  let let35 := (binrel% GE.ge pi let30)
  let let36 := (binrel% LE.le let30 pi)
  let let37 := (binrel% HMul.hMul skoA let6)
  let let38 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let39 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let40 := (binrel% HMul.hMul let15 pi)
  let let41 := (binrel% HMul.hMul pi let15)
  let let42 := (binrel% HMul.hMul let18 let7)
  let let43 := (binrel% GE.ge (binrel% HAdd.hAdd skoX (binrel% HMul.hMul let11 skoA)) let1)
  let let44 := (binrel% LE.le skoA skoX)
  let let45 := (binrel% GE.ge (binrel% HMul.hMul let11 pi) (Neg.neg let38))
  let let46 := (binrel% LE.le pi let38)
  let let47 := (binrel% HAdd.hAdd let4 let4)
  let let48 := (binrel% LE.le pi let39)
  let let49 := (Not let48)
  let let50 := (binrel% LE.le let31 pi)
  let let51 := (Not let50)
  let let52 := (binrel% HMul.hMul pi let16)
  let let53 := (binrel% LE.le let52 skoA)
  let let54 := (Not let53)
  let let55 := (Not let14)
  let let56 := (Not let44)
  let let57 := (binrel% HMul.hMul skoA let17)
  let let58 := (binrel% LE.le skoX let57)
  let let59 := (Not let58)
  let let60 := (binrel% LE.le let57 skoX)
  let let61 := (Not let60)
  let let62 := (Or let61 let59)
  let let63 := (And let61 (And let59 (And let62 (And let56 (And let55 (And let54 (And let51 let49)))))))
  let let64 := (binrel% HMul.hMul let18 let4)
  let let65 := (Not let22)
  let let66 := (Not let65)
  let let67 := (binrel% HAdd.hAdd let7 let21)
  let let68 := (binrel% HMul.hMul let2 let7)
  let let69 := (binrel% HMul.hMul let2 let4)
  let let70 := (binrel% HAdd.hAdd let69 let64)
  let let71 := (binrel% HAdd.hAdd let68 let42)
  let let72 := (binrel% GE.ge let71 let70)
  let let73 := (Not let72)
  let let74 := (binrel% LT.lt let71 let70)
  let let75 := (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg let15) pi)) let1)
  let let76 := (binrel% LE.le let40 skoA)
  let let77 := (Not let45)
  let let78 := (Not let35)
  let let79 := (Not let75)
  let let80 := (Not let13)
  let let81 := (Not let43)
  let let82 := (Or let26 let65)
  let let83 := (And let26 (And let65 (And let82 (And let81 (And let80 (And let79 (And let78 let77)))))))
  let let84 := (Eq let63 let83)
  let let85 := (Or let25 let22)
  let let86 := (Or let27 let66)
  let let87 := (binrel% LT.lt let42 let64)
  let let88 := (And let19 let34)
  let let89 := (binrel% LT.lt let68 let69)
  let let90 := (And let3 let10)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let10 let9) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let14 let13) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let16 let15) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let17 let6) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let19 True) => -- EVALUATE
fun lean_r6 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let24 False) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let27 let25) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let28 let22) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let29 let25) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let32 True) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let34 let33) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let36 let35) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let37 let20) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let42 let21) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let44 let43) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let46 let45) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let47 let4) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let63 let63) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let64 let4) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let66 let22) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let67 let4) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let68 let7) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let74 let73) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let76 let75) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let69 let4) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let8 let25) => -- THEORY_REWRITE_ARITH
fun lean_a31 : let63 => by
have lean_s0 : (Or let27 (Or let66 False)) :=
  (scope (fun lean_a32 : let26 =>
    (scope (fun lean_a33 : let65 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let9 let26) := by timed flipCongrArg lean_r30 [Not]
      have lean_s2 : (Eq let10 let26) := by timed Eq.trans lean_r1 lean_s1
      have lean_s3 : (Eq let26 let10) := by timed Eq.symm lean_s2
      have lean_s4 : let10 := by timed eqResolve lean_a32 lean_s3
      have lean_s5 : let90 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let90 let89) := by arithMulPos [let7, let4, let2], 0
      have lean_s7 : let89 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let19 := by timed trueElim lean_r5
      have lean_s9 : (Eq let33 let65) := by timed flipCongrArg lean_r9 [Not]
      have lean_s10 : (Eq let34 let65) := by timed Eq.trans lean_r13 lean_s9
      have lean_s11 : (Eq let65 let34) := by timed Eq.symm lean_s10
      have lean_s12 : let34 := by timed eqResolve lean_a33 lean_s11
      have lean_s13 : let88 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let88 let87) := by arithMulNeg [let7, let4, let18], 2
      have lean_s15 : let87 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let74 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r26 [HAdd.hAdd]
      have lean_s18 : (Eq let71 let67) := by timed congr lean_s17 lean_r18
      have lean_s19 : (Eq let71 let4) := by timed Eq.trans lean_s18 lean_r25
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r29 [HAdd.hAdd]
      have lean_s22 : (Eq let70 let47) := by timed congr lean_s21 lean_r23
      have lean_s23 : (Eq let70 let4) := by timed Eq.trans lean_s22 lean_r21
      have lean_s24 : (Eq let72 let32) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let72 True) := by timed Eq.trans lean_s24 lean_r12
      have lean_s26 : (Eq let73 let24) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let73 False) := by timed Eq.trans lean_s26 lean_r7
      have lean_s28 : (Eq let74 False) := by timed Eq.trans lean_r27 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let26 let65)) := by liftOrNToNeg lean_s0
have lean_s2 : let86 := by timed flipNotAnd lean_s1 [let26, let65]
let lean_s3 := by timed flipCongrArg lean_r8 [Or]
have lean_s4 : (Eq let86 let85) := by timed congr lean_s3 lean_r24
have lean_s5 : let85 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
have lean_s7 : (Eq skoA skoA) := by timed rfl
let lean_s8 := by timed flipCongrArg lean_s7 [HMul.hMul]
have lean_s9 : (Eq let57 let37) := by timed congr lean_s8 lean_r4
have lean_s10 : (Eq let57 let20) := by timed Eq.trans lean_s9 lean_r15
let lean_s11 := by timed flipCongrArg lean_s10 [LE.le]
have lean_s12 : (Eq skoX skoX) := by timed rfl
have lean_s13 : (Eq let60 let29) := by timed congr lean_s11 lean_s12
have lean_s14 : (Eq let60 let25) := by timed Eq.trans lean_s13 lean_r10
have lean_s15 : (Eq let61 let26) := by timed flipCongrArg lean_s14 [Not]
let lean_s16 := by timed congr lean_s6 lean_s15
let lean_s17 := by timed flipCongrArg lean_s12 [LE.le]
have lean_s18 : (Eq let58 let23) := by timed congr lean_s17 lean_s10
have lean_s19 : (Eq let58 let22) := by timed Eq.trans lean_s18 lean_r6
have lean_s20 : (Eq let59 let65) := by timed flipCongrArg lean_s19 [Not]
let lean_s21 := by timed congr lean_s6 lean_s20
let lean_s22 := by timed flipCongrArg lean_s15 [Or]
have lean_s23 : (Eq let62 let82) := by timed congr lean_s22 lean_s20
let lean_s24 := by timed congr lean_s6 lean_s23
have lean_s25 : (Eq let56 let81) := by timed flipCongrArg lean_r19 [Not]
let lean_s26 := by timed congr lean_s6 lean_s25
have lean_s27 : (Eq let55 let80) := by timed flipCongrArg lean_r2 [Not]
let lean_s28 := by timed congr lean_s6 lean_s27
have lean_s29 : (Eq pi pi) := by timed rfl
let lean_s30 := by timed flipCongrArg lean_s29 [HMul.hMul]
have lean_s31 : (Eq let52 let41) := by timed congr lean_s30 lean_r3
have lean_s32 : (Eq let52 let40) := by timed Eq.trans lean_s31 lean_r17
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq let53 let76) := by timed congr lean_s33 lean_s7
have lean_s35 : (Eq let53 let75) := by timed Eq.trans lean_s34 lean_r28
have lean_s36 : (Eq let54 let79) := by timed flipCongrArg lean_s35 [Not]
let lean_s37 := by timed congr lean_s6 lean_s36
let lean_s38 := by timed flipCongrArg lean_r11 [LE.le]
have lean_s39 : (Eq let50 let36) := by timed congr lean_s38 lean_s29
have lean_s40 : (Eq let50 let35) := by timed Eq.trans lean_s39 lean_r14
have lean_s41 : (Eq let51 let78) := by timed flipCongrArg lean_s40 [Not]
let lean_s42 := by timed congr lean_s6 lean_s41
let lean_s43 := by timed flipCongrArg lean_s29 [LE.le]
have lean_s44 : (Eq let48 let46) := by timed congr lean_s43 lean_r16
have lean_s45 : (Eq let48 let45) := by timed Eq.trans lean_s44 lean_r20
have lean_s46 : (Eq let49 let77) := by timed flipCongrArg lean_s45 [Not]
let lean_s47 := by timed congr lean_s42 lean_s46
let lean_s48 := by timed congr lean_s37 lean_s47
let lean_s49 := by timed congr lean_s28 lean_s48
let lean_s50 := by timed congr lean_s26 lean_s49
let lean_s51 := by timed congr lean_s24 lean_s50
let lean_s52 := by timed congr lean_s21 lean_s51
have lean_s53 : let84 := by timed congr lean_s16 lean_s52
have lean_s54 : let84 := by timed Eq.trans lean_r22 lean_s53
have lean_s55 : let83 := by timed eqResolve lean_a31 lean_s54
have lean_s56 : let65 := by andElim lean_s55, 1
let lean_s57 := by R1 lean_s5, lean_s56, let22, [(- 1), 0]
have lean_s58 : let26 := by andElim lean_s55, 0
exact (show False from by R1 lean_s57, lean_s58, let25, [0, 0])


