open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoA : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {pi : Rat}
variable {skoA : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% GE.ge skoA let1)
  let let3 := (Not let2)
  let let4 := (binrel% LT.lt skoA let1)
  let let5 := (Int.ofNat 0)
  let let6 := (binrel% GE.ge skoA let5)
  let let7 := (Rat.ofInt 1)
  let let8 := (binrel% HMul.hMul let7 let1)
  let let9 := (Neg.neg let7)
  let let10 := (binrel% HMul.hMul let9 let1)
  let let11 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let10 let8))
  let let12 := (binrel% HMul.hMul let7 skoA)
  let let13 := (binrel% HMul.hMul let9 skoX)
  let let14 := (Int.ofNat 1)
  let let15 := (Neg.neg let14)
  let let16 := (binrel% HMul.hMul let15 skoX)
  let let17 := (binrel% HAdd.hAdd skoA let16)
  let let18 := (binrel% HMul.hMul let9 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let13 let12))
  let let20 := (binrel% GE.ge let19 let11)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt let19 let11)
  let let23 := (binrel% HAdd.hAdd (binrel% HMul.hMul let15 skoA) skoX)
  let let24 := (binrel% LE.le skoX let1)
  let let25 := (Not let24)
  let let26 := (binrel% GT.gt skoX let1)
  let let27 := (binrel% GE.ge let23 let5)
  let let28 := (Eq let27 let27)
  let let29 := (binrel% LE.le let1 skoA)
  let let30 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let31 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let32 := (Int.ofNat 2)
  let let33 := (binrel% HMul.hMul let15 pi)
  let let34 := (binrel% GE.ge (binrel% HAdd.hAdd let33 (binrel% HMul.hMul let32 skoA)) let5)
  let let35 := (binrel% HDiv.hDiv let14 let32)
  let let36 := (binrel% HMul.hMul let35 pi)
  let let37 := (binrel% LE.le let36 skoA)
  let let38 := (Not let6)
  let let39 := (Not let38)
  let let40 := (Eq let6 let39)
  let let41 := (Eq let39 let6)
  let let42 := (binrel% GE.ge let1 let1)
  let let43 := (binrel% HDiv.hDiv let7 (Rat.ofInt 2))
  let let44 := (binrel% HMul.hMul pi let35)
  let let45 := (binrel% GE.ge let16 let5)
  let let46 := (Not let45)
  let let47 := (Not let46)
  let let48 := (Eq let45 let47)
  let let49 := (Eq let47 let45)
  let let50 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let51 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let52 := (binrel% GE.ge let33 (Neg.neg let50))
  let let53 := (binrel% LE.le pi let50)
  let let54 := (binrel% GT.gt let7 let5)
  let let55 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1))
  let let56 := (binrel% LE.le skoA skoX)
  let let57 := (binrel% GE.ge pi let30)
  let let58 := (binrel% LE.le let30 pi)
  let let59 := (Not let27)
  let let60 := (Not let59)
  let let61 := (Eq let27 let60)
  let let62 := (Eq let60 let27)
  let let63 := (Eq let45 let45)
  let let64 := (Eq let6 let6)
  let let65 := (Not let56)
  let let66 := (binrel% HMul.hMul pi let43)
  let let67 := (binrel% LE.le let66 skoA)
  let let68 := (Not let67)
  let let69 := (binrel% LE.le let31 pi)
  let let70 := (Not let69)
  let let71 := (binrel% LE.le pi let51)
  let let72 := (Not let71)
  let let73 := (Not let29)
  let let74 := (And let73 (And let72 (And let70 (And let68 (And let25 let65)))))
  let let75 := (Not True)
  let let76 := (binrel% LT.lt let9 let5)
  let let77 := (binrel% LE.le let17 let1)
  let let78 := (Not let77)
  let let79 := (binrel% GT.gt let17 let1)
  let let80 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let16 skoA))
  let let81 := (And let46 let59)
  let let82 := (Not let34)
  let let83 := (Not let57)
  let let84 := (Not let52)
  let let85 := (And let38 (And let84 (And let83 (And let82 let81))))
  let let86 := (Eq let74 let85)
  let let87 := (Or let6 (Or let45 let27))
  let let88 := (Or let39 (Or let47 let60))
  let let89 := (Not let79)
  let let90 := (binrel% LT.lt let12 let8)
  let let91 := (And let54 let4)
  let let92 := (binrel% LT.lt let13 let10)
  let let93 := (And let76 let26)
  let let94 := (binrel% LT.lt let18 let10)
  let let95 := (And let76 let79)
(Eq let4 let3) → (Eq let2 let6) → (Eq let22 let21) → (Eq let18 let23) → (Eq let13 let16) → (Eq let26 let25) → (Eq let28 True) → (Eq let29 let6) → (Eq let31 let30) → (Eq let37 let34) → (Eq let41 let40) → (Eq let42 True) → (Eq let43 let35) → (Eq let10 let1) → (Eq let44 let36) → (Eq let49 let48) → (Eq let51 let50) → (Eq let53 let52) → (Eq let54 True) → (Eq let55 let1) → (Eq let56 let27) → (Eq let58 let57) → (Eq let62 let61) → (Eq let63 True) → let49 → (Eq let64 True) → (Eq let74 let74) → (Eq let24 let45) → (Eq let75 False) → let41 → (Eq let76 True) → (Eq let77 let27) → let62 → (Eq let79 let78) → (Eq let80 let1) → (Eq let8 let1) → (Eq let12 skoA) → let74 → False :=
  let let1 := (Rat.ofInt 0)
  let let2 := (binrel% GE.ge skoA let1)
  let let3 := (Not let2)
  let let4 := (binrel% LT.lt skoA let1)
  let let5 := (Int.ofNat 0)
  let let6 := (binrel% GE.ge skoA let5)
  let let7 := (Rat.ofInt 1)
  let let8 := (binrel% HMul.hMul let7 let1)
  let let9 := (Neg.neg let7)
  let let10 := (binrel% HMul.hMul let9 let1)
  let let11 := (binrel% HAdd.hAdd let10 (binrel% HAdd.hAdd let10 let8))
  let let12 := (binrel% HMul.hMul let7 skoA)
  let let13 := (binrel% HMul.hMul let9 skoX)
  let let14 := (Int.ofNat 1)
  let let15 := (Neg.neg let14)
  let let16 := (binrel% HMul.hMul let15 skoX)
  let let17 := (binrel% HAdd.hAdd skoA let16)
  let let18 := (binrel% HMul.hMul let9 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let13 let12))
  let let20 := (binrel% GE.ge let19 let11)
  let let21 := (Not let20)
  let let22 := (binrel% LT.lt let19 let11)
  let let23 := (binrel% HAdd.hAdd (binrel% HMul.hMul let15 skoA) skoX)
  let let24 := (binrel% LE.le skoX let1)
  let let25 := (Not let24)
  let let26 := (binrel% GT.gt skoX let1)
  let let27 := (binrel% GE.ge let23 let5)
  let let28 := (Eq let27 let27)
  let let29 := (binrel% LE.le let1 skoA)
  let let30 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let31 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let32 := (Int.ofNat 2)
  let let33 := (binrel% HMul.hMul let15 pi)
  let let34 := (binrel% GE.ge (binrel% HAdd.hAdd let33 (binrel% HMul.hMul let32 skoA)) let5)
  let let35 := (binrel% HDiv.hDiv let14 let32)
  let let36 := (binrel% HMul.hMul let35 pi)
  let let37 := (binrel% LE.le let36 skoA)
  let let38 := (Not let6)
  let let39 := (Not let38)
  let let40 := (Eq let6 let39)
  let let41 := (Eq let39 let6)
  let let42 := (binrel% GE.ge let1 let1)
  let let43 := (binrel% HDiv.hDiv let7 (Rat.ofInt 2))
  let let44 := (binrel% HMul.hMul pi let35)
  let let45 := (binrel% GE.ge let16 let5)
  let let46 := (Not let45)
  let let47 := (Not let46)
  let let48 := (Eq let45 let47)
  let let49 := (Eq let47 let45)
  let let50 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let51 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let52 := (binrel% GE.ge let33 (Neg.neg let50))
  let let53 := (binrel% LE.le pi let50)
  let let54 := (binrel% GT.gt let7 let5)
  let let55 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let1 let1))
  let let56 := (binrel% LE.le skoA skoX)
  let let57 := (binrel% GE.ge pi let30)
  let let58 := (binrel% LE.le let30 pi)
  let let59 := (Not let27)
  let let60 := (Not let59)
  let let61 := (Eq let27 let60)
  let let62 := (Eq let60 let27)
  let let63 := (Eq let45 let45)
  let let64 := (Eq let6 let6)
  let let65 := (Not let56)
  let let66 := (binrel% HMul.hMul pi let43)
  let let67 := (binrel% LE.le let66 skoA)
  let let68 := (Not let67)
  let let69 := (binrel% LE.le let31 pi)
  let let70 := (Not let69)
  let let71 := (binrel% LE.le pi let51)
  let let72 := (Not let71)
  let let73 := (Not let29)
  let let74 := (And let73 (And let72 (And let70 (And let68 (And let25 let65)))))
  let let75 := (Not True)
  let let76 := (binrel% LT.lt let9 let5)
  let let77 := (binrel% LE.le let17 let1)
  let let78 := (Not let77)
  let let79 := (binrel% GT.gt let17 let1)
  let let80 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let16 skoA))
  let let81 := (And let46 let59)
  let let82 := (Not let34)
  let let83 := (Not let57)
  let let84 := (Not let52)
  let let85 := (And let38 (And let84 (And let83 (And let82 let81))))
  let let86 := (Eq let74 let85)
  let let87 := (Or let6 (Or let45 let27))
  let let88 := (Or let39 (Or let47 let60))
  let let89 := (Not let79)
  let let90 := (binrel% LT.lt let12 let8)
  let let91 := (And let54 let4)
  let let92 := (binrel% LT.lt let13 let10)
  let let93 := (And let76 let26)
  let let94 := (binrel% LT.lt let18 let10)
  let let95 := (And let76 let79)
fun lean_r0 : (Eq let4 let3) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let2 let6) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let18 let23) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let13 let16) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let26 let25) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let28 True) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let29 let6) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let37 let34) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let41 let40) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let42 True) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let43 let35) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let10 let1) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let44 let36) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let49 let48) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let53 let52) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let54 True) => -- EVALUATE
fun lean_r19 : (Eq let55 let1) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let56 let27) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let58 let57) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let62 let61) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let63 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : let49 => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let64 True) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let74 let74) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let24 let45) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let75 False) => -- THEORY_REWRITE_BOOL
fun lean_r29 : let41 => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let76 True) => -- EVALUATE
fun lean_r31 : (Eq let77 let27) => -- THEORY_REWRITE_ARITH
fun lean_r32 : let62 => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let79 let78) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let80 let1) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let8 let1) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let12 skoA) => -- THEORY_REWRITE_ARITH
fun lean_a37 : let74 => by
have lean_s0 : (Or let39 (Or let47 (Or let60 False))) :=
  (scope (fun lean_a38 : let38 =>
    (scope (fun lean_a39 : let46 =>
      (scope (fun lean_a40 : let59 =>
        have lean_s0 : (Eq let78 let59) := by timed flipCongrArg lean_r31 [Not]
        have lean_s1 : (Eq let79 let59) := by timed Eq.trans lean_r33 lean_s0
        have lean_s2 : (Eq let59 let79) := by timed Eq.symm lean_s1
        have lean_s3 : let79 := by timed eqResolve lean_a40 lean_s2
        have lean_s4 : (Or let89 False) :=
          (scope (fun lean_a41 : let79 =>
            have lean_s4 : let76 := by timed trueElim lean_r30
            have lean_s5 : let95 := by timed And.intro lean_s4 lean_a41
            have lean_s6 : (Implies let95 let94) := by arithMulNeg [let17, let1, let9], 2
            have lean_s7 : let94 := by timed modusPonens lean_s5 lean_s6
            have lean_s8 : (Eq let25 let46) := by timed flipCongrArg lean_r27 [Not]
            have lean_s9 : (Eq let26 let46) := by timed Eq.trans lean_r5 lean_s8
            have lean_s10 : (Eq let46 let26) := by timed Eq.symm lean_s9
            have lean_s11 : let26 := by timed eqResolve lean_a39 lean_s10
            have lean_s12 : let93 := by timed And.intro lean_s4 lean_s11
            have lean_s13 : (Implies let93 let92) := by arithMulNeg [skoX, let1, let9], 2
            have lean_s14 : let92 := by timed modusPonens lean_s12 lean_s13
            have lean_s15 : let54 := by timed trueElim lean_r18
            have lean_s16 : (Eq let3 let38) := by timed flipCongrArg lean_r1 [Not]
            have lean_s17 : (Eq let4 let38) := by timed Eq.trans lean_r0 lean_s16
            have lean_s18 : (Eq let38 let4) := by timed Eq.symm lean_s17
            have lean_s19 : let4 := by timed eqResolve lean_a38 lean_s18
            have lean_s20 : let91 := by timed And.intro lean_s15 lean_s19
            have lean_s21 : (Implies let91 let90) := by arithMulPos [skoA, let1, let7], 0
            have lean_s22 : let90 := by timed modusPonens lean_s20 lean_s21
            have lean_s23 : let22 := by sumBounds [lean_s7, lean_s14, lean_s22]
            let lean_s24 := by timed congrHAdd lean_r4 lean_r36
            have lean_s25 : (Eq let19 let80) := by timed congrHAdd lean_r3 lean_s24
            have lean_s26 : (Eq let19 let1) := by timed Eq.trans lean_s25 lean_r34
            let lean_s27 := by timed flipCongrArg lean_s26 [GE.ge]
            let lean_s28 := by timed congrHAdd lean_r13 lean_r35
            have lean_s29 : (Eq let11 let55) := by timed congrHAdd lean_r13 lean_s28
            have lean_s30 : (Eq let11 let1) := by timed Eq.trans lean_s29 lean_r19
            have lean_s31 : (Eq let20 let42) := by timed congr lean_s27 lean_s30
            have lean_s32 : (Eq let20 True) := by timed Eq.trans lean_s31 lean_r11
            have lean_s33 : (Eq let21 let75) := by timed flipCongrArg lean_s32 [Not]
            have lean_s34 : (Eq let21 False) := by timed Eq.trans lean_s33 lean_r28
            have lean_s35 : (Eq let22 False) := by timed Eq.trans lean_r2 lean_s34
            show False from by timed eqResolve lean_s23 lean_s35
          ))
        have lean_s5 : let89 := by liftOrNToNeg lean_s4
        have lean_s6 : (Eq let89 let60) := by timed flipCongrArg lean_s1 [Not]
        have lean_s7 : (Eq let89 let27) := by timed Eq.trans lean_s6 lean_r32
        have lean_s8 : (Eq let27 let77) := by timed Eq.symm lean_r31
        have lean_s9 : (Eq let89 let77) := by timed Eq.trans lean_s7 lean_s8
        have lean_s10 : let77 := by timed eqResolve lean_s5 lean_s9
        have lean_s11 : (Eq let27 let89) := by timed Eq.symm lean_s7
        have lean_s12 : (Eq let77 let89) := by timed Eq.trans lean_r31 lean_s11
        have lean_s13 : let89 := by timed eqResolve lean_s10 lean_s12
        show False from by timed contradiction lean_s3 lean_s13
  ))))))
have lean_s1 : (Not (And let38 let81)) := by liftOrNToNeg lean_s0
have lean_s2 : let88 := by timed flipNotAnd lean_s1 [let38, let46, let59]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let64 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let40 let64) := by timed congr lean_s5 lean_r29
have lean_s7 : (Eq let40 True) := by timed Eq.trans lean_s6 lean_r25
have lean_s8 : (Eq let41 True) := by timed Eq.trans lean_r10 lean_s7
have lean_s9 : let41 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let63 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let48 let63) := by timed congr lean_s12 lean_r24
have lean_s14 : (Eq let48 True) := by timed Eq.trans lean_s13 lean_r23
have lean_s15 : (Eq let49 True) := by timed Eq.trans lean_r15 lean_s14
have lean_s16 : let49 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let28 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let61 let28) := by timed congr lean_s19 lean_r32
have lean_s21 : (Eq let61 True) := by timed Eq.trans lean_s20 lean_r6
have lean_s22 : (Eq let62 True) := by timed Eq.trans lean_r22 lean_s21
have lean_s23 : let62 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s17 lean_s23
have lean_s25 : (Eq let88 let87) := by timed congr lean_s10 lean_s24
have lean_s26 : let87 := by timed eqResolve lean_s2 lean_s25
have lean_s27 : (Eq And And) := by timed rfl
have lean_s28 : (Eq let73 let38) := by timed flipCongrArg lean_r7 [Not]
let lean_s29 := by timed congr lean_s27 lean_s28
have lean_s30 : (Eq pi pi) := by timed rfl
let lean_s31 := by timed flipCongrArg lean_s30 [LE.le]
have lean_s32 : (Eq let71 let53) := by timed congr lean_s31 lean_r16
have lean_s33 : (Eq let71 let52) := by timed Eq.trans lean_s32 lean_r17
have lean_s34 : (Eq let72 let84) := by timed flipCongrArg lean_s33 [Not]
let lean_s35 := by timed congr lean_s27 lean_s34
let lean_s36 := by timed flipCongrArg lean_r8 [LE.le]
have lean_s37 : (Eq let69 let58) := by timed congr lean_s36 lean_s30
have lean_s38 : (Eq let69 let57) := by timed Eq.trans lean_s37 lean_r21
have lean_s39 : (Eq let70 let83) := by timed flipCongrArg lean_s38 [Not]
let lean_s40 := by timed congr lean_s27 lean_s39
let lean_s41 := by timed flipCongrArg lean_s30 [HMul.hMul]
have lean_s42 : (Eq let66 let44) := by timed congr lean_s41 lean_r12
have lean_s43 : (Eq let66 let36) := by timed Eq.trans lean_s42 lean_r14
let lean_s44 := by timed flipCongrArg lean_s43 [LE.le]
have lean_s45 : (Eq skoA skoA) := by timed rfl
have lean_s46 : (Eq let67 let37) := by timed congr lean_s44 lean_s45
have lean_s47 : (Eq let67 let34) := by timed Eq.trans lean_s46 lean_r9
have lean_s48 : (Eq let68 let82) := by timed flipCongrArg lean_s47 [Not]
let lean_s49 := by timed congr lean_s27 lean_s48
have lean_s50 : (Eq let25 let46) := by timed flipCongrArg lean_r27 [Not]
let lean_s51 := by timed congr lean_s27 lean_s50
have lean_s52 : (Eq let65 let59) := by timed flipCongrArg lean_r20 [Not]
let lean_s53 := by timed congr lean_s51 lean_s52
let lean_s54 := by timed congr lean_s49 lean_s53
let lean_s55 := by timed congr lean_s40 lean_s54
let lean_s56 := by timed congr lean_s35 lean_s55
have lean_s57 : let86 := by timed congr lean_s29 lean_s56
have lean_s58 : let86 := by timed Eq.trans lean_r26 lean_s57
have lean_s59 : let85 := by timed eqResolve lean_a37 lean_s58
have lean_s60 : let59 := by andElim lean_s59, 5
let lean_s61 := by R1 lean_s26, lean_s60, let27, [(- 1), 0]
have lean_s62 : let46 := by andElim lean_s59, 4
let lean_s63 := by R1 lean_s61, lean_s62, let45, [(- 1), 0]
have lean_s64 : let38 := by andElim lean_s59, 0
exact (show False from by R1 lean_s63, lean_s64, let6, [0, 0])


