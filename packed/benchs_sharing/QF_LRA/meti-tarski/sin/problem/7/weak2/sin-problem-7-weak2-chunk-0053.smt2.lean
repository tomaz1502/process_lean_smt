open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoA : Rat}
variable {pi : Rat}
variable {skoX : Rat}
variable {skoA : Rat}
variable {pi : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 2000)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (binrel% GE.ge skoA let5)
  let let10 := (Not let9)
  let let11 := (binrel% LT.lt skoA let5)
  let let12 := (Rat.ofInt 1)
  let let13 := (binrel% HMul.hMul let12 let5)
  let let14 := (binrel% HMul.hMul let3 let5)
  let let15 := (Neg.neg let12)
  let let16 := (binrel% HMul.hMul let15 let5)
  let let17 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let14 let13))
  let let18 := (binrel% HMul.hMul let12 skoA)
  let let19 := (binrel% HMul.hMul let3 skoX)
  let let20 := (Int.ofNat 2000)
  let let21 := (binrel% HMul.hMul (Neg.neg let20) skoX)
  let let22 := (binrel% HAdd.hAdd skoA let21)
  let let23 := (binrel% HMul.hMul let15 let22)
  let let24 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let19 let18))
  let let25 := (binrel% GE.ge let24 let17)
  let let26 := (Not let25)
  let let27 := (binrel% LT.lt let24 let17)
  let let28 := (Int.ofNat 1)
  let let29 := (Neg.neg let28)
  let let30 := (binrel% HMul.hMul let29 skoA)
  let let31 := (binrel% HAdd.hAdd let30 (binrel% HMul.hMul let20 skoX))
  let let32 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let21 skoA))
  let let33 := (binrel% HAdd.hAdd let5 let5)
  let let34 := (binrel% HAdd.hAdd let5 let33)
  let let35 := (binrel% GE.ge skoA let1)
  let let36 := (Not let35)
  let let37 := (Not let36)
  let let38 := (Eq let35 let37)
  let let39 := (Eq let37 let35)
  let let40 := (binrel% GE.ge (binrel% HMul.hMul let29 skoX) let1)
  let let41 := (Not let40)
  let let42 := (Not let41)
  let let43 := (Eq let40 let42)
  let let44 := (Eq let42 let40)
  let let45 := (Eq let40 let40)
  let let46 := (binrel% GT.gt let12 let1)
  let let47 := (binrel% GE.ge let22 let5)
  let let48 := (Not let47)
  let let49 := (binrel% LT.lt let22 let5)
  let let50 := (binrel% HDiv.hDiv let28 let20)
  let let51 := (binrel% HMul.hMul let50 skoA)
  let let52 := (binrel% HMul.hMul skoA let50)
  let let53 := (binrel% GE.ge let22 let1)
  let let54 := (binrel% LE.le skoX let51)
  let let55 := (binrel% HDiv.hDiv let28 (Int.ofNat 2))
  let let56 := (binrel% HMul.hMul let55 pi)
  let let57 := (binrel% HMul.hMul pi let55)
  let let58 := (binrel% GE.ge let31 let1)
  let let59 := (binrel% LE.le let51 skoX)
  let let60 := (Not let58)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le let22 let5)
  let let63 := (binrel% GE.ge let5 let5)
  let let64 := (Not let62)
  let let65 := (binrel% GT.gt let22 let5)
  let let66 := (Eq let35 let35)
  let let67 := (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg let55) pi)) let1)
  let let68 := (binrel% LE.le let56 skoA)
  let let69 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let70 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let71 := (binrel% HDiv.hDiv let12 let2)
  let let72 := (binrel% GE.ge pi let69)
  let let73 := (binrel% LE.le let69 pi)
  let let74 := (binrel% HDiv.hDiv let12 (Rat.ofInt 2))
  let let75 := (binrel% GE.ge (binrel% HAdd.hAdd let30 skoX) let1)
  let let76 := (binrel% LE.le skoA skoX)
  let let77 := (binrel% HAdd.hAdd let13 let16)
  let let78 := (binrel% HMul.hMul let12 let22)
  let let79 := (binrel% HAdd.hAdd let78 let23)
  let let80 := (binrel% GE.ge let79 let77)
  let let81 := (Not let80)
  let let82 := (binrel% LT.lt let79 let77)
  let let83 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let84 := (binrel% GE.ge (binrel% HMul.hMul let29 pi) (Neg.neg let83))
  let let85 := (binrel% LE.le pi let83)
  let let86 := (binrel% LE.le let5 skoA)
  let let87 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let88 := (Not True)
  let let89 := (binrel% LE.le pi let87)
  let let90 := (Not let89)
  let let91 := (binrel% LE.le let70 pi)
  let let92 := (Not let91)
  let let93 := (binrel% HMul.hMul pi let74)
  let let94 := (binrel% LE.le let93 skoA)
  let let95 := (Not let94)
  let let96 := (Not let76)
  let let97 := (binrel% HMul.hMul skoA let71)
  let let98 := (binrel% LE.le skoX let97)
  let let99 := (Not let98)
  let let100 := (binrel% LE.le let97 skoX)
  let let101 := (Not let100)
  let let102 := (Or let101 let99)
  let let103 := (Not let86)
  let let104 := (And let103 (And let101 (And let102 (And let96 (And let7 (And let95 (And let92 let90)))))))
  let let105 := (Not let53)
  let let106 := (Not let105)
  let let107 := (binrel% HAdd.hAdd let22 let31)
  let let108 := (binrel% LT.lt let15 let1)
  let let109 := (Not let84)
  let let110 := (Not let72)
  let let111 := (Not let67)
  let let112 := (Not let75)
  let let113 := (Or let60 let105)
  let let114 := (And let36 (And let60 (And let113 (And let112 (And let41 (And let111 (And let110 let109)))))))
  let let115 := (Eq let104 let114)
  let let116 := (Or let58 let53)
  let let117 := (Or let61 let106)
  let let118 := (binrel% LT.lt let23 let16)
  let let119 := (And let108 let65)
  let let120 := (binrel% LT.lt let78 let13)
  let let121 := (And let46 let49)
  let let122 := (Eq let105 let49)
  let let123 := (Or let35 (Or let40 let105))
  let let124 := (Or let37 (Or let42 let105))
  let let125 := (binrel% LT.lt let18 let13)
  let let126 := (And let46 let11)
  let let127 := (binrel% LT.lt let19 let14)
  let let128 := (And let4 let8)
  let let129 := (binrel% LE.le let23 let16)
  let let130 := (And let108 let47)
(Eq let4 True) → (Eq let8 let7) → (Eq let11 let10) → (Eq let27 let26) → (Eq let19 let21) → (Eq let18 skoA) → (Eq let32 let5) → (Eq let34 let5) → (Eq let39 let38) → let39 → (Eq let44 let43) → (Eq let45 True) → (Eq let46 True) → (Eq let49 let48) → (Eq let52 let51) → (Eq let54 let53) → (Eq let57 let56) → (Eq let47 let53) → (Eq let13 let5) → (Eq let6 let40) → (Eq let59 let58) → (Eq let61 let58) → (Eq let62 let58) → (Eq let63 True) → (Eq let65 let64) → (Eq let66 True) → (Eq let68 let67) → (Eq let70 let69) → (Eq let14 let5) → let44 → (Eq let71 let50) → (Eq let73 let72) → (Eq let74 let55) → (Eq let23 let31) → (Eq let76 let75) → (Eq let9 let35) → (Eq let82 let81) → (Eq let85 let84) → (Eq let86 let35) → (Eq let87 let83) → (Eq let88 False) → (Eq let33 let5) → (Eq let104 let104) → (Eq let16 let5) → (Eq let106 let53) → (Eq let107 let5) → (Eq let78 let22) → (Eq let108 True) → let104 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 2000)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% LE.le skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoX let5)
  let let9 := (binrel% GE.ge skoA let5)
  let let10 := (Not let9)
  let let11 := (binrel% LT.lt skoA let5)
  let let12 := (Rat.ofInt 1)
  let let13 := (binrel% HMul.hMul let12 let5)
  let let14 := (binrel% HMul.hMul let3 let5)
  let let15 := (Neg.neg let12)
  let let16 := (binrel% HMul.hMul let15 let5)
  let let17 := (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let14 let13))
  let let18 := (binrel% HMul.hMul let12 skoA)
  let let19 := (binrel% HMul.hMul let3 skoX)
  let let20 := (Int.ofNat 2000)
  let let21 := (binrel% HMul.hMul (Neg.neg let20) skoX)
  let let22 := (binrel% HAdd.hAdd skoA let21)
  let let23 := (binrel% HMul.hMul let15 let22)
  let let24 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let19 let18))
  let let25 := (binrel% GE.ge let24 let17)
  let let26 := (Not let25)
  let let27 := (binrel% LT.lt let24 let17)
  let let28 := (Int.ofNat 1)
  let let29 := (Neg.neg let28)
  let let30 := (binrel% HMul.hMul let29 skoA)
  let let31 := (binrel% HAdd.hAdd let30 (binrel% HMul.hMul let20 skoX))
  let let32 := (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let21 skoA))
  let let33 := (binrel% HAdd.hAdd let5 let5)
  let let34 := (binrel% HAdd.hAdd let5 let33)
  let let35 := (binrel% GE.ge skoA let1)
  let let36 := (Not let35)
  let let37 := (Not let36)
  let let38 := (Eq let35 let37)
  let let39 := (Eq let37 let35)
  let let40 := (binrel% GE.ge (binrel% HMul.hMul let29 skoX) let1)
  let let41 := (Not let40)
  let let42 := (Not let41)
  let let43 := (Eq let40 let42)
  let let44 := (Eq let42 let40)
  let let45 := (Eq let40 let40)
  let let46 := (binrel% GT.gt let12 let1)
  let let47 := (binrel% GE.ge let22 let5)
  let let48 := (Not let47)
  let let49 := (binrel% LT.lt let22 let5)
  let let50 := (binrel% HDiv.hDiv let28 let20)
  let let51 := (binrel% HMul.hMul let50 skoA)
  let let52 := (binrel% HMul.hMul skoA let50)
  let let53 := (binrel% GE.ge let22 let1)
  let let54 := (binrel% LE.le skoX let51)
  let let55 := (binrel% HDiv.hDiv let28 (Int.ofNat 2))
  let let56 := (binrel% HMul.hMul let55 pi)
  let let57 := (binrel% HMul.hMul pi let55)
  let let58 := (binrel% GE.ge let31 let1)
  let let59 := (binrel% LE.le let51 skoX)
  let let60 := (Not let58)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le let22 let5)
  let let63 := (binrel% GE.ge let5 let5)
  let let64 := (Not let62)
  let let65 := (binrel% GT.gt let22 let5)
  let let66 := (Eq let35 let35)
  let let67 := (binrel% GE.ge (binrel% HAdd.hAdd skoA (binrel% HMul.hMul (Neg.neg let55) pi)) let1)
  let let68 := (binrel% LE.le let56 skoA)
  let let69 := (binrel% HDiv.hDiv (Int.ofNat 31415927) (Int.ofNat 10000000))
  let let70 := (binrel% HDiv.hDiv (Rat.ofInt 31415927) (Rat.ofInt 10000000))
  let let71 := (binrel% HDiv.hDiv let12 let2)
  let let72 := (binrel% GE.ge pi let69)
  let let73 := (binrel% LE.le let69 pi)
  let let74 := (binrel% HDiv.hDiv let12 (Rat.ofInt 2))
  let let75 := (binrel% GE.ge (binrel% HAdd.hAdd let30 skoX) let1)
  let let76 := (binrel% LE.le skoA skoX)
  let let77 := (binrel% HAdd.hAdd let13 let16)
  let let78 := (binrel% HMul.hMul let12 let22)
  let let79 := (binrel% HAdd.hAdd let78 let23)
  let let80 := (binrel% GE.ge let79 let77)
  let let81 := (Not let80)
  let let82 := (binrel% LT.lt let79 let77)
  let let83 := (binrel% HDiv.hDiv (Int.ofNat 15707963) (Int.ofNat 5000000))
  let let84 := (binrel% GE.ge (binrel% HMul.hMul let29 pi) (Neg.neg let83))
  let let85 := (binrel% LE.le pi let83)
  let let86 := (binrel% LE.le let5 skoA)
  let let87 := (binrel% HDiv.hDiv (Rat.ofInt 15707963) (Rat.ofInt 5000000))
  let let88 := (Not True)
  let let89 := (binrel% LE.le pi let87)
  let let90 := (Not let89)
  let let91 := (binrel% LE.le let70 pi)
  let let92 := (Not let91)
  let let93 := (binrel% HMul.hMul pi let74)
  let let94 := (binrel% LE.le let93 skoA)
  let let95 := (Not let94)
  let let96 := (Not let76)
  let let97 := (binrel% HMul.hMul skoA let71)
  let let98 := (binrel% LE.le skoX let97)
  let let99 := (Not let98)
  let let100 := (binrel% LE.le let97 skoX)
  let let101 := (Not let100)
  let let102 := (Or let101 let99)
  let let103 := (Not let86)
  let let104 := (And let103 (And let101 (And let102 (And let96 (And let7 (And let95 (And let92 let90)))))))
  let let105 := (Not let53)
  let let106 := (Not let105)
  let let107 := (binrel% HAdd.hAdd let22 let31)
  let let108 := (binrel% LT.lt let15 let1)
  let let109 := (Not let84)
  let let110 := (Not let72)
  let let111 := (Not let67)
  let let112 := (Not let75)
  let let113 := (Or let60 let105)
  let let114 := (And let36 (And let60 (And let113 (And let112 (And let41 (And let111 (And let110 let109)))))))
  let let115 := (Eq let104 let114)
  let let116 := (Or let58 let53)
  let let117 := (Or let61 let106)
  let let118 := (binrel% LT.lt let23 let16)
  let let119 := (And let108 let65)
  let let120 := (binrel% LT.lt let78 let13)
  let let121 := (And let46 let49)
  let let122 := (Eq let105 let49)
  let let123 := (Or let35 (Or let40 let105))
  let let124 := (Or let37 (Or let42 let105))
  let let125 := (binrel% LT.lt let18 let13)
  let let126 := (And let46 let11)
  let let127 := (binrel% LT.lt let19 let14)
  let let128 := (And let4 let8)
  let let129 := (binrel% LE.le let23 let16)
  let let130 := (And let108 let47)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let11 let10) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let19 let21) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let18 skoA) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let32 let5) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let34 let5) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let39 let38) => -- THEORY_REWRITE_BOOL
fun lean_r9 : let39 => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let44 let43) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let45 True) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let46 True) => -- EVALUATE
fun lean_r13 : (Eq let49 let48) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let52 let51) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let54 let53) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let57 let56) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let47 let53) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let13 let5) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let6 let40) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let59 let58) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let61 let58) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let62 let58) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let63 True) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let65 let64) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let66 True) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let68 let67) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let70 let69) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let14 let5) => -- THEORY_REWRITE_ARITH
fun lean_r29 : let44 => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let71 let50) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let73 let72) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let74 let55) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let23 let31) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let76 let75) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let9 let35) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let82 let81) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let85 let84) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let86 let35) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let87 let83) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let88 False) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let33 let5) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let104 let104) => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq let16 let5) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let106 let53) => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let107 let5) => -- THEORY_REWRITE_ARITH
fun lean_r46 : (Eq let78 let22) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let108 True) => -- EVALUATE
fun lean_a48 : let104 => by
have lean_s0 : (Or let37 (Or let42 (Or let105 False))) :=
  (scope (fun lean_a49 : let36 =>
    (scope (fun lean_a50 : let41 =>
      (scope (fun lean_a51 : let53 =>
        have lean_s0 : (Eq let53 let47) := by timed Eq.symm lean_r17
        have lean_s1 : let47 := by timed eqResolve lean_a51 lean_s0
        have lean_s2 : (Or let48 False) :=
          (scope (fun lean_a52 : let47 =>
            have lean_s2 : let108 := by timed trueElim lean_r47
            have lean_s3 : let130 := by timed And.intro lean_s2 lean_a52
            have lean_s4 : (Implies let130 let129) := by arithMulNeg [let22, let5, let15], 3
            have lean_s5 : let129 := by timed modusPonens lean_s3 lean_s4
            have lean_s6 : let4 := by timed trueElim lean_r0
            have lean_s7 : (Eq let7 let41) := by timed flipCongrArg lean_r19 [Not]
            have lean_s8 : (Eq let8 let41) := by timed Eq.trans lean_r1 lean_s7
            have lean_s9 : (Eq let41 let8) := by timed Eq.symm lean_s8
            have lean_s10 : let8 := by timed eqResolve lean_a50 lean_s9
            have lean_s11 : let128 := by timed And.intro lean_s6 lean_s10
            have lean_s12 : (Implies let128 let127) := by arithMulNeg [skoX, let5, let3], 2
            have lean_s13 : let127 := by timed modusPonens lean_s11 lean_s12
            have lean_s14 : let46 := by timed trueElim lean_r12
            have lean_s15 : (Eq let10 let36) := by timed flipCongrArg lean_r35 [Not]
            have lean_s16 : (Eq let11 let36) := by timed Eq.trans lean_r2 lean_s15
            have lean_s17 : (Eq let36 let11) := by timed Eq.symm lean_s16
            have lean_s18 : let11 := by timed eqResolve lean_a49 lean_s17
            have lean_s19 : let126 := by timed And.intro lean_s14 lean_s18
            have lean_s20 : (Implies let126 let125) := by arithMulPos [skoA, let5, let12], 0
            have lean_s21 : let125 := by timed modusPonens lean_s19 lean_s20
            have lean_s22 : let27 := by sumBounds [lean_s5, lean_s13, lean_s21]
            let lean_s23 := by timed congrHAdd lean_r4 lean_r5
            have lean_s24 : (Eq let24 let32) := by timed congrHAdd lean_r33 lean_s23
            have lean_s25 : (Eq let24 let5) := by timed Eq.trans lean_s24 lean_r6
            let lean_s26 := by timed flipCongrArg lean_s25 [GE.ge]
            let lean_s27 := by timed congrHAdd lean_r28 lean_r18
            have lean_s28 : (Eq let17 let34) := by timed congrHAdd lean_r43 lean_s27
            have lean_s29 : (Eq let17 let5) := by timed Eq.trans lean_s28 lean_r7
            have lean_s30 : (Eq let25 let63) := by timed congr lean_s26 lean_s29
            have lean_s31 : (Eq let25 True) := by timed Eq.trans lean_s30 lean_r23
            have lean_s32 : (Eq let26 let88) := by timed flipCongrArg lean_s31 [Not]
            have lean_s33 : (Eq let26 False) := by timed Eq.trans lean_s32 lean_r40
            have lean_s34 : (Eq let27 False) := by timed Eq.trans lean_r3 lean_s33
            show False from by timed eqResolve lean_s22 lean_s34
          ))
        have lean_s3 : let48 := by liftOrNToNeg lean_s2
        have lean_s4 : (Eq let48 let105) := by timed flipCongrArg lean_r17 [Not]
        have lean_s5 : (Eq let49 let105) := by timed Eq.trans lean_r13 lean_s4
        have lean_s6 : let122 := by timed Eq.symm lean_s5
        have lean_s7 : (Eq let48 let49) := by timed Eq.trans lean_s4 lean_s6
        have lean_s8 : let49 := by timed eqResolve lean_s3 lean_s7
        have lean_s9 : let48 := by timed eqResolve lean_s8 lean_r13
        show False from by timed contradiction lean_s1 lean_s9
  ))))))
have lean_s1 : (Not (And let36 (And let41 let53))) := by liftOrNToNeg lean_s0
have lean_s2 : let124 := by timed flipNotAnd lean_s1 [let36, let41, let53]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let66 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let38 let66) := by timed congr lean_s5 lean_r9
have lean_s7 : (Eq let38 True) := by timed Eq.trans lean_s6 lean_r25
have lean_s8 : (Eq let39 True) := by timed Eq.trans lean_r8 lean_s7
have lean_s9 : let39 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let45 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let43 let45) := by timed congr lean_s12 lean_r29
have lean_s14 : (Eq let43 True) := by timed Eq.trans lean_s13 lean_r11
have lean_s15 : (Eq let44 True) := by timed Eq.trans lean_r10 lean_s14
have lean_s16 : let44 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq let105 let105) := by timed rfl
let lean_s19 := by timed congr lean_s17 lean_s18
have lean_s20 : (Eq let124 let123) := by timed congr lean_s10 lean_s19
have lean_s21 : let123 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let35 (Or let105 let40)) := by permutateOr lean_s21, [0, 2, 1], (- 1)
have lean_s23 : (Or let61 (Or let106 False)) :=
  (scope (fun lean_a53 : let60 =>
    (scope (fun lean_a54 : let105 =>
      have lean_s23 : let46 := by timed trueElim lean_r12
      have lean_s24 : (Eq let48 let105) := by timed flipCongrArg lean_r17 [Not]
      have lean_s25 : (Eq let49 let105) := by timed Eq.trans lean_r13 lean_s24
      have lean_s26 : let122 := by timed Eq.symm lean_s25
      have lean_s27 : let49 := by timed eqResolve lean_a54 lean_s26
      have lean_s28 : let121 := by timed And.intro lean_s23 lean_s27
      have lean_s29 : (Implies let121 let120) := by arithMulPos [let22, let5, let12], 0
      have lean_s30 : let120 := by timed modusPonens lean_s28 lean_s29
      have lean_s31 : let108 := by timed trueElim lean_r47
      have lean_s32 : (Eq let64 let60) := by timed flipCongrArg lean_r22 [Not]
      have lean_s33 : (Eq let65 let60) := by timed Eq.trans lean_r24 lean_s32
      have lean_s34 : (Eq let60 let65) := by timed Eq.symm lean_s33
      have lean_s35 : let65 := by timed eqResolve lean_a53 lean_s34
      have lean_s36 : let119 := by timed And.intro lean_s31 lean_s35
      have lean_s37 : (Implies let119 let118) := by arithMulNeg [let22, let5, let15], 2
      have lean_s38 : let118 := by timed modusPonens lean_s36 lean_s37
      have lean_s39 : let82 := by sumBounds [lean_s30, lean_s38]
      let lean_s40 := by timed flipCongrArg lean_r46 [HAdd.hAdd]
      have lean_s41 : (Eq let79 let107) := by timed congr lean_s40 lean_r33
      have lean_s42 : (Eq let79 let5) := by timed Eq.trans lean_s41 lean_r45
      let lean_s43 := by timed flipCongrArg lean_s42 [GE.ge]
      let lean_s44 := by timed flipCongrArg lean_r18 [HAdd.hAdd]
      have lean_s45 : (Eq let77 let33) := by timed congr lean_s44 lean_r43
      have lean_s46 : (Eq let77 let5) := by timed Eq.trans lean_s45 lean_r41
      have lean_s47 : (Eq let80 let63) := by timed congr lean_s43 lean_s46
      have lean_s48 : (Eq let80 True) := by timed Eq.trans lean_s47 lean_r23
      have lean_s49 : (Eq let81 let88) := by timed flipCongrArg lean_s48 [Not]
      have lean_s50 : (Eq let81 False) := by timed Eq.trans lean_s49 lean_r40
      have lean_s51 : (Eq let82 False) := by timed Eq.trans lean_r36 lean_s50
      show False from by timed eqResolve lean_s39 lean_s51
  ))))
have lean_s24 : (Not (And let60 let105)) := by liftOrNToNeg lean_s23
have lean_s25 : let117 := by timed flipNotAnd lean_s24 [let60, let105]
let lean_s26 := by timed flipCongrArg lean_r21 [Or]
have lean_s27 : (Eq let117 let116) := by timed congr lean_s26 lean_r44
have lean_s28 : let116 := by timed eqResolve lean_s25 lean_s27
have lean_s29 : (Eq And And) := by timed rfl
have lean_s30 : (Eq let103 let36) := by timed flipCongrArg lean_r38 [Not]
let lean_s31 := by timed congr lean_s29 lean_s30
have lean_s32 : (Eq skoA skoA) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [HMul.hMul]
have lean_s34 : (Eq let97 let52) := by timed congr lean_s33 lean_r30
have lean_s35 : (Eq let97 let51) := by timed Eq.trans lean_s34 lean_r14
let lean_s36 := by timed flipCongrArg lean_s35 [LE.le]
have lean_s37 : (Eq skoX skoX) := by timed rfl
have lean_s38 : (Eq let100 let59) := by timed congr lean_s36 lean_s37
have lean_s39 : (Eq let100 let58) := by timed Eq.trans lean_s38 lean_r20
have lean_s40 : (Eq let101 let60) := by timed flipCongrArg lean_s39 [Not]
let lean_s41 := by timed congr lean_s29 lean_s40
let lean_s42 := by timed flipCongrArg lean_s40 [Or]
let lean_s43 := by timed flipCongrArg lean_s37 [LE.le]
have lean_s44 : (Eq let98 let54) := by timed congr lean_s43 lean_s35
have lean_s45 : (Eq let98 let53) := by timed Eq.trans lean_s44 lean_r15
have lean_s46 : (Eq let99 let105) := by timed flipCongrArg lean_s45 [Not]
have lean_s47 : (Eq let102 let113) := by timed congr lean_s42 lean_s46
let lean_s48 := by timed congr lean_s29 lean_s47
have lean_s49 : (Eq let96 let112) := by timed flipCongrArg lean_r34 [Not]
let lean_s50 := by timed congr lean_s29 lean_s49
have lean_s51 : (Eq let7 let41) := by timed flipCongrArg lean_r19 [Not]
let lean_s52 := by timed congr lean_s29 lean_s51
have lean_s53 : (Eq pi pi) := by timed rfl
let lean_s54 := by timed flipCongrArg lean_s53 [HMul.hMul]
have lean_s55 : (Eq let93 let57) := by timed congr lean_s54 lean_r32
have lean_s56 : (Eq let93 let56) := by timed Eq.trans lean_s55 lean_r16
let lean_s57 := by timed flipCongrArg lean_s56 [LE.le]
have lean_s58 : (Eq let94 let68) := by timed congr lean_s57 lean_s32
have lean_s59 : (Eq let94 let67) := by timed Eq.trans lean_s58 lean_r26
have lean_s60 : (Eq let95 let111) := by timed flipCongrArg lean_s59 [Not]
let lean_s61 := by timed congr lean_s29 lean_s60
let lean_s62 := by timed flipCongrArg lean_r27 [LE.le]
have lean_s63 : (Eq let91 let73) := by timed congr lean_s62 lean_s53
have lean_s64 : (Eq let91 let72) := by timed Eq.trans lean_s63 lean_r31
have lean_s65 : (Eq let92 let110) := by timed flipCongrArg lean_s64 [Not]
let lean_s66 := by timed congr lean_s29 lean_s65
let lean_s67 := by timed flipCongrArg lean_s53 [LE.le]
have lean_s68 : (Eq let89 let85) := by timed congr lean_s67 lean_r39
have lean_s69 : (Eq let89 let84) := by timed Eq.trans lean_s68 lean_r37
have lean_s70 : (Eq let90 let109) := by timed flipCongrArg lean_s69 [Not]
let lean_s71 := by timed congr lean_s66 lean_s70
let lean_s72 := by timed congr lean_s61 lean_s71
let lean_s73 := by timed congr lean_s52 lean_s72
let lean_s74 := by timed congr lean_s50 lean_s73
let lean_s75 := by timed congr lean_s48 lean_s74
let lean_s76 := by timed congr lean_s41 lean_s75
have lean_s77 : let115 := by timed congr lean_s31 lean_s76
have lean_s78 : let115 := by timed Eq.trans lean_r42 lean_s77
have lean_s79 : let114 := by timed eqResolve lean_a48 lean_s78
have lean_s80 : let60 := by andElim lean_s79, 1
have lean_s81 : let53 := by R1 lean_s28, lean_s80, let58, [(- 1), 0]
let lean_s82 := by R2 lean_s22, lean_s81, let53, [(- 1), 0]
have lean_s83 : let41 := by andElim lean_s79, 4
let lean_s84 := by R1 lean_s82, lean_s83, let40, [(- 1), 0]
have lean_s85 : let36 := by andElim lean_s79, 0
exact (show False from by R1 lean_s84, lean_s85, let35, [0, 0])


