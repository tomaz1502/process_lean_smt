open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}

theorem th0 :
  let let1 := (Int.ofNat 10)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoZ let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoZ let3)
  let let7 := (Int.ofNat 0)
  let let8 := (Rat.ofInt 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% LT.lt let9 let7)
  let let11 := (binrel% HMul.hMul let9 let3)
  let let12 := (Rat.ofInt 0)
  let let13 := (binrel% HMul.hMul let8 let12)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let11 let11)))
  let let15 := (binrel% HMul.hMul let9 skoY)
  let let16 := (binrel% HMul.hMul let9 skoX)
  let let17 := (binrel% HMul.hMul let9 skoZ)
  let let18 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let19 := (binrel% HMul.hMul let8 let18)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 let15)))
  let let21 := (binrel% GE.ge let20 let14)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let20 let14)
  let let24 := (binrel% GT.gt let8 let7)
  let let25 := (Neg.neg let2)
  let let26 := (binrel% HMul.hMul let25 skoZ)
  let let27 := (binrel% HMul.hMul let25 skoX)
  let let28 := (binrel% HMul.hMul let25 skoY)
  let let29 := (binrel% HAdd.hAdd let27 let28)
  let let30 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let26 let29))
  let let31 := (Neg.neg let3)
  let let32 := (binrel% GE.ge let26 let31)
  let let33 := (Not let32)
  let let34 := (Not let33)
  let let35 := (Eq let32 let34)
  let let36 := (Eq let34 let32)
  let let37 := (binrel% LE.le let18 let12)
  let let38 := (Not let37)
  let let39 := (binrel% GT.gt let18 let12)
  let let40 := (Eq let39 let38)
  let let41 := (binrel% HMul.hMul skoY let9)
  let let42 := (Eq let41 let28)
  let let43 := (Int.ofNat 3)
  let let44 := (binrel% GE.ge skoZ let43)
  let let45 := (Rat.ofInt 3)
  let let46 := (binrel% LE.le let45 skoZ)
  let let47 := (binrel% GE.ge let28 let31)
  let let48 := (Eq let47 let47)
  let let49 := (binrel% LE.le skoY let3)
  let let50 := (Not let49)
  let let51 := (binrel% GT.gt skoY let3)
  let let52 := (binrel% HAdd.hAdd let28 let27)
  let let53 := (binrel% GE.ge (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 let26)) let7)
  let let54 := (binrel% LE.le skoZ let52)
  let let55 := (binrel% HMul.hMul skoX let9)
  let let56 := (Eq let55 let27)
  let let57 := (binrel% GE.ge let27 let31)
  let let58 := (binrel% LE.le skoX let3)
  let let59 := (binrel% HDiv.hDiv let8 (Rat.ofInt 10))
  let let60 := (binrel% LE.le skoZ let59)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le skoY let59)
  let let63 := (Not let62)
  let let64 := (binrel% LE.le skoX let59)
  let let65 := (Not let64)
  let let66 := (Not let46)
  let let67 := (binrel% LE.le let45 skoY)
  let let68 := (Not let67)
  let let69 := (binrel% LE.le let45 skoX)
  let let70 := (Not let69)
  let let71 := (binrel% HAdd.hAdd let55 let41)
  let let72 := (binrel% LE.le skoZ let71)
  let let73 := (And let72 (And let70 (And let68 (And let66 (And let65 (And let63 let61))))))
  let let74 := (Eq let57 let57)
  let let75 := (Not let58)
  let let76 := (binrel% GT.gt skoX let3)
  let let77 := (binrel% GE.ge skoX let43)
  let let78 := (Eq let32 let32)
  let let79 := (Not let57)
  let let80 := (Not let79)
  let let81 := (Eq let80 let57)
  let let82 := (Eq let57 let80)
  let let83 := (Not True)
  let let84 := (Not let47)
  let let85 := (Not let84)
  let let86 := (Eq let85 let47)
  let let87 := (binrel% GE.ge skoY let43)
  let let88 := (Eq let47 let85)
  let let89 := (Neg.neg (binrel% HDiv.hDiv let43 let1))
  let let90 := (binrel% GE.ge let12 let89)
  let let91 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let31 let31)))
  let let92 := (Not let44)
  let let93 := (Not let87)
  let let94 := (Not let77)
  let let95 := (And let53 (And let94 (And let93 (And let92 (And let79 (And let84 let33))))))
  let let96 := (Eq let73 let95)
  let let97 := (Not let53)
  let let98 := (Or let32 let97)
  let let99 := (Or let47 (Or let57 let98))
  let let100 := (Or let85 (Or let80 (Or let34 let97)))
  let let101 := (binrel% LT.lt let15 let11)
  let let102 := (And let10 let51)
  let let103 := (binrel% LT.lt let16 let11)
  let let104 := (And let10 let76)
  let let105 := (binrel% LT.lt let17 let11)
  let let106 := (And let10 let6)
  let let107 := (binrel% LE.le let19 let13)
  let let108 := (And let24 let37)
(Eq let6 let5) → (Eq let10 True) → (Eq let23 let22) → (Eq let24 True) → (Eq let19 let18) → (Eq let17 let26) → (Eq let16 let27) → (Eq let15 let28) → (Eq let30 let12) → (Eq let36 let35) → let40 → (Eq let11 let31) → let42 → (Eq let46 let44) → (Eq let48 True) → (Eq let51 let50) → (Eq let29 let52) → (Eq let54 let53) → let36 → (Eq let37 let53) → let56 → (Eq let9 let9) → (Eq let13 let12) → (Eq let58 let57) → (Eq let49 let47) → (Eq let73 let73) → (Eq let74 True) → (Eq let76 let75) → (Eq let59 let3) → (Eq let69 let77) → (Eq let4 let32) → (Eq let78 True) → let81 → (Eq let81 let82) → (Eq let83 False) → let86 → (Eq let67 let87) → (Eq let86 let88) → (Eq let90 True) → (Eq let91 let89) → let73 → False :=
  let let1 := (Int.ofNat 10)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoZ let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoZ let3)
  let let7 := (Int.ofNat 0)
  let let8 := (Rat.ofInt 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% LT.lt let9 let7)
  let let11 := (binrel% HMul.hMul let9 let3)
  let let12 := (Rat.ofInt 0)
  let let13 := (binrel% HMul.hMul let8 let12)
  let let14 := (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let11 let11)))
  let let15 := (binrel% HMul.hMul let9 skoY)
  let let16 := (binrel% HMul.hMul let9 skoX)
  let let17 := (binrel% HMul.hMul let9 skoZ)
  let let18 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let19 := (binrel% HMul.hMul let8 let18)
  let let20 := (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let16 let15)))
  let let21 := (binrel% GE.ge let20 let14)
  let let22 := (Not let21)
  let let23 := (binrel% LT.lt let20 let14)
  let let24 := (binrel% GT.gt let8 let7)
  let let25 := (Neg.neg let2)
  let let26 := (binrel% HMul.hMul let25 skoZ)
  let let27 := (binrel% HMul.hMul let25 skoX)
  let let28 := (binrel% HMul.hMul let25 skoY)
  let let29 := (binrel% HAdd.hAdd let27 let28)
  let let30 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let26 let29))
  let let31 := (Neg.neg let3)
  let let32 := (binrel% GE.ge let26 let31)
  let let33 := (Not let32)
  let let34 := (Not let33)
  let let35 := (Eq let32 let34)
  let let36 := (Eq let34 let32)
  let let37 := (binrel% LE.le let18 let12)
  let let38 := (Not let37)
  let let39 := (binrel% GT.gt let18 let12)
  let let40 := (Eq let39 let38)
  let let41 := (binrel% HMul.hMul skoY let9)
  let let42 := (Eq let41 let28)
  let let43 := (Int.ofNat 3)
  let let44 := (binrel% GE.ge skoZ let43)
  let let45 := (Rat.ofInt 3)
  let let46 := (binrel% LE.le let45 skoZ)
  let let47 := (binrel% GE.ge let28 let31)
  let let48 := (Eq let47 let47)
  let let49 := (binrel% LE.le skoY let3)
  let let50 := (Not let49)
  let let51 := (binrel% GT.gt skoY let3)
  let let52 := (binrel% HAdd.hAdd let28 let27)
  let let53 := (binrel% GE.ge (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 let26)) let7)
  let let54 := (binrel% LE.le skoZ let52)
  let let55 := (binrel% HMul.hMul skoX let9)
  let let56 := (Eq let55 let27)
  let let57 := (binrel% GE.ge let27 let31)
  let let58 := (binrel% LE.le skoX let3)
  let let59 := (binrel% HDiv.hDiv let8 (Rat.ofInt 10))
  let let60 := (binrel% LE.le skoZ let59)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le skoY let59)
  let let63 := (Not let62)
  let let64 := (binrel% LE.le skoX let59)
  let let65 := (Not let64)
  let let66 := (Not let46)
  let let67 := (binrel% LE.le let45 skoY)
  let let68 := (Not let67)
  let let69 := (binrel% LE.le let45 skoX)
  let let70 := (Not let69)
  let let71 := (binrel% HAdd.hAdd let55 let41)
  let let72 := (binrel% LE.le skoZ let71)
  let let73 := (And let72 (And let70 (And let68 (And let66 (And let65 (And let63 let61))))))
  let let74 := (Eq let57 let57)
  let let75 := (Not let58)
  let let76 := (binrel% GT.gt skoX let3)
  let let77 := (binrel% GE.ge skoX let43)
  let let78 := (Eq let32 let32)
  let let79 := (Not let57)
  let let80 := (Not let79)
  let let81 := (Eq let80 let57)
  let let82 := (Eq let57 let80)
  let let83 := (Not True)
  let let84 := (Not let47)
  let let85 := (Not let84)
  let let86 := (Eq let85 let47)
  let let87 := (binrel% GE.ge skoY let43)
  let let88 := (Eq let47 let85)
  let let89 := (Neg.neg (binrel% HDiv.hDiv let43 let1))
  let let90 := (binrel% GE.ge let12 let89)
  let let91 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let31 (binrel% HAdd.hAdd let31 let31)))
  let let92 := (Not let44)
  let let93 := (Not let87)
  let let94 := (Not let77)
  let let95 := (And let53 (And let94 (And let93 (And let92 (And let79 (And let84 let33))))))
  let let96 := (Eq let73 let95)
  let let97 := (Not let53)
  let let98 := (Or let32 let97)
  let let99 := (Or let47 (Or let57 let98))
  let let100 := (Or let85 (Or let80 (Or let34 let97)))
  let let101 := (binrel% LT.lt let15 let11)
  let let102 := (And let10 let51)
  let let103 := (binrel% LT.lt let16 let11)
  let let104 := (And let10 let76)
  let let105 := (binrel% LT.lt let17 let11)
  let let106 := (And let10 let6)
  let let107 := (binrel% LE.le let19 let13)
  let let108 := (And let24 let37)
fun lean_r0 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let10 True) => -- EVALUATE
fun lean_r2 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let24 True) => -- EVALUATE
fun lean_r4 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let17 let26) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let16 let27) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let15 let28) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let30 let12) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let36 let35) => -- THEORY_REWRITE_BOOL
fun lean_r10 : let40 => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let11 let31) => -- THEORY_REWRITE_ARITH
fun lean_r12 : let42 => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let46 let44) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let48 True) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let29 let52) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let54 let53) => -- THEORY_REWRITE_ARITH
fun lean_r18 : let36 => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let37 let53) => -- THEORY_REWRITE_ARITH
fun lean_r20 : let56 => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let9 let9) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let58 let57) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let49 let47) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let73 let73) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let74 True) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let76 let75) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let59 let3) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let69 let77) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let4 let32) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let78 True) => -- THEORY_REWRITE_BOOL
fun lean_r32 : let81 => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let81 let82) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let83 False) => -- THEORY_REWRITE_BOOL
fun lean_r35 : let86 => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let67 let87) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let86 let88) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let90 True) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let91 let89) => -- THEORY_REWRITE_ARITH
fun lean_a40 : let73 => by
have lean_s0 : (Or let85 (Or let80 (Or let34 (Or let97 False)))) :=
  (scope (fun lean_a41 : let84 =>
    (scope (fun lean_a42 : let79 =>
      (scope (fun lean_a43 : let33 =>
        (scope (fun lean_a44 : let53 =>
          have lean_s0 : (Eq let53 let37) := by timed Eq.symm lean_r19
          have lean_s1 : let37 := by timed eqResolve lean_a44 lean_s0
          have lean_s2 : (Or let38 False) :=
            (scope (fun lean_a45 : let37 =>
              have lean_s2 : let24 := by timed trueElim lean_r3
              have lean_s3 : let108 := by timed And.intro lean_s2 lean_a45
              have lean_s4 : (Implies let108 let107) := by arithMulPos [let18, let12, let8], 1
              have lean_s5 : let107 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let10 := by timed trueElim lean_r1
              have lean_s7 : (Eq let5 let33) := by timed flipCongrArg lean_r30 [Not]
              have lean_s8 : (Eq let6 let33) := by timed Eq.trans lean_r0 lean_s7
              have lean_s9 : (Eq let33 let6) := by timed Eq.symm lean_s8
              have lean_s10 : let6 := by timed eqResolve lean_a43 lean_s9
              have lean_s11 : let106 := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies let106 let105) := by arithMulNeg [skoZ, let3, let9], 2
              have lean_s13 : let105 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let75 let79) := by timed flipCongrArg lean_r23 [Not]
              have lean_s15 : (Eq let76 let79) := by timed Eq.trans lean_r27 lean_s14
              have lean_s16 : (Eq let79 let76) := by timed Eq.symm lean_s15
              have lean_s17 : let76 := by timed eqResolve lean_a42 lean_s16
              have lean_s18 : let104 := by timed And.intro lean_s6 lean_s17
              have lean_s19 : (Implies let104 let103) := by arithMulNeg [skoX, let3, let9], 2
              have lean_s20 : let103 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : (Eq let50 let84) := by timed flipCongrArg lean_r24 [Not]
              have lean_s22 : (Eq let51 let84) := by timed Eq.trans lean_r15 lean_s21
              have lean_s23 : (Eq let84 let51) := by timed Eq.symm lean_s22
              have lean_s24 : let51 := by timed eqResolve lean_a41 lean_s23
              have lean_s25 : let102 := by timed And.intro lean_s6 lean_s24
              have lean_s26 : (Implies let102 let101) := by arithMulNeg [skoY, let3, let9], 2
              have lean_s27 : let101 := by timed modusPonens lean_s25 lean_s26
              have lean_s28 : let23 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27]
              let lean_s29 := by timed congrHAdd lean_r6 lean_r7
              let lean_s30 := by timed congrHAdd lean_r5 lean_s29
              have lean_s31 : (Eq let20 let30) := by timed congrHAdd lean_r4 lean_s30
              have lean_s32 : (Eq let20 let12) := by timed Eq.trans lean_s31 lean_r8
              let lean_s33 := by timed flipCongrArg lean_s32 [GE.ge]
              let lean_s34 := by timed congrHAdd lean_r11 lean_r11
              let lean_s35 := by timed congrHAdd lean_r11 lean_s34
              have lean_s36 : (Eq let14 let91) := by timed congrHAdd lean_r22 lean_s35
              have lean_s37 : (Eq let14 let89) := by timed Eq.trans lean_s36 lean_r39
              have lean_s38 : (Eq let21 let90) := by timed congr lean_s33 lean_s37
              have lean_s39 : (Eq let21 True) := by timed Eq.trans lean_s38 lean_r38
              have lean_s40 : (Eq let22 let83) := by timed flipCongrArg lean_s39 [Not]
              have lean_s41 : (Eq let22 False) := by timed Eq.trans lean_s40 lean_r34
              have lean_s42 : (Eq let23 False) := by timed Eq.trans lean_r2 lean_s41
              show False from by timed eqResolve lean_s28 lean_s42
            ))
          have lean_s3 : let38 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let38 let97) := by timed flipCongrArg lean_r19 [Not]
          have lean_s5 : (Eq let39 let97) := by timed Eq.trans lean_r10 lean_s4
          have lean_s6 : (Eq let97 let39) := by timed Eq.symm lean_s5
          have lean_s7 : (Eq let38 let39) := by timed Eq.trans lean_s4 lean_s6
          have lean_s8 : let39 := by timed eqResolve lean_s3 lean_s7
          have lean_s9 : (Eq let97 let38) := by timed Eq.symm lean_s4
          have lean_s10 : let40 := by timed Eq.trans lean_s5 lean_s9
          have lean_s11 : let38 := by timed eqResolve lean_s8 lean_s10
          show False from by timed contradiction lean_s1 lean_s11
  ))))))))
have lean_s1 : (Not (And let84 (And let79 (And let33 let53)))) := by liftOrNToNeg lean_s0
have lean_s2 : let100 := by timed flipNotAnd lean_s1 [let84, let79, let33, let53]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let48 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let88 let48) := by timed congr lean_s5 lean_r35
have lean_s7 : (Eq let88 True) := by timed Eq.trans lean_s6 lean_r14
have lean_s8 : (Eq let86 True) := by timed Eq.trans lean_r37 lean_s7
have lean_s9 : let86 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let74 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let82 let74) := by timed congr lean_s12 lean_r32
have lean_s14 : (Eq let82 True) := by timed Eq.trans lean_s13 lean_r26
have lean_s15 : (Eq let81 True) := by timed Eq.trans lean_r33 lean_s14
have lean_s16 : let81 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let78 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let35 let78) := by timed congr lean_s19 lean_r18
have lean_s21 : (Eq let35 True) := by timed Eq.trans lean_s20 lean_r31
have lean_s22 : (Eq let36 True) := by timed Eq.trans lean_r9 lean_s21
have lean_s23 : let36 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : (Eq let97 let97) := by timed rfl
let lean_s26 := by timed congr lean_s24 lean_s25
let lean_s27 := by timed congr lean_s17 lean_s26
have lean_s28 : (Eq let100 let99) := by timed congr lean_s10 lean_s27
have lean_s29 : let99 := by timed eqResolve lean_s2 lean_s28
have lean_s30 : (Or let57 (Or let47 let98)) := by permutateOr lean_s29, [1, 0, 2, 3], (- 1)
have lean_s31 : (Eq And And) := by timed rfl
have lean_s32 : (Eq skoZ skoZ) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq skoX skoX) := by timed rfl
let lean_s35 := by timed flipCongrArg lean_s34 [HMul.hMul]
have lean_s36 : (Eq let55 let55) := by timed congr lean_s35 lean_r21
have lean_s37 : let56 := by timed Eq.trans lean_s36 lean_r20
let lean_s38 := by timed flipCongrArg lean_s37 [HAdd.hAdd]
have lean_s39 : (Eq skoY skoY) := by timed rfl
let lean_s40 := by timed flipCongrArg lean_s39 [HMul.hMul]
have lean_s41 : (Eq let41 let41) := by timed congr lean_s40 lean_r21
have lean_s42 : let42 := by timed Eq.trans lean_s41 lean_r12
have lean_s43 : (Eq let71 let29) := by timed congr lean_s38 lean_s42
have lean_s44 : (Eq let71 let52) := by timed Eq.trans lean_s43 lean_r16
have lean_s45 : (Eq let72 let54) := by timed congr lean_s33 lean_s44
have lean_s46 : (Eq let72 let53) := by timed Eq.trans lean_s45 lean_r17
let lean_s47 := by timed congr lean_s31 lean_s46
have lean_s48 : (Eq let70 let94) := by timed flipCongrArg lean_r29 [Not]
let lean_s49 := by timed congr lean_s31 lean_s48
have lean_s50 : (Eq let68 let93) := by timed flipCongrArg lean_r36 [Not]
let lean_s51 := by timed congr lean_s31 lean_s50
have lean_s52 : (Eq let66 let92) := by timed flipCongrArg lean_r13 [Not]
let lean_s53 := by timed congr lean_s31 lean_s52
let lean_s54 := by timed flipCongrArg lean_s34 [LE.le]
have lean_s55 : (Eq let64 let58) := by timed congr lean_s54 lean_r28
have lean_s56 : (Eq let64 let57) := by timed Eq.trans lean_s55 lean_r23
have lean_s57 : (Eq let65 let79) := by timed flipCongrArg lean_s56 [Not]
let lean_s58 := by timed congr lean_s31 lean_s57
let lean_s59 := by timed flipCongrArg lean_s39 [LE.le]
have lean_s60 : (Eq let62 let49) := by timed congr lean_s59 lean_r28
have lean_s61 : (Eq let62 let47) := by timed Eq.trans lean_s60 lean_r24
have lean_s62 : (Eq let63 let84) := by timed flipCongrArg lean_s61 [Not]
let lean_s63 := by timed congr lean_s31 lean_s62
let lean_s64 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s65 : (Eq let60 let4) := by timed congr lean_s64 lean_r28
have lean_s66 : (Eq let60 let32) := by timed Eq.trans lean_s65 lean_r30
have lean_s67 : (Eq let61 let33) := by timed flipCongrArg lean_s66 [Not]
let lean_s68 := by timed congr lean_s63 lean_s67
let lean_s69 := by timed congr lean_s58 lean_s68
let lean_s70 := by timed congr lean_s53 lean_s69
let lean_s71 := by timed congr lean_s51 lean_s70
let lean_s72 := by timed congr lean_s49 lean_s71
have lean_s73 : let96 := by timed congr lean_s47 lean_s72
have lean_s74 : let96 := by timed Eq.trans lean_r25 lean_s73
have lean_s75 : let95 := by timed eqResolve lean_a40 lean_s74
have lean_s76 : let33 := by andElim lean_s75, 6
let lean_s77 := by R1 lean_s30, lean_s76, let32, [(- 1), 0]
have lean_s78 : let84 := by andElim lean_s75, 5
let lean_s79 := by R1 lean_s77, lean_s78, let47, [(- 1), 0]
have lean_s80 : let79 := by andElim lean_s75, 4
let lean_s81 := by R1 lean_s79, lean_s80, let57, [(- 1), 0]
have lean_s82 : let53 := by andElim lean_s75, 0
exact (show False from by R2 lean_s81, lean_s82, let53, [0, 0])


