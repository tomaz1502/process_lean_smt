open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoY : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}

theorem th0 :
  let let1 := (Int.ofNat 10)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoX let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoX let3)
  let let7 := (Int.ofNat 0)
  let let8 := (Rat.ofInt 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% LT.lt let9 let7)
  let let11 := (binrel% LE.le skoY let3)
  let let12 := (Not let11)
  let let13 := (binrel% GT.gt skoY let3)
  let let14 := (Neg.neg let2)
  let let15 := (binrel% HMul.hMul let14 skoY)
  let let16 := (binrel% HMul.hMul let9 skoY)
  let let17 := (Rat.ofInt 0)
  let let18 := (binrel% HMul.hMul let14 skoX)
  let let19 := (binrel% HAdd.hAdd let18 let15)
  let let20 := (binrel% HMul.hMul let14 skoZ)
  let let21 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let22 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let20 let19))
  let let23 := (binrel% HMul.hMul let8 let17)
  let let24 := (binrel% HMul.hMul let9 let3)
  let let25 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let24 let24)))
  let let26 := (binrel% HMul.hMul let9 skoX)
  let let27 := (binrel% HMul.hMul let9 skoZ)
  let let28 := (binrel% HMul.hMul let8 let21)
  let let29 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let26 let16)))
  let let30 := (binrel% GE.ge let29 let25)
  let let31 := (Not let30)
  let let32 := (binrel% LT.lt let29 let25)
  let let33 := (binrel% HDiv.hDiv (Int.ofNat 11) let1)
  let let34 := (binrel% GE.ge skoX let33)
  let let35 := (binrel% LE.le let33 skoX)
  let let36 := (binrel% LE.le let21 let17)
  let let37 := (Not let36)
  let let38 := (binrel% GT.gt let21 let17)
  let let39 := (Eq let38 let37)
  let let40 := (binrel% GE.ge (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let18 let20)) let7)
  let let41 := (binrel% HAdd.hAdd let15 let18)
  let let42 := (binrel% LE.le skoZ let41)
  let let43 := (binrel% LE.le skoZ let3)
  let let44 := (Not let43)
  let let45 := (binrel% GT.gt skoZ let3)
  let let46 := (Rat.ofInt 10)
  let let47 := (binrel% HDiv.hDiv (Rat.ofInt 11) let46)
  let let48 := (binrel% HMul.hMul skoY let9)
  let let49 := (Eq let48 let15)
  let let50 := (binrel% GE.ge skoY let33)
  let let51 := (binrel% LE.le let33 skoY)
  let let52 := (Neg.neg let3)
  let let53 := (binrel% GE.ge let15 let52)
  let let54 := (Eq let53 let53)
  let let55 := (binrel% GE.ge let18 let52)
  let let56 := (binrel% HMul.hMul skoX let9)
  let let57 := (Eq let56 let18)
  let let58 := (binrel% GE.ge let20 let52)
  let let59 := (binrel% HDiv.hDiv let8 let46)
  let let60 := (binrel% LE.le skoZ let59)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le skoY let59)
  let let63 := (Not let62)
  let let64 := (binrel% LE.le skoX let59)
  let let65 := (Not let64)
  let let66 := (binrel% LE.le let47 skoZ)
  let let67 := (Not let66)
  let let68 := (binrel% LE.le let47 skoY)
  let let69 := (Not let68)
  let let70 := (binrel% LE.le let47 skoX)
  let let71 := (Not let70)
  let let72 := (binrel% HAdd.hAdd let56 let48)
  let let73 := (binrel% LE.le skoZ let72)
  let let74 := (And let73 (And let71 (And let69 (And let67 (And let65 (And let63 let61))))))
  let let75 := (Eq let55 let55)
  let let76 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) let1))
  let let77 := (binrel% GE.ge let17 let76)
  let let78 := (Eq let58 let58)
  let let79 := (Not let58)
  let let80 := (Not let79)
  let let81 := (Eq let80 let58)
  let let82 := (Not let53)
  let let83 := (Not let82)
  let let84 := (Eq let83 let53)
  let let85 := (Not True)
  let let86 := (Not let55)
  let let87 := (Not let86)
  let let88 := (Eq let87 let55)
  let let89 := (binrel% GE.ge skoZ let33)
  let let90 := (binrel% LE.le let33 skoZ)
  let let91 := (Eq let55 let87)
  let let92 := (binrel% GT.gt let8 let7)
  let let93 := (Eq let53 let83)
  let let94 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let52 let52)))
  let let95 := (Eq let58 let80)
  let let96 := (Not let89)
  let let97 := (Not let50)
  let let98 := (Not let34)
  let let99 := (And let40 (And let98 (And let97 (And let96 (And let86 (And let82 let79))))))
  let let100 := (Eq let74 let99)
  let let101 := (Not let40)
  let let102 := (Or let58 let101)
  let let103 := (Or let53 (Or let55 let102))
  let let104 := (Or let83 (Or let87 (Or let80 let101)))
  let let105 := (binrel% LT.lt let16 let24)
  let let106 := (And let10 let13)
  let let107 := (binrel% LT.lt let26 let24)
  let let108 := (And let10 let6)
  let let109 := (binrel% LT.lt let27 let24)
  let let110 := (And let10 let45)
  let let111 := (binrel% LE.le let28 let23)
  let let112 := (And let92 let36)
(Eq let6 let5) → (Eq let10 True) → (Eq let13 let12) → (Eq let16 let15) → (Eq let22 let17) → (Eq let23 let17) → (Eq let9 let9) → (Eq let32 let31) → (Eq let35 let34) → let39 → (Eq let42 let40) → (Eq let45 let44) → (Eq let47 let33) → let49 → (Eq let51 let50) → (Eq let26 let18) → (Eq let54 True) → (Eq let4 let55) → let57 → (Eq let11 let53) → (Eq let19 let41) → (Eq let43 let58) → (Eq let74 let74) → (Eq let75 True) → (Eq let77 True) → (Eq let59 let3) → (Eq let78 True) → let81 → (Eq let36 let40) → (Eq let27 let20) → let84 → (Eq let85 False) → let88 → (Eq let90 let89) → (Eq let88 let91) → (Eq let92 True) → (Eq let28 let21) → (Eq let84 let93) → (Eq let94 let76) → (Eq let81 let95) → (Eq let24 let52) → let74 → False :=
  let let1 := (Int.ofNat 10)
  let let2 := (Int.ofNat 1)
  let let3 := (binrel% HDiv.hDiv let2 let1)
  let let4 := (binrel% LE.le skoX let3)
  let let5 := (Not let4)
  let let6 := (binrel% GT.gt skoX let3)
  let let7 := (Int.ofNat 0)
  let let8 := (Rat.ofInt 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% LT.lt let9 let7)
  let let11 := (binrel% LE.le skoY let3)
  let let12 := (Not let11)
  let let13 := (binrel% GT.gt skoY let3)
  let let14 := (Neg.neg let2)
  let let15 := (binrel% HMul.hMul let14 skoY)
  let let16 := (binrel% HMul.hMul let9 skoY)
  let let17 := (Rat.ofInt 0)
  let let18 := (binrel% HMul.hMul let14 skoX)
  let let19 := (binrel% HAdd.hAdd let18 let15)
  let let20 := (binrel% HMul.hMul let14 skoZ)
  let let21 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoZ))
  let let22 := (binrel% HAdd.hAdd let21 (binrel% HAdd.hAdd let20 let19))
  let let23 := (binrel% HMul.hMul let8 let17)
  let let24 := (binrel% HMul.hMul let9 let3)
  let let25 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let24 let24)))
  let let26 := (binrel% HMul.hMul let9 skoX)
  let let27 := (binrel% HMul.hMul let9 skoZ)
  let let28 := (binrel% HMul.hMul let8 let21)
  let let29 := (binrel% HAdd.hAdd let28 (binrel% HAdd.hAdd let27 (binrel% HAdd.hAdd let26 let16)))
  let let30 := (binrel% GE.ge let29 let25)
  let let31 := (Not let30)
  let let32 := (binrel% LT.lt let29 let25)
  let let33 := (binrel% HDiv.hDiv (Int.ofNat 11) let1)
  let let34 := (binrel% GE.ge skoX let33)
  let let35 := (binrel% LE.le let33 skoX)
  let let36 := (binrel% LE.le let21 let17)
  let let37 := (Not let36)
  let let38 := (binrel% GT.gt let21 let17)
  let let39 := (Eq let38 let37)
  let let40 := (binrel% GE.ge (binrel% HAdd.hAdd let15 (binrel% HAdd.hAdd let18 let20)) let7)
  let let41 := (binrel% HAdd.hAdd let15 let18)
  let let42 := (binrel% LE.le skoZ let41)
  let let43 := (binrel% LE.le skoZ let3)
  let let44 := (Not let43)
  let let45 := (binrel% GT.gt skoZ let3)
  let let46 := (Rat.ofInt 10)
  let let47 := (binrel% HDiv.hDiv (Rat.ofInt 11) let46)
  let let48 := (binrel% HMul.hMul skoY let9)
  let let49 := (Eq let48 let15)
  let let50 := (binrel% GE.ge skoY let33)
  let let51 := (binrel% LE.le let33 skoY)
  let let52 := (Neg.neg let3)
  let let53 := (binrel% GE.ge let15 let52)
  let let54 := (Eq let53 let53)
  let let55 := (binrel% GE.ge let18 let52)
  let let56 := (binrel% HMul.hMul skoX let9)
  let let57 := (Eq let56 let18)
  let let58 := (binrel% GE.ge let20 let52)
  let let59 := (binrel% HDiv.hDiv let8 let46)
  let let60 := (binrel% LE.le skoZ let59)
  let let61 := (Not let60)
  let let62 := (binrel% LE.le skoY let59)
  let let63 := (Not let62)
  let let64 := (binrel% LE.le skoX let59)
  let let65 := (Not let64)
  let let66 := (binrel% LE.le let47 skoZ)
  let let67 := (Not let66)
  let let68 := (binrel% LE.le let47 skoY)
  let let69 := (Not let68)
  let let70 := (binrel% LE.le let47 skoX)
  let let71 := (Not let70)
  let let72 := (binrel% HAdd.hAdd let56 let48)
  let let73 := (binrel% LE.le skoZ let72)
  let let74 := (And let73 (And let71 (And let69 (And let67 (And let65 (And let63 let61))))))
  let let75 := (Eq let55 let55)
  let let76 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3) let1))
  let let77 := (binrel% GE.ge let17 let76)
  let let78 := (Eq let58 let58)
  let let79 := (Not let58)
  let let80 := (Not let79)
  let let81 := (Eq let80 let58)
  let let82 := (Not let53)
  let let83 := (Not let82)
  let let84 := (Eq let83 let53)
  let let85 := (Not True)
  let let86 := (Not let55)
  let let87 := (Not let86)
  let let88 := (Eq let87 let55)
  let let89 := (binrel% GE.ge skoZ let33)
  let let90 := (binrel% LE.le let33 skoZ)
  let let91 := (Eq let55 let87)
  let let92 := (binrel% GT.gt let8 let7)
  let let93 := (Eq let53 let83)
  let let94 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let52 (binrel% HAdd.hAdd let52 let52)))
  let let95 := (Eq let58 let80)
  let let96 := (Not let89)
  let let97 := (Not let50)
  let let98 := (Not let34)
  let let99 := (And let40 (And let98 (And let97 (And let96 (And let86 (And let82 let79))))))
  let let100 := (Eq let74 let99)
  let let101 := (Not let40)
  let let102 := (Or let58 let101)
  let let103 := (Or let53 (Or let55 let102))
  let let104 := (Or let83 (Or let87 (Or let80 let101)))
  let let105 := (binrel% LT.lt let16 let24)
  let let106 := (And let10 let13)
  let let107 := (binrel% LT.lt let26 let24)
  let let108 := (And let10 let6)
  let let109 := (binrel% LT.lt let27 let24)
  let let110 := (And let10 let45)
  let let111 := (binrel% LE.le let28 let23)
  let let112 := (And let92 let36)
fun lean_r0 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let10 True) => -- EVALUATE
fun lean_r2 : (Eq let13 let12) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let16 let15) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let22 let17) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let23 let17) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let9 let9) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let32 let31) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r9 : let39 => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let42 let40) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let47 let33) => -- THEORY_REWRITE_ARITH
fun lean_r13 : let49 => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let51 let50) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let26 let18) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let54 True) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let4 let55) => -- THEORY_REWRITE_ARITH
fun lean_r18 : let57 => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let11 let53) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let19 let41) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let43 let58) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let74 let74) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let75 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let77 True) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let59 let3) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let78 True) => -- THEORY_REWRITE_BOOL
fun lean_r27 : let81 => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let36 let40) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let27 let20) => -- THEORY_REWRITE_ARITH
fun lean_r30 : let84 => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let85 False) => -- THEORY_REWRITE_BOOL
fun lean_r32 : let88 => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let90 let89) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let88 let91) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let92 True) => -- EVALUATE
fun lean_r36 : (Eq let28 let21) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let84 let93) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let94 let76) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let81 let95) => -- THEORY_REWRITE_BOOL
fun lean_r40 : (Eq let24 let52) => -- THEORY_REWRITE_ARITH
fun lean_a41 : let74 => by
have lean_s0 : (Or let83 (Or let87 (Or let80 (Or let101 False)))) :=
  (scope (fun lean_a42 : let82 =>
    (scope (fun lean_a43 : let86 =>
      (scope (fun lean_a44 : let79 =>
        (scope (fun lean_a45 : let40 =>
          have lean_s0 : (Eq let40 let36) := by timed Eq.symm lean_r28
          have lean_s1 : let36 := by timed eqResolve lean_a45 lean_s0
          have lean_s2 : (Or let37 False) :=
            (scope (fun lean_a46 : let36 =>
              have lean_s2 : let92 := by timed trueElim lean_r35
              have lean_s3 : let112 := by timed And.intro lean_s2 lean_a46
              have lean_s4 : (Implies let112 let111) := by arithMulPos [let21, let17, let8], 1
              have lean_s5 : let111 := by timed modusPonens lean_s3 lean_s4
              have lean_s6 : let10 := by timed trueElim lean_r1
              have lean_s7 : (Eq let44 let79) := by timed flipCongrArg lean_r21 [Not]
              have lean_s8 : (Eq let45 let79) := by timed Eq.trans lean_r11 lean_s7
              have lean_s9 : (Eq let79 let45) := by timed Eq.symm lean_s8
              have lean_s10 : let45 := by timed eqResolve lean_a44 lean_s9
              have lean_s11 : let110 := by timed And.intro lean_s6 lean_s10
              have lean_s12 : (Implies let110 let109) := by arithMulNeg [skoZ, let3, let9], 2
              have lean_s13 : let109 := by timed modusPonens lean_s11 lean_s12
              have lean_s14 : (Eq let5 let86) := by timed flipCongrArg lean_r17 [Not]
              have lean_s15 : (Eq let6 let86) := by timed Eq.trans lean_r0 lean_s14
              have lean_s16 : (Eq let86 let6) := by timed Eq.symm lean_s15
              have lean_s17 : let6 := by timed eqResolve lean_a43 lean_s16
              have lean_s18 : let108 := by timed And.intro lean_s6 lean_s17
              have lean_s19 : (Implies let108 let107) := by arithMulNeg [skoX, let3, let9], 2
              have lean_s20 : let107 := by timed modusPonens lean_s18 lean_s19
              have lean_s21 : (Eq let12 let82) := by timed flipCongrArg lean_r19 [Not]
              have lean_s22 : (Eq let13 let82) := by timed Eq.trans lean_r2 lean_s21
              have lean_s23 : (Eq let82 let13) := by timed Eq.symm lean_s22
              have lean_s24 : let13 := by timed eqResolve lean_a42 lean_s23
              have lean_s25 : let106 := by timed And.intro lean_s6 lean_s24
              have lean_s26 : (Implies let106 let105) := by arithMulNeg [skoY, let3, let9], 2
              have lean_s27 : let105 := by timed modusPonens lean_s25 lean_s26
              have lean_s28 : let32 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27]
              let lean_s29 := by timed congrHAdd lean_r15 lean_r3
              let lean_s30 := by timed congrHAdd lean_r29 lean_s29
              have lean_s31 : (Eq let29 let22) := by timed congrHAdd lean_r36 lean_s30
              have lean_s32 : (Eq let29 let17) := by timed Eq.trans lean_s31 lean_r4
              let lean_s33 := by timed flipCongrArg lean_s32 [GE.ge]
              let lean_s34 := by timed congrHAdd lean_r40 lean_r40
              let lean_s35 := by timed congrHAdd lean_r40 lean_s34
              have lean_s36 : (Eq let25 let94) := by timed congrHAdd lean_r5 lean_s35
              have lean_s37 : (Eq let25 let76) := by timed Eq.trans lean_s36 lean_r38
              have lean_s38 : (Eq let30 let77) := by timed congr lean_s33 lean_s37
              have lean_s39 : (Eq let30 True) := by timed Eq.trans lean_s38 lean_r24
              have lean_s40 : (Eq let31 let85) := by timed flipCongrArg lean_s39 [Not]
              have lean_s41 : (Eq let31 False) := by timed Eq.trans lean_s40 lean_r31
              have lean_s42 : (Eq let32 False) := by timed Eq.trans lean_r7 lean_s41
              show False from by timed eqResolve lean_s28 lean_s42
            ))
          have lean_s3 : let37 := by liftOrNToNeg lean_s2
          have lean_s4 : (Eq let37 let101) := by timed flipCongrArg lean_r28 [Not]
          have lean_s5 : (Eq let38 let101) := by timed Eq.trans lean_r9 lean_s4
          have lean_s6 : (Eq let101 let38) := by timed Eq.symm lean_s5
          have lean_s7 : (Eq let37 let38) := by timed Eq.trans lean_s4 lean_s6
          have lean_s8 : let38 := by timed eqResolve lean_s3 lean_s7
          have lean_s9 : (Eq let101 let37) := by timed Eq.symm lean_s4
          have lean_s10 : let39 := by timed Eq.trans lean_s5 lean_s9
          have lean_s11 : let37 := by timed eqResolve lean_s8 lean_s10
          show False from by timed contradiction lean_s1 lean_s11
  ))))))))
have lean_s1 : (Not (And let82 (And let86 (And let79 let40)))) := by liftOrNToNeg lean_s0
have lean_s2 : let104 := by timed flipNotAnd lean_s1 [let82, let86, let79, let40]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let54 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let93 let54) := by timed congr lean_s5 lean_r30
have lean_s7 : (Eq let93 True) := by timed Eq.trans lean_s6 lean_r16
have lean_s8 : (Eq let84 True) := by timed Eq.trans lean_r37 lean_s7
have lean_s9 : let84 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let75 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let91 let75) := by timed congr lean_s12 lean_r32
have lean_s14 : (Eq let91 True) := by timed Eq.trans lean_s13 lean_r23
have lean_s15 : (Eq let88 True) := by timed Eq.trans lean_r34 lean_s14
have lean_s16 : let88 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let78 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let95 let78) := by timed congr lean_s19 lean_r27
have lean_s21 : (Eq let95 True) := by timed Eq.trans lean_s20 lean_r26
have lean_s22 : (Eq let81 True) := by timed Eq.trans lean_r39 lean_s21
have lean_s23 : let81 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : (Eq let101 let101) := by timed rfl
let lean_s26 := by timed congr lean_s24 lean_s25
let lean_s27 := by timed congr lean_s17 lean_s26
have lean_s28 : (Eq let104 let103) := by timed congr lean_s10 lean_s27
have lean_s29 : let103 := by timed eqResolve lean_s2 lean_s28
have lean_s30 : (Or let55 (Or let53 let102)) := by permutateOr lean_s29, [1, 0, 2, 3], (- 1)
have lean_s31 : (Eq And And) := by timed rfl
have lean_s32 : (Eq skoZ skoZ) := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s34 : (Eq skoX skoX) := by timed rfl
let lean_s35 := by timed flipCongrArg lean_s34 [HMul.hMul]
have lean_s36 : (Eq let56 let56) := by timed congr lean_s35 lean_r6
have lean_s37 : let57 := by timed Eq.trans lean_s36 lean_r18
let lean_s38 := by timed flipCongrArg lean_s37 [HAdd.hAdd]
have lean_s39 : (Eq skoY skoY) := by timed rfl
let lean_s40 := by timed flipCongrArg lean_s39 [HMul.hMul]
have lean_s41 : (Eq let48 let48) := by timed congr lean_s40 lean_r6
have lean_s42 : let49 := by timed Eq.trans lean_s41 lean_r13
have lean_s43 : (Eq let72 let19) := by timed congr lean_s38 lean_s42
have lean_s44 : (Eq let72 let41) := by timed Eq.trans lean_s43 lean_r20
have lean_s45 : (Eq let73 let42) := by timed congr lean_s33 lean_s44
have lean_s46 : (Eq let73 let40) := by timed Eq.trans lean_s45 lean_r10
let lean_s47 := by timed congr lean_s31 lean_s46
let lean_s48 := by timed flipCongrArg lean_r12 [LE.le]
have lean_s49 : (Eq let70 let35) := by timed congr lean_s48 lean_s34
have lean_s50 : (Eq let70 let34) := by timed Eq.trans lean_s49 lean_r8
have lean_s51 : (Eq let71 let98) := by timed flipCongrArg lean_s50 [Not]
let lean_s52 := by timed congr lean_s31 lean_s51
let lean_s53 := by timed flipCongrArg lean_r12 [LE.le]
have lean_s54 : (Eq let68 let51) := by timed congr lean_s53 lean_s39
have lean_s55 : (Eq let68 let50) := by timed Eq.trans lean_s54 lean_r14
have lean_s56 : (Eq let69 let97) := by timed flipCongrArg lean_s55 [Not]
let lean_s57 := by timed congr lean_s31 lean_s56
let lean_s58 := by timed flipCongrArg lean_r12 [LE.le]
have lean_s59 : (Eq let66 let90) := by timed congr lean_s58 lean_s32
have lean_s60 : (Eq let66 let89) := by timed Eq.trans lean_s59 lean_r33
have lean_s61 : (Eq let67 let96) := by timed flipCongrArg lean_s60 [Not]
let lean_s62 := by timed congr lean_s31 lean_s61
let lean_s63 := by timed flipCongrArg lean_s34 [LE.le]
have lean_s64 : (Eq let64 let4) := by timed congr lean_s63 lean_r25
have lean_s65 : (Eq let64 let55) := by timed Eq.trans lean_s64 lean_r17
have lean_s66 : (Eq let65 let86) := by timed flipCongrArg lean_s65 [Not]
let lean_s67 := by timed congr lean_s31 lean_s66
let lean_s68 := by timed flipCongrArg lean_s39 [LE.le]
have lean_s69 : (Eq let62 let11) := by timed congr lean_s68 lean_r25
have lean_s70 : (Eq let62 let53) := by timed Eq.trans lean_s69 lean_r19
have lean_s71 : (Eq let63 let82) := by timed flipCongrArg lean_s70 [Not]
let lean_s72 := by timed congr lean_s31 lean_s71
let lean_s73 := by timed flipCongrArg lean_s32 [LE.le]
have lean_s74 : (Eq let60 let43) := by timed congr lean_s73 lean_r25
have lean_s75 : (Eq let60 let58) := by timed Eq.trans lean_s74 lean_r21
have lean_s76 : (Eq let61 let79) := by timed flipCongrArg lean_s75 [Not]
let lean_s77 := by timed congr lean_s72 lean_s76
let lean_s78 := by timed congr lean_s67 lean_s77
let lean_s79 := by timed congr lean_s62 lean_s78
let lean_s80 := by timed congr lean_s57 lean_s79
let lean_s81 := by timed congr lean_s52 lean_s80
have lean_s82 : let100 := by timed congr lean_s47 lean_s81
have lean_s83 : let100 := by timed Eq.trans lean_r22 lean_s82
have lean_s84 : let99 := by timed eqResolve lean_a41 lean_s83
have lean_s85 : let79 := by andElim lean_s84, 6
let lean_s86 := by R1 lean_s30, lean_s85, let58, [(- 1), 0]
have lean_s87 : let82 := by andElim lean_s84, 5
let lean_s88 := by R1 lean_s86, lean_s87, let53, [(- 1), 0]
have lean_s89 : let86 := by andElim lean_s84, 4
let lean_s90 := by R1 lean_s88, lean_s89, let55, [(- 1), 0]
have lean_s91 : let40 := by andElim lean_s84, 0
exact (show False from by R2 lean_s90, lean_s91, let40, [0, 0])


