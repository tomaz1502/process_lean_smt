open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoW : Rat}
variable {skoX : Rat}
variable {skoZ : Rat}
variable {skoW : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (binrel% HDiv.hDiv let4 (Int.ofNat 10))
  let let6 := (binrel% LE.le skoW let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoW let5)
  let let9 := (binrel% LE.le skoX let5)
  let let10 := (Not let9)
  let let11 := (binrel% GT.gt skoX let5)
  let let12 := (Neg.neg let2)
  let let13 := (binrel% LT.lt let12 let1)
  let let14 := (Neg.neg let4)
  let let15 := (binrel% HMul.hMul let14 skoZ)
  let let16 := (binrel% HMul.hMul let12 skoZ)
  let let17 := (Rat.ofInt 0)
  let let18 := (binrel% HMul.hMul let14 skoY)
  let let19 := (binrel% HMul.hMul let14 skoX)
  let let20 := (binrel% HMul.hMul let14 skoW)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let19 let18))
  let let22 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX (binrel% HAdd.hAdd skoW skoZ)))
  let let23 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let15 let21))
  let let24 := (binrel% HMul.hMul let2 let17)
  let let25 := (Neg.neg let5)
  let let26 := (binrel% HMul.hMul let12 let5)
  let let27 := (Not True)
  let let28 := (binrel% GE.ge (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let20 let15))) let1)
  let let29 := (binrel% LE.le let22 let17)
  let let30 := (binrel% HMul.hMul skoY let12)
  let let31 := (Eq let30 let18)
  let let32 := (Not let29)
  let let33 := (binrel% GT.gt let22 let17)
  let let34 := (Eq let33 let32)
  let let35 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let19 let20))
  let let36 := (binrel% LE.le skoZ let35)
  let let37 := (binrel% LE.le skoY let5)
  let let38 := (Not let37)
  let let39 := (binrel% GT.gt skoY let5)
  let let40 := (binrel% GE.ge let15 let25)
  let let41 := (binrel% LE.le skoZ let5)
  let let42 := (binrel% GE.ge let20 let25)
  let let43 := (Not let42)
  let let44 := (Not let43)
  let let45 := (Eq let42 let44)
  let let46 := (Eq let44 let42)
  let let47 := (binrel% HMul.hMul let12 skoY)
  let let48 := (Int.ofNat 3)
  let let49 := (binrel% GE.ge skoX let48)
  let let50 := (Rat.ofInt 3)
  let let51 := (binrel% LE.le let50 skoX)
  let let52 := (binrel% GE.ge skoW let48)
  let let53 := (binrel% LE.le let50 skoW)
  let let54 := (binrel% GE.ge let18 let25)
  let let55 := (Eq let54 let54)
  let let56 := (Not let54)
  let let57 := (Not let56)
  let let58 := (Eq let54 let57)
  let let59 := (Eq let57 let54)
  let let60 := (binrel% GE.ge let19 let25)
  let let61 := (binrel% GE.ge skoY let48)
  let let62 := (binrel% LE.le let50 skoY)
  let let63 := (Not let60)
  let let64 := (Not let63)
  let let65 := (Eq let60 let64)
  let let66 := (Eq let64 let60)
  let let67 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10))
  let let68 := (binrel% HMul.hMul let2 let22)
  let let69 := (Not let40)
  let let70 := (Not let69)
  let let71 := (Eq let70 let40)
  let let72 := (binrel% GE.ge skoZ let48)
  let let73 := (binrel% LE.le let50 skoZ)
  let let74 := (binrel% HMul.hMul skoX let12)
  let let75 := (binrel% HMul.hMul skoW let12)
  let let76 := (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let74 let30))
  let let77 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let75 let74) let30)
  let let78 := (binrel% HMul.hMul let12 skoX)
  let let79 := (Eq let74 let19)
  let let80 := (Eq let75 let20)
  let let81 := (binrel% HMul.hMul let12 skoW)
  let let82 := (Eq let40 let40)
  let let83 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2) (Int.ofNat 5)))
  let let84 := (binrel% GE.ge let17 let83)
  let let85 := (binrel% LE.le skoZ let67)
  let let86 := (Not let85)
  let let87 := (binrel% LE.le skoY let67)
  let let88 := (Not let87)
  let let89 := (binrel% LE.le skoX let67)
  let let90 := (Not let89)
  let let91 := (binrel% LE.le skoW let67)
  let let92 := (Not let91)
  let let93 := (Not let73)
  let let94 := (Not let62)
  let let95 := (Not let51)
  let let96 := (Not let53)
  let let97 := (binrel% LE.le skoZ let77)
  let let98 := (And let97 (And let96 (And let95 (And let94 (And let93 (And let92 (And let90 (And let88 let86))))))))
  let let99 := (Not let41)
  let let100 := (binrel% GT.gt skoZ let5)
  let let101 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let26 let26))))
  let let102 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let78 let47))))
  let let103 := (binrel% GE.ge let102 let101)
  let let104 := (Not let103)
  let let105 := (binrel% LT.lt let102 let101)
  let let106 := (Eq let40 let70)
  let let107 := (Eq let42 let42)
  let let108 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let25 let25))))
  let let109 := (Eq let60 let60)
  let let110 := (Not let72)
  let let111 := (Not let61)
  let let112 := (Not let49)
  let let113 := (Not let52)
  let let114 := (And let28 (And let113 (And let112 (And let111 (And let110 (And let43 (And let63 (And let56 let69))))))))
  let let115 := (Eq let98 let114)
  let let116 := (Not let28)
  let let117 := (Or let40 let116)
  let let118 := (Or let54 (Or let60 (Or let42 let117)))
  let let119 := (Or let57 (Or let64 (Or let44 (Or let70 let116))))
  let let120 := (binrel% LT.lt let47 let26)
  let let121 := (And let13 let39)
  let let122 := (binrel% LT.lt let78 let26)
  let let123 := (And let13 let11)
  let let124 := (binrel% LT.lt let81 let26)
  let let125 := (And let13 let8)
  let let126 := (binrel% LT.lt let16 let26)
  let let127 := (And let13 let100)
  let let128 := (binrel% LE.le let68 let24)
  let let129 := (And let3 let29)
(Eq let3 True) → (Eq let8 let7) → (Eq let11 let10) → (Eq let13 True) → (Eq let16 let15) → (Eq let23 let17) → (Eq let24 let17) → (Eq let26 let25) → (Eq let27 False) → (Eq let29 let28) → let31 → let34 → (Eq let36 let28) → (Eq let39 let38) → (Eq let41 let40) → (Eq let46 let45) → (Eq let47 let18) → (Eq let12 let12) → (Eq let51 let49) → (Eq let53 let52) → (Eq let55 True) → (Eq let59 let58) → (Eq let9 let60) → let59 → (Eq let62 let61) → (Eq let21 let35) → (Eq let66 let65) → (Eq let37 let54) → (Eq let67 let5) → (Eq let68 let22) → let71 → (Eq let73 let72) → (Eq let77 let76) → (Eq let78 let19) → let79 → let80 → (Eq let81 let20) → (Eq let6 let42) → (Eq let82 True) → (Eq let84 True) → (Eq let98 let98) → (Eq let100 let99) → (Eq let105 let104) → (Eq let71 let106) → (Eq let107 True) → (Eq let108 let83) → let46 → (Eq let109 True) → let66 → let98 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 1)
  let let5 := (binrel% HDiv.hDiv let4 (Int.ofNat 10))
  let let6 := (binrel% LE.le skoW let5)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoW let5)
  let let9 := (binrel% LE.le skoX let5)
  let let10 := (Not let9)
  let let11 := (binrel% GT.gt skoX let5)
  let let12 := (Neg.neg let2)
  let let13 := (binrel% LT.lt let12 let1)
  let let14 := (Neg.neg let4)
  let let15 := (binrel% HMul.hMul let14 skoZ)
  let let16 := (binrel% HMul.hMul let12 skoZ)
  let let17 := (Rat.ofInt 0)
  let let18 := (binrel% HMul.hMul let14 skoY)
  let let19 := (binrel% HMul.hMul let14 skoX)
  let let20 := (binrel% HMul.hMul let14 skoW)
  let let21 := (binrel% HAdd.hAdd let20 (binrel% HAdd.hAdd let19 let18))
  let let22 := (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX (binrel% HAdd.hAdd skoW skoZ)))
  let let23 := (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let15 let21))
  let let24 := (binrel% HMul.hMul let2 let17)
  let let25 := (Neg.neg let5)
  let let26 := (binrel% HMul.hMul let12 let5)
  let let27 := (Not True)
  let let28 := (binrel% GE.ge (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let19 (binrel% HAdd.hAdd let20 let15))) let1)
  let let29 := (binrel% LE.le let22 let17)
  let let30 := (binrel% HMul.hMul skoY let12)
  let let31 := (Eq let30 let18)
  let let32 := (Not let29)
  let let33 := (binrel% GT.gt let22 let17)
  let let34 := (Eq let33 let32)
  let let35 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let19 let20))
  let let36 := (binrel% LE.le skoZ let35)
  let let37 := (binrel% LE.le skoY let5)
  let let38 := (Not let37)
  let let39 := (binrel% GT.gt skoY let5)
  let let40 := (binrel% GE.ge let15 let25)
  let let41 := (binrel% LE.le skoZ let5)
  let let42 := (binrel% GE.ge let20 let25)
  let let43 := (Not let42)
  let let44 := (Not let43)
  let let45 := (Eq let42 let44)
  let let46 := (Eq let44 let42)
  let let47 := (binrel% HMul.hMul let12 skoY)
  let let48 := (Int.ofNat 3)
  let let49 := (binrel% GE.ge skoX let48)
  let let50 := (Rat.ofInt 3)
  let let51 := (binrel% LE.le let50 skoX)
  let let52 := (binrel% GE.ge skoW let48)
  let let53 := (binrel% LE.le let50 skoW)
  let let54 := (binrel% GE.ge let18 let25)
  let let55 := (Eq let54 let54)
  let let56 := (Not let54)
  let let57 := (Not let56)
  let let58 := (Eq let54 let57)
  let let59 := (Eq let57 let54)
  let let60 := (binrel% GE.ge let19 let25)
  let let61 := (binrel% GE.ge skoY let48)
  let let62 := (binrel% LE.le let50 skoY)
  let let63 := (Not let60)
  let let64 := (Not let63)
  let let65 := (Eq let60 let64)
  let let66 := (Eq let64 let60)
  let let67 := (binrel% HDiv.hDiv let2 (Rat.ofInt 10))
  let let68 := (binrel% HMul.hMul let2 let22)
  let let69 := (Not let40)
  let let70 := (Not let69)
  let let71 := (Eq let70 let40)
  let let72 := (binrel% GE.ge skoZ let48)
  let let73 := (binrel% LE.le let50 skoZ)
  let let74 := (binrel% HMul.hMul skoX let12)
  let let75 := (binrel% HMul.hMul skoW let12)
  let let76 := (binrel% HAdd.hAdd let75 (binrel% HAdd.hAdd let74 let30))
  let let77 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let75 let74) let30)
  let let78 := (binrel% HMul.hMul let12 skoX)
  let let79 := (Eq let74 let19)
  let let80 := (Eq let75 let20)
  let let81 := (binrel% HMul.hMul let12 skoW)
  let let82 := (Eq let40 let40)
  let let83 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2) (Int.ofNat 5)))
  let let84 := (binrel% GE.ge let17 let83)
  let let85 := (binrel% LE.le skoZ let67)
  let let86 := (Not let85)
  let let87 := (binrel% LE.le skoY let67)
  let let88 := (Not let87)
  let let89 := (binrel% LE.le skoX let67)
  let let90 := (Not let89)
  let let91 := (binrel% LE.le skoW let67)
  let let92 := (Not let91)
  let let93 := (Not let73)
  let let94 := (Not let62)
  let let95 := (Not let51)
  let let96 := (Not let53)
  let let97 := (binrel% LE.le skoZ let77)
  let let98 := (And let97 (And let96 (And let95 (And let94 (And let93 (And let92 (And let90 (And let88 let86))))))))
  let let99 := (Not let41)
  let let100 := (binrel% GT.gt skoZ let5)
  let let101 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let26 (binrel% HAdd.hAdd let26 let26))))
  let let102 := (binrel% HAdd.hAdd let68 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let81 (binrel% HAdd.hAdd let78 let47))))
  let let103 := (binrel% GE.ge let102 let101)
  let let104 := (Not let103)
  let let105 := (binrel% LT.lt let102 let101)
  let let106 := (Eq let40 let70)
  let let107 := (Eq let42 let42)
  let let108 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let25 let25))))
  let let109 := (Eq let60 let60)
  let let110 := (Not let72)
  let let111 := (Not let61)
  let let112 := (Not let49)
  let let113 := (Not let52)
  let let114 := (And let28 (And let113 (And let112 (And let111 (And let110 (And let43 (And let63 (And let56 let69))))))))
  let let115 := (Eq let98 let114)
  let let116 := (Not let28)
  let let117 := (Or let40 let116)
  let let118 := (Or let54 (Or let60 (Or let42 let117)))
  let let119 := (Or let57 (Or let64 (Or let44 (Or let70 let116))))
  let let120 := (binrel% LT.lt let47 let26)
  let let121 := (And let13 let39)
  let let122 := (binrel% LT.lt let78 let26)
  let let123 := (And let13 let11)
  let let124 := (binrel% LT.lt let81 let26)
  let let125 := (And let13 let8)
  let let126 := (binrel% LT.lt let16 let26)
  let let127 := (And let13 let100)
  let let128 := (binrel% LE.le let68 let24)
  let let129 := (And let3 let29)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let11 let10) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let13 True) => -- EVALUATE
fun lean_r4 : (Eq let16 let15) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let23 let17) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let24 let17) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let26 let25) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let27 False) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r10 : let31 => -- THEORY_REWRITE_ARITH
fun lean_r11 : let34 => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let36 let28) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let46 let45) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let47 let18) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let12 let12) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let51 let49) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let53 let52) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let55 True) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let59 let58) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let9 let60) => -- THEORY_REWRITE_ARITH
fun lean_r23 : let59 => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let62 let61) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let21 let35) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let66 let65) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let37 let54) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let67 let5) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let68 let22) => -- THEORY_REWRITE_ARITH
fun lean_r30 : let71 => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let73 let72) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let77 let76) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let78 let19) => -- THEORY_REWRITE_ARITH
fun lean_r34 : let79 => -- THEORY_REWRITE_ARITH
fun lean_r35 : let80 => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let81 let20) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let6 let42) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let82 True) => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let84 True) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let98 let98) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let100 let99) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq let105 let104) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let71 let106) => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let107 True) => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let108 let83) => -- THEORY_REWRITE_ARITH
fun lean_r46 : let46 => -- THEORY_REWRITE_BOOL
fun lean_r47 : (Eq let109 True) => -- THEORY_REWRITE_BOOL
fun lean_r48 : let66 => -- THEORY_REWRITE_BOOL
fun lean_a49 : let98 => by
have lean_s0 : (Or let57 (Or let64 (Or let44 (Or let70 (Or let116 False))))) :=
  (scope (fun lean_a50 : let56 =>
    (scope (fun lean_a51 : let63 =>
      (scope (fun lean_a52 : let43 =>
        (scope (fun lean_a53 : let69 =>
          (scope (fun lean_a54 : let28 =>
            have lean_s0 : (Eq let28 let29) := by timed Eq.symm lean_r9
            have lean_s1 : let29 := by timed eqResolve lean_a54 lean_s0
            have lean_s2 : (Or let32 False) :=
              (scope (fun lean_a55 : let29 =>
                have lean_s2 : let3 := by timed trueElim lean_r0
                have lean_s3 : let129 := by timed And.intro lean_s2 lean_a55
                have lean_s4 : (Implies let129 let128) := by arithMulPos [let22, let17, let2], 1
                have lean_s5 : let128 := by timed modusPonens lean_s3 lean_s4
                have lean_s6 : let13 := by timed trueElim lean_r3
                have lean_s7 : (Eq let99 let69) := by timed flipCongrArg lean_r14 [Not]
                have lean_s8 : (Eq let100 let69) := by timed Eq.trans lean_r41 lean_s7
                have lean_s9 : (Eq let69 let100) := by timed Eq.symm lean_s8
                have lean_s10 : let100 := by timed eqResolve lean_a53 lean_s9
                have lean_s11 : let127 := by timed And.intro lean_s6 lean_s10
                have lean_s12 : (Implies let127 let126) := by arithMulNeg [skoZ, let5, let12], 2
                have lean_s13 : let126 := by timed modusPonens lean_s11 lean_s12
                have lean_s14 : (Eq let7 let43) := by timed flipCongrArg lean_r37 [Not]
                have lean_s15 : (Eq let8 let43) := by timed Eq.trans lean_r1 lean_s14
                have lean_s16 : (Eq let43 let8) := by timed Eq.symm lean_s15
                have lean_s17 : let8 := by timed eqResolve lean_a52 lean_s16
                have lean_s18 : let125 := by timed And.intro lean_s6 lean_s17
                have lean_s19 : (Implies let125 let124) := by arithMulNeg [skoW, let5, let12], 2
                have lean_s20 : let124 := by timed modusPonens lean_s18 lean_s19
                have lean_s21 : (Eq let10 let63) := by timed flipCongrArg lean_r22 [Not]
                have lean_s22 : (Eq let11 let63) := by timed Eq.trans lean_r2 lean_s21
                have lean_s23 : (Eq let63 let11) := by timed Eq.symm lean_s22
                have lean_s24 : let11 := by timed eqResolve lean_a51 lean_s23
                have lean_s25 : let123 := by timed And.intro lean_s6 lean_s24
                have lean_s26 : (Implies let123 let122) := by arithMulNeg [skoX, let5, let12], 2
                have lean_s27 : let122 := by timed modusPonens lean_s25 lean_s26
                have lean_s28 : (Eq let38 let56) := by timed flipCongrArg lean_r27 [Not]
                have lean_s29 : (Eq let39 let56) := by timed Eq.trans lean_r13 lean_s28
                have lean_s30 : (Eq let56 let39) := by timed Eq.symm lean_s29
                have lean_s31 : let39 := by timed eqResolve lean_a50 lean_s30
                have lean_s32 : let121 := by timed And.intro lean_s6 lean_s31
                have lean_s33 : (Implies let121 let120) := by arithMulNeg [skoY, let5, let12], 2
                have lean_s34 : let120 := by timed modusPonens lean_s32 lean_s33
                have lean_s35 : let105 := by sumBounds [lean_s5, lean_s13, lean_s20, lean_s27, lean_s34]
                let lean_s36 := by timed congrHAdd lean_r33 lean_r16
                let lean_s37 := by timed congrHAdd lean_r36 lean_s36
                let lean_s38 := by timed congrHAdd lean_r4 lean_s37
                have lean_s39 : (Eq let102 let23) := by timed congrHAdd lean_r29 lean_s38
                have lean_s40 : (Eq let102 let17) := by timed Eq.trans lean_s39 lean_r5
                let lean_s41 := by timed flipCongrArg lean_s40 [GE.ge]
                let lean_s42 := by timed congrHAdd lean_r7 lean_r7
                let lean_s43 := by timed congrHAdd lean_r7 lean_s42
                let lean_s44 := by timed congrHAdd lean_r7 lean_s43
                have lean_s45 : (Eq let101 let108) := by timed congrHAdd lean_r6 lean_s44
                have lean_s46 : (Eq let101 let83) := by timed Eq.trans lean_s45 lean_r45
                have lean_s47 : (Eq let103 let84) := by timed congr lean_s41 lean_s46
                have lean_s48 : (Eq let103 True) := by timed Eq.trans lean_s47 lean_r39
                have lean_s49 : (Eq let104 let27) := by timed flipCongrArg lean_s48 [Not]
                have lean_s50 : (Eq let104 False) := by timed Eq.trans lean_s49 lean_r8
                have lean_s51 : (Eq let105 False) := by timed Eq.trans lean_r42 lean_s50
                show False from by timed eqResolve lean_s35 lean_s51
              ))
            have lean_s3 : let32 := by liftOrNToNeg lean_s2
            have lean_s4 : (Eq let32 let116) := by timed flipCongrArg lean_r9 [Not]
            have lean_s5 : (Eq let33 let116) := by timed Eq.trans lean_r11 lean_s4
            have lean_s6 : (Eq let116 let33) := by timed Eq.symm lean_s5
            have lean_s7 : (Eq let32 let33) := by timed Eq.trans lean_s4 lean_s6
            have lean_s8 : let33 := by timed eqResolve lean_s3 lean_s7
            have lean_s9 : (Eq let116 let32) := by timed Eq.symm lean_s4
            have lean_s10 : let34 := by timed Eq.trans lean_s5 lean_s9
            have lean_s11 : let32 := by timed eqResolve lean_s8 lean_s10
            show False from by timed contradiction lean_s1 lean_s11
  ))))))))))
have lean_s1 : (Not (And let56 (And let63 (And let43 (And let69 let28))))) := by liftOrNToNeg lean_s0
have lean_s2 : let119 := by timed flipNotAnd lean_s1 [let56, let63, let43, let69, let28]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let55 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let58 let55) := by timed congr lean_s5 lean_r23
have lean_s7 : (Eq let58 True) := by timed Eq.trans lean_s6 lean_r20
have lean_s8 : (Eq let59 True) := by timed Eq.trans lean_r21 lean_s7
have lean_s9 : let59 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let109 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let65 let109) := by timed congr lean_s12 lean_r48
have lean_s14 : (Eq let65 True) := by timed Eq.trans lean_s13 lean_r47
have lean_s15 : (Eq let66 True) := by timed Eq.trans lean_r26 lean_s14
have lean_s16 : let66 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let107 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let45 let107) := by timed congr lean_s19 lean_r46
have lean_s21 : (Eq let45 True) := by timed Eq.trans lean_s20 lean_r44
have lean_s22 : (Eq let46 True) := by timed Eq.trans lean_r15 lean_s21
have lean_s23 : let46 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : let82 := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq let106 let82) := by timed congr lean_s26 lean_r30
have lean_s28 : (Eq let106 True) := by timed Eq.trans lean_s27 lean_r38
have lean_s29 : (Eq let71 True) := by timed Eq.trans lean_r43 lean_s28
have lean_s30 : let71 := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s3 lean_s30
have lean_s32 : (Eq let116 let116) := by timed rfl
let lean_s33 := by timed congr lean_s31 lean_s32
let lean_s34 := by timed congr lean_s24 lean_s33
let lean_s35 := by timed congr lean_s17 lean_s34
have lean_s36 : (Eq let119 let118) := by timed congr lean_s10 lean_s35
have lean_s37 : let118 := by timed eqResolve lean_s2 lean_s36
have lean_s38 : (Or let42 (Or let60 (Or let54 let117))) := by permutateOr lean_s37, [2, 1, 0, 3, 4], (- 1)
have lean_s39 : (Eq And And) := by timed rfl
have lean_s40 : (Eq skoZ skoZ) := by timed rfl
let lean_s41 := by timed flipCongrArg lean_s40 [LE.le]
have lean_s42 : (Eq skoW skoW) := by timed rfl
let lean_s43 := by timed flipCongrArg lean_s42 [HMul.hMul]
have lean_s44 : (Eq let75 let75) := by timed congr lean_s43 lean_r17
have lean_s45 : let80 := by timed Eq.trans lean_s44 lean_r35
have lean_s46 : (Eq skoX skoX) := by timed rfl
let lean_s47 := by timed flipCongrArg lean_s46 [HMul.hMul]
have lean_s48 : (Eq let74 let74) := by timed congr lean_s47 lean_r17
have lean_s49 : let79 := by timed Eq.trans lean_s48 lean_r34
have lean_s50 : (Eq skoY skoY) := by timed rfl
let lean_s51 := by timed flipCongrArg lean_s50 [HMul.hMul]
have lean_s52 : (Eq let30 let30) := by timed congr lean_s51 lean_r17
have lean_s53 : let31 := by timed Eq.trans lean_s52 lean_r10
let lean_s54 := by timed congrHAdd lean_s49 lean_s53
have lean_s55 : (Eq let76 let21) := by timed congrHAdd lean_s45 lean_s54
have lean_s56 : (Eq let76 let35) := by timed Eq.trans lean_s55 lean_r25
have lean_s57 : (Eq let77 let35) := by timed Eq.trans lean_r32 lean_s56
have lean_s58 : (Eq let97 let36) := by timed congr lean_s41 lean_s57
have lean_s59 : (Eq let97 let28) := by timed Eq.trans lean_s58 lean_r12
let lean_s60 := by timed congr lean_s39 lean_s59
have lean_s61 : (Eq let96 let113) := by timed flipCongrArg lean_r19 [Not]
let lean_s62 := by timed congr lean_s39 lean_s61
have lean_s63 : (Eq let95 let112) := by timed flipCongrArg lean_r18 [Not]
let lean_s64 := by timed congr lean_s39 lean_s63
have lean_s65 : (Eq let94 let111) := by timed flipCongrArg lean_r24 [Not]
let lean_s66 := by timed congr lean_s39 lean_s65
have lean_s67 : (Eq let93 let110) := by timed flipCongrArg lean_r31 [Not]
let lean_s68 := by timed congr lean_s39 lean_s67
let lean_s69 := by timed flipCongrArg lean_s42 [LE.le]
have lean_s70 : (Eq let91 let6) := by timed congr lean_s69 lean_r28
have lean_s71 : (Eq let91 let42) := by timed Eq.trans lean_s70 lean_r37
have lean_s72 : (Eq let92 let43) := by timed flipCongrArg lean_s71 [Not]
let lean_s73 := by timed congr lean_s39 lean_s72
let lean_s74 := by timed flipCongrArg lean_s46 [LE.le]
have lean_s75 : (Eq let89 let9) := by timed congr lean_s74 lean_r28
have lean_s76 : (Eq let89 let60) := by timed Eq.trans lean_s75 lean_r22
have lean_s77 : (Eq let90 let63) := by timed flipCongrArg lean_s76 [Not]
let lean_s78 := by timed congr lean_s39 lean_s77
let lean_s79 := by timed flipCongrArg lean_s50 [LE.le]
have lean_s80 : (Eq let87 let37) := by timed congr lean_s79 lean_r28
have lean_s81 : (Eq let87 let54) := by timed Eq.trans lean_s80 lean_r27
have lean_s82 : (Eq let88 let56) := by timed flipCongrArg lean_s81 [Not]
let lean_s83 := by timed congr lean_s39 lean_s82
let lean_s84 := by timed flipCongrArg lean_s40 [LE.le]
have lean_s85 : (Eq let85 let41) := by timed congr lean_s84 lean_r28
have lean_s86 : (Eq let85 let40) := by timed Eq.trans lean_s85 lean_r14
have lean_s87 : (Eq let86 let69) := by timed flipCongrArg lean_s86 [Not]
let lean_s88 := by timed congr lean_s83 lean_s87
let lean_s89 := by timed congr lean_s78 lean_s88
let lean_s90 := by timed congr lean_s73 lean_s89
let lean_s91 := by timed congr lean_s68 lean_s90
let lean_s92 := by timed congr lean_s66 lean_s91
let lean_s93 := by timed congr lean_s64 lean_s92
let lean_s94 := by timed congr lean_s62 lean_s93
have lean_s95 : let115 := by timed congr lean_s60 lean_s94
have lean_s96 : let115 := by timed Eq.trans lean_r40 lean_s95
have lean_s97 : let114 := by timed eqResolve lean_a49 lean_s96
have lean_s98 : let69 := by andElim lean_s97, 8
let lean_s99 := by R1 lean_s38, lean_s98, let40, [(- 1), 0]
have lean_s100 : let56 := by andElim lean_s97, 7
let lean_s101 := by R1 lean_s99, lean_s100, let54, [(- 1), 0]
have lean_s102 : let63 := by andElim lean_s97, 6
let lean_s103 := by R1 lean_s101, lean_s102, let60, [(- 1), 0]
have lean_s104 : let43 := by andElim lean_s97, 5
let lean_s105 := by R1 lean_s103, lean_s104, let42, [(- 1), 0]
have lean_s106 : let28 := by andElim lean_s97, 0
exact (show False from by R2 lean_s105, lean_s106, let28, [0, 0])


