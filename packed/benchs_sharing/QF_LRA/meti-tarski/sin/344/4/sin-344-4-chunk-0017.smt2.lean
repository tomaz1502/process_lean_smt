open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoW : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}
variable {skoW : Rat}
variable {skoX : Rat}
variable {skoY : Rat}
variable {skoZ : Rat}

theorem th0 :
  let let1 := (Int.ofNat 1)
  let let2 := (binrel% HDiv.hDiv let1 (Int.ofNat 10))
  let let3 := (binrel% LE.le skoW let2)
  let let4 := (Not let3)
  let let5 := (binrel% GT.gt skoW let2)
  let let6 := (binrel% LE.le skoY let2)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoY let2)
  let let9 := (Int.ofNat 0)
  let let10 := (Rat.ofInt 1)
  let let11 := (Neg.neg let10)
  let let12 := (binrel% LT.lt let11 let9)
  let let13 := (binrel% LE.le skoZ let2)
  let let14 := (Not let13)
  let let15 := (binrel% GT.gt skoZ let2)
  let let16 := (binrel% HMul.hMul let11 let2)
  let let17 := (Rat.ofInt 0)
  let let18 := (binrel% HMul.hMul let10 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let16 let16))))
  let let20 := (binrel% HMul.hMul let11 skoZ)
  let let21 := (binrel% HMul.hMul let11 skoY)
  let let22 := (binrel% HMul.hMul let11 skoX)
  let let23 := (binrel% HMul.hMul let11 skoW)
  let let24 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))
  let let25 := (binrel% HMul.hMul let10 let24)
  let let26 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let21 let20))))
  let let27 := (binrel% GE.ge let26 let19)
  let let28 := (Not let27)
  let let29 := (binrel% LT.lt let26 let19)
  let let30 := (binrel% LE.le skoX let2)
  let let31 := (Not let30)
  let let32 := (binrel% GT.gt skoX let2)
  let let33 := (Neg.neg let1)
  let let34 := (binrel% HMul.hMul let33 skoY)
  let let35 := (binrel% HMul.hMul let33 skoZ)
  let let36 := (Neg.neg let2)
  let let37 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2) (Int.ofNat 5)))
  let let38 := (binrel% GE.ge let17 let37)
  let let39 := (binrel% GE.ge let24 let17)
  let let40 := (Not let39)
  let let41 := (binrel% LT.lt let24 let17)
  let let42 := (binrel% GE.ge let35 let36)
  let let43 := (Not let42)
  let let44 := (Not let43)
  let let45 := (Eq let44 let42)
  let let46 := (Int.ofNat 3)
  let let47 := (binrel% GE.ge skoW let46)
  let let48 := (Rat.ofInt 3)
  let let49 := (binrel% LE.le let48 skoW)
  let let50 := (binrel% HMul.hMul let33 skoW)
  let let51 := (binrel% HMul.hMul let33 skoX)
  let let52 := (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let51 let50))
  let let53 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let51 let34))
  let let54 := (binrel% GE.ge skoX let46)
  let let55 := (binrel% LE.le let48 skoX)
  let let56 := (binrel% GE.ge let24 let9)
  let let57 := (binrel% LE.le let52 skoZ)
  let let58 := (binrel% GE.ge let34 let36)
  let let59 := (Not let58)
  let let60 := (Not let59)
  let let61 := (Eq let58 let60)
  let let62 := (Eq let60 let58)
  let let63 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let34 let35))))
  let let64 := (binrel% GE.ge let50 let36)
  let let65 := (binrel% GE.ge let51 let36)
  let let66 := (Eq let64 let64)
  let let67 := (binrel% GE.ge skoY let46)
  let let68 := (binrel% LE.le let48 skoY)
  let let69 := (binrel% HDiv.hDiv let10 (Rat.ofInt 10))
  let let70 := (binrel% LE.le skoZ let69)
  let let71 := (Not let70)
  let let72 := (binrel% LE.le skoY let69)
  let let73 := (Not let72)
  let let74 := (binrel% LE.le skoX let69)
  let let75 := (Not let74)
  let let76 := (binrel% LE.le skoW let69)
  let let77 := (Not let76)
  let let78 := (binrel% LE.le let48 skoZ)
  let let79 := (Not let78)
  let let80 := (Not let68)
  let let81 := (Not let55)
  let let82 := (Not let49)
  let let83 := (binrel% HMul.hMul skoY let11)
  let let84 := (binrel% HMul.hMul skoX let11)
  let let85 := (binrel% HMul.hMul skoW let11)
  let let86 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let85 let84) let83)
  let let87 := (binrel% LE.le let86 skoZ)
  let let88 := (Not let87)
  let let89 := (And let88 (And let82 (And let81 (And let80 (And let79 (And let77 (And let75 (And let73 let71))))))))
  let let90 := (Eq let42 let44)
  let let91 := (Not let56)
  let let92 := (Not let91)
  let let93 := (Eq let92 let56)
  let let94 := (Not True)
  let let95 := (Eq let56 let92)
  let let96 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let36 let36))))
  let let97 := (Not let65)
  let let98 := (Not let97)
  let let99 := (Eq let98 let65)
  let let100 := (Eq let65 let65)
  let let101 := (Eq let84 let51)
  let let102 := (binrel% GE.ge skoZ let46)
  let let103 := (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd let84 let83))
  let let104 := (Eq let42 let42)
  let let105 := (Eq let85 let50)
  let let106 := (Eq let56 let56)
  let let107 := (Not let64)
  let let108 := (Not let107)
  let let109 := (Eq let108 let64)
  let let110 := (Eq let64 let108)
  let let111 := (binrel% GT.gt let10 let9)
  let let112 := (Eq let65 let98)
  let let113 := (Eq let83 let34)
  let let114 := (Eq let58 let58)
  let let115 := (Not let102)
  let let116 := (Not let67)
  let let117 := (Not let54)
  let let118 := (Not let47)
  let let119 := (And let91 (And let118 (And let117 (And let116 (And let115 (And let107 (And let97 (And let59 let43))))))))
  let let120 := (Eq let89 let119)
  let let121 := (Or let42 (Or let58 (Or let65 (Or let64 let56))))
  let let122 := (Or let44 (Or let60 (Or let98 (Or let108 let92))))
  let let123 := (Not let41)
  let let124 := (binrel% LT.lt let20 let16)
  let let125 := (And let12 let15)
  let let126 := (binrel% LT.lt let21 let16)
  let let127 := (And let12 let8)
  let let128 := (binrel% LT.lt let22 let16)
  let let129 := (And let12 let32)
  let let130 := (binrel% LT.lt let23 let16)
  let let131 := (And let12 let5)
  let let132 := (binrel% LT.lt let25 let18)
  let let133 := (And let111 let41)
(Eq let5 let4) → (Eq let8 let7) → (Eq let12 True) → (Eq let15 let14) → (Eq let29 let28) → (Eq let32 let31) → (Eq let21 let34) → (Eq let20 let35) → (Eq let16 let36) → (Eq let38 True) → (Eq let41 let40) → let45 → (Eq let11 let11) → (Eq let49 let47) → (Eq let53 let52) → (Eq let55 let54) → (Eq let13 let42) → (Eq let57 let56) → (Eq let62 let61) → (Eq let63 let17) → (Eq let3 let64) → (Eq let18 let17) → (Eq let30 let65) → (Eq let22 let51) → (Eq let66 True) → (Eq let68 let67) → (Eq let89 let89) → (Eq let45 let90) → let93 → (Eq let6 let58) → (Eq let94 False) → (Eq let93 let95) → (Eq let96 let37) → let99 → (Eq let69 let2) → (Eq let100 True) → let101 → (Eq let78 let102) → (Eq let86 let103) → (Eq let104 True) → let105 → (Eq let106 True) → (Eq let23 let50) → let109 → (Eq let25 let24) → (Eq let109 let110) → (Eq let111 True) → (Eq let39 let56) → (Eq let99 let112) → let113 → (Eq let114 True) → let62 → let89 → False :=
  let let1 := (Int.ofNat 1)
  let let2 := (binrel% HDiv.hDiv let1 (Int.ofNat 10))
  let let3 := (binrel% LE.le skoW let2)
  let let4 := (Not let3)
  let let5 := (binrel% GT.gt skoW let2)
  let let6 := (binrel% LE.le skoY let2)
  let let7 := (Not let6)
  let let8 := (binrel% GT.gt skoY let2)
  let let9 := (Int.ofNat 0)
  let let10 := (Rat.ofInt 1)
  let let11 := (Neg.neg let10)
  let let12 := (binrel% LT.lt let11 let9)
  let let13 := (binrel% LE.le skoZ let2)
  let let14 := (Not let13)
  let let15 := (binrel% GT.gt skoZ let2)
  let let16 := (binrel% HMul.hMul let11 let2)
  let let17 := (Rat.ofInt 0)
  let let18 := (binrel% HMul.hMul let10 let17)
  let let19 := (binrel% HAdd.hAdd let18 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let16 (binrel% HAdd.hAdd let16 let16))))
  let let20 := (binrel% HMul.hMul let11 skoZ)
  let let21 := (binrel% HMul.hMul let11 skoY)
  let let22 := (binrel% HMul.hMul let11 skoX)
  let let23 := (binrel% HMul.hMul let11 skoW)
  let let24 := (binrel% HAdd.hAdd skoZ (binrel% HAdd.hAdd skoY (binrel% HAdd.hAdd skoX skoW)))
  let let25 := (binrel% HMul.hMul let10 let24)
  let let26 := (binrel% HAdd.hAdd let25 (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd let22 (binrel% HAdd.hAdd let21 let20))))
  let let27 := (binrel% GE.ge let26 let19)
  let let28 := (Not let27)
  let let29 := (binrel% LT.lt let26 let19)
  let let30 := (binrel% LE.le skoX let2)
  let let31 := (Not let30)
  let let32 := (binrel% GT.gt skoX let2)
  let let33 := (Neg.neg let1)
  let let34 := (binrel% HMul.hMul let33 skoY)
  let let35 := (binrel% HMul.hMul let33 skoZ)
  let let36 := (Neg.neg let2)
  let let37 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 2) (Int.ofNat 5)))
  let let38 := (binrel% GE.ge let17 let37)
  let let39 := (binrel% GE.ge let24 let17)
  let let40 := (Not let39)
  let let41 := (binrel% LT.lt let24 let17)
  let let42 := (binrel% GE.ge let35 let36)
  let let43 := (Not let42)
  let let44 := (Not let43)
  let let45 := (Eq let44 let42)
  let let46 := (Int.ofNat 3)
  let let47 := (binrel% GE.ge skoW let46)
  let let48 := (Rat.ofInt 3)
  let let49 := (binrel% LE.le let48 skoW)
  let let50 := (binrel% HMul.hMul let33 skoW)
  let let51 := (binrel% HMul.hMul let33 skoX)
  let let52 := (binrel% HAdd.hAdd let34 (binrel% HAdd.hAdd let51 let50))
  let let53 := (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let51 let34))
  let let54 := (binrel% GE.ge skoX let46)
  let let55 := (binrel% LE.le let48 skoX)
  let let56 := (binrel% GE.ge let24 let9)
  let let57 := (binrel% LE.le let52 skoZ)
  let let58 := (binrel% GE.ge let34 let36)
  let let59 := (Not let58)
  let let60 := (Not let59)
  let let61 := (Eq let58 let60)
  let let62 := (Eq let60 let58)
  let let63 := (binrel% HAdd.hAdd let24 (binrel% HAdd.hAdd let50 (binrel% HAdd.hAdd let51 (binrel% HAdd.hAdd let34 let35))))
  let let64 := (binrel% GE.ge let50 let36)
  let let65 := (binrel% GE.ge let51 let36)
  let let66 := (Eq let64 let64)
  let let67 := (binrel% GE.ge skoY let46)
  let let68 := (binrel% LE.le let48 skoY)
  let let69 := (binrel% HDiv.hDiv let10 (Rat.ofInt 10))
  let let70 := (binrel% LE.le skoZ let69)
  let let71 := (Not let70)
  let let72 := (binrel% LE.le skoY let69)
  let let73 := (Not let72)
  let let74 := (binrel% LE.le skoX let69)
  let let75 := (Not let74)
  let let76 := (binrel% LE.le skoW let69)
  let let77 := (Not let76)
  let let78 := (binrel% LE.le let48 skoZ)
  let let79 := (Not let78)
  let let80 := (Not let68)
  let let81 := (Not let55)
  let let82 := (Not let49)
  let let83 := (binrel% HMul.hMul skoY let11)
  let let84 := (binrel% HMul.hMul skoX let11)
  let let85 := (binrel% HMul.hMul skoW let11)
  let let86 := (binrel% HAdd.hAdd (binrel% HAdd.hAdd let85 let84) let83)
  let let87 := (binrel% LE.le let86 skoZ)
  let let88 := (Not let87)
  let let89 := (And let88 (And let82 (And let81 (And let80 (And let79 (And let77 (And let75 (And let73 let71))))))))
  let let90 := (Eq let42 let44)
  let let91 := (Not let56)
  let let92 := (Not let91)
  let let93 := (Eq let92 let56)
  let let94 := (Not True)
  let let95 := (Eq let56 let92)
  let let96 := (binrel% HAdd.hAdd let17 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let36 (binrel% HAdd.hAdd let36 let36))))
  let let97 := (Not let65)
  let let98 := (Not let97)
  let let99 := (Eq let98 let65)
  let let100 := (Eq let65 let65)
  let let101 := (Eq let84 let51)
  let let102 := (binrel% GE.ge skoZ let46)
  let let103 := (binrel% HAdd.hAdd let85 (binrel% HAdd.hAdd let84 let83))
  let let104 := (Eq let42 let42)
  let let105 := (Eq let85 let50)
  let let106 := (Eq let56 let56)
  let let107 := (Not let64)
  let let108 := (Not let107)
  let let109 := (Eq let108 let64)
  let let110 := (Eq let64 let108)
  let let111 := (binrel% GT.gt let10 let9)
  let let112 := (Eq let65 let98)
  let let113 := (Eq let83 let34)
  let let114 := (Eq let58 let58)
  let let115 := (Not let102)
  let let116 := (Not let67)
  let let117 := (Not let54)
  let let118 := (Not let47)
  let let119 := (And let91 (And let118 (And let117 (And let116 (And let115 (And let107 (And let97 (And let59 let43))))))))
  let let120 := (Eq let89 let119)
  let let121 := (Or let42 (Or let58 (Or let65 (Or let64 let56))))
  let let122 := (Or let44 (Or let60 (Or let98 (Or let108 let92))))
  let let123 := (Not let41)
  let let124 := (binrel% LT.lt let20 let16)
  let let125 := (And let12 let15)
  let let126 := (binrel% LT.lt let21 let16)
  let let127 := (And let12 let8)
  let let128 := (binrel% LT.lt let22 let16)
  let let129 := (And let12 let32)
  let let130 := (binrel% LT.lt let23 let16)
  let let131 := (And let12 let5)
  let let132 := (binrel% LT.lt let25 let18)
  let let133 := (And let111 let41)
fun lean_r0 : (Eq let5 let4) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let12 True) => -- EVALUATE
fun lean_r3 : (Eq let15 let14) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let29 let28) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let32 let31) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let21 let34) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let20 let35) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let16 let36) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let38 True) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let41 let40) => -- THEORY_REWRITE_ARITH
fun lean_r11 : let45 => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let11 let11) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let49 let47) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let53 let52) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let55 let54) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let13 let42) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let57 let56) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let62 let61) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let63 let17) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let3 let64) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let30 let65) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let22 let51) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let66 True) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let68 let67) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let89 let89) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let45 let90) => -- THEORY_REWRITE_BOOL
fun lean_r28 : let93 => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let6 let58) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq let94 False) => -- THEORY_REWRITE_BOOL
fun lean_r31 : (Eq let93 let95) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let96 let37) => -- THEORY_REWRITE_ARITH
fun lean_r33 : let99 => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let69 let2) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let100 True) => -- THEORY_REWRITE_BOOL
fun lean_r36 : let101 => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let78 let102) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq let86 let103) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let104 True) => -- THEORY_REWRITE_BOOL
fun lean_r40 : let105 => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let106 True) => -- THEORY_REWRITE_BOOL
fun lean_r42 : (Eq let23 let50) => -- THEORY_REWRITE_ARITH
fun lean_r43 : let109 => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let109 let110) => -- THEORY_REWRITE_BOOL
fun lean_r46 : (Eq let111 True) => -- EVALUATE
fun lean_r47 : (Eq let39 let56) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let99 let112) => -- THEORY_REWRITE_BOOL
fun lean_r49 : let113 => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let114 True) => -- THEORY_REWRITE_BOOL
fun lean_r51 : let62 => -- THEORY_REWRITE_BOOL
fun lean_a52 : let89 => by
have lean_s0 : (Or let44 (Or let60 (Or let98 (Or let108 (Or let92 False))))) :=
  (scope (fun lean_a53 : let43 =>
    (scope (fun lean_a54 : let59 =>
      (scope (fun lean_a55 : let97 =>
        (scope (fun lean_a56 : let107 =>
          (scope (fun lean_a57 : let91 =>
            have lean_s0 : (Eq let40 let91) := by timed flipCongrArg lean_r47 [Not]
            have lean_s1 : (Eq let41 let91) := by timed Eq.trans lean_r10 lean_s0
            have lean_s2 : (Eq let91 let41) := by timed Eq.symm lean_s1
            have lean_s3 : let41 := by timed eqResolve lean_a57 lean_s2
            have lean_s4 : (Or let123 False) :=
              (scope (fun lean_a58 : let41 =>
                have lean_s4 : let111 := by timed trueElim lean_r46
                have lean_s5 : let133 := by timed And.intro lean_s4 lean_a58
                have lean_s6 : (Implies let133 let132) := by arithMulPos [let24, let17, let10], 0
                have lean_s7 : let132 := by timed modusPonens lean_s5 lean_s6
                have lean_s8 : let12 := by timed trueElim lean_r2
                have lean_s9 : (Eq let4 let107) := by timed flipCongrArg lean_r20 [Not]
                have lean_s10 : (Eq let5 let107) := by timed Eq.trans lean_r0 lean_s9
                have lean_s11 : (Eq let107 let5) := by timed Eq.symm lean_s10
                have lean_s12 : let5 := by timed eqResolve lean_a56 lean_s11
                have lean_s13 : let131 := by timed And.intro lean_s8 lean_s12
                have lean_s14 : (Implies let131 let130) := by arithMulNeg [skoW, let2, let11], 2
                have lean_s15 : let130 := by timed modusPonens lean_s13 lean_s14
                have lean_s16 : (Eq let31 let97) := by timed flipCongrArg lean_r22 [Not]
                have lean_s17 : (Eq let32 let97) := by timed Eq.trans lean_r5 lean_s16
                have lean_s18 : (Eq let97 let32) := by timed Eq.symm lean_s17
                have lean_s19 : let32 := by timed eqResolve lean_a55 lean_s18
                have lean_s20 : let129 := by timed And.intro lean_s8 lean_s19
                have lean_s21 : (Implies let129 let128) := by arithMulNeg [skoX, let2, let11], 2
                have lean_s22 : let128 := by timed modusPonens lean_s20 lean_s21
                have lean_s23 : (Eq let7 let59) := by timed flipCongrArg lean_r29 [Not]
                have lean_s24 : (Eq let8 let59) := by timed Eq.trans lean_r1 lean_s23
                have lean_s25 : (Eq let59 let8) := by timed Eq.symm lean_s24
                have lean_s26 : let8 := by timed eqResolve lean_a54 lean_s25
                have lean_s27 : let127 := by timed And.intro lean_s8 lean_s26
                have lean_s28 : (Implies let127 let126) := by arithMulNeg [skoY, let2, let11], 2
                have lean_s29 : let126 := by timed modusPonens lean_s27 lean_s28
                have lean_s30 : (Eq let14 let43) := by timed flipCongrArg lean_r16 [Not]
                have lean_s31 : (Eq let15 let43) := by timed Eq.trans lean_r3 lean_s30
                have lean_s32 : (Eq let43 let15) := by timed Eq.symm lean_s31
                have lean_s33 : let15 := by timed eqResolve lean_a53 lean_s32
                have lean_s34 : let125 := by timed And.intro lean_s8 lean_s33
                have lean_s35 : (Implies let125 let124) := by arithMulNeg [skoZ, let2, let11], 2
                have lean_s36 : let124 := by timed modusPonens lean_s34 lean_s35
                have lean_s37 : let29 := by sumBounds [lean_s7, lean_s15, lean_s22, lean_s29, lean_s36]
                let lean_s38 := by timed congrHAdd lean_r6 lean_r7
                let lean_s39 := by timed congrHAdd lean_r23 lean_s38
                let lean_s40 := by timed congrHAdd lean_r42 lean_s39
                have lean_s41 : (Eq let26 let63) := by timed congrHAdd lean_r44 lean_s40
                have lean_s42 : (Eq let26 let17) := by timed Eq.trans lean_s41 lean_r19
                let lean_s43 := by timed flipCongrArg lean_s42 [GE.ge]
                let lean_s44 := by timed congrHAdd lean_r8 lean_r8
                let lean_s45 := by timed congrHAdd lean_r8 lean_s44
                let lean_s46 := by timed congrHAdd lean_r8 lean_s45
                have lean_s47 : (Eq let19 let96) := by timed congrHAdd lean_r21 lean_s46
                have lean_s48 : (Eq let19 let37) := by timed Eq.trans lean_s47 lean_r32
                have lean_s49 : (Eq let27 let38) := by timed congr lean_s43 lean_s48
                have lean_s50 : (Eq let27 True) := by timed Eq.trans lean_s49 lean_r9
                have lean_s51 : (Eq let28 let94) := by timed flipCongrArg lean_s50 [Not]
                have lean_s52 : (Eq let28 False) := by timed Eq.trans lean_s51 lean_r30
                have lean_s53 : (Eq let29 False) := by timed Eq.trans lean_r4 lean_s52
                show False from by timed eqResolve lean_s37 lean_s53
              ))
            have lean_s5 : let123 := by liftOrNToNeg lean_s4
            have lean_s6 : (Eq let123 let92) := by timed flipCongrArg lean_s1 [Not]
            have lean_s7 : (Eq let123 let56) := by timed Eq.trans lean_s6 lean_r28
            have lean_s8 : (Eq let56 let39) := by timed Eq.symm lean_r47
            have lean_s9 : (Eq let123 let39) := by timed Eq.trans lean_s7 lean_s8
            have lean_s10 : let39 := by timed eqResolve lean_s5 lean_s9
            have lean_s11 : (Eq let56 let123) := by timed Eq.symm lean_s7
            have lean_s12 : (Eq let39 let123) := by timed Eq.trans lean_r47 lean_s11
            have lean_s13 : let123 := by timed eqResolve lean_s10 lean_s12
            show False from by timed contradiction lean_s3 lean_s13
  ))))))))))
have lean_s1 : (Not (And let43 (And let59 (And let97 (And let107 let91))))) := by liftOrNToNeg lean_s0
have lean_s2 : let122 := by timed flipNotAnd lean_s1 [let43, let59, let97, let107, let91]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let104 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let90 let104) := by timed congr lean_s5 lean_r11
have lean_s7 : (Eq let90 True) := by timed Eq.trans lean_s6 lean_r39
have lean_s8 : (Eq let45 True) := by timed Eq.trans lean_r27 lean_s7
have lean_s9 : let45 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let114 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let61 let114) := by timed congr lean_s12 lean_r51
have lean_s14 : (Eq let61 True) := by timed Eq.trans lean_s13 lean_r50
have lean_s15 : (Eq let62 True) := by timed Eq.trans lean_r18 lean_s14
have lean_s16 : let62 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : let100 := by timed rfl
let lean_s19 := by timed flipCongrArg lean_s18 [Eq]
have lean_s20 : (Eq let112 let100) := by timed congr lean_s19 lean_r33
have lean_s21 : (Eq let112 True) := by timed Eq.trans lean_s20 lean_r35
have lean_s22 : (Eq let99 True) := by timed Eq.trans lean_r48 lean_s21
have lean_s23 : let99 := by timed trueElim lean_s22
let lean_s24 := by timed congr lean_s3 lean_s23
have lean_s25 : let66 := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [Eq]
have lean_s27 : (Eq let110 let66) := by timed congr lean_s26 lean_r43
have lean_s28 : (Eq let110 True) := by timed Eq.trans lean_s27 lean_r24
have lean_s29 : (Eq let109 True) := by timed Eq.trans lean_r45 lean_s28
have lean_s30 : let109 := by timed trueElim lean_s29
let lean_s31 := by timed congr lean_s3 lean_s30
have lean_s32 : let106 := by timed rfl
let lean_s33 := by timed flipCongrArg lean_s32 [Eq]
have lean_s34 : (Eq let95 let106) := by timed congr lean_s33 lean_r28
have lean_s35 : (Eq let95 True) := by timed Eq.trans lean_s34 lean_r41
have lean_s36 : (Eq let93 True) := by timed Eq.trans lean_r31 lean_s35
have lean_s37 : let93 := by timed trueElim lean_s36
let lean_s38 := by timed congr lean_s31 lean_s37
let lean_s39 := by timed congr lean_s24 lean_s38
let lean_s40 := by timed congr lean_s17 lean_s39
have lean_s41 : (Eq let122 let121) := by timed congr lean_s10 lean_s40
have lean_s42 : let121 := by timed eqResolve lean_s2 lean_s41
have lean_s43 : (Or let56 (Or let64 (Or let65 (Or let58 let42)))) := by permutateOr lean_s42, [4, 3, 2, 1, 0], (- 1)
have lean_s44 : (Eq And And) := by timed rfl
have lean_s45 : (Eq skoW skoW) := by timed rfl
let lean_s46 := by timed flipCongrArg lean_s45 [HMul.hMul]
have lean_s47 : (Eq let85 let85) := by timed congr lean_s46 lean_r12
have lean_s48 : let105 := by timed Eq.trans lean_s47 lean_r40
have lean_s49 : (Eq skoX skoX) := by timed rfl
let lean_s50 := by timed flipCongrArg lean_s49 [HMul.hMul]
have lean_s51 : (Eq let84 let84) := by timed congr lean_s50 lean_r12
have lean_s52 : let101 := by timed Eq.trans lean_s51 lean_r36
have lean_s53 : (Eq skoY skoY) := by timed rfl
let lean_s54 := by timed flipCongrArg lean_s53 [HMul.hMul]
have lean_s55 : (Eq let83 let83) := by timed congr lean_s54 lean_r12
have lean_s56 : let113 := by timed Eq.trans lean_s55 lean_r49
let lean_s57 := by timed congrHAdd lean_s52 lean_s56
have lean_s58 : (Eq let103 let53) := by timed congrHAdd lean_s48 lean_s57
have lean_s59 : (Eq let103 let52) := by timed Eq.trans lean_s58 lean_r14
have lean_s60 : (Eq let86 let52) := by timed Eq.trans lean_r38 lean_s59
let lean_s61 := by timed flipCongrArg lean_s60 [LE.le]
have lean_s62 : (Eq skoZ skoZ) := by timed rfl
have lean_s63 : (Eq let87 let57) := by timed congr lean_s61 lean_s62
have lean_s64 : (Eq let87 let56) := by timed Eq.trans lean_s63 lean_r17
have lean_s65 : (Eq let88 let91) := by timed flipCongrArg lean_s64 [Not]
let lean_s66 := by timed congr lean_s44 lean_s65
have lean_s67 : (Eq let82 let118) := by timed flipCongrArg lean_r13 [Not]
let lean_s68 := by timed congr lean_s44 lean_s67
have lean_s69 : (Eq let81 let117) := by timed flipCongrArg lean_r15 [Not]
let lean_s70 := by timed congr lean_s44 lean_s69
have lean_s71 : (Eq let80 let116) := by timed flipCongrArg lean_r25 [Not]
let lean_s72 := by timed congr lean_s44 lean_s71
have lean_s73 : (Eq let79 let115) := by timed flipCongrArg lean_r37 [Not]
let lean_s74 := by timed congr lean_s44 lean_s73
let lean_s75 := by timed flipCongrArg lean_s45 [LE.le]
have lean_s76 : (Eq let76 let3) := by timed congr lean_s75 lean_r34
have lean_s77 : (Eq let76 let64) := by timed Eq.trans lean_s76 lean_r20
have lean_s78 : (Eq let77 let107) := by timed flipCongrArg lean_s77 [Not]
let lean_s79 := by timed congr lean_s44 lean_s78
let lean_s80 := by timed flipCongrArg lean_s49 [LE.le]
have lean_s81 : (Eq let74 let30) := by timed congr lean_s80 lean_r34
have lean_s82 : (Eq let74 let65) := by timed Eq.trans lean_s81 lean_r22
have lean_s83 : (Eq let75 let97) := by timed flipCongrArg lean_s82 [Not]
let lean_s84 := by timed congr lean_s44 lean_s83
let lean_s85 := by timed flipCongrArg lean_s53 [LE.le]
have lean_s86 : (Eq let72 let6) := by timed congr lean_s85 lean_r34
have lean_s87 : (Eq let72 let58) := by timed Eq.trans lean_s86 lean_r29
have lean_s88 : (Eq let73 let59) := by timed flipCongrArg lean_s87 [Not]
let lean_s89 := by timed congr lean_s44 lean_s88
let lean_s90 := by timed flipCongrArg lean_s62 [LE.le]
have lean_s91 : (Eq let70 let13) := by timed congr lean_s90 lean_r34
have lean_s92 : (Eq let70 let42) := by timed Eq.trans lean_s91 lean_r16
have lean_s93 : (Eq let71 let43) := by timed flipCongrArg lean_s92 [Not]
let lean_s94 := by timed congr lean_s89 lean_s93
let lean_s95 := by timed congr lean_s84 lean_s94
let lean_s96 := by timed congr lean_s79 lean_s95
let lean_s97 := by timed congr lean_s74 lean_s96
let lean_s98 := by timed congr lean_s72 lean_s97
let lean_s99 := by timed congr lean_s70 lean_s98
let lean_s100 := by timed congr lean_s68 lean_s99
have lean_s101 : let120 := by timed congr lean_s66 lean_s100
have lean_s102 : let120 := by timed Eq.trans lean_r26 lean_s101
have lean_s103 : let119 := by timed eqResolve lean_a52 lean_s102
have lean_s104 : let43 := by andElim lean_s103, 8
let lean_s105 := by R1 lean_s43, lean_s104, let42, [(- 1), 0]
have lean_s106 : let59 := by andElim lean_s103, 7
let lean_s107 := by R1 lean_s105, lean_s106, let58, [(- 1), 0]
have lean_s108 : let97 := by andElim lean_s103, 6
let lean_s109 := by R1 lean_s107, lean_s108, let65, [(- 1), 0]
have lean_s110 : let107 := by andElim lean_s103, 5
let lean_s111 := by R1 lean_s109, lean_s110, let64, [(- 1), 0]
have lean_s112 : let91 := by andElim lean_s103, 0
exact (show False from by R1 lean_s111, lean_s112, let56, [0, 0])


