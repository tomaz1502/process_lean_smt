open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoA : Rat}
variable {skoB : Rat}
variable {skoX : Rat}
variable {skoA : Rat}
variable {skoB : Rat}
variable {skoX : Rat}

theorem th0 :
  let let1 := (binrel% HAdd.hAdd skoA skoX)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% HMul.hMul let2 let1)
  let let4 := (Neg.neg (Int.ofNat 1))
  let let5 := (binrel% HMul.hMul let4 skoX)
  let let6 := (Neg.neg let2)
  let let7 := (binrel% HMul.hMul let6 skoX)
  let let8 := (Rat.ofInt 0)
  let let9 := (binrel% HMul.hMul let4 skoA)
  let let10 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let5 let9))
  let let11 := (binrel% HMul.hMul let2 let8)
  let let12 := (Not True)
  let let13 := (binrel% GE.ge let8 let8)
  let let14 := (binrel% LE.le let1 let8)
  let let15 := (Not let14)
  let let16 := (binrel% GT.gt let1 let8)
  let let17 := (Eq let16 let15)
  let let18 := (Int.ofNat 0)
  let let19 := (binrel% GT.gt let2 let18)
  let let20 := (binrel% GE.ge (binrel% HAdd.hAdd let9 let5) let18)
  let let21 := (binrel% LE.le skoA let8)
  let let22 := (Not let21)
  let let23 := (binrel% GT.gt skoA let8)
  let let24 := (binrel% GE.ge let5 let18)
  let let25 := (binrel% LE.le skoX let8)
  let let26 := (binrel% HMul.hMul let6 let8)
  let let27 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let26 let26))
  let let28 := (binrel% HMul.hMul let6 skoA)
  let let29 := (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let7 let28))
  let let30 := (binrel% GE.ge let29 let27)
  let let31 := (Not let30)
  let let32 := (binrel% LT.lt let29 let27)
  let let33 := (binrel% LE.le skoX let9)
  let let34 := (binrel% GE.ge (binrel% HMul.hMul let4 skoB) let18)
  let let35 := (binrel% LE.le skoB let8)
  let let36 := (binrel% GE.ge let9 let18)
  let let37 := (Not let36)
  let let38 := (Not let37)
  let let39 := (Eq let38 let36)
  let let40 := (binrel% LT.lt let6 let18)
  let let41 := (Eq let36 let38)
  let let42 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let8 let8))
  let let43 := (Not let25)
  let let44 := (Not let35)
  let let45 := (binrel% HMul.hMul skoA let6)
  let let46 := (binrel% LE.le skoX let45)
  let let47 := (And let46 (And let22 (And let44 let43)))
  let let48 := (Eq let24 let24)
  let let49 := (binrel% GT.gt skoX let8)
  let let50 := (Not let24)
  let let51 := (Not let50)
  let let52 := (Eq let51 let24)
  let let53 := (Eq let24 let51)
  let let54 := (Eq let45 let9)
  let let55 := (Eq let36 let36)
  let let56 := (Not let34)
  let let57 := (And let20 (And let37 (And let56 let50)))
  let let58 := (Eq let47 let57)
  let let59 := (Not let20)
  let let60 := (Or let36 (Or let24 let59))
  let let61 := (Or let38 (Or let51 let59))
  let let62 := (binrel% LT.lt let28 let26)
  let let63 := (And let40 let23)
  let let64 := (binrel% LT.lt let7 let26)
  let let65 := (And let40 let49)
  let let66 := (binrel% LE.le let3 let11)
  let let67 := (And let19 let14)
(Eq let3 let1) → (Eq let7 let5) → (Eq let10 let8) → (Eq let11 let8) → (Eq let12 False) → (Eq let13 True) → let17 → (Eq let19 True) → (Eq let14 let20) → (Eq let23 let22) → (Eq let25 let24) → (Eq let32 let31) → (Eq let33 let20) → (Eq let28 let9) → (Eq let35 let34) → let39 → (Eq let40 True) → (Eq let6 let6) → (Eq let39 let41) → (Eq let42 let8) → (Eq let21 let36) → (Eq let47 let47) → (Eq let48 True) → (Eq let49 let43) → let52 → (Eq let26 let8) → (Eq let52 let53) → let54 → (Eq let55 True) → let47 → False :=
  let let1 := (binrel% HAdd.hAdd skoA skoX)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% HMul.hMul let2 let1)
  let let4 := (Neg.neg (Int.ofNat 1))
  let let5 := (binrel% HMul.hMul let4 skoX)
  let let6 := (Neg.neg let2)
  let let7 := (binrel% HMul.hMul let6 skoX)
  let let8 := (Rat.ofInt 0)
  let let9 := (binrel% HMul.hMul let4 skoA)
  let let10 := (binrel% HAdd.hAdd let1 (binrel% HAdd.hAdd let5 let9))
  let let11 := (binrel% HMul.hMul let2 let8)
  let let12 := (Not True)
  let let13 := (binrel% GE.ge let8 let8)
  let let14 := (binrel% LE.le let1 let8)
  let let15 := (Not let14)
  let let16 := (binrel% GT.gt let1 let8)
  let let17 := (Eq let16 let15)
  let let18 := (Int.ofNat 0)
  let let19 := (binrel% GT.gt let2 let18)
  let let20 := (binrel% GE.ge (binrel% HAdd.hAdd let9 let5) let18)
  let let21 := (binrel% LE.le skoA let8)
  let let22 := (Not let21)
  let let23 := (binrel% GT.gt skoA let8)
  let let24 := (binrel% GE.ge let5 let18)
  let let25 := (binrel% LE.le skoX let8)
  let let26 := (binrel% HMul.hMul let6 let8)
  let let27 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let26 let26))
  let let28 := (binrel% HMul.hMul let6 skoA)
  let let29 := (binrel% HAdd.hAdd let3 (binrel% HAdd.hAdd let7 let28))
  let let30 := (binrel% GE.ge let29 let27)
  let let31 := (Not let30)
  let let32 := (binrel% LT.lt let29 let27)
  let let33 := (binrel% LE.le skoX let9)
  let let34 := (binrel% GE.ge (binrel% HMul.hMul let4 skoB) let18)
  let let35 := (binrel% LE.le skoB let8)
  let let36 := (binrel% GE.ge let9 let18)
  let let37 := (Not let36)
  let let38 := (Not let37)
  let let39 := (Eq let38 let36)
  let let40 := (binrel% LT.lt let6 let18)
  let let41 := (Eq let36 let38)
  let let42 := (binrel% HAdd.hAdd let8 (binrel% HAdd.hAdd let8 let8))
  let let43 := (Not let25)
  let let44 := (Not let35)
  let let45 := (binrel% HMul.hMul skoA let6)
  let let46 := (binrel% LE.le skoX let45)
  let let47 := (And let46 (And let22 (And let44 let43)))
  let let48 := (Eq let24 let24)
  let let49 := (binrel% GT.gt skoX let8)
  let let50 := (Not let24)
  let let51 := (Not let50)
  let let52 := (Eq let51 let24)
  let let53 := (Eq let24 let51)
  let let54 := (Eq let45 let9)
  let let55 := (Eq let36 let36)
  let let56 := (Not let34)
  let let57 := (And let20 (And let37 (And let56 let50)))
  let let58 := (Eq let47 let57)
  let let59 := (Not let20)
  let let60 := (Or let36 (Or let24 let59))
  let let61 := (Or let38 (Or let51 let59))
  let let62 := (binrel% LT.lt let28 let26)
  let let63 := (And let40 let23)
  let let64 := (binrel% LT.lt let7 let26)
  let let65 := (And let40 let49)
  let let66 := (binrel% LE.le let3 let11)
  let let67 := (And let19 let14)
fun lean_r0 : (Eq let3 let1) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let7 let5) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let10 let8) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let11 let8) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let12 False) => -- THEORY_REWRITE_BOOL
fun lean_r5 : (Eq let13 True) => -- THEORY_REWRITE_ARITH
fun lean_r6 : let17 => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let19 True) => -- EVALUATE
fun lean_r8 : (Eq let14 let20) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let23 let22) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let32 let31) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let33 let20) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let28 let9) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let35 let34) => -- THEORY_REWRITE_ARITH
fun lean_r15 : let39 => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let40 True) => -- EVALUATE
fun lean_r17 : (Eq let6 let6) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let39 let41) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let42 let8) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let21 let36) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let47 let47) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let48 True) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let49 let43) => -- THEORY_REWRITE_ARITH
fun lean_r24 : let52 => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let26 let8) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let52 let53) => -- THEORY_REWRITE_BOOL
fun lean_r27 : let54 => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let55 True) => -- THEORY_REWRITE_BOOL
fun lean_a29 : let47 => by
have lean_s0 : (Or let38 (Or let51 (Or let59 False))) :=
  (scope (fun lean_a30 : let37 =>
    (scope (fun lean_a31 : let50 =>
      (scope (fun lean_a32 : let20 =>
        have lean_s0 : (Eq let20 let14) := by timed Eq.symm lean_r8
        have lean_s1 : let14 := by timed eqResolve lean_a32 lean_s0
        have lean_s2 : (Or let15 False) :=
          (scope (fun lean_a33 : let14 =>
            have lean_s2 : let19 := by timed trueElim lean_r7
            have lean_s3 : let67 := by timed And.intro lean_s2 lean_a33
            have lean_s4 : (Implies let67 let66) := by arithMulPos [let1, let8, let2], 1
            have lean_s5 : let66 := by timed modusPonens lean_s3 lean_s4
            have lean_s6 : let40 := by timed trueElim lean_r16
            have lean_s7 : (Eq let43 let50) := by timed flipCongrArg lean_r10 [Not]
            have lean_s8 : (Eq let49 let50) := by timed Eq.trans lean_r23 lean_s7
            have lean_s9 : (Eq let50 let49) := by timed Eq.symm lean_s8
            have lean_s10 : let49 := by timed eqResolve lean_a31 lean_s9
            have lean_s11 : let65 := by timed And.intro lean_s6 lean_s10
            have lean_s12 : (Implies let65 let64) := by arithMulNeg [skoX, let8, let6], 2
            have lean_s13 : let64 := by timed modusPonens lean_s11 lean_s12
            have lean_s14 : (Eq let22 let37) := by timed flipCongrArg lean_r20 [Not]
            have lean_s15 : (Eq let23 let37) := by timed Eq.trans lean_r9 lean_s14
            have lean_s16 : (Eq let37 let23) := by timed Eq.symm lean_s15
            have lean_s17 : let23 := by timed eqResolve lean_a30 lean_s16
            have lean_s18 : let63 := by timed And.intro lean_s6 lean_s17
            have lean_s19 : (Implies let63 let62) := by arithMulNeg [skoA, let8, let6], 2
            have lean_s20 : let62 := by timed modusPonens lean_s18 lean_s19
            have lean_s21 : let32 := by sumBounds [lean_s5, lean_s13, lean_s20]
            let lean_s22 := by timed congrHAdd lean_r1 lean_r13
            have lean_s23 : (Eq let29 let10) := by timed congrHAdd lean_r0 lean_s22
            have lean_s24 : (Eq let29 let8) := by timed Eq.trans lean_s23 lean_r2
            let lean_s25 := by timed flipCongrArg lean_s24 [GE.ge]
            let lean_s26 := by timed congrHAdd lean_r25 lean_r25
            have lean_s27 : (Eq let27 let42) := by timed congrHAdd lean_r3 lean_s26
            have lean_s28 : (Eq let27 let8) := by timed Eq.trans lean_s27 lean_r19
            have lean_s29 : (Eq let30 let13) := by timed congr lean_s25 lean_s28
            have lean_s30 : (Eq let30 True) := by timed Eq.trans lean_s29 lean_r5
            have lean_s31 : (Eq let31 let12) := by timed flipCongrArg lean_s30 [Not]
            have lean_s32 : (Eq let31 False) := by timed Eq.trans lean_s31 lean_r4
            have lean_s33 : (Eq let32 False) := by timed Eq.trans lean_r11 lean_s32
            show False from by timed eqResolve lean_s21 lean_s33
          ))
        have lean_s3 : let15 := by liftOrNToNeg lean_s2
        have lean_s4 : (Eq let15 let59) := by timed flipCongrArg lean_r8 [Not]
        have lean_s5 : (Eq let16 let59) := by timed Eq.trans lean_r6 lean_s4
        have lean_s6 : (Eq let59 let16) := by timed Eq.symm lean_s5
        have lean_s7 : (Eq let15 let16) := by timed Eq.trans lean_s4 lean_s6
        have lean_s8 : let16 := by timed eqResolve lean_s3 lean_s7
        have lean_s9 : (Eq let59 let15) := by timed Eq.symm lean_s4
        have lean_s10 : let17 := by timed Eq.trans lean_s5 lean_s9
        have lean_s11 : let15 := by timed eqResolve lean_s8 lean_s10
        show False from by timed contradiction lean_s1 lean_s11
  ))))))
have lean_s1 : (Not (And let37 (And let50 let20))) := by liftOrNToNeg lean_s0
have lean_s2 : let61 := by timed flipNotAnd lean_s1 [let37, let50, let20]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let55 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let41 let55) := by timed congr lean_s5 lean_r15
have lean_s7 : (Eq let41 True) := by timed Eq.trans lean_s6 lean_r28
have lean_s8 : (Eq let39 True) := by timed Eq.trans lean_r18 lean_s7
have lean_s9 : let39 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let48 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let53 let48) := by timed congr lean_s12 lean_r24
have lean_s14 : (Eq let53 True) := by timed Eq.trans lean_s13 lean_r22
have lean_s15 : (Eq let52 True) := by timed Eq.trans lean_r26 lean_s14
have lean_s16 : let52 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq let59 let59) := by timed rfl
let lean_s19 := by timed congr lean_s17 lean_s18
have lean_s20 : (Eq let61 let60) := by timed congr lean_s10 lean_s19
have lean_s21 : let60 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Eq And And) := by timed rfl
have lean_s23 : (Eq skoX skoX) := by timed rfl
let lean_s24 := by timed flipCongrArg lean_s23 [LE.le]
have lean_s25 : (Eq skoA skoA) := by timed rfl
let lean_s26 := by timed flipCongrArg lean_s25 [HMul.hMul]
have lean_s27 : (Eq let45 let45) := by timed congr lean_s26 lean_r17
have lean_s28 : let54 := by timed Eq.trans lean_s27 lean_r27
have lean_s29 : (Eq let46 let33) := by timed congr lean_s24 lean_s28
have lean_s30 : (Eq let46 let20) := by timed Eq.trans lean_s29 lean_r12
let lean_s31 := by timed congr lean_s22 lean_s30
have lean_s32 : (Eq let22 let37) := by timed flipCongrArg lean_r20 [Not]
let lean_s33 := by timed congr lean_s22 lean_s32
have lean_s34 : (Eq let44 let56) := by timed flipCongrArg lean_r14 [Not]
let lean_s35 := by timed congr lean_s22 lean_s34
have lean_s36 : (Eq let43 let50) := by timed flipCongrArg lean_r10 [Not]
let lean_s37 := by timed congr lean_s35 lean_s36
let lean_s38 := by timed congr lean_s33 lean_s37
have lean_s39 : let58 := by timed congr lean_s31 lean_s38
have lean_s40 : let58 := by timed Eq.trans lean_r21 lean_s39
have lean_s41 : let57 := by timed eqResolve lean_a29 lean_s40
have lean_s42 : let50 := by andElim lean_s41, 3
let lean_s43 := by R1 lean_s21, lean_s42, let24, [(- 1), 0]
have lean_s44 : let37 := by andElim lean_s41, 1
let lean_s45 := by R1 lean_s43, lean_s44, let36, [(- 1), 0]
have lean_s46 : let20 := by andElim lean_s41, 0
exact (show False from by R2 lean_s45, lean_s46, let20, [0, 0])


