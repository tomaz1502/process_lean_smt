open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoB : Rat}
variable {skoA : Rat}
variable {skoX : Rat}
variable {skoB : Rat}
variable {skoA : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% HMul.hMul let3 let5)
  let let7 := (binrel% HMul.hMul let2 let5)
  let let8 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let6 let6))
  let let9 := (binrel% HMul.hMul let3 skoB)
  let let10 := (binrel% HMul.hMul let3 skoX)
  let let11 := (binrel% HAdd.hAdd skoB skoX)
  let let12 := (binrel% HMul.hMul let2 let11)
  let let13 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let10 let9))
  let let14 := (binrel% GE.ge let13 let8)
  let let15 := (Not let14)
  let let16 := (binrel% LT.lt let13 let8)
  let let17 := (Neg.neg (Int.ofNat 1))
  let let18 := (binrel% HMul.hMul let17 skoX)
  let let19 := (binrel% HMul.hMul let17 skoB)
  let let20 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let18 let19))
  let let21 := (binrel% GE.ge let5 let5)
  let let22 := (binrel% LE.le let11 let5)
  let let23 := (Not let22)
  let let24 := (binrel% GT.gt let11 let5)
  let let25 := (Eq let24 let23)
  let let26 := (binrel% GT.gt let2 let1)
  let let27 := (binrel% GE.ge (binrel% HAdd.hAdd let19 let18) let1)
  let let28 := (binrel% LE.le skoX let19)
  let let29 := (binrel% LE.le skoB let5)
  let let30 := (Not let29)
  let let31 := (binrel% GT.gt skoB let5)
  let let32 := (binrel% GE.ge let19 let1)
  let let33 := (Not True)
  let let34 := (binrel% HMul.hMul skoB let3)
  let let35 := (Eq let34 let19)
  let let36 := (Not let32)
  let let37 := (Not let36)
  let let38 := (Eq let37 let32)
  let let39 := (binrel% GE.ge let18 let1)
  let let40 := (binrel% LE.le skoX let5)
  let let41 := (binrel% LE.le skoA let5)
  let let42 := (Not let41)
  let let43 := (Not let40)
  let let44 := (binrel% LE.le skoX let34)
  let let45 := (And let44 (And let43 (And let30 let42)))
  let let46 := (binrel% GT.gt skoX let5)
  let let47 := (Not let39)
  let let48 := (Not let47)
  let let49 := (Eq let48 let39)
  let let50 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let51 := (Eq let39 let39)
  let let52 := (Eq let39 let48)
  let let53 := (binrel% GE.ge (binrel% HMul.hMul let17 skoA) let1)
  let let54 := (Eq let32 let32)
  let let55 := (Eq let32 let37)
  let let56 := (Not let53)
  let let57 := (And let27 (And let47 (And let36 let56)))
  let let58 := (Eq let45 let57)
  let let59 := (Not let27)
  let let60 := (Or let32 (Or let39 let59))
  let let61 := (Or let37 (Or let48 let59))
  let let62 := (binrel% LT.lt let9 let6)
  let let63 := (And let4 let31)
  let let64 := (binrel% LT.lt let10 let6)
  let let65 := (And let4 let46)
  let let66 := (binrel% LE.le let12 let7)
  let let67 := (And let26 let22)
(Eq let4 True) → (Eq let16 let15) → (Eq let12 let11) → (Eq let10 let18) → (Eq let20 let5) → (Eq let7 let5) → (Eq let21 True) → let25 → (Eq let26 True) → (Eq let22 let27) → (Eq let28 let27) → (Eq let31 let30) → (Eq let29 let32) → (Eq let33 False) → let35 → let38 → (Eq let3 let3) → (Eq let9 let19) → (Eq let40 let39) → (Eq let45 let45) → (Eq let46 let43) → let49 → (Eq let50 let5) → (Eq let51 True) → (Eq let6 let5) → (Eq let49 let52) → (Eq let41 let53) → (Eq let54 True) → (Eq let38 let55) → let45 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (Neg.neg let2)
  let let4 := (binrel% LT.lt let3 let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% HMul.hMul let3 let5)
  let let7 := (binrel% HMul.hMul let2 let5)
  let let8 := (binrel% HAdd.hAdd let7 (binrel% HAdd.hAdd let6 let6))
  let let9 := (binrel% HMul.hMul let3 skoB)
  let let10 := (binrel% HMul.hMul let3 skoX)
  let let11 := (binrel% HAdd.hAdd skoB skoX)
  let let12 := (binrel% HMul.hMul let2 let11)
  let let13 := (binrel% HAdd.hAdd let12 (binrel% HAdd.hAdd let10 let9))
  let let14 := (binrel% GE.ge let13 let8)
  let let15 := (Not let14)
  let let16 := (binrel% LT.lt let13 let8)
  let let17 := (Neg.neg (Int.ofNat 1))
  let let18 := (binrel% HMul.hMul let17 skoX)
  let let19 := (binrel% HMul.hMul let17 skoB)
  let let20 := (binrel% HAdd.hAdd let11 (binrel% HAdd.hAdd let18 let19))
  let let21 := (binrel% GE.ge let5 let5)
  let let22 := (binrel% LE.le let11 let5)
  let let23 := (Not let22)
  let let24 := (binrel% GT.gt let11 let5)
  let let25 := (Eq let24 let23)
  let let26 := (binrel% GT.gt let2 let1)
  let let27 := (binrel% GE.ge (binrel% HAdd.hAdd let19 let18) let1)
  let let28 := (binrel% LE.le skoX let19)
  let let29 := (binrel% LE.le skoB let5)
  let let30 := (Not let29)
  let let31 := (binrel% GT.gt skoB let5)
  let let32 := (binrel% GE.ge let19 let1)
  let let33 := (Not True)
  let let34 := (binrel% HMul.hMul skoB let3)
  let let35 := (Eq let34 let19)
  let let36 := (Not let32)
  let let37 := (Not let36)
  let let38 := (Eq let37 let32)
  let let39 := (binrel% GE.ge let18 let1)
  let let40 := (binrel% LE.le skoX let5)
  let let41 := (binrel% LE.le skoA let5)
  let let42 := (Not let41)
  let let43 := (Not let40)
  let let44 := (binrel% LE.le skoX let34)
  let let45 := (And let44 (And let43 (And let30 let42)))
  let let46 := (binrel% GT.gt skoX let5)
  let let47 := (Not let39)
  let let48 := (Not let47)
  let let49 := (Eq let48 let39)
  let let50 := (binrel% HAdd.hAdd let5 (binrel% HAdd.hAdd let5 let5))
  let let51 := (Eq let39 let39)
  let let52 := (Eq let39 let48)
  let let53 := (binrel% GE.ge (binrel% HMul.hMul let17 skoA) let1)
  let let54 := (Eq let32 let32)
  let let55 := (Eq let32 let37)
  let let56 := (Not let53)
  let let57 := (And let27 (And let47 (And let36 let56)))
  let let58 := (Eq let45 let57)
  let let59 := (Not let27)
  let let60 := (Or let32 (Or let39 let59))
  let let61 := (Or let37 (Or let48 let59))
  let let62 := (binrel% LT.lt let9 let6)
  let let63 := (And let4 let31)
  let let64 := (binrel% LT.lt let10 let6)
  let let65 := (And let4 let46)
  let let66 := (binrel% LE.le let12 let7)
  let let67 := (And let26 let22)
fun lean_r0 : (Eq let4 True) => -- EVALUATE
fun lean_r1 : (Eq let16 let15) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let12 let11) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let10 let18) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let20 let5) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let7 let5) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let21 True) => -- THEORY_REWRITE_ARITH
fun lean_r7 : let25 => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let26 True) => -- EVALUATE
fun lean_r9 : (Eq let22 let27) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let28 let27) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let31 let30) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let29 let32) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let33 False) => -- THEORY_REWRITE_BOOL
fun lean_r14 : let35 => -- THEORY_REWRITE_ARITH
fun lean_r15 : let38 => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let3 let3) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let9 let19) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let40 let39) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let45 let45) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let46 let43) => -- THEORY_REWRITE_ARITH
fun lean_r21 : let49 => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let50 let5) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let51 True) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let6 let5) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let49 let52) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let41 let53) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let54 True) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let38 let55) => -- THEORY_REWRITE_BOOL
fun lean_a29 : let45 => by
have lean_s0 : (Or let37 (Or let48 (Or let59 False))) :=
  (scope (fun lean_a30 : let36 =>
    (scope (fun lean_a31 : let47 =>
      (scope (fun lean_a32 : let27 =>
        have lean_s0 : (Eq let27 let22) := by timed Eq.symm lean_r9
        have lean_s1 : let22 := by timed eqResolve lean_a32 lean_s0
        have lean_s2 : (Or let23 False) :=
          (scope (fun lean_a33 : let22 =>
            have lean_s2 : let26 := by timed trueElim lean_r8
            have lean_s3 : let67 := by timed And.intro lean_s2 lean_a33
            have lean_s4 : (Implies let67 let66) := by arithMulPos [let11, let5, let2], 1
            have lean_s5 : let66 := by timed modusPonens lean_s3 lean_s4
            have lean_s6 : let4 := by timed trueElim lean_r0
            have lean_s7 : (Eq let43 let47) := by timed flipCongrArg lean_r18 [Not]
            have lean_s8 : (Eq let46 let47) := by timed Eq.trans lean_r20 lean_s7
            have lean_s9 : (Eq let47 let46) := by timed Eq.symm lean_s8
            have lean_s10 : let46 := by timed eqResolve lean_a31 lean_s9
            have lean_s11 : let65 := by timed And.intro lean_s6 lean_s10
            have lean_s12 : (Implies let65 let64) := by arithMulNeg [skoX, let5, let3], 2
            have lean_s13 : let64 := by timed modusPonens lean_s11 lean_s12
            have lean_s14 : (Eq let30 let36) := by timed flipCongrArg lean_r12 [Not]
            have lean_s15 : (Eq let31 let36) := by timed Eq.trans lean_r11 lean_s14
            have lean_s16 : (Eq let36 let31) := by timed Eq.symm lean_s15
            have lean_s17 : let31 := by timed eqResolve lean_a30 lean_s16
            have lean_s18 : let63 := by timed And.intro lean_s6 lean_s17
            have lean_s19 : (Implies let63 let62) := by arithMulNeg [skoB, let5, let3], 2
            have lean_s20 : let62 := by timed modusPonens lean_s18 lean_s19
            have lean_s21 : let16 := by sumBounds [lean_s5, lean_s13, lean_s20]
            let lean_s22 := by timed congrHAdd lean_r3 lean_r17
            have lean_s23 : (Eq let13 let20) := by timed congrHAdd lean_r2 lean_s22
            have lean_s24 : (Eq let13 let5) := by timed Eq.trans lean_s23 lean_r4
            let lean_s25 := by timed flipCongrArg lean_s24 [GE.ge]
            let lean_s26 := by timed congrHAdd lean_r24 lean_r24
            have lean_s27 : (Eq let8 let50) := by timed congrHAdd lean_r5 lean_s26
            have lean_s28 : (Eq let8 let5) := by timed Eq.trans lean_s27 lean_r22
            have lean_s29 : (Eq let14 let21) := by timed congr lean_s25 lean_s28
            have lean_s30 : (Eq let14 True) := by timed Eq.trans lean_s29 lean_r6
            have lean_s31 : (Eq let15 let33) := by timed flipCongrArg lean_s30 [Not]
            have lean_s32 : (Eq let15 False) := by timed Eq.trans lean_s31 lean_r13
            have lean_s33 : (Eq let16 False) := by timed Eq.trans lean_r1 lean_s32
            show False from by timed eqResolve lean_s21 lean_s33
          ))
        have lean_s3 : let23 := by liftOrNToNeg lean_s2
        have lean_s4 : (Eq let23 let59) := by timed flipCongrArg lean_r9 [Not]
        have lean_s5 : (Eq let24 let59) := by timed Eq.trans lean_r7 lean_s4
        have lean_s6 : (Eq let59 let24) := by timed Eq.symm lean_s5
        have lean_s7 : (Eq let23 let24) := by timed Eq.trans lean_s4 lean_s6
        have lean_s8 : let24 := by timed eqResolve lean_s3 lean_s7
        have lean_s9 : (Eq let59 let23) := by timed Eq.symm lean_s4
        have lean_s10 : let25 := by timed Eq.trans lean_s5 lean_s9
        have lean_s11 : let23 := by timed eqResolve lean_s8 lean_s10
        show False from by timed contradiction lean_s1 lean_s11
  ))))))
have lean_s1 : (Not (And let36 (And let47 let27))) := by liftOrNToNeg lean_s0
have lean_s2 : let61 := by timed flipNotAnd lean_s1 [let36, let47, let27]
have lean_s3 : (Eq Or Or) := by timed rfl
have lean_s4 : let54 := by timed rfl
let lean_s5 := by timed flipCongrArg lean_s4 [Eq]
have lean_s6 : (Eq let55 let54) := by timed congr lean_s5 lean_r15
have lean_s7 : (Eq let55 True) := by timed Eq.trans lean_s6 lean_r27
have lean_s8 : (Eq let38 True) := by timed Eq.trans lean_r28 lean_s7
have lean_s9 : let38 := by timed trueElim lean_s8
let lean_s10 := by timed congr lean_s3 lean_s9
have lean_s11 : let51 := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq let52 let51) := by timed congr lean_s12 lean_r21
have lean_s14 : (Eq let52 True) := by timed Eq.trans lean_s13 lean_r23
have lean_s15 : (Eq let49 True) := by timed Eq.trans lean_r25 lean_s14
have lean_s16 : let49 := by timed trueElim lean_s15
let lean_s17 := by timed congr lean_s3 lean_s16
have lean_s18 : (Eq let59 let59) := by timed rfl
let lean_s19 := by timed congr lean_s17 lean_s18
have lean_s20 : (Eq let61 let60) := by timed congr lean_s10 lean_s19
have lean_s21 : let60 := by timed eqResolve lean_s2 lean_s20
have lean_s22 : (Or let39 (Or let32 let59)) := by permutateOr lean_s21, [1, 0, 2], (- 1)
have lean_s23 : (Eq And And) := by timed rfl
have lean_s24 : (Eq skoX skoX) := by timed rfl
let lean_s25 := by timed flipCongrArg lean_s24 [LE.le]
have lean_s26 : (Eq skoB skoB) := by timed rfl
let lean_s27 := by timed flipCongrArg lean_s26 [HMul.hMul]
have lean_s28 : (Eq let34 let34) := by timed congr lean_s27 lean_r16
have lean_s29 : let35 := by timed Eq.trans lean_s28 lean_r14
have lean_s30 : (Eq let44 let28) := by timed congr lean_s25 lean_s29
have lean_s31 : (Eq let44 let27) := by timed Eq.trans lean_s30 lean_r10
let lean_s32 := by timed congr lean_s23 lean_s31
have lean_s33 : (Eq let43 let47) := by timed flipCongrArg lean_r18 [Not]
let lean_s34 := by timed congr lean_s23 lean_s33
have lean_s35 : (Eq let30 let36) := by timed flipCongrArg lean_r12 [Not]
let lean_s36 := by timed congr lean_s23 lean_s35
have lean_s37 : (Eq let42 let56) := by timed flipCongrArg lean_r26 [Not]
let lean_s38 := by timed congr lean_s36 lean_s37
let lean_s39 := by timed congr lean_s34 lean_s38
have lean_s40 : let58 := by timed congr lean_s32 lean_s39
have lean_s41 : let58 := by timed Eq.trans lean_r19 lean_s40
have lean_s42 : let57 := by timed eqResolve lean_a29 lean_s41
have lean_s43 : let36 := by andElim lean_s42, 2
let lean_s44 := by R1 lean_s22, lean_s43, let32, [(- 1), 0]
have lean_s45 : let47 := by andElim lean_s42, 1
let lean_s46 := by R1 lean_s44, lean_s45, let39, [(- 1), 0]
have lean_s47 : let27 := by andElim lean_s42, 0
exact (show False from by R2 lean_s46, lean_s47, let27, [0, 0])


