open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoC : Rat}
variable {skoS : Rat}
variable {skoX : Rat}
variable {skoC : Rat}
variable {skoS : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1770)
  let let3 := (Int.ofNat 689)
  let let4 := (binrel% HDiv.hDiv let3 let2)
  let let5 := (binrel% HAdd.hAdd skoC (binrel% HMul.hMul (Neg.neg let4) skoS))
  let let6 := (binrel% GE.ge let5 let1)
  let let7 := (Rat.ofInt 0)
  let let8 := (binrel% GE.ge let5 let7)
  let let9 := (Rat.ofInt 1)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% LT.lt let10 let1)
  let let12 := (binrel% GT.gt let9 let1)
  let let13 := (Neg.neg (Int.ofNat 1))
  let let14 := (binrel% HAdd.hAdd (binrel% HMul.hMul let13 skoC) (binrel% HMul.hMul let4 skoS))
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (binrel% LE.le let5 let7)
  let let17 := (binrel% HMul.hMul let9 let5)
  let let18 := (binrel% HDiv.hDiv let2 let3)
  let let19 := (binrel% HMul.hMul let18 skoC)
  let let20 := (binrel% LE.le let19 skoS)
  let let21 := (binrel% HAdd.hAdd let5 let14)
  let let22 := (Not let6)
  let let23 := (Not let22)
  let let24 := (Not let8)
  let let25 := (binrel% LT.lt let5 let7)
  let let26 := (Not True)
  let let27 := (binrel% HDiv.hDiv (Rat.ofInt 1770) (Rat.ofInt 689))
  let let28 := (binrel% HMul.hMul let10 let5)
  let let29 := (binrel% GE.ge (binrel% HMul.hMul let13 skoX) let1)
  let let30 := (binrel% LE.le skoX let7)
  let let31 := (binrel% HMul.hMul let9 let7)
  let let32 := (binrel% HMul.hMul let10 let7)
  let let33 := (binrel% HAdd.hAdd let31 let32)
  let let34 := (binrel% HAdd.hAdd let17 let28)
  let let35 := (binrel% GE.ge let34 let33)
  let let36 := (Not let35)
  let let37 := (binrel% LT.lt let34 let33)
  let let38 := (binrel% LE.le skoS let19)
  let let39 := (binrel% HMul.hMul skoC let18)
  let let40 := (Not let15)
  let let41 := (Not let40)
  let let42 := (Not let16)
  let let43 := (binrel% GT.gt let5 let7)
  let let44 := (binrel% GE.ge let7 let7)
  let let45 := (binrel% HMul.hMul skoC let27)
  let let46 := (binrel% LE.le let45 skoS)
  let let47 := (Not let46)
  let let48 := (Not let30)
  let let49 := (binrel% LE.le skoS let45)
  let let50 := (Not let49)
  let let51 := (And let50 (And let48 let47))
  let let52 := (binrel% HAdd.hAdd let7 let7)
  let let53 := (Not let29)
  let let54 := (And let22 (And let53 let40))
  let let55 := (Eq let51 let54)
  let let56 := (Or let6 let15)
  let let57 := (Or let23 let41)
  let let58 := (binrel% LT.lt let28 let32)
  let let59 := (And let11 let43)
  let let60 := (binrel% LT.lt let17 let31)
  let let61 := (And let12 let25)
(Eq let8 let6) → (Eq let11 True) → (Eq let12 True) → (Eq let16 let15) → (Eq let17 let5) → (Eq let20 let15) → (Eq let21 let7) → (Eq let23 let6) → (Eq let25 let24) → (Eq let26 False) → (Eq let27 let18) → (Eq let28 let14) → (Eq let30 let29) → (Eq let31 let7) → (Eq let37 let36) → (Eq let38 let6) → (Eq let39 let19) → (Eq let32 let7) → (Eq let41 let15) → (Eq let43 let42) → (Eq let44 True) → (Eq let51 let51) → (Eq let52 let7) → let51 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 1770)
  let let3 := (Int.ofNat 689)
  let let4 := (binrel% HDiv.hDiv let3 let2)
  let let5 := (binrel% HAdd.hAdd skoC (binrel% HMul.hMul (Neg.neg let4) skoS))
  let let6 := (binrel% GE.ge let5 let1)
  let let7 := (Rat.ofInt 0)
  let let8 := (binrel% GE.ge let5 let7)
  let let9 := (Rat.ofInt 1)
  let let10 := (Neg.neg let9)
  let let11 := (binrel% LT.lt let10 let1)
  let let12 := (binrel% GT.gt let9 let1)
  let let13 := (Neg.neg (Int.ofNat 1))
  let let14 := (binrel% HAdd.hAdd (binrel% HMul.hMul let13 skoC) (binrel% HMul.hMul let4 skoS))
  let let15 := (binrel% GE.ge let14 let1)
  let let16 := (binrel% LE.le let5 let7)
  let let17 := (binrel% HMul.hMul let9 let5)
  let let18 := (binrel% HDiv.hDiv let2 let3)
  let let19 := (binrel% HMul.hMul let18 skoC)
  let let20 := (binrel% LE.le let19 skoS)
  let let21 := (binrel% HAdd.hAdd let5 let14)
  let let22 := (Not let6)
  let let23 := (Not let22)
  let let24 := (Not let8)
  let let25 := (binrel% LT.lt let5 let7)
  let let26 := (Not True)
  let let27 := (binrel% HDiv.hDiv (Rat.ofInt 1770) (Rat.ofInt 689))
  let let28 := (binrel% HMul.hMul let10 let5)
  let let29 := (binrel% GE.ge (binrel% HMul.hMul let13 skoX) let1)
  let let30 := (binrel% LE.le skoX let7)
  let let31 := (binrel% HMul.hMul let9 let7)
  let let32 := (binrel% HMul.hMul let10 let7)
  let let33 := (binrel% HAdd.hAdd let31 let32)
  let let34 := (binrel% HAdd.hAdd let17 let28)
  let let35 := (binrel% GE.ge let34 let33)
  let let36 := (Not let35)
  let let37 := (binrel% LT.lt let34 let33)
  let let38 := (binrel% LE.le skoS let19)
  let let39 := (binrel% HMul.hMul skoC let18)
  let let40 := (Not let15)
  let let41 := (Not let40)
  let let42 := (Not let16)
  let let43 := (binrel% GT.gt let5 let7)
  let let44 := (binrel% GE.ge let7 let7)
  let let45 := (binrel% HMul.hMul skoC let27)
  let let46 := (binrel% LE.le let45 skoS)
  let let47 := (Not let46)
  let let48 := (Not let30)
  let let49 := (binrel% LE.le skoS let45)
  let let50 := (Not let49)
  let let51 := (And let50 (And let48 let47))
  let let52 := (binrel% HAdd.hAdd let7 let7)
  let let53 := (Not let29)
  let let54 := (And let22 (And let53 let40))
  let let55 := (Eq let51 let54)
  let let56 := (Or let6 let15)
  let let57 := (Or let23 let41)
  let let58 := (binrel% LT.lt let28 let32)
  let let59 := (And let11 let43)
  let let60 := (binrel% LT.lt let17 let31)
  let let61 := (And let12 let25)
fun lean_r0 : (Eq let8 let6) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let11 True) => -- EVALUATE
fun lean_r2 : (Eq let12 True) => -- EVALUATE
fun lean_r3 : (Eq let16 let15) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let17 let5) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let20 let15) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let21 let7) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let23 let6) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let25 let24) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let26 False) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let27 let18) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let28 let14) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let30 let29) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let31 let7) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let37 let36) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let38 let6) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let39 let19) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let32 let7) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let41 let15) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let43 let42) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let44 True) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let51 let51) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let52 let7) => -- THEORY_REWRITE_ARITH
fun lean_a23 : let51 => by
have lean_s0 : (Or let23 (Or let41 False)) :=
  (scope (fun lean_a24 : let22 =>
    (scope (fun lean_a25 : let40 =>
      have lean_s0 : let12 := by timed trueElim lean_r2
      have lean_s1 : (Eq let24 let22) := by timed flipCongrArg lean_r0 [Not]
      have lean_s2 : (Eq let25 let22) := by timed Eq.trans lean_r8 lean_s1
      have lean_s3 : (Eq let22 let25) := by timed Eq.symm lean_s2
      have lean_s4 : let25 := by timed eqResolve lean_a24 lean_s3
      have lean_s5 : let61 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let61 let60) := by arithMulPos [let5, let7, let9], 0
      have lean_s7 : let60 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let11 := by timed trueElim lean_r1
      have lean_s9 : (Eq let42 let40) := by timed flipCongrArg lean_r3 [Not]
      have lean_s10 : (Eq let43 let40) := by timed Eq.trans lean_r19 lean_s9
      have lean_s11 : (Eq let40 let43) := by timed Eq.symm lean_s10
      have lean_s12 : let43 := by timed eqResolve lean_a25 lean_s11
      have lean_s13 : let59 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let59 let58) := by arithMulNeg [let5, let7, let10], 2
      have lean_s15 : let58 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let37 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r4 [HAdd.hAdd]
      have lean_s18 : (Eq let34 let21) := by timed congr lean_s17 lean_r11
      have lean_s19 : (Eq let34 let7) := by timed Eq.trans lean_s18 lean_r6
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r13 [HAdd.hAdd]
      have lean_s22 : (Eq let33 let52) := by timed congr lean_s21 lean_r17
      have lean_s23 : (Eq let33 let7) := by timed Eq.trans lean_s22 lean_r22
      have lean_s24 : (Eq let35 let44) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let35 True) := by timed Eq.trans lean_s24 lean_r20
      have lean_s26 : (Eq let36 let26) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let36 False) := by timed Eq.trans lean_s26 lean_r9
      have lean_s28 : (Eq let37 False) := by timed Eq.trans lean_r14 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let22 let40)) := by liftOrNToNeg lean_s0
have lean_s2 : let57 := by timed flipNotAnd lean_s1 [let22, let40]
let lean_s3 := by timed flipCongrArg lean_r7 [Or]
have lean_s4 : (Eq let57 let56) := by timed congr lean_s3 lean_r18
have lean_s5 : let56 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
have lean_s7 : (Eq skoS skoS) := by timed rfl
let lean_s8 := by timed flipCongrArg lean_s7 [LE.le]
have lean_s9 : (Eq skoC skoC) := by timed rfl
let lean_s10 := by timed flipCongrArg lean_s9 [HMul.hMul]
have lean_s11 : (Eq let45 let39) := by timed congr lean_s10 lean_r10
have lean_s12 : (Eq let45 let19) := by timed Eq.trans lean_s11 lean_r16
have lean_s13 : (Eq let49 let38) := by timed congr lean_s8 lean_s12
have lean_s14 : (Eq let49 let6) := by timed Eq.trans lean_s13 lean_r15
have lean_s15 : (Eq let50 let22) := by timed flipCongrArg lean_s14 [Not]
let lean_s16 := by timed congr lean_s6 lean_s15
have lean_s17 : (Eq let48 let53) := by timed flipCongrArg lean_r12 [Not]
let lean_s18 := by timed congr lean_s6 lean_s17
let lean_s19 := by timed flipCongrArg lean_s12 [LE.le]
have lean_s20 : (Eq let46 let20) := by timed congr lean_s19 lean_s7
have lean_s21 : (Eq let46 let15) := by timed Eq.trans lean_s20 lean_r5
have lean_s22 : (Eq let47 let40) := by timed flipCongrArg lean_s21 [Not]
let lean_s23 := by timed congr lean_s18 lean_s22
have lean_s24 : let55 := by timed congr lean_s16 lean_s23
have lean_s25 : let55 := by timed Eq.trans lean_r21 lean_s24
have lean_s26 : let54 := by timed eqResolve lean_a23 lean_s25
have lean_s27 : let40 := by andElim lean_s26, 2
let lean_s28 := by R1 lean_s5, lean_s27, let15, [(- 1), 0]
have lean_s29 : let22 := by andElim lean_s26, 0
exact (show False from by R1 lean_s28, lean_s29, let6, [0, 0])


