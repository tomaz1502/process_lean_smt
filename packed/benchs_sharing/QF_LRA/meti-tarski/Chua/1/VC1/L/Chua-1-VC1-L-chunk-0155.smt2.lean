open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoC : Rat}
variable {skoS : Rat}
variable {skoX : Rat}
variable {skoC : Rat}
variable {skoS : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 19)
  let let5 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) let4))
  let let6 := (binrel% GE.ge skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% LT.lt skoX let5)
  let let9 := (Rat.ofInt 0)
  let let10 := (Neg.neg let2)
  let let11 := (binrel% HMul.hMul let10 let9)
  let let12 := (binrel% HMul.hMul let2 let5)
  let let13 := (binrel% HAdd.hAdd let12 let11)
  let let14 := (binrel% HMul.hMul let10 skoX)
  let let15 := (binrel% HMul.hMul let2 skoX)
  let let16 := (binrel% HAdd.hAdd let15 let14)
  let let17 := (binrel% GE.ge let16 let13)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let13)
  let let20 := (Int.ofNat 1)
  let let21 := (binrel% HMul.hMul (Neg.neg let20) skoX)
  let let22 := (binrel% HDiv.hDiv (Int.ofNat 1770) (Int.ofNat 689))
  let let23 := (binrel% GE.ge (binrel% HAdd.hAdd skoS (binrel% HMul.hMul (Neg.neg let22) skoC)) let1)
  let let24 := (binrel% HMul.hMul let22 skoC)
  let let25 := (binrel% LE.le let24 skoS)
  let let26 := (binrel% GE.ge let21 let1)
  let let27 := (Not let26)
  let let28 := (Not let27)
  let let29 := (binrel% HDiv.hDiv (Rat.ofInt 1770) (Rat.ofInt 689))
  let let30 := (binrel% LE.le skoX let9)
  let let31 := (binrel% HAdd.hAdd let5 let9)
  let let32 := (binrel% HMul.hMul skoC let29)
  let let33 := (binrel% LE.le let32 skoS)
  let let34 := (Not let33)
  let let35 := (Not let30)
  let let36 := (Neg.neg (Rat.ofInt 3000))
  let let37 := (binrel% HDiv.hDiv let36 (Rat.ofInt 19))
  let let38 := (binrel% LE.le let37 skoX)
  let let39 := (Not let38)
  let let40 := (And let39 (And let35 let34))
  let let41 := (binrel% LE.le let5 skoX)
  let let42 := (binrel% LT.lt let10 let1)
  let let43 := (binrel% HDiv.hDiv let20 let4)
  let let44 := (binrel% HMul.hMul let36 let43)
  let let45 := (Eq let44 let5)
  let let46 := (binrel% HAdd.hAdd skoX let21)
  let let47 := (Not let7)
  let let48 := (binrel% HMul.hMul skoC let22)
  let let49 := (binrel% GE.ge let9 let5)
  let let50 := (binrel% GT.gt skoX let9)
  let let51 := (Not True)
  let let52 := (Not let23)
  let let53 := (And let7 (And let27 let52))
  let let54 := (Eq let40 let53)
  let let55 := (Or let6 let26)
  let let56 := (Or let47 let28)
  let let57 := (binrel% LT.lt let14 let11)
  let let58 := (And let42 let50)
  let let59 := (binrel% LT.lt let15 let12)
  let let60 := (And let3 let8)
(Eq let3 True) → (Eq let8 let7) → (Eq let19 let18) → (Eq let15 skoX) → (Eq let14 let21) → (Eq let12 let5) → (Eq let11 let9) → (Eq let25 let23) → (Eq let28 let26) → (Eq let29 let22) → (Eq let30 let26) → (Eq let31 let5) → (Eq let40 let40) → (Eq let41 let6) → (Eq let42 True) → let45 → (Eq let46 let9) → (Eq let47 let6) → (Eq let36 let36) → (Eq let37 let44) → (Eq let48 let24) → (Eq let49 True) → (Eq let50 let35) → (Eq let51 False) → let40 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (Int.ofNat 19)
  let let5 := (Neg.neg (binrel% HDiv.hDiv (Int.ofNat 3000) let4))
  let let6 := (binrel% GE.ge skoX let5)
  let let7 := (Not let6)
  let let8 := (binrel% LT.lt skoX let5)
  let let9 := (Rat.ofInt 0)
  let let10 := (Neg.neg let2)
  let let11 := (binrel% HMul.hMul let10 let9)
  let let12 := (binrel% HMul.hMul let2 let5)
  let let13 := (binrel% HAdd.hAdd let12 let11)
  let let14 := (binrel% HMul.hMul let10 skoX)
  let let15 := (binrel% HMul.hMul let2 skoX)
  let let16 := (binrel% HAdd.hAdd let15 let14)
  let let17 := (binrel% GE.ge let16 let13)
  let let18 := (Not let17)
  let let19 := (binrel% LT.lt let16 let13)
  let let20 := (Int.ofNat 1)
  let let21 := (binrel% HMul.hMul (Neg.neg let20) skoX)
  let let22 := (binrel% HDiv.hDiv (Int.ofNat 1770) (Int.ofNat 689))
  let let23 := (binrel% GE.ge (binrel% HAdd.hAdd skoS (binrel% HMul.hMul (Neg.neg let22) skoC)) let1)
  let let24 := (binrel% HMul.hMul let22 skoC)
  let let25 := (binrel% LE.le let24 skoS)
  let let26 := (binrel% GE.ge let21 let1)
  let let27 := (Not let26)
  let let28 := (Not let27)
  let let29 := (binrel% HDiv.hDiv (Rat.ofInt 1770) (Rat.ofInt 689))
  let let30 := (binrel% LE.le skoX let9)
  let let31 := (binrel% HAdd.hAdd let5 let9)
  let let32 := (binrel% HMul.hMul skoC let29)
  let let33 := (binrel% LE.le let32 skoS)
  let let34 := (Not let33)
  let let35 := (Not let30)
  let let36 := (Neg.neg (Rat.ofInt 3000))
  let let37 := (binrel% HDiv.hDiv let36 (Rat.ofInt 19))
  let let38 := (binrel% LE.le let37 skoX)
  let let39 := (Not let38)
  let let40 := (And let39 (And let35 let34))
  let let41 := (binrel% LE.le let5 skoX)
  let let42 := (binrel% LT.lt let10 let1)
  let let43 := (binrel% HDiv.hDiv let20 let4)
  let let44 := (binrel% HMul.hMul let36 let43)
  let let45 := (Eq let44 let5)
  let let46 := (binrel% HAdd.hAdd skoX let21)
  let let47 := (Not let7)
  let let48 := (binrel% HMul.hMul skoC let22)
  let let49 := (binrel% GE.ge let9 let5)
  let let50 := (binrel% GT.gt skoX let9)
  let let51 := (Not True)
  let let52 := (Not let23)
  let let53 := (And let7 (And let27 let52))
  let let54 := (Eq let40 let53)
  let let55 := (Or let6 let26)
  let let56 := (Or let47 let28)
  let let57 := (binrel% LT.lt let14 let11)
  let let58 := (And let42 let50)
  let let59 := (binrel% LT.lt let15 let12)
  let let60 := (And let3 let8)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let8 let7) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let19 let18) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let15 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let14 let21) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let12 let5) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let11 let9) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let25 let23) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let28 let26) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let29 let22) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let30 let26) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let31 let5) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let40 let40) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let41 let6) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let42 True) => -- EVALUATE
fun lean_r15 : let45 => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let46 let9) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let47 let6) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let36 let36) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let37 let44) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let48 let24) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let49 True) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let50 let35) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let51 False) => -- THEORY_REWRITE_BOOL
fun lean_a24 : let40 => by
have lean_s0 : (Or let47 (Or let28 False)) :=
  (scope (fun lean_a25 : let7 =>
    (scope (fun lean_a26 : let27 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let7 let8) := by timed Eq.symm lean_r1
      have lean_s2 : let8 := by timed eqResolve lean_a25 lean_s1
      have lean_s3 : let60 := by timed And.intro lean_s0 lean_s2
      have lean_s4 : (Implies let60 let59) := by arithMulPos [skoX, let5, let2], 0
      have lean_s5 : let59 := by timed modusPonens lean_s3 lean_s4
      have lean_s6 : let42 := by timed trueElim lean_r14
      have lean_s7 : (Eq let35 let27) := by timed flipCongrArg lean_r10 [Not]
      have lean_s8 : (Eq let50 let27) := by timed Eq.trans lean_r22 lean_s7
      have lean_s9 : (Eq let27 let50) := by timed Eq.symm lean_s8
      have lean_s10 : let50 := by timed eqResolve lean_a26 lean_s9
      have lean_s11 : let58 := by timed And.intro lean_s6 lean_s10
      have lean_s12 : (Implies let58 let57) := by arithMulNeg [skoX, let9, let10], 2
      have lean_s13 : let57 := by timed modusPonens lean_s11 lean_s12
      have lean_s14 : let19 := by sumBounds [lean_s5, lean_s13]
      let lean_s15 := by timed flipCongrArg lean_r3 [HAdd.hAdd]
      have lean_s16 : (Eq let16 let46) := by timed congr lean_s15 lean_r4
      have lean_s17 : (Eq let16 let9) := by timed Eq.trans lean_s16 lean_r16
      let lean_s18 := by timed flipCongrArg lean_s17 [GE.ge]
      let lean_s19 := by timed flipCongrArg lean_r5 [HAdd.hAdd]
      have lean_s20 : (Eq let13 let31) := by timed congr lean_s19 lean_r6
      have lean_s21 : (Eq let13 let5) := by timed Eq.trans lean_s20 lean_r11
      have lean_s22 : (Eq let17 let49) := by timed congr lean_s18 lean_s21
      have lean_s23 : (Eq let17 True) := by timed Eq.trans lean_s22 lean_r21
      have lean_s24 : (Eq let18 let51) := by timed flipCongrArg lean_s23 [Not]
      have lean_s25 : (Eq let18 False) := by timed Eq.trans lean_s24 lean_r23
      have lean_s26 : (Eq let19 False) := by timed Eq.trans lean_r2 lean_s25
      show False from by timed eqResolve lean_s14 lean_s26
  ))))
have lean_s1 : (Not (And let7 let27)) := by liftOrNToNeg lean_s0
have lean_s2 : let56 := by timed flipNotAnd lean_s1 [let7, let27]
let lean_s3 := by timed flipCongrArg lean_r17 [Or]
have lean_s4 : (Eq let56 let55) := by timed congr lean_s3 lean_r8
have lean_s5 : let55 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
let lean_s7 := by timed flipCongrArg lean_r18 [HMul.hMul]
have lean_s8 : (Eq let43 let43) := by timed rfl
have lean_s9 : (Eq let44 let44) := by timed congr lean_s7 lean_s8
have lean_s10 : let45 := by timed Eq.trans lean_s9 lean_r15
have lean_s11 : (Eq let37 let5) := by timed Eq.trans lean_r19 lean_s10
let lean_s12 := by timed flipCongrArg lean_s11 [LE.le]
have lean_s13 : (Eq skoX skoX) := by timed rfl
have lean_s14 : (Eq let38 let41) := by timed congr lean_s12 lean_s13
have lean_s15 : (Eq let38 let6) := by timed Eq.trans lean_s14 lean_r13
have lean_s16 : (Eq let39 let7) := by timed flipCongrArg lean_s15 [Not]
let lean_s17 := by timed congr lean_s6 lean_s16
have lean_s18 : (Eq let35 let27) := by timed flipCongrArg lean_r10 [Not]
let lean_s19 := by timed congr lean_s6 lean_s18
have lean_s20 : (Eq skoC skoC) := by timed rfl
let lean_s21 := by timed flipCongrArg lean_s20 [HMul.hMul]
have lean_s22 : (Eq let32 let48) := by timed congr lean_s21 lean_r9
have lean_s23 : (Eq let32 let24) := by timed Eq.trans lean_s22 lean_r20
let lean_s24 := by timed flipCongrArg lean_s23 [LE.le]
have lean_s25 : (Eq skoS skoS) := by timed rfl
have lean_s26 : (Eq let33 let25) := by timed congr lean_s24 lean_s25
have lean_s27 : (Eq let33 let23) := by timed Eq.trans lean_s26 lean_r7
have lean_s28 : (Eq let34 let52) := by timed flipCongrArg lean_s27 [Not]
let lean_s29 := by timed congr lean_s19 lean_s28
have lean_s30 : let54 := by timed congr lean_s17 lean_s29
have lean_s31 : let54 := by timed Eq.trans lean_r12 lean_s30
have lean_s32 : let53 := by timed eqResolve lean_a24 lean_s31
have lean_s33 : let27 := by andElim lean_s32, 1
let lean_s34 := by R1 lean_s5, lean_s33, let26, [(- 1), 0]
have lean_s35 : let7 := by andElim lean_s32, 0
exact (show False from by R1 lean_s34, lean_s35, let6, [0, 0])


