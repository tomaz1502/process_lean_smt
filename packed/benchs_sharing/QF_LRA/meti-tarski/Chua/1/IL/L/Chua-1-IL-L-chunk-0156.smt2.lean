open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoX : Rat}
variable {skoC : Rat}
variable {skoS : Rat}
variable {skoX : Rat}
variable {skoS : Rat}
variable {skoC : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% GE.ge skoX let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% GE.ge skoX let5)
  let let7 := (Neg.neg let2)
  let let8 := (binrel% LT.lt let7 let1)
  let let9 := (binrel% HMul.hMul let7 let5)
  let let10 := (binrel% HMul.hMul let2 let5)
  let let11 := (binrel% HAdd.hAdd let10 let9)
  let let12 := (binrel% HMul.hMul let7 skoX)
  let let13 := (binrel% HMul.hMul let2 skoX)
  let let14 := (binrel% HAdd.hAdd let13 let12)
  let let15 := (binrel% GE.ge let14 let11)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let11)
  let let18 := (Int.ofNat 1)
  let let19 := (Neg.neg let18)
  let let20 := (binrel% HMul.hMul let19 skoX)
  let let21 := (binrel% GE.ge let20 let1)
  let let22 := (binrel% LE.le skoX let5)
  let let23 := (Not let6)
  let let24 := (binrel% LT.lt skoX let5)
  let let25 := (Int.ofNat 42)
  let let26 := (Int.ofNat 235)
  let let27 := (Neg.neg (binrel% HDiv.hDiv let26 let25))
  let let28 := (binrel% HDiv.hDiv let18 let25)
  let let29 := (Neg.neg (Rat.ofInt 235))
  let let30 := (binrel% HMul.hMul let29 let28)
  let let31 := (Eq let30 let27)
  let let32 := (binrel% HMul.hMul let27 skoC)
  let let33 := (binrel% HMul.hMul skoC let27)
  let let34 := (binrel% LE.le let5 skoX)
  let let35 := (binrel% GE.ge let5 let5)
  let let36 := (binrel% HDiv.hDiv let29 (Rat.ofInt 42))
  let let37 := (binrel% HAdd.hAdd let5 let5)
  let let38 := (binrel% HMul.hMul skoC let36)
  let let39 := (binrel% LE.le skoS let38)
  let let40 := (Not let39)
  let let41 := (Not let22)
  let let42 := (Not let34)
  let let43 := (And let42 (And let41 let40))
  let let44 := (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let19 skoC) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv let25 let26)) skoS)) let1)
  let let45 := (binrel% LE.le skoS let32)
  let let46 := (Not let21)
  let let47 := (Not let46)
  let let48 := (binrel% HAdd.hAdd skoX let20)
  let let49 := (Not let4)
  let let50 := (Not let49)
  let let51 := (binrel% GT.gt skoX let5)
  let let52 := (Not True)
  let let53 := (Not let44)
  let let54 := (And let49 (And let46 let53))
  let let55 := (Eq let43 let54)
  let let56 := (Or let4 let21)
  let let57 := (Or let50 let47)
  let let58 := (binrel% LT.lt let12 let9)
  let let59 := (And let8 let51)
  let let60 := (binrel% LT.lt let13 let10)
  let let61 := (And let3 let24)
(Eq let3 True) → (Eq let6 let4) → (Eq let8 True) → (Eq let17 let16) → (Eq let12 let20) → (Eq let10 let5) → (Eq let9 let5) → (Eq let13 skoX) → (Eq let22 let21) → (Eq let24 let23) → let31 → (Eq let29 let29) → (Eq let33 let32) → (Eq let34 let4) → (Eq let35 True) → (Eq let36 let30) → (Eq let37 let5) → (Eq let43 let43) → (Eq let45 let44) → (Eq let47 let21) → (Eq let48 let5) → (Eq let50 let4) → (Eq let51 let41) → (Eq let52 False) → let43 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Rat.ofInt 1)
  let let3 := (binrel% GT.gt let2 let1)
  let let4 := (binrel% GE.ge skoX let1)
  let let5 := (Rat.ofInt 0)
  let let6 := (binrel% GE.ge skoX let5)
  let let7 := (Neg.neg let2)
  let let8 := (binrel% LT.lt let7 let1)
  let let9 := (binrel% HMul.hMul let7 let5)
  let let10 := (binrel% HMul.hMul let2 let5)
  let let11 := (binrel% HAdd.hAdd let10 let9)
  let let12 := (binrel% HMul.hMul let7 skoX)
  let let13 := (binrel% HMul.hMul let2 skoX)
  let let14 := (binrel% HAdd.hAdd let13 let12)
  let let15 := (binrel% GE.ge let14 let11)
  let let16 := (Not let15)
  let let17 := (binrel% LT.lt let14 let11)
  let let18 := (Int.ofNat 1)
  let let19 := (Neg.neg let18)
  let let20 := (binrel% HMul.hMul let19 skoX)
  let let21 := (binrel% GE.ge let20 let1)
  let let22 := (binrel% LE.le skoX let5)
  let let23 := (Not let6)
  let let24 := (binrel% LT.lt skoX let5)
  let let25 := (Int.ofNat 42)
  let let26 := (Int.ofNat 235)
  let let27 := (Neg.neg (binrel% HDiv.hDiv let26 let25))
  let let28 := (binrel% HDiv.hDiv let18 let25)
  let let29 := (Neg.neg (Rat.ofInt 235))
  let let30 := (binrel% HMul.hMul let29 let28)
  let let31 := (Eq let30 let27)
  let let32 := (binrel% HMul.hMul let27 skoC)
  let let33 := (binrel% HMul.hMul skoC let27)
  let let34 := (binrel% LE.le let5 skoX)
  let let35 := (binrel% GE.ge let5 let5)
  let let36 := (binrel% HDiv.hDiv let29 (Rat.ofInt 42))
  let let37 := (binrel% HAdd.hAdd let5 let5)
  let let38 := (binrel% HMul.hMul skoC let36)
  let let39 := (binrel% LE.le skoS let38)
  let let40 := (Not let39)
  let let41 := (Not let22)
  let let42 := (Not let34)
  let let43 := (And let42 (And let41 let40))
  let let44 := (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul let19 skoC) (binrel% HMul.hMul (Neg.neg (binrel% HDiv.hDiv let25 let26)) skoS)) let1)
  let let45 := (binrel% LE.le skoS let32)
  let let46 := (Not let21)
  let let47 := (Not let46)
  let let48 := (binrel% HAdd.hAdd skoX let20)
  let let49 := (Not let4)
  let let50 := (Not let49)
  let let51 := (binrel% GT.gt skoX let5)
  let let52 := (Not True)
  let let53 := (Not let44)
  let let54 := (And let49 (And let46 let53))
  let let55 := (Eq let43 let54)
  let let56 := (Or let4 let21)
  let let57 := (Or let50 let47)
  let let58 := (binrel% LT.lt let12 let9)
  let let59 := (And let8 let51)
  let let60 := (binrel% LT.lt let13 let10)
  let let61 := (And let3 let24)
fun lean_r0 : (Eq let3 True) => -- EVALUATE
fun lean_r1 : (Eq let6 let4) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let8 True) => -- EVALUATE
fun lean_r3 : (Eq let17 let16) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let12 let20) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let10 let5) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let9 let5) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let13 skoX) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let22 let21) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r10 : let31 => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let29 let29) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let33 let32) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let34 let4) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let35 True) => -- THEORY_REWRITE_ARITH
fun lean_r15 : (Eq let36 let30) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let37 let5) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let43 let43) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let47 let21) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let48 let5) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let50 let4) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let51 let41) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let52 False) => -- THEORY_REWRITE_BOOL
fun lean_a24 : let43 => by
have lean_s0 : (Or let50 (Or let47 False)) :=
  (scope (fun lean_a25 : let49 =>
    (scope (fun lean_a26 : let46 =>
      have lean_s0 : let3 := by timed trueElim lean_r0
      have lean_s1 : (Eq let23 let49) := by timed flipCongrArg lean_r1 [Not]
      have lean_s2 : (Eq let24 let49) := by timed Eq.trans lean_r9 lean_s1
      have lean_s3 : (Eq let49 let24) := by timed Eq.symm lean_s2
      have lean_s4 : let24 := by timed eqResolve lean_a25 lean_s3
      have lean_s5 : let61 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let61 let60) := by arithMulPos [skoX, let5, let2], 0
      have lean_s7 : let60 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let8 := by timed trueElim lean_r2
      have lean_s9 : (Eq let41 let46) := by timed flipCongrArg lean_r8 [Not]
      have lean_s10 : (Eq let51 let46) := by timed Eq.trans lean_r22 lean_s9
      have lean_s11 : (Eq let46 let51) := by timed Eq.symm lean_s10
      have lean_s12 : let51 := by timed eqResolve lean_a26 lean_s11
      have lean_s13 : let59 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let59 let58) := by arithMulNeg [skoX, let5, let7], 2
      have lean_s15 : let58 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let17 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r7 [HAdd.hAdd]
      have lean_s18 : (Eq let14 let48) := by timed congr lean_s17 lean_r4
      have lean_s19 : (Eq let14 let5) := by timed Eq.trans lean_s18 lean_r20
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r5 [HAdd.hAdd]
      have lean_s22 : (Eq let11 let37) := by timed congr lean_s21 lean_r6
      have lean_s23 : (Eq let11 let5) := by timed Eq.trans lean_s22 lean_r16
      have lean_s24 : (Eq let15 let35) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let15 True) := by timed Eq.trans lean_s24 lean_r14
      have lean_s26 : (Eq let16 let52) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let16 False) := by timed Eq.trans lean_s26 lean_r23
      have lean_s28 : (Eq let17 False) := by timed Eq.trans lean_r3 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let49 let46)) := by liftOrNToNeg lean_s0
have lean_s2 : let57 := by timed flipNotAnd lean_s1 [let49, let46]
let lean_s3 := by timed flipCongrArg lean_r21 [Or]
have lean_s4 : (Eq let57 let56) := by timed congr lean_s3 lean_r19
have lean_s5 : let56 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
have lean_s7 : (Eq let42 let49) := by timed flipCongrArg lean_r13 [Not]
let lean_s8 := by timed congr lean_s6 lean_s7
have lean_s9 : (Eq let41 let46) := by timed flipCongrArg lean_r8 [Not]
let lean_s10 := by timed congr lean_s6 lean_s9
have lean_s11 : (Eq skoS skoS) := by timed rfl
let lean_s12 := by timed flipCongrArg lean_s11 [LE.le]
have lean_s13 : (Eq skoC skoC) := by timed rfl
let lean_s14 := by timed flipCongrArg lean_s13 [HMul.hMul]
let lean_s15 := by timed flipCongrArg lean_r11 [HMul.hMul]
have lean_s16 : (Eq let28 let28) := by timed rfl
have lean_s17 : (Eq let30 let30) := by timed congr lean_s15 lean_s16
have lean_s18 : let31 := by timed Eq.trans lean_s17 lean_r10
have lean_s19 : (Eq let36 let27) := by timed Eq.trans lean_r15 lean_s18
have lean_s20 : (Eq let38 let33) := by timed congr lean_s14 lean_s19
have lean_s21 : (Eq let38 let32) := by timed Eq.trans lean_s20 lean_r12
have lean_s22 : (Eq let39 let45) := by timed congr lean_s12 lean_s21
have lean_s23 : (Eq let39 let44) := by timed Eq.trans lean_s22 lean_r18
have lean_s24 : (Eq let40 let53) := by timed flipCongrArg lean_s23 [Not]
let lean_s25 := by timed congr lean_s10 lean_s24
have lean_s26 : let55 := by timed congr lean_s8 lean_s25
have lean_s27 : let55 := by timed Eq.trans lean_r17 lean_s26
have lean_s28 : let54 := by timed eqResolve lean_a24 lean_s27
have lean_s29 : let46 := by andElim lean_s28, 1
let lean_s30 := by R1 lean_s5, lean_s29, let21, [(- 1), 0]
have lean_s31 : let49 := by andElim lean_s28, 0
exact (show False from by R1 lean_s30, lean_s31, let4, [0, 0])


