open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {skoS : Rat}
variable {skoX : Rat}
variable {skoC : Rat}
variable {skoX : Rat}
variable {skoS : Rat}
variable {skoC : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 42)
  let let3 := (binrel% HDiv.hDiv (Int.ofNat 235) let2)
  let let4 := (binrel% HAdd.hAdd skoS (binrel% HMul.hMul let3 skoC))
  let let5 := (binrel% GE.ge let4 let1)
  let let6 := (Rat.ofInt 0)
  let let7 := (binrel% GE.ge let4 let6)
  let let8 := (Rat.ofInt 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% LT.lt let9 let1)
  let let11 := (binrel% GT.gt let8 let1)
  let let12 := (Neg.neg let3)
  let let13 := (binrel% HMul.hMul let12 skoC)
  let let14 := (Int.ofNat 1)
  let let15 := (Neg.neg let14)
  let let16 := (binrel% HAdd.hAdd (binrel% HMul.hMul let15 skoS) let13)
  let let17 := (binrel% GE.ge let16 let1)
  let let18 := (binrel% LE.le let4 let6)
  let let19 := (binrel% HMul.hMul let8 let4)
  let let20 := (binrel% HMul.hMul let9 let6)
  let let21 := (binrel% LE.le skoS let13)
  let let22 := (binrel% HMul.hMul let9 let4)
  let let23 := (binrel% GE.ge (binrel% HMul.hMul let15 skoX) let1)
  let let24 := (binrel% LE.le skoX let6)
  let let25 := (binrel% HMul.hMul skoC let12)
  let let26 := (Not let7)
  let let27 := (binrel% LT.lt let4 let6)
  let let28 := (Not True)
  let let29 := (binrel% HDiv.hDiv let14 let2)
  let let30 := (Neg.neg (Rat.ofInt 235))
  let let31 := (binrel% HMul.hMul let30 let29)
  let let32 := (Eq let31 let12)
  let let33 := (binrel% HAdd.hAdd let4 let16)
  let let34 := (Not let5)
  let let35 := (Not let34)
  let let36 := (binrel% HMul.hMul let8 let6)
  let let37 := (binrel% HDiv.hDiv let30 (Rat.ofInt 42))
  let let38 := (Not let18)
  let let39 := (binrel% GT.gt let4 let6)
  let let40 := (binrel% GE.ge let6 let6)
  let let41 := (binrel% HAdd.hAdd let36 let20)
  let let42 := (binrel% HAdd.hAdd let19 let22)
  let let43 := (binrel% GE.ge let42 let41)
  let let44 := (Not let43)
  let let45 := (binrel% LT.lt let42 let41)
  let let46 := (binrel% LE.le let13 skoS)
  let let47 := (Not let17)
  let let48 := (Not let47)
  let let49 := (binrel% HMul.hMul skoC let37)
  let let50 := (binrel% LE.le skoS let49)
  let let51 := (Not let50)
  let let52 := (Not let24)
  let let53 := (binrel% LE.le let49 skoS)
  let let54 := (Not let53)
  let let55 := (And let54 (And let52 let51))
  let let56 := (binrel% HAdd.hAdd let6 let6)
  let let57 := (Not let23)
  let let58 := (And let34 (And let57 let47))
  let let59 := (Eq let55 let58)
  let let60 := (Or let5 let17)
  let let61 := (Or let35 let48)
  let let62 := (binrel% LT.lt let22 let20)
  let let63 := (And let10 let39)
  let let64 := (binrel% LT.lt let19 let36)
  let let65 := (And let11 let27)
(Eq let7 let5) → (Eq let10 True) → (Eq let11 True) → (Eq let18 let17) → (Eq let19 let4) → (Eq let20 let6) → (Eq let21 let17) → (Eq let22 let16) → (Eq let24 let23) → (Eq let25 let13) → (Eq let27 let26) → (Eq let28 False) → let32 → (Eq let33 let6) → (Eq let35 let5) → (Eq let36 let6) → (Eq let30 let30) → (Eq let37 let31) → (Eq let39 let38) → (Eq let40 True) → (Eq let45 let44) → (Eq let46 let5) → (Eq let48 let17) → (Eq let55 let55) → (Eq let56 let6) → let55 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 42)
  let let3 := (binrel% HDiv.hDiv (Int.ofNat 235) let2)
  let let4 := (binrel% HAdd.hAdd skoS (binrel% HMul.hMul let3 skoC))
  let let5 := (binrel% GE.ge let4 let1)
  let let6 := (Rat.ofInt 0)
  let let7 := (binrel% GE.ge let4 let6)
  let let8 := (Rat.ofInt 1)
  let let9 := (Neg.neg let8)
  let let10 := (binrel% LT.lt let9 let1)
  let let11 := (binrel% GT.gt let8 let1)
  let let12 := (Neg.neg let3)
  let let13 := (binrel% HMul.hMul let12 skoC)
  let let14 := (Int.ofNat 1)
  let let15 := (Neg.neg let14)
  let let16 := (binrel% HAdd.hAdd (binrel% HMul.hMul let15 skoS) let13)
  let let17 := (binrel% GE.ge let16 let1)
  let let18 := (binrel% LE.le let4 let6)
  let let19 := (binrel% HMul.hMul let8 let4)
  let let20 := (binrel% HMul.hMul let9 let6)
  let let21 := (binrel% LE.le skoS let13)
  let let22 := (binrel% HMul.hMul let9 let4)
  let let23 := (binrel% GE.ge (binrel% HMul.hMul let15 skoX) let1)
  let let24 := (binrel% LE.le skoX let6)
  let let25 := (binrel% HMul.hMul skoC let12)
  let let26 := (Not let7)
  let let27 := (binrel% LT.lt let4 let6)
  let let28 := (Not True)
  let let29 := (binrel% HDiv.hDiv let14 let2)
  let let30 := (Neg.neg (Rat.ofInt 235))
  let let31 := (binrel% HMul.hMul let30 let29)
  let let32 := (Eq let31 let12)
  let let33 := (binrel% HAdd.hAdd let4 let16)
  let let34 := (Not let5)
  let let35 := (Not let34)
  let let36 := (binrel% HMul.hMul let8 let6)
  let let37 := (binrel% HDiv.hDiv let30 (Rat.ofInt 42))
  let let38 := (Not let18)
  let let39 := (binrel% GT.gt let4 let6)
  let let40 := (binrel% GE.ge let6 let6)
  let let41 := (binrel% HAdd.hAdd let36 let20)
  let let42 := (binrel% HAdd.hAdd let19 let22)
  let let43 := (binrel% GE.ge let42 let41)
  let let44 := (Not let43)
  let let45 := (binrel% LT.lt let42 let41)
  let let46 := (binrel% LE.le let13 skoS)
  let let47 := (Not let17)
  let let48 := (Not let47)
  let let49 := (binrel% HMul.hMul skoC let37)
  let let50 := (binrel% LE.le skoS let49)
  let let51 := (Not let50)
  let let52 := (Not let24)
  let let53 := (binrel% LE.le let49 skoS)
  let let54 := (Not let53)
  let let55 := (And let54 (And let52 let51))
  let let56 := (binrel% HAdd.hAdd let6 let6)
  let let57 := (Not let23)
  let let58 := (And let34 (And let57 let47))
  let let59 := (Eq let55 let58)
  let let60 := (Or let5 let17)
  let let61 := (Or let35 let48)
  let let62 := (binrel% LT.lt let22 let20)
  let let63 := (And let10 let39)
  let let64 := (binrel% LT.lt let19 let36)
  let let65 := (And let11 let27)
fun lean_r0 : (Eq let7 let5) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq let10 True) => -- EVALUATE
fun lean_r2 : (Eq let11 True) => -- EVALUATE
fun lean_r3 : (Eq let18 let17) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let19 let4) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let20 let6) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let21 let17) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let22 let16) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let24 let23) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let25 let13) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let27 let26) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let28 False) => -- THEORY_REWRITE_BOOL
fun lean_r12 : let32 => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let33 let6) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let35 let5) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let36 let6) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let30 let30) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let37 let31) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let39 let38) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let40 True) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let45 let44) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let46 let5) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let48 let17) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let55 let55) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let56 let6) => -- THEORY_REWRITE_ARITH
fun lean_a25 : let55 => by
have lean_s0 : (Or let35 (Or let48 False)) :=
  (scope (fun lean_a26 : let34 =>
    (scope (fun lean_a27 : let47 =>
      have lean_s0 : let11 := by timed trueElim lean_r2
      have lean_s1 : (Eq let26 let34) := by timed flipCongrArg lean_r0 [Not]
      have lean_s2 : (Eq let27 let34) := by timed Eq.trans lean_r10 lean_s1
      have lean_s3 : (Eq let34 let27) := by timed Eq.symm lean_s2
      have lean_s4 : let27 := by timed eqResolve lean_a26 lean_s3
      have lean_s5 : let65 := by timed And.intro lean_s0 lean_s4
      have lean_s6 : (Implies let65 let64) := by arithMulPos [let4, let6, let8], 0
      have lean_s7 : let64 := by timed modusPonens lean_s5 lean_s6
      have lean_s8 : let10 := by timed trueElim lean_r1
      have lean_s9 : (Eq let38 let47) := by timed flipCongrArg lean_r3 [Not]
      have lean_s10 : (Eq let39 let47) := by timed Eq.trans lean_r18 lean_s9
      have lean_s11 : (Eq let47 let39) := by timed Eq.symm lean_s10
      have lean_s12 : let39 := by timed eqResolve lean_a27 lean_s11
      have lean_s13 : let63 := by timed And.intro lean_s8 lean_s12
      have lean_s14 : (Implies let63 let62) := by arithMulNeg [let4, let6, let9], 2
      have lean_s15 : let62 := by timed modusPonens lean_s13 lean_s14
      have lean_s16 : let45 := by sumBounds [lean_s7, lean_s15]
      let lean_s17 := by timed flipCongrArg lean_r4 [HAdd.hAdd]
      have lean_s18 : (Eq let42 let33) := by timed congr lean_s17 lean_r7
      have lean_s19 : (Eq let42 let6) := by timed Eq.trans lean_s18 lean_r13
      let lean_s20 := by timed flipCongrArg lean_s19 [GE.ge]
      let lean_s21 := by timed flipCongrArg lean_r15 [HAdd.hAdd]
      have lean_s22 : (Eq let41 let56) := by timed congr lean_s21 lean_r5
      have lean_s23 : (Eq let41 let6) := by timed Eq.trans lean_s22 lean_r24
      have lean_s24 : (Eq let43 let40) := by timed congr lean_s20 lean_s23
      have lean_s25 : (Eq let43 True) := by timed Eq.trans lean_s24 lean_r19
      have lean_s26 : (Eq let44 let28) := by timed flipCongrArg lean_s25 [Not]
      have lean_s27 : (Eq let44 False) := by timed Eq.trans lean_s26 lean_r11
      have lean_s28 : (Eq let45 False) := by timed Eq.trans lean_r20 lean_s27
      show False from by timed eqResolve lean_s16 lean_s28
  ))))
have lean_s1 : (Not (And let34 let47)) := by liftOrNToNeg lean_s0
have lean_s2 : let61 := by timed flipNotAnd lean_s1 [let34, let47]
let lean_s3 := by timed flipCongrArg lean_r14 [Or]
have lean_s4 : (Eq let61 let60) := by timed congr lean_s3 lean_r22
have lean_s5 : let60 := by timed eqResolve lean_s2 lean_s4
have lean_s6 : (Eq And And) := by timed rfl
have lean_s7 : (Eq skoC skoC) := by timed rfl
let lean_s8 := by timed flipCongrArg lean_s7 [HMul.hMul]
let lean_s9 := by timed flipCongrArg lean_r16 [HMul.hMul]
have lean_s10 : (Eq let29 let29) := by timed rfl
have lean_s11 : (Eq let31 let31) := by timed congr lean_s9 lean_s10
have lean_s12 : let32 := by timed Eq.trans lean_s11 lean_r12
have lean_s13 : (Eq let37 let12) := by timed Eq.trans lean_r17 lean_s12
have lean_s14 : (Eq let49 let25) := by timed congr lean_s8 lean_s13
have lean_s15 : (Eq let49 let13) := by timed Eq.trans lean_s14 lean_r9
let lean_s16 := by timed flipCongrArg lean_s15 [LE.le]
have lean_s17 : (Eq skoS skoS) := by timed rfl
have lean_s18 : (Eq let53 let46) := by timed congr lean_s16 lean_s17
have lean_s19 : (Eq let53 let5) := by timed Eq.trans lean_s18 lean_r21
have lean_s20 : (Eq let54 let34) := by timed flipCongrArg lean_s19 [Not]
let lean_s21 := by timed congr lean_s6 lean_s20
have lean_s22 : (Eq let52 let57) := by timed flipCongrArg lean_r8 [Not]
let lean_s23 := by timed congr lean_s6 lean_s22
let lean_s24 := by timed flipCongrArg lean_s17 [LE.le]
have lean_s25 : (Eq let50 let21) := by timed congr lean_s24 lean_s15
have lean_s26 : (Eq let50 let17) := by timed Eq.trans lean_s25 lean_r6
have lean_s27 : (Eq let51 let47) := by timed flipCongrArg lean_s26 [Not]
let lean_s28 := by timed congr lean_s23 lean_s27
have lean_s29 : let59 := by timed congr lean_s21 lean_s28
have lean_s30 : let59 := by timed Eq.trans lean_r23 lean_s29
have lean_s31 : let58 := by timed eqResolve lean_a25 lean_s30
have lean_s32 : let47 := by andElim lean_s31, 2
let lean_s33 := by R1 lean_s5, lean_s32, let17, [(- 1), 0]
have lean_s34 : let34 := by andElim lean_s31, 0
exact (show False from by R1 lean_s33, lean_s34, let5, [0, 0])


