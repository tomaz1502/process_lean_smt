open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {xx5f14 : Rat}
variable {xx5f15 : Rat}
variable {xx5f10 : Rat}
variable {xx5f6 : Rat}
variable {xx5f5 : Prop}
variable {xx5f8 : Rat}
variable {xx5f12 : Rat}
variable {xx5f11 : Rat}
variable {xx5f9 : Prop}
variable {xx5f13 : Rat}
variable {xx5f0 : Prop}
variable {xx5f11 : Rat}
variable {xx5f12 : Rat}
variable {xx5f1 : Rat}
variable {xx5f0 : Prop}
variable {xx5f16 : Prop}
variable {xx5f3 : Rat}
variable {xx5f4 : Rat}
variable {xx5f16 : Prop}
variable {xx5f10 : Rat}
variable {xx5f8 : Rat}
variable {xx5f15 : Rat}
variable {xx5f14 : Rat}
variable {xx5f13 : Rat}
variable {xx5f2 : Rat}
variable {xx5f9 : Prop}
variable {xx5f4 : Rat}
variable {xx5f3 : Rat}
variable {xx5f1 : Rat}
variable {xx5f5 : Prop}
variable {xx5f2 : Rat}
variable {xx5f7 : Rat}
variable {xx5f7 : Rat}
variable {xx5f6 : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 20)
  let let3 := (Int.ofNat 1)
  let let4 := (binrel% HDiv.hDiv let3 let2)
  let let5 := (Neg.neg let3)
  let let6 := (binrel% HMul.hMul let5 xx5f3)
  let let7 := (binrel% GE.ge (binrel% HAdd.hAdd let6 (binrel% HMul.hMul let4 xx5f4)) let1)
  let let8 := (Not let7)
  let let9 := (Int.ofNat 60)
  let let10 := (binrel% GE.ge xx5f4 let9)
  let let11 := (And let10 let8)
  let let12 := (binrel% HMul.hMul let5 xx5f11)
  let let13 := (binrel% HAdd.hAdd let12 (binrel% HMul.hMul let4 xx5f12))
  let let14 := (binrel% GE.ge let13 let1)
  let let15 := (Not let14)
  let let16 := (binrel% GE.ge xx5f12 let9)
  let let17 := (And let16 let15)
  let let18 := (Or let17 let11)
  let let19 := (Not xx5f9)
  let let20 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f2 let6) let1)
  let let21 := (binrel% HMul.hMul let5 xx5f2)
  let let22 := (binrel% GE.ge (binrel% HAdd.hAdd let21 xx5f3) let1)
  let let23 := (binrel% HMul.hMul let5 xx5f4)
  let let24 := (binrel% HAdd.hAdd xx5f2 let23)
  let let25 := (binrel% GE.ge let24 let1)
  let let26 := (binrel% HAdd.hAdd let21 xx5f4)
  let let27 := (binrel% GE.ge let26 let1)
  let let28 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f1 let21) let1)
  let let29 := (binrel% HMul.hMul let5 xx5f1)
  let let30 := (binrel% GE.ge (binrel% HAdd.hAdd let29 xx5f2) let1)
  let let31 := (binrel% GE.ge let21 let5)
  let let32 := (binrel% GE.ge xx5f2 let1)
  let let33 := (Int.ofNat 2)
  let let34 := (binrel% GE.ge xx5f8 let33)
  let let35 := (Neg.neg let33)
  let let36 := (binrel% HMul.hMul let5 xx5f8)
  let let37 := (binrel% GE.ge let36 let35)
  let let38 := (And (And let37 let34) (And xx5f5 (And let32 (And let31 (And (And let30 let28) (And (And let27 let25) (And (And let22 let20) let19)))))))
  let let39 := (binrel% GE.ge xx5f3 let1)
  let let40 := (binrel% GE.ge let6 let1)
  let let41 := (And let40 let39)
  let let42 := (binrel% GE.ge xx5f4 let1)
  let let43 := (binrel% GE.ge let23 let1)
  let let44 := (binrel% GE.ge xx5f1 let1)
  let let45 := (binrel% GE.ge let29 let1)
  let let46 := (Not xx5f5)
  let let47 := (binrel% GE.ge xx5f8 let1)
  let let48 := (binrel% GE.ge let36 let1)
  let let49 := (And (And let48 let47) (And let46 (And xx5f9 (And (And let45 let44) (And (And let43 let42) let41)))))
  let let50 := (Or let49 let38)
  let let51 := (binrel% GE.ge xx5f6 let1)
  let let52 := (Eq xx5f9 xx5f16)
  let let53 := (binrel% HAdd.hAdd xx5f3 xx5f6)
  let let54 := (smtIte xx5f9 xx5f3 let53 Rat)
  let let55 := (binrel% HMul.hMul let5 let54)
  let let56 := (binrel% HAdd.hAdd xx5f11 let55)
  let let57 := (binrel% GE.ge let56 let1)
  let let58 := (binrel% HAdd.hAdd let12 let54)
  let let59 := (binrel% GE.ge let58 let1)
  let let60 := (binrel% HMul.hMul let5 xx5f12)
  let let61 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f4 (binrel% HAdd.hAdd xx5f6 let60)) let1)
  let let62 := (binrel% HMul.hMul let5 xx5f6)
  let let63 := (binrel% HAdd.hAdd let62 xx5f12)
  let let64 := (binrel% GE.ge (binrel% HAdd.hAdd let23 let63) let1)
  let let65 := (binrel% HMul.hMul let5 xx5f10)
  let let66 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f1 (binrel% HAdd.hAdd xx5f6 let65)) let1)
  let let67 := (binrel% HAdd.hAdd let62 xx5f10)
  let let68 := (binrel% GE.ge (binrel% HAdd.hAdd let29 let67) let1)
  let let69 := (binrel% GE.ge (binrel% HAdd.hAdd let29 let62) let5)
  let let70 := (Or xx5f9 let69)
  let let71 := (Rat.ofInt 1)
  let let72 := (Rat.ofInt 0)
  let let73 := (smtIte xx5f5 let72 let71 Rat)
  let let74 := (binrel% GE.ge let73 let3)
  let let75 := (binrel% HMul.hMul let5 let73)
  let let76 := (binrel% GE.ge let75 let5)
  let let77 := (And let76 let74)
  let let78 := (binrel% GE.ge xx5f15 let33)
  let let79 := (binrel% HMul.hMul let5 xx5f15)
  let let80 := (binrel% GE.ge let79 let35)
  let let81 := (And (And let80 let78) (And let77 (And let51 (And let70 (And (And let68 let66) (And (And let64 let61) (And (And let59 let57) let52)))))))
  let let82 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f3 let12) let1)
  let let83 := (binrel% GE.ge (binrel% HAdd.hAdd let6 xx5f11) let1)
  let let84 := (And let83 let82)
  let let85 := (binrel% HAdd.hAdd xx5f4 let60)
  let let86 := (binrel% GE.ge let85 let1)
  let let87 := (binrel% HAdd.hAdd let23 xx5f12)
  let let88 := (binrel% GE.ge let87 let1)
  let let89 := (binrel% GE.ge xx5f10 let1)
  let let90 := (binrel% GE.ge let65 let1)
  let let91 := (And (And let90 let89) (And (And let88 let86) let84))
  let let92 := (Not xx5f16)
  let let93 := (binrel% GE.ge xx5f1 (Int.ofNat 30))
  let let94 := (binrel% GE.ge let73 let1)
  let let95 := (binrel% GE.ge let75 let1)
  let let96 := (And let95 let94)
  let let97 := (binrel% GE.ge xx5f15 let3)
  let let98 := (binrel% GE.ge let79 let5)
  let let99 := (And (And let98 let97) (And let96 (And xx5f9 (And let93 (And let92 let91)))))
  let let100 := (binrel% GE.ge xx5f15 let1)
  let let101 := (binrel% GE.ge let79 let1)
  let let102 := (And (And let101 let100) (And let96 (And let19 (And xx5f16 let91))))
  let let103 := (Or let102 (Or let99 let81))
  let let104 := (binrel% GE.ge xx5f13 let1)
  let let105 := (smtIte let77 let72 let71 Rat)
  let let106 := (binrel% GE.ge let105 let1)
  let let107 := (binrel% HMul.hMul let5 let105)
  let let108 := (binrel% GE.ge let107 let5)
  let let109 := (And let108 (And let106 (And let76 (And let94 (And let104 (And let103 (And let51 (And let50 let18))))))))
  let let110 := (Eq xx5f2 xx5f3)
  let let111 := (Eq xx5f2 xx5f4)
  let let112 := (Eq xx5f1 xx5f2)
  let let113 := (Rat.ofInt 2)
  let let114 := (Eq xx5f8 let113)
  let let115 := (And let114 (And xx5f5 (And let32 (And let31 (And let112 (And let111 (And let110 let19)))))))
  let let116 := (Eq xx5f3 let72)
  let let117 := (Eq xx5f4 let72)
  let let118 := (Eq xx5f1 let72)
  let let119 := (And let118 (And let117 let116))
  let let120 := (And xx5f9 let119)
  let let121 := (Eq xx5f8 let72)
  let let122 := (And let121 (And let46 let120))
  let let123 := (Or let122 let115)
  let let124 := (And let123 let18)
  let let125 := (Eq xx5f11 let54)
  let let126 := (Eq xx5f4 let63)
  let let127 := (Eq xx5f1 let67)
  let let128 := (And let51 (And let70 (And let127 (And let126 (And let125 let52)))))
  let let129 := (Eq let73 let71)
  let let130 := (Eq xx5f15 let113)
  let let131 := (And let130 (And let129 let128))
  let let132 := (Eq xx5f3 xx5f11)
  let let133 := (Eq xx5f4 xx5f12)
  let let134 := (Eq xx5f10 let72)
  let let135 := (And let134 (And let133 let132))
  let let136 := (And xx5f9 (And let93 (And let92 let135)))
  let let137 := (Eq let73 let72)
  let let138 := (Eq xx5f15 let71)
  let let139 := (And let138 (And let137 let136))
  let let140 := (And let19 (And xx5f16 let135))
  let let141 := (Eq xx5f15 let72)
  let let142 := (And let141 (And let137 let140))
  let let143 := (Or let142 (Or let139 let131))
  let let144 := (smtIte let129 let72 let71 Rat)
  let let145 := (binrel% GE.ge let144 let1)
  let let146 := (binrel% HMul.hMul let5 let144)
  let let147 := (binrel% GE.ge let146 let5)
  let let148 := (And let147 (And let145 (And let76 (And let94 (And let104 (And let143 (And let51 let124)))))))
  let let149 := (Neg.neg let71)
  let let150 := (binrel% HMul.hMul let149 xx5f12)
  let let151 := (Neg.neg (Rat.ofInt 59))
  let let152 := (Rat.ofInt 60)
  let let153 := (Neg.neg let152)
  let let154 := (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let72 let71)))
  let let155 := (binrel% GE.ge let24 let72)
  let let156 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd xx5f2 let26))
  let let157 := (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let71 let72))
  let let158 := (binrel% GE.ge xx5f2 let72)
  let let159 := (Not let158)
  let let160 := (binrel% LT.lt xx5f2 let72)
  let let161 := (Eq xx5f11 xx5f3)
  let let162 := (Eq xx5f12 xx5f4)
  let let163 := (And let134 (And let162 let161))
  let let164 := (Eq xx5f7 let72)
  let let165 := (And let141 (And let164 (And let19 (And xx5f16 let163))))
  let let166 := (And (And (And (And (And (And let141 let164) let19) xx5f16) let134) let162) let161)
  let let167 := (Eq xx5f0 xx5f9)
  let let168 := (Eq xx5f9 xx5f0)
  let let169 := (binrel% HMul.hMul let71 xx5f2)
  let let170 := (binrel% HMul.hMul let2 xx5f11)
  let let171 := (Rat.ofInt 20)
  let let172 := (binrel% HMul.hMul xx5f11 let171)
  let let173 := (binrel% HMul.hMul let149 let24)
  let let174 := (Not let95)
  let let175 := (Not let174)
  let let176 := (Eq xx5f16 xx5f9)
  let let177 := (Not let104)
  let let178 := (Not let177)
  let let179 := (binrel% GE.ge xx5f4 let152)
  let let180 := (Not let179)
  let let181 := (binrel% LT.lt xx5f4 let152)
  let let182 := (binrel% GE.ge xx5f12 let152)
  let let183 := (Not let182)
  let let184 := (binrel% LT.lt xx5f12 let152)
  let let185 := (Neg.neg let4)
  let let186 := (binrel% HMul.hMul let185 xx5f12)
  let let187 := (binrel% HAdd.hAdd xx5f11 let186)
  let let188 := (binrel% HMul.hMul let149 let187)
  let let189 := (binrel% LT.lt let72 let152)
  let let190 := (binrel% HMul.hMul let149 let85)
  let let191 := (binrel% HMul.hMul let71 xx5f4)
  let let192 := (binrel% LE.le let72 let72)
  let let193 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let26 xx5f2)))
  let let194 := (Not let93)
  let let195 := (Not let194)
  let let196 := (And False False)
  let let197 := (Or let17 (Or let11 False))
  let let198 := (Eq let144 let144)
  let let199 := (binrel% HAdd.hAdd let72 xx5f2)
  let let200 := (Not xx5f0)
  let let201 := (smtIte let200 let199 let72 Rat)
  let let202 := (Eq xx5f3 let201)
  let let203 := (Eq xx5f4 let199)
  let let204 := (Eq xx5f1 let199)
  let let205 := (binrel% LE.le let199 let71)
  let let206 := (Or xx5f0 let205)
  let let207 := (Not let160)
  let let208 := (And let114 (And xx5f5 (And let207 (And let206 (And let204 (And let203 (And let202 let168)))))))
  let let209 := (And (And (And (And (And (And (And let114 xx5f5) let207) let206) let204) let203) let202) let168)
  let let210 := (Eq xx5f0 False)
  let let211 := (binrel% LE.le xx5f2 let71)
  let let212 := (binrel% HMul.hMul let149 let73)
  let let213 := (Not let16)
  let let214 := (Not let213)
  let let215 := (binrel% GE.ge xx5f13 let72)
  let let216 := (Not let215)
  let let217 := (binrel% LT.lt xx5f13 let72)
  let let218 := (binrel% HMul.hMul let2 xx5f3)
  let let219 := (binrel% HMul.hMul xx5f3 let171)
  let let220 := (binrel% HMul.hMul let71 let72)
  let let221 := (binrel% LE.le let73 let72)
  let let222 := (smtIte xx5f0 let72 let199 Rat)
  let let223 := (binrel% HMul.hMul let149 let72)
  let let224 := (binrel% HMul.hMul let71 let71)
  let let225 := (binrel% HMul.hMul let72 let171)
  let let226 := (Eq let73 let73)
  let let227 := (Eq let226 True)
  let let228 := (Rat.ofInt 30)
  let let229 := (binrel% GE.ge xx5f1 let228)
  let let230 := (binrel% LE.le let170 xx5f12)
  let let231 := (And let80 (And let78 (And let76 (And let74 (And let51 (And let70 (And let68 (And let66 (And let64 (And let61 (And let59 (And let57 let52))))))))))))
  let let232 := (binrel% GT.gt let71 let1)
  let let233 := (binrel% GE.ge let73 let71)
  let let234 := (Not let10)
  let let235 := (Not let234)
  let let236 := (binrel% HAdd.hAdd let73 let75)
  let let237 := (And let37 (And let34 (And xx5f5 (And let32 (And let31 (And let30 (And let28 (And let27 (And let25 (And let22 (And let20 let19)))))))))))
  let let238 := (Eq xx5f3 xx5f2)
  let let239 := (binrel% HAdd.hAdd let72 let149)
  let let240 := (Not let221)
  let let241 := (binrel% GT.gt let73 let72)
  let let242 := (binrel% HAdd.hAdd xx5f4 let23)
  let let243 := (Eq let54 let54)
  let let244 := (Eq let243 let243)
  let let245 := (binrel% LE.le let72 let153)
  let let246 := (binrel% LE.le let56 let72)
  let let247 := (binrel% GE.ge let72 let72)
  let let248 := (binrel% LE.le let225 let72)
  let let249 := (Not let248)
  let let250 := (Not let189)
  let let251 := (And let250 let249)
  let let252 := (binrel% LE.le let219 xx5f4)
  let let253 := (Not let252)
  let let254 := (Not let181)
  let let255 := (And let254 let253)
  let let256 := (binrel% LE.le let172 xx5f12)
  let let257 := (Not let256)
  let let258 := (Not let184)
  let let259 := (And let258 let257)
  let let260 := (Or (Or let259 let255) let251)
  let let261 := (binrel% LT.lt let72 let228)
  let let262 := (Not let261)
  let let263 := (Eq xx5f8 let71)
  let let264 := (And (And (And (And (And (And (And let263 let46) xx5f0) let262) let19) let118) let117) let116)
  let let265 := (And (And (And (And (And (And let121 let46) let200) xx5f9) let118) let117) let116)
  let let266 := (Or (Or let265 let264) let209)
  let let267 := (Eq xx5f7 let73)
  let let268 := (binrel% LT.lt xx5f6 let72)
  let let269 := (Not let268)
  let let270 := (smtIte let19 let53 xx5f3 Rat)
  let let271 := (Eq xx5f11 let270)
  let let272 := (Eq xx5f12 (binrel% HAdd.hAdd xx5f4 xx5f6))
  let let273 := (binrel% HAdd.hAdd xx5f1 xx5f6)
  let let274 := (Eq xx5f10 let273)
  let let275 := (binrel% LE.le let273 let71)
  let let276 := (Or xx5f9 let275)
  let let277 := (Eq xx5f7 let71)
  let let278 := (And (And (And (And (And (And (And let130 let277) let269) let276) let274) let272) let271) let176)
  let let279 := (binrel% LT.lt xx5f1 let228)
  let let280 := (Not let279)
  let let281 := (And (And (And (And (And (And (And let138 let164) xx5f9) let280) let92) let134) let162) let161)
  let let282 := (Or (Or let166 let281) let278)
  let let283 := (smtIte let277 let72 let71 Rat)
  let let284 := (Eq xx5f14 let283)
  let let285 := (Not let217)
  let let286 := (binrel% GE.ge xx5f7 let72)
  let let287 := (binrel% LE.le xx5f7 let71)
  let let288 := (binrel% GE.ge xx5f14 let72)
  let let289 := (binrel% LE.le xx5f14 let71)
  let let290 := (And let289 (And let288 (And let287 (And let286 (And let200 (And let285 (And let284 (And let282 (And let269 (And let267 (And let266 let260)))))))))))
  let let291 := (And (And (And (And (And (And (And (And (And (And (And let289 let288) let287) let286) let200) let285) let284) let282) let269) let267) let266) let260)
  let let292 := (And let48 (And let47 (And let46 (And xx5f9 (And let45 (And let44 (And let43 (And let42 let41))))))))
  let let293 := (Eq let243 True)
  let let294 := (Not let51)
  let let295 := (Not let294)
  let let296 := (binrel% GE.ge let85 let72)
  let let297 := (Eq let226 let226)
  let let298 := (Not let229)
  let let299 := (Eq let105 let105)
  let let300 := (Eq let299 True)
  let let301 := (binrel% LE.le let187 let72)
  let let302 := (binrel% LE.le let218 xx5f4)
  let let303 := (Neg.neg (Rat.ofInt 3))
  let let304 := (binrel% GE.ge let72 let303)
  let let305 := (Eq let299 let299)
  let let306 := (Not let301)
  let let307 := (binrel% GT.gt let187 let72)
  let let308 := (Or let259 (Or let255 let251))
  let let309 := (binrel% HAdd.hAdd let6 let54)
  let let310 := (binrel% HAdd.hAdd xx5f3 let55)
  let let311 := (binrel% HMul.hMul let149 let310)
  let let312 := (binrel% HAdd.hAdd let72 let72)
  let let313 := (Not True)
  let let314 := (binrel% LE.le xx5f3 let72)
  let let315 := (smtIte False let72 xx5f2 Rat)
  let let316 := (binrel% LT.lt let149 let1)
  let let317 := (binrel% HMul.hMul let149 let71)
  let let318 := (And let121 (And let46 (And True let120)))
  let let319 := (And let90 (And let89 (And let88 (And let86 let84))))
  let let320 := (And let98 (And let97 (And let95 (And let94 (And xx5f9 (And let93 (And let92 let319)))))))
  let let321 := (binrel% LE.le let72 let151)
  let let322 := (Eq False xx5f9)
  let let323 := (And let147 (And let145 (And let76 (And let94 (And True (And let104 (And True (And let143 (And let51 (And True let124))))))))))
  let let324 := (binrel% HMul.hMul let5 xx5f7)
  let let325 := (binrel% GE.ge let324 let5)
  let let326 := (Not let74)
  let let327 := (Not let326)
  let let328 := (And let19 let119)
  let let329 := (And let263 (And let46 (And xx5f0 (And let262 let328))))
  let let330 := (And let121 (And let46 (And let200 let120)))
  let let331 := (Or let265 (Or let264 let209))
  let let332 := (binrel% GE.ge xx5f6 let72)
  let let333 := (Not let332)
  let let334 := (binrel% HMul.hMul let71 let56)
  let let335 := (binrel% GE.ge xx5f7 let1)
  let let336 := (And let101 (And let100 (And let95 (And let94 (And let19 (And xx5f16 let319))))))
  let let337 := (binrel% HMul.hMul let71 xx5f3)
  let let338 := (And let130 (And let277 (And let269 (And let276 (And let274 (And let272 (And let271 let176)))))))
  let let339 := (binrel% HMul.hMul let5 xx5f14)
  let let340 := (binrel% GE.ge let339 let5)
  let let341 := (Not let233)
  let let342 := (binrel% LT.lt let73 let71)
  let let343 := (And let138 (And let164 (And xx5f9 (And let280 (And let92 let163)))))
  let let344 := (Not let32)
  let let345 := (Not let344)
  let let346 := (Or let166 (Or let281 let278))
  let let347 := (binrel% HMul.hMul let185 let152)
  let let348 := (And let263 (And let46 (And xx5f0 (And False let328))))
  let let349 := (binrel% GE.ge xx5f14 let1)
  let let350 := (Not False)
  let let351 := (smtIte xx5f0 let72 xx5f2 Rat)
  let let352 := (Eq xx5f3 let351)
  let let353 := (Or xx5f0 let31)
  let let354 := (And let114 (And xx5f5 (And let32 (And let353 (And let112 (And let111 (And let352 let167)))))))
  let let355 := (Or let330 let354)
  let let356 := (Or let330 (Or False let354))
  let let357 := (Eq xx5f3 (binrel% HAdd.hAdd let62 let54))
  let let358 := (Eq let54 let53)
  let let359 := (Eq xx5f3 let54)
  let let360 := (Eq let54 xx5f3)
  let let361 := (binrel% HAdd.hAdd let72 let153)
  let let362 := (binrel% HMul.hMul let71 let73)
  let let363 := (binrel% HMul.hMul let149 let152)
  let let364 := (binrel% HMul.hMul let149 xx5f4)
  let let365 := (Eq xx5f4 xx5f2)
  let let366 := (binrel% LE.le xx5f4 let72)
  let let367 := (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let303 let312)))
  let let368 := (Eq let14 let14)
  let let369 := (binrel% HAdd.hAdd let149 let71)
  let let370 := (Not let15)
  let let371 := (Eq let370 let14)
  let let372 := (Or False let31)
  let let373 := (binrel% HAdd.hAdd let309 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let186 (binrel% HAdd.hAdd let56 xx5f3))))
  let let374 := (binrel% HAdd.hAdd let223 (binrel% HAdd.hAdd let223 (binrel% HAdd.hAdd let347 (binrel% HAdd.hAdd let220 let220))))
  let let375 := (binrel% HAdd.hAdd let311 (binrel% HAdd.hAdd let188 (binrel% HAdd.hAdd let186 (binrel% HAdd.hAdd let334 let337))))
  let let376 := (binrel% GE.ge let375 let374)
  let let377 := (Not let376)
  let let378 := (binrel% LT.lt let375 let374)
  let let379 := (binrel% LT.lt let185 let1)
  let let380 := (binrel% HAdd.hAdd let220 let223)
  let let381 := (binrel% HAdd.hAdd let362 let212)
  let let382 := (binrel% GE.ge let381 let380)
  let let383 := (Not let382)
  let let384 := (binrel% LT.lt let381 let380)
  let let385 := (Eq let310 let72)
  let let386 := (binrel% LE.le let72 let149)
  let let387 := (Eq let14 let370)
  let let388 := (binrel% HAdd.hAdd let75 let73)
  let let389 := (binrel% HAdd.hAdd let317 let224)
  let let390 := (binrel% HAdd.hAdd let212 let362)
  let let391 := (binrel% GE.ge let390 let389)
  let let392 := (Not let391)
  let let393 := (binrel% LT.lt let390 let389)
  let let394 := (Not let11)
  let let395 := (Not let292)
  let let396 := (Not let320)
  let let397 := (Not let137)
  let let398 := (Or let95 let397)
  let let399 := (Or let175 let397)
  let let400 := (binrel% LT.lt let212 let223)
  let let401 := (And let316 let241)
  let let402 := (Eq let362 let220)
  let let403 := (And let232 let137)
  let let404 := (Or let336 (Or let320 let231))
  let let405 := (Or let292 let237)
  let let406 := (And let108 (And let106 (And let76 (And let94 (And let104 (And let404 (And let51 (And let405 let18))))))))
  let let407 := (Eq let109 let406)
  let let408 := (Eq let18 let18)
  let let409 := (Eq And And)
  let let410 := (Eq let51 let51)
  let let411 := (Eq let52 let52)
  let let412 := (Eq let1 let1)
  let let413 := (Eq let5 let5)
  let let414 := (Eq xx5f11 xx5f11)
  let let415 := (Eq let70 let70)
  let let416 := (Eq let76 let76)
  let let417 := (Eq let92 let92)
  let let418 := (Eq let93 let93)
  let let419 := (Eq xx5f9 xx5f9)
  let let420 := (Eq let94 let94)
  let let421 := (Eq Or Or)
  let let422 := (Eq xx5f16 xx5f16)
  let let423 := (Eq let19 let19)
  let let424 := (Eq let104 let104)
  let let425 := (Eq let106 let106)
  let let426 := (Eq let108 let108)
  let let427 := (And let130 (And let277 let128))
  let let428 := (And let138 (And let164 let136))
  let let429 := (And let141 (And let164 let140))
  let let430 := (Or let429 (Or let428 let427))
  let let431 := (And let340 (And let349 (And let325 (And let335 (And let200 (And let104 (And let284 (And let430 (And let51 (And let267 (And let355 let18)))))))))))
  let let432 := (Eq xx5f3 let315)
  let let433 := (And let114 (And xx5f5 (And let32 (And let372 (And let112 (And let111 (And let432 let322)))))))
  let let434 := (And let121 (And let46 (And let350 let120)))
  let let435 := (Or let434 let433)
  let let436 := (And let147 (And let145 (And let76 (And let94 (And let350 (And let104 (And let198 (And let143 (And let51 (And let226 (And let435 let18)))))))))))
  let let437 := (Eq xx5f3 xx5f3)
  let let438 := (Eq let111 let111)
  let let439 := (Eq let112 let112)
  let let440 := (Eq let32 let32)
  let let441 := (Eq xx5f5 xx5f5)
  let let442 := (Eq let114 let114)
  let let443 := (Eq let116 let116)
  let let444 := (Eq let117 let117)
  let let445 := (Eq let118 let118)
  let let446 := (Eq let46 let46)
  let let447 := (Eq let121 let121)
  let let448 := (Eq let72 let72)
  let let449 := (Eq let71 let71)
  let let450 := (Eq let130 let130)
  let let451 := (Eq let134 let134)
  let let452 := (Eq let138 let138)
  let let453 := (Eq let141 let141)
  let let454 := (smtIte xx5f5 let137 let129 Prop)
  let let455 := (Not let231)
  let let456 := (Not let237)
  let let457 := (Not let59)
  let let458 := (smtIte xx5f9 let359 let357 Prop)
  let let459 := (smtIte xx5f9 let360 let358 Prop)
  let let460 := (Not let43)
  let let461 := (binrel% HAdd.hAdd let220 let363)
  let let462 := (binrel% HAdd.hAdd let191 let364)
  let let463 := (binrel% LE.le let462 let461)
  let let464 := (binrel% LE.le let364 let363)
  let let465 := (And let316 let179)
  let let466 := (Implies let465 let464)
  let let467 := (Eq let10 let179)
  let let468 := (binrel% LE.le let191 let220)
  let let469 := (And let232 let366)
  let let470 := (Not let17)
  let let471 := (Not let359)
  let let472 := (Not let40)
  let let473 := (Or let472 (Or let457 (Or let213 (Or let14 let471))))
  let let474 := (Or let472 (Or let457 (Or let213 (Or let370 let471))))
  let let475 := (Not let385)
  let let476 := (binrel% LE.le let337 let220)
  let let477 := (And let232 let314)
  let let478 := (binrel% LE.le let334 let220)
  let let479 := (And let232 let246)
  let let480 := (binrel% LE.le let186 let347)
  let let481 := (And let379 let182)
  let let482 := (Eq let16 let182)
  let let483 := (binrel% LT.lt let188 let223)
  let let484 := (And let316 let307)
  let let485 := (Eq let311 let223)
  let let486 := (And let316 let385)
  let let487 := (binrel% HAdd.hAdd let220 let317)
  let let488 := (binrel% LE.le let381 let487)
  let let489 := (binrel% LE.le let212 let317)
  let let490 := (And let316 let233)
  let let491 := (binrel% LE.le let362 let220)
  let let492 := (And let232 let221)
  let let493 := (Not let129)
  let let494 := (Or let74 let493)
  let let495 := (Or let327 let493)
  let let496 := (binrel% LT.lt let362 let224)
  let let497 := (And let232 let342)
  let let498 := (Eq let212 let317)
  let let499 := (And let316 let129)
  let let500 := (Not let336)
  let let501 := (Not let25)
  let let502 := (Not let31)
  let let503 := (Or let502 let501)
  let let504 := (binrel% HAdd.hAdd let363 (binrel% HAdd.hAdd let224 let223))
  let let505 := (binrel% HAdd.hAdd let364 (binrel% HAdd.hAdd let169 let173))
  let let506 := (binrel% LE.le let505 let504)
  let let507 := (binrel% LE.le let173 let223)
  let let508 := (And let316 let155)
  let let509 := (Implies let508 let507)
  let let510 := (Eq let25 let155)
  let let511 := (binrel% LE.le let169 let224)
  let let512 := (And let232 let211)
  let let513 := (Implies let512 let511)
  let let514 := (Eq let31 let211)
  let let515 := (Not let86)
  let let516 := (binrel% HAdd.hAdd let363 (binrel% HAdd.hAdd let223 (binrel% HAdd.hAdd let223 let224)))
  let let517 := (binrel% HAdd.hAdd let150 (binrel% HAdd.hAdd let190 (binrel% HAdd.hAdd let173 let169)))
  let let518 := (binrel% LE.le let517 let516)
  let let519 := (binrel% LE.le let190 let223)
  let let520 := (And let316 let296)
  let let521 := (binrel% LE.le let150 let363)
  let let522 := (And let316 let182)
(Eq let148 let109) → (Eq let150 let60) → (Eq let154 let151) → (Eq let155 let25) → (Eq let156 let72) → (Eq let157 let151) → (Eq let160 let159) → (Eq let158 let32) → (Eq let166 let165) → (Eq let168 let167) → (Eq let169 xx5f2) → (Eq let172 let170) → (Eq let173 let26) → (Eq let175 let95) → (Eq let176 let52) → (Eq let178 let104) → (Eq let181 let180) → (Eq let184 let183) → (Eq let188 let13) → (Eq let189 True) → (Eq let190 let87) → (Eq let191 xx5f4) → (Eq let192 True) → (Eq let193 let72) → (Eq let195 let93) → (Eq let196 False) → (Eq let197 let18) → (Eq let198 True) → (Eq let209 let208) → (Eq let210 let200) → (Eq let211 let31) → (Eq let212 let75) → (Eq let214 let16) → (Eq let217 let216) → (Eq let219 let218) → (Eq let220 let72) → (Eq let221 let95) → (Eq let201 let222) → (Eq let199 xx5f2) → (Eq let223 let72) → (Eq let224 let71) → (Eq let225 let72) → let227 → (Eq let229 let93) → (Eq let230 let14) → (Eq let81 let231) → (Eq let232 True) → (Eq let233 let74) → (Eq let235 let10) → (Eq let236 let72) → (Eq let38 let237) → (Eq let238 let110) → (Eq let239 let149) → (Eq let241 let240) → (Eq let242 let72) → let244 → (Eq let245 False) → (Eq let246 let59) → (Eq let247 True) → (Eq let291 let290) → (Eq let179 let10) → (Eq let49 let292) → let293 → (Eq let295 let51) → (Eq let296 let86) → let297 → (Eq let279 let298) → let300 → (Eq let301 let14) → (Eq let302 let7) → (Eq let304 True) → let305 → (Eq let307 let306) → (Eq let260 let308) → (Eq let275 let69) → (Eq let311 let309) → (Eq let312 let72) → (Eq let313 False) → (Eq let314 let40) → (Eq let315 xx5f2) → (Eq let316 True) → (Eq let317 let149) → (Eq let318 let122) → (Eq let99 let320) → (Eq let321 False) → (Eq let322 let19) → (Eq let323 let148) → (Eq let287 let325) → (Eq let327 let74) → (Eq let264 let329) → (Eq let265 let330) → (Eq let266 let331) → (Eq let332 let51) → (Eq let162 let133) → (Eq let268 let333) → (Eq let334 let56) → (Eq let272 let126) → (Eq let274 let127) → (Eq let286 let335) → (Eq let102 let336) → (Eq let270 let54) → (Eq let337 xx5f3) → (Eq let278 let338) → (Eq let289 let340) → (Eq let161 let132) → (Eq let342 let341) → (Eq let281 let343) → (Eq let345 let32) → (Eq let282 let346) → (Eq let347 let303) → (Eq let215 let104) → (Eq let348 False) → (Eq let288 let349) → (Eq let350 True) → (Eq let356 let355) → (Eq let358 let357) → (Eq let360 let359) → (Eq let361 let153) → (Eq let362 let73) → (Eq let363 let153) → (Eq let364 let23) → (Eq let365 let111) → (Eq let366 let43) → (Eq let367 let303) → (Eq let368 True) → (Eq let369 let72) → let371 → (Eq let372 let31) → (Eq let373 let72) → (Eq let182 let16) → (Eq let378 let377) → (Eq let379 True) → (Eq let384 let383) → (Eq let385 let359) → (Eq let386 False) → (Eq let371 let387) → (Eq let388 let72) → (Eq let261 True) → (Eq let393 let392) → let291 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 20)
  let let3 := (Int.ofNat 1)
  let let4 := (binrel% HDiv.hDiv let3 let2)
  let let5 := (Neg.neg let3)
  let let6 := (binrel% HMul.hMul let5 xx5f3)
  let let7 := (binrel% GE.ge (binrel% HAdd.hAdd let6 (binrel% HMul.hMul let4 xx5f4)) let1)
  let let8 := (Not let7)
  let let9 := (Int.ofNat 60)
  let let10 := (binrel% GE.ge xx5f4 let9)
  let let11 := (And let10 let8)
  let let12 := (binrel% HMul.hMul let5 xx5f11)
  let let13 := (binrel% HAdd.hAdd let12 (binrel% HMul.hMul let4 xx5f12))
  let let14 := (binrel% GE.ge let13 let1)
  let let15 := (Not let14)
  let let16 := (binrel% GE.ge xx5f12 let9)
  let let17 := (And let16 let15)
  let let18 := (Or let17 let11)
  let let19 := (Not xx5f9)
  let let20 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f2 let6) let1)
  let let21 := (binrel% HMul.hMul let5 xx5f2)
  let let22 := (binrel% GE.ge (binrel% HAdd.hAdd let21 xx5f3) let1)
  let let23 := (binrel% HMul.hMul let5 xx5f4)
  let let24 := (binrel% HAdd.hAdd xx5f2 let23)
  let let25 := (binrel% GE.ge let24 let1)
  let let26 := (binrel% HAdd.hAdd let21 xx5f4)
  let let27 := (binrel% GE.ge let26 let1)
  let let28 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f1 let21) let1)
  let let29 := (binrel% HMul.hMul let5 xx5f1)
  let let30 := (binrel% GE.ge (binrel% HAdd.hAdd let29 xx5f2) let1)
  let let31 := (binrel% GE.ge let21 let5)
  let let32 := (binrel% GE.ge xx5f2 let1)
  let let33 := (Int.ofNat 2)
  let let34 := (binrel% GE.ge xx5f8 let33)
  let let35 := (Neg.neg let33)
  let let36 := (binrel% HMul.hMul let5 xx5f8)
  let let37 := (binrel% GE.ge let36 let35)
  let let38 := (And (And let37 let34) (And xx5f5 (And let32 (And let31 (And (And let30 let28) (And (And let27 let25) (And (And let22 let20) let19)))))))
  let let39 := (binrel% GE.ge xx5f3 let1)
  let let40 := (binrel% GE.ge let6 let1)
  let let41 := (And let40 let39)
  let let42 := (binrel% GE.ge xx5f4 let1)
  let let43 := (binrel% GE.ge let23 let1)
  let let44 := (binrel% GE.ge xx5f1 let1)
  let let45 := (binrel% GE.ge let29 let1)
  let let46 := (Not xx5f5)
  let let47 := (binrel% GE.ge xx5f8 let1)
  let let48 := (binrel% GE.ge let36 let1)
  let let49 := (And (And let48 let47) (And let46 (And xx5f9 (And (And let45 let44) (And (And let43 let42) let41)))))
  let let50 := (Or let49 let38)
  let let51 := (binrel% GE.ge xx5f6 let1)
  let let52 := (Eq xx5f9 xx5f16)
  let let53 := (binrel% HAdd.hAdd xx5f3 xx5f6)
  let let54 := (smtIte xx5f9 xx5f3 let53 Rat)
  let let55 := (binrel% HMul.hMul let5 let54)
  let let56 := (binrel% HAdd.hAdd xx5f11 let55)
  let let57 := (binrel% GE.ge let56 let1)
  let let58 := (binrel% HAdd.hAdd let12 let54)
  let let59 := (binrel% GE.ge let58 let1)
  let let60 := (binrel% HMul.hMul let5 xx5f12)
  let let61 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f4 (binrel% HAdd.hAdd xx5f6 let60)) let1)
  let let62 := (binrel% HMul.hMul let5 xx5f6)
  let let63 := (binrel% HAdd.hAdd let62 xx5f12)
  let let64 := (binrel% GE.ge (binrel% HAdd.hAdd let23 let63) let1)
  let let65 := (binrel% HMul.hMul let5 xx5f10)
  let let66 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f1 (binrel% HAdd.hAdd xx5f6 let65)) let1)
  let let67 := (binrel% HAdd.hAdd let62 xx5f10)
  let let68 := (binrel% GE.ge (binrel% HAdd.hAdd let29 let67) let1)
  let let69 := (binrel% GE.ge (binrel% HAdd.hAdd let29 let62) let5)
  let let70 := (Or xx5f9 let69)
  let let71 := (Rat.ofInt 1)
  let let72 := (Rat.ofInt 0)
  let let73 := (smtIte xx5f5 let72 let71 Rat)
  let let74 := (binrel% GE.ge let73 let3)
  let let75 := (binrel% HMul.hMul let5 let73)
  let let76 := (binrel% GE.ge let75 let5)
  let let77 := (And let76 let74)
  let let78 := (binrel% GE.ge xx5f15 let33)
  let let79 := (binrel% HMul.hMul let5 xx5f15)
  let let80 := (binrel% GE.ge let79 let35)
  let let81 := (And (And let80 let78) (And let77 (And let51 (And let70 (And (And let68 let66) (And (And let64 let61) (And (And let59 let57) let52)))))))
  let let82 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f3 let12) let1)
  let let83 := (binrel% GE.ge (binrel% HAdd.hAdd let6 xx5f11) let1)
  let let84 := (And let83 let82)
  let let85 := (binrel% HAdd.hAdd xx5f4 let60)
  let let86 := (binrel% GE.ge let85 let1)
  let let87 := (binrel% HAdd.hAdd let23 xx5f12)
  let let88 := (binrel% GE.ge let87 let1)
  let let89 := (binrel% GE.ge xx5f10 let1)
  let let90 := (binrel% GE.ge let65 let1)
  let let91 := (And (And let90 let89) (And (And let88 let86) let84))
  let let92 := (Not xx5f16)
  let let93 := (binrel% GE.ge xx5f1 (Int.ofNat 30))
  let let94 := (binrel% GE.ge let73 let1)
  let let95 := (binrel% GE.ge let75 let1)
  let let96 := (And let95 let94)
  let let97 := (binrel% GE.ge xx5f15 let3)
  let let98 := (binrel% GE.ge let79 let5)
  let let99 := (And (And let98 let97) (And let96 (And xx5f9 (And let93 (And let92 let91)))))
  let let100 := (binrel% GE.ge xx5f15 let1)
  let let101 := (binrel% GE.ge let79 let1)
  let let102 := (And (And let101 let100) (And let96 (And let19 (And xx5f16 let91))))
  let let103 := (Or let102 (Or let99 let81))
  let let104 := (binrel% GE.ge xx5f13 let1)
  let let105 := (smtIte let77 let72 let71 Rat)
  let let106 := (binrel% GE.ge let105 let1)
  let let107 := (binrel% HMul.hMul let5 let105)
  let let108 := (binrel% GE.ge let107 let5)
  let let109 := (And let108 (And let106 (And let76 (And let94 (And let104 (And let103 (And let51 (And let50 let18))))))))
  let let110 := (Eq xx5f2 xx5f3)
  let let111 := (Eq xx5f2 xx5f4)
  let let112 := (Eq xx5f1 xx5f2)
  let let113 := (Rat.ofInt 2)
  let let114 := (Eq xx5f8 let113)
  let let115 := (And let114 (And xx5f5 (And let32 (And let31 (And let112 (And let111 (And let110 let19)))))))
  let let116 := (Eq xx5f3 let72)
  let let117 := (Eq xx5f4 let72)
  let let118 := (Eq xx5f1 let72)
  let let119 := (And let118 (And let117 let116))
  let let120 := (And xx5f9 let119)
  let let121 := (Eq xx5f8 let72)
  let let122 := (And let121 (And let46 let120))
  let let123 := (Or let122 let115)
  let let124 := (And let123 let18)
  let let125 := (Eq xx5f11 let54)
  let let126 := (Eq xx5f4 let63)
  let let127 := (Eq xx5f1 let67)
  let let128 := (And let51 (And let70 (And let127 (And let126 (And let125 let52)))))
  let let129 := (Eq let73 let71)
  let let130 := (Eq xx5f15 let113)
  let let131 := (And let130 (And let129 let128))
  let let132 := (Eq xx5f3 xx5f11)
  let let133 := (Eq xx5f4 xx5f12)
  let let134 := (Eq xx5f10 let72)
  let let135 := (And let134 (And let133 let132))
  let let136 := (And xx5f9 (And let93 (And let92 let135)))
  let let137 := (Eq let73 let72)
  let let138 := (Eq xx5f15 let71)
  let let139 := (And let138 (And let137 let136))
  let let140 := (And let19 (And xx5f16 let135))
  let let141 := (Eq xx5f15 let72)
  let let142 := (And let141 (And let137 let140))
  let let143 := (Or let142 (Or let139 let131))
  let let144 := (smtIte let129 let72 let71 Rat)
  let let145 := (binrel% GE.ge let144 let1)
  let let146 := (binrel% HMul.hMul let5 let144)
  let let147 := (binrel% GE.ge let146 let5)
  let let148 := (And let147 (And let145 (And let76 (And let94 (And let104 (And let143 (And let51 let124)))))))
  let let149 := (Neg.neg let71)
  let let150 := (binrel% HMul.hMul let149 xx5f12)
  let let151 := (Neg.neg (Rat.ofInt 59))
  let let152 := (Rat.ofInt 60)
  let let153 := (Neg.neg let152)
  let let154 := (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let72 let71)))
  let let155 := (binrel% GE.ge let24 let72)
  let let156 := (binrel% HAdd.hAdd let23 (binrel% HAdd.hAdd xx5f2 let26))
  let let157 := (binrel% HAdd.hAdd let153 (binrel% HAdd.hAdd let71 let72))
  let let158 := (binrel% GE.ge xx5f2 let72)
  let let159 := (Not let158)
  let let160 := (binrel% LT.lt xx5f2 let72)
  let let161 := (Eq xx5f11 xx5f3)
  let let162 := (Eq xx5f12 xx5f4)
  let let163 := (And let134 (And let162 let161))
  let let164 := (Eq xx5f7 let72)
  let let165 := (And let141 (And let164 (And let19 (And xx5f16 let163))))
  let let166 := (And (And (And (And (And (And let141 let164) let19) xx5f16) let134) let162) let161)
  let let167 := (Eq xx5f0 xx5f9)
  let let168 := (Eq xx5f9 xx5f0)
  let let169 := (binrel% HMul.hMul let71 xx5f2)
  let let170 := (binrel% HMul.hMul let2 xx5f11)
  let let171 := (Rat.ofInt 20)
  let let172 := (binrel% HMul.hMul xx5f11 let171)
  let let173 := (binrel% HMul.hMul let149 let24)
  let let174 := (Not let95)
  let let175 := (Not let174)
  let let176 := (Eq xx5f16 xx5f9)
  let let177 := (Not let104)
  let let178 := (Not let177)
  let let179 := (binrel% GE.ge xx5f4 let152)
  let let180 := (Not let179)
  let let181 := (binrel% LT.lt xx5f4 let152)
  let let182 := (binrel% GE.ge xx5f12 let152)
  let let183 := (Not let182)
  let let184 := (binrel% LT.lt xx5f12 let152)
  let let185 := (Neg.neg let4)
  let let186 := (binrel% HMul.hMul let185 xx5f12)
  let let187 := (binrel% HAdd.hAdd xx5f11 let186)
  let let188 := (binrel% HMul.hMul let149 let187)
  let let189 := (binrel% LT.lt let72 let152)
  let let190 := (binrel% HMul.hMul let149 let85)
  let let191 := (binrel% HMul.hMul let71 xx5f4)
  let let192 := (binrel% LE.le let72 let72)
  let let193 := (binrel% HAdd.hAdd let60 (binrel% HAdd.hAdd let87 (binrel% HAdd.hAdd let26 xx5f2)))
  let let194 := (Not let93)
  let let195 := (Not let194)
  let let196 := (And False False)
  let let197 := (Or let17 (Or let11 False))
  let let198 := (Eq let144 let144)
  let let199 := (binrel% HAdd.hAdd let72 xx5f2)
  let let200 := (Not xx5f0)
  let let201 := (smtIte let200 let199 let72 Rat)
  let let202 := (Eq xx5f3 let201)
  let let203 := (Eq xx5f4 let199)
  let let204 := (Eq xx5f1 let199)
  let let205 := (binrel% LE.le let199 let71)
  let let206 := (Or xx5f0 let205)
  let let207 := (Not let160)
  let let208 := (And let114 (And xx5f5 (And let207 (And let206 (And let204 (And let203 (And let202 let168)))))))
  let let209 := (And (And (And (And (And (And (And let114 xx5f5) let207) let206) let204) let203) let202) let168)
  let let210 := (Eq xx5f0 False)
  let let211 := (binrel% LE.le xx5f2 let71)
  let let212 := (binrel% HMul.hMul let149 let73)
  let let213 := (Not let16)
  let let214 := (Not let213)
  let let215 := (binrel% GE.ge xx5f13 let72)
  let let216 := (Not let215)
  let let217 := (binrel% LT.lt xx5f13 let72)
  let let218 := (binrel% HMul.hMul let2 xx5f3)
  let let219 := (binrel% HMul.hMul xx5f3 let171)
  let let220 := (binrel% HMul.hMul let71 let72)
  let let221 := (binrel% LE.le let73 let72)
  let let222 := (smtIte xx5f0 let72 let199 Rat)
  let let223 := (binrel% HMul.hMul let149 let72)
  let let224 := (binrel% HMul.hMul let71 let71)
  let let225 := (binrel% HMul.hMul let72 let171)
  let let226 := (Eq let73 let73)
  let let227 := (Eq let226 True)
  let let228 := (Rat.ofInt 30)
  let let229 := (binrel% GE.ge xx5f1 let228)
  let let230 := (binrel% LE.le let170 xx5f12)
  let let231 := (And let80 (And let78 (And let76 (And let74 (And let51 (And let70 (And let68 (And let66 (And let64 (And let61 (And let59 (And let57 let52))))))))))))
  let let232 := (binrel% GT.gt let71 let1)
  let let233 := (binrel% GE.ge let73 let71)
  let let234 := (Not let10)
  let let235 := (Not let234)
  let let236 := (binrel% HAdd.hAdd let73 let75)
  let let237 := (And let37 (And let34 (And xx5f5 (And let32 (And let31 (And let30 (And let28 (And let27 (And let25 (And let22 (And let20 let19)))))))))))
  let let238 := (Eq xx5f3 xx5f2)
  let let239 := (binrel% HAdd.hAdd let72 let149)
  let let240 := (Not let221)
  let let241 := (binrel% GT.gt let73 let72)
  let let242 := (binrel% HAdd.hAdd xx5f4 let23)
  let let243 := (Eq let54 let54)
  let let244 := (Eq let243 let243)
  let let245 := (binrel% LE.le let72 let153)
  let let246 := (binrel% LE.le let56 let72)
  let let247 := (binrel% GE.ge let72 let72)
  let let248 := (binrel% LE.le let225 let72)
  let let249 := (Not let248)
  let let250 := (Not let189)
  let let251 := (And let250 let249)
  let let252 := (binrel% LE.le let219 xx5f4)
  let let253 := (Not let252)
  let let254 := (Not let181)
  let let255 := (And let254 let253)
  let let256 := (binrel% LE.le let172 xx5f12)
  let let257 := (Not let256)
  let let258 := (Not let184)
  let let259 := (And let258 let257)
  let let260 := (Or (Or let259 let255) let251)
  let let261 := (binrel% LT.lt let72 let228)
  let let262 := (Not let261)
  let let263 := (Eq xx5f8 let71)
  let let264 := (And (And (And (And (And (And (And let263 let46) xx5f0) let262) let19) let118) let117) let116)
  let let265 := (And (And (And (And (And (And let121 let46) let200) xx5f9) let118) let117) let116)
  let let266 := (Or (Or let265 let264) let209)
  let let267 := (Eq xx5f7 let73)
  let let268 := (binrel% LT.lt xx5f6 let72)
  let let269 := (Not let268)
  let let270 := (smtIte let19 let53 xx5f3 Rat)
  let let271 := (Eq xx5f11 let270)
  let let272 := (Eq xx5f12 (binrel% HAdd.hAdd xx5f4 xx5f6))
  let let273 := (binrel% HAdd.hAdd xx5f1 xx5f6)
  let let274 := (Eq xx5f10 let273)
  let let275 := (binrel% LE.le let273 let71)
  let let276 := (Or xx5f9 let275)
  let let277 := (Eq xx5f7 let71)
  let let278 := (And (And (And (And (And (And (And let130 let277) let269) let276) let274) let272) let271) let176)
  let let279 := (binrel% LT.lt xx5f1 let228)
  let let280 := (Not let279)
  let let281 := (And (And (And (And (And (And (And let138 let164) xx5f9) let280) let92) let134) let162) let161)
  let let282 := (Or (Or let166 let281) let278)
  let let283 := (smtIte let277 let72 let71 Rat)
  let let284 := (Eq xx5f14 let283)
  let let285 := (Not let217)
  let let286 := (binrel% GE.ge xx5f7 let72)
  let let287 := (binrel% LE.le xx5f7 let71)
  let let288 := (binrel% GE.ge xx5f14 let72)
  let let289 := (binrel% LE.le xx5f14 let71)
  let let290 := (And let289 (And let288 (And let287 (And let286 (And let200 (And let285 (And let284 (And let282 (And let269 (And let267 (And let266 let260)))))))))))
  let let291 := (And (And (And (And (And (And (And (And (And (And (And let289 let288) let287) let286) let200) let285) let284) let282) let269) let267) let266) let260)
  let let292 := (And let48 (And let47 (And let46 (And xx5f9 (And let45 (And let44 (And let43 (And let42 let41))))))))
  let let293 := (Eq let243 True)
  let let294 := (Not let51)
  let let295 := (Not let294)
  let let296 := (binrel% GE.ge let85 let72)
  let let297 := (Eq let226 let226)
  let let298 := (Not let229)
  let let299 := (Eq let105 let105)
  let let300 := (Eq let299 True)
  let let301 := (binrel% LE.le let187 let72)
  let let302 := (binrel% LE.le let218 xx5f4)
  let let303 := (Neg.neg (Rat.ofInt 3))
  let let304 := (binrel% GE.ge let72 let303)
  let let305 := (Eq let299 let299)
  let let306 := (Not let301)
  let let307 := (binrel% GT.gt let187 let72)
  let let308 := (Or let259 (Or let255 let251))
  let let309 := (binrel% HAdd.hAdd let6 let54)
  let let310 := (binrel% HAdd.hAdd xx5f3 let55)
  let let311 := (binrel% HMul.hMul let149 let310)
  let let312 := (binrel% HAdd.hAdd let72 let72)
  let let313 := (Not True)
  let let314 := (binrel% LE.le xx5f3 let72)
  let let315 := (smtIte False let72 xx5f2 Rat)
  let let316 := (binrel% LT.lt let149 let1)
  let let317 := (binrel% HMul.hMul let149 let71)
  let let318 := (And let121 (And let46 (And True let120)))
  let let319 := (And let90 (And let89 (And let88 (And let86 let84))))
  let let320 := (And let98 (And let97 (And let95 (And let94 (And xx5f9 (And let93 (And let92 let319)))))))
  let let321 := (binrel% LE.le let72 let151)
  let let322 := (Eq False xx5f9)
  let let323 := (And let147 (And let145 (And let76 (And let94 (And True (And let104 (And True (And let143 (And let51 (And True let124))))))))))
  let let324 := (binrel% HMul.hMul let5 xx5f7)
  let let325 := (binrel% GE.ge let324 let5)
  let let326 := (Not let74)
  let let327 := (Not let326)
  let let328 := (And let19 let119)
  let let329 := (And let263 (And let46 (And xx5f0 (And let262 let328))))
  let let330 := (And let121 (And let46 (And let200 let120)))
  let let331 := (Or let265 (Or let264 let209))
  let let332 := (binrel% GE.ge xx5f6 let72)
  let let333 := (Not let332)
  let let334 := (binrel% HMul.hMul let71 let56)
  let let335 := (binrel% GE.ge xx5f7 let1)
  let let336 := (And let101 (And let100 (And let95 (And let94 (And let19 (And xx5f16 let319))))))
  let let337 := (binrel% HMul.hMul let71 xx5f3)
  let let338 := (And let130 (And let277 (And let269 (And let276 (And let274 (And let272 (And let271 let176)))))))
  let let339 := (binrel% HMul.hMul let5 xx5f14)
  let let340 := (binrel% GE.ge let339 let5)
  let let341 := (Not let233)
  let let342 := (binrel% LT.lt let73 let71)
  let let343 := (And let138 (And let164 (And xx5f9 (And let280 (And let92 let163)))))
  let let344 := (Not let32)
  let let345 := (Not let344)
  let let346 := (Or let166 (Or let281 let278))
  let let347 := (binrel% HMul.hMul let185 let152)
  let let348 := (And let263 (And let46 (And xx5f0 (And False let328))))
  let let349 := (binrel% GE.ge xx5f14 let1)
  let let350 := (Not False)
  let let351 := (smtIte xx5f0 let72 xx5f2 Rat)
  let let352 := (Eq xx5f3 let351)
  let let353 := (Or xx5f0 let31)
  let let354 := (And let114 (And xx5f5 (And let32 (And let353 (And let112 (And let111 (And let352 let167)))))))
  let let355 := (Or let330 let354)
  let let356 := (Or let330 (Or False let354))
  let let357 := (Eq xx5f3 (binrel% HAdd.hAdd let62 let54))
  let let358 := (Eq let54 let53)
  let let359 := (Eq xx5f3 let54)
  let let360 := (Eq let54 xx5f3)
  let let361 := (binrel% HAdd.hAdd let72 let153)
  let let362 := (binrel% HMul.hMul let71 let73)
  let let363 := (binrel% HMul.hMul let149 let152)
  let let364 := (binrel% HMul.hMul let149 xx5f4)
  let let365 := (Eq xx5f4 xx5f2)
  let let366 := (binrel% LE.le xx5f4 let72)
  let let367 := (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let72 (binrel% HAdd.hAdd let303 let312)))
  let let368 := (Eq let14 let14)
  let let369 := (binrel% HAdd.hAdd let149 let71)
  let let370 := (Not let15)
  let let371 := (Eq let370 let14)
  let let372 := (Or False let31)
  let let373 := (binrel% HAdd.hAdd let309 (binrel% HAdd.hAdd let13 (binrel% HAdd.hAdd let186 (binrel% HAdd.hAdd let56 xx5f3))))
  let let374 := (binrel% HAdd.hAdd let223 (binrel% HAdd.hAdd let223 (binrel% HAdd.hAdd let347 (binrel% HAdd.hAdd let220 let220))))
  let let375 := (binrel% HAdd.hAdd let311 (binrel% HAdd.hAdd let188 (binrel% HAdd.hAdd let186 (binrel% HAdd.hAdd let334 let337))))
  let let376 := (binrel% GE.ge let375 let374)
  let let377 := (Not let376)
  let let378 := (binrel% LT.lt let375 let374)
  let let379 := (binrel% LT.lt let185 let1)
  let let380 := (binrel% HAdd.hAdd let220 let223)
  let let381 := (binrel% HAdd.hAdd let362 let212)
  let let382 := (binrel% GE.ge let381 let380)
  let let383 := (Not let382)
  let let384 := (binrel% LT.lt let381 let380)
  let let385 := (Eq let310 let72)
  let let386 := (binrel% LE.le let72 let149)
  let let387 := (Eq let14 let370)
  let let388 := (binrel% HAdd.hAdd let75 let73)
  let let389 := (binrel% HAdd.hAdd let317 let224)
  let let390 := (binrel% HAdd.hAdd let212 let362)
  let let391 := (binrel% GE.ge let390 let389)
  let let392 := (Not let391)
  let let393 := (binrel% LT.lt let390 let389)
  let let394 := (Not let11)
  let let395 := (Not let292)
  let let396 := (Not let320)
  let let397 := (Not let137)
  let let398 := (Or let95 let397)
  let let399 := (Or let175 let397)
  let let400 := (binrel% LT.lt let212 let223)
  let let401 := (And let316 let241)
  let let402 := (Eq let362 let220)
  let let403 := (And let232 let137)
  let let404 := (Or let336 (Or let320 let231))
  let let405 := (Or let292 let237)
  let let406 := (And let108 (And let106 (And let76 (And let94 (And let104 (And let404 (And let51 (And let405 let18))))))))
  let let407 := (Eq let109 let406)
  let let408 := (Eq let18 let18)
  let let409 := (Eq And And)
  let let410 := (Eq let51 let51)
  let let411 := (Eq let52 let52)
  let let412 := (Eq let1 let1)
  let let413 := (Eq let5 let5)
  let let414 := (Eq xx5f11 xx5f11)
  let let415 := (Eq let70 let70)
  let let416 := (Eq let76 let76)
  let let417 := (Eq let92 let92)
  let let418 := (Eq let93 let93)
  let let419 := (Eq xx5f9 xx5f9)
  let let420 := (Eq let94 let94)
  let let421 := (Eq Or Or)
  let let422 := (Eq xx5f16 xx5f16)
  let let423 := (Eq let19 let19)
  let let424 := (Eq let104 let104)
  let let425 := (Eq let106 let106)
  let let426 := (Eq let108 let108)
  let let427 := (And let130 (And let277 let128))
  let let428 := (And let138 (And let164 let136))
  let let429 := (And let141 (And let164 let140))
  let let430 := (Or let429 (Or let428 let427))
  let let431 := (And let340 (And let349 (And let325 (And let335 (And let200 (And let104 (And let284 (And let430 (And let51 (And let267 (And let355 let18)))))))))))
  let let432 := (Eq xx5f3 let315)
  let let433 := (And let114 (And xx5f5 (And let32 (And let372 (And let112 (And let111 (And let432 let322)))))))
  let let434 := (And let121 (And let46 (And let350 let120)))
  let let435 := (Or let434 let433)
  let let436 := (And let147 (And let145 (And let76 (And let94 (And let350 (And let104 (And let198 (And let143 (And let51 (And let226 (And let435 let18)))))))))))
  let let437 := (Eq xx5f3 xx5f3)
  let let438 := (Eq let111 let111)
  let let439 := (Eq let112 let112)
  let let440 := (Eq let32 let32)
  let let441 := (Eq xx5f5 xx5f5)
  let let442 := (Eq let114 let114)
  let let443 := (Eq let116 let116)
  let let444 := (Eq let117 let117)
  let let445 := (Eq let118 let118)
  let let446 := (Eq let46 let46)
  let let447 := (Eq let121 let121)
  let let448 := (Eq let72 let72)
  let let449 := (Eq let71 let71)
  let let450 := (Eq let130 let130)
  let let451 := (Eq let134 let134)
  let let452 := (Eq let138 let138)
  let let453 := (Eq let141 let141)
  let let454 := (smtIte xx5f5 let137 let129 Prop)
  let let455 := (Not let231)
  let let456 := (Not let237)
  let let457 := (Not let59)
  let let458 := (smtIte xx5f9 let359 let357 Prop)
  let let459 := (smtIte xx5f9 let360 let358 Prop)
  let let460 := (Not let43)
  let let461 := (binrel% HAdd.hAdd let220 let363)
  let let462 := (binrel% HAdd.hAdd let191 let364)
  let let463 := (binrel% LE.le let462 let461)
  let let464 := (binrel% LE.le let364 let363)
  let let465 := (And let316 let179)
  let let466 := (Implies let465 let464)
  let let467 := (Eq let10 let179)
  let let468 := (binrel% LE.le let191 let220)
  let let469 := (And let232 let366)
  let let470 := (Not let17)
  let let471 := (Not let359)
  let let472 := (Not let40)
  let let473 := (Or let472 (Or let457 (Or let213 (Or let14 let471))))
  let let474 := (Or let472 (Or let457 (Or let213 (Or let370 let471))))
  let let475 := (Not let385)
  let let476 := (binrel% LE.le let337 let220)
  let let477 := (And let232 let314)
  let let478 := (binrel% LE.le let334 let220)
  let let479 := (And let232 let246)
  let let480 := (binrel% LE.le let186 let347)
  let let481 := (And let379 let182)
  let let482 := (Eq let16 let182)
  let let483 := (binrel% LT.lt let188 let223)
  let let484 := (And let316 let307)
  let let485 := (Eq let311 let223)
  let let486 := (And let316 let385)
  let let487 := (binrel% HAdd.hAdd let220 let317)
  let let488 := (binrel% LE.le let381 let487)
  let let489 := (binrel% LE.le let212 let317)
  let let490 := (And let316 let233)
  let let491 := (binrel% LE.le let362 let220)
  let let492 := (And let232 let221)
  let let493 := (Not let129)
  let let494 := (Or let74 let493)
  let let495 := (Or let327 let493)
  let let496 := (binrel% LT.lt let362 let224)
  let let497 := (And let232 let342)
  let let498 := (Eq let212 let317)
  let let499 := (And let316 let129)
  let let500 := (Not let336)
  let let501 := (Not let25)
  let let502 := (Not let31)
  let let503 := (Or let502 let501)
  let let504 := (binrel% HAdd.hAdd let363 (binrel% HAdd.hAdd let224 let223))
  let let505 := (binrel% HAdd.hAdd let364 (binrel% HAdd.hAdd let169 let173))
  let let506 := (binrel% LE.le let505 let504)
  let let507 := (binrel% LE.le let173 let223)
  let let508 := (And let316 let155)
  let let509 := (Implies let508 let507)
  let let510 := (Eq let25 let155)
  let let511 := (binrel% LE.le let169 let224)
  let let512 := (And let232 let211)
  let let513 := (Implies let512 let511)
  let let514 := (Eq let31 let211)
  let let515 := (Not let86)
  let let516 := (binrel% HAdd.hAdd let363 (binrel% HAdd.hAdd let223 (binrel% HAdd.hAdd let223 let224)))
  let let517 := (binrel% HAdd.hAdd let150 (binrel% HAdd.hAdd let190 (binrel% HAdd.hAdd let173 let169)))
  let let518 := (binrel% LE.le let517 let516)
  let let519 := (binrel% LE.le let190 let223)
  let let520 := (And let316 let296)
  let let521 := (binrel% LE.le let150 let363)
  let let522 := (And let316 let182)
fun lean_h0 : (Eq let148 let109) => -- PREPROCESS
fun lean_r1 : (Eq let150 let60) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let154 let151) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let155 let25) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let156 let72) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq let157 let151) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let160 let159) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let158 let32) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let166 let165) => -- THEORY_REWRITE_BOOL
fun lean_r9 : (Eq let168 let167) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let169 xx5f2) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq let172 let170) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let173 let26) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq let175 let95) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let176 let52) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let178 let104) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let181 let180) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let184 let183) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let188 let13) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq let189 True) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let190 let87) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let191 xx5f4) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let192 True) => -- THEORY_REWRITE_ARITH
fun lean_r23 : (Eq let193 let72) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq let195 let93) => -- THEORY_REWRITE_BOOL
fun lean_r25 : (Eq let196 False) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let197 let18) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let198 True) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq let209 let208) => -- THEORY_REWRITE_BOOL
fun lean_r29 : (Eq let210 let200) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let211 let31) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let212 let75) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq let214 let16) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let217 let216) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq let219 let218) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let220 let72) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq let221 let95) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq let201 let222) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let199 xx5f2) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let223 let72) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let224 let71) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq let225 let72) => -- THEORY_REWRITE_ARITH
fun lean_r42 : let227 => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let229 let93) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let230 let14) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let81 let231) => -- THEORY_REWRITE_BOOL
fun lean_r46 : (Eq let232 True) => -- EVALUATE
fun lean_r47 : (Eq let233 let74) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let235 let10) => -- THEORY_REWRITE_BOOL
fun lean_r49 : (Eq let236 let72) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let38 let237) => -- THEORY_REWRITE_BOOL
fun lean_r51 : (Eq let238 let110) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let239 let149) => -- THEORY_REWRITE_ARITH
fun lean_r53 : (Eq let241 let240) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let242 let72) => -- THEORY_REWRITE_ARITH
fun lean_r55 : let244 => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let245 False) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let246 let59) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let247 True) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let291 let290) => -- THEORY_REWRITE_BOOL
fun lean_r60 : (Eq let179 let10) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let49 let292) => -- THEORY_REWRITE_BOOL
fun lean_r62 : let293 => -- THEORY_REWRITE_ARITH
fun lean_r63 : (Eq let295 let51) => -- THEORY_REWRITE_BOOL
fun lean_r64 : (Eq let296 let86) => -- THEORY_REWRITE_ARITH
fun lean_r65 : let297 => -- THEORY_REWRITE_ARITH
fun lean_r66 : (Eq let279 let298) => -- THEORY_REWRITE_ARITH
fun lean_r67 : let300 => -- THEORY_REWRITE_ARITH
fun lean_r68 : (Eq let301 let14) => -- THEORY_REWRITE_ARITH
fun lean_r69 : (Eq let302 let7) => -- THEORY_REWRITE_ARITH
fun lean_r70 : (Eq let304 True) => -- THEORY_REWRITE_ARITH
fun lean_r71 : let305 => -- THEORY_REWRITE_ARITH
fun lean_r72 : (Eq let307 let306) => -- THEORY_REWRITE_ARITH
fun lean_r73 : (Eq let260 let308) => -- THEORY_REWRITE_BOOL
fun lean_r74 : (Eq let275 let69) => -- THEORY_REWRITE_ARITH
fun lean_r75 : (Eq let311 let309) => -- THEORY_REWRITE_ARITH
fun lean_r76 : (Eq let312 let72) => -- THEORY_REWRITE_ARITH
fun lean_r77 : (Eq let313 False) => -- THEORY_REWRITE_BOOL
fun lean_r78 : (Eq let314 let40) => -- THEORY_REWRITE_ARITH
fun lean_r79 : (Eq let315 xx5f2) => -- THEORY_REWRITE_BOOL
fun lean_r80 : (Eq let316 True) => -- EVALUATE
fun lean_r81 : (Eq let317 let149) => -- THEORY_REWRITE_ARITH
fun lean_r82 : (Eq let318 let122) => -- THEORY_REWRITE_BOOL
fun lean_r83 : (Eq let99 let320) => -- THEORY_REWRITE_BOOL
fun lean_r84 : (Eq let321 False) => -- THEORY_REWRITE_ARITH
fun lean_r85 : (Eq let322 let19) => -- THEORY_REWRITE_BOOL
fun lean_r86 : (Eq let323 let148) => -- THEORY_REWRITE_BOOL
fun lean_r87 : (Eq let287 let325) => -- THEORY_REWRITE_ARITH
fun lean_r88 : (Eq let327 let74) => -- THEORY_REWRITE_BOOL
fun lean_r89 : (Eq let264 let329) => -- THEORY_REWRITE_BOOL
fun lean_r90 : (Eq let265 let330) => -- THEORY_REWRITE_BOOL
fun lean_r91 : (Eq let266 let331) => -- THEORY_REWRITE_BOOL
fun lean_r92 : (Eq let332 let51) => -- THEORY_REWRITE_ARITH
fun lean_r93 : (Eq let162 let133) => -- THEORY_REWRITE_ARITH
fun lean_r94 : (Eq let268 let333) => -- THEORY_REWRITE_ARITH
fun lean_r95 : (Eq let334 let56) => -- THEORY_REWRITE_ARITH
fun lean_r96 : (Eq let272 let126) => -- THEORY_REWRITE_ARITH
fun lean_r97 : (Eq let274 let127) => -- THEORY_REWRITE_ARITH
fun lean_r98 : (Eq let286 let335) => -- THEORY_REWRITE_ARITH
fun lean_r99 : (Eq let102 let336) => -- THEORY_REWRITE_BOOL
fun lean_r100 : (Eq let270 let54) => -- THEORY_REWRITE_BOOL
fun lean_r101 : (Eq let337 xx5f3) => -- THEORY_REWRITE_ARITH
fun lean_r102 : (Eq let278 let338) => -- THEORY_REWRITE_BOOL
fun lean_r103 : (Eq let289 let340) => -- THEORY_REWRITE_ARITH
fun lean_r104 : (Eq let161 let132) => -- THEORY_REWRITE_ARITH
fun lean_r105 : (Eq let342 let341) => -- THEORY_REWRITE_ARITH
fun lean_r106 : (Eq let281 let343) => -- THEORY_REWRITE_BOOL
fun lean_r107 : (Eq let345 let32) => -- THEORY_REWRITE_BOOL
fun lean_r108 : (Eq let282 let346) => -- THEORY_REWRITE_BOOL
fun lean_r109 : (Eq let347 let303) => -- THEORY_REWRITE_ARITH
fun lean_r110 : (Eq let215 let104) => -- THEORY_REWRITE_ARITH
fun lean_r111 : (Eq let348 False) => -- THEORY_REWRITE_BOOL
fun lean_r112 : (Eq let288 let349) => -- THEORY_REWRITE_ARITH
fun lean_r113 : (Eq let350 True) => -- THEORY_REWRITE_BOOL
fun lean_r114 : (Eq let356 let355) => -- THEORY_REWRITE_BOOL
fun lean_r115 : (Eq let358 let357) => -- THEORY_REWRITE_ARITH
fun lean_r116 : (Eq let360 let359) => -- THEORY_REWRITE_ARITH
fun lean_r117 : (Eq let361 let153) => -- THEORY_REWRITE_ARITH
fun lean_r118 : (Eq let362 let73) => -- THEORY_REWRITE_ARITH
fun lean_r119 : (Eq let363 let153) => -- THEORY_REWRITE_ARITH
fun lean_r120 : (Eq let364 let23) => -- THEORY_REWRITE_ARITH
fun lean_r121 : (Eq let365 let111) => -- THEORY_REWRITE_ARITH
fun lean_r122 : (Eq let366 let43) => -- THEORY_REWRITE_ARITH
fun lean_r123 : (Eq let367 let303) => -- THEORY_REWRITE_ARITH
fun lean_r124 : (Eq let368 True) => -- THEORY_REWRITE_BOOL
fun lean_r125 : (Eq let369 let72) => -- THEORY_REWRITE_ARITH
fun lean_r126 : let371 => -- THEORY_REWRITE_BOOL
fun lean_r127 : (Eq let372 let31) => -- THEORY_REWRITE_BOOL
fun lean_r128 : (Eq let373 let72) => -- THEORY_REWRITE_ARITH
fun lean_r129 : (Eq let182 let16) => -- THEORY_REWRITE_ARITH
fun lean_r130 : (Eq let378 let377) => -- THEORY_REWRITE_ARITH
fun lean_r131 : (Eq let379 True) => -- EVALUATE
fun lean_r132 : (Eq let384 let383) => -- THEORY_REWRITE_ARITH
fun lean_r133 : (Eq let385 let359) => -- THEORY_REWRITE_ARITH
fun lean_r134 : (Eq let386 False) => -- THEORY_REWRITE_ARITH
fun lean_r135 : (Eq let371 let387) => -- THEORY_REWRITE_BOOL
fun lean_r136 : (Eq let388 let72) => -- THEORY_REWRITE_ARITH
fun lean_r137 : (Eq let261 True) => -- THEORY_REWRITE_ARITH
fun lean_r138 : (Eq let393 let392) => -- THEORY_REWRITE_ARITH
fun lean_a139 : let291 => by
have lean_s0 : let409 := by timed rfl
let lean_s1 := by timed congr lean_s0 lean_r103
let lean_s2 := by timed congr lean_s0 lean_r112
let lean_s3 := by timed congr lean_s0 lean_r87
let lean_s4 := by timed congr lean_s0 lean_r98
have lean_s5 : (Eq let200 let200) := by timed rfl
let lean_s6 := by timed congr lean_s0 lean_s5
have lean_s7 : (Eq let216 let177) := by timed flipCongrArg lean_r110 [Not]
have lean_s8 : (Eq let217 let177) := by timed Eq.trans lean_r33 lean_s7
have lean_s9 : (Eq let285 let178) := by timed flipCongrArg lean_s8 [Not]
have lean_s10 : (Eq let285 let104) := by timed Eq.trans lean_s9 lean_r15
let lean_s11 := by timed congr lean_s0 lean_s10
have lean_s12 : (Eq let284 let284) := by timed rfl
let lean_s13 := by timed congr lean_s0 lean_s12
have lean_s14 : let421 := by timed rfl
have lean_s15 : let409 := by timed rfl
have lean_s16 : let453 := by timed rfl
let lean_s17 := by timed congr lean_s15 lean_s16
have lean_s18 : (Eq let164 let164) := by timed rfl
let lean_s19 := by timed congr lean_s15 lean_s18
have lean_s20 : let423 := by timed rfl
let lean_s21 := by timed congr lean_s15 lean_s20
have lean_s22 : let422 := by timed rfl
let lean_s23 := by timed congr lean_s15 lean_s22
have lean_s24 : let451 := by timed rfl
let lean_s25 := by timed congr lean_s15 lean_s24
let lean_s26 := by timed congr lean_s15 lean_r93
let lean_s27 := by timed congr lean_s26 lean_r104
let lean_s28 := by timed congr lean_s25 lean_s27
let lean_s29 := by timed congr lean_s23 lean_s28
let lean_s30 := by timed congr lean_s21 lean_s29
let lean_s31 := by timed congr lean_s19 lean_s30
have lean_s32 : (Eq let165 let429) := by timed congr lean_s17 lean_s31
have lean_s33 : (Eq let166 let429) := by timed Eq.trans lean_r8 lean_s32
let lean_s34 := by timed congr lean_s14 lean_s33
have lean_s35 : let409 := by timed rfl
have lean_s36 : let452 := by timed rfl
let lean_s37 := by timed congr lean_s35 lean_s36
let lean_s38 := by timed congr lean_s35 lean_s18
have lean_s39 : let419 := by timed rfl
let lean_s40 := by timed congr lean_s35 lean_s39
have lean_s41 : (Eq let298 let194) := by timed flipCongrArg lean_r43 [Not]
have lean_s42 : (Eq let279 let194) := by timed Eq.trans lean_r66 lean_s41
have lean_s43 : (Eq let280 let195) := by timed flipCongrArg lean_s42 [Not]
have lean_s44 : (Eq let280 let93) := by timed Eq.trans lean_s43 lean_r24
let lean_s45 := by timed congr lean_s35 lean_s44
have lean_s46 : let417 := by timed rfl
let lean_s47 := by timed congr lean_s35 lean_s46
let lean_s48 := by timed congr lean_s35 lean_s24
let lean_s49 := by timed congr lean_s35 lean_r93
let lean_s50 := by timed congr lean_s49 lean_r104
let lean_s51 := by timed congr lean_s48 lean_s50
let lean_s52 := by timed congr lean_s47 lean_s51
let lean_s53 := by timed congr lean_s45 lean_s52
let lean_s54 := by timed congr lean_s40 lean_s53
let lean_s55 := by timed congr lean_s38 lean_s54
have lean_s56 : (Eq let343 let428) := by timed congr lean_s37 lean_s55
have lean_s57 : (Eq let281 let428) := by timed Eq.trans lean_r106 lean_s56
let lean_s58 := by timed congr lean_s14 lean_s57
have lean_s59 : let409 := by timed rfl
have lean_s60 : let450 := by timed rfl
let lean_s61 := by timed congr lean_s59 lean_s60
have lean_s62 : (Eq let277 let277) := by timed rfl
let lean_s63 := by timed congr lean_s59 lean_s62
have lean_s64 : (Eq let333 let294) := by timed flipCongrArg lean_r92 [Not]
have lean_s65 : (Eq let268 let294) := by timed Eq.trans lean_r94 lean_s64
have lean_s66 : (Eq let269 let295) := by timed flipCongrArg lean_s65 [Not]
have lean_s67 : (Eq let269 let51) := by timed Eq.trans lean_s66 lean_r63
let lean_s68 := by timed congr lean_s59 lean_s67
let lean_s69 := by timed flipCongrArg lean_s39 [Or]
have lean_s70 : (Eq let276 let70) := by timed congr lean_s69 lean_r74
let lean_s71 := by timed congr lean_s59 lean_s70
let lean_s72 := by timed congr lean_s59 lean_r97
let lean_s73 := by timed congr lean_s59 lean_r96
have lean_s74 : let414 := by timed rfl
let lean_s75 := by timed flipCongrArg lean_s74 [Eq]
have lean_s76 : (Eq let271 let125) := by timed congr lean_s75 lean_r100
let lean_s77 := by timed congr lean_s59 lean_s76
let lean_s78 := by timed congr lean_s77 lean_r14
let lean_s79 := by timed congr lean_s73 lean_s78
let lean_s80 := by timed congr lean_s72 lean_s79
let lean_s81 := by timed congr lean_s71 lean_s80
let lean_s82 := by timed congr lean_s68 lean_s81
let lean_s83 := by timed congr lean_s63 lean_s82
have lean_s84 : (Eq let338 let427) := by timed congr lean_s61 lean_s83
have lean_s85 : (Eq let278 let427) := by timed Eq.trans lean_r102 lean_s84
let lean_s86 := by timed congr lean_s58 lean_s85
have lean_s87 : (Eq let346 let430) := by timed congr lean_s34 lean_s86
have lean_s88 : (Eq let282 let430) := by timed Eq.trans lean_r108 lean_s87
let lean_s89 := by timed congr lean_s0 lean_s88
let lean_s90 := by timed congr lean_s0 lean_s67
have lean_s91 : (Eq let267 let267) := by timed rfl
let lean_s92 := by timed congr lean_s0 lean_s91
have lean_s93 : let421 := by timed rfl
let lean_s94 := by timed congr lean_s93 lean_r90
have lean_s95 : let409 := by timed rfl
have lean_s96 : (Eq let263 let263) := by timed rfl
let lean_s97 := by timed congr lean_s95 lean_s96
have lean_s98 : let446 := by timed rfl
let lean_s99 := by timed congr lean_s95 lean_s98
have lean_s100 : (Eq xx5f0 xx5f0) := by timed rfl
let lean_s101 := by timed congr lean_s95 lean_s100
have lean_s102 : (Eq let262 let313) := by timed flipCongrArg lean_r137 [Not]
have lean_s103 : (Eq let262 False) := by timed Eq.trans lean_s102 lean_r77
let lean_s104 := by timed congr lean_s95 lean_s103
let lean_s105 := by timed congr lean_s95 lean_s20
have lean_s106 : let445 := by timed rfl
let lean_s107 := by timed congr lean_s95 lean_s106
have lean_s108 : let444 := by timed rfl
let lean_s109 := by timed congr lean_s95 lean_s108
have lean_s110 : let443 := by timed rfl
let lean_s111 := by timed congr lean_s109 lean_s110
let lean_s112 := by timed congr lean_s107 lean_s111
let lean_s113 := by timed congr lean_s105 lean_s112
let lean_s114 := by timed congr lean_s104 lean_s113
let lean_s115 := by timed congr lean_s101 lean_s114
let lean_s116 := by timed congr lean_s99 lean_s115
have lean_s117 : (Eq let329 let348) := by timed congr lean_s97 lean_s116
have lean_s118 : (Eq let329 False) := by timed Eq.trans lean_s117 lean_r111
have lean_s119 : (Eq let264 False) := by timed Eq.trans lean_r89 lean_s118
let lean_s120 := by timed congr lean_s93 lean_s119
have lean_s121 : let409 := by timed rfl
have lean_s122 : let442 := by timed rfl
let lean_s123 := by timed congr lean_s121 lean_s122
have lean_s124 : let441 := by timed rfl
let lean_s125 := by timed congr lean_s121 lean_s124
have lean_s126 : (Eq let159 let344) := by timed flipCongrArg lean_r7 [Not]
have lean_s127 : (Eq let160 let344) := by timed Eq.trans lean_r6 lean_s126
have lean_s128 : (Eq let207 let345) := by timed flipCongrArg lean_s127 [Not]
have lean_s129 : (Eq let207 let32) := by timed Eq.trans lean_s128 lean_r107
let lean_s130 := by timed congr lean_s121 lean_s129
let lean_s131 := by timed flipCongrArg lean_s100 [Or]
let lean_s132 := by timed flipCongrArg lean_r38 [LE.le]
have lean_s133 : let449 := by timed rfl
have lean_s134 : (Eq let205 let211) := by timed congr lean_s132 lean_s133
have lean_s135 : (Eq let205 let31) := by timed Eq.trans lean_s134 lean_r30
have lean_s136 : (Eq let206 let353) := by timed congr lean_s131 lean_s135
let lean_s137 := by timed congr lean_s121 lean_s136
have lean_s138 : (Eq xx5f1 xx5f1) := by timed rfl
let lean_s139 := by timed flipCongrArg lean_s138 [Eq]
have lean_s140 : (Eq let204 let112) := by timed congr lean_s139 lean_r38
let lean_s141 := by timed congr lean_s121 lean_s140
have lean_s142 : (Eq xx5f4 xx5f4) := by timed rfl
let lean_s143 := by timed flipCongrArg lean_s142 [Eq]
have lean_s144 : (Eq let203 let365) := by timed congr lean_s143 lean_r38
have lean_s145 : (Eq let203 let111) := by timed Eq.trans lean_s144 lean_r121
let lean_s146 := by timed congr lean_s121 lean_s145
have lean_s147 : let437 := by timed rfl
let lean_s148 := by timed flipCongrArg lean_s147 [Eq]
have lean_s149 : let448 := by timed rfl
have lean_s150 : (Eq let222 let351) := by timed congrIte lean_s100 lean_s149 lean_r38
have lean_s151 : (Eq let201 let351) := by timed Eq.trans lean_r37 lean_s150
have lean_s152 : (Eq let202 let352) := by timed congr lean_s148 lean_s151
let lean_s153 := by timed congr lean_s121 lean_s152
let lean_s154 := by timed congr lean_s153 lean_r9
let lean_s155 := by timed congr lean_s146 lean_s154
let lean_s156 := by timed congr lean_s141 lean_s155
let lean_s157 := by timed congr lean_s137 lean_s156
let lean_s158 := by timed congr lean_s130 lean_s157
let lean_s159 := by timed congr lean_s125 lean_s158
have lean_s160 : (Eq let208 let354) := by timed congr lean_s123 lean_s159
have lean_s161 : (Eq let209 let354) := by timed Eq.trans lean_r28 lean_s160
let lean_s162 := by timed congr lean_s120 lean_s161
have lean_s163 : (Eq let331 let356) := by timed congr lean_s94 lean_s162
have lean_s164 : (Eq let331 let355) := by timed Eq.trans lean_s163 lean_r114
have lean_s165 : (Eq let266 let355) := by timed Eq.trans lean_r91 lean_s164
let lean_s166 := by timed congr lean_s0 lean_s165
have lean_s167 : let421 := by timed rfl
have lean_s168 : (Eq let183 let213) := by timed flipCongrArg lean_r129 [Not]
have lean_s169 : (Eq let184 let213) := by timed Eq.trans lean_r17 lean_s168
have lean_s170 : (Eq let258 let214) := by timed flipCongrArg lean_s169 [Not]
have lean_s171 : (Eq let258 let16) := by timed Eq.trans lean_s170 lean_r32
let lean_s172 := by timed flipCongrArg lean_s171 [And]
let lean_s173 := by timed flipCongrArg lean_r11 [LE.le]
have lean_s174 : (Eq xx5f12 xx5f12) := by timed rfl
have lean_s175 : (Eq let256 let230) := by timed congr lean_s173 lean_s174
have lean_s176 : (Eq let256 let14) := by timed Eq.trans lean_s175 lean_r44
have lean_s177 : (Eq let257 let15) := by timed flipCongrArg lean_s176 [Not]
have lean_s178 : (Eq let259 let17) := by timed congr lean_s172 lean_s177
let lean_s179 := by timed congr lean_s167 lean_s178
have lean_s180 : (Eq let180 let234) := by timed flipCongrArg lean_r60 [Not]
have lean_s181 : (Eq let181 let234) := by timed Eq.trans lean_r16 lean_s180
have lean_s182 : (Eq let254 let235) := by timed flipCongrArg lean_s181 [Not]
have lean_s183 : (Eq let254 let10) := by timed Eq.trans lean_s182 lean_r48
let lean_s184 := by timed flipCongrArg lean_s183 [And]
let lean_s185 := by timed flipCongrArg lean_r34 [LE.le]
have lean_s186 : (Eq let252 let302) := by timed congr lean_s185 lean_s142
have lean_s187 : (Eq let252 let7) := by timed Eq.trans lean_s186 lean_r69
have lean_s188 : (Eq let253 let8) := by timed flipCongrArg lean_s187 [Not]
have lean_s189 : (Eq let255 let11) := by timed congr lean_s184 lean_s188
let lean_s190 := by timed congr lean_s167 lean_s189
have lean_s191 : (Eq let250 let313) := by timed flipCongrArg lean_r19 [Not]
have lean_s192 : (Eq let250 False) := by timed Eq.trans lean_s191 lean_r77
let lean_s193 := by timed flipCongrArg lean_s192 [And]
let lean_s194 := by timed flipCongrArg lean_r41 [LE.le]
have lean_s195 : (Eq let248 let192) := by timed congr lean_s194 lean_s149
have lean_s196 : (Eq let248 True) := by timed Eq.trans lean_s195 lean_r22
have lean_s197 : (Eq let249 let313) := by timed flipCongrArg lean_s196 [Not]
have lean_s198 : (Eq let249 False) := by timed Eq.trans lean_s197 lean_r77
have lean_s199 : (Eq let251 let196) := by timed congr lean_s193 lean_s198
have lean_s200 : (Eq let251 False) := by timed Eq.trans lean_s199 lean_r25
let lean_s201 := by timed congr lean_s190 lean_s200
have lean_s202 : (Eq let308 let197) := by timed congr lean_s179 lean_s201
have lean_s203 : (Eq let308 let18) := by timed Eq.trans lean_s202 lean_r26
have lean_s204 : (Eq let260 let18) := by timed Eq.trans lean_r73 lean_s203
let lean_s205 := by timed congr lean_s166 lean_s204
let lean_s206 := by timed congr lean_s92 lean_s205
let lean_s207 := by timed congr lean_s90 lean_s206
let lean_s208 := by timed congr lean_s89 lean_s207
let lean_s209 := by timed congr lean_s13 lean_s208
let lean_s210 := by timed congr lean_s11 lean_s209
let lean_s211 := by timed congr lean_s6 lean_s210
let lean_s212 := by timed congr lean_s4 lean_s211
let lean_s213 := by timed congr lean_s3 lean_s212
let lean_s214 := by timed congr lean_s2 lean_s213
have lean_s215 : (Eq let290 let431) := by timed congr lean_s1 lean_s214
have lean_s216 : (Eq let291 let431) := by timed Eq.trans lean_r59 lean_s215
have lean_s217 : let409 := by timed rfl
have lean_s218 : let413 := by timed rfl
let lean_s219 := by timed flipCongrArg lean_s218 [HMul.hMul]
have lean_s220 : let431 := by timed eqResolve lean_a139 lean_s216
have lean_s221 : let200 := by andElim lean_s220, 4
have lean_s222 : (Eq let200 let210) := by timed Eq.symm lean_r29
have lean_s223 : let210 := by timed eqResolve lean_s221 lean_s222
have lean_s224 : let431 := by timed eqResolve lean_a139 lean_s216
have lean_s225 : let267 := by andElim lean_s224, 9
have lean_s226 : let431 := by timed eqResolve lean_a139 lean_s216
have lean_s227 : let284 := by andElim lean_s226, 6
let lean_s228 := by timed And.intro lean_s225 lean_s227
have lean_s229 : (And let210 (And let267 let284)) := by timed And.intro lean_s223 lean_s228
have lean_s230 : let284 := by andElim lean_s229, 2
have lean_s231 : let267 := by andElim lean_s229, 1
let lean_s232 := by timed flipCongrArg lean_s231 [Eq]
have lean_s233 : let449 := by timed rfl
have lean_s234 : (Eq let277 let129) := by timed congr lean_s232 lean_s233
have lean_s235 : let448 := by timed rfl
have lean_s236 : (Eq let283 let144) := by timed congrIte lean_s234 lean_s235 lean_s233
have lean_s237 : (Eq xx5f14 let144) := by timed Eq.trans lean_s230 lean_s236
have lean_s238 : (Eq let339 let146) := by timed congr lean_s219 lean_s237
let lean_s239 := by timed flipCongrArg lean_s238 [GE.ge]
have lean_s240 : (Eq let340 let147) := by timed congr lean_s239 lean_s218
let lean_s241 := by timed congr lean_s217 lean_s240
let lean_s242 := by timed flipCongrArg lean_s237 [GE.ge]
have lean_s243 : let412 := by timed rfl
have lean_s244 : (Eq let349 let145) := by timed congr lean_s242 lean_s243
let lean_s245 := by timed congr lean_s217 lean_s244
let lean_s246 := by timed flipCongrArg lean_s218 [HMul.hMul]
have lean_s247 : (Eq let324 let75) := by timed congr lean_s246 lean_s231
let lean_s248 := by timed flipCongrArg lean_s247 [GE.ge]
have lean_s249 : (Eq let325 let76) := by timed congr lean_s248 lean_s218
let lean_s250 := by timed congr lean_s217 lean_s249
let lean_s251 := by timed flipCongrArg lean_s231 [GE.ge]
have lean_s252 : (Eq let335 let94) := by timed congr lean_s251 lean_s243
let lean_s253 := by timed congr lean_s217 lean_s252
have lean_s254 : let210 := by andElim lean_s229, 0
have lean_s255 : (Eq let200 let350) := by timed flipCongrArg lean_s254 [Not]
let lean_s256 := by timed congr lean_s217 lean_s255
have lean_s257 : let424 := by timed rfl
let lean_s258 := by timed congr lean_s217 lean_s257
let lean_s259 := by timed flipCongrArg lean_s237 [Eq]
have lean_s260 : (Eq let284 let198) := by timed congr lean_s259 lean_s236
let lean_s261 := by timed congr lean_s217 lean_s260
have lean_s262 : let421 := by timed rfl
have lean_s263 : let409 := by timed rfl
have lean_s264 : let453 := by timed rfl
let lean_s265 := by timed congr lean_s263 lean_s264
let lean_s266 := by timed flipCongrArg lean_s231 [Eq]
have lean_s267 : (Eq let164 let137) := by timed congr lean_s266 lean_s235
let lean_s268 := by timed congr lean_s263 lean_s267
have lean_s269 : let423 := by timed rfl
let lean_s270 := by timed congr lean_s263 lean_s269
have lean_s271 : let422 := by timed rfl
let lean_s272 := by timed congr lean_s263 lean_s271
have lean_s273 : let451 := by timed rfl
let lean_s274 := by timed congr lean_s263 lean_s273
have lean_s275 : (Eq let133 let133) := by timed rfl
let lean_s276 := by timed congr lean_s263 lean_s275
have lean_s277 : (Eq let132 let132) := by timed rfl
let lean_s278 := by timed congr lean_s276 lean_s277
let lean_s279 := by timed congr lean_s274 lean_s278
let lean_s280 := by timed congr lean_s272 lean_s279
let lean_s281 := by timed congr lean_s270 lean_s280
let lean_s282 := by timed congr lean_s268 lean_s281
have lean_s283 : (Eq let429 let142) := by timed congr lean_s265 lean_s282
let lean_s284 := by timed congr lean_s262 lean_s283
have lean_s285 : let409 := by timed rfl
have lean_s286 : let452 := by timed rfl
let lean_s287 := by timed congr lean_s285 lean_s286
let lean_s288 := by timed congr lean_s285 lean_s267
have lean_s289 : let419 := by timed rfl
let lean_s290 := by timed congr lean_s285 lean_s289
have lean_s291 : let418 := by timed rfl
let lean_s292 := by timed congr lean_s285 lean_s291
have lean_s293 : let417 := by timed rfl
let lean_s294 := by timed congr lean_s285 lean_s293
let lean_s295 := by timed congr lean_s285 lean_s273
let lean_s296 := by timed congr lean_s285 lean_s275
let lean_s297 := by timed congr lean_s296 lean_s277
let lean_s298 := by timed congr lean_s295 lean_s297
let lean_s299 := by timed congr lean_s294 lean_s298
let lean_s300 := by timed congr lean_s292 lean_s299
let lean_s301 := by timed congr lean_s290 lean_s300
let lean_s302 := by timed congr lean_s288 lean_s301
have lean_s303 : (Eq let428 let139) := by timed congr lean_s287 lean_s302
let lean_s304 := by timed congr lean_s262 lean_s303
have lean_s305 : let409 := by timed rfl
have lean_s306 : let450 := by timed rfl
let lean_s307 := by timed congr lean_s305 lean_s306
let lean_s308 := by timed congr lean_s305 lean_s234
have lean_s309 : let410 := by timed rfl
let lean_s310 := by timed congr lean_s305 lean_s309
have lean_s311 : let415 := by timed rfl
let lean_s312 := by timed congr lean_s305 lean_s311
have lean_s313 : (Eq let127 let127) := by timed rfl
let lean_s314 := by timed congr lean_s305 lean_s313
have lean_s315 : (Eq let126 let126) := by timed rfl
let lean_s316 := by timed congr lean_s305 lean_s315
have lean_s317 : (Eq let125 let125) := by timed rfl
let lean_s318 := by timed congr lean_s305 lean_s317
have lean_s319 : let411 := by timed rfl
let lean_s320 := by timed congr lean_s318 lean_s319
let lean_s321 := by timed congr lean_s316 lean_s320
let lean_s322 := by timed congr lean_s314 lean_s321
let lean_s323 := by timed congr lean_s312 lean_s322
let lean_s324 := by timed congr lean_s310 lean_s323
let lean_s325 := by timed congr lean_s308 lean_s324
have lean_s326 : (Eq let427 let131) := by timed congr lean_s307 lean_s325
let lean_s327 := by timed congr lean_s304 lean_s326
have lean_s328 : (Eq let430 let143) := by timed congr lean_s284 lean_s327
let lean_s329 := by timed congr lean_s217 lean_s328
let lean_s330 := by timed congr lean_s217 lean_s309
let lean_s331 := by timed flipCongrArg lean_s231 [Eq]
have lean_s332 : let226 := by timed rfl
have lean_s333 : (Eq let267 let226) := by timed congr lean_s331 lean_s332
let lean_s334 := by timed congr lean_s217 lean_s333
have lean_s335 : let409 := by timed rfl
have lean_s336 : let447 := by timed rfl
let lean_s337 := by timed congr lean_s335 lean_s336
have lean_s338 : let446 := by timed rfl
let lean_s339 := by timed congr lean_s335 lean_s338
let lean_s340 := by timed congr lean_s335 lean_s255
let lean_s341 := by timed congr lean_s335 lean_s289
have lean_s342 : let445 := by timed rfl
let lean_s343 := by timed congr lean_s335 lean_s342
have lean_s344 : let444 := by timed rfl
let lean_s345 := by timed congr lean_s335 lean_s344
have lean_s346 : let443 := by timed rfl
let lean_s347 := by timed congr lean_s345 lean_s346
let lean_s348 := by timed congr lean_s343 lean_s347
let lean_s349 := by timed congr lean_s341 lean_s348
let lean_s350 := by timed congr lean_s340 lean_s349
let lean_s351 := by timed congr lean_s339 lean_s350
have lean_s352 : (Eq let330 let434) := by timed congr lean_s337 lean_s351
let lean_s353 := by timed flipCongrArg lean_s352 [Or]
have lean_s354 : let409 := by timed rfl
have lean_s355 : let442 := by timed rfl
let lean_s356 := by timed congr lean_s354 lean_s355
have lean_s357 : let441 := by timed rfl
let lean_s358 := by timed congr lean_s354 lean_s357
have lean_s359 : let440 := by timed rfl
let lean_s360 := by timed congr lean_s354 lean_s359
let lean_s361 := by timed flipCongrArg lean_s254 [Or]
have lean_s362 : (Eq let31 let31) := by timed rfl
have lean_s363 : (Eq let353 let372) := by timed congr lean_s361 lean_s362
let lean_s364 := by timed congr lean_s354 lean_s363
have lean_s365 : let439 := by timed rfl
let lean_s366 := by timed congr lean_s354 lean_s365
have lean_s367 : let438 := by timed rfl
let lean_s368 := by timed congr lean_s354 lean_s367
have lean_s369 : let437 := by timed rfl
let lean_s370 := by timed flipCongrArg lean_s369 [Eq]
have lean_s371 : (Eq xx5f2 xx5f2) := by timed rfl
have lean_s372 : (Eq let351 let315) := by timed congrIte lean_s254 lean_s235 lean_s371
have lean_s373 : (Eq let352 let432) := by timed congr lean_s370 lean_s372
let lean_s374 := by timed congr lean_s354 lean_s373
let lean_s375 := by timed flipCongrArg lean_s254 [Eq]
have lean_s376 : (Eq let167 let322) := by timed congr lean_s375 lean_s289
let lean_s377 := by timed congr lean_s374 lean_s376
let lean_s378 := by timed congr lean_s368 lean_s377
let lean_s379 := by timed congr lean_s366 lean_s378
let lean_s380 := by timed congr lean_s364 lean_s379
let lean_s381 := by timed congr lean_s360 lean_s380
let lean_s382 := by timed congr lean_s358 lean_s381
have lean_s383 : (Eq let354 let433) := by timed congr lean_s356 lean_s382
have lean_s384 : (Eq let355 let435) := by timed congr lean_s353 lean_s383
let lean_s385 := by timed congr lean_s217 lean_s384
have lean_s386 : let408 := by timed rfl
let lean_s387 := by timed congr lean_s385 lean_s386
let lean_s388 := by timed congr lean_s334 lean_s387
let lean_s389 := by timed congr lean_s330 lean_s388
let lean_s390 := by timed congr lean_s329 lean_s389
let lean_s391 := by timed congr lean_s261 lean_s390
let lean_s392 := by timed congr lean_s258 lean_s391
let lean_s393 := by timed congr lean_s256 lean_s392
let lean_s394 := by timed congr lean_s253 lean_s393
let lean_s395 := by timed congr lean_s250 lean_s394
let lean_s396 := by timed congr lean_s245 lean_s395
have lean_s397 : (Eq let431 let436) := by timed congr lean_s241 lean_s396
have lean_s398 : let409 := by timed rfl
have lean_s399 : (Eq let147 let147) := by timed rfl
let lean_s400 := by timed congr lean_s398 lean_s399
have lean_s401 : (Eq let145 let145) := by timed rfl
let lean_s402 := by timed congr lean_s398 lean_s401
have lean_s403 : let416 := by timed rfl
let lean_s404 := by timed congr lean_s398 lean_s403
have lean_s405 : let420 := by timed rfl
let lean_s406 := by timed congr lean_s398 lean_s405
let lean_s407 := by timed congr lean_s398 lean_r113
have lean_s408 : let424 := by timed rfl
let lean_s409 := by timed congr lean_s398 lean_s408
let lean_s410 := by timed congr lean_s398 lean_r27
have lean_s411 : (Eq let143 let143) := by timed rfl
let lean_s412 := by timed congr lean_s398 lean_s411
have lean_s413 : let410 := by timed rfl
let lean_s414 := by timed congr lean_s398 lean_s413
let lean_s415 := by timed congr lean_s398 lean_r42
have lean_s416 : let409 := by timed rfl
have lean_s417 : let447 := by timed rfl
let lean_s418 := by timed congr lean_s416 lean_s417
let lean_s419 := by timed congr lean_s416 lean_s98
let lean_s420 := by timed congr lean_s416 lean_r113
let lean_s421 := by timed congr lean_s416 lean_s39
let lean_s422 := by timed congr lean_s416 lean_s106
let lean_s423 := by timed congr lean_s416 lean_s108
let lean_s424 := by timed congr lean_s423 lean_s110
let lean_s425 := by timed congr lean_s422 lean_s424
let lean_s426 := by timed congr lean_s421 lean_s425
let lean_s427 := by timed congr lean_s420 lean_s426
let lean_s428 := by timed congr lean_s419 lean_s427
have lean_s429 : (Eq let434 let318) := by timed congr lean_s418 lean_s428
have lean_s430 : (Eq let434 let122) := by timed Eq.trans lean_s429 lean_r82
let lean_s431 := by timed flipCongrArg lean_s430 [Or]
have lean_s432 : let409 := by timed rfl
let lean_s433 := by timed congr lean_s432 lean_s122
let lean_s434 := by timed congr lean_s432 lean_s124
have lean_s435 : let440 := by timed rfl
let lean_s436 := by timed congr lean_s432 lean_s435
let lean_s437 := by timed congr lean_s432 lean_r127
have lean_s438 : let439 := by timed rfl
let lean_s439 := by timed congr lean_s432 lean_s438
have lean_s440 : let438 := by timed rfl
let lean_s441 := by timed congr lean_s432 lean_s440
let lean_s442 := by timed flipCongrArg lean_s147 [Eq]
have lean_s443 : (Eq let432 let238) := by timed congr lean_s442 lean_r79
have lean_s444 : (Eq let432 let110) := by timed Eq.trans lean_s443 lean_r51
let lean_s445 := by timed congr lean_s432 lean_s444
let lean_s446 := by timed congr lean_s445 lean_r85
let lean_s447 := by timed congr lean_s441 lean_s446
let lean_s448 := by timed congr lean_s439 lean_s447
let lean_s449 := by timed congr lean_s437 lean_s448
let lean_s450 := by timed congr lean_s436 lean_s449
let lean_s451 := by timed congr lean_s434 lean_s450
have lean_s452 : (Eq let433 let115) := by timed congr lean_s433 lean_s451
have lean_s453 : (Eq let435 let123) := by timed congr lean_s431 lean_s452
let lean_s454 := by timed congr lean_s398 lean_s453
have lean_s455 : let408 := by timed rfl
let lean_s456 := by timed congr lean_s454 lean_s455
let lean_s457 := by timed congr lean_s415 lean_s456
let lean_s458 := by timed congr lean_s414 lean_s457
let lean_s459 := by timed congr lean_s412 lean_s458
let lean_s460 := by timed congr lean_s410 lean_s459
let lean_s461 := by timed congr lean_s409 lean_s460
let lean_s462 := by timed congr lean_s407 lean_s461
let lean_s463 := by timed congr lean_s406 lean_s462
let lean_s464 := by timed congr lean_s404 lean_s463
let lean_s465 := by timed congr lean_s402 lean_s464
have lean_s466 : (Eq let436 let323) := by timed congr lean_s400 lean_s465
have lean_s467 : (Eq let436 let148) := by timed Eq.trans lean_s466 lean_r86
have lean_s468 : (Eq let431 let148) := by timed Eq.trans lean_s397 lean_s467
let lean_s469 := by timed Eq.trans lean_s216 lean_s468
let lean_s470 := by timed Eq.trans lean_s469 lean_h0
have lean_s471 : let409 := by timed rfl
have lean_s472 : let426 := by timed rfl
let lean_s473 := by timed congr lean_s471 lean_s472
have lean_s474 : let425 := by timed rfl
let lean_s475 := by timed congr lean_s471 lean_s474
let lean_s476 := by timed congr lean_s471 lean_s403
let lean_s477 := by timed congr lean_s471 lean_s405
let lean_s478 := by timed congr lean_s471 lean_s408
have lean_s479 : let421 := by timed rfl
let lean_s480 := by timed congr lean_s479 lean_r99
let lean_s481 := by timed congr lean_s479 lean_r83
let lean_s482 := by timed congr lean_s481 lean_r45
have lean_s483 : (Eq let103 let404) := by timed congr lean_s480 lean_s482
let lean_s484 := by timed congr lean_s471 lean_s483
let lean_s485 := by timed congr lean_s471 lean_s413
let lean_s486 := by timed flipCongrArg lean_r61 [Or]
have lean_s487 : (Eq let50 let405) := by timed congr lean_s486 lean_r50
let lean_s488 := by timed congr lean_s471 lean_s487
let lean_s489 := by timed congr lean_s488 lean_s455
let lean_s490 := by timed congr lean_s485 lean_s489
let lean_s491 := by timed congr lean_s484 lean_s490
let lean_s492 := by timed congr lean_s478 lean_s491
let lean_s493 := by timed congr lean_s477 lean_s492
let lean_s494 := by timed congr lean_s476 lean_s493
let lean_s495 := by timed congr lean_s475 lean_s494
have lean_s496 : let407 := by timed congr lean_s473 lean_s495
have lean_s497 : let409 := by timed rfl
have lean_s498 : let413 := by timed rfl
let lean_s499 := by timed flipCongrArg lean_s498 [HMul.hMul]
have lean_s500 : let299 := by timed rfl
let lean_s501 := by timed flipCongrArg lean_s500 [Eq]
have lean_s502 : let299 := by timed rfl
have lean_s503 : let305 := by timed congr lean_s501 lean_s502
let lean_s504 := by timed Eq.trans lean_r71 lean_s503
have lean_s505 : let300 := by timed Eq.trans lean_s504 lean_r67
have lean_s506 : let299 := by timed trueElim lean_s505
have lean_s507 : (Eq let107 let107) := by timed congr lean_s499 lean_s506
let lean_s508 := by timed flipCongrArg lean_s507 [GE.ge]
have lean_s509 : let426 := by timed congr lean_s508 lean_s498
let lean_s510 := by timed congr lean_s497 lean_s509
let lean_s511 := by timed flipCongrArg lean_s506 [GE.ge]
have lean_s512 : let412 := by timed rfl
have lean_s513 : let425 := by timed congr lean_s511 lean_s512
let lean_s514 := by timed congr lean_s497 lean_s513
let lean_s515 := by timed flipCongrArg lean_s498 [HMul.hMul]
have lean_s516 : let226 := by timed rfl
let lean_s517 := by timed flipCongrArg lean_s516 [Eq]
have lean_s518 : let226 := by timed rfl
have lean_s519 : let297 := by timed congr lean_s517 lean_s518
let lean_s520 := by timed Eq.trans lean_r65 lean_s519
have lean_s521 : let227 := by timed Eq.trans lean_s520 lean_r42
have lean_s522 : let226 := by timed trueElim lean_s521
have lean_s523 : (Eq let75 let75) := by timed congr lean_s515 lean_s522
let lean_s524 := by timed flipCongrArg lean_s523 [GE.ge]
have lean_s525 : let416 := by timed congr lean_s524 lean_s498
let lean_s526 := by timed congr lean_s497 lean_s525
let lean_s527 := by timed flipCongrArg lean_s522 [GE.ge]
have lean_s528 : let420 := by timed congr lean_s527 lean_s512
let lean_s529 := by timed congr lean_s497 lean_s528
have lean_s530 : let424 := by timed rfl
let lean_s531 := by timed congr lean_s497 lean_s530
have lean_s532 : let421 := by timed rfl
have lean_s533 : let409 := by timed rfl
have lean_s534 : (Eq let101 let101) := by timed rfl
let lean_s535 := by timed congr lean_s533 lean_s534
have lean_s536 : (Eq let100 let100) := by timed rfl
let lean_s537 := by timed congr lean_s533 lean_s536
let lean_s538 := by timed flipCongrArg lean_s523 [GE.ge]
have lean_s539 : (Eq let95 let95) := by timed congr lean_s538 lean_s512
let lean_s540 := by timed congr lean_s533 lean_s539
let lean_s541 := by timed congr lean_s533 lean_s528
have lean_s542 : let423 := by timed rfl
let lean_s543 := by timed congr lean_s533 lean_s542
have lean_s544 : let422 := by timed rfl
let lean_s545 := by timed congr lean_s533 lean_s544
have lean_s546 : (Eq let90 let90) := by timed rfl
let lean_s547 := by timed congr lean_s533 lean_s546
have lean_s548 : (Eq let89 let89) := by timed rfl
let lean_s549 := by timed congr lean_s533 lean_s548
have lean_s550 : (Eq let88 let88) := by timed rfl
let lean_s551 := by timed congr lean_s533 lean_s550
have lean_s552 : (Eq let86 let86) := by timed rfl
let lean_s553 := by timed congr lean_s533 lean_s552
have lean_s554 : (Eq let83 let83) := by timed rfl
let lean_s555 := by timed congr lean_s533 lean_s554
have lean_s556 : (Eq let82 let82) := by timed rfl
let lean_s557 := by timed congr lean_s555 lean_s556
let lean_s558 := by timed congr lean_s553 lean_s557
let lean_s559 := by timed congr lean_s551 lean_s558
let lean_s560 := by timed congr lean_s549 lean_s559
let lean_s561 := by timed congr lean_s547 lean_s560
let lean_s562 := by timed congr lean_s545 lean_s561
let lean_s563 := by timed congr lean_s543 lean_s562
let lean_s564 := by timed congr lean_s541 lean_s563
let lean_s565 := by timed congr lean_s540 lean_s564
let lean_s566 := by timed congr lean_s537 lean_s565
have lean_s567 : (Eq let336 let336) := by timed congr lean_s535 lean_s566
let lean_s568 := by timed congr lean_s532 lean_s567
have lean_s569 : let409 := by timed rfl
have lean_s570 : (Eq let98 let98) := by timed rfl
let lean_s571 := by timed congr lean_s569 lean_s570
have lean_s572 : (Eq let97 let97) := by timed rfl
let lean_s573 := by timed congr lean_s569 lean_s572
let lean_s574 := by timed congr lean_s569 lean_s539
let lean_s575 := by timed congr lean_s569 lean_s528
have lean_s576 : let419 := by timed rfl
let lean_s577 := by timed congr lean_s569 lean_s576
have lean_s578 : let418 := by timed rfl
let lean_s579 := by timed congr lean_s569 lean_s578
have lean_s580 : let417 := by timed rfl
let lean_s581 := by timed congr lean_s569 lean_s580
let lean_s582 := by timed congr lean_s569 lean_s546
let lean_s583 := by timed congr lean_s569 lean_s548
let lean_s584 := by timed congr lean_s569 lean_s550
let lean_s585 := by timed congr lean_s569 lean_s552
let lean_s586 := by timed congr lean_s569 lean_s554
let lean_s587 := by timed congr lean_s586 lean_s556
let lean_s588 := by timed congr lean_s585 lean_s587
let lean_s589 := by timed congr lean_s584 lean_s588
let lean_s590 := by timed congr lean_s583 lean_s589
let lean_s591 := by timed congr lean_s582 lean_s590
let lean_s592 := by timed congr lean_s581 lean_s591
let lean_s593 := by timed congr lean_s579 lean_s592
let lean_s594 := by timed congr lean_s577 lean_s593
let lean_s595 := by timed congr lean_s575 lean_s594
let lean_s596 := by timed congr lean_s574 lean_s595
let lean_s597 := by timed congr lean_s573 lean_s596
have lean_s598 : (Eq let320 let320) := by timed congr lean_s571 lean_s597
let lean_s599 := by timed congr lean_s532 lean_s598
have lean_s600 : let409 := by timed rfl
have lean_s601 : (Eq let80 let80) := by timed rfl
let lean_s602 := by timed congr lean_s600 lean_s601
have lean_s603 : (Eq let78 let78) := by timed rfl
let lean_s604 := by timed congr lean_s600 lean_s603
let lean_s605 := by timed congr lean_s600 lean_s525
let lean_s606 := by timed flipCongrArg lean_s522 [GE.ge]
have lean_s607 : (Eq let3 let3) := by timed rfl
have lean_s608 : (Eq let74 let74) := by timed congr lean_s606 lean_s607
let lean_s609 := by timed congr lean_s600 lean_s608
have lean_s610 : let410 := by timed rfl
let lean_s611 := by timed congr lean_s600 lean_s610
have lean_s612 : let415 := by timed rfl
let lean_s613 := by timed congr lean_s600 lean_s612
have lean_s614 : (Eq let68 let68) := by timed rfl
let lean_s615 := by timed congr lean_s600 lean_s614
have lean_s616 : (Eq let66 let66) := by timed rfl
let lean_s617 := by timed congr lean_s600 lean_s616
have lean_s618 : (Eq let64 let64) := by timed rfl
let lean_s619 := by timed congr lean_s600 lean_s618
have lean_s620 : (Eq let61 let61) := by timed rfl
let lean_s621 := by timed congr lean_s600 lean_s620
have lean_s622 : (Eq let12 let12) := by timed rfl
let lean_s623 := by timed flipCongrArg lean_s622 [HAdd.hAdd]
have lean_s624 : let243 := by timed rfl
let lean_s625 := by timed flipCongrArg lean_s624 [Eq]
have lean_s626 : let243 := by timed rfl
have lean_s627 : let244 := by timed congr lean_s625 lean_s626
let lean_s628 := by timed Eq.trans lean_r55 lean_s627
have lean_s629 : let293 := by timed Eq.trans lean_s628 lean_r62
have lean_s630 : let243 := by timed trueElim lean_s629
have lean_s631 : (Eq let58 let58) := by timed congr lean_s623 lean_s630
let lean_s632 := by timed flipCongrArg lean_s631 [GE.ge]
have lean_s633 : (Eq let59 let59) := by timed congr lean_s632 lean_s512
let lean_s634 := by timed congr lean_s600 lean_s633
have lean_s635 : let414 := by timed rfl
let lean_s636 := by timed flipCongrArg lean_s635 [HAdd.hAdd]
let lean_s637 := by timed flipCongrArg lean_s498 [HMul.hMul]
have lean_s638 : (Eq let55 let55) := by timed congr lean_s637 lean_s630
have lean_s639 : (Eq let56 let56) := by timed congr lean_s636 lean_s638
let lean_s640 := by timed flipCongrArg lean_s639 [GE.ge]
have lean_s641 : (Eq let57 let57) := by timed congr lean_s640 lean_s512
let lean_s642 := by timed congr lean_s600 lean_s641
have lean_s643 : let411 := by timed rfl
let lean_s644 := by timed congr lean_s642 lean_s643
let lean_s645 := by timed congr lean_s634 lean_s644
let lean_s646 := by timed congr lean_s621 lean_s645
let lean_s647 := by timed congr lean_s619 lean_s646
let lean_s648 := by timed congr lean_s617 lean_s647
let lean_s649 := by timed congr lean_s615 lean_s648
let lean_s650 := by timed congr lean_s613 lean_s649
let lean_s651 := by timed congr lean_s611 lean_s650
let lean_s652 := by timed congr lean_s609 lean_s651
let lean_s653 := by timed congr lean_s605 lean_s652
let lean_s654 := by timed congr lean_s604 lean_s653
have lean_s655 : (Eq let231 let231) := by timed congr lean_s602 lean_s654
let lean_s656 := by timed congr lean_s599 lean_s655
have lean_s657 : (Eq let404 let404) := by timed congr lean_s568 lean_s656
let lean_s658 := by timed congr lean_s497 lean_s657
let lean_s659 := by timed congr lean_s497 lean_s610
have lean_s660 : (Eq let405 let405) := by timed rfl
let lean_s661 := by timed congr lean_s497 lean_s660
have lean_s662 : let408 := by timed rfl
let lean_s663 := by timed congr lean_s661 lean_s662
let lean_s664 := by timed congr lean_s659 lean_s663
let lean_s665 := by timed congr lean_s658 lean_s664
let lean_s666 := by timed congr lean_s531 lean_s665
let lean_s667 := by timed congr lean_s529 lean_s666
let lean_s668 := by timed congr lean_s526 lean_s667
let lean_s669 := by timed congr lean_s514 lean_s668
have lean_s670 : (Eq let406 let406) := by timed congr lean_s510 lean_s669
have lean_s671 : let407 := by timed Eq.trans lean_s496 lean_s670
have lean_s672 : (Eq let291 let406) := by timed Eq.trans lean_s470 lean_s671
have lean_s673 : let406 := by timed eqResolve lean_a139 lean_s672
have lean_s674 : let18 := by andElim lean_s673, 8
have lean_s675 : (Or let470 let16) := by timed @cnfAndPos [let16, let15] 0
have lean_s676 : (Or let16 let470) := by permutateOr lean_s675, [1, 0], (- 1)
have lean_s677 : (Or let515 (Or let501 (Or let502 (Or let213 False)))) :=
  (scope (fun lean_a140 : let86 =>
    (scope (fun lean_a141 : let25 =>
      (scope (fun lean_a142 : let31 =>
        (scope (fun lean_a143 : let16 =>
          have lean_s677 : let316 := by timed trueElim lean_r80
          have lean_s678 : let482 := by timed Eq.symm lean_r129
          have lean_s679 : let182 := by timed eqResolve lean_a143 lean_s678
          have lean_s680 : let522 := by timed And.intro lean_s677 lean_s679
          have lean_s681 : (Implies let522 let521) := by arithMulNeg [xx5f12, let152, let149], 3
          have lean_s682 : let521 := by timed modusPonens lean_s680 lean_s681
          have lean_s683 : (Eq let86 let296) := by timed Eq.symm lean_r64
          have lean_s684 : let296 := by timed eqResolve lean_a140 lean_s683
          have lean_s685 : let520 := by timed And.intro lean_s677 lean_s684
          have lean_s686 : (Implies let520 let519) := by arithMulNeg [let85, let72, let149], 3
          have lean_s687 : let519 := by timed modusPonens lean_s685 lean_s686
          have lean_s688 : let510 := by timed Eq.symm lean_r3
          have lean_s689 : let155 := by timed eqResolve lean_a141 lean_s688
          have lean_s690 : let508 := by timed And.intro lean_s677 lean_s689
          have lean_s691 : let509 := by arithMulNeg [let24, let72, let149], 3
          have lean_s692 : let507 := by timed modusPonens lean_s690 lean_s691
          have lean_s693 : let232 := by timed trueElim lean_r46
          have lean_s694 : let514 := by timed Eq.symm lean_r30
          have lean_s695 : let211 := by timed eqResolve lean_a142 lean_s694
          have lean_s696 : let512 := by timed And.intro lean_s693 lean_s695
          have lean_s697 : let513 := by arithMulPos [xx5f2, let71, let71], 1
          have lean_s698 : let511 := by timed modusPonens lean_s696 lean_s697
          have lean_s699 : let518 := by sumBounds [lean_s682, lean_s687, lean_s692, lean_s698]
          let lean_s700 := by timed congrHAdd lean_r12 lean_r10
          let lean_s701 := by timed congrHAdd lean_r20 lean_s700
          have lean_s702 : (Eq let517 let193) := by timed congrHAdd lean_r1 lean_s701
          have lean_s703 : (Eq let517 let72) := by timed Eq.trans lean_s702 lean_r23
          let lean_s704 := by timed flipCongrArg lean_s703 [LE.le]
          let lean_s705 := by timed congrHAdd lean_r39 lean_r40
          let lean_s706 := by timed congrHAdd lean_r39 lean_s705
          have lean_s707 : (Eq let516 let154) := by timed congrHAdd lean_r119 lean_s706
          have lean_s708 : (Eq let516 let151) := by timed Eq.trans lean_s707 lean_r2
          have lean_s709 : (Eq let518 let321) := by timed congr lean_s704 lean_s708
          have lean_s710 : (Eq let518 False) := by timed Eq.trans lean_s709 lean_r84
          show False from by timed eqResolve lean_s699 lean_s710
  ))))))))
have lean_s678 : (Not (And let86 (And let25 (And let31 let16)))) := by liftOrNToNeg lean_s677
have lean_s679 : (Or let515 (Or let501 (Or let502 let213))) := by timed flipNotAnd lean_s678 [let86, let25, let31, let16]
have lean_s680 : (Or let213 (Or let515 let503)) := by permutateOr lean_s679, [3, 0, 2, 1], (- 1)
have lean_s681 : (Or let500 let86) := by timed @cnfAndPos [let101, let100, let95, let94, let19, xx5f16, let90, let89, let88, let86, let83, let82] 9
have lean_s682 : (Or let86 let500) := by permutateOr lean_s681, [1, 0], (- 1)
have lean_s683 : let405 := by andElim lean_s673, 7
have lean_s684 : (Or let456 let19) := by timed @cnfAndPos [let37, let34, xx5f5, let32, let31, let30, let28, let27, let25, let22, let20, let19] 11
have lean_s685 : (Or let19 let456) := by permutateOr lean_s684, [1, 0], (- 1)
let lean_s686 := by R1 lean_s683, lean_s685, let237, [(- 1), (- 1)]
have lean_s687 : (Or let395 let46) := by timed @cnfAndPos [let48, let47, let46, xx5f9, let45, let44, let43, let42, let40, let39] 2
have lean_s688 : (Or let46 let395) := by permutateOr lean_s687, [1, 0], (- 1)
let lean_s689 := by R1 lean_s686, lean_s688, let292, [(- 1), (- 1)]
have lean_s690 : (Or let396 xx5f9) := by timed @cnfAndPos [let98, let97, let95, let94, xx5f9, let93, let92, let90, let89, let88, let86, let83, let82] 4
have lean_s691 : (Or xx5f9 let396) := by permutateOr lean_s690, [1, 0], (- 1)
let lean_s692 := by R2 lean_s689, lean_s691, xx5f9, [(- 1), (- 1)]
have lean_s693 : let454 := by timed iteIntro
have lean_s694 : let441 := by timed rfl
have lean_s695 : let226 := by timed trueElim lean_s521
let lean_s696 := by timed flipCongrArg lean_s695 [Eq]
have lean_s697 : let448 := by timed rfl
have lean_s698 : (Eq let137 let137) := by timed congr lean_s696 lean_s697
let lean_s699 := by timed flipCongrArg lean_s695 [Eq]
have lean_s700 : let449 := by timed rfl
have lean_s701 : (Eq let129 let129) := by timed congr lean_s699 lean_s700
have lean_s702 : (Eq let454 let454) := by timed congrIte lean_s694 lean_s698 lean_s701
have lean_s703 : let454 := by timed eqResolve lean_s693 lean_s702
have lean_s704 : (Or xx5f5 let129) := by timed iteElim2 lean_s703
let lean_s705 := by R2 lean_s692, lean_s704, xx5f5, [(- 1), (- 1)]
have lean_s706 : let404 := by andElim lean_s673, 5
have lean_s707 : (Or let231 (Or let320 let336)) := by permutateOr lean_s706, [2, 1, 0], (- 1)
let lean_s708 := by R2 lean_s705, lean_s707, let320, [(- 1), (- 1)]
have lean_s709 : (Or let327 (Or let493 False)) :=
  (scope (fun lean_a144 : let326 =>
    (scope (fun lean_a145 : let129 =>
      have lean_s709 : let316 := by timed trueElim lean_r80
      have lean_s710 : let499 := by timed And.intro lean_s709 lean_a145
      have lean_s711 : (Implies let499 let498) := by arithMulNeg [let73, let71, let149], 4
      have lean_s712 : let498 := by timed modusPonens lean_s710 lean_s711
      have lean_s713 : let232 := by timed trueElim lean_r46
      have lean_s714 : (Eq let341 let326) := by timed flipCongrArg lean_r47 [Not]
      have lean_s715 : (Eq let342 let326) := by timed Eq.trans lean_r105 lean_s714
      have lean_s716 : (Eq let326 let342) := by timed Eq.symm lean_s715
      have lean_s717 : let342 := by timed eqResolve lean_a144 lean_s716
      have lean_s718 : let497 := by timed And.intro lean_s713 lean_s717
      have lean_s719 : (Implies let497 let496) := by arithMulPos [let73, let71, let71], 0
      have lean_s720 : let496 := by timed modusPonens lean_s718 lean_s719
      have lean_s721 : let393 := by sumBounds [lean_s712, lean_s720]
      let lean_s722 := by timed flipCongrArg lean_r31 [HAdd.hAdd]
      have lean_s723 : (Eq let390 let388) := by timed congr lean_s722 lean_r118
      have lean_s724 : (Eq let390 let72) := by timed Eq.trans lean_s723 lean_r136
      let lean_s725 := by timed flipCongrArg lean_s724 [GE.ge]
      let lean_s726 := by timed flipCongrArg lean_r81 [HAdd.hAdd]
      have lean_s727 : (Eq let389 let369) := by timed congr lean_s726 lean_r40
      have lean_s728 : (Eq let389 let72) := by timed Eq.trans lean_s727 lean_r125
      have lean_s729 : (Eq let391 let247) := by timed congr lean_s725 lean_s728
      have lean_s730 : (Eq let391 True) := by timed Eq.trans lean_s729 lean_r58
      have lean_s731 : (Eq let392 let313) := by timed flipCongrArg lean_s730 [Not]
      have lean_s732 : (Eq let392 False) := by timed Eq.trans lean_s731 lean_r77
      have lean_s733 : (Eq let393 False) := by timed Eq.trans lean_r138 lean_s732
      show False from by timed eqResolve lean_s721 lean_s733
  ))))
have lean_s710 : (Not (And let326 let129)) := by liftOrNToNeg lean_s709
have lean_s711 : let495 := by timed flipNotAnd lean_s710 [let326, let129]
let lean_s712 := by timed flipCongrArg lean_r88 [Or]
have lean_s713 : (Eq let493 let493) := by timed rfl
have lean_s714 : (Eq let495 let494) := by timed congr lean_s712 lean_s713
have lean_s715 : let494 := by timed eqResolve lean_s711 lean_s714
let lean_s716 := by R1 lean_s708, lean_s715, let129, [(- 1), (- 1)]
have lean_s717 : (Or let455 let74) := by timed @cnfAndPos [let80, let78, let76, let74, let51, let70, let68, let66, let64, let61, let59, let57, let52] 3
have lean_s718 : (Or let74 let455) := by permutateOr lean_s717, [1, 0], (- 1)
have lean_s719 : (Or let336 (Or let74 let74)) := by R1 lean_s716, lean_s718, let231, [(- 1), (- 1)]
have lean_s720 : (Or let336 let74) := by factor lean_s719, (- 1)
have lean_s721 : (Or let174 (Or let326 False)) :=
  (scope (fun lean_a146 : let95 =>
    (scope (fun lean_a147 : let74 =>
      have lean_s721 : let232 := by timed trueElim lean_r46
      have lean_s722 : (Eq let95 let221) := by timed Eq.symm lean_r36
      have lean_s723 : let221 := by timed eqResolve lean_a146 lean_s722
      have lean_s724 : let492 := by timed And.intro lean_s721 lean_s723
      have lean_s725 : (Implies let492 let491) := by arithMulPos [let73, let72, let71], 1
      have lean_s726 : let491 := by timed modusPonens lean_s724 lean_s725
      have lean_s727 : let316 := by timed trueElim lean_r80
      have lean_s728 : (Eq let74 let233) := by timed Eq.symm lean_r47
      have lean_s729 : let233 := by timed eqResolve lean_a147 lean_s728
      have lean_s730 : let490 := by timed And.intro lean_s727 lean_s729
      have lean_s731 : (Implies let490 let489) := by arithMulNeg [let73, let71, let149], 3
      have lean_s732 : let489 := by timed modusPonens lean_s730 lean_s731
      have lean_s733 : let488 := by sumBounds [lean_s726, lean_s732]
      let lean_s734 := by timed flipCongrArg lean_r118 [HAdd.hAdd]
      have lean_s735 : (Eq let381 let236) := by timed congr lean_s734 lean_r31
      have lean_s736 : (Eq let381 let72) := by timed Eq.trans lean_s735 lean_r49
      let lean_s737 := by timed flipCongrArg lean_s736 [LE.le]
      let lean_s738 := by timed flipCongrArg lean_r35 [HAdd.hAdd]
      have lean_s739 : (Eq let487 let239) := by timed congr lean_s738 lean_r81
      have lean_s740 : (Eq let487 let149) := by timed Eq.trans lean_s739 lean_r52
      have lean_s741 : (Eq let488 let386) := by timed congr lean_s737 lean_s740
      have lean_s742 : (Eq let488 False) := by timed Eq.trans lean_s741 lean_r134
      show False from by timed eqResolve lean_s733 lean_s742
  ))))
have lean_s722 : (Not (And let95 let74)) := by liftOrNToNeg lean_s721
have lean_s723 : (Or let174 let326) := by timed flipNotAnd lean_s722 [let95, let74]
let lean_s724 := by R1 lean_s720, lean_s723, let74, [(- 1), (- 1)]
have lean_s725 : (Or let472 (Or let457 (Or let213 (Or let370 (Or let471 False))))) :=
  (scope (fun lean_a148 : let40 =>
    (scope (fun lean_a149 : let59 =>
      (scope (fun lean_a150 : let16 =>
        (scope (fun lean_a151 : let15 =>
          (scope (fun lean_a152 : let359 =>
            have lean_s725 : (Eq let359 let385) := by timed Eq.symm lean_r133
            have lean_s726 : let385 := by timed eqResolve lean_a152 lean_s725
            have lean_s727 : (Or let475 False) :=
              (scope (fun lean_a152 : let385 =>
                have lean_s727 : let316 := by timed trueElim lean_r80
                have lean_s728 : let486 := by timed And.intro lean_s727 lean_a152
                have lean_s729 : (Implies let486 let485) := by arithMulNeg [let310, let72, let149], 4
                have lean_s730 : let485 := by timed modusPonens lean_s728 lean_s729
                have lean_s731 : (Eq let306 let15) := by timed flipCongrArg lean_r68 [Not]
                have lean_s732 : (Eq let307 let15) := by timed Eq.trans lean_r72 lean_s731
                have lean_s733 : (Eq let15 let307) := by timed Eq.symm lean_s732
                have lean_s734 : let307 := by timed eqResolve lean_a151 lean_s733
                have lean_s735 : let484 := by timed And.intro lean_s727 lean_s734
                have lean_s736 : (Implies let484 let483) := by arithMulNeg [let187, let72, let149], 2
                have lean_s737 : let483 := by timed modusPonens lean_s735 lean_s736
                have lean_s738 : let379 := by timed trueElim lean_r131
                have lean_s739 : let482 := by timed Eq.symm lean_r129
                have lean_s740 : let182 := by timed eqResolve lean_a150 lean_s739
                have lean_s741 : let481 := by timed And.intro lean_s738 lean_s740
                have lean_s742 : (Implies let481 let480) := by arithMulNeg [xx5f12, let152, let185], 3
                have lean_s743 : let480 := by timed modusPonens lean_s741 lean_s742
                have lean_s744 : let232 := by timed trueElim lean_r46
                have lean_s745 : (Eq let59 let246) := by timed Eq.symm lean_r57
                have lean_s746 : let246 := by timed eqResolve lean_a149 lean_s745
                have lean_s747 : let479 := by timed And.intro lean_s744 lean_s746
                have lean_s748 : (Implies let479 let478) := by arithMulPos [let56, let72, let71], 1
                have lean_s749 : let478 := by timed modusPonens lean_s747 lean_s748
                have lean_s750 : (Eq let40 let314) := by timed Eq.symm lean_r78
                have lean_s751 : let314 := by timed eqResolve lean_a148 lean_s750
                have lean_s752 : let477 := by timed And.intro lean_s744 lean_s751
                have lean_s753 : (Implies let477 let476) := by arithMulPos [xx5f3, let72, let71], 1
                have lean_s754 : let476 := by timed modusPonens lean_s752 lean_s753
                have lean_s755 : let378 := by sumBounds [lean_s730, lean_s737, lean_s743, lean_s749, lean_s754]
                have lean_s756 : (Eq let186 let186) := by timed rfl
                let lean_s757 := by timed congrHAdd lean_r95 lean_r101
                let lean_s758 := by timed congrHAdd lean_s756 lean_s757
                let lean_s759 := by timed congrHAdd lean_r18 lean_s758
                have lean_s760 : (Eq let375 let373) := by timed congrHAdd lean_r75 lean_s759
                have lean_s761 : (Eq let375 let72) := by timed Eq.trans lean_s760 lean_r128
                let lean_s762 := by timed flipCongrArg lean_s761 [GE.ge]
                let lean_s763 := by timed congrHAdd lean_r35 lean_r35
                let lean_s764 := by timed congrHAdd lean_r109 lean_s763
                let lean_s765 := by timed congrHAdd lean_r39 lean_s764
                have lean_s766 : (Eq let374 let367) := by timed congrHAdd lean_r39 lean_s765
                have lean_s767 : (Eq let374 let303) := by timed Eq.trans lean_s766 lean_r123
                have lean_s768 : (Eq let376 let304) := by timed congr lean_s762 lean_s767
                have lean_s769 : (Eq let376 True) := by timed Eq.trans lean_s768 lean_r70
                have lean_s770 : (Eq let377 let313) := by timed flipCongrArg lean_s769 [Not]
                have lean_s771 : (Eq let377 False) := by timed Eq.trans lean_s770 lean_r77
                have lean_s772 : (Eq let378 False) := by timed Eq.trans lean_r130 lean_s771
                show False from by timed eqResolve lean_s755 lean_s772
              ))
            have lean_s728 : let475 := by liftOrNToNeg lean_s727
            show False from by timed contradiction lean_s726 lean_s728
  ))))))))))
have lean_s726 : (Not (And let40 (And let59 (And let16 (And let15 let359))))) := by liftOrNToNeg lean_s725
have lean_s727 : let474 := by timed flipNotAnd lean_s726 [let40, let59, let16, let15, let359]
have lean_s728 : let421 := by timed rfl
have lean_s729 : (Eq let472 let472) := by timed rfl
let lean_s730 := by timed congr lean_s728 lean_s729
have lean_s731 : (Eq let457 let457) := by timed rfl
let lean_s732 := by timed congr lean_s728 lean_s731
have lean_s733 : (Eq let213 let213) := by timed rfl
let lean_s734 := by timed congr lean_s728 lean_s733
have lean_s735 : let368 := by timed rfl
let lean_s736 := by timed flipCongrArg lean_s735 [Eq]
have lean_s737 : (Eq let387 let368) := by timed congr lean_s736 lean_r126
have lean_s738 : (Eq let387 True) := by timed Eq.trans lean_s737 lean_r124
have lean_s739 : (Eq let371 True) := by timed Eq.trans lean_r135 lean_s738
have lean_s740 : let371 := by timed trueElim lean_s739
let lean_s741 := by timed congr lean_s728 lean_s740
have lean_s742 : (Eq let471 let471) := by timed rfl
let lean_s743 := by timed congr lean_s741 lean_s742
let lean_s744 := by timed congr lean_s734 lean_s743
let lean_s745 := by timed congr lean_s732 lean_s744
have lean_s746 : (Eq let474 let473) := by timed congr lean_s730 lean_s745
have lean_s747 : let473 := by timed eqResolve lean_s727 lean_s746
have lean_s748 : (Or let213 (Or let14 (Or let457 (Or let472 let471)))) := by permutateOr lean_s747, [2, 3, 1, 0, 4], (- 1)
have lean_s749 : (Or let470 let15) := by timed @cnfAndPos [let16, let15] 1
have lean_s750 : (Or let15 let470) := by permutateOr lean_s749, [1, 0], (- 1)
let lean_s751 := by R1 lean_s748, lean_s750, let14, [(- 1), (- 1)]
have lean_s752 : (Or let457 (Or let472 (Or let471 (Or let470 let470)))) := by R2 lean_s751, lean_s676, let16, [(- 1), (- 1)]
have lean_s753 : (Or let457 (Or let472 (Or let471 let470))) := by factor lean_s752, (- 1)
let lean_s754 := by R2 lean_s753, lean_s674, let17, [(- 1), (- 1)]
have lean_s755 : (Or let394 let10) := by timed @cnfAndPos [let10, let8] 0
have lean_s756 : (Or let10 let394) := by permutateOr lean_s755, [1, 0], (- 1)
let lean_s757 := by R1 lean_s754, lean_s756, let11, [(- 1), (- 1)]
have lean_s758 : (Or let234 (Or let460 False)) :=
  (scope (fun lean_a153 : let10 =>
    (scope (fun lean_a154 : let43 =>
      have lean_s758 : let232 := by timed trueElim lean_r46
      have lean_s759 : (Eq let43 let366) := by timed Eq.symm lean_r122
      have lean_s760 : let366 := by timed eqResolve lean_a154 lean_s759
      have lean_s761 : let469 := by timed And.intro lean_s758 lean_s760
      have lean_s762 : (Implies let469 let468) := by arithMulPos [xx5f4, let72, let71], 1
      have lean_s763 : let468 := by timed modusPonens lean_s761 lean_s762
      have lean_s764 : let316 := by timed trueElim lean_r80
      have lean_s765 : let467 := by timed Eq.symm lean_r60
      have lean_s766 : let179 := by timed eqResolve lean_a153 lean_s765
      have lean_s767 : let465 := by timed And.intro lean_s764 lean_s766
      have lean_s768 : let466 := by arithMulNeg [xx5f4, let152, let149], 3
      have lean_s769 : let464 := by timed modusPonens lean_s767 lean_s768
      have lean_s770 : let463 := by sumBounds [lean_s763, lean_s769]
      let lean_s771 := by timed flipCongrArg lean_r21 [HAdd.hAdd]
      have lean_s772 : (Eq let462 let242) := by timed congr lean_s771 lean_r120
      have lean_s773 : (Eq let462 let72) := by timed Eq.trans lean_s772 lean_r54
      let lean_s774 := by timed flipCongrArg lean_s773 [LE.le]
      let lean_s775 := by timed flipCongrArg lean_r35 [HAdd.hAdd]
      have lean_s776 : (Eq let461 let361) := by timed congr lean_s775 lean_r119
      have lean_s777 : (Eq let461 let153) := by timed Eq.trans lean_s776 lean_r117
      have lean_s778 : (Eq let463 let245) := by timed congr lean_s774 lean_s777
      have lean_s779 : (Eq let463 False) := by timed Eq.trans lean_s778 lean_r56
      show False from by timed eqResolve lean_s770 lean_s779
  ))))
have lean_s759 : (Not (And let10 let43)) := by liftOrNToNeg lean_s758
have lean_s760 : (Or let234 let460) := by timed flipNotAnd lean_s759 [let10, let43]
let lean_s761 := by R1 lean_s757, lean_s760, let10, [(- 1), (- 1)]
have lean_s762 : let459 := by timed iteIntro
have lean_s763 : let419 := by timed rfl
have lean_s764 : let243 := by timed trueElim lean_s629
let lean_s765 := by timed flipCongrArg lean_s764 [Eq]
have lean_s766 : let437 := by timed rfl
have lean_s767 : (Eq let360 let360) := by timed congr lean_s765 lean_s766
let lean_s768 := by timed flipCongrArg lean_s764 [Eq]
have lean_s769 : (Eq let53 let53) := by timed rfl
have lean_s770 : (Eq let358 let358) := by timed congr lean_s768 lean_s769
have lean_s771 : (Eq let459 let459) := by timed congrIte lean_s763 lean_s767 lean_s770
have lean_s772 : let459 := by timed eqResolve lean_s762 lean_s771
have lean_s773 : (Eq let459 let458) := by timed congrIte lean_s39 lean_r116 lean_r115
have lean_s774 : let458 := by timed eqResolve lean_s772 lean_s773
have lean_s775 : (Or let19 let359) := by timed iteElim1 lean_s774
let lean_s776 := by R2 lean_s761, lean_s775, let359, [(- 1), (- 1)]
have lean_s777 : (Or let395 let40) := by timed @cnfAndPos [let48, let47, let46, xx5f9, let45, let44, let43, let42, let40, let39] 8
have lean_s778 : (Or let40 let395) := by permutateOr lean_s777, [1, 0], (- 1)
let lean_s779 := by R2 lean_s776, lean_s778, let40, [(- 1), (- 1)]
have lean_s780 : (Or let395 let43) := by timed @cnfAndPos [let48, let47, let46, xx5f9, let45, let44, let43, let42, let40, let39] 6
have lean_s781 : (Or let43 let395) := by permutateOr lean_s780, [1, 0], (- 1)
let lean_s782 := by R2 lean_s779, lean_s781, let43, [(- 1), (- 1)]
have lean_s783 : (Or let395 xx5f9) := by timed @cnfAndPos [let48, let47, let46, xx5f9, let45, let44, let43, let42, let40, let39] 3
have lean_s784 : (Or xx5f9 let395) := by permutateOr lean_s783, [1, 0], (- 1)
have lean_s785 : (Or let457 (Or let395 (Or let395 let395))) := by R2 lean_s782, lean_s784, xx5f9, [(- 1), (- 1)]
have lean_s786 : (Or let457 let395) := by factor lean_s785, (- 1)
let lean_s787 := by R2 lean_s786, lean_s683, let292, [(- 1), (- 1)]
have lean_s788 : (Or let456 xx5f5) := by timed @cnfAndPos [let37, let34, xx5f5, let32, let31, let30, let28, let27, let25, let22, let20, let19] 2
have lean_s789 : (Or xx5f5 let456) := by permutateOr lean_s788, [1, 0], (- 1)
let lean_s790 := by R1 lean_s787, lean_s789, let237, [(- 1), (- 1)]
have lean_s791 : (Or let455 let59) := by timed @cnfAndPos [let80, let78, let76, let74, let51, let70, let68, let66, let64, let61, let59, let57, let52] 10
have lean_s792 : (Or let59 let455) := by permutateOr lean_s791, [1, 0], (- 1)
let lean_s793 := by R2 lean_s790, lean_s792, let59, [(- 1), (- 1)]
have lean_s794 : (Or let46 let137) := by timed iteElim1 lean_s703
let lean_s795 := by R1 lean_s793, lean_s794, xx5f5, [(- 1), (- 1)]
let lean_s796 := by R2 lean_s795, lean_s707, let231, [(- 1), (- 1)]
have lean_s797 : (Or let175 (Or let397 False)) :=
  (scope (fun lean_a155 : let174 =>
    (scope (fun lean_a156 : let137 =>
      have lean_s797 : let232 := by timed trueElim lean_r46
      have lean_s798 : let403 := by timed And.intro lean_s797 lean_a156
      have lean_s799 : (Implies let403 let402) := by arithMulPos [let73, let72, let71], 4
      have lean_s800 : let402 := by timed modusPonens lean_s798 lean_s799
      have lean_s801 : let316 := by timed trueElim lean_r80
      have lean_s802 : (Eq let240 let174) := by timed flipCongrArg lean_r36 [Not]
      have lean_s803 : (Eq let241 let174) := by timed Eq.trans lean_r53 lean_s802
      have lean_s804 : (Eq let174 let241) := by timed Eq.symm lean_s803
      have lean_s805 : let241 := by timed eqResolve lean_a155 lean_s804
      have lean_s806 : let401 := by timed And.intro lean_s801 lean_s805
      have lean_s807 : (Implies let401 let400) := by arithMulNeg [let73, let72, let149], 2
      have lean_s808 : let400 := by timed modusPonens lean_s806 lean_s807
      have lean_s809 : let384 := by sumBounds [lean_s800, lean_s808]
      let lean_s810 := by timed flipCongrArg lean_r118 [HAdd.hAdd]
      have lean_s811 : (Eq let381 let236) := by timed congr lean_s810 lean_r31
      have lean_s812 : (Eq let381 let72) := by timed Eq.trans lean_s811 lean_r49
      let lean_s813 := by timed flipCongrArg lean_s812 [GE.ge]
      let lean_s814 := by timed flipCongrArg lean_r35 [HAdd.hAdd]
      have lean_s815 : (Eq let380 let312) := by timed congr lean_s814 lean_r39
      have lean_s816 : (Eq let380 let72) := by timed Eq.trans lean_s815 lean_r76
      have lean_s817 : (Eq let382 let247) := by timed congr lean_s813 lean_s816
      have lean_s818 : (Eq let382 True) := by timed Eq.trans lean_s817 lean_r58
      have lean_s819 : (Eq let383 let313) := by timed flipCongrArg lean_s818 [Not]
      have lean_s820 : (Eq let383 False) := by timed Eq.trans lean_s819 lean_r77
      have lean_s821 : (Eq let384 False) := by timed Eq.trans lean_r132 lean_s820
      show False from by timed eqResolve lean_s809 lean_s821
  ))))
have lean_s798 : (Not (And let174 let137)) := by liftOrNToNeg lean_s797
have lean_s799 : let399 := by timed flipNotAnd lean_s798 [let174, let137]
let lean_s800 := by timed flipCongrArg lean_r13 [Or]
have lean_s801 : (Eq let397 let397) := by timed rfl
have lean_s802 : (Eq let399 let398) := by timed congr lean_s800 lean_s801
have lean_s803 : let398 := by timed eqResolve lean_s799 lean_s802
let lean_s804 := by R1 lean_s796, lean_s803, let137, [(- 1), (- 1)]
have lean_s805 : (Or let396 let95) := by timed @cnfAndPos [let98, let97, let95, let94, xx5f9, let93, let92, let90, let89, let88, let86, let83, let82] 2
have lean_s806 : (Or let95 let396) := by permutateOr lean_s805, [1, 0], (- 1)
have lean_s807 : (Or let336 (Or let95 let95)) := by R1 lean_s804, lean_s806, let320, [(- 1), (- 1)]
have lean_s808 : (Or let336 let95) := by factor lean_s807, (- 1)
have lean_s809 : (Or let95 let336) := by permutateOr lean_s808, [1, 0], (- 1)
have lean_s810 : (Or let336 let336) := by R2 lean_s724, lean_s809, let95, [(- 1), (- 1)]
have lean_s811 : let336 := by factor lean_s810, 1
have lean_s812 : let86 := by R2 lean_s682, lean_s811, let336, [(- 1), 0]
let lean_s813 := by R2 lean_s680, lean_s812, let86, [(- 1), 0]
have lean_s814 : (Or let456 let31) := by timed @cnfAndPos [let37, let34, xx5f5, let32, let31, let30, let28, let27, let25, let22, let20, let19] 4
have lean_s815 : (Or let31 let456) := by permutateOr lean_s814, [1, 0], (- 1)
have lean_s816 : (Or let500 let19) := by timed @cnfAndPos [let101, let100, let95, let94, let19, xx5f16, let90, let89, let88, let86, let83, let82] 4
have lean_s817 : (Or let19 let500) := by permutateOr lean_s816, [1, 0], (- 1)
have lean_s818 : let19 := by R2 lean_s817, lean_s811, let336, [(- 1), 0]
have lean_s819 : let395 := by R1 lean_s784, lean_s818, xx5f9, [(- 1), 0]
have lean_s820 : let237 := by R1 lean_s683, lean_s819, let292, [(- 1), 0]
have lean_s821 : let31 := by R2 lean_s815, lean_s820, let237, [(- 1), 0]
let lean_s822 := by R2 lean_s813, lean_s821, let31, [(- 1), 0]
have lean_s823 : (Or let456 let25) := by timed @cnfAndPos [let37, let34, xx5f5, let32, let31, let30, let28, let27, let25, let22, let20, let19] 8
have lean_s824 : (Or let25 let456) := by permutateOr lean_s823, [1, 0], (- 1)
have lean_s825 : let25 := by R2 lean_s824, lean_s820, let237, [(- 1), 0]
have lean_s826 : let213 := by R2 lean_s822, lean_s825, let25, [(- 1), 0]
have lean_s827 : let470 := by R1 lean_s676, lean_s826, let16, [(- 1), 0]
let lean_s828 := by R1 lean_s674, lean_s827, let17, [(- 1), 0]
have lean_s829 : (Or let502 (Or let501 (Or let234 False))) :=
  (scope (fun lean_a157 : let31 =>
    (scope (fun lean_a158 : let25 =>
      (scope (fun lean_a159 : let10 =>
        have lean_s829 : let316 := by timed trueElim lean_r80
        have lean_s830 : let467 := by timed Eq.symm lean_r60
        have lean_s831 : let179 := by timed eqResolve lean_a159 lean_s830
        have lean_s832 : let465 := by timed And.intro lean_s829 lean_s831
        have lean_s833 : let466 := by arithMulNeg [xx5f4, let152, let149], 3
        have lean_s834 : let464 := by timed modusPonens lean_s832 lean_s833
        have lean_s835 : let232 := by timed trueElim lean_r46
        have lean_s836 : let514 := by timed Eq.symm lean_r30
        have lean_s837 : let211 := by timed eqResolve lean_a157 lean_s836
        have lean_s838 : let512 := by timed And.intro lean_s835 lean_s837
        have lean_s839 : let513 := by arithMulPos [xx5f2, let71, let71], 1
        have lean_s840 : let511 := by timed modusPonens lean_s838 lean_s839
        have lean_s841 : let510 := by timed Eq.symm lean_r3
        have lean_s842 : let155 := by timed eqResolve lean_a158 lean_s841
        have lean_s843 : let508 := by timed And.intro lean_s829 lean_s842
        have lean_s844 : let509 := by arithMulNeg [let24, let72, let149], 3
        have lean_s845 : let507 := by timed modusPonens lean_s843 lean_s844
        have lean_s846 : let506 := by sumBounds [lean_s834, lean_s840, lean_s845]
        let lean_s847 := by timed congrHAdd lean_r10 lean_r12
        have lean_s848 : (Eq let505 let156) := by timed congrHAdd lean_r120 lean_s847
        have lean_s849 : (Eq let505 let72) := by timed Eq.trans lean_s848 lean_r4
        let lean_s850 := by timed flipCongrArg lean_s849 [LE.le]
        let lean_s851 := by timed congrHAdd lean_r40 lean_r39
        have lean_s852 : (Eq let504 let157) := by timed congrHAdd lean_r119 lean_s851
        have lean_s853 : (Eq let504 let151) := by timed Eq.trans lean_s852 lean_r5
        have lean_s854 : (Eq let506 let321) := by timed congr lean_s850 lean_s853
        have lean_s855 : (Eq let506 False) := by timed Eq.trans lean_s854 lean_r84
        show False from by timed eqResolve lean_s846 lean_s855
  ))))))
have lean_s830 : (Not (And let31 (And let25 let10))) := by liftOrNToNeg lean_s829
have lean_s831 : (Or let502 (Or let501 let234)) := by timed flipNotAnd lean_s830 [let31, let25, let10]
have lean_s832 : (Or let234 let503) := by permutateOr lean_s831, [2, 0, 1], (- 1)
let lean_s833 := by R2 lean_s832, lean_s821, let31, [(- 1), 0]
have lean_s834 : let234 := by R2 lean_s833, lean_s825, let25, [(- 1), 0]
have lean_s835 : let394 := by R1 lean_s756, lean_s834, let10, [(- 1), 0]
exact (show False from by R1 lean_s828, lean_s835, let11, [0, 0])


