open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {xx5f7 : Rat}
variable {xx5f8 : Rat}
variable {xx5f5 : Prop}
variable {xx5f1 : Rat}
variable {xx5f2 : Rat}
variable {xx5f9 : Prop}
variable {xx5f4 : Rat}
variable {xx5f3 : Rat}
variable {xx5f0 : Prop}
variable {xx5f9 : Prop}
variable {xx5f4 : Rat}
variable {xx5f2 : Rat}
variable {xx5f6 : Rat}
variable {xx5f1 : Rat}
variable {xx5f5 : Prop}
variable {xx5f8 : Rat}
variable {xx5f7 : Rat}
variable {xx5f6 : Rat}
variable {xx5f0 : Prop}
variable {xx5f3 : Rat}

theorem th0 :
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 20)
  let let3 := (Int.ofNat 1)
  let let4 := (Neg.neg let3)
  let let5 := (binrel% HMul.hMul let4 xx5f3)
  let let6 := (binrel% GE.ge (binrel% HAdd.hAdd let5 (binrel% HMul.hMul (binrel% HDiv.hDiv let3 let2) xx5f4)) let1)
  let let7 := (Not let6)
  let let8 := (binrel% GE.ge xx5f4 (Int.ofNat 60))
  let let9 := (And let8 let7)
  let let10 := (Not xx5f9)
  let let11 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f2 let5) let1)
  let let12 := (binrel% HMul.hMul let4 xx5f2)
  let let13 := (binrel% GE.ge (binrel% HAdd.hAdd let12 xx5f3) let1)
  let let14 := (binrel% HMul.hMul let4 xx5f4)
  let let15 := (binrel% HAdd.hAdd xx5f2 let14)
  let let16 := (binrel% GE.ge let15 let1)
  let let17 := (binrel% HAdd.hAdd let12 xx5f4)
  let let18 := (binrel% GE.ge let17 let1)
  let let19 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f1 let12) let1)
  let let20 := (binrel% HMul.hMul let4 xx5f1)
  let let21 := (binrel% GE.ge (binrel% HAdd.hAdd let20 xx5f2) let1)
  let let22 := (binrel% GE.ge let12 let4)
  let let23 := (binrel% GE.ge xx5f2 let1)
  let let24 := (Int.ofNat 2)
  let let25 := (binrel% GE.ge xx5f8 let24)
  let let26 := (binrel% HMul.hMul let4 xx5f8)
  let let27 := (binrel% GE.ge let26 (Neg.neg let24))
  let let28 := (And (And let27 let25) (And xx5f5 (And let23 (And let22 (And (And let21 let19) (And (And let18 let16) (And (And let13 let11) let10)))))))
  let let29 := (binrel% GE.ge xx5f3 let1)
  let let30 := (binrel% GE.ge let5 let1)
  let let31 := (And let30 let29)
  let let32 := (binrel% GE.ge xx5f4 let1)
  let let33 := (binrel% GE.ge let14 let1)
  let let34 := (binrel% GE.ge xx5f1 let1)
  let let35 := (binrel% GE.ge let20 let1)
  let let36 := (Not xx5f5)
  let let37 := (binrel% GE.ge xx5f8 let1)
  let let38 := (binrel% GE.ge let26 let1)
  let let39 := (And (And let38 let37) (And let36 (And xx5f9 (And (And let35 let34) (And (And let33 let32) let31)))))
  let let40 := (Or let39 let28)
  let let41 := (binrel% GE.ge xx5f6 let1)
  let let42 := (Rat.ofInt 1)
  let let43 := (Rat.ofInt 0)
  let let44 := (smtIte xx5f5 let43 let42 Rat)
  let let45 := (binrel% GE.ge let44 let1)
  let let46 := (binrel% HMul.hMul let4 let44)
  let let47 := (binrel% GE.ge let46 let4)
  let let48 := (And let47 (And let45 (And let41 (And let40 let9))))
  let let49 := (Eq xx5f2 xx5f3)
  let let50 := (Eq xx5f2 xx5f4)
  let let51 := (Eq xx5f1 xx5f2)
  let let52 := (Eq xx5f8 (Rat.ofInt 2))
  let let53 := (And let52 (And xx5f5 (And let23 (And let22 (And let51 (And let50 (And let49 let10)))))))
  let let54 := (Eq xx5f3 let43)
  let let55 := (Eq xx5f4 let43)
  let let56 := (Eq xx5f1 let43)
  let let57 := (And let56 (And let55 let54))
  let let58 := (And xx5f9 let57)
  let let59 := (Eq xx5f8 let43)
  let let60 := (And let59 (And let36 let58))
  let let61 := (Or let60 let53)
  let let62 := (And let61 let9)
  let let63 := (And let47 (And let45 (And let41 let62)))
  let let64 := (binrel% GE.ge let15 let43)
  let let65 := (Neg.neg let42)
  let let66 := (binrel% HMul.hMul let65 let15)
  let let67 := (binrel% HAdd.hAdd xx5f2 (binrel% HAdd.hAdd let14 let17))
  let let68 := (Eq xx5f4 xx5f2)
  let let69 := (Eq let44 let44)
  let let70 := (Eq let69 True)
  let let71 := (binrel% HAdd.hAdd let43 xx5f2)
  let let72 := (binrel% HMul.hMul let4 xx5f7)
  let let73 := (binrel% GE.ge let72 let4)
  let let74 := (binrel% LE.le xx5f7 let42)
  let let75 := (binrel% GE.ge xx5f6 let43)
  let let76 := (binrel% LE.le xx5f2 let42)
  let let77 := (Or False let22)
  let let78 := (Rat.ofInt 60)
  let let79 := (binrel% LT.lt let43 let78)
  let let80 := (Not True)
  let let81 := (binrel% HMul.hMul let2 xx5f3)
  let let82 := (Rat.ofInt 20)
  let let83 := (binrel% HMul.hMul xx5f3 let82)
  let let84 := (binrel% LT.lt let65 let1)
  let let85 := (smtIte xx5f0 let43 let71 Rat)
  let let86 := (Not xx5f0)
  let let87 := (smtIte let86 let71 let43 Rat)
  let let88 := (binrel% LE.le let43 let43)
  let let89 := (And let27 (And let25 (And xx5f5 (And let23 (And let22 (And let21 (And let19 (And let18 (And let16 (And let13 (And let11 let10)))))))))))
  let let90 := (Not let41)
  let let91 := (Not let90)
  let let92 := (And let47 (And let45 (And True (And let41 (And True let62)))))
  let let93 := (binrel% GE.ge xx5f4 let78)
  let let94 := (Neg.neg let78)
  let let95 := (binrel% HMul.hMul let65 let78)
  let let96 := (And False False)
  let let97 := (And let59 (And let36 (And True let58)))
  let let98 := (binrel% GE.ge xx5f2 let43)
  let let99 := (Not let98)
  let let100 := (binrel% LT.lt xx5f2 let43)
  let let101 := (binrel% HMul.hMul let43 let82)
  let let102 := (Eq xx5f3 xx5f2)
  let let103 := (Eq xx5f0 xx5f9)
  let let104 := (smtIte xx5f0 let43 xx5f2 Rat)
  let let105 := (Eq xx5f3 let104)
  let let106 := (Or xx5f0 let22)
  let let107 := (And let52 (And xx5f5 (And let23 (And let106 (And let51 (And let50 (And let105 let103)))))))
  let let108 := (And let59 (And let36 (And let86 let58)))
  let let109 := (Or let108 let107)
  let let110 := (Or let108 (Or False let107))
  let let111 := (binrel% HMul.hMul let65 xx5f4)
  let let112 := (smtIte False let43 xx5f2 Rat)
  let let113 := (binrel% HMul.hMul let42 let42)
  let let114 := (Not let8)
  let let115 := (Not let114)
  let let116 := (Eq let69 let69)
  let let117 := (And let38 (And let37 (And let36 (And xx5f9 (And let35 (And let34 (And let33 (And let32 let31))))))))
  let let118 := (Eq xx5f9 xx5f0)
  let let119 := (Or let9 False)
  let let120 := (Eq xx5f3 let87)
  let let121 := (Eq xx5f4 let71)
  let let122 := (Eq xx5f1 let71)
  let let123 := (binrel% LE.le let71 let42)
  let let124 := (Or xx5f0 let123)
  let let125 := (Not let100)
  let let126 := (And let52 (And xx5f5 (And let125 (And let124 (And let122 (And let121 (And let120 let118)))))))
  let let127 := (And (And (And (And (And (And (And let52 xx5f5) let125) let124) let122) let121) let120) let118)
  let let128 := (Not let23)
  let let129 := (Not let128)
  let let130 := (Not let76)
  let let131 := (binrel% GT.gt xx5f2 let42)
  let let132 := (Eq let131 let130)
  let let133 := (binrel% LT.lt let43 (Rat.ofInt 30))
  let let134 := (Not let133)
  let let135 := (Eq xx5f8 let42)
  let let136 := (And (And (And (And (And (And (And let135 let36) xx5f0) let134) let10) let56) let55) let54)
  let let137 := (And (And (And (And (And (And let59 let36) let86) xx5f9) let56) let55) let54)
  let let138 := (Or let137 (Or let136 let127))
  let let139 := (Or (Or let137 let136) let127)
  let let140 := (And let10 let57)
  let let141 := (And let135 (And let36 (And xx5f0 (And False let140))))
  let let142 := (binrel% LE.le let81 xx5f4)
  let let143 := (Neg.neg (Rat.ofInt 59))
  let let144 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let94 let43))
  let let145 := (Eq xx5f7 let44)
  let let146 := (binrel% GE.ge xx5f7 let1)
  let let147 := (And let73 (And let146 (And let86 (And let41 (And let145 (And let109 let9))))))
  let let148 := (And let135 (And let36 (And xx5f0 (And let134 let140))))
  let let149 := (Not let75)
  let let150 := (binrel% LT.lt xx5f6 let43)
  let let151 := (binrel% GE.ge xx5f7 let43)
  let let152 := (binrel% LE.le let101 let43)
  let let153 := (Not let152)
  let let154 := (Not let79)
  let let155 := (And let154 let153)
  let let156 := (binrel% LE.le let83 xx5f4)
  let let157 := (Not let156)
  let let158 := (binrel% LT.lt xx5f4 let78)
  let let159 := (Not let158)
  let let160 := (And let159 let157)
  let let161 := (Or let160 let155)
  let let162 := (Not let150)
  let let163 := (And let74 (And let151 (And let86 (And let162 (And let145 (And let139 let161))))))
  let let164 := (And (And (And (And (And (And let74 let151) let86) let162) let145) let139) let161)
  let let165 := (binrel% HMul.hMul let65 let43)
  let let166 := (Eq xx5f0 False)
  let let167 := (Not let93)
  let let168 := (binrel% HMul.hMul let42 let43)
  let let169 := (binrel% LE.le let43 let94)
  let let170 := (binrel% HAdd.hAdd let43 let94)
  let let171 := (binrel% HMul.hMul let42 xx5f2)
  let let172 := (binrel% HAdd.hAdd xx5f4 let14)
  let let173 := (binrel% HMul.hMul let42 xx5f4)
  let let174 := (binrel% LE.le xx5f4 let43)
  let let175 := (Eq False xx5f9)
  let let176 := (binrel% GT.gt let42 let1)
  let let177 := (Not False)
  let let178 := (binrel% LE.le let43 let143)
  let let179 := (Or let117 let89)
  let let180 := (And let47 (And let45 (And let41 (And let179 let9))))
  let let181 := (Eq let48 let180)
  let let182 := (Eq let7 let7)
  let let183 := (Eq let8 let8)
  let let184 := (Eq And And)
  let let185 := (Eq let41 let41)
  let let186 := (Eq let45 let45)
  let let187 := (Eq let1 let1)
  let let188 := (Eq let47 let47)
  let let189 := (Eq let4 let4)
  let let190 := (Eq xx5f3 let112)
  let let191 := (And let52 (And xx5f5 (And let23 (And let77 (And let51 (And let50 (And let190 let175)))))))
  let let192 := (And let59 (And let36 (And let177 let58)))
  let let193 := (Or let192 let191)
  let let194 := (And let47 (And let45 (And let177 (And let41 (And let69 (And let193 let9))))))
  let let195 := (Eq xx5f3 xx5f3)
  let let196 := (Eq let50 let50)
  let let197 := (Eq let51 let51)
  let let198 := (Eq let23 let23)
  let let199 := (Eq xx5f5 xx5f5)
  let let200 := (Eq let52 let52)
  let let201 := (Eq let54 let54)
  let let202 := (Eq let55 let55)
  let let203 := (Eq let56 let56)
  let let204 := (Eq xx5f9 xx5f9)
  let let205 := (Eq let36 let36)
  let let206 := (Eq let59 let59)
  let let207 := (Eq let163 let147)
  let let208 := (Eq let43 let43)
  let let209 := (Not let117)
  let let210 := (Not let33)
  let let211 := (binrel% HAdd.hAdd let168 let95)
  let let212 := (binrel% HAdd.hAdd let173 let111)
  let let213 := (binrel% LE.le let212 let211)
  let let214 := (binrel% LE.le let111 let95)
  let let215 := (And let84 let93)
  let let216 := (Implies let215 let214)
  let let217 := (Eq let8 let93)
  let let218 := (binrel% LE.le let173 let168)
  let let219 := (And let176 let174)
  let let220 := (Not let89)
  let let221 := (Not let16)
  let let222 := (Not let22)
  let let223 := (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd let95 let165))
  let let224 := (binrel% HAdd.hAdd let171 (binrel% HAdd.hAdd let111 let66))
  let let225 := (binrel% LE.le let224 let223)
  let let226 := (binrel% LE.le let66 let165)
  let let227 := (And let84 let64)
  let let228 := (binrel% LE.le let171 let113)
  let let229 := (And let176 let76)
(Eq let63 let48) → (Eq let64 let16) → (Eq let66 let17) → (Eq let67 let43) → (Eq let68 let50) → let70 → (Eq let71 xx5f2) → (Eq let74 let73) → (Eq let75 let41) → (Eq let76 let22) → (Eq let77 let22) → (Eq let79 True) → (Eq let80 False) → (Eq let83 let81) → (Eq let84 True) → (Eq let87 let85) → (Eq let88 True) → (Eq let28 let89) → (Eq let91 let41) → (Eq let92 let63) → (Eq let93 let8) → (Eq let95 let94) → (Eq let96 False) → (Eq let97 let60) → (Eq let100 let99) → (Eq let101 let43) → (Eq let102 let49) → (Eq let110 let109) → (Eq let111 let14) → (Eq let112 xx5f2) → (Eq let113 let42) → (Eq let115 let8) → let116 → (Eq let39 let117) → (Eq let118 let103) → (Eq let119 let9) → (Eq let127 let126) → (Eq let129 let23) → let132 → (Eq let98 let23) → (Eq let139 let138) → (Eq let141 False) → (Eq let142 let6) → (Eq let144 let143) → (Eq let133 True) → (Eq let147 let147) → (Eq let136 let148) → (Eq let137 let108) → (Eq let150 let149) → (Eq let151 let146) → (Eq let164 let163) → (Eq let165 let43) → (Eq let166 let86) → (Eq let158 let167) → (Eq let168 let43) → (Eq let169 False) → (Eq let170 let94) → (Eq let171 xx5f2) → (Eq let172 let43) → (Eq let173 xx5f4) → (Eq let174 let33) → (Eq let175 let10) → (Eq let176 True) → (Eq let177 True) → (Eq let178 False) → let164 → False :=
  let let1 := (Int.ofNat 0)
  let let2 := (Int.ofNat 20)
  let let3 := (Int.ofNat 1)
  let let4 := (Neg.neg let3)
  let let5 := (binrel% HMul.hMul let4 xx5f3)
  let let6 := (binrel% GE.ge (binrel% HAdd.hAdd let5 (binrel% HMul.hMul (binrel% HDiv.hDiv let3 let2) xx5f4)) let1)
  let let7 := (Not let6)
  let let8 := (binrel% GE.ge xx5f4 (Int.ofNat 60))
  let let9 := (And let8 let7)
  let let10 := (Not xx5f9)
  let let11 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f2 let5) let1)
  let let12 := (binrel% HMul.hMul let4 xx5f2)
  let let13 := (binrel% GE.ge (binrel% HAdd.hAdd let12 xx5f3) let1)
  let let14 := (binrel% HMul.hMul let4 xx5f4)
  let let15 := (binrel% HAdd.hAdd xx5f2 let14)
  let let16 := (binrel% GE.ge let15 let1)
  let let17 := (binrel% HAdd.hAdd let12 xx5f4)
  let let18 := (binrel% GE.ge let17 let1)
  let let19 := (binrel% GE.ge (binrel% HAdd.hAdd xx5f1 let12) let1)
  let let20 := (binrel% HMul.hMul let4 xx5f1)
  let let21 := (binrel% GE.ge (binrel% HAdd.hAdd let20 xx5f2) let1)
  let let22 := (binrel% GE.ge let12 let4)
  let let23 := (binrel% GE.ge xx5f2 let1)
  let let24 := (Int.ofNat 2)
  let let25 := (binrel% GE.ge xx5f8 let24)
  let let26 := (binrel% HMul.hMul let4 xx5f8)
  let let27 := (binrel% GE.ge let26 (Neg.neg let24))
  let let28 := (And (And let27 let25) (And xx5f5 (And let23 (And let22 (And (And let21 let19) (And (And let18 let16) (And (And let13 let11) let10)))))))
  let let29 := (binrel% GE.ge xx5f3 let1)
  let let30 := (binrel% GE.ge let5 let1)
  let let31 := (And let30 let29)
  let let32 := (binrel% GE.ge xx5f4 let1)
  let let33 := (binrel% GE.ge let14 let1)
  let let34 := (binrel% GE.ge xx5f1 let1)
  let let35 := (binrel% GE.ge let20 let1)
  let let36 := (Not xx5f5)
  let let37 := (binrel% GE.ge xx5f8 let1)
  let let38 := (binrel% GE.ge let26 let1)
  let let39 := (And (And let38 let37) (And let36 (And xx5f9 (And (And let35 let34) (And (And let33 let32) let31)))))
  let let40 := (Or let39 let28)
  let let41 := (binrel% GE.ge xx5f6 let1)
  let let42 := (Rat.ofInt 1)
  let let43 := (Rat.ofInt 0)
  let let44 := (smtIte xx5f5 let43 let42 Rat)
  let let45 := (binrel% GE.ge let44 let1)
  let let46 := (binrel% HMul.hMul let4 let44)
  let let47 := (binrel% GE.ge let46 let4)
  let let48 := (And let47 (And let45 (And let41 (And let40 let9))))
  let let49 := (Eq xx5f2 xx5f3)
  let let50 := (Eq xx5f2 xx5f4)
  let let51 := (Eq xx5f1 xx5f2)
  let let52 := (Eq xx5f8 (Rat.ofInt 2))
  let let53 := (And let52 (And xx5f5 (And let23 (And let22 (And let51 (And let50 (And let49 let10)))))))
  let let54 := (Eq xx5f3 let43)
  let let55 := (Eq xx5f4 let43)
  let let56 := (Eq xx5f1 let43)
  let let57 := (And let56 (And let55 let54))
  let let58 := (And xx5f9 let57)
  let let59 := (Eq xx5f8 let43)
  let let60 := (And let59 (And let36 let58))
  let let61 := (Or let60 let53)
  let let62 := (And let61 let9)
  let let63 := (And let47 (And let45 (And let41 let62)))
  let let64 := (binrel% GE.ge let15 let43)
  let let65 := (Neg.neg let42)
  let let66 := (binrel% HMul.hMul let65 let15)
  let let67 := (binrel% HAdd.hAdd xx5f2 (binrel% HAdd.hAdd let14 let17))
  let let68 := (Eq xx5f4 xx5f2)
  let let69 := (Eq let44 let44)
  let let70 := (Eq let69 True)
  let let71 := (binrel% HAdd.hAdd let43 xx5f2)
  let let72 := (binrel% HMul.hMul let4 xx5f7)
  let let73 := (binrel% GE.ge let72 let4)
  let let74 := (binrel% LE.le xx5f7 let42)
  let let75 := (binrel% GE.ge xx5f6 let43)
  let let76 := (binrel% LE.le xx5f2 let42)
  let let77 := (Or False let22)
  let let78 := (Rat.ofInt 60)
  let let79 := (binrel% LT.lt let43 let78)
  let let80 := (Not True)
  let let81 := (binrel% HMul.hMul let2 xx5f3)
  let let82 := (Rat.ofInt 20)
  let let83 := (binrel% HMul.hMul xx5f3 let82)
  let let84 := (binrel% LT.lt let65 let1)
  let let85 := (smtIte xx5f0 let43 let71 Rat)
  let let86 := (Not xx5f0)
  let let87 := (smtIte let86 let71 let43 Rat)
  let let88 := (binrel% LE.le let43 let43)
  let let89 := (And let27 (And let25 (And xx5f5 (And let23 (And let22 (And let21 (And let19 (And let18 (And let16 (And let13 (And let11 let10)))))))))))
  let let90 := (Not let41)
  let let91 := (Not let90)
  let let92 := (And let47 (And let45 (And True (And let41 (And True let62)))))
  let let93 := (binrel% GE.ge xx5f4 let78)
  let let94 := (Neg.neg let78)
  let let95 := (binrel% HMul.hMul let65 let78)
  let let96 := (And False False)
  let let97 := (And let59 (And let36 (And True let58)))
  let let98 := (binrel% GE.ge xx5f2 let43)
  let let99 := (Not let98)
  let let100 := (binrel% LT.lt xx5f2 let43)
  let let101 := (binrel% HMul.hMul let43 let82)
  let let102 := (Eq xx5f3 xx5f2)
  let let103 := (Eq xx5f0 xx5f9)
  let let104 := (smtIte xx5f0 let43 xx5f2 Rat)
  let let105 := (Eq xx5f3 let104)
  let let106 := (Or xx5f0 let22)
  let let107 := (And let52 (And xx5f5 (And let23 (And let106 (And let51 (And let50 (And let105 let103)))))))
  let let108 := (And let59 (And let36 (And let86 let58)))
  let let109 := (Or let108 let107)
  let let110 := (Or let108 (Or False let107))
  let let111 := (binrel% HMul.hMul let65 xx5f4)
  let let112 := (smtIte False let43 xx5f2 Rat)
  let let113 := (binrel% HMul.hMul let42 let42)
  let let114 := (Not let8)
  let let115 := (Not let114)
  let let116 := (Eq let69 let69)
  let let117 := (And let38 (And let37 (And let36 (And xx5f9 (And let35 (And let34 (And let33 (And let32 let31))))))))
  let let118 := (Eq xx5f9 xx5f0)
  let let119 := (Or let9 False)
  let let120 := (Eq xx5f3 let87)
  let let121 := (Eq xx5f4 let71)
  let let122 := (Eq xx5f1 let71)
  let let123 := (binrel% LE.le let71 let42)
  let let124 := (Or xx5f0 let123)
  let let125 := (Not let100)
  let let126 := (And let52 (And xx5f5 (And let125 (And let124 (And let122 (And let121 (And let120 let118)))))))
  let let127 := (And (And (And (And (And (And (And let52 xx5f5) let125) let124) let122) let121) let120) let118)
  let let128 := (Not let23)
  let let129 := (Not let128)
  let let130 := (Not let76)
  let let131 := (binrel% GT.gt xx5f2 let42)
  let let132 := (Eq let131 let130)
  let let133 := (binrel% LT.lt let43 (Rat.ofInt 30))
  let let134 := (Not let133)
  let let135 := (Eq xx5f8 let42)
  let let136 := (And (And (And (And (And (And (And let135 let36) xx5f0) let134) let10) let56) let55) let54)
  let let137 := (And (And (And (And (And (And let59 let36) let86) xx5f9) let56) let55) let54)
  let let138 := (Or let137 (Or let136 let127))
  let let139 := (Or (Or let137 let136) let127)
  let let140 := (And let10 let57)
  let let141 := (And let135 (And let36 (And xx5f0 (And False let140))))
  let let142 := (binrel% LE.le let81 xx5f4)
  let let143 := (Neg.neg (Rat.ofInt 59))
  let let144 := (binrel% HAdd.hAdd let42 (binrel% HAdd.hAdd let94 let43))
  let let145 := (Eq xx5f7 let44)
  let let146 := (binrel% GE.ge xx5f7 let1)
  let let147 := (And let73 (And let146 (And let86 (And let41 (And let145 (And let109 let9))))))
  let let148 := (And let135 (And let36 (And xx5f0 (And let134 let140))))
  let let149 := (Not let75)
  let let150 := (binrel% LT.lt xx5f6 let43)
  let let151 := (binrel% GE.ge xx5f7 let43)
  let let152 := (binrel% LE.le let101 let43)
  let let153 := (Not let152)
  let let154 := (Not let79)
  let let155 := (And let154 let153)
  let let156 := (binrel% LE.le let83 xx5f4)
  let let157 := (Not let156)
  let let158 := (binrel% LT.lt xx5f4 let78)
  let let159 := (Not let158)
  let let160 := (And let159 let157)
  let let161 := (Or let160 let155)
  let let162 := (Not let150)
  let let163 := (And let74 (And let151 (And let86 (And let162 (And let145 (And let139 let161))))))
  let let164 := (And (And (And (And (And (And let74 let151) let86) let162) let145) let139) let161)
  let let165 := (binrel% HMul.hMul let65 let43)
  let let166 := (Eq xx5f0 False)
  let let167 := (Not let93)
  let let168 := (binrel% HMul.hMul let42 let43)
  let let169 := (binrel% LE.le let43 let94)
  let let170 := (binrel% HAdd.hAdd let43 let94)
  let let171 := (binrel% HMul.hMul let42 xx5f2)
  let let172 := (binrel% HAdd.hAdd xx5f4 let14)
  let let173 := (binrel% HMul.hMul let42 xx5f4)
  let let174 := (binrel% LE.le xx5f4 let43)
  let let175 := (Eq False xx5f9)
  let let176 := (binrel% GT.gt let42 let1)
  let let177 := (Not False)
  let let178 := (binrel% LE.le let43 let143)
  let let179 := (Or let117 let89)
  let let180 := (And let47 (And let45 (And let41 (And let179 let9))))
  let let181 := (Eq let48 let180)
  let let182 := (Eq let7 let7)
  let let183 := (Eq let8 let8)
  let let184 := (Eq And And)
  let let185 := (Eq let41 let41)
  let let186 := (Eq let45 let45)
  let let187 := (Eq let1 let1)
  let let188 := (Eq let47 let47)
  let let189 := (Eq let4 let4)
  let let190 := (Eq xx5f3 let112)
  let let191 := (And let52 (And xx5f5 (And let23 (And let77 (And let51 (And let50 (And let190 let175)))))))
  let let192 := (And let59 (And let36 (And let177 let58)))
  let let193 := (Or let192 let191)
  let let194 := (And let47 (And let45 (And let177 (And let41 (And let69 (And let193 let9))))))
  let let195 := (Eq xx5f3 xx5f3)
  let let196 := (Eq let50 let50)
  let let197 := (Eq let51 let51)
  let let198 := (Eq let23 let23)
  let let199 := (Eq xx5f5 xx5f5)
  let let200 := (Eq let52 let52)
  let let201 := (Eq let54 let54)
  let let202 := (Eq let55 let55)
  let let203 := (Eq let56 let56)
  let let204 := (Eq xx5f9 xx5f9)
  let let205 := (Eq let36 let36)
  let let206 := (Eq let59 let59)
  let let207 := (Eq let163 let147)
  let let208 := (Eq let43 let43)
  let let209 := (Not let117)
  let let210 := (Not let33)
  let let211 := (binrel% HAdd.hAdd let168 let95)
  let let212 := (binrel% HAdd.hAdd let173 let111)
  let let213 := (binrel% LE.le let212 let211)
  let let214 := (binrel% LE.le let111 let95)
  let let215 := (And let84 let93)
  let let216 := (Implies let215 let214)
  let let217 := (Eq let8 let93)
  let let218 := (binrel% LE.le let173 let168)
  let let219 := (And let176 let174)
  let let220 := (Not let89)
  let let221 := (Not let16)
  let let222 := (Not let22)
  let let223 := (binrel% HAdd.hAdd let113 (binrel% HAdd.hAdd let95 let165))
  let let224 := (binrel% HAdd.hAdd let171 (binrel% HAdd.hAdd let111 let66))
  let let225 := (binrel% LE.le let224 let223)
  let let226 := (binrel% LE.le let66 let165)
  let let227 := (And let84 let64)
  let let228 := (binrel% LE.le let171 let113)
  let let229 := (And let176 let76)
fun lean_h0 : (Eq let63 let48) => -- PREPROCESS
fun lean_r1 : (Eq let64 let16) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let66 let17) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let67 let43) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq let68 let50) => -- THEORY_REWRITE_ARITH
fun lean_r5 : let70 => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq let71 xx5f2) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq let74 let73) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq let75 let41) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let76 let22) => -- THEORY_REWRITE_ARITH
fun lean_r10 : (Eq let77 let22) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let79 True) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq let80 False) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let83 let81) => -- THEORY_REWRITE_ARITH
fun lean_r14 : (Eq let84 True) => -- EVALUATE
fun lean_r15 : (Eq let87 let85) => -- THEORY_REWRITE_BOOL
fun lean_r16 : (Eq let88 True) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq let28 let89) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq let91 let41) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let92 let63) => -- THEORY_REWRITE_BOOL
fun lean_r20 : (Eq let93 let8) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq let95 let94) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq let96 False) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let97 let60) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let100 let99) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let101 let43) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq let102 let49) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq let110 let109) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let111 let14) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let112 xx5f2) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let113 let42) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let115 let8) => -- THEORY_REWRITE_BOOL
fun lean_r32 : let116 => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq let39 let117) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let118 let103) => -- THEORY_REWRITE_BOOL
fun lean_r35 : (Eq let119 let9) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let127 let126) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let129 let23) => -- THEORY_REWRITE_BOOL
fun lean_r38 : let132 => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq let98 let23) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let139 let138) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let141 False) => -- THEORY_REWRITE_BOOL
fun lean_r42 : (Eq let142 let6) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq let144 let143) => -- THEORY_REWRITE_ARITH
fun lean_r44 : (Eq let133 True) => -- THEORY_REWRITE_ARITH
fun lean_r45 : (Eq let147 let147) => -- THEORY_REWRITE_BOOL
fun lean_r46 : (Eq let136 let148) => -- THEORY_REWRITE_BOOL
fun lean_r47 : (Eq let137 let108) => -- THEORY_REWRITE_BOOL
fun lean_r48 : (Eq let150 let149) => -- THEORY_REWRITE_ARITH
fun lean_r49 : (Eq let151 let146) => -- THEORY_REWRITE_ARITH
fun lean_r50 : (Eq let164 let163) => -- THEORY_REWRITE_BOOL
fun lean_r51 : (Eq let165 let43) => -- THEORY_REWRITE_ARITH
fun lean_r52 : (Eq let166 let86) => -- THEORY_REWRITE_BOOL
fun lean_r53 : (Eq let158 let167) => -- THEORY_REWRITE_ARITH
fun lean_r54 : (Eq let168 let43) => -- THEORY_REWRITE_ARITH
fun lean_r55 : (Eq let169 False) => -- THEORY_REWRITE_ARITH
fun lean_r56 : (Eq let170 let94) => -- THEORY_REWRITE_ARITH
fun lean_r57 : (Eq let171 xx5f2) => -- THEORY_REWRITE_ARITH
fun lean_r58 : (Eq let172 let43) => -- THEORY_REWRITE_ARITH
fun lean_r59 : (Eq let173 xx5f4) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let174 let33) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let175 let10) => -- THEORY_REWRITE_BOOL
fun lean_r62 : (Eq let176 True) => -- EVALUATE
fun lean_r63 : (Eq let177 True) => -- THEORY_REWRITE_BOOL
fun lean_r64 : (Eq let178 False) => -- THEORY_REWRITE_ARITH
fun lean_a65 : let164 => by
have lean_s0 : (Or let221 (Or let114 (Or let222 False))) :=
  (scope (fun lean_a66 : let16 =>
    (scope (fun lean_a67 : let8 =>
      (scope (fun lean_a68 : let22 =>
        have lean_s0 : (Eq let22 let76) := by timed Eq.symm lean_r9
        have lean_s1 : let76 := by timed eqResolve lean_a68 lean_s0
        have lean_s2 : (Or let130 False) :=
          (scope (fun lean_a69 : let76 =>
            have lean_s2 : let176 := by timed trueElim lean_r62
            have lean_s3 : let229 := by timed And.intro lean_s2 lean_a69
            have lean_s4 : (Implies let229 let228) := by arithMulPos [xx5f2, let42, let42], 1
            have lean_s5 : let228 := by timed modusPonens lean_s3 lean_s4
            have lean_s6 : let84 := by timed trueElim lean_r14
            have lean_s7 : let217 := by timed Eq.symm lean_r20
            have lean_s8 : let93 := by timed eqResolve lean_a67 lean_s7
            have lean_s9 : let215 := by timed And.intro lean_s6 lean_s8
            have lean_s10 : let216 := by arithMulNeg [xx5f4, let78, let65], 3
            have lean_s11 : let214 := by timed modusPonens lean_s9 lean_s10
            have lean_s12 : (Eq let16 let64) := by timed Eq.symm lean_r1
            have lean_s13 : let64 := by timed eqResolve lean_a66 lean_s12
            have lean_s14 : let227 := by timed And.intro lean_s6 lean_s13
            have lean_s15 : (Implies let227 let226) := by arithMulNeg [let15, let43, let65], 3
            have lean_s16 : let226 := by timed modusPonens lean_s14 lean_s15
            have lean_s17 : let225 := by sumBounds [lean_s5, lean_s11, lean_s16]
            let lean_s18 := by timed congrHAdd lean_r28 lean_r2
            have lean_s19 : (Eq let224 let67) := by timed congrHAdd lean_r57 lean_s18
            have lean_s20 : (Eq let224 let43) := by timed Eq.trans lean_s19 lean_r3
            let lean_s21 := by timed flipCongrArg lean_s20 [LE.le]
            let lean_s22 := by timed congrHAdd lean_r21 lean_r51
            have lean_s23 : (Eq let223 let144) := by timed congrHAdd lean_r30 lean_s22
            have lean_s24 : (Eq let223 let143) := by timed Eq.trans lean_s23 lean_r43
            have lean_s25 : (Eq let225 let178) := by timed congr lean_s21 lean_s24
            have lean_s26 : (Eq let225 False) := by timed Eq.trans lean_s25 lean_r64
            show False from by timed eqResolve lean_s17 lean_s26
          ))
        have lean_s3 : let130 := by liftOrNToNeg lean_s2
        have lean_s4 : (Eq let130 let222) := by timed flipCongrArg lean_r9 [Not]
        have lean_s5 : (Eq let131 let222) := by timed Eq.trans lean_r38 lean_s4
        have lean_s6 : (Eq let222 let131) := by timed Eq.symm lean_s5
        have lean_s7 : (Eq let130 let131) := by timed Eq.trans lean_s4 lean_s6
        have lean_s8 : let131 := by timed eqResolve lean_s3 lean_s7
        have lean_s9 : (Eq let222 let130) := by timed Eq.symm lean_s4
        have lean_s10 : let132 := by timed Eq.trans lean_s5 lean_s9
        have lean_s11 : let130 := by timed eqResolve lean_s8 lean_s10
        show False from by timed contradiction lean_s1 lean_s11
  ))))))
have lean_s1 : (Not (And let16 (And let8 let22))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or let221 (Or let114 let222)) := by timed flipNotAnd lean_s1 [let16, let8, let22]
have lean_s3 : (Or let114 (Or let222 let221)) := by permutateOr lean_s2, [1, 2, 0], (- 1)
have lean_s4 : (Or let220 let16) := by timed @cnfAndPos [let27, let25, xx5f5, let23, let22, let21, let19, let18, let16, let13, let11, let10] 8
have lean_s5 : (Or let16 let220) := by permutateOr lean_s4, [1, 0], (- 1)
have lean_s6 : let184 := by timed rfl
let lean_s7 := by timed congr lean_s6 lean_r7
let lean_s8 := by timed congr lean_s6 lean_r49
have lean_s9 : (Eq let86 let86) := by timed rfl
let lean_s10 := by timed congr lean_s6 lean_s9
have lean_s11 : (Eq let149 let90) := by timed flipCongrArg lean_r8 [Not]
have lean_s12 : (Eq let150 let90) := by timed Eq.trans lean_r48 lean_s11
have lean_s13 : (Eq let162 let91) := by timed flipCongrArg lean_s12 [Not]
have lean_s14 : (Eq let162 let41) := by timed Eq.trans lean_s13 lean_r18
let lean_s15 := by timed congr lean_s6 lean_s14
have lean_s16 : (Eq let145 let145) := by timed rfl
let lean_s17 := by timed congr lean_s6 lean_s16
have lean_s18 : (Eq Or Or) := by timed rfl
let lean_s19 := by timed congr lean_s18 lean_r47
have lean_s20 : let184 := by timed rfl
have lean_s21 : (Eq let135 let135) := by timed rfl
let lean_s22 := by timed congr lean_s20 lean_s21
have lean_s23 : let205 := by timed rfl
let lean_s24 := by timed congr lean_s20 lean_s23
have lean_s25 : (Eq xx5f0 xx5f0) := by timed rfl
let lean_s26 := by timed congr lean_s20 lean_s25
have lean_s27 : (Eq let134 let80) := by timed flipCongrArg lean_r44 [Not]
have lean_s28 : (Eq let134 False) := by timed Eq.trans lean_s27 lean_r12
let lean_s29 := by timed congr lean_s20 lean_s28
have lean_s30 : (Eq let10 let10) := by timed rfl
let lean_s31 := by timed congr lean_s20 lean_s30
have lean_s32 : let203 := by timed rfl
let lean_s33 := by timed congr lean_s20 lean_s32
have lean_s34 : let202 := by timed rfl
let lean_s35 := by timed congr lean_s20 lean_s34
have lean_s36 : let201 := by timed rfl
let lean_s37 := by timed congr lean_s35 lean_s36
let lean_s38 := by timed congr lean_s33 lean_s37
let lean_s39 := by timed congr lean_s31 lean_s38
let lean_s40 := by timed congr lean_s29 lean_s39
let lean_s41 := by timed congr lean_s26 lean_s40
let lean_s42 := by timed congr lean_s24 lean_s41
have lean_s43 : (Eq let148 let141) := by timed congr lean_s22 lean_s42
have lean_s44 : (Eq let148 False) := by timed Eq.trans lean_s43 lean_r41
have lean_s45 : (Eq let136 False) := by timed Eq.trans lean_r46 lean_s44
let lean_s46 := by timed congr lean_s18 lean_s45
have lean_s47 : let184 := by timed rfl
have lean_s48 : let200 := by timed rfl
let lean_s49 := by timed congr lean_s47 lean_s48
have lean_s50 : let199 := by timed rfl
let lean_s51 := by timed congr lean_s47 lean_s50
have lean_s52 : (Eq let99 let128) := by timed flipCongrArg lean_r39 [Not]
have lean_s53 : (Eq let100 let128) := by timed Eq.trans lean_r24 lean_s52
have lean_s54 : (Eq let125 let129) := by timed flipCongrArg lean_s53 [Not]
have lean_s55 : (Eq let125 let23) := by timed Eq.trans lean_s54 lean_r37
let lean_s56 := by timed congr lean_s47 lean_s55
let lean_s57 := by timed flipCongrArg lean_s25 [Or]
let lean_s58 := by timed flipCongrArg lean_r6 [LE.le]
have lean_s59 : (Eq let42 let42) := by timed rfl
have lean_s60 : (Eq let123 let76) := by timed congr lean_s58 lean_s59
have lean_s61 : (Eq let123 let22) := by timed Eq.trans lean_s60 lean_r9
have lean_s62 : (Eq let124 let106) := by timed congr lean_s57 lean_s61
let lean_s63 := by timed congr lean_s47 lean_s62
have lean_s64 : (Eq xx5f1 xx5f1) := by timed rfl
let lean_s65 := by timed flipCongrArg lean_s64 [Eq]
have lean_s66 : (Eq let122 let51) := by timed congr lean_s65 lean_r6
let lean_s67 := by timed congr lean_s47 lean_s66
have lean_s68 : (Eq xx5f4 xx5f4) := by timed rfl
let lean_s69 := by timed flipCongrArg lean_s68 [Eq]
have lean_s70 : (Eq let121 let68) := by timed congr lean_s69 lean_r6
have lean_s71 : (Eq let121 let50) := by timed Eq.trans lean_s70 lean_r4
let lean_s72 := by timed congr lean_s47 lean_s71
have lean_s73 : let195 := by timed rfl
let lean_s74 := by timed flipCongrArg lean_s73 [Eq]
have lean_s75 : let208 := by timed rfl
have lean_s76 : (Eq let85 let104) := by timed congrIte lean_s25 lean_s75 lean_r6
have lean_s77 : (Eq let87 let104) := by timed Eq.trans lean_r15 lean_s76
have lean_s78 : (Eq let120 let105) := by timed congr lean_s74 lean_s77
let lean_s79 := by timed congr lean_s47 lean_s78
let lean_s80 := by timed congr lean_s79 lean_r34
let lean_s81 := by timed congr lean_s72 lean_s80
let lean_s82 := by timed congr lean_s67 lean_s81
let lean_s83 := by timed congr lean_s63 lean_s82
let lean_s84 := by timed congr lean_s56 lean_s83
let lean_s85 := by timed congr lean_s51 lean_s84
have lean_s86 : (Eq let126 let107) := by timed congr lean_s49 lean_s85
have lean_s87 : (Eq let127 let107) := by timed Eq.trans lean_r36 lean_s86
let lean_s88 := by timed congr lean_s46 lean_s87
have lean_s89 : (Eq let138 let110) := by timed congr lean_s19 lean_s88
have lean_s90 : (Eq let138 let109) := by timed Eq.trans lean_s89 lean_r27
have lean_s91 : (Eq let139 let109) := by timed Eq.trans lean_r40 lean_s90
let lean_s92 := by timed congr lean_s6 lean_s91
have lean_s93 : (Eq let167 let114) := by timed flipCongrArg lean_r20 [Not]
have lean_s94 : (Eq let158 let114) := by timed Eq.trans lean_r53 lean_s93
have lean_s95 : (Eq let159 let115) := by timed flipCongrArg lean_s94 [Not]
have lean_s96 : (Eq let159 let8) := by timed Eq.trans lean_s95 lean_r31
let lean_s97 := by timed flipCongrArg lean_s96 [And]
let lean_s98 := by timed flipCongrArg lean_r13 [LE.le]
have lean_s99 : (Eq let156 let142) := by timed congr lean_s98 lean_s68
have lean_s100 : (Eq let156 let6) := by timed Eq.trans lean_s99 lean_r42
have lean_s101 : (Eq let157 let7) := by timed flipCongrArg lean_s100 [Not]
have lean_s102 : (Eq let160 let9) := by timed congr lean_s97 lean_s101
let lean_s103 := by timed flipCongrArg lean_s102 [Or]
have lean_s104 : (Eq let154 let80) := by timed flipCongrArg lean_r11 [Not]
have lean_s105 : (Eq let154 False) := by timed Eq.trans lean_s104 lean_r12
let lean_s106 := by timed flipCongrArg lean_s105 [And]
let lean_s107 := by timed flipCongrArg lean_r25 [LE.le]
have lean_s108 : (Eq let152 let88) := by timed congr lean_s107 lean_s75
have lean_s109 : (Eq let152 True) := by timed Eq.trans lean_s108 lean_r16
have lean_s110 : (Eq let153 let80) := by timed flipCongrArg lean_s109 [Not]
have lean_s111 : (Eq let153 False) := by timed Eq.trans lean_s110 lean_r12
have lean_s112 : (Eq let155 let96) := by timed congr lean_s106 lean_s111
have lean_s113 : (Eq let155 False) := by timed Eq.trans lean_s112 lean_r22
have lean_s114 : (Eq let161 let119) := by timed congr lean_s103 lean_s113
have lean_s115 : (Eq let161 let9) := by timed Eq.trans lean_s114 lean_r35
let lean_s116 := by timed congr lean_s92 lean_s115
let lean_s117 := by timed congr lean_s17 lean_s116
let lean_s118 := by timed congr lean_s15 lean_s117
let lean_s119 := by timed congr lean_s10 lean_s118
let lean_s120 := by timed congr lean_s8 lean_s119
have lean_s121 : let207 := by timed congr lean_s7 lean_s120
have lean_s122 : let207 := by timed Eq.trans lean_s121 lean_r45
have lean_s123 : (Eq let164 let147) := by timed Eq.trans lean_r50 lean_s122
have lean_s124 : let184 := by timed rfl
have lean_s125 : let189 := by timed rfl
let lean_s126 := by timed flipCongrArg lean_s125 [HMul.hMul]
have lean_s127 : let147 := by timed eqResolve lean_a65 lean_s123
have lean_s128 : let86 := by andElim lean_s127, 2
have lean_s129 : (Eq let86 let166) := by timed Eq.symm lean_r52
have lean_s130 : let166 := by timed eqResolve lean_s128 lean_s129
have lean_s131 : let147 := by timed eqResolve lean_a65 lean_s123
have lean_s132 : let145 := by andElim lean_s131, 4
have lean_s133 : (And let166 let145) := by timed And.intro lean_s130 lean_s132
have lean_s134 : let145 := by andElim lean_s133, 1
have lean_s135 : (Eq let72 let46) := by timed congr lean_s126 lean_s134
let lean_s136 := by timed flipCongrArg lean_s135 [GE.ge]
have lean_s137 : (Eq let73 let47) := by timed congr lean_s136 lean_s125
let lean_s138 := by timed congr lean_s124 lean_s137
let lean_s139 := by timed flipCongrArg lean_s134 [GE.ge]
have lean_s140 : let187 := by timed rfl
have lean_s141 : (Eq let146 let45) := by timed congr lean_s139 lean_s140
let lean_s142 := by timed congr lean_s124 lean_s141
have lean_s143 : let166 := by andElim lean_s133, 0
have lean_s144 : (Eq let86 let177) := by timed flipCongrArg lean_s143 [Not]
let lean_s145 := by timed congr lean_s124 lean_s144
have lean_s146 : let185 := by timed rfl
let lean_s147 := by timed congr lean_s124 lean_s146
let lean_s148 := by timed flipCongrArg lean_s134 [Eq]
have lean_s149 : let69 := by timed rfl
have lean_s150 : (Eq let145 let69) := by timed congr lean_s148 lean_s149
let lean_s151 := by timed congr lean_s124 lean_s150
have lean_s152 : let184 := by timed rfl
have lean_s153 : let206 := by timed rfl
let lean_s154 := by timed congr lean_s152 lean_s153
have lean_s155 : let205 := by timed rfl
let lean_s156 := by timed congr lean_s152 lean_s155
let lean_s157 := by timed congr lean_s152 lean_s144
have lean_s158 : let204 := by timed rfl
let lean_s159 := by timed congr lean_s152 lean_s158
have lean_s160 : let203 := by timed rfl
let lean_s161 := by timed congr lean_s152 lean_s160
have lean_s162 : let202 := by timed rfl
let lean_s163 := by timed congr lean_s152 lean_s162
have lean_s164 : let201 := by timed rfl
let lean_s165 := by timed congr lean_s163 lean_s164
let lean_s166 := by timed congr lean_s161 lean_s165
let lean_s167 := by timed congr lean_s159 lean_s166
let lean_s168 := by timed congr lean_s157 lean_s167
let lean_s169 := by timed congr lean_s156 lean_s168
have lean_s170 : (Eq let108 let192) := by timed congr lean_s154 lean_s169
let lean_s171 := by timed flipCongrArg lean_s170 [Or]
have lean_s172 : let184 := by timed rfl
have lean_s173 : let200 := by timed rfl
let lean_s174 := by timed congr lean_s172 lean_s173
have lean_s175 : let199 := by timed rfl
let lean_s176 := by timed congr lean_s172 lean_s175
have lean_s177 : let198 := by timed rfl
let lean_s178 := by timed congr lean_s172 lean_s177
let lean_s179 := by timed flipCongrArg lean_s143 [Or]
have lean_s180 : (Eq let22 let22) := by timed rfl
have lean_s181 : (Eq let106 let77) := by timed congr lean_s179 lean_s180
let lean_s182 := by timed congr lean_s172 lean_s181
have lean_s183 : let197 := by timed rfl
let lean_s184 := by timed congr lean_s172 lean_s183
have lean_s185 : let196 := by timed rfl
let lean_s186 := by timed congr lean_s172 lean_s185
have lean_s187 : let195 := by timed rfl
let lean_s188 := by timed flipCongrArg lean_s187 [Eq]
have lean_s189 : let208 := by timed rfl
have lean_s190 : (Eq xx5f2 xx5f2) := by timed rfl
have lean_s191 : (Eq let104 let112) := by timed congrIte lean_s143 lean_s189 lean_s190
have lean_s192 : (Eq let105 let190) := by timed congr lean_s188 lean_s191
let lean_s193 := by timed congr lean_s172 lean_s192
let lean_s194 := by timed flipCongrArg lean_s143 [Eq]
have lean_s195 : (Eq let103 let175) := by timed congr lean_s194 lean_s158
let lean_s196 := by timed congr lean_s193 lean_s195
let lean_s197 := by timed congr lean_s186 lean_s196
let lean_s198 := by timed congr lean_s184 lean_s197
let lean_s199 := by timed congr lean_s182 lean_s198
let lean_s200 := by timed congr lean_s178 lean_s199
let lean_s201 := by timed congr lean_s176 lean_s200
have lean_s202 : (Eq let107 let191) := by timed congr lean_s174 lean_s201
have lean_s203 : (Eq let109 let193) := by timed congr lean_s171 lean_s202
let lean_s204 := by timed congr lean_s124 lean_s203
have lean_s205 : let183 := by timed rfl
let lean_s206 := by timed congr lean_s124 lean_s205
have lean_s207 : let182 := by timed rfl
let lean_s208 := by timed congr lean_s206 lean_s207
let lean_s209 := by timed congr lean_s204 lean_s208
let lean_s210 := by timed congr lean_s151 lean_s209
let lean_s211 := by timed congr lean_s147 lean_s210
let lean_s212 := by timed congr lean_s145 lean_s211
let lean_s213 := by timed congr lean_s142 lean_s212
have lean_s214 : (Eq let147 let194) := by timed congr lean_s138 lean_s213
have lean_s215 : let184 := by timed rfl
have lean_s216 : let188 := by timed rfl
let lean_s217 := by timed congr lean_s215 lean_s216
have lean_s218 : let186 := by timed rfl
let lean_s219 := by timed congr lean_s215 lean_s218
let lean_s220 := by timed congr lean_s215 lean_r63
have lean_s221 : let185 := by timed rfl
let lean_s222 := by timed congr lean_s215 lean_s221
let lean_s223 := by timed congr lean_s215 lean_r5
have lean_s224 : let184 := by timed rfl
have lean_s225 : let206 := by timed rfl
let lean_s226 := by timed congr lean_s224 lean_s225
let lean_s227 := by timed congr lean_s224 lean_s23
let lean_s228 := by timed congr lean_s224 lean_r63
have lean_s229 : let204 := by timed rfl
let lean_s230 := by timed congr lean_s224 lean_s229
let lean_s231 := by timed congr lean_s224 lean_s32
let lean_s232 := by timed congr lean_s224 lean_s34
let lean_s233 := by timed congr lean_s232 lean_s36
let lean_s234 := by timed congr lean_s231 lean_s233
let lean_s235 := by timed congr lean_s230 lean_s234
let lean_s236 := by timed congr lean_s228 lean_s235
let lean_s237 := by timed congr lean_s227 lean_s236
have lean_s238 : (Eq let192 let97) := by timed congr lean_s226 lean_s237
have lean_s239 : (Eq let192 let60) := by timed Eq.trans lean_s238 lean_r23
let lean_s240 := by timed flipCongrArg lean_s239 [Or]
have lean_s241 : let184 := by timed rfl
let lean_s242 := by timed congr lean_s241 lean_s48
let lean_s243 := by timed congr lean_s241 lean_s50
have lean_s244 : let198 := by timed rfl
let lean_s245 := by timed congr lean_s241 lean_s244
let lean_s246 := by timed congr lean_s241 lean_r10
have lean_s247 : let197 := by timed rfl
let lean_s248 := by timed congr lean_s241 lean_s247
have lean_s249 : let196 := by timed rfl
let lean_s250 := by timed congr lean_s241 lean_s249
let lean_s251 := by timed flipCongrArg lean_s73 [Eq]
have lean_s252 : (Eq let190 let102) := by timed congr lean_s251 lean_r29
have lean_s253 : (Eq let190 let49) := by timed Eq.trans lean_s252 lean_r26
let lean_s254 := by timed congr lean_s241 lean_s253
let lean_s255 := by timed congr lean_s254 lean_r61
let lean_s256 := by timed congr lean_s250 lean_s255
let lean_s257 := by timed congr lean_s248 lean_s256
let lean_s258 := by timed congr lean_s246 lean_s257
let lean_s259 := by timed congr lean_s245 lean_s258
let lean_s260 := by timed congr lean_s243 lean_s259
have lean_s261 : (Eq let191 let53) := by timed congr lean_s242 lean_s260
have lean_s262 : (Eq let193 let61) := by timed congr lean_s240 lean_s261
let lean_s263 := by timed congr lean_s215 lean_s262
have lean_s264 : let183 := by timed rfl
let lean_s265 := by timed congr lean_s215 lean_s264
have lean_s266 : let182 := by timed rfl
let lean_s267 := by timed congr lean_s265 lean_s266
let lean_s268 := by timed congr lean_s263 lean_s267
let lean_s269 := by timed congr lean_s223 lean_s268
let lean_s270 := by timed congr lean_s222 lean_s269
let lean_s271 := by timed congr lean_s220 lean_s270
let lean_s272 := by timed congr lean_s219 lean_s271
have lean_s273 : (Eq let194 let92) := by timed congr lean_s217 lean_s272
have lean_s274 : (Eq let194 let63) := by timed Eq.trans lean_s273 lean_r19
have lean_s275 : (Eq let147 let63) := by timed Eq.trans lean_s214 lean_s274
let lean_s276 := by timed Eq.trans lean_s123 lean_s275
let lean_s277 := by timed Eq.trans lean_s276 lean_h0
have lean_s278 : let184 := by timed rfl
let lean_s279 := by timed congr lean_s278 lean_s216
let lean_s280 := by timed congr lean_s278 lean_s218
let lean_s281 := by timed congr lean_s278 lean_s221
let lean_s282 := by timed flipCongrArg lean_r33 [Or]
have lean_s283 : (Eq let40 let179) := by timed congr lean_s282 lean_r17
let lean_s284 := by timed congr lean_s278 lean_s283
let lean_s285 := by timed congr lean_s278 lean_s264
let lean_s286 := by timed congr lean_s285 lean_s266
let lean_s287 := by timed congr lean_s284 lean_s286
let lean_s288 := by timed congr lean_s281 lean_s287
let lean_s289 := by timed congr lean_s280 lean_s288
have lean_s290 : let181 := by timed congr lean_s279 lean_s289
have lean_s291 : let184 := by timed rfl
have lean_s292 : let189 := by timed rfl
let lean_s293 := by timed flipCongrArg lean_s292 [HMul.hMul]
have lean_s294 : let69 := by timed rfl
let lean_s295 := by timed flipCongrArg lean_s294 [Eq]
have lean_s296 : let69 := by timed rfl
have lean_s297 : let116 := by timed congr lean_s295 lean_s296
let lean_s298 := by timed Eq.trans lean_r32 lean_s297
have lean_s299 : let70 := by timed Eq.trans lean_s298 lean_r5
have lean_s300 : let69 := by timed trueElim lean_s299
have lean_s301 : (Eq let46 let46) := by timed congr lean_s293 lean_s300
let lean_s302 := by timed flipCongrArg lean_s301 [GE.ge]
have lean_s303 : let188 := by timed congr lean_s302 lean_s292
let lean_s304 := by timed congr lean_s291 lean_s303
let lean_s305 := by timed flipCongrArg lean_s300 [GE.ge]
have lean_s306 : let187 := by timed rfl
have lean_s307 : let186 := by timed congr lean_s305 lean_s306
let lean_s308 := by timed congr lean_s291 lean_s307
have lean_s309 : let185 := by timed rfl
let lean_s310 := by timed congr lean_s291 lean_s309
have lean_s311 : (Eq let179 let179) := by timed rfl
let lean_s312 := by timed congr lean_s291 lean_s311
have lean_s313 : let183 := by timed rfl
let lean_s314 := by timed congr lean_s291 lean_s313
have lean_s315 : let182 := by timed rfl
let lean_s316 := by timed congr lean_s314 lean_s315
let lean_s317 := by timed congr lean_s312 lean_s316
let lean_s318 := by timed congr lean_s310 lean_s317
let lean_s319 := by timed congr lean_s308 lean_s318
have lean_s320 : (Eq let180 let180) := by timed congr lean_s304 lean_s319
have lean_s321 : let181 := by timed Eq.trans lean_s290 lean_s320
have lean_s322 : (Eq let164 let180) := by timed Eq.trans lean_s277 lean_s321
have lean_s323 : let180 := by timed eqResolve lean_a65 lean_s322
have lean_s324 : let179 := by andElim lean_s323, 3
have lean_s325 : (Or let209 let33) := by timed @cnfAndPos [let38, let37, let36, xx5f9, let35, let34, let33, let32, let30, let29] 6
have lean_s326 : (Or let33 let209) := by permutateOr lean_s325, [1, 0], (- 1)
have lean_s327 : (Or let114 (Or let210 False)) :=
  (scope (fun lean_a70 : let8 =>
    (scope (fun lean_a71 : let33 =>
      have lean_s327 : let176 := by timed trueElim lean_r62
      have lean_s328 : (Eq let33 let174) := by timed Eq.symm lean_r60
      have lean_s329 : let174 := by timed eqResolve lean_a71 lean_s328
      have lean_s330 : let219 := by timed And.intro lean_s327 lean_s329
      have lean_s331 : (Implies let219 let218) := by arithMulPos [xx5f4, let43, let42], 1
      have lean_s332 : let218 := by timed modusPonens lean_s330 lean_s331
      have lean_s333 : let84 := by timed trueElim lean_r14
      have lean_s334 : let217 := by timed Eq.symm lean_r20
      have lean_s335 : let93 := by timed eqResolve lean_a70 lean_s334
      have lean_s336 : let215 := by timed And.intro lean_s333 lean_s335
      have lean_s337 : let216 := by arithMulNeg [xx5f4, let78, let65], 3
      have lean_s338 : let214 := by timed modusPonens lean_s336 lean_s337
      have lean_s339 : let213 := by sumBounds [lean_s332, lean_s338]
      let lean_s340 := by timed flipCongrArg lean_r59 [HAdd.hAdd]
      have lean_s341 : (Eq let212 let172) := by timed congr lean_s340 lean_r28
      have lean_s342 : (Eq let212 let43) := by timed Eq.trans lean_s341 lean_r58
      let lean_s343 := by timed flipCongrArg lean_s342 [LE.le]
      let lean_s344 := by timed flipCongrArg lean_r54 [HAdd.hAdd]
      have lean_s345 : (Eq let211 let170) := by timed congr lean_s344 lean_r21
      have lean_s346 : (Eq let211 let94) := by timed Eq.trans lean_s345 lean_r56
      have lean_s347 : (Eq let213 let169) := by timed congr lean_s343 lean_s346
      have lean_s348 : (Eq let213 False) := by timed Eq.trans lean_s347 lean_r55
      show False from by timed eqResolve lean_s339 lean_s348
  ))))
have lean_s328 : (Not (And let8 let33)) := by liftOrNToNeg lean_s327
have lean_s329 : (Or let114 let210) := by timed flipNotAnd lean_s328 [let8, let33]
have lean_s330 : let8 := by andElim lean_s323, 4
have lean_s331 : let210 := by R2 lean_s329, lean_s330, let8, [(- 1), 0]
have lean_s332 : let209 := by R1 lean_s326, lean_s331, let33, [(- 1), 0]
have lean_s333 : let89 := by R1 lean_s324, lean_s332, let117, [(- 1), 0]
have lean_s334 : let16 := by R2 lean_s5, lean_s333, let89, [(- 1), 0]
let lean_s335 := by R2 lean_s3, lean_s334, let16, [(- 1), 0]
have lean_s336 : (Or let220 let22) := by timed @cnfAndPos [let27, let25, xx5f5, let23, let22, let21, let19, let18, let16, let13, let11, let10] 4
have lean_s337 : (Or let22 let220) := by permutateOr lean_s336, [1, 0], (- 1)
have lean_s338 : let22 := by R2 lean_s337, lean_s333, let89, [(- 1), 0]
let lean_s339 := by R2 lean_s335, lean_s338, let22, [(- 1), 0]
exact (show False from by R2 lean_s339, lean_s330, let8, [0, 0])


