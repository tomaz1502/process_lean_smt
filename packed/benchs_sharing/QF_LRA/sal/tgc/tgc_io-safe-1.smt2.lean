open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {xx5f25 : Rat}
variable {xx5f20 : Rat}
variable {xx5f28 : Rat}
variable {xx5f19 : Prop}
variable {xx5f28 : Rat}
variable {xx5f23 : Rat}
variable {xx5f13 : Prop}
variable {xx5f14 : Prop}
variable {xx5f14 : Prop}
variable {xx5f3 : Prop}
variable {xx5f2 : Prop}
variable {xx5f31 : Rat}
variable {xx5f15 : Prop}
variable {xx5f5 : Prop}
variable {xx5f2 : Prop}
variable {xx5f11 : Prop}
variable {xx5f3 : Prop}
variable {xx5f4 : Prop}
variable {xx5f9 : Rat}
variable {xx5f18 : Prop}
variable {xx5f16 : Prop}
variable {xx5f19 : Prop}
variable {xx5f16 : Prop}
variable {xx5f17 : Prop}
variable {xx5f13 : Prop}
variable {xx5f24 : Rat}
variable {xx5f4 : Prop}
variable {xx5f17 : Prop}
variable {xx5f26 : Prop}
variable {xx5f9 : Rat}
variable {xx5f29 : Prop}
variable {xx5f0 : Prop}
variable {xx5f27 : Prop}
variable {xx5f8 : Rat}
variable {xx5f30 : Prop}
variable {xx5f1 : Prop}
variable {xx5f10 : Prop}
variable {xx5f21 : Prop}
variable {xx5f18 : Prop}
variable {xx5f22 : Prop}
variable {xx5f10 : Prop}
variable {xx5f1 : Prop}
variable {xx5f11 : Prop}
variable {xx5f23 : Rat}
variable {xx5f0 : Prop}
variable {xx5f5 : Prop}
variable {xx5f25 : Rat}
variable {xx5f24 : Rat}
variable {xx5f7 : Rat}
variable {xx5f29 : Prop}
variable {xx5f7 : Rat}
variable {xx5f8 : Rat}
variable {xx5f15 : Prop}
variable {xx5f30 : Prop}
variable {xx5f12 : Rat}
variable {xx5f31 : Rat}
variable {xx5f26 : Prop}
variable {xx5f27 : Prop}
variable {xx5f21 : Prop}
variable {xx5f22 : Prop}
variable {xx5f6 : Rat}
variable {xx5f12 : Rat}
variable {xx5f20 : Rat}
variable {xx5f6 : Rat}

theorem th0 :
  let let1 := (Or (Not xx5f30) (Not xx5f29))
  let let2 := (Or (Not xx5f27) (Not xx5f26))
  let let3 := (Not xx5f21)
  let let4 := (Not xx5f22)
  let let5 := (Or let4 let3)
  let let6 := (Not xx5f10)
  let let7 := (Not xx5f11)
  let let8 := (Or let7 let6)
  let let9 := (And let8 (And let5 (And let2 let1)))
  let let10 := (Not xx5f5)
  let let11 := (Or xx5f4 let10)
  let let12 := (Not xx5f0)
  let let13 := (And (And let12 xx5f1) let11)
  let let14 := (Not xx5f17)
  let let15 := (Or xx5f16 let14)
  let let16 := (Not xx5f18)
  let let17 := (And (And let16 xx5f19) let15)
  let let18 := (Or let17 let13)
  let let19 := (Eq xx5f8 xx5f9)
  let let20 := (Eq xx5f17 xx5f5)
  let let21 := (Eq xx5f16 xx5f4)
  let let22 := (And let21 let20)
  let let23 := (Rat.ofInt 0)
  let let24 := (Eq xx5f12 let23)
  let let25 := (Not xx5f15)
  let let26 := (Rat.ofInt 5)
  let let27 := (Eq xx5f31 let26)
  let let28 := (And (And (And (And (And (And let27 let25) let3) xx5f22) let24) let22) let19)
  let let29 := (binrel% HAdd.hAdd let23 xx5f6)
  let let30 := (Eq xx5f12 let29)
  let let31 := (Rat.ofInt 2)
  let let32 := (binrel% LE.le let29 let31)
  let let33 := (Not xx5f4)
  let let34 := (Or (Or let33 let10) let32)
  let let35 := (Rat.ofInt 1)
  let let36 := (binrel% LE.le let29 let35)
  let let37 := (Or (Or let33 xx5f5) let36)
  let let38 := (Rat.ofInt 4)
  let let39 := (Eq xx5f31 let38)
  let let40 := (And (And (And (And (And (And let39 xx5f15) let37) let34) let30) let22) let19)
  let let41 := (Not xx5f16)
  let let42 := (binrel% LT.lt let23 let35)
  let let43 := (Not let42)
  let let44 := (Rat.ofInt 3)
  let let45 := (Eq xx5f31 let44)
  let let46 := (And (And (And (And (And (And (And (And let45 let25) xx5f4) xx5f5) let43) let41) let14) let19) let24)
  let let47 := (Eq xx5f31 let31)
  let let48 := (And (And (And (And (And (And (And (And (And let47 let25) let33) xx5f5) xx5f21) let4) xx5f16) xx5f17) let24) let19)
  let let49 := (Eq xx5f31 let35)
  let let50 := (And (And (And (And (And (And (And let49 let25) xx5f4) let10) let41) xx5f17) let19) let24)
  let let51 := (Eq xx5f31 let23)
  let let52 := (And (And (And (And (And (And (And (And (And let51 let25) let33) let10) let3) let4) xx5f16) let14) let24) let19)
  let let53 := (Or (Or (Or (Or (Or let52 let50) let48) let46) let40) let28)
  let let54 := (Eq xx5f14 xx5f3)
  let let55 := (Eq xx5f13 xx5f2)
  let let56 := (And let55 let54)
  let let57 := (And let3 xx5f22)
  let let58 := (Eq xx5f23 let23)
  let let59 := (Eq xx5f28 let26)
  let let60 := (And (And (And (And (And (And let59 let25) let6) xx5f11) let58) let57) let56)
  let let61 := (Eq xx5f22 xx5f30)
  let let62 := (Eq xx5f21 xx5f29)
  let let63 := (Eq xx5f23 let29)
  let let64 := (Not xx5f3)
  let let65 := (Not xx5f2)
  let let66 := (Or (Or let65 let64) let36)
  let let67 := (Or (Or let65 xx5f3) let36)
  let let68 := (Eq xx5f28 let38)
  let let69 := (And (And (And (And (And (And (And let68 xx5f15) let67) let66) let63) let62) let61) let56)
  let let70 := (Not xx5f14)
  let let71 := (Not xx5f13)
  let let72 := (Eq xx5f28 let44)
  let let73 := (And (And (And (And (And (And (And (And let72 let25) xx5f2) xx5f3) xx5f21) let4) let71) let70) let58)
  let let74 := (Eq xx5f28 let31)
  let let75 := (And (And (And (And (And (And (And (And (And let74 let25) let65) xx5f3) xx5f10) let7) let57) xx5f13) xx5f14) let58)
  let let76 := (Eq let23 let35)
  let let77 := (Eq xx5f28 let35)
  let let78 := (And (And (And (And (And (And (And (And (And let77 let25) xx5f2) let64) let76) let3) let4) let71) xx5f14) let58)
  let let79 := (Eq xx5f28 let23)
  let let80 := (And (And (And (And (And (And (And (And (And let79 let25) let65) let64) let6) let7) let57) xx5f13) let70) let58)
  let let81 := (Or (Or (Or (Or (Or let80 let78) let75) let73) let69) let60)
  let let82 := (Eq xx5f19 xx5f1)
  let let83 := (Eq xx5f18 xx5f0)
  let let84 := (And let83 let82)
  let let85 := (And let6 xx5f11)
  let let86 := (Eq xx5f20 let23)
  let let87 := (Eq xx5f25 let26)
  let let88 := (And (And (And (And let87 let25) let86) let85) let84)
  let let89 := (Eq xx5f11 xx5f27)
  let let90 := (Eq xx5f10 xx5f26)
  let let91 := (Eq xx5f20 let29)
  let let92 := (binrel% LE.le let29 let26)
  let let93 := (Not xx5f1)
  let let94 := (Or (Or let12 let93) let92)
  let let95 := (Or (Or xx5f0 let93) let92)
  let let96 := (Or (Or let12 xx5f1) let92)
  let let97 := (Eq xx5f25 let38)
  let let98 := (And (And (And (And (And (And (And (And let97 xx5f15) let96) let95) let94) let91) let90) let89) let84)
  let let99 := (Not xx5f19)
  let let100 := (Eq xx5f25 let44)
  let let101 := (And (And (And (And (And (And (And (And let100 let25) xx5f0) xx5f1) xx5f10) let7) let16) let99) let86)
  let let102 := (Eq xx5f25 let31)
  let let103 := (And (And (And (And (And (And (And let102 let25) let12) xx5f1) let85) xx5f18) xx5f19) let86)
  let let104 := (binrel% LE.le let23 let31)
  let let105 := (Not let104)
  let let106 := (Eq xx5f25 let35)
  let let107 := (And (And (And (And (And (And (And (And let106 let25) xx5f0) let93) let105) let85) let16) xx5f19) let86)
  let let108 := (Eq xx5f25 let23)
  let let109 := (And (And (And (And (And (And (And (And let108 let25) let12) let93) let6) let7) xx5f18) let99) let86)
  let let110 := (Or (Or (Or (Or (Or let109 let107) let103) let101) let98) let88)
  let let111 := (Eq xx5f24 (smtIte xx5f15 let23 let35 Rat))
  let let112 := (binrel% LT.lt xx5f6 let23)
  let let113 := (Not let112)
  let let114 := (binrel% LT.lt xx5f7 let23)
  let let115 := (Not let114)
  let let116 := (binrel% GE.ge xx5f24 let23)
  let let117 := (binrel% LE.le xx5f24 let35)
  let let118 := (And let117 (And let116 (And let12 (And let93 (And let65 (And let64 (And let33 (And let10 (And let115 (And let113 (And let111 (And let110 (And let81 (And let53 (And let18 let9)))))))))))))))
  let let119 := (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And let117 let116) (And let12 let93)) (And let65 let64)) (And let33 let10)) let115) let113) let111) let110) let81) let53) let18) let8) let5) let2) let1)
  let let120 := (Neg.neg (Int.ofNat 1))
  let let121 := (binrel% GE.ge (binrel% HMul.hMul let120 xx5f24) let120)
  let let122 := (Int.ofNat 0)
  let let123 := (binrel% GE.ge xx5f24 let122)
  let let124 := (And let68 (And xx5f15 (And let67 (And let66 (And let63 (And let62 (And let61 let56)))))))
  let let125 := (binrel% GE.ge xx5f6 let122)
  let let126 := (Not let125)
  let let127 := (Not let126)
  let let128 := (Or let65 (Or xx5f3 let36))
  let let129 := (Eq xx5f3 xx5f14)
  let let130 := (And let24 let19)
  let let131 := (And let51 (And let25 (And let33 (And let10 (And let3 (And let4 (And xx5f16 (And let14 let130))))))))
  let let132 := (And let19 let24)
  let let133 := (And let41 (And let14 let132))
  let let134 := (And let45 (And let25 (And xx5f4 (And xx5f5 (And False let133)))))
  let let135 := (And let59 (And let25 (And let6 (And xx5f11 (And let58 (And let3 (And xx5f22 let56)))))))
  let let136 := (And let16 (And xx5f19 let15))
  let let137 := (And xx5f19 let86)
  let let138 := (And let6 (And xx5f11 (And let16 let137)))
  let let139 := (And let106 (And let25 (And xx5f0 (And let93 (And let105 let138)))))
  let let140 := (Eq xx5f2 xx5f13)
  let let141 := (And let140 let129)
  let let142 := (And let59 (And let25 (And let6 (And xx5f11 (And let58 (And let3 (And xx5f22 let141)))))))
  let let143 := (Eq xx5f6 xx5f23)
  let let144 := (binrel% HMul.hMul let120 xx5f6)
  let let145 := (binrel% GE.ge let144 let120)
  let let146 := (Or let65 (Or let64 let145))
  let let147 := (Or let65 (Or xx5f3 let145))
  let let148 := (And let68 (And xx5f15 (And let147 (And let146 (And let143 (And let62 (And let61 let141)))))))
  let let149 := (And let70 let58)
  let let150 := (And let72 (And let25 (And xx5f2 (And xx5f3 (And xx5f21 (And let4 (And let71 let149)))))))
  let let151 := (And xx5f14 let58)
  let let152 := (And let74 (And let25 (And let65 (And xx5f3 (And xx5f10 (And let7 (And let3 (And xx5f22 (And xx5f13 let151)))))))))
  let let153 := (Or let152 (Or let150 (Or let148 let142)))
  let let154 := (And let79 (And let25 (And let65 (And let64 (And let6 (And let7 (And let3 (And xx5f22 (And xx5f13 let149)))))))))
  let let155 := (Or let154 let153)
  let let156 := (Or let154 (Or False let153))
  let let157 := (Eq xx5f5 xx5f17)
  let let158 := (Eq xx5f4 xx5f16)
  let let159 := (And let158 (And let157 let19))
  let let160 := (And let27 (And let25 (And let3 (And xx5f22 (And let24 let159)))))
  let let161 := (Eq xx5f6 xx5f12)
  let let162 := (binrel% GE.ge let144 (Neg.neg (Int.ofNat 2)))
  let let163 := (Or let33 (Or let10 let162))
  let let164 := (Or let33 (Or xx5f5 let145))
  let let165 := (And let39 (And xx5f15 (And let164 (And let163 (And let161 let159)))))
  let let166 := (Or let165 let160)
  let let167 := (And let47 (And let25 (And let33 (And xx5f5 (And xx5f21 (And let4 (And xx5f16 (And xx5f17 let130))))))))
  let let168 := (And let49 (And let25 (And xx5f4 (And let10 (And let41 (And xx5f17 let132))))))
  let let169 := (Or let131 (Or let168 (Or let167 let166)))
  let let170 := (Or let131 (Or let168 (Or let167 (Or False let166))))
  let let171 := (Eq xx5f6 xx5f20)
  let let172 := (Eq xx5f20 xx5f6)
  let let173 := (Eq xx5f1 xx5f19)
  let let174 := (Eq xx5f0 xx5f18)
  let let175 := (And let174 let173)
  let let176 := (And let87 (And let25 (And let86 (And let6 (And xx5f11 let175)))))
  let let177 := (binrel% GE.ge let144 (Neg.neg (Int.ofNat 5)))
  let let178 := (Or let93 let177)
  let let179 := (Or let12 let178)
  let let180 := (Or xx5f0 let178)
  let let181 := (Or let12 (Or xx5f1 let177))
  let let182 := (And let97 (And xx5f15 (And let181 (And let180 (And let179 (And let171 (And let90 (And let89 let175))))))))
  let let183 := (And let99 let86)
  let let184 := (And let100 (And let25 (And xx5f0 (And xx5f1 (And xx5f10 (And let7 (And let16 let183)))))))
  let let185 := (And let102 (And let25 (And let12 (And xx5f1 (And let6 (And xx5f11 (And xx5f18 let137)))))))
  let let186 := (Or let185 (Or let184 (Or let182 let176)))
  let let187 := (And let108 (And let25 (And let12 (And let93 (And let6 (And let7 (And xx5f18 let183)))))))
  let let188 := (Or let187 let186)
  let let189 := (Or let187 (Or False let186))
  let let190 := (Eq xx5f23 xx5f6)
  let let191 := (And let3 (And let4 (And let71 let151)))
  let let192 := (And let77 (And let25 (And xx5f2 (And let64 (And False let191)))))
  let let193 := (And let45 (And let25 (And xx5f4 (And xx5f5 (And let43 let133)))))
  let let194 := (Or let52 (Or let50 (Or let48 (Or let46 (Or let40 let28)))))
  let let195 := (And let21 (And let20 let19))
  let let196 := (And let39 (And xx5f15 (And let37 (And let34 (And let30 let195)))))
  let let197 := (Eq xx5f12 xx5f6)
  let let198 := (Not True)
  let let199 := (And let12 (And xx5f1 let11))
  let let200 := (binrel% LE.le xx5f6 let35)
  let let201 := (And let77 (And let25 (And xx5f2 (And let64 (And let76 let191)))))
  let let202 := (binrel% LE.le xx5f6 let31)
  let let203 := (Or let80 (Or let78 (Or let75 (Or let73 (Or let69 let60)))))
  let let204 := (And let87 (And let25 (And let86 (And let6 (And xx5f11 let84)))))
  let let205 := (Or let65 (Or let64 let36))
  let let206 := (Or let33 (Or xx5f5 let36))
  let let207 := (binrel% LE.le xx5f6 let26)
  let let208 := (binrel% GE.ge xx5f6 let23)
  let let209 := (Or let93 let92)
  let let210 := (Or xx5f0 let209)
  let let211 := (Or let12 let209)
  let let212 := (binrel% GE.ge xx5f7 let122)
  let let213 := (Not let212)
  let let214 := (Not let213)
  let let215 := (Or let12 (Or xx5f1 let92))
  let let216 := (And let97 (And xx5f15 (And let96 (And let95 (And let94 (And let91 (And let90 (And let89 let84))))))))
  let let217 := (And let27 (And let25 (And let3 (And xx5f22 (And let24 let195)))))
  let let218 := (And let106 (And let25 (And xx5f0 (And let93 (And False let138)))))
  let let219 := (Or let33 (Or let10 let32))
  let let220 := (Or let109 (Or let107 (Or let103 (Or let101 (Or let98 let88)))))
  let let221 := (Not let208)
  let let222 := (binrel% GE.ge xx5f7 let23)
  let let223 := (Not let222)
  let let224 := (Not let188)
  let let225 := (Not let176)
  let let226 := (Not let173)
  let let227 := (Not let199)
  let let228 := (Or let136 let199)
  let let229 := (And let121 (And let123 (And let12 (And let93 (And let65 (And let64 (And let33 (And let10 (And let212 (And let125 (And let111 (And let188 (And let155 (And let169 (And let228 let9)))))))))))))))
  let let230 := (Eq And And)
  let let231 := (Eq Or Or)
  let let232 := (Not let182)
  let let233 := (Not let184)
  let let234 := (Not let185)
  let let235 := (Not let187)
(Eq let119 let118) → (Eq let117 let121) → (Eq let116 let123) → (Eq let69 let124) → (Eq let127 let125) → (Eq let67 let128) → (Eq let54 let129) → (Eq let52 let131) → (Eq let104 True) → (Eq let134 False) → (Eq let60 let135) → (Eq let17 let136) → (Eq let107 let139) → (Eq let156 let155) → (Eq let170 let169) → (Eq let172 let171) → (Eq let189 let188) → (Eq let190 let143) → (Eq let192 False) → (Eq let42 True) → (Eq let20 let157) → (Eq let103 let185) → (Eq let21 let158) → (Eq let46 let193) → (Eq let29 xx5f6) → (Eq let82 let173) → (Eq let53 let194) → (Eq let40 let196) → (Eq let197 let161) → (Eq let48 let167) → (Eq let76 False) → (Eq let50 let168) → (Eq let198 False) → (Eq let13 let199) → (Eq let200 let145) → (Eq let80 let154) → (Eq let73 let150) → (Eq let75 let152) → (Eq let78 let201) → (Eq let202 let162) → (Eq let81 let203) → (Eq let83 let174) → (Eq let55 let140) → (Eq let88 let204) → (Eq let66 let205) → (Eq let37 let206) → (Eq let207 let177) → (Eq let208 let125) → (Eq let95 let210) → (Eq let94 let211) → (Eq let214 let212) → (Eq let96 let215) → (Eq let98 let216) → (Eq let28 let217) → (Eq let101 let184) → (Eq let218 False) → (Eq let34 let219) → (Eq let109 let187) → (Eq let110 let220) → (Eq let112 let221) → (Eq let222 let212) → (Eq let114 let223) → let119 → False :=
  let let1 := (Or (Not xx5f30) (Not xx5f29))
  let let2 := (Or (Not xx5f27) (Not xx5f26))
  let let3 := (Not xx5f21)
  let let4 := (Not xx5f22)
  let let5 := (Or let4 let3)
  let let6 := (Not xx5f10)
  let let7 := (Not xx5f11)
  let let8 := (Or let7 let6)
  let let9 := (And let8 (And let5 (And let2 let1)))
  let let10 := (Not xx5f5)
  let let11 := (Or xx5f4 let10)
  let let12 := (Not xx5f0)
  let let13 := (And (And let12 xx5f1) let11)
  let let14 := (Not xx5f17)
  let let15 := (Or xx5f16 let14)
  let let16 := (Not xx5f18)
  let let17 := (And (And let16 xx5f19) let15)
  let let18 := (Or let17 let13)
  let let19 := (Eq xx5f8 xx5f9)
  let let20 := (Eq xx5f17 xx5f5)
  let let21 := (Eq xx5f16 xx5f4)
  let let22 := (And let21 let20)
  let let23 := (Rat.ofInt 0)
  let let24 := (Eq xx5f12 let23)
  let let25 := (Not xx5f15)
  let let26 := (Rat.ofInt 5)
  let let27 := (Eq xx5f31 let26)
  let let28 := (And (And (And (And (And (And let27 let25) let3) xx5f22) let24) let22) let19)
  let let29 := (binrel% HAdd.hAdd let23 xx5f6)
  let let30 := (Eq xx5f12 let29)
  let let31 := (Rat.ofInt 2)
  let let32 := (binrel% LE.le let29 let31)
  let let33 := (Not xx5f4)
  let let34 := (Or (Or let33 let10) let32)
  let let35 := (Rat.ofInt 1)
  let let36 := (binrel% LE.le let29 let35)
  let let37 := (Or (Or let33 xx5f5) let36)
  let let38 := (Rat.ofInt 4)
  let let39 := (Eq xx5f31 let38)
  let let40 := (And (And (And (And (And (And let39 xx5f15) let37) let34) let30) let22) let19)
  let let41 := (Not xx5f16)
  let let42 := (binrel% LT.lt let23 let35)
  let let43 := (Not let42)
  let let44 := (Rat.ofInt 3)
  let let45 := (Eq xx5f31 let44)
  let let46 := (And (And (And (And (And (And (And (And let45 let25) xx5f4) xx5f5) let43) let41) let14) let19) let24)
  let let47 := (Eq xx5f31 let31)
  let let48 := (And (And (And (And (And (And (And (And (And let47 let25) let33) xx5f5) xx5f21) let4) xx5f16) xx5f17) let24) let19)
  let let49 := (Eq xx5f31 let35)
  let let50 := (And (And (And (And (And (And (And let49 let25) xx5f4) let10) let41) xx5f17) let19) let24)
  let let51 := (Eq xx5f31 let23)
  let let52 := (And (And (And (And (And (And (And (And (And let51 let25) let33) let10) let3) let4) xx5f16) let14) let24) let19)
  let let53 := (Or (Or (Or (Or (Or let52 let50) let48) let46) let40) let28)
  let let54 := (Eq xx5f14 xx5f3)
  let let55 := (Eq xx5f13 xx5f2)
  let let56 := (And let55 let54)
  let let57 := (And let3 xx5f22)
  let let58 := (Eq xx5f23 let23)
  let let59 := (Eq xx5f28 let26)
  let let60 := (And (And (And (And (And (And let59 let25) let6) xx5f11) let58) let57) let56)
  let let61 := (Eq xx5f22 xx5f30)
  let let62 := (Eq xx5f21 xx5f29)
  let let63 := (Eq xx5f23 let29)
  let let64 := (Not xx5f3)
  let let65 := (Not xx5f2)
  let let66 := (Or (Or let65 let64) let36)
  let let67 := (Or (Or let65 xx5f3) let36)
  let let68 := (Eq xx5f28 let38)
  let let69 := (And (And (And (And (And (And (And let68 xx5f15) let67) let66) let63) let62) let61) let56)
  let let70 := (Not xx5f14)
  let let71 := (Not xx5f13)
  let let72 := (Eq xx5f28 let44)
  let let73 := (And (And (And (And (And (And (And (And let72 let25) xx5f2) xx5f3) xx5f21) let4) let71) let70) let58)
  let let74 := (Eq xx5f28 let31)
  let let75 := (And (And (And (And (And (And (And (And (And let74 let25) let65) xx5f3) xx5f10) let7) let57) xx5f13) xx5f14) let58)
  let let76 := (Eq let23 let35)
  let let77 := (Eq xx5f28 let35)
  let let78 := (And (And (And (And (And (And (And (And (And let77 let25) xx5f2) let64) let76) let3) let4) let71) xx5f14) let58)
  let let79 := (Eq xx5f28 let23)
  let let80 := (And (And (And (And (And (And (And (And (And let79 let25) let65) let64) let6) let7) let57) xx5f13) let70) let58)
  let let81 := (Or (Or (Or (Or (Or let80 let78) let75) let73) let69) let60)
  let let82 := (Eq xx5f19 xx5f1)
  let let83 := (Eq xx5f18 xx5f0)
  let let84 := (And let83 let82)
  let let85 := (And let6 xx5f11)
  let let86 := (Eq xx5f20 let23)
  let let87 := (Eq xx5f25 let26)
  let let88 := (And (And (And (And let87 let25) let86) let85) let84)
  let let89 := (Eq xx5f11 xx5f27)
  let let90 := (Eq xx5f10 xx5f26)
  let let91 := (Eq xx5f20 let29)
  let let92 := (binrel% LE.le let29 let26)
  let let93 := (Not xx5f1)
  let let94 := (Or (Or let12 let93) let92)
  let let95 := (Or (Or xx5f0 let93) let92)
  let let96 := (Or (Or let12 xx5f1) let92)
  let let97 := (Eq xx5f25 let38)
  let let98 := (And (And (And (And (And (And (And (And let97 xx5f15) let96) let95) let94) let91) let90) let89) let84)
  let let99 := (Not xx5f19)
  let let100 := (Eq xx5f25 let44)
  let let101 := (And (And (And (And (And (And (And (And let100 let25) xx5f0) xx5f1) xx5f10) let7) let16) let99) let86)
  let let102 := (Eq xx5f25 let31)
  let let103 := (And (And (And (And (And (And (And let102 let25) let12) xx5f1) let85) xx5f18) xx5f19) let86)
  let let104 := (binrel% LE.le let23 let31)
  let let105 := (Not let104)
  let let106 := (Eq xx5f25 let35)
  let let107 := (And (And (And (And (And (And (And (And let106 let25) xx5f0) let93) let105) let85) let16) xx5f19) let86)
  let let108 := (Eq xx5f25 let23)
  let let109 := (And (And (And (And (And (And (And (And let108 let25) let12) let93) let6) let7) xx5f18) let99) let86)
  let let110 := (Or (Or (Or (Or (Or let109 let107) let103) let101) let98) let88)
  let let111 := (Eq xx5f24 (smtIte xx5f15 let23 let35 Rat))
  let let112 := (binrel% LT.lt xx5f6 let23)
  let let113 := (Not let112)
  let let114 := (binrel% LT.lt xx5f7 let23)
  let let115 := (Not let114)
  let let116 := (binrel% GE.ge xx5f24 let23)
  let let117 := (binrel% LE.le xx5f24 let35)
  let let118 := (And let117 (And let116 (And let12 (And let93 (And let65 (And let64 (And let33 (And let10 (And let115 (And let113 (And let111 (And let110 (And let81 (And let53 (And let18 let9)))))))))))))))
  let let119 := (And (And (And (And (And (And (And (And (And (And (And (And (And (And (And let117 let116) (And let12 let93)) (And let65 let64)) (And let33 let10)) let115) let113) let111) let110) let81) let53) let18) let8) let5) let2) let1)
  let let120 := (Neg.neg (Int.ofNat 1))
  let let121 := (binrel% GE.ge (binrel% HMul.hMul let120 xx5f24) let120)
  let let122 := (Int.ofNat 0)
  let let123 := (binrel% GE.ge xx5f24 let122)
  let let124 := (And let68 (And xx5f15 (And let67 (And let66 (And let63 (And let62 (And let61 let56)))))))
  let let125 := (binrel% GE.ge xx5f6 let122)
  let let126 := (Not let125)
  let let127 := (Not let126)
  let let128 := (Or let65 (Or xx5f3 let36))
  let let129 := (Eq xx5f3 xx5f14)
  let let130 := (And let24 let19)
  let let131 := (And let51 (And let25 (And let33 (And let10 (And let3 (And let4 (And xx5f16 (And let14 let130))))))))
  let let132 := (And let19 let24)
  let let133 := (And let41 (And let14 let132))
  let let134 := (And let45 (And let25 (And xx5f4 (And xx5f5 (And False let133)))))
  let let135 := (And let59 (And let25 (And let6 (And xx5f11 (And let58 (And let3 (And xx5f22 let56)))))))
  let let136 := (And let16 (And xx5f19 let15))
  let let137 := (And xx5f19 let86)
  let let138 := (And let6 (And xx5f11 (And let16 let137)))
  let let139 := (And let106 (And let25 (And xx5f0 (And let93 (And let105 let138)))))
  let let140 := (Eq xx5f2 xx5f13)
  let let141 := (And let140 let129)
  let let142 := (And let59 (And let25 (And let6 (And xx5f11 (And let58 (And let3 (And xx5f22 let141)))))))
  let let143 := (Eq xx5f6 xx5f23)
  let let144 := (binrel% HMul.hMul let120 xx5f6)
  let let145 := (binrel% GE.ge let144 let120)
  let let146 := (Or let65 (Or let64 let145))
  let let147 := (Or let65 (Or xx5f3 let145))
  let let148 := (And let68 (And xx5f15 (And let147 (And let146 (And let143 (And let62 (And let61 let141)))))))
  let let149 := (And let70 let58)
  let let150 := (And let72 (And let25 (And xx5f2 (And xx5f3 (And xx5f21 (And let4 (And let71 let149)))))))
  let let151 := (And xx5f14 let58)
  let let152 := (And let74 (And let25 (And let65 (And xx5f3 (And xx5f10 (And let7 (And let3 (And xx5f22 (And xx5f13 let151)))))))))
  let let153 := (Or let152 (Or let150 (Or let148 let142)))
  let let154 := (And let79 (And let25 (And let65 (And let64 (And let6 (And let7 (And let3 (And xx5f22 (And xx5f13 let149)))))))))
  let let155 := (Or let154 let153)
  let let156 := (Or let154 (Or False let153))
  let let157 := (Eq xx5f5 xx5f17)
  let let158 := (Eq xx5f4 xx5f16)
  let let159 := (And let158 (And let157 let19))
  let let160 := (And let27 (And let25 (And let3 (And xx5f22 (And let24 let159)))))
  let let161 := (Eq xx5f6 xx5f12)
  let let162 := (binrel% GE.ge let144 (Neg.neg (Int.ofNat 2)))
  let let163 := (Or let33 (Or let10 let162))
  let let164 := (Or let33 (Or xx5f5 let145))
  let let165 := (And let39 (And xx5f15 (And let164 (And let163 (And let161 let159)))))
  let let166 := (Or let165 let160)
  let let167 := (And let47 (And let25 (And let33 (And xx5f5 (And xx5f21 (And let4 (And xx5f16 (And xx5f17 let130))))))))
  let let168 := (And let49 (And let25 (And xx5f4 (And let10 (And let41 (And xx5f17 let132))))))
  let let169 := (Or let131 (Or let168 (Or let167 let166)))
  let let170 := (Or let131 (Or let168 (Or let167 (Or False let166))))
  let let171 := (Eq xx5f6 xx5f20)
  let let172 := (Eq xx5f20 xx5f6)
  let let173 := (Eq xx5f1 xx5f19)
  let let174 := (Eq xx5f0 xx5f18)
  let let175 := (And let174 let173)
  let let176 := (And let87 (And let25 (And let86 (And let6 (And xx5f11 let175)))))
  let let177 := (binrel% GE.ge let144 (Neg.neg (Int.ofNat 5)))
  let let178 := (Or let93 let177)
  let let179 := (Or let12 let178)
  let let180 := (Or xx5f0 let178)
  let let181 := (Or let12 (Or xx5f1 let177))
  let let182 := (And let97 (And xx5f15 (And let181 (And let180 (And let179 (And let171 (And let90 (And let89 let175))))))))
  let let183 := (And let99 let86)
  let let184 := (And let100 (And let25 (And xx5f0 (And xx5f1 (And xx5f10 (And let7 (And let16 let183)))))))
  let let185 := (And let102 (And let25 (And let12 (And xx5f1 (And let6 (And xx5f11 (And xx5f18 let137)))))))
  let let186 := (Or let185 (Or let184 (Or let182 let176)))
  let let187 := (And let108 (And let25 (And let12 (And let93 (And let6 (And let7 (And xx5f18 let183)))))))
  let let188 := (Or let187 let186)
  let let189 := (Or let187 (Or False let186))
  let let190 := (Eq xx5f23 xx5f6)
  let let191 := (And let3 (And let4 (And let71 let151)))
  let let192 := (And let77 (And let25 (And xx5f2 (And let64 (And False let191)))))
  let let193 := (And let45 (And let25 (And xx5f4 (And xx5f5 (And let43 let133)))))
  let let194 := (Or let52 (Or let50 (Or let48 (Or let46 (Or let40 let28)))))
  let let195 := (And let21 (And let20 let19))
  let let196 := (And let39 (And xx5f15 (And let37 (And let34 (And let30 let195)))))
  let let197 := (Eq xx5f12 xx5f6)
  let let198 := (Not True)
  let let199 := (And let12 (And xx5f1 let11))
  let let200 := (binrel% LE.le xx5f6 let35)
  let let201 := (And let77 (And let25 (And xx5f2 (And let64 (And let76 let191)))))
  let let202 := (binrel% LE.le xx5f6 let31)
  let let203 := (Or let80 (Or let78 (Or let75 (Or let73 (Or let69 let60)))))
  let let204 := (And let87 (And let25 (And let86 (And let6 (And xx5f11 let84)))))
  let let205 := (Or let65 (Or let64 let36))
  let let206 := (Or let33 (Or xx5f5 let36))
  let let207 := (binrel% LE.le xx5f6 let26)
  let let208 := (binrel% GE.ge xx5f6 let23)
  let let209 := (Or let93 let92)
  let let210 := (Or xx5f0 let209)
  let let211 := (Or let12 let209)
  let let212 := (binrel% GE.ge xx5f7 let122)
  let let213 := (Not let212)
  let let214 := (Not let213)
  let let215 := (Or let12 (Or xx5f1 let92))
  let let216 := (And let97 (And xx5f15 (And let96 (And let95 (And let94 (And let91 (And let90 (And let89 let84))))))))
  let let217 := (And let27 (And let25 (And let3 (And xx5f22 (And let24 let195)))))
  let let218 := (And let106 (And let25 (And xx5f0 (And let93 (And False let138)))))
  let let219 := (Or let33 (Or let10 let32))
  let let220 := (Or let109 (Or let107 (Or let103 (Or let101 (Or let98 let88)))))
  let let221 := (Not let208)
  let let222 := (binrel% GE.ge xx5f7 let23)
  let let223 := (Not let222)
  let let224 := (Not let188)
  let let225 := (Not let176)
  let let226 := (Not let173)
  let let227 := (Not let199)
  let let228 := (Or let136 let199)
  let let229 := (And let121 (And let123 (And let12 (And let93 (And let65 (And let64 (And let33 (And let10 (And let212 (And let125 (And let111 (And let188 (And let155 (And let169 (And let228 let9)))))))))))))))
  let let230 := (Eq And And)
  let let231 := (Eq Or Or)
  let let232 := (Not let182)
  let let233 := (Not let184)
  let let234 := (Not let185)
  let let235 := (Not let187)
fun lean_r0 : (Eq let119 let118) => -- THEORY_REWRITE_BOOL
fun lean_r1 : (Eq let117 let121) => -- THEORY_REWRITE_ARITH
fun lean_r2 : (Eq let116 let123) => -- THEORY_REWRITE_ARITH
fun lean_r3 : (Eq let69 let124) => -- THEORY_REWRITE_BOOL
fun lean_r4 : (Eq let127 let125) => -- THEORY_REWRITE_BOOL
fun lean_r5 : (Eq let67 let128) => -- THEORY_REWRITE_BOOL
fun lean_r6 : (Eq let54 let129) => -- THEORY_REWRITE_BOOL
fun lean_r7 : (Eq let52 let131) => -- THEORY_REWRITE_BOOL
fun lean_r8 : (Eq let104 True) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq let134 False) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq let60 let135) => -- THEORY_REWRITE_BOOL
fun lean_r11 : (Eq let17 let136) => -- THEORY_REWRITE_BOOL
fun lean_r12 : (Eq let107 let139) => -- THEORY_REWRITE_BOOL
fun lean_r13 : (Eq let156 let155) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq let170 let169) => -- THEORY_REWRITE_BOOL
fun lean_r15 : (Eq let172 let171) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq let189 let188) => -- THEORY_REWRITE_BOOL
fun lean_r17 : (Eq let190 let143) => -- THEORY_REWRITE_ARITH
fun lean_r18 : (Eq let192 False) => -- THEORY_REWRITE_BOOL
fun lean_r19 : (Eq let42 True) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq let20 let157) => -- THEORY_REWRITE_BOOL
fun lean_r21 : (Eq let103 let185) => -- THEORY_REWRITE_BOOL
fun lean_r22 : (Eq let21 let158) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq let46 let193) => -- THEORY_REWRITE_BOOL
fun lean_r24 : (Eq let29 xx5f6) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq let82 let173) => -- THEORY_REWRITE_BOOL
fun lean_r26 : (Eq let53 let194) => -- THEORY_REWRITE_BOOL
fun lean_r27 : (Eq let40 let196) => -- THEORY_REWRITE_BOOL
fun lean_r28 : (Eq let197 let161) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq let48 let167) => -- THEORY_REWRITE_BOOL
fun lean_r30 : (Eq let76 False) => -- THEORY_REWRITE_ARITH
fun lean_r31 : (Eq let50 let168) => -- THEORY_REWRITE_BOOL
fun lean_r32 : (Eq let198 False) => -- THEORY_REWRITE_BOOL
fun lean_r33 : (Eq let13 let199) => -- THEORY_REWRITE_BOOL
fun lean_r34 : (Eq let200 let145) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq let80 let154) => -- THEORY_REWRITE_BOOL
fun lean_r36 : (Eq let73 let150) => -- THEORY_REWRITE_BOOL
fun lean_r37 : (Eq let75 let152) => -- THEORY_REWRITE_BOOL
fun lean_r38 : (Eq let78 let201) => -- THEORY_REWRITE_BOOL
fun lean_r39 : (Eq let202 let162) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq let81 let203) => -- THEORY_REWRITE_BOOL
fun lean_r41 : (Eq let83 let174) => -- THEORY_REWRITE_BOOL
fun lean_r42 : (Eq let55 let140) => -- THEORY_REWRITE_BOOL
fun lean_r43 : (Eq let88 let204) => -- THEORY_REWRITE_BOOL
fun lean_r44 : (Eq let66 let205) => -- THEORY_REWRITE_BOOL
fun lean_r45 : (Eq let37 let206) => -- THEORY_REWRITE_BOOL
fun lean_r46 : (Eq let207 let177) => -- THEORY_REWRITE_ARITH
fun lean_r47 : (Eq let208 let125) => -- THEORY_REWRITE_ARITH
fun lean_r48 : (Eq let95 let210) => -- THEORY_REWRITE_BOOL
fun lean_r49 : (Eq let94 let211) => -- THEORY_REWRITE_BOOL
fun lean_r50 : (Eq let214 let212) => -- THEORY_REWRITE_BOOL
fun lean_r51 : (Eq let96 let215) => -- THEORY_REWRITE_BOOL
fun lean_r52 : (Eq let98 let216) => -- THEORY_REWRITE_BOOL
fun lean_r53 : (Eq let28 let217) => -- THEORY_REWRITE_BOOL
fun lean_r54 : (Eq let101 let184) => -- THEORY_REWRITE_BOOL
fun lean_r55 : (Eq let218 False) => -- THEORY_REWRITE_BOOL
fun lean_r56 : (Eq let34 let219) => -- THEORY_REWRITE_BOOL
fun lean_r57 : (Eq let109 let187) => -- THEORY_REWRITE_BOOL
fun lean_r58 : (Eq let110 let220) => -- THEORY_REWRITE_BOOL
fun lean_r59 : (Eq let112 let221) => -- THEORY_REWRITE_ARITH
fun lean_r60 : (Eq let222 let212) => -- THEORY_REWRITE_ARITH
fun lean_r61 : (Eq let114 let223) => -- THEORY_REWRITE_ARITH
fun lean_a62 : let119 => by
have lean_s0 : let230 := by timed rfl
let lean_s1 := by timed congr lean_s0 lean_r1
let lean_s2 := by timed congr lean_s0 lean_r2
have lean_s3 : (Eq let12 let12) := by timed rfl
let lean_s4 := by timed congr lean_s0 lean_s3
have lean_s5 : (Eq let93 let93) := by timed rfl
let lean_s6 := by timed congr lean_s0 lean_s5
have lean_s7 : (Eq let65 let65) := by timed rfl
let lean_s8 := by timed congr lean_s0 lean_s7
have lean_s9 : (Eq let64 let64) := by timed rfl
let lean_s10 := by timed congr lean_s0 lean_s9
have lean_s11 : (Eq let33 let33) := by timed rfl
let lean_s12 := by timed congr lean_s0 lean_s11
have lean_s13 : (Eq let10 let10) := by timed rfl
let lean_s14 := by timed congr lean_s0 lean_s13
have lean_s15 : (Eq let223 let213) := by timed flipCongrArg lean_r60 [Not]
have lean_s16 : (Eq let114 let213) := by timed Eq.trans lean_r61 lean_s15
have lean_s17 : (Eq let115 let214) := by timed flipCongrArg lean_s16 [Not]
have lean_s18 : (Eq let115 let212) := by timed Eq.trans lean_s17 lean_r50
let lean_s19 := by timed congr lean_s0 lean_s18
have lean_s20 : (Eq let221 let126) := by timed flipCongrArg lean_r47 [Not]
have lean_s21 : (Eq let112 let126) := by timed Eq.trans lean_r59 lean_s20
have lean_s22 : (Eq let113 let127) := by timed flipCongrArg lean_s21 [Not]
have lean_s23 : (Eq let113 let125) := by timed Eq.trans lean_s22 lean_r4
let lean_s24 := by timed congr lean_s0 lean_s23
have lean_s25 : (Eq let111 let111) := by timed rfl
let lean_s26 := by timed congr lean_s0 lean_s25
have lean_s27 : let231 := by timed rfl
let lean_s28 := by timed congr lean_s27 lean_r57
have lean_s29 : let230 := by timed rfl
have lean_s30 : (Eq let106 let106) := by timed rfl
let lean_s31 := by timed congr lean_s29 lean_s30
have lean_s32 : (Eq let25 let25) := by timed rfl
let lean_s33 := by timed congr lean_s29 lean_s32
have lean_s34 : (Eq xx5f0 xx5f0) := by timed rfl
let lean_s35 := by timed congr lean_s29 lean_s34
let lean_s36 := by timed congr lean_s29 lean_s5
have lean_s37 : (Eq let105 let198) := by timed flipCongrArg lean_r8 [Not]
have lean_s38 : (Eq let105 False) := by timed Eq.trans lean_s37 lean_r32
let lean_s39 := by timed congr lean_s29 lean_s38
have lean_s40 : (Eq let6 let6) := by timed rfl
let lean_s41 := by timed congr lean_s29 lean_s40
have lean_s42 : (Eq xx5f11 xx5f11) := by timed rfl
let lean_s43 := by timed congr lean_s29 lean_s42
have lean_s44 : (Eq let16 let16) := by timed rfl
let lean_s45 := by timed congr lean_s29 lean_s44
have lean_s46 : (Eq xx5f19 xx5f19) := by timed rfl
let lean_s47 := by timed congr lean_s29 lean_s46
have lean_s48 : (Eq let86 let86) := by timed rfl
let lean_s49 := by timed congr lean_s47 lean_s48
let lean_s50 := by timed congr lean_s45 lean_s49
let lean_s51 := by timed congr lean_s43 lean_s50
let lean_s52 := by timed congr lean_s41 lean_s51
let lean_s53 := by timed congr lean_s39 lean_s52
let lean_s54 := by timed congr lean_s36 lean_s53
let lean_s55 := by timed congr lean_s35 lean_s54
let lean_s56 := by timed congr lean_s33 lean_s55
have lean_s57 : (Eq let139 let218) := by timed congr lean_s31 lean_s56
have lean_s58 : (Eq let139 False) := by timed Eq.trans lean_s57 lean_r55
have lean_s59 : (Eq let107 False) := by timed Eq.trans lean_r12 lean_s58
let lean_s60 := by timed congr lean_s27 lean_s59
let lean_s61 := by timed congr lean_s27 lean_r21
let lean_s62 := by timed congr lean_s27 lean_r54
have lean_s63 : let230 := by timed rfl
have lean_s64 : (Eq let97 let97) := by timed rfl
let lean_s65 := by timed congr lean_s63 lean_s64
have lean_s66 : (Eq xx5f15 xx5f15) := by timed rfl
let lean_s67 := by timed congr lean_s63 lean_s66
have lean_s68 : let231 := by timed rfl
let lean_s69 := by timed congr lean_s68 lean_s3
have lean_s70 : (Eq xx5f1 xx5f1) := by timed rfl
let lean_s71 := by timed congr lean_s68 lean_s70
let lean_s72 := by timed flipCongrArg lean_r24 [LE.le]
have lean_s73 : (Eq let26 let26) := by timed rfl
have lean_s74 : (Eq let92 let207) := by timed congr lean_s72 lean_s73
have lean_s75 : (Eq let92 let177) := by timed Eq.trans lean_s74 lean_r46
let lean_s76 := by timed congr lean_s71 lean_s75
have lean_s77 : (Eq let215 let181) := by timed congr lean_s69 lean_s76
have lean_s78 : (Eq let96 let181) := by timed Eq.trans lean_r51 lean_s77
let lean_s79 := by timed congr lean_s63 lean_s78
have lean_s80 : let231 := by timed rfl
let lean_s81 := by timed congr lean_s80 lean_s34
let lean_s82 := by timed congr lean_s80 lean_s5
let lean_s83 := by timed congr lean_s82 lean_s75
have lean_s84 : (Eq let210 let180) := by timed congr lean_s81 lean_s83
have lean_s85 : (Eq let95 let180) := by timed Eq.trans lean_r48 lean_s84
let lean_s86 := by timed congr lean_s63 lean_s85
have lean_s87 : let231 := by timed rfl
let lean_s88 := by timed congr lean_s87 lean_s3
let lean_s89 := by timed congr lean_s87 lean_s5
let lean_s90 := by timed congr lean_s89 lean_s75
have lean_s91 : (Eq let211 let179) := by timed congr lean_s88 lean_s90
have lean_s92 : (Eq let94 let179) := by timed Eq.trans lean_r49 lean_s91
let lean_s93 := by timed congr lean_s63 lean_s92
have lean_s94 : (Eq xx5f20 xx5f20) := by timed rfl
let lean_s95 := by timed flipCongrArg lean_s94 [Eq]
have lean_s96 : (Eq let91 let172) := by timed congr lean_s95 lean_r24
have lean_s97 : (Eq let91 let171) := by timed Eq.trans lean_s96 lean_r15
let lean_s98 := by timed congr lean_s63 lean_s97
have lean_s99 : (Eq let90 let90) := by timed rfl
let lean_s100 := by timed congr lean_s63 lean_s99
have lean_s101 : (Eq let89 let89) := by timed rfl
let lean_s102 := by timed congr lean_s63 lean_s101
let lean_s103 := by timed congr lean_s63 lean_r41
let lean_s104 := by timed congr lean_s103 lean_r25
let lean_s105 := by timed congr lean_s102 lean_s104
let lean_s106 := by timed congr lean_s100 lean_s105
let lean_s107 := by timed congr lean_s98 lean_s106
let lean_s108 := by timed congr lean_s93 lean_s107
let lean_s109 := by timed congr lean_s86 lean_s108
let lean_s110 := by timed congr lean_s79 lean_s109
let lean_s111 := by timed congr lean_s67 lean_s110
have lean_s112 : (Eq let216 let182) := by timed congr lean_s65 lean_s111
have lean_s113 : (Eq let98 let182) := by timed Eq.trans lean_r52 lean_s112
let lean_s114 := by timed congr lean_s27 lean_s113
have lean_s115 : let230 := by timed rfl
have lean_s116 : (Eq let87 let87) := by timed rfl
let lean_s117 := by timed congr lean_s115 lean_s116
let lean_s118 := by timed congr lean_s115 lean_s32
let lean_s119 := by timed congr lean_s115 lean_s48
let lean_s120 := by timed congr lean_s115 lean_s40
let lean_s121 := by timed congr lean_s115 lean_s42
let lean_s122 := by timed congr lean_s115 lean_r41
let lean_s123 := by timed congr lean_s122 lean_r25
let lean_s124 := by timed congr lean_s121 lean_s123
let lean_s125 := by timed congr lean_s120 lean_s124
let lean_s126 := by timed congr lean_s119 lean_s125
let lean_s127 := by timed congr lean_s118 lean_s126
have lean_s128 : (Eq let204 let176) := by timed congr lean_s117 lean_s127
have lean_s129 : (Eq let88 let176) := by timed Eq.trans lean_r43 lean_s128
let lean_s130 := by timed congr lean_s114 lean_s129
let lean_s131 := by timed congr lean_s62 lean_s130
let lean_s132 := by timed congr lean_s61 lean_s131
let lean_s133 := by timed congr lean_s60 lean_s132
have lean_s134 : (Eq let220 let189) := by timed congr lean_s28 lean_s133
have lean_s135 : (Eq let220 let188) := by timed Eq.trans lean_s134 lean_r16
have lean_s136 : (Eq let110 let188) := by timed Eq.trans lean_r58 lean_s135
let lean_s137 := by timed congr lean_s0 lean_s136
have lean_s138 : let231 := by timed rfl
let lean_s139 := by timed congr lean_s138 lean_r35
have lean_s140 : let230 := by timed rfl
have lean_s141 : (Eq let77 let77) := by timed rfl
let lean_s142 := by timed congr lean_s140 lean_s141
let lean_s143 := by timed congr lean_s140 lean_s32
have lean_s144 : (Eq xx5f2 xx5f2) := by timed rfl
let lean_s145 := by timed congr lean_s140 lean_s144
let lean_s146 := by timed congr lean_s140 lean_s9
let lean_s147 := by timed congr lean_s140 lean_r30
have lean_s148 : (Eq let3 let3) := by timed rfl
let lean_s149 := by timed congr lean_s140 lean_s148
have lean_s150 : (Eq let4 let4) := by timed rfl
let lean_s151 := by timed congr lean_s140 lean_s150
have lean_s152 : (Eq let71 let71) := by timed rfl
let lean_s153 := by timed congr lean_s140 lean_s152
have lean_s154 : (Eq xx5f14 xx5f14) := by timed rfl
let lean_s155 := by timed congr lean_s140 lean_s154
have lean_s156 : (Eq let58 let58) := by timed rfl
let lean_s157 := by timed congr lean_s155 lean_s156
let lean_s158 := by timed congr lean_s153 lean_s157
let lean_s159 := by timed congr lean_s151 lean_s158
let lean_s160 := by timed congr lean_s149 lean_s159
let lean_s161 := by timed congr lean_s147 lean_s160
let lean_s162 := by timed congr lean_s146 lean_s161
let lean_s163 := by timed congr lean_s145 lean_s162
let lean_s164 := by timed congr lean_s143 lean_s163
have lean_s165 : (Eq let201 let192) := by timed congr lean_s142 lean_s164
have lean_s166 : (Eq let201 False) := by timed Eq.trans lean_s165 lean_r18
have lean_s167 : (Eq let78 False) := by timed Eq.trans lean_r38 lean_s166
let lean_s168 := by timed congr lean_s138 lean_s167
let lean_s169 := by timed congr lean_s138 lean_r37
let lean_s170 := by timed congr lean_s138 lean_r36
have lean_s171 : let230 := by timed rfl
have lean_s172 : (Eq let68 let68) := by timed rfl
let lean_s173 := by timed congr lean_s171 lean_s172
let lean_s174 := by timed congr lean_s171 lean_s66
have lean_s175 : let231 := by timed rfl
let lean_s176 := by timed congr lean_s175 lean_s7
have lean_s177 : (Eq xx5f3 xx5f3) := by timed rfl
let lean_s178 := by timed congr lean_s175 lean_s177
let lean_s179 := by timed flipCongrArg lean_r24 [LE.le]
have lean_s180 : (Eq let35 let35) := by timed rfl
have lean_s181 : (Eq let36 let200) := by timed congr lean_s179 lean_s180
have lean_s182 : (Eq let36 let145) := by timed Eq.trans lean_s181 lean_r34
let lean_s183 := by timed congr lean_s178 lean_s182
have lean_s184 : (Eq let128 let147) := by timed congr lean_s176 lean_s183
have lean_s185 : (Eq let67 let147) := by timed Eq.trans lean_r5 lean_s184
let lean_s186 := by timed congr lean_s171 lean_s185
have lean_s187 : let231 := by timed rfl
let lean_s188 := by timed congr lean_s187 lean_s7
let lean_s189 := by timed congr lean_s187 lean_s9
let lean_s190 := by timed congr lean_s189 lean_s182
have lean_s191 : (Eq let205 let146) := by timed congr lean_s188 lean_s190
have lean_s192 : (Eq let66 let146) := by timed Eq.trans lean_r44 lean_s191
let lean_s193 := by timed congr lean_s171 lean_s192
have lean_s194 : (Eq xx5f23 xx5f23) := by timed rfl
let lean_s195 := by timed flipCongrArg lean_s194 [Eq]
have lean_s196 : (Eq let63 let190) := by timed congr lean_s195 lean_r24
have lean_s197 : (Eq let63 let143) := by timed Eq.trans lean_s196 lean_r17
let lean_s198 := by timed congr lean_s171 lean_s197
have lean_s199 : (Eq let62 let62) := by timed rfl
let lean_s200 := by timed congr lean_s171 lean_s199
have lean_s201 : (Eq let61 let61) := by timed rfl
let lean_s202 := by timed congr lean_s171 lean_s201
let lean_s203 := by timed congr lean_s171 lean_r42
let lean_s204 := by timed congr lean_s203 lean_r6
let lean_s205 := by timed congr lean_s202 lean_s204
let lean_s206 := by timed congr lean_s200 lean_s205
let lean_s207 := by timed congr lean_s198 lean_s206
let lean_s208 := by timed congr lean_s193 lean_s207
let lean_s209 := by timed congr lean_s186 lean_s208
let lean_s210 := by timed congr lean_s174 lean_s209
have lean_s211 : (Eq let124 let148) := by timed congr lean_s173 lean_s210
have lean_s212 : (Eq let69 let148) := by timed Eq.trans lean_r3 lean_s211
let lean_s213 := by timed congr lean_s138 lean_s212
have lean_s214 : let230 := by timed rfl
have lean_s215 : (Eq let59 let59) := by timed rfl
let lean_s216 := by timed congr lean_s214 lean_s215
let lean_s217 := by timed congr lean_s214 lean_s32
let lean_s218 := by timed congr lean_s214 lean_s40
let lean_s219 := by timed congr lean_s214 lean_s42
let lean_s220 := by timed congr lean_s214 lean_s156
let lean_s221 := by timed congr lean_s214 lean_s148
have lean_s222 : (Eq xx5f22 xx5f22) := by timed rfl
let lean_s223 := by timed congr lean_s214 lean_s222
let lean_s224 := by timed congr lean_s214 lean_r42
let lean_s225 := by timed congr lean_s224 lean_r6
let lean_s226 := by timed congr lean_s223 lean_s225
let lean_s227 := by timed congr lean_s221 lean_s226
let lean_s228 := by timed congr lean_s220 lean_s227
let lean_s229 := by timed congr lean_s219 lean_s228
let lean_s230 := by timed congr lean_s218 lean_s229
let lean_s231 := by timed congr lean_s217 lean_s230
have lean_s232 : (Eq let135 let142) := by timed congr lean_s216 lean_s231
have lean_s233 : (Eq let60 let142) := by timed Eq.trans lean_r10 lean_s232
let lean_s234 := by timed congr lean_s213 lean_s233
let lean_s235 := by timed congr lean_s170 lean_s234
let lean_s236 := by timed congr lean_s169 lean_s235
let lean_s237 := by timed congr lean_s168 lean_s236
have lean_s238 : (Eq let203 let156) := by timed congr lean_s139 lean_s237
have lean_s239 : (Eq let203 let155) := by timed Eq.trans lean_s238 lean_r13
have lean_s240 : (Eq let81 let155) := by timed Eq.trans lean_r40 lean_s239
let lean_s241 := by timed congr lean_s0 lean_s240
have lean_s242 : let231 := by timed rfl
let lean_s243 := by timed congr lean_s242 lean_r7
let lean_s244 := by timed congr lean_s242 lean_r31
let lean_s245 := by timed congr lean_s242 lean_r29
have lean_s246 : let230 := by timed rfl
have lean_s247 : (Eq let45 let45) := by timed rfl
let lean_s248 := by timed congr lean_s246 lean_s247
let lean_s249 := by timed congr lean_s246 lean_s32
have lean_s250 : (Eq xx5f4 xx5f4) := by timed rfl
let lean_s251 := by timed congr lean_s246 lean_s250
have lean_s252 : (Eq xx5f5 xx5f5) := by timed rfl
let lean_s253 := by timed congr lean_s246 lean_s252
have lean_s254 : (Eq let43 let198) := by timed flipCongrArg lean_r19 [Not]
have lean_s255 : (Eq let43 False) := by timed Eq.trans lean_s254 lean_r32
let lean_s256 := by timed congr lean_s246 lean_s255
have lean_s257 : (Eq let41 let41) := by timed rfl
let lean_s258 := by timed congr lean_s246 lean_s257
have lean_s259 : (Eq let14 let14) := by timed rfl
let lean_s260 := by timed congr lean_s246 lean_s259
have lean_s261 : (Eq let19 let19) := by timed rfl
let lean_s262 := by timed congr lean_s246 lean_s261
have lean_s263 : (Eq let24 let24) := by timed rfl
let lean_s264 := by timed congr lean_s262 lean_s263
let lean_s265 := by timed congr lean_s260 lean_s264
let lean_s266 := by timed congr lean_s258 lean_s265
let lean_s267 := by timed congr lean_s256 lean_s266
let lean_s268 := by timed congr lean_s253 lean_s267
let lean_s269 := by timed congr lean_s251 lean_s268
let lean_s270 := by timed congr lean_s249 lean_s269
have lean_s271 : (Eq let193 let134) := by timed congr lean_s248 lean_s270
have lean_s272 : (Eq let193 False) := by timed Eq.trans lean_s271 lean_r9
have lean_s273 : (Eq let46 False) := by timed Eq.trans lean_r23 lean_s272
let lean_s274 := by timed congr lean_s242 lean_s273
have lean_s275 : let230 := by timed rfl
have lean_s276 : (Eq let39 let39) := by timed rfl
let lean_s277 := by timed congr lean_s275 lean_s276
let lean_s278 := by timed congr lean_s275 lean_s66
have lean_s279 : let231 := by timed rfl
let lean_s280 := by timed congr lean_s279 lean_s11
let lean_s281 := by timed congr lean_s279 lean_s252
let lean_s282 := by timed congr lean_s281 lean_s182
have lean_s283 : (Eq let206 let164) := by timed congr lean_s280 lean_s282
have lean_s284 : (Eq let37 let164) := by timed Eq.trans lean_r45 lean_s283
let lean_s285 := by timed congr lean_s275 lean_s284
have lean_s286 : let231 := by timed rfl
let lean_s287 := by timed congr lean_s286 lean_s11
let lean_s288 := by timed congr lean_s286 lean_s13
let lean_s289 := by timed flipCongrArg lean_r24 [LE.le]
have lean_s290 : (Eq let31 let31) := by timed rfl
have lean_s291 : (Eq let32 let202) := by timed congr lean_s289 lean_s290
have lean_s292 : (Eq let32 let162) := by timed Eq.trans lean_s291 lean_r39
let lean_s293 := by timed congr lean_s288 lean_s292
have lean_s294 : (Eq let219 let163) := by timed congr lean_s287 lean_s293
have lean_s295 : (Eq let34 let163) := by timed Eq.trans lean_r56 lean_s294
let lean_s296 := by timed congr lean_s275 lean_s295
have lean_s297 : (Eq xx5f12 xx5f12) := by timed rfl
let lean_s298 := by timed flipCongrArg lean_s297 [Eq]
have lean_s299 : (Eq let30 let197) := by timed congr lean_s298 lean_r24
have lean_s300 : (Eq let30 let161) := by timed Eq.trans lean_s299 lean_r28
let lean_s301 := by timed congr lean_s275 lean_s300
let lean_s302 := by timed congr lean_s275 lean_r22
let lean_s303 := by timed congr lean_s275 lean_r20
let lean_s304 := by timed congr lean_s303 lean_s261
let lean_s305 := by timed congr lean_s302 lean_s304
let lean_s306 := by timed congr lean_s301 lean_s305
let lean_s307 := by timed congr lean_s296 lean_s306
let lean_s308 := by timed congr lean_s285 lean_s307
let lean_s309 := by timed congr lean_s278 lean_s308
have lean_s310 : (Eq let196 let165) := by timed congr lean_s277 lean_s309
have lean_s311 : (Eq let40 let165) := by timed Eq.trans lean_r27 lean_s310
let lean_s312 := by timed congr lean_s242 lean_s311
have lean_s313 : let230 := by timed rfl
have lean_s314 : (Eq let27 let27) := by timed rfl
let lean_s315 := by timed congr lean_s313 lean_s314
let lean_s316 := by timed congr lean_s313 lean_s32
let lean_s317 := by timed congr lean_s313 lean_s148
let lean_s318 := by timed congr lean_s313 lean_s222
let lean_s319 := by timed congr lean_s313 lean_s263
let lean_s320 := by timed congr lean_s313 lean_r22
let lean_s321 := by timed congr lean_s313 lean_r20
let lean_s322 := by timed congr lean_s321 lean_s261
let lean_s323 := by timed congr lean_s320 lean_s322
let lean_s324 := by timed congr lean_s319 lean_s323
let lean_s325 := by timed congr lean_s318 lean_s324
let lean_s326 := by timed congr lean_s317 lean_s325
let lean_s327 := by timed congr lean_s316 lean_s326
have lean_s328 : (Eq let217 let160) := by timed congr lean_s315 lean_s327
have lean_s329 : (Eq let28 let160) := by timed Eq.trans lean_r53 lean_s328
let lean_s330 := by timed congr lean_s312 lean_s329
let lean_s331 := by timed congr lean_s274 lean_s330
let lean_s332 := by timed congr lean_s245 lean_s331
let lean_s333 := by timed congr lean_s244 lean_s332
have lean_s334 : (Eq let194 let170) := by timed congr lean_s243 lean_s333
have lean_s335 : (Eq let194 let169) := by timed Eq.trans lean_s334 lean_r14
have lean_s336 : (Eq let53 let169) := by timed Eq.trans lean_r26 lean_s335
let lean_s337 := by timed congr lean_s0 lean_s336
let lean_s338 := by timed flipCongrArg lean_r11 [Or]
have lean_s339 : (Eq let18 let228) := by timed congr lean_s338 lean_r33
let lean_s340 := by timed congr lean_s0 lean_s339
have lean_s341 : (Eq let8 let8) := by timed rfl
let lean_s342 := by timed congr lean_s0 lean_s341
have lean_s343 : (Eq let5 let5) := by timed rfl
let lean_s344 := by timed congr lean_s0 lean_s343
have lean_s345 : (Eq let2 let2) := by timed rfl
let lean_s346 := by timed congr lean_s0 lean_s345
have lean_s347 : (Eq let1 let1) := by timed rfl
let lean_s348 := by timed congr lean_s346 lean_s347
let lean_s349 := by timed congr lean_s344 lean_s348
let lean_s350 := by timed congr lean_s342 lean_s349
let lean_s351 := by timed congr lean_s340 lean_s350
let lean_s352 := by timed congr lean_s337 lean_s351
let lean_s353 := by timed congr lean_s241 lean_s352
let lean_s354 := by timed congr lean_s137 lean_s353
let lean_s355 := by timed congr lean_s26 lean_s354
let lean_s356 := by timed congr lean_s24 lean_s355
let lean_s357 := by timed congr lean_s19 lean_s356
let lean_s358 := by timed congr lean_s14 lean_s357
let lean_s359 := by timed congr lean_s12 lean_s358
let lean_s360 := by timed congr lean_s10 lean_s359
let lean_s361 := by timed congr lean_s8 lean_s360
let lean_s362 := by timed congr lean_s6 lean_s361
let lean_s363 := by timed congr lean_s4 lean_s362
let lean_s364 := by timed congr lean_s2 lean_s363
have lean_s365 : (Eq let118 let229) := by timed congr lean_s1 lean_s364
have lean_s366 : (Eq let119 let229) := by timed Eq.trans lean_r0 lean_s365
have lean_s367 : let229 := by timed eqResolve lean_a62 lean_s366
have lean_s368 : let188 := by andElim lean_s367, 11
have lean_s369 : (Or let224 let188) := by timed @cnfOrPos [let187, let185, let184, let182, let176]
have lean_s370 : (Or let235 xx5f18) := by timed @cnfAndPos [let108, let25, let12, let93, let6, let7, xx5f18, let99, let86] 6
have lean_s371 : let229 := by timed eqResolve lean_a62 lean_s366
have lean_s372 : let228 := by andElim lean_s371, 14
have lean_s373 : (Or let227 xx5f1) := by timed @cnfAndPos [let12, xx5f1, let11] 1
have lean_s374 : let229 := by timed eqResolve lean_a62 lean_s366
have lean_s375 : let93 := by andElim lean_s374, 3
have lean_s376 : let227 := by R1 lean_s373, lean_s375, xx5f1, [(- 1), 0]
have lean_s377 : let136 := by R1 lean_s372, lean_s376, let199, [(- 1), 0]
have lean_s378 : let16 := by andElim lean_s377, 0
have lean_s379 : let235 := by R1 lean_s370, lean_s378, xx5f18, [(- 1), 0]
let lean_s380 := by R1 lean_s369, lean_s379, let187, [(- 1), 0]
have lean_s381 : (Or let234 xx5f1) := by timed @cnfAndPos [let102, let25, let12, xx5f1, let6, xx5f11, xx5f18, xx5f19, let86] 3
have lean_s382 : let93 := by andElim lean_s374, 3
have lean_s383 : let234 := by R1 lean_s381, lean_s382, xx5f1, [(- 1), 0]
let lean_s384 := by R1 lean_s380, lean_s383, let185, [(- 1), 0]
have lean_s385 : (Or let233 xx5f0) := by timed @cnfAndPos [let100, let25, xx5f0, xx5f1, xx5f10, let7, let16, let99, let86] 2
have lean_s386 : let229 := by timed eqResolve lean_a62 lean_s366
have lean_s387 : let12 := by andElim lean_s386, 2
have lean_s388 : let233 := by R1 lean_s385, lean_s387, xx5f0, [(- 1), 0]
let lean_s389 := by R1 lean_s384, lean_s388, let184, [(- 1), 0]
have lean_s390 : (Or let232 let173) := by timed @cnfAndPos [let97, xx5f15, let181, let180, let179, let171, let90, let89, let174, let173] 9
have lean_s391 : (Or let226 (Or xx5f1 let99)) := by timed cnfEquivPos2
have lean_s392 : let93 := by andElim lean_s374, 3
let lean_s393 := by R1 lean_s391, lean_s392, xx5f1, [(- 1), 0]
have lean_s394 : let136 := by R1 lean_s372, lean_s376, let199, [(- 1), 0]
have lean_s395 : xx5f19 := by andElim lean_s394, 1
have lean_s396 : let226 := by R2 lean_s393, lean_s395, xx5f19, [(- 1), 0]
have lean_s397 : let232 := by R1 lean_s390, lean_s396, let173, [(- 1), 0]
let lean_s398 := by R1 lean_s389, lean_s397, let182, [(- 1), 0]
have lean_s399 : (Or let225 let173) := by timed @cnfAndPos [let87, let25, let86, let6, xx5f11, let174, let173] 6
let lean_s400 := by R1 lean_s391, lean_s392, xx5f1, [(- 1), 0]
have lean_s401 : let226 := by R2 lean_s400, lean_s395, xx5f19, [(- 1), 0]
have lean_s402 : let225 := by R1 lean_s399, lean_s401, let173, [(- 1), 0]
have lean_s403 : let224 := by R1 lean_s398, lean_s402, let176, [(- 1), 0]
exact (show False from by timed contradiction lean_s368 lean_s403)


